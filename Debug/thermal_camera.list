
thermal_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008010  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008198  08008198  00018198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081b8  080081b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080081b8  080081b8  000181b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081c0  080081c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081c4  080081c4  000181c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080081c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00001570  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000157c  2000157c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000158a6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aa3  00000000  00000000  000358e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00038388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001170  00000000  00000000  000395f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a0b  00000000  00000000  0003a768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016616  00000000  00000000  0005e173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbba9  00000000  00000000  00074789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150332  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e2c  00000000  00000000  00150384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008180 	.word	0x08008180

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08008180 	.word	0x08008180

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <amg8833Init>:

#include "AMG8833.h"
#include "utils.h"
#include "stm32f4xx.h"

void amg8833Init(AMG8833 *inst,I2C_HandleTypeDef *hi2c,uint8_t ad_sel){
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	4613      	mov	r3, r2
 80004d8:	71fb      	strb	r3, [r7, #7]
	inst->adri2c= ad_sel ? ( AMG8833_I2C_BASE_ADR + 1 ) << 1 :
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <amg8833Init+0x18>
 80004e0:	22d2      	movs	r2, #210	; 0xd2
 80004e2:	e000      	b.n	80004e6 <amg8833Init+0x1a>
 80004e4:	22d0      	movs	r2, #208	; 0xd0
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	801a      	strh	r2, [r3, #0]
								AMG8833_I2C_BASE_ADR << 1;
	inst->hi2c=hi2c;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	68ba      	ldr	r2, [r7, #8]
 80004ee:	605a      	str	r2, [r3, #4]
}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <amg8833IsReady>:

uint8_t amg8833IsReady(AMG8833 *inst){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status=HAL_I2C_IsDeviceReady(inst->hi2c,inst->adri2c,5,10);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6858      	ldr	r0, [r3, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	8819      	ldrh	r1, [r3, #0]
 800050c:	230a      	movs	r3, #10
 800050e:	2205      	movs	r2, #5
 8000510:	f003 fc34 	bl	8003d7c <HAL_I2C_IsDeviceReady>
 8000514:	4603      	mov	r3, r0
 8000516:	73fb      	strb	r3, [r7, #15]
	return (uint8_t)(status==HAL_OK);
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	2b00      	cmp	r3, #0
 800051c:	bf0c      	ite	eq
 800051e:	2301      	moveq	r3, #1
 8000520:	2300      	movne	r3, #0
 8000522:	b2db      	uxtb	r3, r3
}
 8000524:	4618      	mov	r0, r3
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <amg8833ReadDMA>:
	return status;


}

HAL_StatusTypeDef amg8833ReadDMA(AMG8833 *inst,uint8_t *data){
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	status=HAL_I2C_Mem_Read_DMA(inst->hi2c,(uint16_t)inst->adri2c,AMG8833_T01L,
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6858      	ldr	r0, [r3, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	8819      	ldrh	r1, [r3, #0]
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2301      	movs	r3, #1
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	f003 fa83 	bl	8003a54 <HAL_I2C_Mem_Read_DMA>
 800054e:	4603      	mov	r3, r0
 8000550:	73fb      	strb	r3, [r7, #15]
			1,data,AMG8833_DS);

	return status;
 8000552:	7bfb      	ldrb	r3, [r7, #15]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <jstickInit>:
#include "Jstick.h"
#include "stm32f4xx.h"
#include "utils.h"


void jstickInit(Jstick *inst,ADC_HandleTypeDef *hadc,uint16_t errpin,GPIO_TypeDef *errport){
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	4613      	mov	r3, r2
 800056a:	80fb      	strh	r3, [r7, #6]
	inst->hadc=hadc;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	601a      	str	r2, [r3, #0]
	inst->errpin=errpin;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	88fa      	ldrh	r2, [r7, #6]
 8000576:	809a      	strh	r2, [r3, #4]
	inst->errport=errport;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	683a      	ldr	r2, [r7, #0]
 800057c:	609a      	str	r2, [r3, #8]

}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <jstickGetDirection>:


JstickDir jstickGetDirection(Jstick *inst){
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
	uint16_t raw_val;
	HAL_StatusTypeDef status;

	status=HAL_ADC_PollForConversion(inst->hadc,50);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2132      	movs	r1, #50	; 0x32
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fbb9 	bl	8001d10 <HAL_ADC_PollForConversion>
 800059e:	4603      	mov	r3, r0
 80005a0:	73fb      	strb	r3, [r7, #15]

	_FL_DEBUG(status,inst->errport,inst->errpin);
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00a      	beq.n	80005be <jstickGetDirection+0x34>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	889b      	ldrh	r3, [r3, #4]
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	430a      	orrs	r2, r1
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	e00a      	b.n	80005d4 <jstickGetDirection+0x4a>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	695a      	ldr	r2, [r3, #20]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	889b      	ldrh	r3, [r3, #4]
 80005c8:	43db      	mvns	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	400a      	ands	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
	if(status==HAL_OK){
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d111      	bne.n	80005fe <jstickGetDirection+0x74>
		raw_val=HAL_ADC_GetValue(inst->hadc);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fd32 	bl	8002048 <HAL_ADC_GetValue>
 80005e4:	4603      	mov	r3, r0
 80005e6:	81bb      	strh	r3, [r7, #12]

		if(raw_val>4000) return LEFT;
 80005e8:	89bb      	ldrh	r3, [r7, #12]
 80005ea:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80005ee:	d901      	bls.n	80005f4 <jstickGetDirection+0x6a>
 80005f0:	2301      	movs	r3, #1
 80005f2:	e005      	b.n	8000600 <jstickGetDirection+0x76>
		if(raw_val<100) return RIGHT;
 80005f4:	89bb      	ldrh	r3, [r7, #12]
 80005f6:	2b63      	cmp	r3, #99	; 0x63
 80005f8:	d801      	bhi.n	80005fe <jstickGetDirection+0x74>
 80005fa:	2302      	movs	r3, #2
 80005fc:	e000      	b.n	8000600 <jstickGetDirection+0x76>
	}

	return CENTER;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <stepInit>:
 */
#include "Step.h"
#include "utils.h"
#include "stm32f4xx.h"

void stepInit(Step *inst,uint16_t p0,uint16_t p1,uint16_t p2,uint16_t p3,GPIO_TypeDef *port){
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	4608      	mov	r0, r1
 8000612:	4611      	mov	r1, r2
 8000614:	461a      	mov	r2, r3
 8000616:	4603      	mov	r3, r0
 8000618:	817b      	strh	r3, [r7, #10]
 800061a:	460b      	mov	r3, r1
 800061c:	813b      	strh	r3, [r7, #8]
 800061e:	4613      	mov	r3, r2
 8000620:	80fb      	strh	r3, [r7, #6]
	inst->pins[0]=p0;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	897a      	ldrh	r2, [r7, #10]
 8000626:	801a      	strh	r2, [r3, #0]
	inst->pins[1]=p1;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	893a      	ldrh	r2, [r7, #8]
 800062c:	805a      	strh	r2, [r3, #2]
	inst->pins[2]=p2;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	88fa      	ldrh	r2, [r7, #6]
 8000632:	809a      	strh	r2, [r3, #4]
	inst->pins[3]=p3;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	8b3a      	ldrh	r2, [r7, #24]
 8000638:	80da      	strh	r2, [r3, #6]

	inst->port=port;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	69fa      	ldr	r2, [r7, #28]
 800063e:	609a      	str	r2, [r3, #8]
	inst->port->ODR&=~( inst->pins[0] | inst->pins[1] | inst->pins[2] | inst->pins[3] );
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	695a      	ldr	r2, [r3, #20]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	8819      	ldrh	r1, [r3, #0]
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	885b      	ldrh	r3, [r3, #2]
 800064e:	430b      	orrs	r3, r1
 8000650:	b299      	uxth	r1, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	889b      	ldrh	r3, [r3, #4]
 8000656:	430b      	orrs	r3, r1
 8000658:	b299      	uxth	r1, r3
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	88db      	ldrh	r3, [r3, #6]
 800065e:	430b      	orrs	r3, r1
 8000660:	b29b      	uxth	r3, r3
 8000662:	43db      	mvns	r3, r3
 8000664:	4619      	mov	r1, r3
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	400a      	ands	r2, r1
 800066c:	615a      	str	r2, [r3, #20]

}
 800066e:	bf00      	nop
 8000670:	3714      	adds	r7, #20
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <stepWave>:

/*if dir activate pins backward[pin 4-0] else forward[pin 0-4] in wave step mode*/
void stepWave(Step *inst,uint8_t dir){
 800067a:	b580      	push	{r7, lr}
 800067c:	b084      	sub	sp, #16
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	460b      	mov	r3, r1
 8000684:	70fb      	strb	r3, [r7, #3]

	inst->port->ODR&=~( inst->pins[0] | inst->pins[1] | inst->pins[2] | inst->pins[3] );
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	695a      	ldr	r2, [r3, #20]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	8819      	ldrh	r1, [r3, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	885b      	ldrh	r3, [r3, #2]
 8000694:	430b      	orrs	r3, r1
 8000696:	b299      	uxth	r1, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	889b      	ldrh	r3, [r3, #4]
 800069c:	430b      	orrs	r3, r1
 800069e:	b299      	uxth	r1, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	88db      	ldrh	r3, [r3, #6]
 80006a4:	430b      	orrs	r3, r1
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	4619      	mov	r1, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	400a      	ands	r2, r1
 80006b2:	615a      	str	r2, [r3, #20]
	inst->port->ODR|=inst->pins[0];
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	695a      	ldr	r2, [r3, #20]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	4619      	mov	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	430a      	orrs	r2, r1
 80006c6:	615a      	str	r2, [r3, #20]

	for(int i=0;i<4;i++){
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e030      	b.n	8000730 <stepWave+0xb6>
		inst->port->ODR&=~inst->pins[ dir ? (4-i) & 3 : i ];
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	689b      	ldr	r3, [r3, #8]
 80006d2:	695a      	ldr	r2, [r3, #20]
 80006d4:	78fb      	ldrb	r3, [r7, #3]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d004      	beq.n	80006e4 <stepWave+0x6a>
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	425b      	negs	r3, r3
 80006de:	f003 0303 	and.w	r3, r3, #3
 80006e2:	e000      	b.n	80006e6 <stepWave+0x6c>
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006ec:	43db      	mvns	r3, r3
 80006ee:	4619      	mov	r1, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	400a      	ands	r2, r1
 80006f6:	615a      	str	r2, [r3, #20]
		inst->port->ODR|=inst->pins[ dir ? 3-i : (i+1) & 3 ];
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	695a      	ldr	r2, [r3, #20]
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d003      	beq.n	800070c <stepWave+0x92>
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f1c3 0303 	rsb	r3, r3, #3
 800070a:	e003      	b.n	8000714 <stepWave+0x9a>
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3301      	adds	r3, #1
 8000710:	f003 0303 	and.w	r3, r3, #3
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800071a:	4619      	mov	r1, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	689b      	ldr	r3, [r3, #8]
 8000720:	430a      	orrs	r2, r1
 8000722:	615a      	str	r2, [r3, #20]

		//delayUS(500);
		HAL_Delay(2);
 8000724:	2002      	movs	r0, #2
 8000726:	f001 f9b9 	bl	8001a9c <HAL_Delay>
	for(int i=0;i<4;i++){
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b03      	cmp	r3, #3
 8000734:	ddcb      	ble.n	80006ce <stepWave+0x54>
	}
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <HAL_I2C_MemRxCpltCallback>:

/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image reading is now complete
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a05      	ldr	r2, [pc, #20]	; (8000764 <HAL_I2C_MemRxCpltCallback+0x24>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d102      	bne.n	8000758 <HAL_I2C_MemRxCpltCallback+0x18>
		AMG_RD_CPLT=1;
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <HAL_I2C_MemRxCpltCallback+0x28>)
 8000754:	2201      	movs	r2, #1
 8000756:	601a      	str	r2, [r3, #0]
	}
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40005400 	.word	0x40005400
 8000768:	22000018 	.word	0x22000018

0800076c <HAL_UART_TxCpltCallback>:

/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image output is now complete
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a05      	ldr	r2, [pc, #20]	; (8000790 <HAL_UART_TxCpltCallback+0x24>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d102      	bne.n	8000784 <HAL_UART_TxCpltCallback+0x18>
		AMG_OUT_CPLT=1;
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_UART_TxCpltCallback+0x28>)
 8000780:	2201      	movs	r2, #1
 8000782:	601a      	str	r2, [r3, #0]
	}
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	40004800 	.word	0x40004800
 8000794:	22000014 	.word	0x22000014

08000798 <HAL_ADC_ConvHalfCpltCallback>:
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_BUF_SZ sample were converted and put into audio_in_buf.
 * Main playback loop transfer from lower audio_in_buf to higher audio_out_buf
 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==ADC1){
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a0c      	ldr	r2, [pc, #48]	; (80007d8 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d105      	bne.n	80007b6 <HAL_ADC_ConvHalfCpltCallback+0x1e>
		audio_in_ptr1=&audio_in_buf1[0];
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <HAL_ADC_ConvHalfCpltCallback+0x44>)
 80007ac:	4a0c      	ldr	r2, [pc, #48]	; (80007e0 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 80007ae:	601a      	str	r2, [r3, #0]
		audio_out_ptr1=&audio_out_buf1[AUDIO_BUF_SZ];
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 80007b2:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
	}

	if(hadc->Instance==ADC2){
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d105      	bne.n	80007cc <HAL_ADC_ConvHalfCpltCallback+0x34>
		audio_in_ptr2=&audio_in_buf2[0];
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80007c2:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80007c4:	601a      	str	r2, [r3, #0]
		audio_out_ptr2=&audio_out_buf2[AUDIO_BUF_SZ];
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 80007c8:	4a0c      	ldr	r2, [pc, #48]	; (80007fc <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80007ca:	601a      	str	r2, [r3, #0]
	}
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	40012000 	.word	0x40012000
 80007dc:	20001520 	.word	0x20001520
 80007e0:	20000520 	.word	0x20000520
 80007e4:	20001524 	.word	0x20001524
 80007e8:	20000b20 	.word	0x20000b20
 80007ec:	40012100 	.word	0x40012100
 80007f0:	20001528 	.word	0x20001528
 80007f4:	20000d20 	.word	0x20000d20
 80007f8:	2000152c 	.word	0x2000152c
 80007fc:	20001320 	.word	0x20001320

08000800 <HAL_DAC_ConvCpltCallbackCh1>:
/*
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_TOT_BUF_SZ sample were taken from audio out buf and fed into DAC.
 * Main playback loop transfer from higher audio_in_buf to lower audio_out_buf
 */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	audio_in_ptr1=&audio_in_buf1[AUDIO_BUF_SZ];
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
 800080a:	4a09      	ldr	r2, [pc, #36]	; (8000830 <HAL_DAC_ConvCpltCallbackCh1+0x30>)
 800080c:	601a      	str	r2, [r3, #0]
	audio_out_ptr1=&audio_out_buf1[0];
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 8000810:	4a09      	ldr	r2, [pc, #36]	; (8000838 <HAL_DAC_ConvCpltCallbackCh1+0x38>)
 8000812:	601a      	str	r2, [r3, #0]

	audio_in_ptr2=&audio_in_buf2[AUDIO_BUF_SZ];
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_DAC_ConvCpltCallbackCh1+0x3c>)
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <HAL_DAC_ConvCpltCallbackCh1+0x40>)
 8000818:	601a      	str	r2, [r3, #0]
	audio_out_ptr2=&audio_out_buf2[0];
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <HAL_DAC_ConvCpltCallbackCh1+0x44>)
 800081c:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <HAL_DAC_ConvCpltCallbackCh1+0x48>)
 800081e:	601a      	str	r2, [r3, #0]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	20001520 	.word	0x20001520
 8000830:	20000720 	.word	0x20000720
 8000834:	20001524 	.word	0x20001524
 8000838:	20000920 	.word	0x20000920
 800083c:	20001528 	.word	0x20001528
 8000840:	20000f20 	.word	0x20000f20
 8000844:	2000152c 	.word	0x2000152c
 8000848:	20001120 	.word	0x20001120

0800084c <audioPlayback>:
/*
 * Audio playback process.
 * Transfer audio sample from input buffer to output buffer using pointers set by ISR
 */

void audioPlayback(){
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
	for(int i=0;i<AUDIO_BUF_SZ;i++){
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	e01c      	b.n	8000892 <audioPlayback+0x46>
		audio_out_ptr1[i]=audio_in_ptr1[i];
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <audioPlayback+0x5c>)
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	441a      	add	r2, r3
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <audioPlayback+0x60>)
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	440b      	add	r3, r1
 800086c:	8812      	ldrh	r2, [r2, #0]
 800086e:	b292      	uxth	r2, r2
 8000870:	801a      	strh	r2, [r3, #0]
		audio_out_ptr2[i]=audio_in_ptr2[i];
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <audioPlayback+0x64>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	441a      	add	r2, r3
 800087c:	4b0d      	ldr	r3, [pc, #52]	; (80008b4 <audioPlayback+0x68>)
 800087e:	6819      	ldr	r1, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	440b      	add	r3, r1
 8000886:	8812      	ldrh	r2, [r2, #0]
 8000888:	b292      	uxth	r2, r2
 800088a:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<AUDIO_BUF_SZ;i++){
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3301      	adds	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2bff      	cmp	r3, #255	; 0xff
 8000896:	dddf      	ble.n	8000858 <audioPlayback+0xc>
	}
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20001520 	.word	0x20001520
 80008ac:	20001524 	.word	0x20001524
 80008b0:	20001528 	.word	0x20001528
 80008b4:	2000152c 	.word	0x2000152c

080008b8 <thermalImgFSM>:
 * Timer 6 ISR
 * DMA1 Stream 0 (Thermal image I2C Rx) Rx Cplt ISR
 * DMA1 Stream 6 (Thermal image USART2 Tx) Tx Cplt ISR
 * and subsequently manage Timer 6 reset and DMA transfer sequence
 */
void thermalImgFSM(){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	  /*
	   * Thermal camera FSM
	   */
	  //If timer6 has expired
	  if(AMG_RD_START){
 80008bc:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <thermalImgFSM+0xb0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d01f      	beq.n	8000904 <thermalImgFSM+0x4c>

		  //Command DMA transfer from amg8833
		status=amg8833ReadDMA(&cam,img_buf);
 80008c4:	4929      	ldr	r1, [pc, #164]	; (800096c <thermalImgFSM+0xb4>)
 80008c6:	482a      	ldr	r0, [pc, #168]	; (8000970 <thermalImgFSM+0xb8>)
 80008c8:	f7ff fe30 	bl	800052c <amg8833ReadDMA>
 80008cc:	4603      	mov	r3, r0
 80008ce:	461a      	mov	r2, r3
 80008d0:	4b28      	ldr	r3, [pc, #160]	; (8000974 <thermalImgFSM+0xbc>)
 80008d2:	701a      	strb	r2, [r3, #0]
		_FL_DEBUG(status,GPIOD,GPIO_PIN_12);
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <thermalImgFSM+0xbc>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d006      	beq.n	80008ea <thermalImgFSM+0x32>
 80008dc:	4b26      	ldr	r3, [pc, #152]	; (8000978 <thermalImgFSM+0xc0>)
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	4a25      	ldr	r2, [pc, #148]	; (8000978 <thermalImgFSM+0xc0>)
 80008e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008e6:	6153      	str	r3, [r2, #20]
 80008e8:	e005      	b.n	80008f6 <thermalImgFSM+0x3e>
 80008ea:	4b23      	ldr	r3, [pc, #140]	; (8000978 <thermalImgFSM+0xc0>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a22      	ldr	r2, [pc, #136]	; (8000978 <thermalImgFSM+0xc0>)
 80008f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008f4:	6153      	str	r3, [r2, #20]
		if(status==HAL_OK)
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <thermalImgFSM+0xbc>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d102      	bne.n	8000904 <thermalImgFSM+0x4c>
			  //Clear ctrl bit
			  AMG_RD_START=0;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <thermalImgFSM+0xb0>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
	   }

	  //If DMA image reading was successful
	  if(AMG_RD_CPLT){
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <thermalImgFSM+0xc4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d020      	beq.n	800094e <thermalImgFSM+0x96>

		 //Command DMA transfer to uart2
		 status=HAL_UART_Transmit_DMA(&huart3,img_buf,AMG8833_DS);
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	4917      	ldr	r1, [pc, #92]	; (800096c <thermalImgFSM+0xb4>)
 8000910:	481b      	ldr	r0, [pc, #108]	; (8000980 <thermalImgFSM+0xc8>)
 8000912:	f006 fbf7 	bl	8007104 <HAL_UART_Transmit_DMA>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <thermalImgFSM+0xbc>)
 800091c:	701a      	strb	r2, [r3, #0]
		 _FL_DEBUG(status,GPIOD,GPIO_PIN_13);
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <thermalImgFSM+0xbc>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d006      	beq.n	8000934 <thermalImgFSM+0x7c>
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <thermalImgFSM+0xc0>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a13      	ldr	r2, [pc, #76]	; (8000978 <thermalImgFSM+0xc0>)
 800092c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	e005      	b.n	8000940 <thermalImgFSM+0x88>
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <thermalImgFSM+0xc0>)
 8000936:	695b      	ldr	r3, [r3, #20]
 8000938:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <thermalImgFSM+0xc0>)
 800093a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800093e:	6153      	str	r3, [r2, #20]
		 //_FL_EQ_DEBUG(status,HAL_BUSY,GPIOD,GPIO_PIN_15);
		 if(status==HAL_OK){
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <thermalImgFSM+0xbc>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d102      	bne.n	800094e <thermalImgFSM+0x96>
			 AMG_RD_CPLT=0;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <thermalImgFSM+0xc4>)
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
		 }
	  }
	  //if latest data were consumed in output, restart timer6
	  if(AMG_OUT_CPLT){
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <thermalImgFSM+0xcc>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d005      	beq.n	8000962 <thermalImgFSM+0xaa>
		  AMG_OUT_CPLT=0;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <thermalImgFSM+0xcc>)
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 800095c:	480a      	ldr	r0, [pc, #40]	; (8000988 <thermalImgFSM+0xd0>)
 800095e:	f005 ff51 	bl	8006804 <HAL_TIM_Base_Start_IT>
	  }
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2200001c 	.word	0x2200001c
 800096c:	2000049c 	.word	0x2000049c
 8000970:	2000047c 	.word	0x2000047c
 8000974:	2000051c 	.word	0x2000051c
 8000978:	40020c00 	.word	0x40020c00
 800097c:	22000018 	.word	0x22000018
 8000980:	200003d8 	.word	0x200003d8
 8000984:	22000014 	.word	0x22000014
 8000988:	20000390 	.word	0x20000390

0800098c <motorControl>:

/*Read joystick position and perform one motor step according to joystick direction*/
void motorControl(){
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	switch(jstickGetDirection(&js)){
 8000990:	480a      	ldr	r0, [pc, #40]	; (80009bc <motorControl+0x30>)
 8000992:	f7ff fdfa 	bl	800058a <jstickGetDirection>
 8000996:	4603      	mov	r3, r0
 8000998:	2b01      	cmp	r3, #1
 800099a:	d002      	beq.n	80009a2 <motorControl+0x16>
 800099c:	2b02      	cmp	r3, #2
 800099e:	d005      	beq.n	80009ac <motorControl+0x20>
	case RIGHT:
		stepWave(&motor,0);
		break;
	}

}
 80009a0:	e009      	b.n	80009b6 <motorControl+0x2a>
		stepWave(&motor,1);
 80009a2:	2101      	movs	r1, #1
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <motorControl+0x34>)
 80009a6:	f7ff fe68 	bl	800067a <stepWave>
		break;
 80009aa:	e004      	b.n	80009b6 <motorControl+0x2a>
		stepWave(&motor,0);
 80009ac:	2100      	movs	r1, #0
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <motorControl+0x34>)
 80009b0:	f7ff fe63 	bl	800067a <stepWave>
		break;
 80009b4:	bf00      	nop
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000490 	.word	0x20000490
 80009c0:	20000484 	.word	0x20000484

080009c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ca:	f001 f825 	bl	8001a18 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ce:	f000 f893 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d2:	f000 fb55 	bl	8001080 <MX_GPIO_Init>
  MX_TIM6_Init();
 80009d6:	f000 fa9d 	bl	8000f14 <MX_TIM6_Init>
  MX_DMA_Init();
 80009da:	f000 fafb 	bl	8000fd4 <MX_DMA_Init>
  MX_I2C1_Init();
 80009de:	f000 fa1f 	bl	8000e20 <MX_I2C1_Init>
  MX_ADC3_Init();
 80009e2:	f000 f997 	bl	8000d14 <MX_ADC3_Init>
  MX_ADC1_Init();
 80009e6:	f000 f8f1 	bl	8000bcc <MX_ADC1_Init>
  MX_DAC_Init();
 80009ea:	f000 f9e5 	bl	8000db8 <MX_DAC_Init>
  MX_TIM2_Init();
 80009ee:	f000 fa45 	bl	8000e7c <MX_TIM2_Init>
  MX_ADC2_Init();
 80009f2:	f000 f93d 	bl	8000c70 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 80009f6:	f000 fac3 	bl	8000f80 <MX_USART3_UART_Init>


  /*
   * Init DMA handle data structures for thermal image in/out transfer
   */
  HAL_DMA_Init(&hdma_i2c1_rx);
 80009fa:	482e      	ldr	r0, [pc, #184]	; (8000ab4 <main+0xf0>)
 80009fc:	f002 f914 	bl	8002c28 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart3_tx);
 8000a00:	482d      	ldr	r0, [pc, #180]	; (8000ab8 <main+0xf4>)
 8000a02:	f002 f911 	bl	8002c28 <HAL_DMA_Init>

  /*Init amg8833 sensor with ad select pin connected to the ground*/
  amg8833Init(&cam,&hi2c1,0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	492c      	ldr	r1, [pc, #176]	; (8000abc <main+0xf8>)
 8000a0a:	482d      	ldr	r0, [pc, #180]	; (8000ac0 <main+0xfc>)
 8000a0c:	f7ff fd5e 	bl	80004cc <amg8833Init>

  /*Wait until amg8833 is ready*/
  while(!amg8833IsReady(&cam)){
 8000a10:	e005      	b.n	8000a1e <main+0x5a>
	  GPIOD->ODR|=GPIO_PIN_14;
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <main+0x100>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	4a2b      	ldr	r2, [pc, #172]	; (8000ac4 <main+0x100>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6153      	str	r3, [r2, #20]
  while(!amg8833IsReady(&cam)){
 8000a1e:	4828      	ldr	r0, [pc, #160]	; (8000ac0 <main+0xfc>)
 8000a20:	f7ff fd6c 	bl	80004fc <amg8833IsReady>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0f3      	beq.n	8000a12 <main+0x4e>
  }

  GPIOD->ODR&=~GPIO_PIN_14;
 8000a2a:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <main+0x100>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <main+0x100>)
 8000a30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a34:	6153      	str	r3, [r2, #20]
  /*Start Timer 6 - Update event every 1/20 s*/
  HAL_TIM_Base_Start_IT(&htim6);
 8000a36:	4824      	ldr	r0, [pc, #144]	; (8000ac8 <main+0x104>)
 8000a38:	f005 fee4 	bl	8006804 <HAL_TIM_Base_Start_IT>

  /*
   * Start audio clock
   */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a3c:	4823      	ldr	r0, [pc, #140]	; (8000acc <main+0x108>)
 8000a3e:	f005 fee1 	bl	8006804 <HAL_TIM_Base_Start_IT>
  /*
   * Start audio DMA continous reading
   * ADC1 and DAC both works with htim2 conversion clock
   */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)audio_in_buf1,AUDIO_TOT_BUF_SZ);
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	4922      	ldr	r1, [pc, #136]	; (8000ad0 <main+0x10c>)
 8000a48:	4822      	ldr	r0, [pc, #136]	; (8000ad4 <main+0x110>)
 8000a4a:	f001 f9ed 	bl	8001e28 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint32_t*)audio_in_buf2,AUDIO_TOT_BUF_SZ);
 8000a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a52:	4921      	ldr	r1, [pc, #132]	; (8000ad8 <main+0x114>)
 8000a54:	4821      	ldr	r0, [pc, #132]	; (8000adc <main+0x118>)
 8000a56:	f001 f9e7 	bl	8001e28 <HAL_ADC_Start_DMA>

  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_1,(uint32_t*)audio_out_buf1,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a62:	4a1f      	ldr	r2, [pc, #124]	; (8000ae0 <main+0x11c>)
 8000a64:	2100      	movs	r1, #0
 8000a66:	481f      	ldr	r0, [pc, #124]	; (8000ae4 <main+0x120>)
 8000a68:	f001 feb4 	bl	80027d4 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_2,(uint32_t*)audio_out_buf2,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a74:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <main+0x124>)
 8000a76:	2110      	movs	r1, #16
 8000a78:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <main+0x120>)
 8000a7a:	f001 feab 	bl	80027d4 <HAL_DAC_Start_DMA>

  /*Init step motor data structure*/
  stepInit(&motor,GPIO_PIN_1,GPIO_PIN_2,GPIO_PIN_3,GPIO_PIN_4,GPIOD);
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <main+0x100>)
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	2310      	movs	r3, #16
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	2308      	movs	r3, #8
 8000a88:	2204      	movs	r2, #4
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	4817      	ldr	r0, [pc, #92]	; (8000aec <main+0x128>)
 8000a8e:	f7ff fdbb 	bl	8000608 <stepInit>

  /*Init joystick img_buf structure with yellow error pin*/
  jstickInit(&js,&hadc3,GPIO_PIN_12,GPIOD);
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <main+0x100>)
 8000a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a98:	4915      	ldr	r1, [pc, #84]	; (8000af0 <main+0x12c>)
 8000a9a:	4816      	ldr	r0, [pc, #88]	; (8000af4 <main+0x130>)
 8000a9c:	f7ff fd5e 	bl	800055c <jstickInit>
  /*Start ADC3 associated with joystick*/
  HAL_ADC_Start(&hadc3);
 8000aa0:	4813      	ldr	r0, [pc, #76]	; (8000af0 <main+0x12c>)
 8000aa2:	f001 f863 	bl	8001b6c <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  audioPlayback();
 8000aa6:	f7ff fed1 	bl	800084c <audioPlayback>
	  thermalImgFSM();
 8000aaa:	f7ff ff05 	bl	80008b8 <thermalImgFSM>
	  motorControl();
 8000aae:	f7ff ff6d 	bl	800098c <motorControl>
	  audioPlayback();
 8000ab2:	e7f8      	b.n	8000aa6 <main+0xe2>
 8000ab4:	200002e8 	.word	0x200002e8
 8000ab8:	2000041c 	.word	0x2000041c
 8000abc:	20000294 	.word	0x20000294
 8000ac0:	2000047c 	.word	0x2000047c
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	20000390 	.word	0x20000390
 8000acc:	20000348 	.word	0x20000348
 8000ad0:	20000520 	.word	0x20000520
 8000ad4:	20000028 	.word	0x20000028
 8000ad8:	20000d20 	.word	0x20000d20
 8000adc:	20000070 	.word	0x20000070
 8000ae0:	20000920 	.word	0x20000920
 8000ae4:	200001c0 	.word	0x200001c0
 8000ae8:	20001120 	.word	0x20001120
 8000aec:	20000484 	.word	0x20000484
 8000af0:	200000b8 	.word	0x200000b8
 8000af4:	20000490 	.word	0x20000490

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b094      	sub	sp, #80	; 0x50
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	2230      	movs	r2, #48	; 0x30
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f007 fb32 	bl	8008170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	4b28      	ldr	r3, [pc, #160]	; (8000bc4 <SystemClock_Config+0xcc>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a27      	ldr	r2, [pc, #156]	; (8000bc4 <SystemClock_Config+0xcc>)
 8000b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <SystemClock_Config+0xcc>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b46:	6013      	str	r3, [r2, #0]
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <SystemClock_Config+0xd0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b54:	2302      	movs	r3, #2
 8000b56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b60:	2302      	movs	r3, #2
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b64:	2300      	movs	r3, #0
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b68:	2308      	movs	r3, #8
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000b6c:	2332      	movs	r3, #50	; 0x32
 8000b6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b74:	2307      	movs	r3, #7
 8000b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b78:	f107 0320 	add.w	r3, r7, #32
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f005 f927 	bl	8005dd0 <HAL_RCC_OscConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b88:	f000 faea 	bl	8001160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b90:	2302      	movs	r3, #2
 8000b92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4618      	mov	r0, r3
 8000bac:	f005 fb88 	bl	80062c0 <HAL_RCC_ClockConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bb6:	f000 fad3 	bl	8001160 <Error_Handler>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3750      	adds	r7, #80	; 0x50
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bde:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000be0:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <MX_ADC1_Init+0xa0>)
 8000be2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000be4:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c04:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000c0e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c1a:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2e:	480e      	ldr	r0, [pc, #56]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000c30:	f000 ff58 	bl	8001ae4 <HAL_ADC_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000c3a:	f000 fa91 	bl	8001160 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c3e:	2306      	movs	r3, #6
 8000c40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000c50:	f001 fa1c 	bl	800208c <HAL_ADC_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c5a:	f000 fa81 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000028 	.word	0x20000028
 8000c6c:	40012000 	.word	0x40012000

08000c70 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c76:	463b      	mov	r3, r7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000c82:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000c84:	4a22      	ldr	r2, [pc, #136]	; (8000d10 <MX_ADC2_Init+0xa0>)
 8000c86:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c88:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c8e:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ca8:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000cb2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cd2:	480e      	ldr	r0, [pc, #56]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000cd4:	f000 ff06 	bl	8001ae4 <HAL_ADC_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8000cde:	f000 fa3f 	bl	8001160 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <MX_ADC2_Init+0x9c>)
 8000cf4:	f001 f9ca 	bl	800208c <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8000cfe:	f000 fa2f 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000070 	.word	0x20000070
 8000d10:	40012100 	.word	0x40012100

08000d14 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d28:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <MX_ADC3_Init+0x9c>)
 8000d2a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <MX_ADC3_Init+0xa0>)
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d72:	480e      	ldr	r0, [pc, #56]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d74:	f000 feb6 	bl	8001ae4 <HAL_ADC_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000d7e:	f000 f9ef 	bl	8001160 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d86:	2301      	movs	r3, #1
 8000d88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <MX_ADC3_Init+0x98>)
 8000d94:	f001 f97a 	bl	800208c <HAL_ADC_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000d9e:	f000 f9df 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000b8 	.word	0x200000b8
 8000db0:	40012200 	.word	0x40012200
 8000db4:	0f000001 	.word	0x0f000001

08000db8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_DAC_Init+0x60>)
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <MX_DAC_Init+0x64>)
 8000dca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000dcc:	4812      	ldr	r0, [pc, #72]	; (8000e18 <MX_DAC_Init+0x60>)
 8000dce:	f001 fcdf 	bl	8002790 <HAL_DAC_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000dd8:	f000 f9c2 	bl	8001160 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000ddc:	2324      	movs	r3, #36	; 0x24
 8000dde:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	480b      	ldr	r0, [pc, #44]	; (8000e18 <MX_DAC_Init+0x60>)
 8000dec:	f001 fe38 	bl	8002a60 <HAL_DAC_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000df6:	f000 f9b3 	bl	8001160 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2210      	movs	r2, #16
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_DAC_Init+0x60>)
 8000e02:	f001 fe2d 	bl	8002a60 <HAL_DAC_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000e0c:	f000 f9a8 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200001c0 	.word	0x200001c0
 8000e1c:	40007400 	.word	0x40007400

08000e20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e26:	4a13      	ldr	r2, [pc, #76]	; (8000e74 <MX_I2C1_Init+0x54>)
 8000e28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e2a:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <MX_I2C1_Init+0x58>)
 8000e2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_I2C1_Init+0x50>)
 8000e5e:	f002 fcb5 	bl	80037cc <HAL_I2C_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e68:	f000 f97a 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000294 	.word	0x20000294
 8000e74:	40005400 	.word	0x40005400
 8000e78:	00061a80 	.word	0x00061a80

08000e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	463b      	mov	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000e9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000eae:	22ff      	movs	r2, #255	; 0xff
 8000eb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ebe:	4814      	ldr	r0, [pc, #80]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000ec0:	f005 fc50 	bl	8006764 <HAL_TIM_Base_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000eca:	f000 f949 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000edc:	f005 fe0a 	bl	8006af4 <HAL_TIM_ConfigClockSource>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000ee6:	f000 f93b 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000eea:	2320      	movs	r3, #32
 8000eec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_TIM2_Init+0x94>)
 8000ef8:	f006 f826 	bl	8006f48 <HAL_TIMEx_MasterConfigSynchronization>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000f02:	f000 f92d 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000348 	.word	0x20000348

08000f14 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_TIM6_Init+0x64>)
 8000f24:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <MX_TIM6_Init+0x68>)
 8000f26:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8000f28:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <MX_TIM6_Init+0x64>)
 8000f2a:	2209      	movs	r2, #9
 8000f2c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_TIM6_Init+0x64>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_TIM6_Init+0x64>)
 8000f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f3a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_TIM6_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <MX_TIM6_Init+0x64>)
 8000f44:	f005 fc0e 	bl	8006764 <HAL_TIM_Base_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000f4e:	f000 f907 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <MX_TIM6_Init+0x64>)
 8000f60:	f005 fff2 	bl	8006f48 <HAL_TIMEx_MasterConfigSynchronization>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000f6a:	f000 f8f9 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000390 	.word	0x20000390
 8000f7c:	40001000 	.word	0x40001000

08000f80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <MX_USART3_UART_Init+0x50>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_USART3_UART_Init+0x4c>)
 8000fb8:	f006 f856 	bl	8007068 <HAL_UART_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000fc2:	f000 f8cd 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200003d8 	.word	0x200003d8
 8000fd0:	40004800 	.word	0x40004800

08000fd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <MX_DMA_Init+0xa8>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a26      	ldr	r2, [pc, #152]	; (800107c <MX_DMA_Init+0xa8>)
 8000fe4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b24      	ldr	r3, [pc, #144]	; (800107c <MX_DMA_Init+0xa8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <MX_DMA_Init+0xa8>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	; (800107c <MX_DMA_Init+0xa8>)
 8001000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_DMA_Init+0xa8>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	200b      	movs	r0, #11
 8001018:	f001 fb90 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800101c:	200b      	movs	r0, #11
 800101e:	f001 fba9 	bl	8002774 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	2100      	movs	r1, #0
 8001026:	200e      	movs	r0, #14
 8001028:	f001 fb88 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800102c:	200e      	movs	r0, #14
 800102e:	f001 fba1 	bl	8002774 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2010      	movs	r0, #16
 8001038:	f001 fb80 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800103c:	2010      	movs	r0, #16
 800103e:	f001 fb99 	bl	8002774 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2011      	movs	r0, #17
 8001048:	f001 fb78 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800104c:	2011      	movs	r0, #17
 800104e:	f001 fb91 	bl	8002774 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	2038      	movs	r0, #56	; 0x38
 8001058:	f001 fb70 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800105c:	2038      	movs	r0, #56	; 0x38
 800105e:	f001 fb89 	bl	8002774 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	203a      	movs	r0, #58	; 0x3a
 8001068:	f001 fb68 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800106c:	203a      	movs	r0, #58	; 0x3a
 800106e:	f001 fb81 	bl	8002774 <HAL_NVIC_EnableIRQ>

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <MX_GPIO_Init+0x9c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a1f      	ldr	r2, [pc, #124]	; (800111c <MX_GPIO_Init+0x9c>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_GPIO_Init+0x9c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_GPIO_Init+0x9c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <MX_GPIO_Init+0x9c>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_GPIO_Init+0x9c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_GPIO_Init+0x9c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a11      	ldr	r2, [pc, #68]	; (800111c <MX_GPIO_Init+0x9c>)
 80010d8:	f043 0308 	orr.w	r3, r3, #8
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_GPIO_Init+0x9c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80010ea:	2200      	movs	r2, #0
 80010ec:	f24f 011e 	movw	r1, #61470	; 0xf01e
 80010f0:	480b      	ldr	r0, [pc, #44]	; (8001120 <MX_GPIO_Init+0xa0>)
 80010f2:	f002 fb51 	bl	8003798 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80010f6:	f24f 031e 	movw	r3, #61470	; 0xf01e
 80010fa:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4619      	mov	r1, r3
 800110e:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_GPIO_Init+0xa0>)
 8001110:	f002 f9a6 	bl	8003460 <HAL_GPIO_Init>

}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40020c00 	.word	0x40020c00

08001124 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if(htim->Instance == TIM6){
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a08      	ldr	r2, [pc, #32]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d102      	bne.n	800113c <HAL_TIM_PeriodElapsedCallback+0x18>
		AMG_RD_START=1;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]
	 }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a06      	ldr	r2, [pc, #24]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d101      	bne.n	800114a <HAL_TIM_PeriodElapsedCallback+0x26>
    HAL_IncTick();
 8001146:	f000 fc89 	bl	8001a5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40001000 	.word	0x40001000
 8001158:	2200001c 	.word	0x2200001c
 800115c:	40010000 	.word	0x40010000

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <HAL_MspInit+0x4c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a0f      	ldr	r2, [pc, #60]	; (80011b8 <HAL_MspInit+0x4c>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_MspInit+0x4c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <HAL_MspInit+0x4c>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	4a08      	ldr	r2, [pc, #32]	; (80011b8 <HAL_MspInit+0x4c>)
 8001198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119c:	6413      	str	r3, [r2, #64]	; 0x40
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_MspInit+0x4c>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08e      	sub	sp, #56	; 0x38
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a76      	ldr	r2, [pc, #472]	; (80013b4 <HAL_ADC_MspInit+0x1f8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d159      	bne.n	8001292 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
 80011e2:	4b75      	ldr	r3, [pc, #468]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a74      	ldr	r2, [pc, #464]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b72      	ldr	r3, [pc, #456]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f6:	623b      	str	r3, [r7, #32]
 80011f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	4b6e      	ldr	r3, [pc, #440]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a6d      	ldr	r2, [pc, #436]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b6b      	ldr	r3, [pc, #428]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001216:	2340      	movs	r3, #64	; 0x40
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121a:	2303      	movs	r3, #3
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001226:	4619      	mov	r1, r3
 8001228:	4864      	ldr	r0, [pc, #400]	; (80013bc <HAL_ADC_MspInit+0x200>)
 800122a:	f002 f919 	bl	8003460 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800122e:	4b64      	ldr	r3, [pc, #400]	; (80013c0 <HAL_ADC_MspInit+0x204>)
 8001230:	4a64      	ldr	r2, [pc, #400]	; (80013c4 <HAL_ADC_MspInit+0x208>)
 8001232:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001234:	4b62      	ldr	r3, [pc, #392]	; (80013c0 <HAL_ADC_MspInit+0x204>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800123a:	4b61      	ldr	r3, [pc, #388]	; (80013c0 <HAL_ADC_MspInit+0x204>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001240:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <HAL_ADC_MspInit+0x204>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001246:	4b5e      	ldr	r3, [pc, #376]	; (80013c0 <HAL_ADC_MspInit+0x204>)
 8001248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800124c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800124e:	4b5c      	ldr	r3, [pc, #368]	; (80013c0 <HAL_ADC_MspInit+0x204>)
 8001250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001254:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001256:	4b5a      	ldr	r3, [pc, #360]	; (80013c0 <HAL_ADC_MspInit+0x204>)
 8001258:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800125c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800125e:	4b58      	ldr	r3, [pc, #352]	; (80013c0 <HAL_ADC_MspInit+0x204>)
 8001260:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001264:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001266:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <HAL_ADC_MspInit+0x204>)
 8001268:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800126c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800126e:	4b54      	ldr	r3, [pc, #336]	; (80013c0 <HAL_ADC_MspInit+0x204>)
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001274:	4852      	ldr	r0, [pc, #328]	; (80013c0 <HAL_ADC_MspInit+0x204>)
 8001276:	f001 fcd7 	bl	8002c28 <HAL_DMA_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001280:	f7ff ff6e 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a4e      	ldr	r2, [pc, #312]	; (80013c0 <HAL_ADC_MspInit+0x204>)
 8001288:	639a      	str	r2, [r3, #56]	; 0x38
 800128a:	4a4d      	ldr	r2, [pc, #308]	; (80013c0 <HAL_ADC_MspInit+0x204>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001290:	e08b      	b.n	80013aa <HAL_ADC_MspInit+0x1ee>
  else if(hadc->Instance==ADC2)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a4c      	ldr	r2, [pc, #304]	; (80013c8 <HAL_ADC_MspInit+0x20c>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d159      	bne.n	8001350 <HAL_ADC_MspInit+0x194>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	4b45      	ldr	r3, [pc, #276]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 80012a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a4:	4a44      	ldr	r2, [pc, #272]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 80012a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012aa:	6453      	str	r3, [r2, #68]	; 0x44
 80012ac:	4b42      	ldr	r3, [pc, #264]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 80012ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4a3d      	ldr	r2, [pc, #244]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d8:	2303      	movs	r3, #3
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	4619      	mov	r1, r3
 80012e6:	4835      	ldr	r0, [pc, #212]	; (80013bc <HAL_ADC_MspInit+0x200>)
 80012e8:	f002 f8ba 	bl	8003460 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80012ec:	4b37      	ldr	r3, [pc, #220]	; (80013cc <HAL_ADC_MspInit+0x210>)
 80012ee:	4a38      	ldr	r2, [pc, #224]	; (80013d0 <HAL_ADC_MspInit+0x214>)
 80012f0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80012f2:	4b36      	ldr	r3, [pc, #216]	; (80013cc <HAL_ADC_MspInit+0x210>)
 80012f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012f8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <HAL_ADC_MspInit+0x210>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001300:	4b32      	ldr	r3, [pc, #200]	; (80013cc <HAL_ADC_MspInit+0x210>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <HAL_ADC_MspInit+0x210>)
 8001308:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800130c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800130e:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <HAL_ADC_MspInit+0x210>)
 8001310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001314:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <HAL_ADC_MspInit+0x210>)
 8001318:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800131c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_ADC_MspInit+0x210>)
 8001320:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001324:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <HAL_ADC_MspInit+0x210>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_ADC_MspInit+0x210>)
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001332:	4826      	ldr	r0, [pc, #152]	; (80013cc <HAL_ADC_MspInit+0x210>)
 8001334:	f001 fc78 	bl	8002c28 <HAL_DMA_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_ADC_MspInit+0x186>
      Error_Handler();
 800133e:	f7ff ff0f 	bl	8001160 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a21      	ldr	r2, [pc, #132]	; (80013cc <HAL_ADC_MspInit+0x210>)
 8001346:	639a      	str	r2, [r3, #56]	; 0x38
 8001348:	4a20      	ldr	r2, [pc, #128]	; (80013cc <HAL_ADC_MspInit+0x210>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800134e:	e02c      	b.n	80013aa <HAL_ADC_MspInit+0x1ee>
  else if(hadc->Instance==ADC3)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <HAL_ADC_MspInit+0x218>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d127      	bne.n	80013aa <HAL_ADC_MspInit+0x1ee>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 8001364:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_ADC_MspInit+0x1fc>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001392:	2301      	movs	r3, #1
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001396:	2303      	movs	r3, #3
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_ADC_MspInit+0x200>)
 80013a6:	f002 f85b 	bl	8003460 <HAL_GPIO_Init>
}
 80013aa:	bf00      	nop
 80013ac:	3738      	adds	r7, #56	; 0x38
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40012000 	.word	0x40012000
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	20000100 	.word	0x20000100
 80013c4:	40026410 	.word	0x40026410
 80013c8:	40012100 	.word	0x40012100
 80013cc:	20000160 	.word	0x20000160
 80013d0:	40026440 	.word	0x40026440
 80013d4:	40012200 	.word	0x40012200

080013d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	; 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a4c      	ldr	r2, [pc, #304]	; (8001528 <HAL_DAC_MspInit+0x150>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	f040 8092 	bne.w	8001520 <HAL_DAC_MspInit+0x148>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	4b4a      	ldr	r3, [pc, #296]	; (800152c <HAL_DAC_MspInit+0x154>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	4a49      	ldr	r2, [pc, #292]	; (800152c <HAL_DAC_MspInit+0x154>)
 8001406:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800140a:	6413      	str	r3, [r2, #64]	; 0x40
 800140c:	4b47      	ldr	r3, [pc, #284]	; (800152c <HAL_DAC_MspInit+0x154>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	4b43      	ldr	r3, [pc, #268]	; (800152c <HAL_DAC_MspInit+0x154>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	4a42      	ldr	r2, [pc, #264]	; (800152c <HAL_DAC_MspInit+0x154>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	6313      	str	r3, [r2, #48]	; 0x30
 8001428:	4b40      	ldr	r3, [pc, #256]	; (800152c <HAL_DAC_MspInit+0x154>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001434:	2330      	movs	r3, #48	; 0x30
 8001436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	483a      	ldr	r0, [pc, #232]	; (8001530 <HAL_DAC_MspInit+0x158>)
 8001448:	f002 f80a 	bl	8003460 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800144c:	4b39      	ldr	r3, [pc, #228]	; (8001534 <HAL_DAC_MspInit+0x15c>)
 800144e:	4a3a      	ldr	r2, [pc, #232]	; (8001538 <HAL_DAC_MspInit+0x160>)
 8001450:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_DAC_MspInit+0x15c>)
 8001454:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001458:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800145a:	4b36      	ldr	r3, [pc, #216]	; (8001534 <HAL_DAC_MspInit+0x15c>)
 800145c:	2240      	movs	r2, #64	; 0x40
 800145e:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001460:	4b34      	ldr	r3, [pc, #208]	; (8001534 <HAL_DAC_MspInit+0x15c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001466:	4b33      	ldr	r3, [pc, #204]	; (8001534 <HAL_DAC_MspInit+0x15c>)
 8001468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800146c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800146e:	4b31      	ldr	r3, [pc, #196]	; (8001534 <HAL_DAC_MspInit+0x15c>)
 8001470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001474:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001476:	4b2f      	ldr	r3, [pc, #188]	; (8001534 <HAL_DAC_MspInit+0x15c>)
 8001478:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <HAL_DAC_MspInit+0x15c>)
 8001480:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001484:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001486:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <HAL_DAC_MspInit+0x15c>)
 8001488:	2200      	movs	r2, #0
 800148a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800148c:	4b29      	ldr	r3, [pc, #164]	; (8001534 <HAL_DAC_MspInit+0x15c>)
 800148e:	2200      	movs	r2, #0
 8001490:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001492:	4828      	ldr	r0, [pc, #160]	; (8001534 <HAL_DAC_MspInit+0x15c>)
 8001494:	f001 fbc8 	bl	8002c28 <HAL_DMA_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800149e:	f7ff fe5f 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a23      	ldr	r2, [pc, #140]	; (8001534 <HAL_DAC_MspInit+0x15c>)
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	4a22      	ldr	r2, [pc, #136]	; (8001534 <HAL_DAC_MspInit+0x15c>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <HAL_DAC_MspInit+0x164>)
 80014b0:	4a23      	ldr	r2, [pc, #140]	; (8001540 <HAL_DAC_MspInit+0x168>)
 80014b2:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80014b4:	4b21      	ldr	r3, [pc, #132]	; (800153c <HAL_DAC_MspInit+0x164>)
 80014b6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80014ba:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <HAL_DAC_MspInit+0x164>)
 80014be:	2240      	movs	r2, #64	; 0x40
 80014c0:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_DAC_MspInit+0x164>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <HAL_DAC_MspInit+0x164>)
 80014ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ce:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <HAL_DAC_MspInit+0x164>)
 80014d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014d6:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014d8:	4b18      	ldr	r3, [pc, #96]	; (800153c <HAL_DAC_MspInit+0x164>)
 80014da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014de:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <HAL_DAC_MspInit+0x164>)
 80014e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014e6:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <HAL_DAC_MspInit+0x164>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <HAL_DAC_MspInit+0x164>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80014f4:	4811      	ldr	r0, [pc, #68]	; (800153c <HAL_DAC_MspInit+0x164>)
 80014f6:	f001 fb97 	bl	8002c28 <HAL_DMA_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8001500:	f7ff fe2e 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a0d      	ldr	r2, [pc, #52]	; (800153c <HAL_DAC_MspInit+0x164>)
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	4a0c      	ldr	r2, [pc, #48]	; (800153c <HAL_DAC_MspInit+0x164>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2036      	movs	r0, #54	; 0x36
 8001516:	f001 f911 	bl	800273c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800151a:	2036      	movs	r0, #54	; 0x36
 800151c:	f001 f92a 	bl	8002774 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40007400 	.word	0x40007400
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	200001d4 	.word	0x200001d4
 8001538:	40026088 	.word	0x40026088
 800153c:	20000234 	.word	0x20000234
 8001540:	400260a0 	.word	0x400260a0

08001544 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a34      	ldr	r2, [pc, #208]	; (8001634 <HAL_I2C_MspInit+0xf0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d161      	bne.n	800162a <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
 800156a:	4b33      	ldr	r3, [pc, #204]	; (8001638 <HAL_I2C_MspInit+0xf4>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a32      	ldr	r2, [pc, #200]	; (8001638 <HAL_I2C_MspInit+0xf4>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b30      	ldr	r3, [pc, #192]	; (8001638 <HAL_I2C_MspInit+0xf4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001582:	23c0      	movs	r3, #192	; 0xc0
 8001584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001586:	2312      	movs	r3, #18
 8001588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001592:	2304      	movs	r3, #4
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001596:	f107 0314 	add.w	r3, r7, #20
 800159a:	4619      	mov	r1, r3
 800159c:	4827      	ldr	r0, [pc, #156]	; (800163c <HAL_I2C_MspInit+0xf8>)
 800159e:	f001 ff5f 	bl	8003460 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_I2C_MspInit+0xf4>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a23      	ldr	r2, [pc, #140]	; (8001638 <HAL_I2C_MspInit+0xf4>)
 80015ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <HAL_I2C_MspInit+0xf4>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_I2C_MspInit+0xfc>)
 80015c0:	4a20      	ldr	r2, [pc, #128]	; (8001644 <HAL_I2C_MspInit+0x100>)
 80015c2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <HAL_I2C_MspInit+0xfc>)
 80015c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015ca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015cc:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_I2C_MspInit+0xfc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d2:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_I2C_MspInit+0xfc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_I2C_MspInit+0xfc>)
 80015da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015de:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_I2C_MspInit+0xfc>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <HAL_I2C_MspInit+0xfc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_I2C_MspInit+0xfc>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <HAL_I2C_MspInit+0xfc>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015f8:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_I2C_MspInit+0xfc>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80015fe:	4810      	ldr	r0, [pc, #64]	; (8001640 <HAL_I2C_MspInit+0xfc>)
 8001600:	f001 fb12 	bl	8002c28 <HAL_DMA_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800160a:	f7ff fda9 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <HAL_I2C_MspInit+0xfc>)
 8001612:	639a      	str	r2, [r3, #56]	; 0x38
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <HAL_I2C_MspInit+0xfc>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	201f      	movs	r0, #31
 8001620:	f001 f88c 	bl	800273c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001624:	201f      	movs	r0, #31
 8001626:	f001 f8a5 	bl	8002774 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	; 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40005400 	.word	0x40005400
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400
 8001640:	200002e8 	.word	0x200002e8
 8001644:	40026010 	.word	0x40026010

08001648 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001658:	d10e      	bne.n	8001678 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <HAL_TIM_Base_MspInit+0x70>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a15      	ldr	r2, [pc, #84]	; (80016b8 <HAL_TIM_Base_MspInit+0x70>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <HAL_TIM_Base_MspInit+0x70>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001676:	e01a      	b.n	80016ae <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM6)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <HAL_TIM_Base_MspInit+0x74>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d115      	bne.n	80016ae <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_TIM_Base_MspInit+0x70>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <HAL_TIM_Base_MspInit+0x70>)
 800168c:	f043 0310 	orr.w	r3, r3, #16
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_TIM_Base_MspInit+0x70>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2036      	movs	r0, #54	; 0x36
 80016a4:	f001 f84a 	bl	800273c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016a8:	2036      	movs	r0, #54	; 0x36
 80016aa:	f001 f863 	bl	8002774 <HAL_NVIC_EnableIRQ>
}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40001000 	.word	0x40001000

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	; 0x28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a34      	ldr	r2, [pc, #208]	; (80017b0 <HAL_UART_MspInit+0xf0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d162      	bne.n	80017a8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <HAL_UART_MspInit+0xf4>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a32      	ldr	r2, [pc, #200]	; (80017b4 <HAL_UART_MspInit+0xf4>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <HAL_UART_MspInit+0xf4>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <HAL_UART_MspInit+0xf4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a2b      	ldr	r2, [pc, #172]	; (80017b4 <HAL_UART_MspInit+0xf4>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b29      	ldr	r3, [pc, #164]	; (80017b4 <HAL_UART_MspInit+0xf4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800171a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800172c:	2307      	movs	r3, #7
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4820      	ldr	r0, [pc, #128]	; (80017b8 <HAL_UART_MspInit+0xf8>)
 8001738:	f001 fe92 	bl	8003460 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <HAL_UART_MspInit+0xfc>)
 800173e:	4a20      	ldr	r2, [pc, #128]	; (80017c0 <HAL_UART_MspInit+0x100>)
 8001740:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001742:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001744:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001748:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_UART_MspInit+0xfc>)
 800174c:	2240      	movs	r2, #64	; 0x40
 800174e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800175c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_UART_MspInit+0xfc>)
 800176c:	2200      	movs	r2, #0
 800176e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001778:	2200      	movs	r2, #0
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800177c:	480f      	ldr	r0, [pc, #60]	; (80017bc <HAL_UART_MspInit+0xfc>)
 800177e:	f001 fa53 	bl	8002c28 <HAL_DMA_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001788:	f7ff fcea 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_UART_MspInit+0xfc>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2027      	movs	r0, #39	; 0x27
 800179e:	f000 ffcd 	bl	800273c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017a2:	2027      	movs	r0, #39	; 0x27
 80017a4:	f000 ffe6 	bl	8002774 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	3728      	adds	r7, #40	; 0x28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40004800 	.word	0x40004800
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020400 	.word	0x40020400
 80017bc:	2000041c 	.word	0x2000041c
 80017c0:	40026058 	.word	0x40026058

080017c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08c      	sub	sp, #48	; 0x30
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	2019      	movs	r0, #25
 80017da:	f000 ffaf 	bl	800273c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017de:	2019      	movs	r0, #25
 80017e0:	f000 ffc8 	bl	8002774 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <HAL_InitTick+0xa4>)
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	4a1e      	ldr	r2, [pc, #120]	; (8001868 <HAL_InitTick+0xa4>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6453      	str	r3, [r2, #68]	; 0x44
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <HAL_InitTick+0xa4>)
 80017f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001800:	f107 0210 	add.w	r2, r7, #16
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f004 ff78 	bl	8006700 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001810:	f004 ff62 	bl	80066d8 <HAL_RCC_GetPCLK2Freq>
 8001814:	4603      	mov	r3, r0
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181c:	4a13      	ldr	r2, [pc, #76]	; (800186c <HAL_InitTick+0xa8>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	0c9b      	lsrs	r3, r3, #18
 8001824:	3b01      	subs	r3, #1
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_InitTick+0xac>)
 800182a:	4a12      	ldr	r2, [pc, #72]	; (8001874 <HAL_InitTick+0xb0>)
 800182c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_InitTick+0xac>)
 8001830:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001834:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_InitTick+0xac>)
 8001838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800183a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_InitTick+0xac>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_InitTick+0xac>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001848:	4809      	ldr	r0, [pc, #36]	; (8001870 <HAL_InitTick+0xac>)
 800184a:	f004 ff8b 	bl	8006764 <HAL_TIM_Base_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d104      	bne.n	800185e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001854:	4806      	ldr	r0, [pc, #24]	; (8001870 <HAL_InitTick+0xac>)
 8001856:	f004 ffd5 	bl	8006804 <HAL_TIM_Base_Start_IT>
 800185a:	4603      	mov	r3, r0
 800185c:	e000      	b.n	8001860 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3730      	adds	r7, #48	; 0x30
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	431bde83 	.word	0x431bde83
 8001870:	20001530 	.word	0x20001530
 8001874:	40010000 	.word	0x40010000

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187c:	e7fe      	b.n	800187c <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <HardFault_Handler+0x4>

08001884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <MemManage_Handler+0x4>

0800188a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <UsageFault_Handler+0x4>

08001896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <DMA1_Stream0_IRQHandler+0x10>)
 80018d6:	f001 fb3f 	bl	8002f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200002e8 	.word	0x200002e8

080018e4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <DMA1_Stream3_IRQHandler+0x10>)
 80018ea:	f001 fb35 	bl	8002f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000041c 	.word	0x2000041c

080018f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80018fc:	4802      	ldr	r0, [pc, #8]	; (8001908 <DMA1_Stream5_IRQHandler+0x10>)
 80018fe:	f001 fb2b 	bl	8002f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200001d4 	.word	0x200001d4

0800190c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <DMA1_Stream6_IRQHandler+0x10>)
 8001912:	f001 fb21 	bl	8002f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000234 	.word	0x20000234

08001920 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001926:	f004 ffdd 	bl	80068e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20001530 	.word	0x20001530

08001934 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <I2C1_EV_IRQHandler+0x10>)
 800193a:	f002 fb4d 	bl	8003fd8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000294 	.word	0x20000294

08001948 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <USART3_IRQHandler+0x10>)
 800194e:	f005 fc57 	bl	8007200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200003d8 	.word	0x200003d8

0800195c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001960:	4803      	ldr	r0, [pc, #12]	; (8001970 <TIM6_DAC_IRQHandler+0x14>)
 8001962:	f001 f805 	bl	8002970 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001966:	4803      	ldr	r0, [pc, #12]	; (8001974 <TIM6_DAC_IRQHandler+0x18>)
 8001968:	f004 ffbc 	bl	80068e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200001c0 	.word	0x200001c0
 8001974:	20000390 	.word	0x20000390

08001978 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800197c:	4802      	ldr	r0, [pc, #8]	; (8001988 <DMA2_Stream0_IRQHandler+0x10>)
 800197e:	f001 faeb 	bl	8002f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000100 	.word	0x20000100

0800198c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <DMA2_Stream2_IRQHandler+0x10>)
 8001992:	f001 fae1 	bl	8002f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000160 	.word	0x20000160

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ca:	490e      	ldr	r1, [pc, #56]	; (8001a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019e0:	4c0b      	ldr	r4, [pc, #44]	; (8001a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ee:	f7ff ffd7 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f2:	f006 fb99 	bl	8008128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f6:	f7fe ffe5 	bl	80009c4 <main>
  bx  lr    
 80019fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001a08:	080081c8 	.word	0x080081c8
  ldr r2, =_sbss
 8001a0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001a10:	2000157c 	.word	0x2000157c

08001a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC_IRQHandler>
	...

08001a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <HAL_Init+0x40>)
 8001a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <HAL_Init+0x40>)
 8001a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <HAL_Init+0x40>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 fe70 	bl	8002726 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7ff febc 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff fb8e 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20001578 	.word	0x20001578

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20001578 	.word	0x20001578

08001a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff ffee 	bl	8001a84 <HAL_GetTick>
 8001aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ab4:	d005      	beq.n	8001ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_Delay+0x44>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ac2:	bf00      	nop
 8001ac4:	f7ff ffde 	bl	8001a84 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f7      	bhi.n	8001ac4 <HAL_Delay+0x28>
  {
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e033      	b.n	8001b62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fb5a 	bl	80011bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d118      	bne.n	8001b54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b2a:	f023 0302 	bic.w	r3, r3, #2
 8001b2e:	f043 0202 	orr.w	r2, r3, #2
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 fbca 	bl	80022d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f023 0303 	bic.w	r3, r3, #3
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	; 0x40
 8001b52:	e001      	b.n	8001b58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_ADC_Start+0x1a>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e0b2      	b.n	8001cec <HAL_ADC_Start+0x180>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d018      	beq.n	8001bce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bac:	4b52      	ldr	r3, [pc, #328]	; (8001cf8 <HAL_ADC_Start+0x18c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a52      	ldr	r2, [pc, #328]	; (8001cfc <HAL_ADC_Start+0x190>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	0c9a      	lsrs	r2, r3, #18
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bc0:	e002      	b.n	8001bc8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f9      	bne.n	8001bc2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d17a      	bne.n	8001cd2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c1a:	d106      	bne.n	8001c2a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	f023 0206 	bic.w	r2, r3, #6
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	645a      	str	r2, [r3, #68]	; 0x44
 8001c28:	e002      	b.n	8001c30 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c38:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <HAL_ADC_Start+0x194>)
 8001c3a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c44:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d12a      	bne.n	8001ca8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a2b      	ldr	r2, [pc, #172]	; (8001d04 <HAL_ADC_Start+0x198>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d015      	beq.n	8001c88 <HAL_ADC_Start+0x11c>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <HAL_ADC_Start+0x19c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d105      	bne.n	8001c72 <HAL_ADC_Start+0x106>
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_ADC_Start+0x194>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00a      	beq.n	8001c88 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <HAL_ADC_Start+0x1a0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d136      	bne.n	8001cea <HAL_ADC_Start+0x17e>
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_ADC_Start+0x194>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d130      	bne.n	8001cea <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d129      	bne.n	8001cea <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	e020      	b.n	8001cea <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <HAL_ADC_Start+0x198>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d11b      	bne.n	8001cea <HAL_ADC_Start+0x17e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d114      	bne.n	8001cea <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	e00b      	b.n	8001cea <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f043 0210 	orr.w	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	431bde83 	.word	0x431bde83
 8001d00:	40012300 	.word	0x40012300
 8001d04:	40012000 	.word	0x40012000
 8001d08:	40012100 	.word	0x40012100
 8001d0c:	40012200 	.word	0x40012200

08001d10 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2c:	d113      	bne.n	8001d56 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d3c:	d10b      	bne.n	8001d56 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f043 0220 	orr.w	r2, r3, #32
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e063      	b.n	8001e1e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d56:	f7ff fe95 	bl	8001a84 <HAL_GetTick>
 8001d5a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d5c:	e021      	b.n	8001da2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d64:	d01d      	beq.n	8001da2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_ADC_PollForConversion+0x6c>
 8001d6c:	f7ff fe8a 	bl	8001a84 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d212      	bcs.n	8001da2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d00b      	beq.n	8001da2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f043 0204 	orr.w	r2, r3, #4
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e03d      	b.n	8001e1e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d1d6      	bne.n	8001d5e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0212 	mvn.w	r2, #18
 8001db8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d123      	bne.n	8001e1c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d11f      	bne.n	8001e1c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d111      	bne.n	8001e1c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d105      	bne.n	8001e1c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_ADC_Start_DMA+0x1e>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e0e9      	b.n	800201a <HAL_ADC_Start_DMA+0x1f2>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d018      	beq.n	8001e8e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e6c:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <HAL_ADC_Start_DMA+0x1fc>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6d      	ldr	r2, [pc, #436]	; (8002028 <HAL_ADC_Start_DMA+0x200>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0c9a      	lsrs	r2, r3, #18
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e80:	e002      	b.n	8001e88 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1f9      	bne.n	8001e82 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9c:	d107      	bne.n	8001eae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eac:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	f040 80a1 	bne.w	8002000 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ee8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001efc:	d106      	bne.n	8001f0c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f023 0206 	bic.w	r2, r3, #6
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
 8001f0a:	e002      	b.n	8001f12 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f1a:	4b44      	ldr	r3, [pc, #272]	; (800202c <HAL_ADC_Start_DMA+0x204>)
 8001f1c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f22:	4a43      	ldr	r2, [pc, #268]	; (8002030 <HAL_ADC_Start_DMA+0x208>)
 8001f24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2a:	4a42      	ldr	r2, [pc, #264]	; (8002034 <HAL_ADC_Start_DMA+0x20c>)
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f32:	4a41      	ldr	r2, [pc, #260]	; (8002038 <HAL_ADC_Start_DMA+0x210>)
 8001f34:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f3e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f4e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f5e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	334c      	adds	r3, #76	; 0x4c
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f000 ff08 	bl	8002d84 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 031f 	and.w	r3, r3, #31
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d12a      	bne.n	8001fd6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a2d      	ldr	r2, [pc, #180]	; (800203c <HAL_ADC_Start_DMA+0x214>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d015      	beq.n	8001fb6 <HAL_ADC_Start_DMA+0x18e>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a2c      	ldr	r2, [pc, #176]	; (8002040 <HAL_ADC_Start_DMA+0x218>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d105      	bne.n	8001fa0 <HAL_ADC_Start_DMA+0x178>
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_ADC_Start_DMA+0x204>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a27      	ldr	r2, [pc, #156]	; (8002044 <HAL_ADC_Start_DMA+0x21c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d136      	bne.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
 8001faa:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_ADC_Start_DMA+0x204>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d130      	bne.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d129      	bne.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	e020      	b.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a18      	ldr	r2, [pc, #96]	; (800203c <HAL_ADC_Start_DMA+0x214>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d11b      	bne.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d114      	bne.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ffc:	609a      	str	r2, [r3, #8]
 8001ffe:	e00b      	b.n	8002018 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f043 0210 	orr.w	r2, r3, #16
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002010:	f043 0201 	orr.w	r2, r3, #1
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000000 	.word	0x20000000
 8002028:	431bde83 	.word	0x431bde83
 800202c:	40012300 	.word	0x40012300
 8002030:	080024c9 	.word	0x080024c9
 8002034:	08002583 	.word	0x08002583
 8002038:	0800259f 	.word	0x0800259f
 800203c:	40012000 	.word	0x40012000
 8002040:	40012100 	.word	0x40012100
 8002044:	40012200 	.word	0x40012200

08002048 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002056:	4618      	mov	r0, r3
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002062:	b480      	push	{r7}
 8002064:	b083      	sub	sp, #12
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1c>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e105      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x228>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b09      	cmp	r3, #9
 80020b6:	d925      	bls.n	8002104 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68d9      	ldr	r1, [r3, #12]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	4613      	mov	r3, r2
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4413      	add	r3, r2
 80020cc:	3b1e      	subs	r3, #30
 80020ce:	2207      	movs	r2, #7
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43da      	mvns	r2, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	400a      	ands	r2, r1
 80020dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68d9      	ldr	r1, [r3, #12]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	4603      	mov	r3, r0
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4403      	add	r3, r0
 80020f6:	3b1e      	subs	r3, #30
 80020f8:	409a      	lsls	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	e022      	b.n	800214a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6919      	ldr	r1, [r3, #16]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	4613      	mov	r3, r2
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	2207      	movs	r2, #7
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	400a      	ands	r2, r1
 8002126:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6919      	ldr	r1, [r3, #16]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	b29b      	uxth	r3, r3
 8002138:	4618      	mov	r0, r3
 800213a:	4603      	mov	r3, r0
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4403      	add	r3, r0
 8002140:	409a      	lsls	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	2b06      	cmp	r3, #6
 8002150:	d824      	bhi.n	800219c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	3b05      	subs	r3, #5
 8002164:	221f      	movs	r2, #31
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43da      	mvns	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	400a      	ands	r2, r1
 8002172:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	4618      	mov	r0, r3
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	3b05      	subs	r3, #5
 800218e:	fa00 f203 	lsl.w	r2, r0, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	635a      	str	r2, [r3, #52]	; 0x34
 800219a:	e04c      	b.n	8002236 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b0c      	cmp	r3, #12
 80021a2:	d824      	bhi.n	80021ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	3b23      	subs	r3, #35	; 0x23
 80021b6:	221f      	movs	r2, #31
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43da      	mvns	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	400a      	ands	r2, r1
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4413      	add	r3, r2
 80021de:	3b23      	subs	r3, #35	; 0x23
 80021e0:	fa00 f203 	lsl.w	r2, r0, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
 80021ec:	e023      	b.n	8002236 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	3b41      	subs	r3, #65	; 0x41
 8002200:	221f      	movs	r2, #31
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	400a      	ands	r2, r1
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	b29b      	uxth	r3, r3
 800221c:	4618      	mov	r0, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3b41      	subs	r3, #65	; 0x41
 800222a:	fa00 f203 	lsl.w	r2, r0, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002236:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_ADC_ConfigChannel+0x234>)
 8002238:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a21      	ldr	r2, [pc, #132]	; (80022c4 <HAL_ADC_ConfigChannel+0x238>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d109      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1cc>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b12      	cmp	r3, #18
 800224a:	d105      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <HAL_ADC_ConfigChannel+0x238>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d123      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x21e>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b10      	cmp	r3, #16
 8002268:	d003      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x1e6>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b11      	cmp	r3, #17
 8002270:	d11b      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b10      	cmp	r3, #16
 8002284:	d111      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_ADC_ConfigChannel+0x23c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a10      	ldr	r2, [pc, #64]	; (80022cc <HAL_ADC_ConfigChannel+0x240>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	0c9a      	lsrs	r2, r3, #18
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800229c:	e002      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f9      	bne.n	800229e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	40012300 	.word	0x40012300
 80022c4:	40012000 	.word	0x40012000
 80022c8:	20000000 	.word	0x20000000
 80022cc:	431bde83 	.word	0x431bde83

080022d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d8:	4b79      	ldr	r3, [pc, #484]	; (80024c0 <ADC_Init+0x1f0>)
 80022da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	431a      	orrs	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002304:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6859      	ldr	r1, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	021a      	lsls	r2, r3, #8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002328:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800234a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6899      	ldr	r1, [r3, #8]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002362:	4a58      	ldr	r2, [pc, #352]	; (80024c4 <ADC_Init+0x1f4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d022      	beq.n	80023ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002376:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6899      	ldr	r1, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002398:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6899      	ldr	r1, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	e00f      	b.n	80023ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0202 	bic.w	r2, r2, #2
 80023dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6899      	ldr	r1, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7e1b      	ldrb	r3, [r3, #24]
 80023e8:	005a      	lsls	r2, r3, #1
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01b      	beq.n	8002434 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800240a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800241a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6859      	ldr	r1, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	3b01      	subs	r3, #1
 8002428:	035a      	lsls	r2, r3, #13
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	e007      	b.n	8002444 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002442:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002452:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	3b01      	subs	r3, #1
 8002460:	051a      	lsls	r2, r3, #20
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6899      	ldr	r1, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002486:	025a      	lsls	r2, r3, #9
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800249e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6899      	ldr	r1, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	029a      	lsls	r2, r3, #10
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]
}
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	40012300 	.word	0x40012300
 80024c4:	0f000001 	.word	0x0f000001

080024c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d13c      	bne.n	800255c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d12b      	bne.n	8002554 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002500:	2b00      	cmp	r3, #0
 8002502:	d127      	bne.n	8002554 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800250e:	2b00      	cmp	r3, #0
 8002510:	d006      	beq.n	8002520 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800251c:	2b00      	cmp	r3, #0
 800251e:	d119      	bne.n	8002554 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0220 	bic.w	r2, r2, #32
 800252e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d105      	bne.n	8002554 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f7ff fd84 	bl	8002062 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800255a:	e00e      	b.n	800257a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7ff fd84 	bl	8002076 <HAL_ADC_ErrorCallback>
}
 800256e:	e004      	b.n	800257a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	4798      	blx	r3
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7fe f901 	bl	8000798 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2240      	movs	r2, #64	; 0x40
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f043 0204 	orr.w	r2, r3, #4
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f7ff fd59 	bl	8002076 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e8:	4013      	ands	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fe:	4a04      	ldr	r2, [pc, #16]	; (8002610 <__NVIC_SetPriorityGrouping+0x44>)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	60d3      	str	r3, [r2, #12]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <__NVIC_GetPriorityGrouping+0x18>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	f003 0307 	and.w	r3, r3, #7
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	2b00      	cmp	r3, #0
 8002640:	db0b      	blt.n	800265a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	f003 021f 	and.w	r2, r3, #31
 8002648:	4907      	ldr	r1, [pc, #28]	; (8002668 <__NVIC_EnableIRQ+0x38>)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2001      	movs	r0, #1
 8002652:	fa00 f202 	lsl.w	r2, r0, r2
 8002656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000e100 	.word	0xe000e100

0800266c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	6039      	str	r1, [r7, #0]
 8002676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db0a      	blt.n	8002696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	b2da      	uxtb	r2, r3
 8002684:	490c      	ldr	r1, [pc, #48]	; (80026b8 <__NVIC_SetPriority+0x4c>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	0112      	lsls	r2, r2, #4
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	440b      	add	r3, r1
 8002690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002694:	e00a      	b.n	80026ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4908      	ldr	r1, [pc, #32]	; (80026bc <__NVIC_SetPriority+0x50>)
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	3b04      	subs	r3, #4
 80026a4:	0112      	lsls	r2, r2, #4
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	440b      	add	r3, r1
 80026aa:	761a      	strb	r2, [r3, #24]
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000e100 	.word	0xe000e100
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b089      	sub	sp, #36	; 0x24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f1c3 0307 	rsb	r3, r3, #7
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf28      	it	cs
 80026de:	2304      	movcs	r3, #4
 80026e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3304      	adds	r3, #4
 80026e6:	2b06      	cmp	r3, #6
 80026e8:	d902      	bls.n	80026f0 <NVIC_EncodePriority+0x30>
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3b03      	subs	r3, #3
 80026ee:	e000      	b.n	80026f2 <NVIC_EncodePriority+0x32>
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	401a      	ands	r2, r3
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002708:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	43d9      	mvns	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	4313      	orrs	r3, r2
         );
}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ff4c 	bl	80025cc <__NVIC_SetPriorityGrouping>
}
 8002734:	bf00      	nop
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800274e:	f7ff ff61 	bl	8002614 <__NVIC_GetPriorityGrouping>
 8002752:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	6978      	ldr	r0, [r7, #20]
 800275a:	f7ff ffb1 	bl	80026c0 <NVIC_EncodePriority>
 800275e:	4602      	mov	r2, r0
 8002760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ff80 	bl	800266c <__NVIC_SetPriority>
}
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ff54 	bl	8002630 <__NVIC_EnableIRQ>
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e014      	b.n	80027cc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	791b      	ldrb	r3, [r3, #4]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d105      	bne.n	80027b8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7fe fe10 	bl	80013d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
 80027e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	795b      	ldrb	r3, [r3, #5]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_DAC_Start_DMA+0x22>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e0ab      	b.n	800294e <HAL_DAC_Start_DMA+0x17a>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2201      	movs	r2, #1
 80027fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2202      	movs	r2, #2
 8002800:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d12f      	bne.n	8002868 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a52      	ldr	r2, [pc, #328]	; (8002958 <HAL_DAC_Start_DMA+0x184>)
 800280e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a51      	ldr	r2, [pc, #324]	; (800295c <HAL_DAC_Start_DMA+0x188>)
 8002816:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a50      	ldr	r2, [pc, #320]	; (8002960 <HAL_DAC_Start_DMA+0x18c>)
 800281e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800282e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	2b08      	cmp	r3, #8
 8002834:	d013      	beq.n	800285e <HAL_DAC_Start_DMA+0x8a>
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d845      	bhi.n	80028c8 <HAL_DAC_Start_DMA+0xf4>
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_DAC_Start_DMA+0x76>
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	2b04      	cmp	r3, #4
 8002846:	d005      	beq.n	8002854 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002848:	e03e      	b.n	80028c8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	3308      	adds	r3, #8
 8002850:	613b      	str	r3, [r7, #16]
        break;
 8002852:	e03c      	b.n	80028ce <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	330c      	adds	r3, #12
 800285a:	613b      	str	r3, [r7, #16]
        break;
 800285c:	e037      	b.n	80028ce <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	3310      	adds	r3, #16
 8002864:	613b      	str	r3, [r7, #16]
        break;
 8002866:	e032      	b.n	80028ce <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a3d      	ldr	r2, [pc, #244]	; (8002964 <HAL_DAC_Start_DMA+0x190>)
 800286e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a3c      	ldr	r2, [pc, #240]	; (8002968 <HAL_DAC_Start_DMA+0x194>)
 8002876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a3b      	ldr	r2, [pc, #236]	; (800296c <HAL_DAC_Start_DMA+0x198>)
 800287e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800288e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	2b08      	cmp	r3, #8
 8002894:	d013      	beq.n	80028be <HAL_DAC_Start_DMA+0xea>
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d817      	bhi.n	80028cc <HAL_DAC_Start_DMA+0xf8>
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_DAC_Start_DMA+0xd6>
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d005      	beq.n	80028b4 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80028a8:	e010      	b.n	80028cc <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3314      	adds	r3, #20
 80028b0:	613b      	str	r3, [r7, #16]
        break;
 80028b2:	e00c      	b.n	80028ce <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3318      	adds	r3, #24
 80028ba:	613b      	str	r3, [r7, #16]
        break;
 80028bc:	e007      	b.n	80028ce <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	331c      	adds	r3, #28
 80028c4:	613b      	str	r3, [r7, #16]
        break;
 80028c6:	e002      	b.n	80028ce <HAL_DAC_Start_DMA+0xfa>
        break;
 80028c8:	bf00      	nop
 80028ca:	e000      	b.n	80028ce <HAL_DAC_Start_DMA+0xfa>
        break;
 80028cc:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d111      	bne.n	80028f8 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6898      	ldr	r0, [r3, #8]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	f000 fa49 	bl	8002d84 <HAL_DMA_Start_IT>
 80028f2:	4603      	mov	r3, r0
 80028f4:	75fb      	strb	r3, [r7, #23]
 80028f6:	e010      	b.n	800291a <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002906:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68d8      	ldr	r0, [r3, #12]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	f000 fa37 	bl	8002d84 <HAL_DMA_Start_IT>
 8002916:	4603      	mov	r3, r0
 8002918:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002920:	7dfb      	ldrb	r3, [r7, #23]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10c      	bne.n	8002940 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6819      	ldr	r1, [r3, #0]
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2201      	movs	r2, #1
 8002934:	409a      	lsls	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e005      	b.n	800294c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	f043 0204 	orr.w	r2, r3, #4
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800294c:	7dfb      	ldrb	r3, [r7, #23]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	08002aff 	.word	0x08002aff
 800295c:	08002b21 	.word	0x08002b21
 8002960:	08002b3d 	.word	0x08002b3d
 8002964:	08002bbb 	.word	0x08002bbb
 8002968:	08002bdd 	.word	0x08002bdd
 800296c:	08002bf9 	.word	0x08002bf9

08002970 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002986:	d120      	bne.n	80029ca <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800298e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002996:	d118      	bne.n	80029ca <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2204      	movs	r2, #4
 800299c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f043 0201 	orr.w	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029c2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f841 	bl	8002a4c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d8:	d120      	bne.n	8002a1c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e8:	d118      	bne.n	8002a1c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2204      	movs	r2, #4
 80029ee:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f043 0202 	orr.w	r2, r3, #2
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002a14:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f8c5 	bl	8002ba6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	795b      	ldrb	r3, [r3, #5]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_DAC_ConfigChannel+0x18>
 8002a74:	2302      	movs	r3, #2
 8002a76:	e03c      	b.n	8002af2 <HAL_DAC_ConfigChannel+0x92>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2202      	movs	r2, #2
 8002a82:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	22c0      	movs	r2, #192	; 0xc0
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43da      	mvns	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f7fd fe77 	bl	8000800 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	711a      	strb	r2, [r3, #4]
}
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f7ff ff78 	bl	8002a24 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f043 0204 	orr.w	r2, r3, #4
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7ff ff6e 	bl	8002a38 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	711a      	strb	r2, [r3, #4]
}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f7ff ffce 	bl	8002b6a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	711a      	strb	r2, [r3, #4]
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f7ff ffc7 	bl	8002b7e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f043 0204 	orr.w	r2, r3, #4
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f7ff ffbd 	bl	8002b92 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	711a      	strb	r2, [r3, #4]
}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c34:	f7fe ff26 	bl	8001a84 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e099      	b.n	8002d78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c64:	e00f      	b.n	8002c86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c66:	f7fe ff0d 	bl	8001a84 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d908      	bls.n	8002c86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2220      	movs	r2, #32
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e078      	b.n	8002d78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e8      	bne.n	8002c66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <HAL_DMA_Init+0x158>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d107      	bne.n	8002cf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f023 0307 	bic.w	r3, r3, #7
 8002d06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d117      	bne.n	8002d4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00e      	beq.n	8002d4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fb1b 	bl	8003368 <DMA_CheckFifoParam>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d008      	beq.n	8002d4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2240      	movs	r2, #64	; 0x40
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d46:	2301      	movs	r3, #1
 8002d48:	e016      	b.n	8002d78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fad2 	bl	80032fc <DMA_CalcBaseAndBitshift>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	223f      	movs	r2, #63	; 0x3f
 8002d62:	409a      	lsls	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	f010803f 	.word	0xf010803f

08002d84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
 8002d90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_DMA_Start_IT+0x26>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e040      	b.n	8002e2c <HAL_DMA_Start_IT+0xa8>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d12f      	bne.n	8002e1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	68b9      	ldr	r1, [r7, #8]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f000 fa64 	bl	80032a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ddc:	223f      	movs	r2, #63	; 0x3f
 8002dde:	409a      	lsls	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0216 	orr.w	r2, r2, #22
 8002df2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0208 	orr.w	r2, r2, #8
 8002e0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e005      	b.n	8002e2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
 8002e28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e42:	f7fe fe1f 	bl	8001a84 <HAL_GetTick>
 8002e46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d008      	beq.n	8002e66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2280      	movs	r2, #128	; 0x80
 8002e58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e052      	b.n	8002f0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0216 	bic.w	r2, r2, #22
 8002e74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_DMA_Abort+0x62>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d007      	beq.n	8002ea6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0208 	bic.w	r2, r2, #8
 8002ea4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0201 	bic.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eb6:	e013      	b.n	8002ee0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eb8:	f7fe fde4 	bl	8001a84 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b05      	cmp	r3, #5
 8002ec4:	d90c      	bls.n	8002ee0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2203      	movs	r2, #3
 8002ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e015      	b.n	8002f0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1e4      	bne.n	8002eb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef2:	223f      	movs	r2, #63	; 0x3f
 8002ef4:	409a      	lsls	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d004      	beq.n	8002f32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00c      	b.n	8002f4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2205      	movs	r2, #5
 8002f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f64:	4b8e      	ldr	r3, [pc, #568]	; (80031a0 <HAL_DMA_IRQHandler+0x248>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a8e      	ldr	r2, [pc, #568]	; (80031a4 <HAL_DMA_IRQHandler+0x24c>)
 8002f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6e:	0a9b      	lsrs	r3, r3, #10
 8002f70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	2208      	movs	r2, #8
 8002f84:	409a      	lsls	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01a      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0204 	bic.w	r2, r2, #4
 8002faa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc8:	2201      	movs	r2, #1
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d012      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff2:	f043 0202 	orr.w	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffe:	2204      	movs	r2, #4
 8003000:	409a      	lsls	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d012      	beq.n	8003030 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	2204      	movs	r2, #4
 800301e:	409a      	lsls	r2, r3
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003028:	f043 0204 	orr.w	r2, r3, #4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	2210      	movs	r2, #16
 8003036:	409a      	lsls	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d043      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d03c      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003052:	2210      	movs	r2, #16
 8003054:	409a      	lsls	r2, r3
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d018      	beq.n	800309a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d024      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	4798      	blx	r3
 8003086:	e01f      	b.n	80030c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01b      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	4798      	blx	r3
 8003098:	e016      	b.n	80030c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d107      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0208 	bic.w	r2, r2, #8
 80030b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	2220      	movs	r2, #32
 80030ce:	409a      	lsls	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 808f 	beq.w	80031f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8087 	beq.w	80031f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ee:	2220      	movs	r2, #32
 80030f0:	409a      	lsls	r2, r3
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d136      	bne.n	8003170 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0216 	bic.w	r2, r2, #22
 8003110:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695a      	ldr	r2, [r3, #20]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003120:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d103      	bne.n	8003132 <HAL_DMA_IRQHandler+0x1da>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f022 0208 	bic.w	r2, r2, #8
 8003140:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003146:	223f      	movs	r2, #63	; 0x3f
 8003148:	409a      	lsls	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003162:	2b00      	cmp	r3, #0
 8003164:	d07e      	beq.n	8003264 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	4798      	blx	r3
        }
        return;
 800316e:	e079      	b.n	8003264 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d01d      	beq.n	80031ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003190:	2b00      	cmp	r3, #0
 8003192:	d031      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4798      	blx	r3
 800319c:	e02c      	b.n	80031f8 <HAL_DMA_IRQHandler+0x2a0>
 800319e:	bf00      	nop
 80031a0:	20000000 	.word	0x20000000
 80031a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d023      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	4798      	blx	r3
 80031b8:	e01e      	b.n	80031f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10f      	bne.n	80031e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0210 	bic.w	r2, r2, #16
 80031d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d032      	beq.n	8003266 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d022      	beq.n	8003252 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2205      	movs	r2, #5
 8003210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0201 	bic.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	3301      	adds	r3, #1
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	429a      	cmp	r2, r3
 800322e:	d307      	bcc.n	8003240 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f2      	bne.n	8003224 <HAL_DMA_IRQHandler+0x2cc>
 800323e:	e000      	b.n	8003242 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003240:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d005      	beq.n	8003266 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
 8003262:	e000      	b.n	8003266 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003264:	bf00      	nop
    }
  }
}
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800327a:	b2db      	uxtb	r3, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b40      	cmp	r3, #64	; 0x40
 80032cc:	d108      	bne.n	80032e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032de:	e007      	b.n	80032f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	60da      	str	r2, [r3, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	3b10      	subs	r3, #16
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <DMA_CalcBaseAndBitshift+0x64>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003316:	4a13      	ldr	r2, [pc, #76]	; (8003364 <DMA_CalcBaseAndBitshift+0x68>)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4413      	add	r3, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	461a      	mov	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d909      	bls.n	800333e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003332:	f023 0303 	bic.w	r3, r3, #3
 8003336:	1d1a      	adds	r2, r3, #4
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	659a      	str	r2, [r3, #88]	; 0x58
 800333c:	e007      	b.n	800334e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003346:	f023 0303 	bic.w	r3, r3, #3
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	aaaaaaab 	.word	0xaaaaaaab
 8003364:	080081b0 	.word	0x080081b0

08003368 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11f      	bne.n	80033c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d856      	bhi.n	8003436 <DMA_CheckFifoParam+0xce>
 8003388:	a201      	add	r2, pc, #4	; (adr r2, 8003390 <DMA_CheckFifoParam+0x28>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033a1 	.word	0x080033a1
 8003394:	080033b3 	.word	0x080033b3
 8003398:	080033a1 	.word	0x080033a1
 800339c:	08003437 	.word	0x08003437
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d046      	beq.n	800343a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b0:	e043      	b.n	800343a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033ba:	d140      	bne.n	800343e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c0:	e03d      	b.n	800343e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ca:	d121      	bne.n	8003410 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d837      	bhi.n	8003442 <DMA_CheckFifoParam+0xda>
 80033d2:	a201      	add	r2, pc, #4	; (adr r2, 80033d8 <DMA_CheckFifoParam+0x70>)
 80033d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d8:	080033e9 	.word	0x080033e9
 80033dc:	080033ef 	.word	0x080033ef
 80033e0:	080033e9 	.word	0x080033e9
 80033e4:	08003401 	.word	0x08003401
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      break;
 80033ec:	e030      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d025      	beq.n	8003446 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033fe:	e022      	b.n	8003446 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003408:	d11f      	bne.n	800344a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800340e:	e01c      	b.n	800344a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d903      	bls.n	800341e <DMA_CheckFifoParam+0xb6>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d003      	beq.n	8003424 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800341c:	e018      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
      break;
 8003422:	e015      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00e      	beq.n	800344e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	73fb      	strb	r3, [r7, #15]
      break;
 8003434:	e00b      	b.n	800344e <DMA_CheckFifoParam+0xe6>
      break;
 8003436:	bf00      	nop
 8003438:	e00a      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 800343a:	bf00      	nop
 800343c:	e008      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 800343e:	bf00      	nop
 8003440:	e006      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 8003442:	bf00      	nop
 8003444:	e004      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 8003446:	bf00      	nop
 8003448:	e002      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;   
 800344a:	bf00      	nop
 800344c:	e000      	b.n	8003450 <DMA_CheckFifoParam+0xe8>
      break;
 800344e:	bf00      	nop
    }
  } 
  
  return status; 
 8003450:	7bfb      	ldrb	r3, [r7, #15]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop

08003460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800346a:	2300      	movs	r3, #0
 800346c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
 800347a:	e16b      	b.n	8003754 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800347c:	2201      	movs	r2, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4013      	ands	r3, r2
 800348e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	429a      	cmp	r2, r3
 8003496:	f040 815a 	bne.w	800374e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d005      	beq.n	80034b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d130      	bne.n	8003514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2203      	movs	r2, #3
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034e8:	2201      	movs	r2, #1
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 0201 	and.w	r2, r3, #1
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b03      	cmp	r3, #3
 800351e:	d017      	beq.n	8003550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	2203      	movs	r2, #3
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d123      	bne.n	80035a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	08da      	lsrs	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3208      	adds	r2, #8
 8003564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	220f      	movs	r2, #15
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4013      	ands	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4313      	orrs	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	08da      	lsrs	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3208      	adds	r2, #8
 800359e:	69b9      	ldr	r1, [r7, #24]
 80035a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2203      	movs	r2, #3
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4013      	ands	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f003 0203 	and.w	r2, r3, #3
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80b4 	beq.w	800374e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	4b60      	ldr	r3, [pc, #384]	; (800376c <HAL_GPIO_Init+0x30c>)
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	4a5f      	ldr	r2, [pc, #380]	; (800376c <HAL_GPIO_Init+0x30c>)
 80035f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035f4:	6453      	str	r3, [r2, #68]	; 0x44
 80035f6:	4b5d      	ldr	r3, [pc, #372]	; (800376c <HAL_GPIO_Init+0x30c>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003602:	4a5b      	ldr	r2, [pc, #364]	; (8003770 <HAL_GPIO_Init+0x310>)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	3302      	adds	r3, #2
 800360a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	220f      	movs	r2, #15
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a52      	ldr	r2, [pc, #328]	; (8003774 <HAL_GPIO_Init+0x314>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d02b      	beq.n	8003686 <HAL_GPIO_Init+0x226>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a51      	ldr	r2, [pc, #324]	; (8003778 <HAL_GPIO_Init+0x318>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d025      	beq.n	8003682 <HAL_GPIO_Init+0x222>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a50      	ldr	r2, [pc, #320]	; (800377c <HAL_GPIO_Init+0x31c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d01f      	beq.n	800367e <HAL_GPIO_Init+0x21e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a4f      	ldr	r2, [pc, #316]	; (8003780 <HAL_GPIO_Init+0x320>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d019      	beq.n	800367a <HAL_GPIO_Init+0x21a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a4e      	ldr	r2, [pc, #312]	; (8003784 <HAL_GPIO_Init+0x324>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <HAL_GPIO_Init+0x216>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a4d      	ldr	r2, [pc, #308]	; (8003788 <HAL_GPIO_Init+0x328>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00d      	beq.n	8003672 <HAL_GPIO_Init+0x212>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a4c      	ldr	r2, [pc, #304]	; (800378c <HAL_GPIO_Init+0x32c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d007      	beq.n	800366e <HAL_GPIO_Init+0x20e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a4b      	ldr	r2, [pc, #300]	; (8003790 <HAL_GPIO_Init+0x330>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d101      	bne.n	800366a <HAL_GPIO_Init+0x20a>
 8003666:	2307      	movs	r3, #7
 8003668:	e00e      	b.n	8003688 <HAL_GPIO_Init+0x228>
 800366a:	2308      	movs	r3, #8
 800366c:	e00c      	b.n	8003688 <HAL_GPIO_Init+0x228>
 800366e:	2306      	movs	r3, #6
 8003670:	e00a      	b.n	8003688 <HAL_GPIO_Init+0x228>
 8003672:	2305      	movs	r3, #5
 8003674:	e008      	b.n	8003688 <HAL_GPIO_Init+0x228>
 8003676:	2304      	movs	r3, #4
 8003678:	e006      	b.n	8003688 <HAL_GPIO_Init+0x228>
 800367a:	2303      	movs	r3, #3
 800367c:	e004      	b.n	8003688 <HAL_GPIO_Init+0x228>
 800367e:	2302      	movs	r3, #2
 8003680:	e002      	b.n	8003688 <HAL_GPIO_Init+0x228>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_GPIO_Init+0x228>
 8003686:	2300      	movs	r3, #0
 8003688:	69fa      	ldr	r2, [r7, #28]
 800368a:	f002 0203 	and.w	r2, r2, #3
 800368e:	0092      	lsls	r2, r2, #2
 8003690:	4093      	lsls	r3, r2
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4313      	orrs	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003698:	4935      	ldr	r1, [pc, #212]	; (8003770 <HAL_GPIO_Init+0x310>)
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	089b      	lsrs	r3, r3, #2
 800369e:	3302      	adds	r3, #2
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036a6:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <HAL_GPIO_Init+0x334>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4013      	ands	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ca:	4a32      	ldr	r2, [pc, #200]	; (8003794 <HAL_GPIO_Init+0x334>)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036d0:	4b30      	ldr	r3, [pc, #192]	; (8003794 <HAL_GPIO_Init+0x334>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036f4:	4a27      	ldr	r2, [pc, #156]	; (8003794 <HAL_GPIO_Init+0x334>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036fa:	4b26      	ldr	r3, [pc, #152]	; (8003794 <HAL_GPIO_Init+0x334>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	43db      	mvns	r3, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4013      	ands	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003716:	69ba      	ldr	r2, [r7, #24]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800371e:	4a1d      	ldr	r2, [pc, #116]	; (8003794 <HAL_GPIO_Init+0x334>)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003724:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <HAL_GPIO_Init+0x334>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	43db      	mvns	r3, r3
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	4013      	ands	r3, r2
 8003732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003748:	4a12      	ldr	r2, [pc, #72]	; (8003794 <HAL_GPIO_Init+0x334>)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	3301      	adds	r3, #1
 8003752:	61fb      	str	r3, [r7, #28]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	2b0f      	cmp	r3, #15
 8003758:	f67f ae90 	bls.w	800347c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	3724      	adds	r7, #36	; 0x24
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800
 8003770:	40013800 	.word	0x40013800
 8003774:	40020000 	.word	0x40020000
 8003778:	40020400 	.word	0x40020400
 800377c:	40020800 	.word	0x40020800
 8003780:	40020c00 	.word	0x40020c00
 8003784:	40021000 	.word	0x40021000
 8003788:	40021400 	.word	0x40021400
 800378c:	40021800 	.word	0x40021800
 8003790:	40021c00 	.word	0x40021c00
 8003794:	40013c00 	.word	0x40013c00

08003798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
 80037a4:	4613      	mov	r3, r2
 80037a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037a8:	787b      	ldrb	r3, [r7, #1]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037b4:	e003      	b.n	80037be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037b6:	887b      	ldrh	r3, [r7, #2]
 80037b8:	041a      	lsls	r2, r3, #16
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	619a      	str	r2, [r3, #24]
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e12b      	b.n	8003a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd fea6 	bl	8001544 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2224      	movs	r2, #36	; 0x24
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800381e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800382e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003830:	f002 ff3e 	bl	80066b0 <HAL_RCC_GetPCLK1Freq>
 8003834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4a81      	ldr	r2, [pc, #516]	; (8003a40 <HAL_I2C_Init+0x274>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d807      	bhi.n	8003850 <HAL_I2C_Init+0x84>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a80      	ldr	r2, [pc, #512]	; (8003a44 <HAL_I2C_Init+0x278>)
 8003844:	4293      	cmp	r3, r2
 8003846:	bf94      	ite	ls
 8003848:	2301      	movls	r3, #1
 800384a:	2300      	movhi	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e006      	b.n	800385e <HAL_I2C_Init+0x92>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4a7d      	ldr	r2, [pc, #500]	; (8003a48 <HAL_I2C_Init+0x27c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	bf94      	ite	ls
 8003858:	2301      	movls	r3, #1
 800385a:	2300      	movhi	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e0e7      	b.n	8003a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4a78      	ldr	r2, [pc, #480]	; (8003a4c <HAL_I2C_Init+0x280>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	0c9b      	lsrs	r3, r3, #18
 8003870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a6a      	ldr	r2, [pc, #424]	; (8003a40 <HAL_I2C_Init+0x274>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d802      	bhi.n	80038a0 <HAL_I2C_Init+0xd4>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	3301      	adds	r3, #1
 800389e:	e009      	b.n	80038b4 <HAL_I2C_Init+0xe8>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	4a69      	ldr	r2, [pc, #420]	; (8003a50 <HAL_I2C_Init+0x284>)
 80038ac:	fba2 2303 	umull	r2, r3, r2, r3
 80038b0:	099b      	lsrs	r3, r3, #6
 80038b2:	3301      	adds	r3, #1
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	430b      	orrs	r3, r1
 80038ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	495c      	ldr	r1, [pc, #368]	; (8003a40 <HAL_I2C_Init+0x274>)
 80038d0:	428b      	cmp	r3, r1
 80038d2:	d819      	bhi.n	8003908 <HAL_I2C_Init+0x13c>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1e59      	subs	r1, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	fbb1 f3f3 	udiv	r3, r1, r3
 80038e2:	1c59      	adds	r1, r3, #1
 80038e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038e8:	400b      	ands	r3, r1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_I2C_Init+0x138>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1e59      	subs	r1, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038fc:	3301      	adds	r3, #1
 80038fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003902:	e051      	b.n	80039a8 <HAL_I2C_Init+0x1dc>
 8003904:	2304      	movs	r3, #4
 8003906:	e04f      	b.n	80039a8 <HAL_I2C_Init+0x1dc>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d111      	bne.n	8003934 <HAL_I2C_Init+0x168>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1e58      	subs	r0, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	440b      	add	r3, r1
 800391e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003922:	3301      	adds	r3, #1
 8003924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	e012      	b.n	800395a <HAL_I2C_Init+0x18e>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1e58      	subs	r0, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	0099      	lsls	r1, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	fbb0 f3f3 	udiv	r3, r0, r3
 800394a:	3301      	adds	r3, #1
 800394c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf0c      	ite	eq
 8003954:	2301      	moveq	r3, #1
 8003956:	2300      	movne	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Init+0x196>
 800395e:	2301      	movs	r3, #1
 8003960:	e022      	b.n	80039a8 <HAL_I2C_Init+0x1dc>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10e      	bne.n	8003988 <HAL_I2C_Init+0x1bc>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1e58      	subs	r0, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6859      	ldr	r1, [r3, #4]
 8003972:	460b      	mov	r3, r1
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	440b      	add	r3, r1
 8003978:	fbb0 f3f3 	udiv	r3, r0, r3
 800397c:	3301      	adds	r3, #1
 800397e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003986:	e00f      	b.n	80039a8 <HAL_I2C_Init+0x1dc>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e58      	subs	r0, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	0099      	lsls	r1, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	fbb0 f3f3 	udiv	r3, r0, r3
 800399e:	3301      	adds	r3, #1
 80039a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	6809      	ldr	r1, [r1, #0]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69da      	ldr	r2, [r3, #28]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6911      	ldr	r1, [r2, #16]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68d2      	ldr	r2, [r2, #12]
 80039e2:	4311      	orrs	r1, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	000186a0 	.word	0x000186a0
 8003a44:	001e847f 	.word	0x001e847f
 8003a48:	003d08ff 	.word	0x003d08ff
 8003a4c:	431bde83 	.word	0x431bde83
 8003a50:	10624dd3 	.word	0x10624dd3

08003a54 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	; 0x30
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	4611      	mov	r1, r2
 8003a60:	461a      	mov	r2, r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	817b      	strh	r3, [r7, #10]
 8003a66:	460b      	mov	r3, r1
 8003a68:	813b      	strh	r3, [r7, #8]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a6e:	f7fe f809 	bl	8001a84 <HAL_GetTick>
 8003a72:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	f040 8176 	bne.w	8003d72 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a86:	4b95      	ldr	r3, [pc, #596]	; (8003cdc <HAL_I2C_Mem_Read_DMA+0x288>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	08db      	lsrs	r3, r3, #3
 8003a8c:	4a94      	ldr	r2, [pc, #592]	; (8003ce0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	0a1a      	lsrs	r2, r3, #8
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009a      	lsls	r2, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d116      	bne.n	8003ada <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e14c      	b.n	8003d74 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d0db      	beq.n	8003aa0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_I2C_Mem_Read_DMA+0xa2>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e13e      	b.n	8003d74 <HAL_I2C_Mem_Read_DMA+0x320>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d007      	beq.n	8003b1c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0201 	orr.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2222      	movs	r2, #34	; 0x22
 8003b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2240      	movs	r2, #64	; 0x40
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a62      	ldr	r2, [pc, #392]	; (8003ce4 <HAL_I2C_Mem_Read_DMA+0x290>)
 8003b5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003b5e:	897a      	ldrh	r2, [r7, #10]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003b64:	893a      	ldrh	r2, [r7, #8]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003b6a:	88fa      	ldrh	r2, [r7, #6]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80cc 	beq.w	8003d18 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d02d      	beq.n	8003be4 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	4a56      	ldr	r2, [pc, #344]	; (8003ce8 <HAL_I2C_Mem_Read_DMA+0x294>)
 8003b8e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	4a55      	ldr	r2, [pc, #340]	; (8003cec <HAL_I2C_Mem_Read_DMA+0x298>)
 8003b96:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	2200      	movs	r2, #0
 8003bae:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3310      	adds	r3, #16
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bce:	f7ff f8d9 	bl	8002d84 <HAL_DMA_Start_IT>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003bd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f040 8087 	bne.w	8003cf0 <HAL_I2C_Mem_Read_DMA+0x29c>
 8003be2:	e013      	b.n	8003c0c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0b3      	b.n	8003d74 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003c0c:	88f8      	ldrh	r0, [r7, #6]
 8003c0e:	893a      	ldrh	r2, [r7, #8]
 8003c10:	8979      	ldrh	r1, [r7, #10]
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	2323      	movs	r3, #35	; 0x23
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f001 fca1 	bl	8005564 <I2C_RequestMemoryRead>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d023      	beq.n	8003c70 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7ff f971 	bl	8002f14 <HAL_DMA_Abort_IT>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c4e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e081      	b.n	8003d74 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d108      	bne.n	8003c8a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e007      	b.n	8003c9a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c98:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	e049      	b.n	8003d6e <HAL_I2C_Mem_Read_DMA+0x31a>
 8003cda:	bf00      	nop
 8003cdc:	20000000 	.word	0x20000000
 8003ce0:	14f8b589 	.word	0x14f8b589
 8003ce4:	ffff0000 	.word	0xffff0000
 8003ce8:	08005735 	.word	0x08005735
 8003cec:	080058df 	.word	0x080058df
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	f043 0210 	orr.w	r2, r3, #16
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e02d      	b.n	8003d74 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003d18:	88f8      	ldrh	r0, [r7, #6]
 8003d1a:	893a      	ldrh	r2, [r7, #8]
 8003d1c:	8979      	ldrh	r1, [r7, #10]
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	2323      	movs	r3, #35	; 0x23
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	4603      	mov	r3, r0
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f001 fc1b 	bl	8005564 <I2C_RequestMemoryRead>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e01d      	b.n	8003d74 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d5c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e000      	b.n	8003d74 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8003d72:	2302      	movs	r3, #2
  }
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3728      	adds	r7, #40	; 0x28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d8c:	f7fd fe7a 	bl	8001a84 <HAL_GetTick>
 8003d90:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	f040 8111 	bne.w	8003fc6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2319      	movs	r3, #25
 8003daa:	2201      	movs	r2, #1
 8003dac:	4988      	ldr	r1, [pc, #544]	; (8003fd0 <HAL_I2C_IsDeviceReady+0x254>)
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f001 fe7a 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e104      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d101      	bne.n	8003dcc <HAL_I2C_IsDeviceReady+0x50>
 8003dc8:	2302      	movs	r3, #2
 8003dca:	e0fd      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d007      	beq.n	8003df2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0201 	orr.w	r2, r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2224      	movs	r2, #36	; 0x24
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a70      	ldr	r2, [pc, #448]	; (8003fd4 <HAL_I2C_IsDeviceReady+0x258>)
 8003e14:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e24:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f001 fe38 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e4c:	d103      	bne.n	8003e56 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0b6      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e5a:	897b      	ldrh	r3, [r7, #10]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e68:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e6a:	f7fd fe0b 	bl	8001a84 <HAL_GetTick>
 8003e6e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	bf0c      	ite	eq
 8003e7e:	2301      	moveq	r3, #1
 8003e80:	2300      	movne	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e9e:	e025      	b.n	8003eec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ea0:	f7fd fdf0 	bl	8001a84 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d302      	bcc.n	8003eb6 <HAL_I2C_IsDeviceReady+0x13a>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d103      	bne.n	8003ebe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	22a0      	movs	r2, #160	; 0xa0
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2ba0      	cmp	r3, #160	; 0xa0
 8003ef6:	d005      	beq.n	8003f04 <HAL_I2C_IsDeviceReady+0x188>
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <HAL_I2C_IsDeviceReady+0x188>
 8003efe:	7dbb      	ldrb	r3, [r7, #22]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0cd      	beq.n	8003ea0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2220      	movs	r2, #32
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d129      	bne.n	8003f6e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f28:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2319      	movs	r3, #25
 8003f46:	2201      	movs	r2, #1
 8003f48:	4921      	ldr	r1, [pc, #132]	; (8003fd0 <HAL_I2C_IsDeviceReady+0x254>)
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f001 fdac 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e036      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e02c      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f86:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	2319      	movs	r3, #25
 8003f8e:	2201      	movs	r2, #1
 8003f90:	490f      	ldr	r1, [pc, #60]	; (8003fd0 <HAL_I2C_IsDeviceReady+0x254>)
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f001 fd88 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e012      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	f4ff af32 	bcc.w	8003e16 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
  }
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	00100002 	.word	0x00100002
 8003fd4:	ffff0000 	.word	0xffff0000

08003fd8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ff8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004000:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	2b10      	cmp	r3, #16
 8004006:	d003      	beq.n	8004010 <HAL_I2C_EV_IRQHandler+0x38>
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	f040 80c1 	bne.w	8004192 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10d      	bne.n	8004046 <HAL_I2C_EV_IRQHandler+0x6e>
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004030:	d003      	beq.n	800403a <HAL_I2C_EV_IRQHandler+0x62>
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004038:	d101      	bne.n	800403e <HAL_I2C_EV_IRQHandler+0x66>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_I2C_EV_IRQHandler+0x68>
 800403e:	2300      	movs	r3, #0
 8004040:	2b01      	cmp	r3, #1
 8004042:	f000 8132 	beq.w	80042aa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00c      	beq.n	800406a <HAL_I2C_EV_IRQHandler+0x92>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	0a5b      	lsrs	r3, r3, #9
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d006      	beq.n	800406a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f001 fe9c 	bl	8005d9a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fcd2 	bl	8004a0c <I2C_Master_SB>
 8004068:	e092      	b.n	8004190 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	08db      	lsrs	r3, r3, #3
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_I2C_EV_IRQHandler+0xb2>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	0a5b      	lsrs	r3, r3, #9
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fd48 	bl	8004b18 <I2C_Master_ADD10>
 8004088:	e082      	b.n	8004190 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d009      	beq.n	80040aa <HAL_I2C_EV_IRQHandler+0xd2>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	0a5b      	lsrs	r3, r3, #9
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d003      	beq.n	80040aa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fd62 	bl	8004b6c <I2C_Master_ADDR>
 80040a8:	e072      	b.n	8004190 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	089b      	lsrs	r3, r3, #2
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d03b      	beq.n	800412e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c4:	f000 80f3 	beq.w	80042ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	09db      	lsrs	r3, r3, #7
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00f      	beq.n	80040f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	0a9b      	lsrs	r3, r3, #10
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	089b      	lsrs	r3, r3, #2
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d103      	bne.n	80040f4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f942 	bl	8004376 <I2C_MasterTransmit_TXE>
 80040f2:	e04d      	b.n	8004190 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80d6 	beq.w	80042ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	0a5b      	lsrs	r3, r3, #9
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 80cf 	beq.w	80042ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004110:	7bbb      	ldrb	r3, [r7, #14]
 8004112:	2b21      	cmp	r3, #33	; 0x21
 8004114:	d103      	bne.n	800411e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9c9 	bl	80044ae <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800411c:	e0c7      	b.n	80042ae <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	f040 80c4 	bne.w	80042ae <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fa37 	bl	800459a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800412c:	e0bf      	b.n	80042ae <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800413c:	f000 80b7 	beq.w	80042ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	099b      	lsrs	r3, r3, #6
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00f      	beq.n	800416c <HAL_I2C_EV_IRQHandler+0x194>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	0a9b      	lsrs	r3, r3, #10
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d009      	beq.n	800416c <HAL_I2C_EV_IRQHandler+0x194>
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	089b      	lsrs	r3, r3, #2
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d103      	bne.n	800416c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 faac 	bl	80046c2 <I2C_MasterReceive_RXNE>
 800416a:	e011      	b.n	8004190 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	089b      	lsrs	r3, r3, #2
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 809a 	beq.w	80042ae <HAL_I2C_EV_IRQHandler+0x2d6>
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	0a5b      	lsrs	r3, r3, #9
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 8093 	beq.w	80042ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fb55 	bl	8004838 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800418e:	e08e      	b.n	80042ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8004190:	e08d      	b.n	80042ae <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	2b00      	cmp	r3, #0
 8004198:	d004      	beq.n	80041a4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	e007      	b.n	80041b4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	085b      	lsrs	r3, r3, #1
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d012      	beq.n	80041e6 <HAL_I2C_EV_IRQHandler+0x20e>
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	0a5b      	lsrs	r3, r3, #9
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00c      	beq.n	80041e6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80041dc:	69b9      	ldr	r1, [r7, #24]
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 ff13 	bl	800500a <I2C_Slave_ADDR>
 80041e4:	e066      	b.n	80042b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_I2C_EV_IRQHandler+0x22e>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	0a5b      	lsrs	r3, r3, #9
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 ff4e 	bl	80050a0 <I2C_Slave_STOPF>
 8004204:	e056      	b.n	80042b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004206:	7bbb      	ldrb	r3, [r7, #14]
 8004208:	2b21      	cmp	r3, #33	; 0x21
 800420a:	d002      	beq.n	8004212 <HAL_I2C_EV_IRQHandler+0x23a>
 800420c:	7bbb      	ldrb	r3, [r7, #14]
 800420e:	2b29      	cmp	r3, #41	; 0x29
 8004210:	d125      	bne.n	800425e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	09db      	lsrs	r3, r3, #7
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00f      	beq.n	800423e <HAL_I2C_EV_IRQHandler+0x266>
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	0a9b      	lsrs	r3, r3, #10
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_I2C_EV_IRQHandler+0x266>
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	089b      	lsrs	r3, r3, #2
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d103      	bne.n	800423e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fe29 	bl	8004e8e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800423c:	e039      	b.n	80042b2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	089b      	lsrs	r3, r3, #2
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d033      	beq.n	80042b2 <HAL_I2C_EV_IRQHandler+0x2da>
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	0a5b      	lsrs	r3, r3, #9
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d02d      	beq.n	80042b2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fe56 	bl	8004f08 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800425c:	e029      	b.n	80042b2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	099b      	lsrs	r3, r3, #6
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00f      	beq.n	800428a <HAL_I2C_EV_IRQHandler+0x2b2>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	0a9b      	lsrs	r3, r3, #10
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d103      	bne.n	800428a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fe61 	bl	8004f4a <I2C_SlaveReceive_RXNE>
 8004288:	e014      	b.n	80042b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00e      	beq.n	80042b4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	0a5b      	lsrs	r3, r3, #9
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fe8f 	bl	8004fc6 <I2C_SlaveReceive_BTF>
 80042a8:	e004      	b.n	80042b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80042aa:	bf00      	nop
 80042ac:	e002      	b.n	80042b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ae:	bf00      	nop
 80042b0:	e000      	b.n	80042b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80042b2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80042b4:	3720      	adds	r7, #32
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b083      	sub	sp, #12
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	460b      	mov	r3, r1
 8004314:	70fb      	strb	r3, [r7, #3]
 8004316:	4613      	mov	r3, r2
 8004318:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004384:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800438c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004398:	2b00      	cmp	r3, #0
 800439a:	d150      	bne.n	800443e <I2C_MasterTransmit_TXE+0xc8>
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b21      	cmp	r3, #33	; 0x21
 80043a0:	d14d      	bne.n	800443e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d01d      	beq.n	80043e4 <I2C_MasterTransmit_TXE+0x6e>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d01a      	beq.n	80043e4 <I2C_MasterTransmit_TXE+0x6e>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043b4:	d016      	beq.n	80043e4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043c4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2211      	movs	r2, #17
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff ff6c 	bl	80042ba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80043e2:	e060      	b.n	80044a6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043f2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004402:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d107      	bne.n	800442e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ff87 	bl	800433a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800442c:	e03b      	b.n	80044a6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff ff3f 	bl	80042ba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800443c:	e033      	b.n	80044a6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b21      	cmp	r3, #33	; 0x21
 8004442:	d005      	beq.n	8004450 <I2C_MasterTransmit_TXE+0xda>
 8004444:	7bbb      	ldrb	r3, [r7, #14]
 8004446:	2b40      	cmp	r3, #64	; 0x40
 8004448:	d12d      	bne.n	80044a6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800444a:	7bfb      	ldrb	r3, [r7, #15]
 800444c:	2b22      	cmp	r3, #34	; 0x22
 800444e:	d12a      	bne.n	80044a6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d108      	bne.n	800446c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004468:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800446a:	e01c      	b.n	80044a6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d103      	bne.n	8004480 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f88e 	bl	800459a <I2C_MemoryTransmit_TXE_BTF>
}
 800447e:	e012      	b.n	80044a6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	781a      	ldrb	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80044a4:	e7ff      	b.n	80044a6 <I2C_MasterTransmit_TXE+0x130>
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b084      	sub	sp, #16
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ba:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b21      	cmp	r3, #33	; 0x21
 80044c6:	d164      	bne.n	8004592 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d012      	beq.n	80044f8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	781a      	ldrb	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80044f6:	e04c      	b.n	8004592 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d01d      	beq.n	800453a <I2C_MasterTransmit_BTF+0x8c>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b20      	cmp	r3, #32
 8004502:	d01a      	beq.n	800453a <I2C_MasterTransmit_BTF+0x8c>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800450a:	d016      	beq.n	800453a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800451a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2211      	movs	r2, #17
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fec1 	bl	80042ba <HAL_I2C_MasterTxCpltCallback>
}
 8004538:	e02b      	b.n	8004592 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004548:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004558:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b40      	cmp	r3, #64	; 0x40
 8004572:	d107      	bne.n	8004584 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fedc 	bl	800433a <HAL_I2C_MemTxCpltCallback>
}
 8004582:	e006      	b.n	8004592 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f7ff fe94 	bl	80042ba <HAL_I2C_MasterTxCpltCallback>
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d11d      	bne.n	80045ee <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d10b      	bne.n	80045d2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045be:	b2da      	uxtb	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ca:	1c9a      	adds	r2, r3, #2
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80045d0:	e073      	b.n	80046ba <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	121b      	asrs	r3, r3, #8
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045ec:	e065      	b.n	80046ba <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d10b      	bne.n	800460e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800460c:	e055      	b.n	80046ba <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004612:	2b02      	cmp	r3, #2
 8004614:	d151      	bne.n	80046ba <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	2b22      	cmp	r3, #34	; 0x22
 800461a:	d10d      	bne.n	8004638 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800462a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004636:	e040      	b.n	80046ba <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d015      	beq.n	800466e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004642:	7bfb      	ldrb	r3, [r7, #15]
 8004644:	2b21      	cmp	r3, #33	; 0x21
 8004646:	d112      	bne.n	800466e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464c:	781a      	ldrb	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800466c:	e025      	b.n	80046ba <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d120      	bne.n	80046ba <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	2b21      	cmp	r3, #33	; 0x21
 800467c:	d11d      	bne.n	80046ba <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800468c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800469c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff fe40 	bl	800433a <HAL_I2C_MemTxCpltCallback>
}
 80046ba:	bf00      	nop
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b22      	cmp	r3, #34	; 0x22
 80046d4:	f040 80ac 	bne.w	8004830 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d921      	bls.n	800472a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b03      	cmp	r3, #3
 8004714:	f040 808c 	bne.w	8004830 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004726:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004728:	e082      	b.n	8004830 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472e:	2b02      	cmp	r3, #2
 8004730:	d075      	beq.n	800481e <I2C_MasterReceive_RXNE+0x15c>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d002      	beq.n	800473e <I2C_MasterReceive_RXNE+0x7c>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d16f      	bne.n	800481e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f001 faca 	bl	8005cd8 <I2C_WaitOnSTOPRequestThroughIT>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d142      	bne.n	80047d0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004758:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004768:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	b2d2      	uxtb	r2, r2
 8004776:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b40      	cmp	r3, #64	; 0x40
 80047a2:	d10a      	bne.n	80047ba <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fb ffc4 	bl	8000740 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047b8:	e03a      	b.n	8004830 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2212      	movs	r2, #18
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff fd80 	bl	80042ce <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80047ce:	e02f      	b.n	8004830 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047de:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2220      	movs	r2, #32
 800480a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fd99 	bl	800434e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800481c:	e008      	b.n	8004830 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800482c:	605a      	str	r2, [r3, #4]
}
 800482e:	e7ff      	b.n	8004830 <I2C_MasterReceive_RXNE+0x16e>
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b04      	cmp	r3, #4
 800484e:	d11b      	bne.n	8004888 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800485e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004886:	e0bd      	b.n	8004a04 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b03      	cmp	r3, #3
 8004890:	d129      	bne.n	80048e6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d00a      	beq.n	80048be <I2C_MasterReceive_BTF+0x86>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d007      	beq.n	80048be <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048bc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80048e4:	e08e      	b.n	8004a04 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d176      	bne.n	80049de <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d002      	beq.n	80048fc <I2C_MasterReceive_BTF+0xc4>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d108      	bne.n	800490e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e019      	b.n	8004942 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b04      	cmp	r3, #4
 8004912:	d002      	beq.n	800491a <I2C_MasterReceive_BTF+0xe2>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b02      	cmp	r3, #2
 8004918:	d108      	bne.n	800492c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e00a      	b.n	8004942 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2b10      	cmp	r3, #16
 8004930:	d007      	beq.n	8004942 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004940:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495e:	b29b      	uxth	r3, r3
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004984:	b29b      	uxth	r3, r3
 8004986:	3b01      	subs	r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800499c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b40      	cmp	r3, #64	; 0x40
 80049b0:	d10a      	bne.n	80049c8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7fb febd 	bl	8000740 <HAL_I2C_MemRxCpltCallback>
}
 80049c6:	e01d      	b.n	8004a04 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2212      	movs	r2, #18
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff fc79 	bl	80042ce <HAL_I2C_MasterRxCpltCallback>
}
 80049dc:	e012      	b.n	8004a04 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	1c5a      	adds	r2, r3, #1
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a04:	bf00      	nop
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d117      	bne.n	8004a50 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d109      	bne.n	8004a3c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	461a      	mov	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a38:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004a3a:	e067      	b.n	8004b0c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	611a      	str	r2, [r3, #16]
}
 8004a4e:	e05d      	b.n	8004b0c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a58:	d133      	bne.n	8004ac2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b21      	cmp	r3, #33	; 0x21
 8004a64:	d109      	bne.n	8004a7a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a76:	611a      	str	r2, [r3, #16]
 8004a78:	e008      	b.n	8004a8c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d004      	beq.n	8004a9e <I2C_Master_SB+0x92>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d108      	bne.n	8004ab0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d032      	beq.n	8004b0c <I2C_Master_SB+0x100>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d02d      	beq.n	8004b0c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004abe:	605a      	str	r2, [r3, #4]
}
 8004ac0:	e024      	b.n	8004b0c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10e      	bne.n	8004ae8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	11db      	asrs	r3, r3, #7
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	f003 0306 	and.w	r3, r3, #6
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	f063 030f 	orn	r3, r3, #15
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	611a      	str	r2, [r3, #16]
}
 8004ae6:	e011      	b.n	8004b0c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d10d      	bne.n	8004b0c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	11db      	asrs	r3, r3, #7
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	f003 0306 	and.w	r3, r3, #6
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	f063 030e 	orn	r3, r3, #14
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	611a      	str	r2, [r3, #16]
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d004      	beq.n	8004b3e <I2C_Master_ADD10+0x26>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d108      	bne.n	8004b50 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00c      	beq.n	8004b60 <I2C_Master_ADD10+0x48>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d007      	beq.n	8004b60 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b5e:	605a      	str	r2, [r3, #4]
  }
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b091      	sub	sp, #68	; 0x44
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b88:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b22      	cmp	r3, #34	; 0x22
 8004b94:	f040 8169 	bne.w	8004e6a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10f      	bne.n	8004bc0 <I2C_Master_ADDR+0x54>
 8004ba0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d10b      	bne.n	8004bc0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ba8:	2300      	movs	r3, #0
 8004baa:	633b      	str	r3, [r7, #48]	; 0x30
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	633b      	str	r3, [r7, #48]	; 0x30
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	e160      	b.n	8004e82 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d11d      	bne.n	8004c04 <I2C_Master_ADDR+0x98>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004bd0:	d118      	bne.n	8004c04 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bf6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	651a      	str	r2, [r3, #80]	; 0x50
 8004c02:	e13e      	b.n	8004e82 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d113      	bne.n	8004c36 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e115      	b.n	8004e62 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	f040 808a 	bne.w	8004d56 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c48:	d137      	bne.n	8004cba <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c58:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c68:	d113      	bne.n	8004c92 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c78:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	e0e7      	b.n	8004e62 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c92:	2300      	movs	r3, #0
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	623b      	str	r3, [r7, #32]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	623b      	str	r3, [r7, #32]
 8004ca6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	e0d3      	b.n	8004e62 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d02e      	beq.n	8004d1e <I2C_Master_ADDR+0x1b2>
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d02b      	beq.n	8004d1e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc8:	2b12      	cmp	r3, #18
 8004cca:	d102      	bne.n	8004cd2 <I2C_Master_ADDR+0x166>
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d125      	bne.n	8004d1e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d00e      	beq.n	8004cf6 <I2C_Master_ADDR+0x18a>
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d00b      	beq.n	8004cf6 <I2C_Master_ADDR+0x18a>
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d008      	beq.n	8004cf6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	e007      	b.n	8004d06 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d04:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d06:	2300      	movs	r3, #0
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	61fb      	str	r3, [r7, #28]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	e0a1      	b.n	8004e62 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61bb      	str	r3, [r7, #24]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	61bb      	str	r3, [r7, #24]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e085      	b.n	8004e62 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d14d      	bne.n	8004dfc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d016      	beq.n	8004d94 <I2C_Master_ADDR+0x228>
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d013      	beq.n	8004d94 <I2C_Master_ADDR+0x228>
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6e:	2b10      	cmp	r3, #16
 8004d70:	d010      	beq.n	8004d94 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d80:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	e007      	b.n	8004da4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004da2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004db2:	d117      	bne.n	8004de4 <I2C_Master_ADDR+0x278>
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dba:	d00b      	beq.n	8004dd4 <I2C_Master_ADDR+0x268>
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d008      	beq.n	8004dd4 <I2C_Master_ADDR+0x268>
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d005      	beq.n	8004dd4 <I2C_Master_ADDR+0x268>
 8004dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dca:	2b10      	cmp	r3, #16
 8004dcc:	d002      	beq.n	8004dd4 <I2C_Master_ADDR+0x268>
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d107      	bne.n	8004de4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004de2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de4:	2300      	movs	r3, #0
 8004de6:	617b      	str	r3, [r7, #20]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	e032      	b.n	8004e62 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e0a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1a:	d117      	bne.n	8004e4c <I2C_Master_ADDR+0x2e0>
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e22:	d00b      	beq.n	8004e3c <I2C_Master_ADDR+0x2d0>
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d008      	beq.n	8004e3c <I2C_Master_ADDR+0x2d0>
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d005      	beq.n	8004e3c <I2C_Master_ADDR+0x2d0>
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	2b10      	cmp	r3, #16
 8004e34:	d002      	beq.n	8004e3c <I2C_Master_ADDR+0x2d0>
 8004e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d107      	bne.n	8004e4c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e4a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	613b      	str	r3, [r7, #16]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004e68:	e00b      	b.n	8004e82 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
}
 8004e80:	e7ff      	b.n	8004e82 <I2C_Master_ADDR+0x316>
 8004e82:	bf00      	nop
 8004e84:	3744      	adds	r7, #68	; 0x44
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d02b      	beq.n	8004f00 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	781a      	ldrb	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	1c5a      	adds	r2, r3, #1
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d114      	bne.n	8004f00 <I2C_SlaveTransmit_TXE+0x72>
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b29      	cmp	r3, #41	; 0x29
 8004eda:	d111      	bne.n	8004f00 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2221      	movs	r2, #33	; 0x21
 8004ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2228      	movs	r2, #40	; 0x28
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff f9f1 	bl	80042e2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004f00:	bf00      	nop
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d011      	beq.n	8004f3e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	781a      	ldrb	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f58:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d02c      	beq.n	8004fbe <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d114      	bne.n	8004fbe <I2C_SlaveReceive_RXNE+0x74>
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b2a      	cmp	r3, #42	; 0x2a
 8004f98:	d111      	bne.n	8004fbe <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2222      	movs	r2, #34	; 0x22
 8004fae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2228      	movs	r2, #40	; 0x28
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff f99c 	bl	80042f6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d012      	beq.n	8004ffe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	1c5a      	adds	r2, r3, #1
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005014:	2300      	movs	r3, #0
 8005016:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501e:	b2db      	uxtb	r3, r3
 8005020:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005024:	2b28      	cmp	r3, #40	; 0x28
 8005026:	d127      	bne.n	8005078 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005036:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	089b      	lsrs	r3, r3, #2
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	09db      	lsrs	r3, r3, #7
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	d103      	bne.n	800505c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	81bb      	strh	r3, [r7, #12]
 800505a:	e002      	b.n	8005062 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800506a:	89ba      	ldrh	r2, [r7, #12]
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff f94a 	bl	800430a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005076:	e00e      	b.n	8005096 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005078:	2300      	movs	r3, #0
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	60bb      	str	r3, [r7, #8]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	60bb      	str	r3, [r7, #8]
 800508c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
	...

080050a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80050c0:	2300      	movs	r3, #0
 80050c2:	60bb      	str	r3, [r7, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	60bb      	str	r3, [r7, #8]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050fc:	d172      	bne.n	80051e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	2b22      	cmp	r3, #34	; 0x22
 8005102:	d002      	beq.n	800510a <I2C_Slave_STOPF+0x6a>
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b2a      	cmp	r3, #42	; 0x2a
 8005108:	d135      	bne.n	8005176 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	b29a      	uxth	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f043 0204 	orr.w	r2, r3, #4
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800513c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe f892 	bl	800326c <HAL_DMA_GetState>
 8005148:	4603      	mov	r3, r0
 800514a:	2b01      	cmp	r3, #1
 800514c:	d049      	beq.n	80051e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	4a69      	ldr	r2, [pc, #420]	; (80052f8 <I2C_Slave_STOPF+0x258>)
 8005154:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	4618      	mov	r0, r3
 800515c:	f7fd feda 	bl	8002f14 <HAL_DMA_Abort_IT>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d03d      	beq.n	80051e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005170:	4610      	mov	r0, r2
 8005172:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005174:	e035      	b.n	80051e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	b29a      	uxth	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d005      	beq.n	800519a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f043 0204 	orr.w	r2, r3, #4
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fe f85c 	bl	800326c <HAL_DMA_GetState>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d014      	beq.n	80051e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051be:	4a4e      	ldr	r2, [pc, #312]	; (80052f8 <I2C_Slave_STOPF+0x258>)
 80051c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fd fea4 	bl	8002f14 <HAL_DMA_Abort_IT>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d008      	beq.n	80051e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051dc:	4610      	mov	r0, r2
 80051de:	4798      	blx	r3
 80051e0:	e000      	b.n	80051e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80051e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d03e      	beq.n	800526c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	f003 0304 	and.w	r3, r3, #4
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d112      	bne.n	8005222 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d112      	bne.n	8005256 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	f043 0204 	orr.w	r2, r3, #4
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f843 	bl	8005300 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800527a:	e039      	b.n	80052f0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b2a      	cmp	r3, #42	; 0x2a
 8005280:	d109      	bne.n	8005296 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2228      	movs	r2, #40	; 0x28
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff f830 	bl	80042f6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b28      	cmp	r3, #40	; 0x28
 80052a0:	d111      	bne.n	80052c6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a15      	ldr	r2, [pc, #84]	; (80052fc <I2C_Slave_STOPF+0x25c>)
 80052a6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff f831 	bl	8004326 <HAL_I2C_ListenCpltCallback>
}
 80052c4:	e014      	b.n	80052f0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	2b22      	cmp	r3, #34	; 0x22
 80052cc:	d002      	beq.n	80052d4 <I2C_Slave_STOPF+0x234>
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	2b22      	cmp	r3, #34	; 0x22
 80052d2:	d10d      	bne.n	80052f0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff f803 	bl	80042f6 <HAL_I2C_SlaveRxCpltCallback>
}
 80052f0:	bf00      	nop
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	08005959 	.word	0x08005959
 80052fc:	ffff0000 	.word	0xffff0000

08005300 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800530e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005316:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005318:	7bbb      	ldrb	r3, [r7, #14]
 800531a:	2b10      	cmp	r3, #16
 800531c:	d002      	beq.n	8005324 <I2C_ITError+0x24>
 800531e:	7bbb      	ldrb	r3, [r7, #14]
 8005320:	2b40      	cmp	r3, #64	; 0x40
 8005322:	d10a      	bne.n	800533a <I2C_ITError+0x3a>
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	2b22      	cmp	r3, #34	; 0x22
 8005328:	d107      	bne.n	800533a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005338:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005340:	2b28      	cmp	r3, #40	; 0x28
 8005342:	d107      	bne.n	8005354 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2228      	movs	r2, #40	; 0x28
 800534e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005352:	e015      	b.n	8005380 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800535e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005362:	d00a      	beq.n	800537a <I2C_ITError+0x7a>
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	2b60      	cmp	r3, #96	; 0x60
 8005368:	d007      	beq.n	800537a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800538a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800538e:	d162      	bne.n	8005456 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800539e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d020      	beq.n	80053f0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b2:	4a6a      	ldr	r2, [pc, #424]	; (800555c <I2C_ITError+0x25c>)
 80053b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fd fdaa 	bl	8002f14 <HAL_DMA_Abort_IT>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 8089 	beq.w	80054da <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0201 	bic.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053ea:	4610      	mov	r0, r2
 80053ec:	4798      	blx	r3
 80053ee:	e074      	b.n	80054da <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	4a59      	ldr	r2, [pc, #356]	; (800555c <I2C_ITError+0x25c>)
 80053f6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fd fd89 	bl	8002f14 <HAL_DMA_Abort_IT>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d068      	beq.n	80054da <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b40      	cmp	r3, #64	; 0x40
 8005414:	d10b      	bne.n	800542e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0201 	bic.w	r2, r2, #1
 800543c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005450:	4610      	mov	r0, r2
 8005452:	4798      	blx	r3
 8005454:	e041      	b.n	80054da <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b60      	cmp	r3, #96	; 0x60
 8005460:	d125      	bne.n	80054ae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b40      	cmp	r3, #64	; 0x40
 800547c:	d10b      	bne.n	8005496 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 0201 	bic.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fe ff5b 	bl	8004362 <HAL_I2C_AbortCpltCallback>
 80054ac:	e015      	b.n	80054da <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b40      	cmp	r3, #64	; 0x40
 80054ba:	d10b      	bne.n	80054d4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7fe ff3a 	bl	800434e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10e      	bne.n	8005508 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d109      	bne.n	8005508 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005516:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b04      	cmp	r3, #4
 800552a:	d113      	bne.n	8005554 <I2C_ITError+0x254>
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	2b28      	cmp	r3, #40	; 0x28
 8005530:	d110      	bne.n	8005554 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <I2C_ITError+0x260>)
 8005536:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f7fe fee9 	bl	8004326 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005554:	bf00      	nop
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	08005959 	.word	0x08005959
 8005560:	ffff0000 	.word	0xffff0000

08005564 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af02      	add	r7, sp, #8
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	4608      	mov	r0, r1
 800556e:	4611      	mov	r1, r2
 8005570:	461a      	mov	r2, r3
 8005572:	4603      	mov	r3, r0
 8005574:	817b      	strh	r3, [r7, #10]
 8005576:	460b      	mov	r3, r1
 8005578:	813b      	strh	r3, [r7, #8]
 800557a:	4613      	mov	r3, r2
 800557c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800558c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800559c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fa7c 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00d      	beq.n	80055d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c4:	d103      	bne.n	80055ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e0aa      	b.n	8005728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055d2:	897b      	ldrh	r3, [r7, #10]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	6a3a      	ldr	r2, [r7, #32]
 80055e6:	4952      	ldr	r1, [pc, #328]	; (8005730 <I2C_RequestMemoryRead+0x1cc>)
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 fab4 	bl	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e097      	b.n	8005728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800560e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005610:	6a39      	ldr	r1, [r7, #32]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fb1e 	bl	8005c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00d      	beq.n	800563a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	2b04      	cmp	r3, #4
 8005624:	d107      	bne.n	8005636 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005634:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e076      	b.n	8005728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800563a:	88fb      	ldrh	r3, [r7, #6]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d105      	bne.n	800564c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005640:	893b      	ldrh	r3, [r7, #8]
 8005642:	b2da      	uxtb	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	611a      	str	r2, [r3, #16]
 800564a:	e021      	b.n	8005690 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800564c:	893b      	ldrh	r3, [r7, #8]
 800564e:	0a1b      	lsrs	r3, r3, #8
 8005650:	b29b      	uxth	r3, r3
 8005652:	b2da      	uxtb	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800565a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565c:	6a39      	ldr	r1, [r7, #32]
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f000 faf8 	bl	8005c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00d      	beq.n	8005686 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	2b04      	cmp	r3, #4
 8005670:	d107      	bne.n	8005682 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005680:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e050      	b.n	8005728 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005686:	893b      	ldrh	r3, [r7, #8]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005692:	6a39      	ldr	r1, [r7, #32]
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 fadd 	bl	8005c54 <I2C_WaitOnTXEFlagUntilTimeout>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00d      	beq.n	80056bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d107      	bne.n	80056b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e035      	b.n	8005728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f000 f9e5 	bl	8005aa8 <I2C_WaitOnFlagUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00d      	beq.n	8005700 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f2:	d103      	bne.n	80056fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e013      	b.n	8005728 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005700:	897b      	ldrh	r3, [r7, #10]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	b2da      	uxtb	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	6a3a      	ldr	r2, [r7, #32]
 8005714:	4906      	ldr	r1, [pc, #24]	; (8005730 <I2C_RequestMemoryRead+0x1cc>)
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f000 fa1d 	bl	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	00010002 	.word	0x00010002

08005734 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005748:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005750:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005766:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005774:	2200      	movs	r2, #0
 8005776:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	2200      	movs	r2, #0
 8005786:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005788:	7cfb      	ldrb	r3, [r7, #19]
 800578a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800578e:	2b21      	cmp	r3, #33	; 0x21
 8005790:	d007      	beq.n	80057a2 <I2C_DMAXferCplt+0x6e>
 8005792:	7cfb      	ldrb	r3, [r7, #19]
 8005794:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005798:	2b22      	cmp	r3, #34	; 0x22
 800579a:	d131      	bne.n	8005800 <I2C_DMAXferCplt+0xcc>
 800579c:	7cbb      	ldrb	r3, [r7, #18]
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d12e      	bne.n	8005800 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057b0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80057b8:	7cfb      	ldrb	r3, [r7, #19]
 80057ba:	2b29      	cmp	r3, #41	; 0x29
 80057bc:	d10a      	bne.n	80057d4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2221      	movs	r2, #33	; 0x21
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2228      	movs	r2, #40	; 0x28
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057cc:	6978      	ldr	r0, [r7, #20]
 80057ce:	f7fe fd88 	bl	80042e2 <HAL_I2C_SlaveTxCpltCallback>
 80057d2:	e00c      	b.n	80057ee <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80057d4:	7cfb      	ldrb	r3, [r7, #19]
 80057d6:	2b2a      	cmp	r3, #42	; 0x2a
 80057d8:	d109      	bne.n	80057ee <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2222      	movs	r2, #34	; 0x22
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2228      	movs	r2, #40	; 0x28
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057e8:	6978      	ldr	r0, [r7, #20]
 80057ea:	f7fe fd84 	bl	80042f6 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80057fc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80057fe:	e06a      	b.n	80058d6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	d064      	beq.n	80058d6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d107      	bne.n	8005826 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005824:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005834:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800583c:	d009      	beq.n	8005852 <I2C_DMAXferCplt+0x11e>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b08      	cmp	r3, #8
 8005842:	d006      	beq.n	8005852 <I2C_DMAXferCplt+0x11e>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800584a:	d002      	beq.n	8005852 <I2C_DMAXferCplt+0x11e>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2b20      	cmp	r3, #32
 8005850:	d107      	bne.n	8005862 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005860:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005870:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005880:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	2200      	movs	r2, #0
 8005886:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005890:	6978      	ldr	r0, [r7, #20]
 8005892:	f7fe fd5c 	bl	800434e <HAL_I2C_ErrorCallback>
}
 8005896:	e01e      	b.n	80058d6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b40      	cmp	r3, #64	; 0x40
 80058aa:	d10a      	bne.n	80058c2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2200      	movs	r2, #0
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80058ba:	6978      	ldr	r0, [r7, #20]
 80058bc:	f7fa ff40 	bl	8000740 <HAL_I2C_MemRxCpltCallback>
}
 80058c0:	e009      	b.n	80058d6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2212      	movs	r2, #18
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80058d0:	6978      	ldr	r0, [r7, #20]
 80058d2:	f7fe fcfc 	bl	80042ce <HAL_I2C_MasterRxCpltCallback>
}
 80058d6:	bf00      	nop
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f8:	2200      	movs	r2, #0
 80058fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	2200      	movs	r2, #0
 800590a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f7fd fcbb 	bl	8003288 <HAL_DMA_GetError>
 8005912:	4603      	mov	r3, r0
 8005914:	2b02      	cmp	r3, #2
 8005916:	d01b      	beq.n	8005950 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005926:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f043 0210 	orr.w	r2, r3, #16
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f7fe fcff 	bl	800434e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005950:	bf00      	nop
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005970:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005972:	4b4b      	ldr	r3, [pc, #300]	; (8005aa0 <I2C_DMAAbort+0x148>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	08db      	lsrs	r3, r3, #3
 8005978:	4a4a      	ldr	r2, [pc, #296]	; (8005aa4 <I2C_DMAAbort+0x14c>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	0a1a      	lsrs	r2, r3, #8
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	00da      	lsls	r2, r3, #3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f043 0220 	orr.w	r2, r3, #32
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800599e:	e00a      	b.n	80059b6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059b4:	d0ea      	beq.n	800598c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c2:	2200      	movs	r2, #0
 80059c4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d2:	2200      	movs	r2, #0
 80059d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2200      	movs	r2, #0
 80059ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d003      	beq.n	80059fc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	2200      	movs	r2, #0
 80059fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	2200      	movs	r2, #0
 8005a0a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0201 	bic.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b60      	cmp	r3, #96	; 0x60
 8005a26:	d10e      	bne.n	8005a46 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a3e:	6978      	ldr	r0, [r7, #20]
 8005a40:	f7fe fc8f 	bl	8004362 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a44:	e027      	b.n	8005a96 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a46:	7cfb      	ldrb	r3, [r7, #19]
 8005a48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a4c:	2b28      	cmp	r3, #40	; 0x28
 8005a4e:	d117      	bne.n	8005a80 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2200      	movs	r2, #0
 8005a74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2228      	movs	r2, #40	; 0x28
 8005a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a7e:	e007      	b.n	8005a90 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005a90:	6978      	ldr	r0, [r7, #20]
 8005a92:	f7fe fc5c 	bl	800434e <HAL_I2C_ErrorCallback>
}
 8005a96:	bf00      	nop
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20000000 	.word	0x20000000
 8005aa4:	14f8b589 	.word	0x14f8b589

08005aa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	603b      	str	r3, [r7, #0]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ab8:	e025      	b.n	8005b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac0:	d021      	beq.n	8005b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ac2:	f7fb ffdf 	bl	8001a84 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d302      	bcc.n	8005ad8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d116      	bne.n	8005b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2220      	movs	r2, #32
 8005ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	f043 0220 	orr.w	r2, r3, #32
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e023      	b.n	8005b4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d10d      	bne.n	8005b2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	43da      	mvns	r2, r3
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bf0c      	ite	eq
 8005b22:	2301      	moveq	r3, #1
 8005b24:	2300      	movne	r3, #0
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	e00c      	b.n	8005b46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	43da      	mvns	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4013      	ands	r3, r2
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	bf0c      	ite	eq
 8005b3e:	2301      	moveq	r3, #1
 8005b40:	2300      	movne	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d0b6      	beq.n	8005aba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	60b9      	str	r1, [r7, #8]
 8005b60:	607a      	str	r2, [r7, #4]
 8005b62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b64:	e051      	b.n	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b74:	d123      	bne.n	8005bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f043 0204 	orr.w	r2, r3, #4
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e046      	b.n	8005c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc4:	d021      	beq.n	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc6:	f7fb ff5d 	bl	8001a84 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	1ad3      	subs	r3, r2, r3
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d302      	bcc.n	8005bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d116      	bne.n	8005c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf6:	f043 0220 	orr.w	r2, r3, #32
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e020      	b.n	8005c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	0c1b      	lsrs	r3, r3, #16
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d10c      	bne.n	8005c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	43da      	mvns	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bf14      	ite	ne
 8005c26:	2301      	movne	r3, #1
 8005c28:	2300      	moveq	r3, #0
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	e00b      	b.n	8005c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	43da      	mvns	r2, r3
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	4013      	ands	r3, r2
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bf14      	ite	ne
 8005c40:	2301      	movne	r3, #1
 8005c42:	2300      	moveq	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d18d      	bne.n	8005b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c60:	e02d      	b.n	8005cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 f86a 	bl	8005d3c <I2C_IsAcknowledgeFailed>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e02d      	b.n	8005cce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c78:	d021      	beq.n	8005cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7a:	f7fb ff03 	bl	8001a84 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d302      	bcc.n	8005c90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d116      	bne.n	8005cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f043 0220 	orr.w	r2, r3, #32
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e007      	b.n	8005cce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	695b      	ldr	r3, [r3, #20]
 8005cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc8:	2b80      	cmp	r3, #128	; 0x80
 8005cca:	d1ca      	bne.n	8005c62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ce4:	4b13      	ldr	r3, [pc, #76]	; (8005d34 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	08db      	lsrs	r3, r3, #3
 8005cea:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	0a1a      	lsrs	r2, r3, #8
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4413      	add	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d107      	bne.n	8005d16 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f043 0220 	orr.w	r2, r3, #32
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e008      	b.n	8005d28 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d24:	d0e9      	beq.n	8005cfa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	20000000 	.word	0x20000000
 8005d38:	14f8b589 	.word	0x14f8b589

08005d3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d52:	d11b      	bne.n	8005d8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	f043 0204 	orr.w	r2, r3, #4
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005daa:	d103      	bne.n	8005db4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005db2:	e007      	b.n	8005dc4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005dbc:	d102      	bne.n	8005dc4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e267      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d075      	beq.n	8005eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dee:	4b88      	ldr	r3, [pc, #544]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f003 030c 	and.w	r3, r3, #12
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d00c      	beq.n	8005e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dfa:	4b85      	ldr	r3, [pc, #532]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d112      	bne.n	8005e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e06:	4b82      	ldr	r3, [pc, #520]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e12:	d10b      	bne.n	8005e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e14:	4b7e      	ldr	r3, [pc, #504]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d05b      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x108>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d157      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e242      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e34:	d106      	bne.n	8005e44 <HAL_RCC_OscConfig+0x74>
 8005e36:	4b76      	ldr	r3, [pc, #472]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a75      	ldr	r2, [pc, #468]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e01d      	b.n	8005e80 <HAL_RCC_OscConfig+0xb0>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e4c:	d10c      	bne.n	8005e68 <HAL_RCC_OscConfig+0x98>
 8005e4e:	4b70      	ldr	r3, [pc, #448]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a6f      	ldr	r2, [pc, #444]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	4b6d      	ldr	r3, [pc, #436]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a6c      	ldr	r2, [pc, #432]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	e00b      	b.n	8005e80 <HAL_RCC_OscConfig+0xb0>
 8005e68:	4b69      	ldr	r3, [pc, #420]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a68      	ldr	r2, [pc, #416]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	4b66      	ldr	r3, [pc, #408]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a65      	ldr	r2, [pc, #404]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d013      	beq.n	8005eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e88:	f7fb fdfc 	bl	8001a84 <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e90:	f7fb fdf8 	bl	8001a84 <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b64      	cmp	r3, #100	; 0x64
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e207      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ea2:	4b5b      	ldr	r3, [pc, #364]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0xc0>
 8005eae:	e014      	b.n	8005eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb0:	f7fb fde8 	bl	8001a84 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eb8:	f7fb fde4 	bl	8001a84 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b64      	cmp	r3, #100	; 0x64
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e1f3      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eca:	4b51      	ldr	r3, [pc, #324]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f0      	bne.n	8005eb8 <HAL_RCC_OscConfig+0xe8>
 8005ed6:	e000      	b.n	8005eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d063      	beq.n	8005fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ee6:	4b4a      	ldr	r3, [pc, #296]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 030c 	and.w	r3, r3, #12
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00b      	beq.n	8005f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ef2:	4b47      	ldr	r3, [pc, #284]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d11c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005efe:	4b44      	ldr	r3, [pc, #272]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d116      	bne.n	8005f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f0a:	4b41      	ldr	r3, [pc, #260]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <HAL_RCC_OscConfig+0x152>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d001      	beq.n	8005f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e1c7      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f22:	4b3b      	ldr	r3, [pc, #236]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	4937      	ldr	r1, [pc, #220]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f36:	e03a      	b.n	8005fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d020      	beq.n	8005f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f40:	4b34      	ldr	r3, [pc, #208]	; (8006014 <HAL_RCC_OscConfig+0x244>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f46:	f7fb fd9d 	bl	8001a84 <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f4c:	e008      	b.n	8005f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f4e:	f7fb fd99 	bl	8001a84 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e1a8      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f60:	4b2b      	ldr	r3, [pc, #172]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f0      	beq.n	8005f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6c:	4b28      	ldr	r3, [pc, #160]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	4925      	ldr	r1, [pc, #148]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	600b      	str	r3, [r1, #0]
 8005f80:	e015      	b.n	8005fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f82:	4b24      	ldr	r3, [pc, #144]	; (8006014 <HAL_RCC_OscConfig+0x244>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f88:	f7fb fd7c 	bl	8001a84 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f90:	f7fb fd78 	bl	8001a84 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e187      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fa2:	4b1b      	ldr	r3, [pc, #108]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1f0      	bne.n	8005f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d036      	beq.n	8006028 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d016      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fc2:	4b15      	ldr	r3, [pc, #84]	; (8006018 <HAL_RCC_OscConfig+0x248>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc8:	f7fb fd5c 	bl	8001a84 <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fd0:	f7fb fd58 	bl	8001a84 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e167      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <HAL_RCC_OscConfig+0x240>)
 8005fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0f0      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x200>
 8005fee:	e01b      	b.n	8006028 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ff0:	4b09      	ldr	r3, [pc, #36]	; (8006018 <HAL_RCC_OscConfig+0x248>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff6:	f7fb fd45 	bl	8001a84 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ffc:	e00e      	b.n	800601c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ffe:	f7fb fd41 	bl	8001a84 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d907      	bls.n	800601c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e150      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
 8006010:	40023800 	.word	0x40023800
 8006014:	42470000 	.word	0x42470000
 8006018:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800601c:	4b88      	ldr	r3, [pc, #544]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 800601e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1ea      	bne.n	8005ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 8097 	beq.w	8006164 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800603a:	4b81      	ldr	r3, [pc, #516]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10f      	bne.n	8006066 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006046:	2300      	movs	r3, #0
 8006048:	60bb      	str	r3, [r7, #8]
 800604a:	4b7d      	ldr	r3, [pc, #500]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	4a7c      	ldr	r2, [pc, #496]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 8006050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006054:	6413      	str	r3, [r2, #64]	; 0x40
 8006056:	4b7a      	ldr	r3, [pc, #488]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605e:	60bb      	str	r3, [r7, #8]
 8006060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006066:	4b77      	ldr	r3, [pc, #476]	; (8006244 <HAL_RCC_OscConfig+0x474>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606e:	2b00      	cmp	r3, #0
 8006070:	d118      	bne.n	80060a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006072:	4b74      	ldr	r3, [pc, #464]	; (8006244 <HAL_RCC_OscConfig+0x474>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a73      	ldr	r2, [pc, #460]	; (8006244 <HAL_RCC_OscConfig+0x474>)
 8006078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800607c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800607e:	f7fb fd01 	bl	8001a84 <HAL_GetTick>
 8006082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006086:	f7fb fcfd 	bl	8001a84 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e10c      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006098:	4b6a      	ldr	r3, [pc, #424]	; (8006244 <HAL_RCC_OscConfig+0x474>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0f0      	beq.n	8006086 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d106      	bne.n	80060ba <HAL_RCC_OscConfig+0x2ea>
 80060ac:	4b64      	ldr	r3, [pc, #400]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 80060ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b0:	4a63      	ldr	r2, [pc, #396]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	6713      	str	r3, [r2, #112]	; 0x70
 80060b8:	e01c      	b.n	80060f4 <HAL_RCC_OscConfig+0x324>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b05      	cmp	r3, #5
 80060c0:	d10c      	bne.n	80060dc <HAL_RCC_OscConfig+0x30c>
 80060c2:	4b5f      	ldr	r3, [pc, #380]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	4a5e      	ldr	r2, [pc, #376]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 80060c8:	f043 0304 	orr.w	r3, r3, #4
 80060cc:	6713      	str	r3, [r2, #112]	; 0x70
 80060ce:	4b5c      	ldr	r3, [pc, #368]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	4a5b      	ldr	r2, [pc, #364]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	6713      	str	r3, [r2, #112]	; 0x70
 80060da:	e00b      	b.n	80060f4 <HAL_RCC_OscConfig+0x324>
 80060dc:	4b58      	ldr	r3, [pc, #352]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 80060de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e0:	4a57      	ldr	r2, [pc, #348]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 80060e2:	f023 0301 	bic.w	r3, r3, #1
 80060e6:	6713      	str	r3, [r2, #112]	; 0x70
 80060e8:	4b55      	ldr	r3, [pc, #340]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	4a54      	ldr	r2, [pc, #336]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 80060ee:	f023 0304 	bic.w	r3, r3, #4
 80060f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d015      	beq.n	8006128 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fc:	f7fb fcc2 	bl	8001a84 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006102:	e00a      	b.n	800611a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006104:	f7fb fcbe 	bl	8001a84 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006112:	4293      	cmp	r3, r2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e0cb      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611a:	4b49      	ldr	r3, [pc, #292]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0ee      	beq.n	8006104 <HAL_RCC_OscConfig+0x334>
 8006126:	e014      	b.n	8006152 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006128:	f7fb fcac 	bl	8001a84 <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800612e:	e00a      	b.n	8006146 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006130:	f7fb fca8 	bl	8001a84 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	f241 3288 	movw	r2, #5000	; 0x1388
 800613e:	4293      	cmp	r3, r2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e0b5      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006146:	4b3e      	ldr	r3, [pc, #248]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 8006148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1ee      	bne.n	8006130 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d105      	bne.n	8006164 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006158:	4b39      	ldr	r3, [pc, #228]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	4a38      	ldr	r2, [pc, #224]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 800615e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006162:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80a1 	beq.w	80062b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800616e:	4b34      	ldr	r3, [pc, #208]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 030c 	and.w	r3, r3, #12
 8006176:	2b08      	cmp	r3, #8
 8006178:	d05c      	beq.n	8006234 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d141      	bne.n	8006206 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006182:	4b31      	ldr	r3, [pc, #196]	; (8006248 <HAL_RCC_OscConfig+0x478>)
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006188:	f7fb fc7c 	bl	8001a84 <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006190:	f7fb fc78 	bl	8001a84 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e087      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a2:	4b27      	ldr	r3, [pc, #156]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f0      	bne.n	8006190 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69da      	ldr	r2, [r3, #28]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	019b      	lsls	r3, r3, #6
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	3b01      	subs	r3, #1
 80061c8:	041b      	lsls	r3, r3, #16
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	061b      	lsls	r3, r3, #24
 80061d2:	491b      	ldr	r1, [pc, #108]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061d8:	4b1b      	ldr	r3, [pc, #108]	; (8006248 <HAL_RCC_OscConfig+0x478>)
 80061da:	2201      	movs	r2, #1
 80061dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061de:	f7fb fc51 	bl	8001a84 <HAL_GetTick>
 80061e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061e4:	e008      	b.n	80061f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061e6:	f7fb fc4d 	bl	8001a84 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d901      	bls.n	80061f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e05c      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f8:	4b11      	ldr	r3, [pc, #68]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d0f0      	beq.n	80061e6 <HAL_RCC_OscConfig+0x416>
 8006204:	e054      	b.n	80062b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006206:	4b10      	ldr	r3, [pc, #64]	; (8006248 <HAL_RCC_OscConfig+0x478>)
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800620c:	f7fb fc3a 	bl	8001a84 <HAL_GetTick>
 8006210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006212:	e008      	b.n	8006226 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006214:	f7fb fc36 	bl	8001a84 <HAL_GetTick>
 8006218:	4602      	mov	r2, r0
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d901      	bls.n	8006226 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e045      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006226:	4b06      	ldr	r3, [pc, #24]	; (8006240 <HAL_RCC_OscConfig+0x470>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1f0      	bne.n	8006214 <HAL_RCC_OscConfig+0x444>
 8006232:	e03d      	b.n	80062b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	2b01      	cmp	r3, #1
 800623a:	d107      	bne.n	800624c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e038      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
 8006240:	40023800 	.word	0x40023800
 8006244:	40007000 	.word	0x40007000
 8006248:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800624c:	4b1b      	ldr	r3, [pc, #108]	; (80062bc <HAL_RCC_OscConfig+0x4ec>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d028      	beq.n	80062ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006264:	429a      	cmp	r2, r3
 8006266:	d121      	bne.n	80062ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006272:	429a      	cmp	r2, r3
 8006274:	d11a      	bne.n	80062ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800627c:	4013      	ands	r3, r2
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006282:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006284:	4293      	cmp	r3, r2
 8006286:	d111      	bne.n	80062ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006292:	085b      	lsrs	r3, r3, #1
 8006294:	3b01      	subs	r3, #1
 8006296:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006298:	429a      	cmp	r2, r3
 800629a:	d107      	bne.n	80062ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d001      	beq.n	80062b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e000      	b.n	80062b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40023800 	.word	0x40023800

080062c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e0cc      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062d4:	4b68      	ldr	r3, [pc, #416]	; (8006478 <HAL_RCC_ClockConfig+0x1b8>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d90c      	bls.n	80062fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062e2:	4b65      	ldr	r3, [pc, #404]	; (8006478 <HAL_RCC_ClockConfig+0x1b8>)
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	b2d2      	uxtb	r2, r2
 80062e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ea:	4b63      	ldr	r3, [pc, #396]	; (8006478 <HAL_RCC_ClockConfig+0x1b8>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0307 	and.w	r3, r3, #7
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e0b8      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d020      	beq.n	800634a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0304 	and.w	r3, r3, #4
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006314:	4b59      	ldr	r3, [pc, #356]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	4a58      	ldr	r2, [pc, #352]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 800631a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800631e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0308 	and.w	r3, r3, #8
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800632c:	4b53      	ldr	r3, [pc, #332]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4a52      	ldr	r2, [pc, #328]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006332:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006338:	4b50      	ldr	r3, [pc, #320]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	494d      	ldr	r1, [pc, #308]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	4313      	orrs	r3, r2
 8006348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d044      	beq.n	80063e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d107      	bne.n	800636e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635e:	4b47      	ldr	r3, [pc, #284]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d119      	bne.n	800639e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	e07f      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d003      	beq.n	800637e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800637a:	2b03      	cmp	r3, #3
 800637c:	d107      	bne.n	800638e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800637e:	4b3f      	ldr	r3, [pc, #252]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e06f      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800638e:	4b3b      	ldr	r3, [pc, #236]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e067      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800639e:	4b37      	ldr	r3, [pc, #220]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f023 0203 	bic.w	r2, r3, #3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	4934      	ldr	r1, [pc, #208]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063b0:	f7fb fb68 	bl	8001a84 <HAL_GetTick>
 80063b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b6:	e00a      	b.n	80063ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b8:	f7fb fb64 	bl	8001a84 <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e04f      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ce:	4b2b      	ldr	r3, [pc, #172]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 020c 	and.w	r2, r3, #12
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	429a      	cmp	r2, r3
 80063de:	d1eb      	bne.n	80063b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063e0:	4b25      	ldr	r3, [pc, #148]	; (8006478 <HAL_RCC_ClockConfig+0x1b8>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d20c      	bcs.n	8006408 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ee:	4b22      	ldr	r3, [pc, #136]	; (8006478 <HAL_RCC_ClockConfig+0x1b8>)
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	b2d2      	uxtb	r2, r2
 80063f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f6:	4b20      	ldr	r3, [pc, #128]	; (8006478 <HAL_RCC_ClockConfig+0x1b8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d001      	beq.n	8006408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e032      	b.n	800646e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b00      	cmp	r3, #0
 8006412:	d008      	beq.n	8006426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006414:	4b19      	ldr	r3, [pc, #100]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	4916      	ldr	r1, [pc, #88]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006422:	4313      	orrs	r3, r2
 8006424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	d009      	beq.n	8006446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006432:	4b12      	ldr	r3, [pc, #72]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	490e      	ldr	r1, [pc, #56]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 8006442:	4313      	orrs	r3, r2
 8006444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006446:	f000 f821 	bl	800648c <HAL_RCC_GetSysClockFreq>
 800644a:	4602      	mov	r2, r0
 800644c:	4b0b      	ldr	r3, [pc, #44]	; (800647c <HAL_RCC_ClockConfig+0x1bc>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	091b      	lsrs	r3, r3, #4
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	490a      	ldr	r1, [pc, #40]	; (8006480 <HAL_RCC_ClockConfig+0x1c0>)
 8006458:	5ccb      	ldrb	r3, [r1, r3]
 800645a:	fa22 f303 	lsr.w	r3, r2, r3
 800645e:	4a09      	ldr	r2, [pc, #36]	; (8006484 <HAL_RCC_ClockConfig+0x1c4>)
 8006460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006462:	4b09      	ldr	r3, [pc, #36]	; (8006488 <HAL_RCC_ClockConfig+0x1c8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f7fb f9ac 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	40023c00 	.word	0x40023c00
 800647c:	40023800 	.word	0x40023800
 8006480:	08008198 	.word	0x08008198
 8006484:	20000000 	.word	0x20000000
 8006488:	20000004 	.word	0x20000004

0800648c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800648c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006490:	b094      	sub	sp, #80	; 0x50
 8006492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	647b      	str	r3, [r7, #68]	; 0x44
 8006498:	2300      	movs	r3, #0
 800649a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800649c:	2300      	movs	r3, #0
 800649e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064a4:	4b79      	ldr	r3, [pc, #484]	; (800668c <HAL_RCC_GetSysClockFreq+0x200>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 030c 	and.w	r3, r3, #12
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d00d      	beq.n	80064cc <HAL_RCC_GetSysClockFreq+0x40>
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	f200 80e1 	bhi.w	8006678 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_RCC_GetSysClockFreq+0x34>
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d003      	beq.n	80064c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80064be:	e0db      	b.n	8006678 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064c0:	4b73      	ldr	r3, [pc, #460]	; (8006690 <HAL_RCC_GetSysClockFreq+0x204>)
 80064c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80064c4:	e0db      	b.n	800667e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064c6:	4b73      	ldr	r3, [pc, #460]	; (8006694 <HAL_RCC_GetSysClockFreq+0x208>)
 80064c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80064ca:	e0d8      	b.n	800667e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064cc:	4b6f      	ldr	r3, [pc, #444]	; (800668c <HAL_RCC_GetSysClockFreq+0x200>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064d6:	4b6d      	ldr	r3, [pc, #436]	; (800668c <HAL_RCC_GetSysClockFreq+0x200>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d063      	beq.n	80065aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064e2:	4b6a      	ldr	r3, [pc, #424]	; (800668c <HAL_RCC_GetSysClockFreq+0x200>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	2200      	movs	r2, #0
 80064ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80064ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80064ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f4:	633b      	str	r3, [r7, #48]	; 0x30
 80064f6:	2300      	movs	r3, #0
 80064f8:	637b      	str	r3, [r7, #52]	; 0x34
 80064fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80064fe:	4622      	mov	r2, r4
 8006500:	462b      	mov	r3, r5
 8006502:	f04f 0000 	mov.w	r0, #0
 8006506:	f04f 0100 	mov.w	r1, #0
 800650a:	0159      	lsls	r1, r3, #5
 800650c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006510:	0150      	lsls	r0, r2, #5
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4621      	mov	r1, r4
 8006518:	1a51      	subs	r1, r2, r1
 800651a:	6139      	str	r1, [r7, #16]
 800651c:	4629      	mov	r1, r5
 800651e:	eb63 0301 	sbc.w	r3, r3, r1
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	f04f 0200 	mov.w	r2, #0
 8006528:	f04f 0300 	mov.w	r3, #0
 800652c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006530:	4659      	mov	r1, fp
 8006532:	018b      	lsls	r3, r1, #6
 8006534:	4651      	mov	r1, sl
 8006536:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800653a:	4651      	mov	r1, sl
 800653c:	018a      	lsls	r2, r1, #6
 800653e:	4651      	mov	r1, sl
 8006540:	ebb2 0801 	subs.w	r8, r2, r1
 8006544:	4659      	mov	r1, fp
 8006546:	eb63 0901 	sbc.w	r9, r3, r1
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800655a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800655e:	4690      	mov	r8, r2
 8006560:	4699      	mov	r9, r3
 8006562:	4623      	mov	r3, r4
 8006564:	eb18 0303 	adds.w	r3, r8, r3
 8006568:	60bb      	str	r3, [r7, #8]
 800656a:	462b      	mov	r3, r5
 800656c:	eb49 0303 	adc.w	r3, r9, r3
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	f04f 0200 	mov.w	r2, #0
 8006576:	f04f 0300 	mov.w	r3, #0
 800657a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800657e:	4629      	mov	r1, r5
 8006580:	024b      	lsls	r3, r1, #9
 8006582:	4621      	mov	r1, r4
 8006584:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006588:	4621      	mov	r1, r4
 800658a:	024a      	lsls	r2, r1, #9
 800658c:	4610      	mov	r0, r2
 800658e:	4619      	mov	r1, r3
 8006590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006592:	2200      	movs	r2, #0
 8006594:	62bb      	str	r3, [r7, #40]	; 0x28
 8006596:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006598:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800659c:	f7f9 fe14 	bl	80001c8 <__aeabi_uldivmod>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4613      	mov	r3, r2
 80065a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065a8:	e058      	b.n	800665c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065aa:	4b38      	ldr	r3, [pc, #224]	; (800668c <HAL_RCC_GetSysClockFreq+0x200>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	099b      	lsrs	r3, r3, #6
 80065b0:	2200      	movs	r2, #0
 80065b2:	4618      	mov	r0, r3
 80065b4:	4611      	mov	r1, r2
 80065b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065ba:	623b      	str	r3, [r7, #32]
 80065bc:	2300      	movs	r3, #0
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
 80065c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065c4:	4642      	mov	r2, r8
 80065c6:	464b      	mov	r3, r9
 80065c8:	f04f 0000 	mov.w	r0, #0
 80065cc:	f04f 0100 	mov.w	r1, #0
 80065d0:	0159      	lsls	r1, r3, #5
 80065d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065d6:	0150      	lsls	r0, r2, #5
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4641      	mov	r1, r8
 80065de:	ebb2 0a01 	subs.w	sl, r2, r1
 80065e2:	4649      	mov	r1, r9
 80065e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065fc:	ebb2 040a 	subs.w	r4, r2, sl
 8006600:	eb63 050b 	sbc.w	r5, r3, fp
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	00eb      	lsls	r3, r5, #3
 800660e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006612:	00e2      	lsls	r2, r4, #3
 8006614:	4614      	mov	r4, r2
 8006616:	461d      	mov	r5, r3
 8006618:	4643      	mov	r3, r8
 800661a:	18e3      	adds	r3, r4, r3
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	464b      	mov	r3, r9
 8006620:	eb45 0303 	adc.w	r3, r5, r3
 8006624:	607b      	str	r3, [r7, #4]
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006632:	4629      	mov	r1, r5
 8006634:	028b      	lsls	r3, r1, #10
 8006636:	4621      	mov	r1, r4
 8006638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800663c:	4621      	mov	r1, r4
 800663e:	028a      	lsls	r2, r1, #10
 8006640:	4610      	mov	r0, r2
 8006642:	4619      	mov	r1, r3
 8006644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006646:	2200      	movs	r2, #0
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	61fa      	str	r2, [r7, #28]
 800664c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006650:	f7f9 fdba 	bl	80001c8 <__aeabi_uldivmod>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4613      	mov	r3, r2
 800665a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <HAL_RCC_GetSysClockFreq+0x200>)
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	0c1b      	lsrs	r3, r3, #16
 8006662:	f003 0303 	and.w	r3, r3, #3
 8006666:	3301      	adds	r3, #1
 8006668:	005b      	lsls	r3, r3, #1
 800666a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800666c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800666e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006670:	fbb2 f3f3 	udiv	r3, r2, r3
 8006674:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006676:	e002      	b.n	800667e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006678:	4b05      	ldr	r3, [pc, #20]	; (8006690 <HAL_RCC_GetSysClockFreq+0x204>)
 800667a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800667c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800667e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006680:	4618      	mov	r0, r3
 8006682:	3750      	adds	r7, #80	; 0x50
 8006684:	46bd      	mov	sp, r7
 8006686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800668a:	bf00      	nop
 800668c:	40023800 	.word	0x40023800
 8006690:	00f42400 	.word	0x00f42400
 8006694:	007a1200 	.word	0x007a1200

08006698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800669c:	4b03      	ldr	r3, [pc, #12]	; (80066ac <HAL_RCC_GetHCLKFreq+0x14>)
 800669e:	681b      	ldr	r3, [r3, #0]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	20000000 	.word	0x20000000

080066b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066b4:	f7ff fff0 	bl	8006698 <HAL_RCC_GetHCLKFreq>
 80066b8:	4602      	mov	r2, r0
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	0a9b      	lsrs	r3, r3, #10
 80066c0:	f003 0307 	and.w	r3, r3, #7
 80066c4:	4903      	ldr	r1, [pc, #12]	; (80066d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066c6:	5ccb      	ldrb	r3, [r1, r3]
 80066c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40023800 	.word	0x40023800
 80066d4:	080081a8 	.word	0x080081a8

080066d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066dc:	f7ff ffdc 	bl	8006698 <HAL_RCC_GetHCLKFreq>
 80066e0:	4602      	mov	r2, r0
 80066e2:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	0b5b      	lsrs	r3, r3, #13
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	4903      	ldr	r1, [pc, #12]	; (80066fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ee:	5ccb      	ldrb	r3, [r1, r3]
 80066f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40023800 	.word	0x40023800
 80066fc:	080081a8 	.word	0x080081a8

08006700 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	220f      	movs	r2, #15
 800670e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006710:	4b12      	ldr	r3, [pc, #72]	; (800675c <HAL_RCC_GetClockConfig+0x5c>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f003 0203 	and.w	r2, r3, #3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800671c:	4b0f      	ldr	r3, [pc, #60]	; (800675c <HAL_RCC_GetClockConfig+0x5c>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006728:	4b0c      	ldr	r3, [pc, #48]	; (800675c <HAL_RCC_GetClockConfig+0x5c>)
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006734:	4b09      	ldr	r3, [pc, #36]	; (800675c <HAL_RCC_GetClockConfig+0x5c>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	08db      	lsrs	r3, r3, #3
 800673a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006742:	4b07      	ldr	r3, [pc, #28]	; (8006760 <HAL_RCC_GetClockConfig+0x60>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0207 	and.w	r2, r3, #7
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	601a      	str	r2, [r3, #0]
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40023800 	.word	0x40023800
 8006760:	40023c00 	.word	0x40023c00

08006764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d101      	bne.n	8006776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e041      	b.n	80067fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fa ff5c 	bl	8001648 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f000 fa96 	bl	8006cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006812:	b2db      	uxtb	r3, r3
 8006814:	2b01      	cmp	r3, #1
 8006816:	d001      	beq.n	800681c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e04e      	b.n	80068ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2202      	movs	r2, #2
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0201 	orr.w	r2, r2, #1
 8006832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a23      	ldr	r2, [pc, #140]	; (80068c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d022      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006846:	d01d      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <HAL_TIM_Base_Start_IT+0xc8>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d018      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1e      	ldr	r2, [pc, #120]	; (80068d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d013      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00e      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a1b      	ldr	r2, [pc, #108]	; (80068d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d009      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a19      	ldr	r2, [pc, #100]	; (80068dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d004      	beq.n	8006884 <HAL_TIM_Base_Start_IT+0x80>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a18      	ldr	r2, [pc, #96]	; (80068e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d111      	bne.n	80068a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f003 0307 	and.w	r3, r3, #7
 800688e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2b06      	cmp	r3, #6
 8006894:	d010      	beq.n	80068b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f042 0201 	orr.w	r2, r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a6:	e007      	b.n	80068b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0201 	orr.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	40010000 	.word	0x40010000
 80068cc:	40000400 	.word	0x40000400
 80068d0:	40000800 	.word	0x40000800
 80068d4:	40000c00 	.word	0x40000c00
 80068d8:	40010400 	.word	0x40010400
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40001800 	.word	0x40001800

080068e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d122      	bne.n	8006940 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b02      	cmp	r3, #2
 8006906:	d11b      	bne.n	8006940 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f06f 0202 	mvn.w	r2, #2
 8006910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699b      	ldr	r3, [r3, #24]
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f9b5 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 800692c:	e005      	b.n	800693a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f9a7 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f9b8 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f003 0304 	and.w	r3, r3, #4
 800694a:	2b04      	cmp	r3, #4
 800694c:	d122      	bne.n	8006994 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b04      	cmp	r3, #4
 800695a:	d11b      	bne.n	8006994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f06f 0204 	mvn.w	r2, #4
 8006964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2202      	movs	r2, #2
 800696a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f98b 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 8006980:	e005      	b.n	800698e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f97d 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f98e 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b08      	cmp	r3, #8
 80069a0:	d122      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d11b      	bne.n	80069e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f06f 0208 	mvn.w	r2, #8
 80069b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2204      	movs	r2, #4
 80069be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f961 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 80069d4:	e005      	b.n	80069e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f953 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f964 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f003 0310 	and.w	r3, r3, #16
 80069f2:	2b10      	cmp	r3, #16
 80069f4:	d122      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b10      	cmp	r3, #16
 8006a02:	d11b      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0210 	mvn.w	r2, #16
 8006a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2208      	movs	r2, #8
 8006a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f937 	bl	8006c96 <HAL_TIM_IC_CaptureCallback>
 8006a28:	e005      	b.n	8006a36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f929 	bl	8006c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f93a 	bl	8006caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d10e      	bne.n	8006a68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f003 0301 	and.w	r3, r3, #1
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d107      	bne.n	8006a68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f06f 0201 	mvn.w	r2, #1
 8006a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fa fb5e 	bl	8001124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a72:	2b80      	cmp	r3, #128	; 0x80
 8006a74:	d10e      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a80:	2b80      	cmp	r3, #128	; 0x80
 8006a82:	d107      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fae0 	bl	8007054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d10e      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aac:	2b40      	cmp	r3, #64	; 0x40
 8006aae:	d107      	bne.n	8006ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f8ff 	bl	8006cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d10e      	bne.n	8006aec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d107      	bne.n	8006aec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f06f 0220 	mvn.w	r2, #32
 8006ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 faaa 	bl	8007040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006aec:	bf00      	nop
 8006aee:	3708      	adds	r7, #8
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_TIM_ConfigClockSource+0x1c>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e0b4      	b.n	8006c7a <HAL_TIM_ConfigClockSource+0x186>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b48:	d03e      	beq.n	8006bc8 <HAL_TIM_ConfigClockSource+0xd4>
 8006b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b4e:	f200 8087 	bhi.w	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b56:	f000 8086 	beq.w	8006c66 <HAL_TIM_ConfigClockSource+0x172>
 8006b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b5e:	d87f      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b60:	2b70      	cmp	r3, #112	; 0x70
 8006b62:	d01a      	beq.n	8006b9a <HAL_TIM_ConfigClockSource+0xa6>
 8006b64:	2b70      	cmp	r3, #112	; 0x70
 8006b66:	d87b      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b68:	2b60      	cmp	r3, #96	; 0x60
 8006b6a:	d050      	beq.n	8006c0e <HAL_TIM_ConfigClockSource+0x11a>
 8006b6c:	2b60      	cmp	r3, #96	; 0x60
 8006b6e:	d877      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b70:	2b50      	cmp	r3, #80	; 0x50
 8006b72:	d03c      	beq.n	8006bee <HAL_TIM_ConfigClockSource+0xfa>
 8006b74:	2b50      	cmp	r3, #80	; 0x50
 8006b76:	d873      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b78:	2b40      	cmp	r3, #64	; 0x40
 8006b7a:	d058      	beq.n	8006c2e <HAL_TIM_ConfigClockSource+0x13a>
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	d86f      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b80:	2b30      	cmp	r3, #48	; 0x30
 8006b82:	d064      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x15a>
 8006b84:	2b30      	cmp	r3, #48	; 0x30
 8006b86:	d86b      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	d060      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x15a>
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d867      	bhi.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d05c      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x15a>
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d05a      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x15a>
 8006b98:	e062      	b.n	8006c60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6818      	ldr	r0, [r3, #0]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	6899      	ldr	r1, [r3, #8]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f000 f9ad 	bl	8006f08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	609a      	str	r2, [r3, #8]
      break;
 8006bc6:	e04f      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	6899      	ldr	r1, [r3, #8]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f000 f996 	bl	8006f08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006bea:	609a      	str	r2, [r3, #8]
      break;
 8006bec:	e03c      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6818      	ldr	r0, [r3, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6859      	ldr	r1, [r3, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f000 f90a 	bl	8006e14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2150      	movs	r1, #80	; 0x50
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 f963 	bl	8006ed2 <TIM_ITRx_SetConfig>
      break;
 8006c0c:	e02c      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6859      	ldr	r1, [r3, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f000 f929 	bl	8006e72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2160      	movs	r1, #96	; 0x60
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 f953 	bl	8006ed2 <TIM_ITRx_SetConfig>
      break;
 8006c2c:	e01c      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	6859      	ldr	r1, [r3, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f000 f8ea 	bl	8006e14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2140      	movs	r1, #64	; 0x40
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 f943 	bl	8006ed2 <TIM_ITRx_SetConfig>
      break;
 8006c4c:	e00c      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f000 f93a 	bl	8006ed2 <TIM_ITRx_SetConfig>
      break;
 8006c5e:	e003      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	73fb      	strb	r3, [r7, #15]
      break;
 8006c64:	e000      	b.n	8006c68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cb2:	bf00      	nop
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a40      	ldr	r2, [pc, #256]	; (8006de8 <TIM_Base_SetConfig+0x114>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d013      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf2:	d00f      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a3d      	ldr	r2, [pc, #244]	; (8006dec <TIM_Base_SetConfig+0x118>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d00b      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a3c      	ldr	r2, [pc, #240]	; (8006df0 <TIM_Base_SetConfig+0x11c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d007      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a3b      	ldr	r2, [pc, #236]	; (8006df4 <TIM_Base_SetConfig+0x120>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d003      	beq.n	8006d14 <TIM_Base_SetConfig+0x40>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a3a      	ldr	r2, [pc, #232]	; (8006df8 <TIM_Base_SetConfig+0x124>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d108      	bne.n	8006d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a2f      	ldr	r2, [pc, #188]	; (8006de8 <TIM_Base_SetConfig+0x114>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d02b      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d34:	d027      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a2c      	ldr	r2, [pc, #176]	; (8006dec <TIM_Base_SetConfig+0x118>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d023      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a2b      	ldr	r2, [pc, #172]	; (8006df0 <TIM_Base_SetConfig+0x11c>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d01f      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a2a      	ldr	r2, [pc, #168]	; (8006df4 <TIM_Base_SetConfig+0x120>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d01b      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a29      	ldr	r2, [pc, #164]	; (8006df8 <TIM_Base_SetConfig+0x124>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d017      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a28      	ldr	r2, [pc, #160]	; (8006dfc <TIM_Base_SetConfig+0x128>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d013      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a27      	ldr	r2, [pc, #156]	; (8006e00 <TIM_Base_SetConfig+0x12c>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00f      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a26      	ldr	r2, [pc, #152]	; (8006e04 <TIM_Base_SetConfig+0x130>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d00b      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a25      	ldr	r2, [pc, #148]	; (8006e08 <TIM_Base_SetConfig+0x134>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d007      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a24      	ldr	r2, [pc, #144]	; (8006e0c <TIM_Base_SetConfig+0x138>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d003      	beq.n	8006d86 <TIM_Base_SetConfig+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a23      	ldr	r2, [pc, #140]	; (8006e10 <TIM_Base_SetConfig+0x13c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d108      	bne.n	8006d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a0a      	ldr	r2, [pc, #40]	; (8006de8 <TIM_Base_SetConfig+0x114>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_Base_SetConfig+0xf8>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4a0c      	ldr	r2, [pc, #48]	; (8006df8 <TIM_Base_SetConfig+0x124>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d103      	bne.n	8006dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	615a      	str	r2, [r3, #20]
}
 8006dda:	bf00      	nop
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40010000 	.word	0x40010000
 8006dec:	40000400 	.word	0x40000400
 8006df0:	40000800 	.word	0x40000800
 8006df4:	40000c00 	.word	0x40000c00
 8006df8:	40010400 	.word	0x40010400
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40014400 	.word	0x40014400
 8006e04:	40014800 	.word	0x40014800
 8006e08:	40001800 	.word	0x40001800
 8006e0c:	40001c00 	.word	0x40001c00
 8006e10:	40002000 	.word	0x40002000

08006e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	f023 0201 	bic.w	r2, r3, #1
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f023 030a 	bic.w	r3, r3, #10
 8006e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	621a      	str	r2, [r3, #32]
}
 8006e66:	bf00      	nop
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b087      	sub	sp, #28
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	f023 0210 	bic.w	r2, r3, #16
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1b      	ldr	r3, [r3, #32]
 8006e94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	031b      	lsls	r3, r3, #12
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006eae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	697a      	ldr	r2, [r7, #20]
 8006ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	621a      	str	r2, [r3, #32]
}
 8006ec6:	bf00      	nop
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f043 0307 	orr.w	r3, r3, #7
 8006ef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	609a      	str	r2, [r3, #8]
}
 8006efc:	bf00      	nop
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	021a      	lsls	r2, r3, #8
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	609a      	str	r2, [r3, #8]
}
 8006f3c:	bf00      	nop
 8006f3e:	371c      	adds	r7, #28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e05a      	b.n	8007016 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2202      	movs	r2, #2
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a21      	ldr	r2, [pc, #132]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d022      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fac:	d01d      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1d      	ldr	r2, [pc, #116]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d018      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1b      	ldr	r2, [pc, #108]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1a      	ldr	r2, [pc, #104]	; (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00e      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a18      	ldr	r2, [pc, #96]	; (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d009      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a17      	ldr	r2, [pc, #92]	; (8007038 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a15      	ldr	r2, [pc, #84]	; (800703c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d10c      	bne.n	8007004 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40010000 	.word	0x40010000
 8007028:	40000400 	.word	0x40000400
 800702c:	40000800 	.word	0x40000800
 8007030:	40000c00 	.word	0x40000c00
 8007034:	40010400 	.word	0x40010400
 8007038:	40014000 	.word	0x40014000
 800703c:	40001800 	.word	0x40001800

08007040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800705c:	bf00      	nop
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e03f      	b.n	80070fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fa fb16 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2224      	movs	r2, #36	; 0x24
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fdc7 	bl	8007c40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691a      	ldr	r2, [r3, #16]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695a      	ldr	r2, [r3, #20]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b08c      	sub	sp, #48	; 0x30
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	4613      	mov	r3, r2
 8007110:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b20      	cmp	r3, #32
 800711c:	d165      	bne.n	80071ea <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <HAL_UART_Transmit_DMA+0x26>
 8007124:	88fb      	ldrh	r3, [r7, #6]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e05e      	b.n	80071ec <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_UART_Transmit_DMA+0x38>
 8007138:	2302      	movs	r3, #2
 800713a:	e057      	b.n	80071ec <HAL_UART_Transmit_DMA+0xe8>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	88fa      	ldrh	r2, [r7, #6]
 800714e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	88fa      	ldrh	r2, [r7, #6]
 8007154:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2221      	movs	r2, #33	; 0x21
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007168:	4a22      	ldr	r2, [pc, #136]	; (80071f4 <HAL_UART_Transmit_DMA+0xf0>)
 800716a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007170:	4a21      	ldr	r2, [pc, #132]	; (80071f8 <HAL_UART_Transmit_DMA+0xf4>)
 8007172:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007178:	4a20      	ldr	r2, [pc, #128]	; (80071fc <HAL_UART_Transmit_DMA+0xf8>)
 800717a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007180:	2200      	movs	r2, #0
 8007182:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007184:	f107 0308 	add.w	r3, r7, #8
 8007188:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800718e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007190:	6819      	ldr	r1, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3304      	adds	r3, #4
 8007198:	461a      	mov	r2, r3
 800719a:	88fb      	ldrh	r3, [r7, #6]
 800719c:	f7fb fdf2 	bl	8002d84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071a8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3314      	adds	r3, #20
 80071b8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	617b      	str	r3, [r7, #20]
   return(result);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	3314      	adds	r3, #20
 80071d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071d2:	627a      	str	r2, [r7, #36]	; 0x24
 80071d4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d6:	6a39      	ldr	r1, [r7, #32]
 80071d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071da:	e841 2300 	strex	r3, r2, [r1]
 80071de:	61fb      	str	r3, [r7, #28]
   return(result);
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d1e5      	bne.n	80071b2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	e000      	b.n	80071ec <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80071ea:	2302      	movs	r3, #2
  }
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3730      	adds	r7, #48	; 0x30
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	08007771 	.word	0x08007771
 80071f8:	0800780b 	.word	0x0800780b
 80071fc:	08007827 	.word	0x08007827

08007200 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b0ba      	sub	sp, #232	; 0xe8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007226:	2300      	movs	r3, #0
 8007228:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800722c:	2300      	movs	r3, #0
 800722e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007236:	f003 030f 	and.w	r3, r3, #15
 800723a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800723e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10f      	bne.n	8007266 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724a:	f003 0320 	and.w	r3, r3, #32
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <HAL_UART_IRQHandler+0x66>
 8007252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fc32 	bl	8007ac8 <UART_Receive_IT>
      return;
 8007264:	e256      	b.n	8007714 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007266:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 80de 	beq.w	800742c <HAL_UART_IRQHandler+0x22c>
 8007270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d106      	bne.n	800728a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800727c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007280:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 80d1 	beq.w	800742c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800728a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00b      	beq.n	80072ae <HAL_UART_IRQHandler+0xae>
 8007296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d005      	beq.n	80072ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	f043 0201 	orr.w	r2, r3, #1
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072b2:	f003 0304 	and.w	r3, r3, #4
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00b      	beq.n	80072d2 <HAL_UART_IRQHandler+0xd2>
 80072ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	f043 0202 	orr.w	r2, r3, #2
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00b      	beq.n	80072f6 <HAL_UART_IRQHandler+0xf6>
 80072de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	f043 0204 	orr.w	r2, r3, #4
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072fa:	f003 0308 	and.w	r3, r3, #8
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d011      	beq.n	8007326 <HAL_UART_IRQHandler+0x126>
 8007302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007306:	f003 0320 	and.w	r3, r3, #32
 800730a:	2b00      	cmp	r3, #0
 800730c:	d105      	bne.n	800731a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800730e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	f043 0208 	orr.w	r2, r3, #8
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 81ed 	beq.w	800770a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007334:	f003 0320 	and.w	r3, r3, #32
 8007338:	2b00      	cmp	r3, #0
 800733a:	d008      	beq.n	800734e <HAL_UART_IRQHandler+0x14e>
 800733c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fbbd 	bl	8007ac8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007358:	2b40      	cmp	r3, #64	; 0x40
 800735a:	bf0c      	ite	eq
 800735c:	2301      	moveq	r3, #1
 800735e:	2300      	movne	r3, #0
 8007360:	b2db      	uxtb	r3, r3
 8007362:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f003 0308 	and.w	r3, r3, #8
 800736e:	2b00      	cmp	r3, #0
 8007370:	d103      	bne.n	800737a <HAL_UART_IRQHandler+0x17a>
 8007372:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007376:	2b00      	cmp	r3, #0
 8007378:	d04f      	beq.n	800741a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fac5 	bl	800790a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738a:	2b40      	cmp	r3, #64	; 0x40
 800738c:	d141      	bne.n	8007412 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3314      	adds	r3, #20
 8007394:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	3314      	adds	r3, #20
 80073b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1d9      	bne.n	800738e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d013      	beq.n	800740a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e6:	4a7d      	ldr	r2, [pc, #500]	; (80075dc <HAL_UART_IRQHandler+0x3dc>)
 80073e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fb fd90 	bl	8002f14 <HAL_DMA_Abort_IT>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d016      	beq.n	8007428 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007404:	4610      	mov	r0, r2
 8007406:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007408:	e00e      	b.n	8007428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f99a 	bl	8007744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007410:	e00a      	b.n	8007428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f996 	bl	8007744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	e006      	b.n	8007428 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 f992 	bl	8007744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007426:	e170      	b.n	800770a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007428:	bf00      	nop
    return;
 800742a:	e16e      	b.n	800770a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007430:	2b01      	cmp	r3, #1
 8007432:	f040 814a 	bne.w	80076ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800743a:	f003 0310 	and.w	r3, r3, #16
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 8143 	beq.w	80076ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 813c 	beq.w	80076ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007452:	2300      	movs	r3, #0
 8007454:	60bb      	str	r3, [r7, #8]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60bb      	str	r3, [r7, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	60bb      	str	r3, [r7, #8]
 8007466:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b40      	cmp	r3, #64	; 0x40
 8007474:	f040 80b4 	bne.w	80075e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007488:	2b00      	cmp	r3, #0
 800748a:	f000 8140 	beq.w	800770e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007496:	429a      	cmp	r2, r3
 8007498:	f080 8139 	bcs.w	800770e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ae:	f000 8088 	beq.w	80075c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	330c      	adds	r3, #12
 80074b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	330c      	adds	r3, #12
 80074da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80074de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074ee:	e841 2300 	strex	r3, r2, [r1]
 80074f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1d9      	bne.n	80074b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3314      	adds	r3, #20
 8007504:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800750e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007510:	f023 0301 	bic.w	r3, r3, #1
 8007514:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3314      	adds	r3, #20
 800751e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007522:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007526:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800752a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800752e:	e841 2300 	strex	r3, r2, [r1]
 8007532:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e1      	bne.n	80074fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3314      	adds	r3, #20
 8007540:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800754a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800754c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007550:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	3314      	adds	r3, #20
 800755a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800755e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007560:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007564:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800756c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e3      	bne.n	800753a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	330c      	adds	r3, #12
 8007586:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007592:	f023 0310 	bic.w	r3, r3, #16
 8007596:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	330c      	adds	r3, #12
 80075a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80075a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80075a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075ac:	e841 2300 	strex	r3, r2, [r1]
 80075b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d1e3      	bne.n	8007580 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fb fc39 	bl	8002e34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	4619      	mov	r1, r3
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f8c0 	bl	8007758 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075d8:	e099      	b.n	800770e <HAL_UART_IRQHandler+0x50e>
 80075da:	bf00      	nop
 80075dc:	080079d1 	.word	0x080079d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 808b 	beq.w	8007712 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80075fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 8086 	beq.w	8007712 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	330c      	adds	r3, #12
 800760c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007610:	e853 3f00 	ldrex	r3, [r3]
 8007614:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800761c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	330c      	adds	r3, #12
 8007626:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800762a:	647a      	str	r2, [r7, #68]	; 0x44
 800762c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007632:	e841 2300 	strex	r3, r2, [r1]
 8007636:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1e3      	bne.n	8007606 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3314      	adds	r3, #20
 8007644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	623b      	str	r3, [r7, #32]
   return(result);
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	f023 0301 	bic.w	r3, r3, #1
 8007654:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3314      	adds	r3, #20
 800765e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007662:	633a      	str	r2, [r7, #48]	; 0x30
 8007664:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007666:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800766a:	e841 2300 	strex	r3, r2, [r1]
 800766e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1e3      	bne.n	800763e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	330c      	adds	r3, #12
 800768a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	e853 3f00 	ldrex	r3, [r3]
 8007692:	60fb      	str	r3, [r7, #12]
   return(result);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0310 	bic.w	r3, r3, #16
 800769a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	330c      	adds	r3, #12
 80076a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80076a8:	61fa      	str	r2, [r7, #28]
 80076aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ac:	69b9      	ldr	r1, [r7, #24]
 80076ae:	69fa      	ldr	r2, [r7, #28]
 80076b0:	e841 2300 	strex	r3, r2, [r1]
 80076b4:	617b      	str	r3, [r7, #20]
   return(result);
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1e3      	bne.n	8007684 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f848 	bl	8007758 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076c8:	e023      	b.n	8007712 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d009      	beq.n	80076ea <HAL_UART_IRQHandler+0x4ea>
 80076d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f988 	bl	80079f8 <UART_Transmit_IT>
    return;
 80076e8:	e014      	b.n	8007714 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00e      	beq.n	8007714 <HAL_UART_IRQHandler+0x514>
 80076f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d008      	beq.n	8007714 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f9c8 	bl	8007a98 <UART_EndTransmit_IT>
    return;
 8007708:	e004      	b.n	8007714 <HAL_UART_IRQHandler+0x514>
    return;
 800770a:	bf00      	nop
 800770c:	e002      	b.n	8007714 <HAL_UART_IRQHandler+0x514>
      return;
 800770e:	bf00      	nop
 8007710:	e000      	b.n	8007714 <HAL_UART_IRQHandler+0x514>
      return;
 8007712:	bf00      	nop
  }
}
 8007714:	37e8      	adds	r7, #232	; 0xe8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop

0800771c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b090      	sub	sp, #64	; 0x40
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007788:	2b00      	cmp	r3, #0
 800778a:	d137      	bne.n	80077fc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800778c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778e:	2200      	movs	r2, #0
 8007790:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3314      	adds	r3, #20
 8007798:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779c:	e853 3f00 	ldrex	r3, [r3]
 80077a0:	623b      	str	r3, [r7, #32]
   return(result);
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80077aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	3314      	adds	r3, #20
 80077b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077b2:	633a      	str	r2, [r7, #48]	; 0x30
 80077b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e5      	bne.n	8007792 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	330c      	adds	r3, #12
 80077cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	e853 3f00 	ldrex	r3, [r3]
 80077d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077dc:	637b      	str	r3, [r7, #52]	; 0x34
 80077de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	330c      	adds	r3, #12
 80077e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077e6:	61fa      	str	r2, [r7, #28]
 80077e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ea:	69b9      	ldr	r1, [r7, #24]
 80077ec:	69fa      	ldr	r2, [r7, #28]
 80077ee:	e841 2300 	strex	r3, r2, [r1]
 80077f2:	617b      	str	r3, [r7, #20]
   return(result);
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1e5      	bne.n	80077c6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80077fa:	e002      	b.n	8007802 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80077fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80077fe:	f7f8 ffb5 	bl	800076c <HAL_UART_TxCpltCallback>
}
 8007802:	bf00      	nop
 8007804:	3740      	adds	r7, #64	; 0x40
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007816:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f7ff ff7f 	bl	800771c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800781e:	bf00      	nop
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800782e:	2300      	movs	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007836:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007842:	2b80      	cmp	r3, #128	; 0x80
 8007844:	bf0c      	ite	eq
 8007846:	2301      	moveq	r3, #1
 8007848:	2300      	movne	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b21      	cmp	r3, #33	; 0x21
 8007858:	d108      	bne.n	800786c <UART_DMAError+0x46>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2200      	movs	r2, #0
 8007864:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007866:	68b8      	ldr	r0, [r7, #8]
 8007868:	f000 f827 	bl	80078ba <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007876:	2b40      	cmp	r3, #64	; 0x40
 8007878:	bf0c      	ite	eq
 800787a:	2301      	moveq	r3, #1
 800787c:	2300      	movne	r3, #0
 800787e:	b2db      	uxtb	r3, r3
 8007880:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b22      	cmp	r3, #34	; 0x22
 800788c:	d108      	bne.n	80078a0 <UART_DMAError+0x7a>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d005      	beq.n	80078a0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	2200      	movs	r2, #0
 8007898:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800789a:	68b8      	ldr	r0, [r7, #8]
 800789c:	f000 f835 	bl	800790a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a4:	f043 0210 	orr.w	r2, r3, #16
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078ac:	68b8      	ldr	r0, [r7, #8]
 80078ae:	f7ff ff49 	bl	8007744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078b2:	bf00      	nop
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b089      	sub	sp, #36	; 0x24
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80078d8:	61fb      	str	r3, [r7, #28]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	330c      	adds	r3, #12
 80078e0:	69fa      	ldr	r2, [r7, #28]
 80078e2:	61ba      	str	r2, [r7, #24]
 80078e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6979      	ldr	r1, [r7, #20]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	613b      	str	r3, [r7, #16]
   return(result);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e5      	bne.n	80078c2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2220      	movs	r2, #32
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80078fe:	bf00      	nop
 8007900:	3724      	adds	r7, #36	; 0x24
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800790a:	b480      	push	{r7}
 800790c:	b095      	sub	sp, #84	; 0x54
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	330c      	adds	r3, #12
 8007918:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007928:	64fb      	str	r3, [r7, #76]	; 0x4c
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	330c      	adds	r3, #12
 8007930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007932:	643a      	str	r2, [r7, #64]	; 0x40
 8007934:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007936:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007938:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e5      	bne.n	8007912 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3314      	adds	r3, #20
 800794c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800794e:	6a3b      	ldr	r3, [r7, #32]
 8007950:	e853 3f00 	ldrex	r3, [r3]
 8007954:	61fb      	str	r3, [r7, #28]
   return(result);
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	64bb      	str	r3, [r7, #72]	; 0x48
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3314      	adds	r3, #20
 8007964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007966:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007968:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800796c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800796e:	e841 2300 	strex	r3, r2, [r1]
 8007972:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1e5      	bne.n	8007946 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797e:	2b01      	cmp	r3, #1
 8007980:	d119      	bne.n	80079b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	330c      	adds	r3, #12
 8007988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	60bb      	str	r3, [r7, #8]
   return(result);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	f023 0310 	bic.w	r3, r3, #16
 8007998:	647b      	str	r3, [r7, #68]	; 0x44
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	330c      	adds	r3, #12
 80079a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079a2:	61ba      	str	r2, [r7, #24]
 80079a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a6:	6979      	ldr	r1, [r7, #20]
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	e841 2300 	strex	r3, r2, [r1]
 80079ae:	613b      	str	r3, [r7, #16]
   return(result);
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1e5      	bne.n	8007982 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2220      	movs	r2, #32
 80079ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80079c4:	bf00      	nop
 80079c6:	3754      	adds	r7, #84	; 0x54
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f7ff feaa 	bl	8007744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079f0:	bf00      	nop
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b21      	cmp	r3, #33	; 0x21
 8007a0a:	d13e      	bne.n	8007a8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a14:	d114      	bne.n	8007a40 <UART_Transmit_IT+0x48>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d110      	bne.n	8007a40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	881b      	ldrh	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	1c9a      	adds	r2, r3, #2
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	621a      	str	r2, [r3, #32]
 8007a3e:	e008      	b.n	8007a52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	1c59      	adds	r1, r3, #1
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	6211      	str	r1, [r2, #32]
 8007a4a:	781a      	ldrb	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10f      	bne.n	8007a86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	e000      	b.n	8007a8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007a8a:	2302      	movs	r3, #2
  }
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7f8 fe57 	bl	800076c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08c      	sub	sp, #48	; 0x30
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b22      	cmp	r3, #34	; 0x22
 8007ada:	f040 80ab 	bne.w	8007c34 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae6:	d117      	bne.n	8007b18 <UART_Receive_IT+0x50>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d113      	bne.n	8007b18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007af0:	2300      	movs	r3, #0
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b10:	1c9a      	adds	r2, r3, #2
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	629a      	str	r2, [r3, #40]	; 0x28
 8007b16:	e026      	b.n	8007b66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b2a:	d007      	beq.n	8007b3c <UART_Receive_IT+0x74>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10a      	bne.n	8007b4a <UART_Receive_IT+0x82>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d106      	bne.n	8007b4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	b2da      	uxtb	r2, r3
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	701a      	strb	r2, [r3, #0]
 8007b48:	e008      	b.n	8007b5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	4619      	mov	r1, r3
 8007b74:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d15a      	bne.n	8007c30 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 0220 	bic.w	r2, r2, #32
 8007b88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	695a      	ldr	r2, [r3, #20]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 0201 	bic.w	r2, r2, #1
 8007ba8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d135      	bne.n	8007c26 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	330c      	adds	r3, #12
 8007bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	613b      	str	r3, [r7, #16]
   return(result);
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f023 0310 	bic.w	r3, r3, #16
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	330c      	adds	r3, #12
 8007bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be0:	623a      	str	r2, [r7, #32]
 8007be2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	69f9      	ldr	r1, [r7, #28]
 8007be6:	6a3a      	ldr	r2, [r7, #32]
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e5      	bne.n	8007bc0 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0310 	and.w	r3, r3, #16
 8007bfe:	2b10      	cmp	r3, #16
 8007c00:	d10a      	bne.n	8007c18 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	60fb      	str	r3, [r7, #12]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff fd9a 	bl	8007758 <HAL_UARTEx_RxEventCallback>
 8007c24:	e002      	b.n	8007c2c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff fd82 	bl	8007730 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	e002      	b.n	8007c36 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e000      	b.n	8007c36 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007c34:	2302      	movs	r3, #2
  }
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3730      	adds	r7, #48	; 0x30
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
	...

08007c40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c44:	b0c0      	sub	sp, #256	; 0x100
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c5c:	68d9      	ldr	r1, [r3, #12]
 8007c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	ea40 0301 	orr.w	r3, r0, r1
 8007c68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c6e:	689a      	ldr	r2, [r3, #8]
 8007c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	431a      	orrs	r2, r3
 8007c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007c98:	f021 010c 	bic.w	r1, r1, #12
 8007c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007ca6:	430b      	orrs	r3, r1
 8007ca8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	695b      	ldr	r3, [r3, #20]
 8007cb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cba:	6999      	ldr	r1, [r3, #24]
 8007cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	ea40 0301 	orr.w	r3, r0, r1
 8007cc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	4b8f      	ldr	r3, [pc, #572]	; (8007f0c <UART_SetConfig+0x2cc>)
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d005      	beq.n	8007ce0 <UART_SetConfig+0xa0>
 8007cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	4b8d      	ldr	r3, [pc, #564]	; (8007f10 <UART_SetConfig+0x2d0>)
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d104      	bne.n	8007cea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ce0:	f7fe fcfa 	bl	80066d8 <HAL_RCC_GetPCLK2Freq>
 8007ce4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007ce8:	e003      	b.n	8007cf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cea:	f7fe fce1 	bl	80066b0 <HAL_RCC_GetPCLK1Freq>
 8007cee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cfc:	f040 810c 	bne.w	8007f18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007d0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007d0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007d12:	4622      	mov	r2, r4
 8007d14:	462b      	mov	r3, r5
 8007d16:	1891      	adds	r1, r2, r2
 8007d18:	65b9      	str	r1, [r7, #88]	; 0x58
 8007d1a:	415b      	adcs	r3, r3
 8007d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007d22:	4621      	mov	r1, r4
 8007d24:	eb12 0801 	adds.w	r8, r2, r1
 8007d28:	4629      	mov	r1, r5
 8007d2a:	eb43 0901 	adc.w	r9, r3, r1
 8007d2e:	f04f 0200 	mov.w	r2, #0
 8007d32:	f04f 0300 	mov.w	r3, #0
 8007d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d42:	4690      	mov	r8, r2
 8007d44:	4699      	mov	r9, r3
 8007d46:	4623      	mov	r3, r4
 8007d48:	eb18 0303 	adds.w	r3, r8, r3
 8007d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d50:	462b      	mov	r3, r5
 8007d52:	eb49 0303 	adc.w	r3, r9, r3
 8007d56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007d66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007d6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007d6e:	460b      	mov	r3, r1
 8007d70:	18db      	adds	r3, r3, r3
 8007d72:	653b      	str	r3, [r7, #80]	; 0x50
 8007d74:	4613      	mov	r3, r2
 8007d76:	eb42 0303 	adc.w	r3, r2, r3
 8007d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8007d7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007d80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007d84:	f7f8 fa20 	bl	80001c8 <__aeabi_uldivmod>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4b61      	ldr	r3, [pc, #388]	; (8007f14 <UART_SetConfig+0x2d4>)
 8007d8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d92:	095b      	lsrs	r3, r3, #5
 8007d94:	011c      	lsls	r4, r3, #4
 8007d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007da0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007da4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007da8:	4642      	mov	r2, r8
 8007daa:	464b      	mov	r3, r9
 8007dac:	1891      	adds	r1, r2, r2
 8007dae:	64b9      	str	r1, [r7, #72]	; 0x48
 8007db0:	415b      	adcs	r3, r3
 8007db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007db4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007db8:	4641      	mov	r1, r8
 8007dba:	eb12 0a01 	adds.w	sl, r2, r1
 8007dbe:	4649      	mov	r1, r9
 8007dc0:	eb43 0b01 	adc.w	fp, r3, r1
 8007dc4:	f04f 0200 	mov.w	r2, #0
 8007dc8:	f04f 0300 	mov.w	r3, #0
 8007dcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007dd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dd8:	4692      	mov	sl, r2
 8007dda:	469b      	mov	fp, r3
 8007ddc:	4643      	mov	r3, r8
 8007dde:	eb1a 0303 	adds.w	r3, sl, r3
 8007de2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007de6:	464b      	mov	r3, r9
 8007de8:	eb4b 0303 	adc.w	r3, fp, r3
 8007dec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007e00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007e04:	460b      	mov	r3, r1
 8007e06:	18db      	adds	r3, r3, r3
 8007e08:	643b      	str	r3, [r7, #64]	; 0x40
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	eb42 0303 	adc.w	r3, r2, r3
 8007e10:	647b      	str	r3, [r7, #68]	; 0x44
 8007e12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007e16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007e1a:	f7f8 f9d5 	bl	80001c8 <__aeabi_uldivmod>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	460b      	mov	r3, r1
 8007e22:	4611      	mov	r1, r2
 8007e24:	4b3b      	ldr	r3, [pc, #236]	; (8007f14 <UART_SetConfig+0x2d4>)
 8007e26:	fba3 2301 	umull	r2, r3, r3, r1
 8007e2a:	095b      	lsrs	r3, r3, #5
 8007e2c:	2264      	movs	r2, #100	; 0x64
 8007e2e:	fb02 f303 	mul.w	r3, r2, r3
 8007e32:	1acb      	subs	r3, r1, r3
 8007e34:	00db      	lsls	r3, r3, #3
 8007e36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007e3a:	4b36      	ldr	r3, [pc, #216]	; (8007f14 <UART_SetConfig+0x2d4>)
 8007e3c:	fba3 2302 	umull	r2, r3, r3, r2
 8007e40:	095b      	lsrs	r3, r3, #5
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e48:	441c      	add	r4, r3
 8007e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007e58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007e5c:	4642      	mov	r2, r8
 8007e5e:	464b      	mov	r3, r9
 8007e60:	1891      	adds	r1, r2, r2
 8007e62:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e64:	415b      	adcs	r3, r3
 8007e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e6c:	4641      	mov	r1, r8
 8007e6e:	1851      	adds	r1, r2, r1
 8007e70:	6339      	str	r1, [r7, #48]	; 0x30
 8007e72:	4649      	mov	r1, r9
 8007e74:	414b      	adcs	r3, r1
 8007e76:	637b      	str	r3, [r7, #52]	; 0x34
 8007e78:	f04f 0200 	mov.w	r2, #0
 8007e7c:	f04f 0300 	mov.w	r3, #0
 8007e80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007e84:	4659      	mov	r1, fp
 8007e86:	00cb      	lsls	r3, r1, #3
 8007e88:	4651      	mov	r1, sl
 8007e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e8e:	4651      	mov	r1, sl
 8007e90:	00ca      	lsls	r2, r1, #3
 8007e92:	4610      	mov	r0, r2
 8007e94:	4619      	mov	r1, r3
 8007e96:	4603      	mov	r3, r0
 8007e98:	4642      	mov	r2, r8
 8007e9a:	189b      	adds	r3, r3, r2
 8007e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	460a      	mov	r2, r1
 8007ea4:	eb42 0303 	adc.w	r3, r2, r3
 8007ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007eb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007ebc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	18db      	adds	r3, r3, r3
 8007ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	eb42 0303 	adc.w	r3, r2, r3
 8007ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ece:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ed2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007ed6:	f7f8 f977 	bl	80001c8 <__aeabi_uldivmod>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4b0d      	ldr	r3, [pc, #52]	; (8007f14 <UART_SetConfig+0x2d4>)
 8007ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ee4:	095b      	lsrs	r3, r3, #5
 8007ee6:	2164      	movs	r1, #100	; 0x64
 8007ee8:	fb01 f303 	mul.w	r3, r1, r3
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	00db      	lsls	r3, r3, #3
 8007ef0:	3332      	adds	r3, #50	; 0x32
 8007ef2:	4a08      	ldr	r2, [pc, #32]	; (8007f14 <UART_SetConfig+0x2d4>)
 8007ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef8:	095b      	lsrs	r3, r3, #5
 8007efa:	f003 0207 	and.w	r2, r3, #7
 8007efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4422      	add	r2, r4
 8007f06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f08:	e105      	b.n	8008116 <UART_SetConfig+0x4d6>
 8007f0a:	bf00      	nop
 8007f0c:	40011000 	.word	0x40011000
 8007f10:	40011400 	.word	0x40011400
 8007f14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007f26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007f2a:	4642      	mov	r2, r8
 8007f2c:	464b      	mov	r3, r9
 8007f2e:	1891      	adds	r1, r2, r2
 8007f30:	6239      	str	r1, [r7, #32]
 8007f32:	415b      	adcs	r3, r3
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
 8007f36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f3a:	4641      	mov	r1, r8
 8007f3c:	1854      	adds	r4, r2, r1
 8007f3e:	4649      	mov	r1, r9
 8007f40:	eb43 0501 	adc.w	r5, r3, r1
 8007f44:	f04f 0200 	mov.w	r2, #0
 8007f48:	f04f 0300 	mov.w	r3, #0
 8007f4c:	00eb      	lsls	r3, r5, #3
 8007f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f52:	00e2      	lsls	r2, r4, #3
 8007f54:	4614      	mov	r4, r2
 8007f56:	461d      	mov	r5, r3
 8007f58:	4643      	mov	r3, r8
 8007f5a:	18e3      	adds	r3, r4, r3
 8007f5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007f60:	464b      	mov	r3, r9
 8007f62:	eb45 0303 	adc.w	r3, r5, r3
 8007f66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007f76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	f04f 0300 	mov.w	r3, #0
 8007f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007f86:	4629      	mov	r1, r5
 8007f88:	008b      	lsls	r3, r1, #2
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f90:	4621      	mov	r1, r4
 8007f92:	008a      	lsls	r2, r1, #2
 8007f94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007f98:	f7f8 f916 	bl	80001c8 <__aeabi_uldivmod>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4b60      	ldr	r3, [pc, #384]	; (8008124 <UART_SetConfig+0x4e4>)
 8007fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fa6:	095b      	lsrs	r3, r3, #5
 8007fa8:	011c      	lsls	r4, r3, #4
 8007faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007fb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007fbc:	4642      	mov	r2, r8
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	1891      	adds	r1, r2, r2
 8007fc2:	61b9      	str	r1, [r7, #24]
 8007fc4:	415b      	adcs	r3, r3
 8007fc6:	61fb      	str	r3, [r7, #28]
 8007fc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fcc:	4641      	mov	r1, r8
 8007fce:	1851      	adds	r1, r2, r1
 8007fd0:	6139      	str	r1, [r7, #16]
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	414b      	adcs	r3, r1
 8007fd6:	617b      	str	r3, [r7, #20]
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fe4:	4659      	mov	r1, fp
 8007fe6:	00cb      	lsls	r3, r1, #3
 8007fe8:	4651      	mov	r1, sl
 8007fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fee:	4651      	mov	r1, sl
 8007ff0:	00ca      	lsls	r2, r1, #3
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	4642      	mov	r2, r8
 8007ffa:	189b      	adds	r3, r3, r2
 8007ffc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008000:	464b      	mov	r3, r9
 8008002:	460a      	mov	r2, r1
 8008004:	eb42 0303 	adc.w	r3, r2, r3
 8008008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800800c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	67bb      	str	r3, [r7, #120]	; 0x78
 8008016:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008018:	f04f 0200 	mov.w	r2, #0
 800801c:	f04f 0300 	mov.w	r3, #0
 8008020:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008024:	4649      	mov	r1, r9
 8008026:	008b      	lsls	r3, r1, #2
 8008028:	4641      	mov	r1, r8
 800802a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800802e:	4641      	mov	r1, r8
 8008030:	008a      	lsls	r2, r1, #2
 8008032:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008036:	f7f8 f8c7 	bl	80001c8 <__aeabi_uldivmod>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4b39      	ldr	r3, [pc, #228]	; (8008124 <UART_SetConfig+0x4e4>)
 8008040:	fba3 1302 	umull	r1, r3, r3, r2
 8008044:	095b      	lsrs	r3, r3, #5
 8008046:	2164      	movs	r1, #100	; 0x64
 8008048:	fb01 f303 	mul.w	r3, r1, r3
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	3332      	adds	r3, #50	; 0x32
 8008052:	4a34      	ldr	r2, [pc, #208]	; (8008124 <UART_SetConfig+0x4e4>)
 8008054:	fba2 2303 	umull	r2, r3, r2, r3
 8008058:	095b      	lsrs	r3, r3, #5
 800805a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800805e:	441c      	add	r4, r3
 8008060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008064:	2200      	movs	r2, #0
 8008066:	673b      	str	r3, [r7, #112]	; 0x70
 8008068:	677a      	str	r2, [r7, #116]	; 0x74
 800806a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800806e:	4642      	mov	r2, r8
 8008070:	464b      	mov	r3, r9
 8008072:	1891      	adds	r1, r2, r2
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	415b      	adcs	r3, r3
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800807e:	4641      	mov	r1, r8
 8008080:	1851      	adds	r1, r2, r1
 8008082:	6039      	str	r1, [r7, #0]
 8008084:	4649      	mov	r1, r9
 8008086:	414b      	adcs	r3, r1
 8008088:	607b      	str	r3, [r7, #4]
 800808a:	f04f 0200 	mov.w	r2, #0
 800808e:	f04f 0300 	mov.w	r3, #0
 8008092:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008096:	4659      	mov	r1, fp
 8008098:	00cb      	lsls	r3, r1, #3
 800809a:	4651      	mov	r1, sl
 800809c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080a0:	4651      	mov	r1, sl
 80080a2:	00ca      	lsls	r2, r1, #3
 80080a4:	4610      	mov	r0, r2
 80080a6:	4619      	mov	r1, r3
 80080a8:	4603      	mov	r3, r0
 80080aa:	4642      	mov	r2, r8
 80080ac:	189b      	adds	r3, r3, r2
 80080ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80080b0:	464b      	mov	r3, r9
 80080b2:	460a      	mov	r2, r1
 80080b4:	eb42 0303 	adc.w	r3, r2, r3
 80080b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	663b      	str	r3, [r7, #96]	; 0x60
 80080c4:	667a      	str	r2, [r7, #100]	; 0x64
 80080c6:	f04f 0200 	mov.w	r2, #0
 80080ca:	f04f 0300 	mov.w	r3, #0
 80080ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80080d2:	4649      	mov	r1, r9
 80080d4:	008b      	lsls	r3, r1, #2
 80080d6:	4641      	mov	r1, r8
 80080d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080dc:	4641      	mov	r1, r8
 80080de:	008a      	lsls	r2, r1, #2
 80080e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80080e4:	f7f8 f870 	bl	80001c8 <__aeabi_uldivmod>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <UART_SetConfig+0x4e4>)
 80080ee:	fba3 1302 	umull	r1, r3, r3, r2
 80080f2:	095b      	lsrs	r3, r3, #5
 80080f4:	2164      	movs	r1, #100	; 0x64
 80080f6:	fb01 f303 	mul.w	r3, r1, r3
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	3332      	adds	r3, #50	; 0x32
 8008100:	4a08      	ldr	r2, [pc, #32]	; (8008124 <UART_SetConfig+0x4e4>)
 8008102:	fba2 2303 	umull	r2, r3, r2, r3
 8008106:	095b      	lsrs	r3, r3, #5
 8008108:	f003 020f 	and.w	r2, r3, #15
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4422      	add	r2, r4
 8008114:	609a      	str	r2, [r3, #8]
}
 8008116:	bf00      	nop
 8008118:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800811c:	46bd      	mov	sp, r7
 800811e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008122:	bf00      	nop
 8008124:	51eb851f 	.word	0x51eb851f

08008128 <__libc_init_array>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4d0d      	ldr	r5, [pc, #52]	; (8008160 <__libc_init_array+0x38>)
 800812c:	4c0d      	ldr	r4, [pc, #52]	; (8008164 <__libc_init_array+0x3c>)
 800812e:	1b64      	subs	r4, r4, r5
 8008130:	10a4      	asrs	r4, r4, #2
 8008132:	2600      	movs	r6, #0
 8008134:	42a6      	cmp	r6, r4
 8008136:	d109      	bne.n	800814c <__libc_init_array+0x24>
 8008138:	4d0b      	ldr	r5, [pc, #44]	; (8008168 <__libc_init_array+0x40>)
 800813a:	4c0c      	ldr	r4, [pc, #48]	; (800816c <__libc_init_array+0x44>)
 800813c:	f000 f820 	bl	8008180 <_init>
 8008140:	1b64      	subs	r4, r4, r5
 8008142:	10a4      	asrs	r4, r4, #2
 8008144:	2600      	movs	r6, #0
 8008146:	42a6      	cmp	r6, r4
 8008148:	d105      	bne.n	8008156 <__libc_init_array+0x2e>
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008150:	4798      	blx	r3
 8008152:	3601      	adds	r6, #1
 8008154:	e7ee      	b.n	8008134 <__libc_init_array+0xc>
 8008156:	f855 3b04 	ldr.w	r3, [r5], #4
 800815a:	4798      	blx	r3
 800815c:	3601      	adds	r6, #1
 800815e:	e7f2      	b.n	8008146 <__libc_init_array+0x1e>
 8008160:	080081c0 	.word	0x080081c0
 8008164:	080081c0 	.word	0x080081c0
 8008168:	080081c0 	.word	0x080081c0
 800816c:	080081c4 	.word	0x080081c4

08008170 <memset>:
 8008170:	4402      	add	r2, r0
 8008172:	4603      	mov	r3, r0
 8008174:	4293      	cmp	r3, r2
 8008176:	d100      	bne.n	800817a <memset+0xa>
 8008178:	4770      	bx	lr
 800817a:	f803 1b01 	strb.w	r1, [r3], #1
 800817e:	e7f9      	b.n	8008174 <memset+0x4>

08008180 <_init>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr

0800818c <_fini>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	bf00      	nop
 8008190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008192:	bc08      	pop	{r3}
 8008194:	469e      	mov	lr, r3
 8008196:	4770      	bx	lr
