
thermal_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c954  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800cae8  0800cae8  0001cae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf24  0800cf24  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf24  0800cf24  0001cf24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf2c  0800cf2c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf2c  0800cf2c  0001cf2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf30  0800cf30  0001cf30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800cf34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00005938  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005b14  20005b14  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017050  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d76  00000000  00000000  0003725c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00039fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012f8  00000000  00000000  0003b3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024999  00000000  00000000  0003c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017abf  00000000  00000000  00061081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de053  00000000  00000000  00078b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156b93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006744  00000000  00000000  00156be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cacc 	.word	0x0800cacc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800cacc 	.word	0x0800cacc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <amg8833Init>:

#include "AMG8833.h"
#include "utils.h"
#include "stm32f4xx.h"

void amg8833Init(AMG8833 *inst,I2C_HandleTypeDef *hi2c,uint8_t ad_sel){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	4613      	mov	r3, r2
 8000f58:	71fb      	strb	r3, [r7, #7]
	inst->adri2c= ad_sel ? ( AMG8833_I2C_BASE_ADR + 1 ) << 1 :
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <amg8833Init+0x18>
 8000f60:	22d2      	movs	r2, #210	; 0xd2
 8000f62:	e000      	b.n	8000f66 <amg8833Init+0x1a>
 8000f64:	22d0      	movs	r2, #208	; 0xd0
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	801a      	strh	r2, [r3, #0]
								AMG8833_I2C_BASE_ADR << 1;
	inst->hi2c=hi2c;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	605a      	str	r2, [r3, #4]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <amg8833IsReady>:

uint8_t amg8833IsReady(AMG8833 *inst){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status=HAL_I2C_IsDeviceReady(inst->hi2c,inst->adri2c,5,10);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6858      	ldr	r0, [r3, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	8819      	ldrh	r1, [r3, #0]
 8000f8c:	230a      	movs	r3, #10
 8000f8e:	2205      	movs	r2, #5
 8000f90:	f004 fba4 	bl	80056dc <HAL_I2C_IsDeviceReady>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]
	return (uint8_t)(status==HAL_OK);
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	bf0c      	ite	eq
 8000f9e:	2301      	moveq	r3, #1
 8000fa0:	2300      	movne	r3, #0
 8000fa2:	b2db      	uxtb	r3, r3
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <amg8833ReadDMA>:
	return status;


}

HAL_StatusTypeDef amg8833ReadDMA(AMG8833 *inst,uint8_t *data){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	status=HAL_I2C_Mem_Read_DMA(inst->hi2c,(uint16_t)inst->adri2c,AMG8833_T01L,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6858      	ldr	r0, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	8819      	ldrh	r1, [r3, #0]
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	f004 f9f3 	bl	80053b4 <HAL_I2C_Mem_Read_DMA>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
			1,data,AMG8833_DS);

	return status;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <initJstick>:
#include "Jstick.h"
#include "stm32f4xx.h"
#include "utils.h"


void initJstick(Jstick *inst,ADC_HandleTypeDef *hadc,uint16_t errpin,GPIO_TypeDef *errport){
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	80fb      	strh	r3, [r7, #6]
	inst->hadc=hadc;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	601a      	str	r2, [r3, #0]
	inst->errpin=errpin;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	88fa      	ldrh	r2, [r7, #6]
 8000ff6:	809a      	strh	r2, [r3, #4]
	inst->errport=errport;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	609a      	str	r2, [r3, #8]

}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <jstickGetDirPoll>:


JstickDir jstickGetDirPoll(Jstick *inst){
 800100a:	b580      	push	{r7, lr}
 800100c:	b084      	sub	sp, #16
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
	uint16_t raw_val;
	HAL_StatusTypeDef status;

	status=HAL_ADC_PollForConversion(inst->hadc,50);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2132      	movs	r1, #50	; 0x32
 8001018:	4618      	mov	r0, r3
 800101a:	f002 fadd 	bl	80035d8 <HAL_ADC_PollForConversion>
 800101e:	4603      	mov	r3, r0
 8001020:	73fb      	strb	r3, [r7, #15]

	if(status==HAL_OK){
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d111      	bne.n	800104c <jstickGetDirPoll+0x42>
		raw_val=HAL_ADC_GetValue(inst->hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f002 fc6f 	bl	8003910 <HAL_ADC_GetValue>
 8001032:	4603      	mov	r3, r0
 8001034:	81bb      	strh	r3, [r7, #12]

		if(raw_val>4000) return RIGHT;
 8001036:	89bb      	ldrh	r3, [r7, #12]
 8001038:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800103c:	d901      	bls.n	8001042 <jstickGetDirPoll+0x38>
 800103e:	2302      	movs	r3, #2
 8001040:	e005      	b.n	800104e <jstickGetDirPoll+0x44>
		if(raw_val<100) return LEFT;
 8001042:	89bb      	ldrh	r3, [r7, #12]
 8001044:	2b63      	cmp	r3, #99	; 0x63
 8001046:	d801      	bhi.n	800104c <jstickGetDirPoll+0x42>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <jstickGetDirPoll+0x44>
	}

	return CENTER;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <initStep>:
#include "Step.h"
#include "utils.h"
#include "stm32f4xx.h"

/*Init stepper motor data structure*/
void initStep(Step *inst,uint16_t p0,uint16_t p1,uint16_t p2,uint16_t p3,GPIO_TypeDef *port,StepMode mode,TIM_HandleTypeDef *htim){
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	60f8      	str	r0, [r7, #12]
 800105e:	4608      	mov	r0, r1
 8001060:	4611      	mov	r1, r2
 8001062:	461a      	mov	r2, r3
 8001064:	4603      	mov	r3, r0
 8001066:	817b      	strh	r3, [r7, #10]
 8001068:	460b      	mov	r3, r1
 800106a:	813b      	strh	r3, [r7, #8]
 800106c:	4613      	mov	r3, r2
 800106e:	80fb      	strh	r3, [r7, #6]

	/*Assign gpio pins and port*/
	inst->pins[0]=p0;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	897a      	ldrh	r2, [r7, #10]
 8001074:	801a      	strh	r2, [r3, #0]
	inst->pins[1]=p1;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	893a      	ldrh	r2, [r7, #8]
 800107a:	805a      	strh	r2, [r3, #2]
	inst->pins[2]=p2;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	88fa      	ldrh	r2, [r7, #6]
 8001080:	809a      	strh	r2, [r3, #4]
	inst->pins[3]=p3;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	8b3a      	ldrh	r2, [r7, #24]
 8001086:	80da      	strh	r2, [r3, #6]

	inst->port=port;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	609a      	str	r2, [r3, #8]

	initMode(inst,mode);
 800108e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001092:	4619      	mov	r1, r3
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f000 f811 	bl	80010bc <initMode>

	inst->ang_idx=0;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
	inst->move_lock=0;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2200      	movs	r2, #0
 80010a4:	771a      	strb	r2, [r3, #28]
	inst->htim=htim;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010aa:	619a      	str	r2, [r3, #24]
	inst->ang_lim=0;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <initMode>:

/*Init step mode, step resolution, step sequence indexes and reset pins*/
void initMode(Step *inst,StepMode mode){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
	inst->mode=mode;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	78fa      	ldrb	r2, [r7, #3]
 80010cc:	731a      	strb	r2, [r3, #12]
	inst->cur_step=0;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	735a      	strb	r2, [r3, #13]
	rstPins(inst);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 f80f 	bl	80010f8 <rstPins>

	if(mode==WAVE || mode==FULL)
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d002      	beq.n	80010e6 <initMode+0x2a>
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d102      	bne.n	80010ec <initMode+0x30>
		inst->res=360.0/2038.0;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a02      	ldr	r2, [pc, #8]	; (80010f4 <initMode+0x38>)
 80010ea:	615a      	str	r2, [r3, #20]
}
 80010ec:	bf00      	nop
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	3e34e21b 	.word	0x3e34e21b

080010f8 <rstPins>:
void rstPins(Step *inst){
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	inst->port->ODR&=~( inst->pins[0] | inst->pins[1] | inst->pins[2] | inst->pins[3] );
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	8819      	ldrh	r1, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	885b      	ldrh	r3, [r3, #2]
 800110e:	430b      	orrs	r3, r1
 8001110:	b299      	uxth	r1, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	889b      	ldrh	r3, [r3, #4]
 8001116:	430b      	orrs	r3, r1
 8001118:	b299      	uxth	r1, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	88db      	ldrh	r3, [r3, #6]
 800111e:	430b      	orrs	r3, r1
 8001120:	b29b      	uxth	r3, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	400a      	ands	r2, r1
 800112c:	615a      	str	r2, [r3, #20]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <rstAngle>:

void rstAngle(Step *inst){
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
	inst->ang_idx=0;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <waveStep>:
    |1  0  0  0|
    |0  1  0  0|
    |0  0  1  0|
    |0  0  0  1|
 */
void waveStep(Step *inst,uint8_t dir){
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]

	/*Reset current step pin*/
	inst->port->ODR&= ~(inst->pins[ inst->cur_step ]);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	695a      	ldr	r2, [r3, #20]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	7b5b      	ldrb	r3, [r3, #13]
 800116a:	4619      	mov	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001172:	43db      	mvns	r3, r3
 8001174:	4619      	mov	r1, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	400a      	ands	r2, r1
 800117c:	615a      	str	r2, [r3, #20]

	/*Update current step and angular index according to given direction*/
	if(dir){
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00e      	beq.n	80011a2 <waveStep+0x4e>
		inst->cur_step=(inst->cur_step + 1) & 0x3;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	7b5b      	ldrb	r3, [r3, #13]
 8001188:	3301      	adds	r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	b2da      	uxtb	r2, r3
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	735a      	strb	r2, [r3, #13]
		inst->ang_idx ++;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	e010      	b.n	80011c4 <waveStep+0x70>
	}
	else{
		inst->cur_step= inst->cur_step ? (inst->cur_step - 1) : 0x3;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7b5b      	ldrb	r3, [r3, #13]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d004      	beq.n	80011b4 <waveStep+0x60>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7b5b      	ldrb	r3, [r3, #13]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	e000      	b.n	80011b6 <waveStep+0x62>
 80011b4:	2203      	movs	r2, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	735a      	strb	r2, [r3, #13]
		inst->ang_idx --;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	1e5a      	subs	r2, r3, #1
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	611a      	str	r2, [r3, #16]
	}

	/*Set updated current step pin*/
	inst->port->ODR|= inst->pins[ inst->cur_step ];
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	695a      	ldr	r2, [r3, #20]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7b5b      	ldrb	r3, [r3, #13]
 80011ce:	4619      	mov	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011d6:	4619      	mov	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	430a      	orrs	r2, r1
 80011de:	615a      	str	r2, [r3, #20]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <fullStep>:
    |1  1  0  0|
    |0  1  1  0|
    |0  0  1  1|
    |1  0  0  1|
 */
void fullStep(Step *inst,uint8_t dir){
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]

	/*Update current step and angular index according to given direction*/
	if(dir){
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d01d      	beq.n	800123a <fullStep+0x4e>
		/*Reset current step pin*/
		inst->port->ODR&= ~(inst->pins[ inst->cur_step ]);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	695a      	ldr	r2, [r3, #20]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7b5b      	ldrb	r3, [r3, #13]
 8001208:	4619      	mov	r1, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001210:	43db      	mvns	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	400a      	ands	r2, r1
 800121a:	615a      	str	r2, [r3, #20]

		inst->cur_step=(inst->cur_step + 1) & 0x3;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7b5b      	ldrb	r3, [r3, #13]
 8001220:	3301      	adds	r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	b2da      	uxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	735a      	strb	r2, [r3, #13]
		inst->ang_idx ++;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	611a      	str	r2, [r3, #16]
 8001238:	e021      	b.n	800127e <fullStep+0x92>


	}
	else{
		/*Reset current step pin*/
		inst->port->ODR&= ~(inst->pins[ (inst->cur_step + 1) & 0x3 ]);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	695a      	ldr	r2, [r3, #20]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7b5b      	ldrb	r3, [r3, #13]
 8001244:	3301      	adds	r3, #1
 8001246:	f003 0103 	and.w	r1, r3, #3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001250:	43db      	mvns	r3, r3
 8001252:	4619      	mov	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	400a      	ands	r2, r1
 800125a:	615a      	str	r2, [r3, #20]
		inst->cur_step= inst->cur_step ? (inst->cur_step - 1) : 0x3;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7b5b      	ldrb	r3, [r3, #13]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d004      	beq.n	800126e <fullStep+0x82>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7b5b      	ldrb	r3, [r3, #13]
 8001268:	3b01      	subs	r3, #1
 800126a:	b2da      	uxtb	r2, r3
 800126c:	e000      	b.n	8001270 <fullStep+0x84>
 800126e:	2203      	movs	r2, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	735a      	strb	r2, [r3, #13]
		inst->ang_idx --;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	1e5a      	subs	r2, r3, #1
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	611a      	str	r2, [r3, #16]
	}

	/*Set updated current step pin*/
	inst->port->ODR|= ( inst->pins[ inst->cur_step ] | inst->pins[ (inst->cur_step + 1) & 0x3] );
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7b5b      	ldrb	r3, [r3, #13]
 8001288:	4619      	mov	r1, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	7b5b      	ldrb	r3, [r3, #13]
 8001294:	3301      	adds	r3, #1
 8001296:	f003 0003 	and.w	r0, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80012a0:	430b      	orrs	r3, r1
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	4619      	mov	r1, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	615a      	str	r2, [r3, #20]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <step>:

/*
 * Step commands exported to client
 */
void step(Step *inst,uint8_t dir){
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	70fb      	strb	r3, [r7, #3]
	switch(inst->mode){
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	7b1b      	ldrb	r3, [r3, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <step+0x1a>
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d005      	beq.n	80012de <step+0x24>
	case WAVE:
		waveStep(inst,dir);
	case FULL:
		fullStep(inst,dir);
	}
}
 80012d2:	e009      	b.n	80012e8 <step+0x2e>
		waveStep(inst,dir);
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	4619      	mov	r1, r3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff3b 	bl	8001154 <waveStep>
		fullStep(inst,dir);
 80012de:	78fb      	ldrb	r3, [r7, #3]
 80012e0:	4619      	mov	r1, r3
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ff82 	bl	80011ec <fullStep>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <stepIt>:

/*
 * Perform one step in interrupt mode
 * this function is meant to be called inside instance timer PeriodElapsed callback
 */
void stepIt(Step *inst){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	if( inst->destination_it > inst->ang_idx * inst->res ){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131c:	dd21      	ble.n	8001362 <stepIt+0x72>

		if( inst->destination_it > ( inst->ang_idx + 1 ) * inst->res )
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	ed93 7a08 	vldr	s14, [r3, #32]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	3301      	adds	r3, #1
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	edd3 7a05 	vldr	s15, [r3, #20]
 8001338:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800133c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001344:	dd04      	ble.n	8001350 <stepIt+0x60>
			step(inst,1);
 8001346:	2101      	movs	r1, #1
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ffb6 	bl	80012ba <step>
		else{
			HAL_TIM_Base_Stop_IT(inst->htim);
			inst->move_lock=0;
		}
	}
}
 800134e:	e029      	b.n	80013a4 <stepIt+0xb4>
			HAL_TIM_Base_Stop_IT(inst->htim);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	4618      	mov	r0, r3
 8001356:	f006 ff75 	bl	8008244 <HAL_TIM_Base_Stop_IT>
			inst->move_lock=0;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	771a      	strb	r2, [r3, #28]
}
 8001360:	e020      	b.n	80013a4 <stepIt+0xb4>
		if( inst->destination_it < ( inst->ang_idx - 1 ) * inst->res )
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a08 	vldr	s14, [r3, #32]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	3b01      	subs	r3, #1
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edd3 7a05 	vldr	s15, [r3, #20]
 800137c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001388:	d504      	bpl.n	8001394 <stepIt+0xa4>
			step(inst,0);
 800138a:	2100      	movs	r1, #0
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff94 	bl	80012ba <step>
}
 8001392:	e007      	b.n	80013a4 <stepIt+0xb4>
			HAL_TIM_Base_Stop_IT(inst->htim);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4618      	mov	r0, r3
 800139a:	f006 ff53 	bl	8008244 <HAL_TIM_Base_Stop_IT>
			inst->move_lock=0;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	771a      	strb	r2, [r3, #28]
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_GPIO_EXTI_Callback>:


/*
 * Callback function to manage external interrupt push buttons pushed
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
	if( !EXTI_BUT_PUSH ){
 80013b6:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x28>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d105      	bne.n	80013ca <HAL_GPIO_EXTI_Callback+0x1e>
		EXTI_BUT_PUSH=1;
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_GPIO_EXTI_Callback+0x28>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	601a      	str	r2, [r3, #0]
		//Start debounce timer: interrupt after 50 ms
		HAL_TIM_Base_Start_IT(&htim10);
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80013c6:	f006 fecd 	bl	8008164 <HAL_TIM_Base_Start_IT>
	}
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2200007c 	.word	0x2200007c
 80013d8:	20000638 	.word	0x20000638

080013dc <HAL_I2C_MemRxCpltCallback>:
/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image reading is now complete
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a05      	ldr	r2, [pc, #20]	; (8001400 <HAL_I2C_MemRxCpltCallback+0x24>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d102      	bne.n	80013f4 <HAL_I2C_MemRxCpltCallback+0x18>
		AMG_RD_CPLT=1;
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <HAL_I2C_MemRxCpltCallback+0x28>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
	}
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40005400 	.word	0x40005400
 8001404:	22000018 	.word	0x22000018

08001408 <HAL_UART_TxCpltCallback>:

/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image output is now complete
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a05      	ldr	r2, [pc, #20]	; (800142c <HAL_UART_TxCpltCallback+0x24>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d102      	bne.n	8001420 <HAL_UART_TxCpltCallback+0x18>
		AMG_OUT_CPLT=1;
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_UART_TxCpltCallback+0x28>)
 800141c:	2201      	movs	r2, #1
 800141e:	601a      	str	r2, [r3, #0]
	}
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40004800 	.word	0x40004800
 8001430:	22000014 	.word	0x22000014

08001434 <thermalImgFSM>:
/*Manage thermal image I/O from AMG sensor to UART interface by checking bits set by:
 * Timer 6 ISR
 * DMA1 Stream 0 (Thermal image I2C Rx) Rx Cplt ISR
 * DMA1 Stream 6 (Thermal image USART2 Tx) Tx Cplt ISR
 */
void thermalImgFSM(){
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	  /*
	   * Thermal camera FSM
	   */
	  //If timer6 has expired
	  if(AMG_RD_START){
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <thermalImgFSM+0x6c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00e      	beq.n	800145e <thermalImgFSM+0x2a>

		  //Command DMA transfer from amg8833
		status=amg8833ReadDMA(&cam,img_buf);
 8001440:	4918      	ldr	r1, [pc, #96]	; (80014a4 <thermalImgFSM+0x70>)
 8001442:	4819      	ldr	r0, [pc, #100]	; (80014a8 <thermalImgFSM+0x74>)
 8001444:	f7ff fdb2 	bl	8000fac <amg8833ReadDMA>
 8001448:	4603      	mov	r3, r0
 800144a:	461a      	mov	r2, r3
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <thermalImgFSM+0x78>)
 800144e:	701a      	strb	r2, [r3, #0]
		if(status==HAL_OK)
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <thermalImgFSM+0x78>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <thermalImgFSM+0x2a>
			  //Clear ctrl bit
			  AMG_RD_START=0;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <thermalImgFSM+0x6c>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
	   }

	  //If DMA image reading was successful
	  if(AMG_RD_CPLT){
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <thermalImgFSM+0x7c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00f      	beq.n	8001486 <thermalImgFSM+0x52>

		 //Command DMA transfer to uart2
		 status=HAL_UART_Transmit_DMA(&huart3,img_buf,AMG8833_DS);
 8001466:	2280      	movs	r2, #128	; 0x80
 8001468:	490e      	ldr	r1, [pc, #56]	; (80014a4 <thermalImgFSM+0x70>)
 800146a:	4812      	ldr	r0, [pc, #72]	; (80014b4 <thermalImgFSM+0x80>)
 800146c:	f007 fb28 	bl	8008ac0 <HAL_UART_Transmit_DMA>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <thermalImgFSM+0x78>)
 8001476:	701a      	strb	r2, [r3, #0]
		 if(status==HAL_OK){
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <thermalImgFSM+0x78>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d102      	bne.n	8001486 <thermalImgFSM+0x52>
			 AMG_RD_CPLT=0;
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <thermalImgFSM+0x7c>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
		 }
	  }
	  //if latest data were consumed in output, restart timer6
	  if(AMG_OUT_CPLT){
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <thermalImgFSM+0x84>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <thermalImgFSM+0x66>
		  AMG_OUT_CPLT=0;
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <thermalImgFSM+0x84>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 8001494:	4809      	ldr	r0, [pc, #36]	; (80014bc <thermalImgFSM+0x88>)
 8001496:	f006 fe65 	bl	8008164 <HAL_TIM_Base_Start_IT>
	  }
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2200001c 	.word	0x2200001c
 80014a4:	20000804 	.word	0x20000804
 80014a8:	200007c8 	.word	0x200007c8
 80014ac:	20000904 	.word	0x20000904
 80014b0:	22000018 	.word	0x22000018
 80014b4:	20000680 	.word	0x20000680
 80014b8:	22000014 	.word	0x22000014
 80014bc:	200005a8 	.word	0x200005a8

080014c0 <HAL_ADC_ConvHalfCpltCallback>:
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_BUF_SZ sample were converted and put into audio_in_buf.
 * Data can be moved by main application from lower audio_in_buf to higher audio_out_buf
 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==ADC1){
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d108      	bne.n	80014e4 <HAL_ADC_ConvHalfCpltCallback+0x24>

#ifdef TIME_CONV_CH1
		CHRONO_START();
#endif
		audio_in_ptr1=&audio_in_buf1[0];
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 80014d4:	4a0f      	ldr	r2, [pc, #60]	; (8001514 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80014d6:	601a      	str	r2, [r3, #0]
		audio_out_ptr1=&audio_out_buf1[AUDIO_BUF_SZ];
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80014da:	4a10      	ldr	r2, [pc, #64]	; (800151c <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80014dc:	601a      	str	r2, [r3, #0]
		BUF1_CPLT=1;
 80014de:	4b10      	ldr	r3, [pc, #64]	; (8001520 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
	}

	if(hadc->Instance==ADC2){
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d108      	bne.n	8001500 <HAL_ADC_ConvHalfCpltCallback+0x40>

#ifdef TIME_CONV_CH2
		CHRONO_START();
#endif
		audio_in_ptr2=&audio_in_buf2[0];
 80014ee:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 80014f0:	4a0e      	ldr	r2, [pc, #56]	; (800152c <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 80014f2:	601a      	str	r2, [r3, #0]
		audio_out_ptr2=&audio_out_buf2[AUDIO_BUF_SZ];
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 80014f6:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80014f8:	601a      	str	r2, [r3, #0]
		BUF2_CPLT=1;
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]
	}
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	40012000 	.word	0x40012000
 8001510:	20002908 	.word	0x20002908
 8001514:	20000908 	.word	0x20000908
 8001518:	2000290c 	.word	0x2000290c
 800151c:	20001508 	.word	0x20001508
 8001520:	2200005c 	.word	0x2200005c
 8001524:	40012100 	.word	0x40012100
 8001528:	20002910 	.word	0x20002910
 800152c:	20001908 	.word	0x20001908
 8001530:	20002914 	.word	0x20002914
 8001534:	20002508 	.word	0x20002508
 8001538:	22000058 	.word	0x22000058

0800153c <HAL_DAC_ConvCpltCallbackCh1>:
/*
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_TOT_BUF_SZ sample were taken from audio out buf and fed into DAC.
 * Data can be moved by main application from higher audio_in_buf to lower audio_out_buf
 */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

#ifdef TIME_CONV_CH1
	CHRONO_STOP();
#endif
	audio_in_ptr1=&audio_in_buf1[AUDIO_BUF_SZ];
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
 8001548:	601a      	str	r2, [r3, #0]
	audio_out_ptr1=&audio_out_buf1[0];
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <HAL_DAC_ConvCpltCallbackCh1+0x30>)
 800154c:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 800154e:	601a      	str	r2, [r3, #0]
	BUF1_CPLT=1;
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_DAC_ConvCpltCallbackCh1+0x38>)
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	20002908 	.word	0x20002908
 8001568:	20000d08 	.word	0x20000d08
 800156c:	2000290c 	.word	0x2000290c
 8001570:	20001108 	.word	0x20001108
 8001574:	2200005c 	.word	0x2200005c

08001578 <HAL_DACEx_ConvCpltCallbackCh2>:

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac){
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

#ifdef TIME_CONV_CH2
	CHRONO_STOP();
#endif
	audio_in_ptr2=&audio_in_buf2[AUDIO_BUF_SZ];
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <HAL_DACEx_ConvCpltCallbackCh2+0x28>)
 8001582:	4a08      	ldr	r2, [pc, #32]	; (80015a4 <HAL_DACEx_ConvCpltCallbackCh2+0x2c>)
 8001584:	601a      	str	r2, [r3, #0]
	audio_out_ptr2=&audio_out_buf2[0];
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_DACEx_ConvCpltCallbackCh2+0x30>)
 8001588:	4a08      	ldr	r2, [pc, #32]	; (80015ac <HAL_DACEx_ConvCpltCallbackCh2+0x34>)
 800158a:	601a      	str	r2, [r3, #0]
	BUF2_CPLT=1;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_DACEx_ConvCpltCallbackCh2+0x38>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20002910 	.word	0x20002910
 80015a4:	20001d08 	.word	0x20001d08
 80015a8:	20002914 	.word	0x20002914
 80015ac:	20002108 	.word	0x20002108
 80015b0:	22000058 	.word	0x22000058

080015b4 <HAL_ADC_ConvCpltCallback>:
/*
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_TOT_BUF_SZ sample were taken from audio out buf and fed into DAC.
 * Data can be moved by main application from higher audio_in_buf to lower audio_out_buf (SSL mode only)
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	if(mode){
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_ADC_ConvCpltCallback+0x48>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d015      	beq.n	80015f0 <HAL_ADC_ConvCpltCallback+0x3c>
		if(hadc->Instance==ADC1){
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0d      	ldr	r2, [pc, #52]	; (8001600 <HAL_ADC_ConvCpltCallback+0x4c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d105      	bne.n	80015da <HAL_ADC_ConvCpltCallback+0x26>

#ifdef TIME_CONV_CH1
			CHRONO_STOP();
#endif
			audio_in_ptr1=&audio_in_buf1[AUDIO_BUF_SZ];
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <HAL_ADC_ConvCpltCallback+0x50>)
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <HAL_ADC_ConvCpltCallback+0x54>)
 80015d2:	601a      	str	r2, [r3, #0]
			//audio_out_ptr1=&audio_out_buf1[0];
			BUF1_CPLT=1;
 80015d4:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_ADC_ConvCpltCallback+0x58>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
		}

		if(hadc->Instance==ADC2){
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <HAL_ADC_ConvCpltCallback+0x5c>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d105      	bne.n	80015f0 <HAL_ADC_ConvCpltCallback+0x3c>

#ifdef TIME_CONV_CH2
			CHRONO_STOP();
#endif
			audio_in_ptr2=&audio_in_buf2[AUDIO_BUF_SZ];
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_ADC_ConvCpltCallback+0x60>)
 80015e6:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <HAL_ADC_ConvCpltCallback+0x64>)
 80015e8:	601a      	str	r2, [r3, #0]
			//audio_out_ptr2=&audio_out_buf2[0];
			BUF2_CPLT=1;
 80015ea:	4b0c      	ldr	r3, [pc, #48]	; (800161c <HAL_ADC_ConvCpltCallback+0x68>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]
		}

	}
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	20005ab2 	.word	0x20005ab2
 8001600:	40012000 	.word	0x40012000
 8001604:	20002908 	.word	0x20002908
 8001608:	20000d08 	.word	0x20000d08
 800160c:	2200005c 	.word	0x2200005c
 8001610:	40012100 	.word	0x40012100
 8001614:	20002910 	.word	0x20002910
 8001618:	20001d08 	.word	0x20001d08
 800161c:	22000058 	.word	0x22000058

08001620 <audioPlayback>:
 * Audio playback process.
 * Transfer audio samples from input buffer to output buffer using pointers set by ISR (ping-pong buffers).
 * Used by main application during calibration mode
 */

void audioPlayback(){
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0

	/*If channel 1 and 2 conversion was completed*/
	//if(BUF1_CPLT && BUF2_CPLT){
		BUF1_CPLT=0;
 8001626:	4b18      	ldr	r3, [pc, #96]	; (8001688 <audioPlayback+0x68>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
		BUF2_CPLT=0;
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <audioPlayback+0x6c>)
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]

		/*Transfer samples from input to output buffers*/
		for(int i=0;i<AUDIO_BUF_SZ;i++){
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	e01c      	b.n	8001672 <audioPlayback+0x52>
			audio_out_ptr1[i]=audio_in_ptr1[i];
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <audioPlayback+0x70>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	441a      	add	r2, r3
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <audioPlayback+0x74>)
 8001644:	6819      	ldr	r1, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	440b      	add	r3, r1
 800164c:	8812      	ldrh	r2, [r2, #0]
 800164e:	b292      	uxth	r2, r2
 8001650:	801a      	strh	r2, [r3, #0]
			audio_out_ptr2[i]=audio_in_ptr2[i];
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <audioPlayback+0x78>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	441a      	add	r2, r3
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <audioPlayback+0x7c>)
 800165e:	6819      	ldr	r1, [r3, #0]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	440b      	add	r3, r1
 8001666:	8812      	ldrh	r2, [r2, #0]
 8001668:	b292      	uxth	r2, r2
 800166a:	801a      	strh	r2, [r3, #0]
		for(int i=0;i<AUDIO_BUF_SZ;i++){
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3301      	adds	r3, #1
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001678:	dbde      	blt.n	8001638 <audioPlayback+0x18>

		}
	//}
}
 800167a:	bf00      	nop
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	2200005c 	.word	0x2200005c
 800168c:	22000058 	.word	0x22000058
 8001690:	20002908 	.word	0x20002908
 8001694:	2000290c 	.word	0x2000290c
 8001698:	20002910 	.word	0x20002910
 800169c:	20002914 	.word	0x20002914

080016a0 <audioPreproc>:
 * Audio preprocessing.
 * Transfer audio samples from input buffer to output buffer using pointers set by ISR (ping-pong buffers).
 * DC offset is removed from every sample and threshold overflow is computed.
 * Used by main application during SSL mode
 */
void audioPreproc(){
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af02      	add	r7, sp, #8
	/*
	 * Preproc loop will set rms values of last buf1 and buf2 to trigger cross-correlation
	 */

	/*If channel 1 and 2 conversion was completed*/
	if(BUF1_CPLT && BUF2_CPLT){
 80016a6:	4b9f      	ldr	r3, [pc, #636]	; (8001924 <audioPreproc+0x284>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 817c 	beq.w	80019a8 <audioPreproc+0x308>
 80016b0:	4b9d      	ldr	r3, [pc, #628]	; (8001928 <audioPreproc+0x288>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8177 	beq.w	80019a8 <audioPreproc+0x308>

#ifdef 	TIME_PREPROC
		CHRONO_START();
#endif
		BUF1_CPLT=0;
 80016ba:	4b9a      	ldr	r3, [pc, #616]	; (8001924 <audioPreproc+0x284>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
		BUF2_CPLT=0;
 80016c0:	4b99      	ldr	r3, [pc, #612]	; (8001928 <audioPreproc+0x288>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]

		mean1=0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
		mean2=0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]

		dc1=0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
		dc2=0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]

		rms1=0;
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	617b      	str	r3, [r7, #20]
		rms2=0;
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
		

		/*
		 * Transfer samples from input to cross-correlation buffers
		 */
		for( int i=0 ; i<AUDIO_BUF_SZ || i<DC_BUF_SZ ; i++ ){
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	e033      	b.n	8001750 <audioPreproc+0xb0>

			/*
			 * Compute the mean value of input buffers 1 and 2
			 */
			if(i<AUDIO_BUF_SZ){
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ee:	da15      	bge.n	800171c <audioPreproc+0x7c>
				mean1+=audio_in_ptr1[i];
 80016f0:	4b8e      	ldr	r3, [pc, #568]	; (800192c <audioPreproc+0x28c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	461a      	mov	r2, r3
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	4413      	add	r3, r2
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
				mean2+=audio_in_ptr2[i];
 8001706:	4b8a      	ldr	r3, [pc, #552]	; (8001930 <audioPreproc+0x290>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	4413      	add	r3, r2
 800171a:	623b      	str	r3, [r7, #32]
			}
			/*
			 * Compute estimate of DC offset based on the last DC_BUF_SZ mean values computed in buffers
			 */
			if(i<DC_BUF_SZ){
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b63      	cmp	r3, #99	; 0x63
 8001720:	dc13      	bgt.n	800174a <audioPreproc+0xaa>
				dc1+=dc_buf_ch1[dc_buf_idx];
 8001722:	4b84      	ldr	r3, [pc, #528]	; (8001934 <audioPreproc+0x294>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	4b83      	ldr	r3, [pc, #524]	; (8001938 <audioPreproc+0x298>)
 800172a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800172e:	461a      	mov	r2, r3
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	4413      	add	r3, r2
 8001734:	61fb      	str	r3, [r7, #28]
				dc2+=dc_buf_ch2[dc_buf_idx];
 8001736:	4b7f      	ldr	r3, [pc, #508]	; (8001934 <audioPreproc+0x294>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	4b7f      	ldr	r3, [pc, #508]	; (800193c <audioPreproc+0x29c>)
 800173e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001742:	461a      	mov	r2, r3
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	4413      	add	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
		for( int i=0 ; i<AUDIO_BUF_SZ || i<DC_BUF_SZ ; i++ ){
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3301      	adds	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001756:	dbc7      	blt.n	80016e8 <audioPreproc+0x48>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b63      	cmp	r3, #99	; 0x63
 800175c:	ddc4      	ble.n	80016e8 <audioPreproc+0x48>
		}

		/*
		 * Enqueue current mean value of input buffer in dc buffer
		 */
		dc_buf_ch1[dc_buf_idx]=(uint16_t)( mean1/AUDIO_BUF_SZ );
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	0a59      	lsrs	r1, r3, #9
 8001762:	4b74      	ldr	r3, [pc, #464]	; (8001934 <audioPreproc+0x294>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	b289      	uxth	r1, r1
 800176a:	4b73      	ldr	r3, [pc, #460]	; (8001938 <audioPreproc+0x298>)
 800176c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		dc_buf_ch2[dc_buf_idx]=(uint16_t)( mean2/AUDIO_BUF_SZ );
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	0a59      	lsrs	r1, r3, #9
 8001774:	4b6f      	ldr	r3, [pc, #444]	; (8001934 <audioPreproc+0x294>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	b289      	uxth	r1, r1
 800177c:	4b6f      	ldr	r3, [pc, #444]	; (800193c <audioPreproc+0x29c>)
 800177e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		dc1/=DC_BUF_SZ;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4a6e      	ldr	r2, [pc, #440]	; (8001940 <audioPreproc+0x2a0>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	61fb      	str	r3, [r7, #28]
		dc2/=DC_BUF_SZ;
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4a6b      	ldr	r2, [pc, #428]	; (8001940 <audioPreproc+0x2a0>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	61bb      	str	r3, [r7, #24]
		/*
		 * Subtract DC offset to have 0 mean signal in cross-correlation buffer.
		 * Compute RMS of signals in ch1-2 input buffers
		 */

		for(int i=0,idx;i<AUDIO_BUF_SZ;i++){
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	e058      	b.n	8001852 <audioPreproc+0x1b2>

			idx=xcor_buf_oset * AUDIO_BUF_SZ + i;
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <audioPreproc+0x2a4>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	025b      	lsls	r3, r3, #9
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	4413      	add	r3, r2
 80017aa:	607b      	str	r3, [r7, #4]
			xcor_buf1[idx]=audio_in_ptr1[i] - dc1;
 80017ac:	4b5f      	ldr	r3, [pc, #380]	; (800192c <audioPreproc+0x28c>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	4619      	mov	r1, r3
 80017c2:	4a61      	ldr	r2, [pc, #388]	; (8001948 <audioPreproc+0x2a8>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			xcor_buf2[idx]=audio_in_ptr2[i] - dc2;
 80017ca:	4b59      	ldr	r3, [pc, #356]	; (8001930 <audioPreproc+0x290>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	461a      	mov	r2, r3
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	4619      	mov	r1, r3
 80017e0:	4a5a      	ldr	r2, [pc, #360]	; (800194c <audioPreproc+0x2ac>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			rms1+=( xcor_buf1[idx] * xcor_buf1[idx] ) / AUDIO_BUF_SZ;
 80017e8:	4a57      	ldr	r2, [pc, #348]	; (8001948 <audioPreproc+0x2a8>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f0:	4955      	ldr	r1, [pc, #340]	; (8001948 <audioPreproc+0x2a8>)
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80017f8:	fb02 f303 	mul.w	r3, r2, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	da01      	bge.n	8001804 <audioPreproc+0x164>
 8001800:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001804:	125b      	asrs	r3, r3, #9
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001816:	edc7 7a05 	vstr	s15, [r7, #20]
			rms2+=( xcor_buf2[idx] * xcor_buf2[idx] ) / AUDIO_BUF_SZ;
 800181a:	4a4c      	ldr	r2, [pc, #304]	; (800194c <audioPreproc+0x2ac>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001822:	494a      	ldr	r1, [pc, #296]	; (800194c <audioPreproc+0x2ac>)
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	da01      	bge.n	8001836 <audioPreproc+0x196>
 8001832:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001836:	125b      	asrs	r3, r3, #9
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001840:	ed97 7a04 	vldr	s14, [r7, #16]
 8001844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001848:	edc7 7a04 	vstr	s15, [r7, #16]
		for(int i=0,idx;i<AUDIO_BUF_SZ;i++){
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	3301      	adds	r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001858:	dba2      	blt.n	80017a0 <audioPreproc+0x100>
		}

		rms1=sqrt(rms1);
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7fe fe74 	bl	8000548 <__aeabi_f2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	ec43 2b10 	vmov	d0, r2, r3
 8001868:	f00b f852 	bl	800c910 <sqrt>
 800186c:	ec53 2b10 	vmov	r2, r3, d0
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f7ff f998 	bl	8000ba8 <__aeabi_d2f>
 8001878:	4603      	mov	r3, r0
 800187a:	617b      	str	r3, [r7, #20]
		rms2=sqrt(rms2);
 800187c:	6938      	ldr	r0, [r7, #16]
 800187e:	f7fe fe63 	bl	8000548 <__aeabi_f2d>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	ec43 2b10 	vmov	d0, r2, r3
 800188a:	f00b f841 	bl	800c910 <sqrt>
 800188e:	ec53 2b10 	vmov	r2, r3, d0
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff f987 	bl	8000ba8 <__aeabi_d2f>
 800189a:	4603      	mov	r3, r0
 800189c:	613b      	str	r3, [r7, #16]
#endif
		
		/*
		 * If any of the input buffers has RMS under threshold
		 */
		if(rms1>threshold && rms2>threshold){
 800189e:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <audioPreproc+0x2b0>)
 80018a0:	881b      	ldrh	r3, [r3, #0]
 80018a2:	ee07 3a90 	vmov	s15, r3
 80018a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80018ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b6:	dd55      	ble.n	8001964 <audioPreproc+0x2c4>
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <audioPreproc+0x2b0>)
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80018c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	dd48      	ble.n	8001964 <audioPreproc+0x2c4>
			sprintf(msg_buf,"\r\nrms1:%d\r\nrms2:%d\r\nthreshold:%d\r\n",(int)rms1,(int)rms2,threshold);
 80018d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80018da:	edd7 7a04 	vldr	s15, [r7, #16]
 80018de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e2:	4b1b      	ldr	r3, [pc, #108]	; (8001950 <audioPreproc+0x2b0>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	ee17 3a90 	vmov	r3, s15
 80018ec:	ee17 2a10 	vmov	r2, s14
 80018f0:	4918      	ldr	r1, [pc, #96]	; (8001954 <audioPreproc+0x2b4>)
 80018f2:	4819      	ldr	r0, [pc, #100]	; (8001958 <audioPreproc+0x2b8>)
 80018f4:	f008 fd92 	bl	800a41c <siprintf>
			HAL_UART_Transmit_DMA(&huart6,(uint8_t*)msg_buf,strlen(msg_buf));
 80018f8:	4817      	ldr	r0, [pc, #92]	; (8001958 <audioPreproc+0x2b8>)
 80018fa:	f7fe fc69 	bl	80001d0 <strlen>
 80018fe:	4603      	mov	r3, r0
 8001900:	b29b      	uxth	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	4914      	ldr	r1, [pc, #80]	; (8001958 <audioPreproc+0x2b8>)
 8001906:	4815      	ldr	r0, [pc, #84]	; (800195c <audioPreproc+0x2bc>)
 8001908:	f007 f8da 	bl	8008ac0 <HAL_UART_Transmit_DMA>
			/*Increment over threshold counter up to 3*/
			if(ovr_thr_cnt<3)
 800190c:	4b14      	ldr	r3, [pc, #80]	; (8001960 <audioPreproc+0x2c0>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d82a      	bhi.n	800196a <audioPreproc+0x2ca>
				ovr_thr_cnt++;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <audioPreproc+0x2c0>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	3301      	adds	r3, #1
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <audioPreproc+0x2c0>)
 800191e:	701a      	strb	r2, [r3, #0]
			if(ovr_thr_cnt<3)
 8001920:	e023      	b.n	800196a <audioPreproc+0x2ca>
 8001922:	bf00      	nop
 8001924:	2200005c 	.word	0x2200005c
 8001928:	22000058 	.word	0x22000058
 800192c:	20002908 	.word	0x20002908
 8001930:	20002910 	.word	0x20002910
 8001934:	20005aac 	.word	0x20005aac
 8001938:	2000591c 	.word	0x2000591c
 800193c:	200059e4 	.word	0x200059e4
 8001940:	51eb851f 	.word	0x51eb851f
 8001944:	20005918 	.word	0x20005918
 8001948:	20002918 	.word	0x20002918
 800194c:	20004118 	.word	0x20004118
 8001950:	20005ab0 	.word	0x20005ab0
 8001954:	0800cae8 	.word	0x0800cae8
 8001958:	20000884 	.word	0x20000884
 800195c:	200006c4 	.word	0x200006c4
 8001960:	20005aae 	.word	0x20005aae
		}
		else{
			ovr_thr_cnt=0;
 8001964:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <audioPreproc+0x310>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]

		/*
		 * Update cross-correlation circular buffer offset
		 * XCOR_BUF_SZ = AUDIO_BUF_SZ * XCOR_BUF_MULT
		 */
		xcor_buf_oset=( xcor_buf_oset + 1 ) % XCOR_BUF_MULT;
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <audioPreproc+0x314>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <audioPreproc+0x318>)
 8001972:	fb83 3102 	smull	r3, r1, r3, r2
 8001976:	17d3      	asrs	r3, r2, #31
 8001978:	1ac9      	subs	r1, r1, r3
 800197a:	460b      	mov	r3, r1
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	440b      	add	r3, r1
 8001980:	1ad1      	subs	r1, r2, r3
 8001982:	b2ca      	uxtb	r2, r1
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <audioPreproc+0x314>)
 8001986:	701a      	strb	r2, [r3, #0]
				//xcor_buf_oset,(int)rms1,max16,dc1,max,(int)rms2,threshold);

		/*
		 * Update DC buffer offset idx
		 */
		dc_buf_idx=( dc_buf_idx + 1 ) % DC_BUF_SZ;
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <audioPreproc+0x31c>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	4a0c      	ldr	r2, [pc, #48]	; (80019c0 <audioPreproc+0x320>)
 8001990:	fb82 1203 	smull	r1, r2, r2, r3
 8001994:	1151      	asrs	r1, r2, #5
 8001996:	17da      	asrs	r2, r3, #31
 8001998:	1a8a      	subs	r2, r1, r2
 800199a:	2164      	movs	r1, #100	; 0x64
 800199c:	fb01 f202 	mul.w	r2, r1, r2
 80019a0:	1a9a      	subs	r2, r3, r2
 80019a2:	b292      	uxth	r2, r2
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <audioPreproc+0x31c>)
 80019a6:	801a      	strh	r2, [r3, #0]
	}
}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20005aae 	.word	0x20005aae
 80019b4:	20005918 	.word	0x20005918
 80019b8:	55555556 	.word	0x55555556
 80019bc:	20005aac 	.word	0x20005aac
 80019c0:	51eb851f 	.word	0x51eb851f

080019c4 <logMotor>:


/*
 * Log debug UART interface motor position computed since the latest call to rstAngle(&motor)
 */
void logMotor(){
 80019c4:	b5b0      	push	{r4, r5, r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af04      	add	r7, sp, #16

	sprintf(msg_buf,"Motor position: %f %f %d \r\n\r\n\r\n",
								motor.ang_idx*motor.res,motor.res,motor.ang_idx);
 80019ca:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <logMotor+0x68>)
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <logMotor+0x68>)
 80019d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80019dc:	ee67 7a27 	vmul.f32	s15, s14, s15
	sprintf(msg_buf,"Motor position: %f %f %d \r\n\r\n\r\n",
 80019e0:	ee17 0a90 	vmov	r0, s15
 80019e4:	f7fe fdb0 	bl	8000548 <__aeabi_f2d>
 80019e8:	4604      	mov	r4, r0
 80019ea:	460d      	mov	r5, r1
								motor.ang_idx*motor.res,motor.res,motor.ang_idx);
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <logMotor+0x68>)
 80019ee:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buf,"Motor position: %f %f %d \r\n\r\n\r\n",
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fda9 	bl	8000548 <__aeabi_f2d>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	490c      	ldr	r1, [pc, #48]	; (8001a2c <logMotor+0x68>)
 80019fc:	6909      	ldr	r1, [r1, #16]
 80019fe:	9102      	str	r1, [sp, #8]
 8001a00:	e9cd 2300 	strd	r2, r3, [sp]
 8001a04:	4622      	mov	r2, r4
 8001a06:	462b      	mov	r3, r5
 8001a08:	4909      	ldr	r1, [pc, #36]	; (8001a30 <logMotor+0x6c>)
 8001a0a:	480a      	ldr	r0, [pc, #40]	; (8001a34 <logMotor+0x70>)
 8001a0c:	f008 fd06 	bl	800a41c <siprintf>
	HAL_UART_Transmit_DMA(&huart6,(uint8_t*)msg_buf,strlen(msg_buf));
 8001a10:	4808      	ldr	r0, [pc, #32]	; (8001a34 <logMotor+0x70>)
 8001a12:	f7fe fbdd 	bl	80001d0 <strlen>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4905      	ldr	r1, [pc, #20]	; (8001a34 <logMotor+0x70>)
 8001a1e:	4806      	ldr	r0, [pc, #24]	; (8001a38 <logMotor+0x74>)
 8001a20:	f007 f84e 	bl	8008ac0 <HAL_UART_Transmit_DMA>
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	200007d0 	.word	0x200007d0
 8001a30:	0800cb0c 	.word	0x0800cb0c
 8001a34:	20000884 	.word	0x20000884
 8001a38:	200006c4 	.word	0x200006c4

08001a3c <motorControl>:

/*Read joystick's position and EXTI buttons and perform one motor step according to joystick direction*/
void motorControl(){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0

	JstickDir dir;

	if(MOTOR_MV){
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <motorControl+0x68>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d028      	beq.n	8001a9c <motorControl+0x60>
		MOTOR_MV=0;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <motorControl+0x68>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

		dir=jstickGetDirPoll(&js);
 8001a50:	4815      	ldr	r0, [pc, #84]	; (8001aa8 <motorControl+0x6c>)
 8001a52:	f7ff fada 	bl	800100a <jstickGetDirPoll>
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
		if(dir==LEFT || LEFT_BUT_PUSH){
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d003      	beq.n	8001a68 <motorControl+0x2c>
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <motorControl+0x70>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d009      	beq.n	8001a7c <motorControl+0x40>
			LEFT_BUT_PUSH=0;
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <motorControl+0x70>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
			step(&motor,1);
 8001a6e:	2101      	movs	r1, #1
 8001a70:	480f      	ldr	r0, [pc, #60]	; (8001ab0 <motorControl+0x74>)
 8001a72:	f7ff fc22 	bl	80012ba <step>

			logMotor();
 8001a76:	f7ff ffa5 	bl	80019c4 <logMotor>

			logMotor();
		}
	}

}
 8001a7a:	e00f      	b.n	8001a9c <motorControl+0x60>
		else if(dir==RIGHT || RIGHT_BUT_PUSH){
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d003      	beq.n	8001a8a <motorControl+0x4e>
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <motorControl+0x78>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d008      	beq.n	8001a9c <motorControl+0x60>
			RIGHT_BUT_PUSH=0;
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <motorControl+0x78>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
			step(&motor,0);
 8001a90:	2100      	movs	r1, #0
 8001a92:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <motorControl+0x74>)
 8001a94:	f7ff fc11 	bl	80012ba <step>
			logMotor();
 8001a98:	f7ff ff94 	bl	80019c4 <logMotor>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	2200003c 	.word	0x2200003c
 8001aa8:	200007f8 	.word	0x200007f8
 8001aac:	22000074 	.word	0x22000074
 8001ab0:	200007d0 	.word	0x200007d0
 8001ab4:	22000070 	.word	0x22000070

08001ab8 <initCalibration>:

/*Functions to init calibration/sound source localization mode*/
void initCalibration(){
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af02      	add	r7, sp, #8
	  /*Start DMA request to playback audio through DAC channels 1 and 2*/
	  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_1,(uint32_t*)audio_out_buf1,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 8001abe:	2300      	movs	r3, #0
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <initCalibration+0x3c>)
 8001ac8:	2100      	movs	r1, #0
 8001aca:	480b      	ldr	r0, [pc, #44]	; (8001af8 <initCalibration+0x40>)
 8001acc:	f002 fadc 	bl	8004088 <HAL_DAC_Start_DMA>
	  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_2,(uint32_t*)audio_out_buf2,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad8:	4a08      	ldr	r2, [pc, #32]	; (8001afc <initCalibration+0x44>)
 8001ada:	2110      	movs	r1, #16
 8001adc:	4806      	ldr	r0, [pc, #24]	; (8001af8 <initCalibration+0x40>)
 8001ade:	f002 fad3 	bl	8004088 <HAL_DAC_Start_DMA>

	  GPIOD->ODR&=~GPIO_PIN_15;
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <initCalibration+0x48>)
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <initCalibration+0x48>)
 8001ae8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001aec:	6153      	str	r3, [r2, #20]
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20001108 	.word	0x20001108
 8001af8:	20000390 	.word	0x20000390
 8001afc:	20002108 	.word	0x20002108
 8001b00:	40020c00 	.word	0x40020c00

08001b04 <initSSL>:

void initSSL(){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0

	uint16_t dc_init=2048;
 8001b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b0e:	807b      	strh	r3, [r7, #2]
	  /*Stop playback loop*/
	  HAL_DAC_Stop_DMA(&hdac,DAC_CHANNEL_1);
 8001b10:	2100      	movs	r1, #0
 8001b12:	481c      	ldr	r0, [pc, #112]	; (8001b84 <initSSL+0x80>)
 8001b14:	f002 fb86 	bl	8004224 <HAL_DAC_Stop_DMA>
	  HAL_DAC_Stop_DMA(&hdac,DAC_CHANNEL_2);
 8001b18:	2110      	movs	r1, #16
 8001b1a:	481a      	ldr	r0, [pc, #104]	; (8001b84 <initSSL+0x80>)
 8001b1c:	f002 fb82 	bl	8004224 <HAL_DAC_Stop_DMA>

	  /*Reset motor angle idx to 0 to set initial camera offset*/
	  rstAngle(&motor);
 8001b20:	4819      	ldr	r0, [pc, #100]	; (8001b88 <initSSL+0x84>)
 8001b22:	f7ff fb0a 	bl	800113a <rstAngle>
	  logMotor();
 8001b26:	f7ff ff4d 	bl	80019c4 <logMotor>
	  mode=1;
 8001b2a:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <initSSL+0x88>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]

	  /*Reset xcor_buf_oset*/
	  xcor_buf_oset=0;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <initSSL+0x8c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
	  /*Reset DC buffer idx*/
	  dc_buf_idx=0;
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <initSSL+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	801a      	strh	r2, [r3, #0]
	  /*Reset threshold to a start value of 100*/
	  threshold=30;
 8001b3c:	4b16      	ldr	r3, [pc, #88]	; (8001b98 <initSSL+0x94>)
 8001b3e:	221e      	movs	r2, #30
 8001b40:	801a      	strh	r2, [r3, #0]
	  /*Reset over threshold counter*/
	  ovr_thr_cnt=0;
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <initSSL+0x98>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]

	  /*
	   * Fill dc offset estimation
	   */
	  for(int i=0;i<DC_BUF_SZ;i++){
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	e00c      	b.n	8001b68 <initSSL+0x64>
		  dc_buf_ch1[i]=dc_init;
 8001b4e:	4914      	ldr	r1, [pc, #80]	; (8001ba0 <initSSL+0x9c>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		  dc_buf_ch2[i]=dc_init;
 8001b58:	4912      	ldr	r1, [pc, #72]	; (8001ba4 <initSSL+0xa0>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	887a      	ldrh	r2, [r7, #2]
 8001b5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  for(int i=0;i<DC_BUF_SZ;i++){
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3301      	adds	r3, #1
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b63      	cmp	r3, #99	; 0x63
 8001b6c:	ddef      	ble.n	8001b4e <initSSL+0x4a>
	  }
	  /*Toggle led to notify the mode change*/
	  GPIOD->ODR|=GPIO_PIN_15;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <initSSL+0xa4>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <initSSL+0xa4>)
 8001b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b78:	6153      	str	r3, [r2, #20]
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000390 	.word	0x20000390
 8001b88:	200007d0 	.word	0x200007d0
 8001b8c:	20005ab2 	.word	0x20005ab2
 8001b90:	20005918 	.word	0x20005918
 8001b94:	20005aac 	.word	0x20005aac
 8001b98:	20005ab0 	.word	0x20005ab0
 8001b9c:	20005aae 	.word	0x20005aae
 8001ba0:	2000591c 	.word	0x2000591c
 8001ba4:	200059e4 	.word	0x200059e4
 8001ba8:	40020c00 	.word	0x40020c00

08001bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb2:	f001 fbb9 	bl	8003328 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb6:	f000 f8c9 	bl	8001d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bba:	f000 fc65 	bl	8002488 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001bbe:	f000 fb21 	bl	8002204 <MX_TIM6_Init>
  MX_DMA_Init();
 8001bc2:	f000 fc03 	bl	80023cc <MX_DMA_Init>
  MX_I2C1_Init();
 8001bc6:	f000 fa55 	bl	8002074 <MX_I2C1_Init>
  MX_ADC3_Init();
 8001bca:	f000 f9cd 	bl	8001f68 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001bce:	f000 f927 	bl	8001e20 <MX_ADC1_Init>
  MX_DAC_Init();
 8001bd2:	f000 fa1b 	bl	800200c <MX_DAC_Init>
  MX_TIM2_Init();
 8001bd6:	f000 fa7b 	bl	80020d0 <MX_TIM2_Init>
  MX_ADC2_Init();
 8001bda:	f000 f973 	bl	8001ec4 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8001bde:	f000 fba1 	bl	8002324 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001be2:	f000 fb45 	bl	8002270 <MX_TIM7_Init>
  MX_USART6_UART_Init();
 8001be6:	f000 fbc7 	bl	8002378 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001bea:	f000 fb77 	bl	80022dc <MX_TIM10_Init>
  MX_TIM4_Init();
 8001bee:	f000 fabb 	bl	8002168 <MX_TIM4_Init>
#endif

  /*
   * Init DMA handle data structures for thermal image in/out transfer
   */
  HAL_DMA_Init(&hdma_i2c1_rx);
 8001bf2:	4842      	ldr	r0, [pc, #264]	; (8001cfc <main+0x150>)
 8001bf4:	f002 fcb0 	bl	8004558 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart3_tx);
 8001bf8:	4841      	ldr	r0, [pc, #260]	; (8001d00 <main+0x154>)
 8001bfa:	f002 fcad 	bl	8004558 <HAL_DMA_Init>

  /*Init amg8833 sensor with ad select pin connected to the ground*/
  amg8833Init(&cam,&hi2c1,0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	4940      	ldr	r1, [pc, #256]	; (8001d04 <main+0x158>)
 8001c02:	4841      	ldr	r0, [pc, #260]	; (8001d08 <main+0x15c>)
 8001c04:	f7ff f9a2 	bl	8000f4c <amg8833Init>

  /*Wait until amg8833 is ready*/
  while(!amg8833IsReady(&cam)){
 8001c08:	e005      	b.n	8001c16 <main+0x6a>
	  GPIOD->ODR|=GPIO_PIN_14;
 8001c0a:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <main+0x160>)
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	4a3f      	ldr	r2, [pc, #252]	; (8001d0c <main+0x160>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c14:	6153      	str	r3, [r2, #20]
  while(!amg8833IsReady(&cam)){
 8001c16:	483c      	ldr	r0, [pc, #240]	; (8001d08 <main+0x15c>)
 8001c18:	f7ff f9b0 	bl	8000f7c <amg8833IsReady>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f3      	beq.n	8001c0a <main+0x5e>
  }

  GPIOD->ODR&=~GPIO_PIN_14;
 8001c22:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <main+0x160>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	4a39      	ldr	r2, [pc, #228]	; (8001d0c <main+0x160>)
 8001c28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c2c:	6153      	str	r3, [r2, #20]

  /*Start Timer 6 - Update event every 1/20 s for thermal camera reading*/
  HAL_TIM_Base_Start_IT(&htim6);
 8001c2e:	4838      	ldr	r0, [pc, #224]	; (8001d10 <main+0x164>)
 8001c30:	f006 fa98 	bl	8008164 <HAL_TIM_Base_Start_IT>
  /*Start Timer 7 - Update event every 1/10 s for motor control*/
  HAL_TIM_Base_Start_IT(&htim7);
 8001c34:	4837      	ldr	r0, [pc, #220]	; (8001d14 <main+0x168>)
 8001c36:	f006 fa95 	bl	8008164 <HAL_TIM_Base_Start_IT>

  /*
   * Start audio clock
   */
  HAL_TIM_Base_Start_IT(&htim2);
 8001c3a:	4837      	ldr	r0, [pc, #220]	; (8001d18 <main+0x16c>)
 8001c3c:	f006 fa92 	bl	8008164 <HAL_TIM_Base_Start_IT>
  /*
   * Start audio DMA continous reading
   * ADC1 and DAC both works with htim2 conversion clock
   */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)audio_in_buf1,AUDIO_TOT_BUF_SZ);
 8001c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c44:	4935      	ldr	r1, [pc, #212]	; (8001d1c <main+0x170>)
 8001c46:	4836      	ldr	r0, [pc, #216]	; (8001d20 <main+0x174>)
 8001c48:	f001 fd52 	bl	80036f0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint32_t*)audio_in_buf2,AUDIO_TOT_BUF_SZ);
 8001c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c50:	4934      	ldr	r1, [pc, #208]	; (8001d24 <main+0x178>)
 8001c52:	4835      	ldr	r0, [pc, #212]	; (8001d28 <main+0x17c>)
 8001c54:	f001 fd4c 	bl	80036f0 <HAL_ADC_Start_DMA>

  /*Init step motor data structure*/
  initStep(&motor,GPIO_PIN_1,GPIO_PIN_2,GPIO_PIN_3,GPIO_PIN_4,GPIOD,FULL,&htim4);
 8001c58:	4b34      	ldr	r3, [pc, #208]	; (8001d2c <main+0x180>)
 8001c5a:	9303      	str	r3, [sp, #12]
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	9302      	str	r3, [sp, #8]
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <main+0x160>)
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	2310      	movs	r3, #16
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	2308      	movs	r3, #8
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	4830      	ldr	r0, [pc, #192]	; (8001d30 <main+0x184>)
 8001c70:	f7ff f9f1 	bl	8001056 <initStep>

  /*Init joystick img_buf structure with yellow error pin*/
  initJstick(&js,&hadc3,GPIO_PIN_12,GPIOD);
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <main+0x160>)
 8001c76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c7a:	492e      	ldr	r1, [pc, #184]	; (8001d34 <main+0x188>)
 8001c7c:	482e      	ldr	r0, [pc, #184]	; (8001d38 <main+0x18c>)
 8001c7e:	f7ff f9ad 	bl	8000fdc <initJstick>
  /*Start ADC3 associated with joystick*/
  HAL_ADC_Start(&hadc3);
 8001c82:	482c      	ldr	r0, [pc, #176]	; (8001d34 <main+0x188>)
 8001c84:	f001 fbd6 	bl	8003434 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MODE_TOGGLE=0;
 8001c88:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <main+0x190>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
  mode=1;
 8001c8e:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <main+0x194>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
  threshold=100;
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <main+0x198>)
 8001c96:	2264      	movs	r2, #100	; 0x64
 8001c98:	801a      	strh	r2, [r3, #0]

  while (1)
  {
	  thermalImgFSM();
 8001c9a:	f7ff fbcb 	bl	8001434 <thermalImgFSM>

	  /*MODE_TOGGLE bit is set by the EXTI4 button line debounce timer TIM10*/
	  if( !MODE_TOGGLE ){
 8001c9e:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <main+0x190>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10d      	bne.n	8001cc2 <main+0x116>
		  /*
		   * Calibration mode:
		   * -microphones AD conversion can be tested connecting an oscilloscope or an amplifier to DAC channels 1/2
		   * -camera can be moved manually using joystick and buttons to set angular offset
		   */
		  if(mode){
 8001ca6:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <main+0x194>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d004      	beq.n	8001cb8 <main+0x10c>
			  initCalibration();
 8001cae:	f7ff ff03 	bl	8001ab8 <initCalibration>
			  mode=0;
 8001cb2:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <main+0x194>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
		  }

		  audioPlayback();
 8001cb8:	f7ff fcb2 	bl	8001620 <audioPlayback>
		  motorControl();
 8001cbc:	f7ff febe 	bl	8001a3c <motorControl>
 8001cc0:	e7eb      	b.n	8001c9a <main+0xee>
	  }
	  else{
		  if(!mode){
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <main+0x194>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d104      	bne.n	8001cd4 <main+0x128>
			  /*
			   * Sound Source Localization mode:
			   * motor movement tests
			   */
			  initSSL();
 8001cca:	f7ff ff1b 	bl	8001b04 <initSSL>
			  mode=1;
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <main+0x194>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	701a      	strb	r2, [r3, #0]
		  }
		  audioPreproc();
 8001cd4:	f7ff fce4 	bl	80016a0 <audioPreproc>
		  if(ovr_thr_cnt>=3){
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <main+0x19c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d906      	bls.n	8001cee <main+0x142>
			  GPIOD->ODR|=GPIO_PIN_13;
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <main+0x160>)
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	4a09      	ldr	r2, [pc, #36]	; (8001d0c <main+0x160>)
 8001ce6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cea:	6153      	str	r3, [r2, #20]
 8001cec:	e7d5      	b.n	8001c9a <main+0xee>
		  }
		  else{
			  GPIOD->ODR&=~GPIO_PIN_13;
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <main+0x160>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <main+0x160>)
 8001cf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001cf8:	6153      	str	r3, [r2, #20]
	  thermalImgFSM();
 8001cfa:	e7ce      	b.n	8001c9a <main+0xee>
 8001cfc:	200004b8 	.word	0x200004b8
 8001d00:	20000708 	.word	0x20000708
 8001d04:	20000464 	.word	0x20000464
 8001d08:	200007c8 	.word	0x200007c8
 8001d0c:	40020c00 	.word	0x40020c00
 8001d10:	200005a8 	.word	0x200005a8
 8001d14:	200005f0 	.word	0x200005f0
 8001d18:	20000518 	.word	0x20000518
 8001d1c:	20000908 	.word	0x20000908
 8001d20:	200001f8 	.word	0x200001f8
 8001d24:	20001908 	.word	0x20001908
 8001d28:	20000240 	.word	0x20000240
 8001d2c:	20000560 	.word	0x20000560
 8001d30:	200007d0 	.word	0x200007d0
 8001d34:	20000288 	.word	0x20000288
 8001d38:	200007f8 	.word	0x200007f8
 8001d3c:	22000078 	.word	0x22000078
 8001d40:	20005ab2 	.word	0x20005ab2
 8001d44:	20005ab0 	.word	0x20005ab0
 8001d48:	20005aae 	.word	0x20005aae

08001d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b094      	sub	sp, #80	; 0x50
 8001d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d52:	f107 0320 	add.w	r3, r7, #32
 8001d56:	2230      	movs	r2, #48	; 0x30
 8001d58:	2100      	movs	r1, #0
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f007 feec 	bl	8009b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <SystemClock_Config+0xcc>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a27      	ldr	r2, [pc, #156]	; (8001e18 <SystemClock_Config+0xcc>)
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <SystemClock_Config+0xcc>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	607b      	str	r3, [r7, #4]
 8001d90:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <SystemClock_Config+0xd0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <SystemClock_Config+0xd0>)
 8001d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <SystemClock_Config+0xd0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001da8:	2302      	movs	r3, #2
 8001daa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dac:	2301      	movs	r3, #1
 8001dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001db0:	2310      	movs	r3, #16
 8001db2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db4:	2302      	movs	r3, #2
 8001db6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001db8:	2300      	movs	r3, #0
 8001dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001dc0:	2332      	movs	r3, #50	; 0x32
 8001dc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001dc8:	2307      	movs	r3, #7
 8001dca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dcc:	f107 0320 	add.w	r3, r7, #32
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f005 fcad 	bl	8007730 <HAL_RCC_OscConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ddc:	f000 fc78 	bl	80026d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de0:	230f      	movs	r3, #15
 8001de2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de4:	2302      	movs	r3, #2
 8001de6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001dec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001df0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001df8:	f107 030c 	add.w	r3, r7, #12
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f005 ff0e 	bl	8007c20 <HAL_RCC_ClockConfig>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e0a:	f000 fc61 	bl	80026d0 <Error_Handler>
  }
}
 8001e0e:	bf00      	nop
 8001e10:	3750      	adds	r7, #80	; 0x50
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000

08001e20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e26:	463b      	mov	r3, r7
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e32:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e34:	4a22      	ldr	r2, [pc, #136]	; (8001ec0 <MX_ADC1_Init+0xa0>)
 8001e36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e38:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e3e:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e44:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e4a:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001e60:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e62:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e82:	480e      	ldr	r0, [pc, #56]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001e84:	f001 fa92 	bl	80033ac <HAL_ADC_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001e8e:	f000 fc1f 	bl	80026d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e92:	2308      	movs	r3, #8
 8001e94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <MX_ADC1_Init+0x9c>)
 8001ea4:	f001 fd4c 	bl	8003940 <HAL_ADC_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001eae:	f000 fc0f 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200001f8 	.word	0x200001f8
 8001ec0:	40012000 	.word	0x40012000

08001ec4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eca:	463b      	mov	r3, r7
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001ed8:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <MX_ADC2_Init+0xa0>)
 8001eda:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001edc:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001efc:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001f04:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001f06:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001f26:	480e      	ldr	r0, [pc, #56]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001f28:	f001 fa40 	bl	80033ac <HAL_ADC_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001f32:	f000 fbcd 	bl	80026d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001f36:	2307      	movs	r3, #7
 8001f38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001f42:	463b      	mov	r3, r7
 8001f44:	4619      	mov	r1, r3
 8001f46:	4806      	ldr	r0, [pc, #24]	; (8001f60 <MX_ADC2_Init+0x9c>)
 8001f48:	f001 fcfa 	bl	8003940 <HAL_ADC_ConfigChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001f52:	f000 fbbd 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000240 	.word	0x20000240
 8001f64:	40012100 	.word	0x40012100

08001f68 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f6e:	463b      	mov	r3, r7
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001f7a:	4b21      	ldr	r3, [pc, #132]	; (8002000 <MX_ADC3_Init+0x98>)
 8001f7c:	4a21      	ldr	r2, [pc, #132]	; (8002004 <MX_ADC3_Init+0x9c>)
 8001f7e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <MX_ADC3_Init+0x98>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001f86:	4b1e      	ldr	r3, [pc, #120]	; (8002000 <MX_ADC3_Init+0x98>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001f8c:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <MX_ADC3_Init+0x98>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <MX_ADC3_Init+0x98>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <MX_ADC3_Init+0x98>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fa0:	4b17      	ldr	r3, [pc, #92]	; (8002000 <MX_ADC3_Init+0x98>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fa6:	4b16      	ldr	r3, [pc, #88]	; (8002000 <MX_ADC3_Init+0x98>)
 8001fa8:	4a17      	ldr	r2, [pc, #92]	; (8002008 <MX_ADC3_Init+0xa0>)
 8001faa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <MX_ADC3_Init+0x98>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <MX_ADC3_Init+0x98>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_ADC3_Init+0x98>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <MX_ADC3_Init+0x98>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001fc6:	480e      	ldr	r0, [pc, #56]	; (8002000 <MX_ADC3_Init+0x98>)
 8001fc8:	f001 f9f0 	bl	80033ac <HAL_ADC_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001fd2:	f000 fb7d 	bl	80026d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4806      	ldr	r0, [pc, #24]	; (8002000 <MX_ADC3_Init+0x98>)
 8001fe8:	f001 fcaa 	bl	8003940 <HAL_ADC_ConfigChannel>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001ff2:	f000 fb6d 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000288 	.word	0x20000288
 8002004:	40012200 	.word	0x40012200
 8002008:	0f000001 	.word	0x0f000001

0800200c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002012:	463b      	mov	r3, r7
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <MX_DAC_Init+0x60>)
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <MX_DAC_Init+0x64>)
 800201e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002020:	4812      	ldr	r0, [pc, #72]	; (800206c <MX_DAC_Init+0x60>)
 8002022:	f002 f80f 	bl	8004044 <HAL_DAC_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800202c:	f000 fb50 	bl	80026d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002030:	2324      	movs	r3, #36	; 0x24
 8002032:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002038:	463b      	mov	r3, r7
 800203a:	2200      	movs	r2, #0
 800203c:	4619      	mov	r1, r3
 800203e:	480b      	ldr	r0, [pc, #44]	; (800206c <MX_DAC_Init+0x60>)
 8002040:	f002 f9b0 	bl	80043a4 <HAL_DAC_ConfigChannel>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800204a:	f000 fb41 	bl	80026d0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800204e:	463b      	mov	r3, r7
 8002050:	2210      	movs	r2, #16
 8002052:	4619      	mov	r1, r3
 8002054:	4805      	ldr	r0, [pc, #20]	; (800206c <MX_DAC_Init+0x60>)
 8002056:	f002 f9a5 	bl	80043a4 <HAL_DAC_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002060:	f000 fb36 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000390 	.word	0x20000390
 8002070:	40007400 	.word	0x40007400

08002074 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <MX_I2C1_Init+0x50>)
 800207a:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <MX_I2C1_Init+0x54>)
 800207c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800207e:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_I2C1_Init+0x50>)
 8002080:	4a12      	ldr	r2, [pc, #72]	; (80020cc <MX_I2C1_Init+0x58>)
 8002082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <MX_I2C1_Init+0x50>)
 8002086:	2200      	movs	r2, #0
 8002088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_I2C1_Init+0x50>)
 800208c:	2200      	movs	r2, #0
 800208e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_I2C1_Init+0x50>)
 8002092:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002096:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <MX_I2C1_Init+0x50>)
 800209a:	2200      	movs	r2, #0
 800209c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800209e:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_I2C1_Init+0x50>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a4:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <MX_I2C1_Init+0x50>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_I2C1_Init+0x50>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020b0:	4804      	ldr	r0, [pc, #16]	; (80020c4 <MX_I2C1_Init+0x50>)
 80020b2:	f003 f83b 	bl	800512c <HAL_I2C_Init>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020bc:	f000 fb08 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000464 	.word	0x20000464
 80020c8:	40005400 	.word	0x40005400
 80020cc:	00061a80 	.word	0x00061a80

080020d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e4:	463b      	mov	r3, r7
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <MX_TIM2_Init+0x94>)
 80020ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80020f4:	4b1b      	ldr	r3, [pc, #108]	; (8002164 <MX_TIM2_Init+0x94>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fa:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <MX_TIM2_Init+0x94>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8002100:	4b18      	ldr	r3, [pc, #96]	; (8002164 <MX_TIM2_Init+0x94>)
 8002102:	22ff      	movs	r2, #255	; 0xff
 8002104:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <MX_TIM2_Init+0x94>)
 8002108:	2200      	movs	r2, #0
 800210a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800210c:	4b15      	ldr	r3, [pc, #84]	; (8002164 <MX_TIM2_Init+0x94>)
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002112:	4814      	ldr	r0, [pc, #80]	; (8002164 <MX_TIM2_Init+0x94>)
 8002114:	f005 ffd6 	bl	80080c4 <HAL_TIM_Base_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800211e:	f000 fad7 	bl	80026d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002126:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	4619      	mov	r1, r3
 800212e:	480d      	ldr	r0, [pc, #52]	; (8002164 <MX_TIM2_Init+0x94>)
 8002130:	f006 f9bf 	bl	80084b2 <HAL_TIM_ConfigClockSource>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800213a:	f000 fac9 	bl	80026d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800213e:	2320      	movs	r3, #32
 8002140:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002146:	463b      	mov	r3, r7
 8002148:	4619      	mov	r1, r3
 800214a:	4806      	ldr	r0, [pc, #24]	; (8002164 <MX_TIM2_Init+0x94>)
 800214c:	f006 fbda 	bl	8008904 <HAL_TIMEx_MasterConfigSynchronization>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002156:	f000 fabb 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000518 	.word	0x20000518

08002168 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800216e:	f107 0308 	add.w	r3, r7, #8
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217c:	463b      	mov	r3, r7
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <MX_TIM4_Init+0x94>)
 8002186:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <MX_TIM4_Init+0x98>)
 8002188:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 800218a:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <MX_TIM4_Init+0x94>)
 800218c:	2263      	movs	r2, #99	; 0x63
 800218e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <MX_TIM4_Init+0x94>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <MX_TIM4_Init+0x94>)
 8002198:	f240 12f3 	movw	r2, #499	; 0x1f3
 800219c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <MX_TIM4_Init+0x94>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <MX_TIM4_Init+0x94>)
 80021a6:	2280      	movs	r2, #128	; 0x80
 80021a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021aa:	4814      	ldr	r0, [pc, #80]	; (80021fc <MX_TIM4_Init+0x94>)
 80021ac:	f005 ff8a 	bl	80080c4 <HAL_TIM_Base_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80021b6:	f000 fa8b 	bl	80026d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021c0:	f107 0308 	add.w	r3, r7, #8
 80021c4:	4619      	mov	r1, r3
 80021c6:	480d      	ldr	r0, [pc, #52]	; (80021fc <MX_TIM4_Init+0x94>)
 80021c8:	f006 f973 	bl	80084b2 <HAL_TIM_ConfigClockSource>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80021d2:	f000 fa7d 	bl	80026d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021de:	463b      	mov	r3, r7
 80021e0:	4619      	mov	r1, r3
 80021e2:	4806      	ldr	r0, [pc, #24]	; (80021fc <MX_TIM4_Init+0x94>)
 80021e4:	f006 fb8e 	bl	8008904 <HAL_TIMEx_MasterConfigSynchronization>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80021ee:	f000 fa6f 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000560 	.word	0x20000560
 8002200:	40000800 	.word	0x40000800

08002204 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800220a:	463b      	mov	r3, r7
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <MX_TIM6_Init+0x64>)
 8002214:	4a15      	ldr	r2, [pc, #84]	; (800226c <MX_TIM6_Init+0x68>)
 8002216:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <MX_TIM6_Init+0x64>)
 800221a:	2209      	movs	r2, #9
 800221c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <MX_TIM6_Init+0x64>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <MX_TIM6_Init+0x64>)
 8002226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800222a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222c:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <MX_TIM6_Init+0x64>)
 800222e:	2200      	movs	r2, #0
 8002230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002232:	480d      	ldr	r0, [pc, #52]	; (8002268 <MX_TIM6_Init+0x64>)
 8002234:	f005 ff46 	bl	80080c4 <HAL_TIM_Base_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800223e:	f000 fa47 	bl	80026d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800224a:	463b      	mov	r3, r7
 800224c:	4619      	mov	r1, r3
 800224e:	4806      	ldr	r0, [pc, #24]	; (8002268 <MX_TIM6_Init+0x64>)
 8002250:	f006 fb58 	bl	8008904 <HAL_TIMEx_MasterConfigSynchronization>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800225a:	f000 fa39 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200005a8 	.word	0x200005a8
 800226c:	40001000 	.word	0x40001000

08002270 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002276:	463b      	mov	r3, r7
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <MX_TIM7_Init+0x64>)
 8002280:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <MX_TIM7_Init+0x68>)
 8002282:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <MX_TIM7_Init+0x64>)
 8002286:	2200      	movs	r2, #0
 8002288:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <MX_TIM7_Init+0x64>)
 800228c:	2200      	movs	r2, #0
 800228e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 62499;
 8002290:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <MX_TIM7_Init+0x64>)
 8002292:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002296:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002298:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <MX_TIM7_Init+0x64>)
 800229a:	2280      	movs	r2, #128	; 0x80
 800229c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800229e:	480d      	ldr	r0, [pc, #52]	; (80022d4 <MX_TIM7_Init+0x64>)
 80022a0:	f005 ff10 	bl	80080c4 <HAL_TIM_Base_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80022aa:	f000 fa11 	bl	80026d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80022b6:	463b      	mov	r3, r7
 80022b8:	4619      	mov	r1, r3
 80022ba:	4806      	ldr	r0, [pc, #24]	; (80022d4 <MX_TIM7_Init+0x64>)
 80022bc:	f006 fb22 	bl	8008904 <HAL_TIMEx_MasterConfigSynchronization>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80022c6:	f000 fa03 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200005f0 	.word	0x200005f0
 80022d8:	40001400 	.word	0x40001400

080022dc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <MX_TIM10_Init+0x40>)
 80022e2:	4a0f      	ldr	r2, [pc, #60]	; (8002320 <MX_TIM10_Init+0x44>)
 80022e4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <MX_TIM10_Init+0x40>)
 80022e8:	2263      	movs	r2, #99	; 0x63
 80022ea:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <MX_TIM10_Init+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2499;
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <MX_TIM10_Init+0x40>)
 80022f4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80022f8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <MX_TIM10_Init+0x40>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <MX_TIM10_Init+0x40>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_TIM10_Init+0x40>)
 8002308:	f005 fedc 	bl	80080c4 <HAL_TIM_Base_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002312:	f000 f9dd 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000638 	.word	0x20000638
 8002320:	40014400 	.word	0x40014400

08002324 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_USART3_UART_Init+0x4c>)
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <MX_USART3_UART_Init+0x50>)
 800232c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <MX_USART3_UART_Init+0x4c>)
 8002330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002334:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_USART3_UART_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <MX_USART3_UART_Init+0x4c>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_USART3_UART_Init+0x4c>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_USART3_UART_Init+0x4c>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_USART3_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_USART3_UART_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_USART3_UART_Init+0x4c>)
 800235c:	f006 fb62 	bl	8008a24 <HAL_UART_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002366:	f000 f9b3 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000680 	.word	0x20000680
 8002374:	40004800 	.word	0x40004800

08002378 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <MX_USART6_UART_Init+0x4c>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <MX_USART6_UART_Init+0x50>)
 8002380:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_USART6_UART_Init+0x4c>)
 8002384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002388:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <MX_USART6_UART_Init+0x4c>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_USART6_UART_Init+0x4c>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <MX_USART6_UART_Init+0x4c>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <MX_USART6_UART_Init+0x4c>)
 800239e:	220c      	movs	r2, #12
 80023a0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <MX_USART6_UART_Init+0x4c>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MX_USART6_UART_Init+0x4c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_USART6_UART_Init+0x4c>)
 80023b0:	f006 fb38 	bl	8008a24 <HAL_UART_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80023ba:	f000 f989 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200006c4 	.word	0x200006c4
 80023c8:	40011400 	.word	0x40011400

080023cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <MX_DMA_Init+0xb8>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a2a      	ldr	r2, [pc, #168]	; (8002484 <MX_DMA_Init+0xb8>)
 80023dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b28      	ldr	r3, [pc, #160]	; (8002484 <MX_DMA_Init+0xb8>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	603b      	str	r3, [r7, #0]
 80023f2:	4b24      	ldr	r3, [pc, #144]	; (8002484 <MX_DMA_Init+0xb8>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a23      	ldr	r2, [pc, #140]	; (8002484 <MX_DMA_Init+0xb8>)
 80023f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b21      	ldr	r3, [pc, #132]	; (8002484 <MX_DMA_Init+0xb8>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	200b      	movs	r0, #11
 8002410:	f001 fdee 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002414:	200b      	movs	r0, #11
 8002416:	f001 fe07 	bl	8004028 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	200e      	movs	r0, #14
 8002420:	f001 fde6 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002424:	200e      	movs	r0, #14
 8002426:	f001 fdff 	bl	8004028 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	2010      	movs	r0, #16
 8002430:	f001 fdde 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002434:	2010      	movs	r0, #16
 8002436:	f001 fdf7 	bl	8004028 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800243a:	2200      	movs	r2, #0
 800243c:	2100      	movs	r1, #0
 800243e:	2011      	movs	r0, #17
 8002440:	f001 fdd6 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002444:	2011      	movs	r0, #17
 8002446:	f001 fdef 	bl	8004028 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	2038      	movs	r0, #56	; 0x38
 8002450:	f001 fdce 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002454:	2038      	movs	r0, #56	; 0x38
 8002456:	f001 fde7 	bl	8004028 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	203a      	movs	r0, #58	; 0x3a
 8002460:	f001 fdc6 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002464:	203a      	movs	r0, #58	; 0x3a
 8002466:	f001 fddf 	bl	8004028 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	2045      	movs	r0, #69	; 0x45
 8002470:	f001 fdbe 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002474:	2045      	movs	r0, #69	; 0x45
 8002476:	f001 fdd7 	bl	8004028 <HAL_NVIC_EnableIRQ>

}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800

08002488 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08a      	sub	sp, #40	; 0x28
 800248c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	605a      	str	r2, [r3, #4]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <MX_GPIO_Init+0x148>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	4a4a      	ldr	r2, [pc, #296]	; (80025d0 <MX_GPIO_Init+0x148>)
 80024a8:	f043 0310 	orr.w	r3, r3, #16
 80024ac:	6313      	str	r3, [r2, #48]	; 0x30
 80024ae:	4b48      	ldr	r3, [pc, #288]	; (80025d0 <MX_GPIO_Init+0x148>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b44      	ldr	r3, [pc, #272]	; (80025d0 <MX_GPIO_Init+0x148>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a43      	ldr	r2, [pc, #268]	; (80025d0 <MX_GPIO_Init+0x148>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <MX_GPIO_Init+0x148>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <MX_GPIO_Init+0x148>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a3c      	ldr	r2, [pc, #240]	; (80025d0 <MX_GPIO_Init+0x148>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b3a      	ldr	r3, [pc, #232]	; (80025d0 <MX_GPIO_Init+0x148>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	60bb      	str	r3, [r7, #8]
 80024f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
 80024f6:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <MX_GPIO_Init+0x148>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a35      	ldr	r2, [pc, #212]	; (80025d0 <MX_GPIO_Init+0x148>)
 80024fc:	f043 0308 	orr.w	r3, r3, #8
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <MX_GPIO_Init+0x148>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	607b      	str	r3, [r7, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <MX_GPIO_Init+0x148>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a2e      	ldr	r2, [pc, #184]	; (80025d0 <MX_GPIO_Init+0x148>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <MX_GPIO_Init+0x148>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 800252a:	2200      	movs	r2, #0
 800252c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002530:	4828      	ldr	r0, [pc, #160]	; (80025d4 <MX_GPIO_Init+0x14c>)
 8002532:	f002 fdc9 	bl	80050c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002536:	2200      	movs	r2, #0
 8002538:	f24f 011e 	movw	r1, #61470	; 0xf01e
 800253c:	4826      	ldr	r0, [pc, #152]	; (80025d8 <MX_GPIO_Init+0x150>)
 800253e:	f002 fdc3 	bl	80050c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002542:	231c      	movs	r3, #28
 8002544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002546:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800254a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800254c:	2302      	movs	r3, #2
 800254e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002550:	f107 0314 	add.w	r3, r7, #20
 8002554:	4619      	mov	r1, r3
 8002556:	481f      	ldr	r0, [pc, #124]	; (80025d4 <MX_GPIO_Init+0x14c>)
 8002558:	f002 fc1a 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800255c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002562:	2301      	movs	r3, #1
 8002564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	4817      	ldr	r0, [pc, #92]	; (80025d4 <MX_GPIO_Init+0x14c>)
 8002576:	f002 fc0b 	bl	8004d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800257a:	f24f 031e 	movw	r3, #61470	; 0xf01e
 800257e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002580:	2301      	movs	r3, #1
 8002582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002584:	2300      	movs	r3, #0
 8002586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800258c:	f107 0314 	add.w	r3, r7, #20
 8002590:	4619      	mov	r1, r3
 8002592:	4811      	ldr	r0, [pc, #68]	; (80025d8 <MX_GPIO_Init+0x150>)
 8002594:	f002 fbfc 	bl	8004d90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	2100      	movs	r1, #0
 800259c:	2008      	movs	r0, #8
 800259e:	f001 fd27 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80025a2:	2008      	movs	r0, #8
 80025a4:	f001 fd40 	bl	8004028 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2100      	movs	r1, #0
 80025ac:	2009      	movs	r0, #9
 80025ae:	f001 fd1f 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80025b2:	2009      	movs	r0, #9
 80025b4:	f001 fd38 	bl	8004028 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80025b8:	2200      	movs	r2, #0
 80025ba:	2100      	movs	r1, #0
 80025bc:	200a      	movs	r0, #10
 80025be:	f001 fd17 	bl	8003ff0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80025c2:	200a      	movs	r0, #10
 80025c4:	f001 fd30 	bl	8004028 <HAL_NVIC_EnableIRQ>

}
 80025c8:	bf00      	nop
 80025ca:	3728      	adds	r7, #40	; 0x28
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40020c00 	.word	0x40020c00

080025dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2c      	ldr	r2, [pc, #176]	; (800269c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d102      	bne.n	80025f4 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80025ee:	f000 febd 	bl	800336c <HAL_IncTick>
	  EXTI_BUT_PUSH=0;

  }

  /* USER CODE END Callback 1 */
}
 80025f2:	e04e      	b.n	8002692 <HAL_TIM_PeriodElapsedCallback+0xb6>
  else if( htim->Instance == TIM4 ){
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a29      	ldr	r2, [pc, #164]	; (80026a0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d103      	bne.n	8002606 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  stepIt(&motor);
 80025fe:	4829      	ldr	r0, [pc, #164]	; (80026a4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002600:	f7fe fe76 	bl	80012f0 <stepIt>
}
 8002604:	e045      	b.n	8002692 <HAL_TIM_PeriodElapsedCallback+0xb6>
  else if( htim->Instance == TIM6 ){
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a27      	ldr	r2, [pc, #156]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d103      	bne.n	8002618 <HAL_TIM_PeriodElapsedCallback+0x3c>
	  AMG_RD_START=1;
 8002610:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]
}
 8002616:	e03c      	b.n	8002692 <HAL_TIM_PeriodElapsedCallback+0xb6>
  else if( htim->Instance == TIM7 ){
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a24      	ldr	r2, [pc, #144]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d103      	bne.n	800262a <HAL_TIM_PeriodElapsedCallback+0x4e>
	MOTOR_MV=1;
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002624:	2201      	movs	r2, #1
 8002626:	601a      	str	r2, [r3, #0]
}
 8002628:	e033      	b.n	8002692 <HAL_TIM_PeriodElapsedCallback+0xb6>
  else if( htim->Instance == TIM10 ){
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a22      	ldr	r2, [pc, #136]	; (80026b8 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d12e      	bne.n	8002692 <HAL_TIM_PeriodElapsedCallback+0xb6>
	  if( GPIOE->IDR & GPIO_PIN_2 && EXTI_BUT_PUSH  )
 8002634:	4b21      	ldr	r3, [pc, #132]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <HAL_TIM_PeriodElapsedCallback+0x74>
 8002640:	4b1f      	ldr	r3, [pc, #124]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_TIM_PeriodElapsedCallback+0x74>
		  LEFT_BUT_PUSH=1;
 8002648:	4b1e      	ldr	r3, [pc, #120]	; (80026c4 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e01d      	b.n	800268c <HAL_TIM_PeriodElapsedCallback+0xb0>
	  else if( GPIOE->IDR & GPIO_PIN_3  && EXTI_BUT_PUSH )
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_TIM_PeriodElapsedCallback+0x90>
 800265c:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_TIM_PeriodElapsedCallback+0x90>
		  RIGHT_BUT_PUSH=1;
 8002664:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	e00f      	b.n	800268c <HAL_TIM_PeriodElapsedCallback+0xb0>
	  else if( GPIOE->IDR & GPIO_PIN_4 && EXTI_BUT_PUSH )
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <HAL_TIM_PeriodElapsedCallback+0xb0>
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_TIM_PeriodElapsedCallback+0xb0>
		  MODE_TOGGLE^=1;
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a11      	ldr	r2, [pc, #68]	; (80026cc <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002686:	f083 0301 	eor.w	r3, r3, #1
 800268a:	6013      	str	r3, [r2, #0]
	  EXTI_BUT_PUSH=0;
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
}
 8002692:	bf00      	nop
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40010000 	.word	0x40010000
 80026a0:	40000800 	.word	0x40000800
 80026a4:	200007d0 	.word	0x200007d0
 80026a8:	40001000 	.word	0x40001000
 80026ac:	2200001c 	.word	0x2200001c
 80026b0:	40001400 	.word	0x40001400
 80026b4:	2200003c 	.word	0x2200003c
 80026b8:	40014400 	.word	0x40014400
 80026bc:	40021000 	.word	0x40021000
 80026c0:	2200007c 	.word	0x2200007c
 80026c4:	22000074 	.word	0x22000074
 80026c8:	22000070 	.word	0x22000070
 80026cc:	22000078 	.word	0x22000078

080026d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026d4:	b672      	cpsid	i
}
 80026d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026d8:	e7fe      	b.n	80026d8 <Error_Handler+0x8>
	...

080026dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <HAL_MspInit+0x4c>)
 80026ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f0:	6453      	str	r3, [r2, #68]	; 0x44
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <HAL_MspInit+0x4c>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a08      	ldr	r2, [pc, #32]	; (8002728 <HAL_MspInit+0x4c>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_MspInit+0x4c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800

0800272c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08e      	sub	sp, #56	; 0x38
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
 8002742:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a75      	ldr	r2, [pc, #468]	; (8002920 <HAL_ADC_MspInit+0x1f4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d158      	bne.n	8002800 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
 8002752:	4b74      	ldr	r3, [pc, #464]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	4a73      	ldr	r2, [pc, #460]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 8002758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275c:	6453      	str	r3, [r2, #68]	; 0x44
 800275e:	4b71      	ldr	r3, [pc, #452]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	623b      	str	r3, [r7, #32]
 8002768:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	4b6d      	ldr	r3, [pc, #436]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a6c      	ldr	r2, [pc, #432]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 8002774:	f043 0302 	orr.w	r3, r3, #2
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b6a      	ldr	r3, [pc, #424]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002786:	2301      	movs	r3, #1
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800278a:	2303      	movs	r3, #3
 800278c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002796:	4619      	mov	r1, r3
 8002798:	4863      	ldr	r0, [pc, #396]	; (8002928 <HAL_ADC_MspInit+0x1fc>)
 800279a:	f002 faf9 	bl	8004d90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800279e:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_ADC_MspInit+0x200>)
 80027a0:	4a63      	ldr	r2, [pc, #396]	; (8002930 <HAL_ADC_MspInit+0x204>)
 80027a2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027a4:	4b61      	ldr	r3, [pc, #388]	; (800292c <HAL_ADC_MspInit+0x200>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027aa:	4b60      	ldr	r3, [pc, #384]	; (800292c <HAL_ADC_MspInit+0x200>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b0:	4b5e      	ldr	r3, [pc, #376]	; (800292c <HAL_ADC_MspInit+0x200>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_ADC_MspInit+0x200>)
 80027b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027be:	4b5b      	ldr	r3, [pc, #364]	; (800292c <HAL_ADC_MspInit+0x200>)
 80027c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027c6:	4b59      	ldr	r3, [pc, #356]	; (800292c <HAL_ADC_MspInit+0x200>)
 80027c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80027ce:	4b57      	ldr	r3, [pc, #348]	; (800292c <HAL_ADC_MspInit+0x200>)
 80027d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027d4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80027d6:	4b55      	ldr	r3, [pc, #340]	; (800292c <HAL_ADC_MspInit+0x200>)
 80027d8:	2200      	movs	r2, #0
 80027da:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027dc:	4b53      	ldr	r3, [pc, #332]	; (800292c <HAL_ADC_MspInit+0x200>)
 80027de:	2200      	movs	r2, #0
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027e2:	4852      	ldr	r0, [pc, #328]	; (800292c <HAL_ADC_MspInit+0x200>)
 80027e4:	f001 feb8 	bl	8004558 <HAL_DMA_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80027ee:	f7ff ff6f 	bl	80026d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a4d      	ldr	r2, [pc, #308]	; (800292c <HAL_ADC_MspInit+0x200>)
 80027f6:	639a      	str	r2, [r3, #56]	; 0x38
 80027f8:	4a4c      	ldr	r2, [pc, #304]	; (800292c <HAL_ADC_MspInit+0x200>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80027fe:	e08b      	b.n	8002918 <HAL_ADC_MspInit+0x1ec>
  else if(hadc->Instance==ADC2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a4b      	ldr	r2, [pc, #300]	; (8002934 <HAL_ADC_MspInit+0x208>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d159      	bne.n	80028be <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	4b45      	ldr	r3, [pc, #276]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 8002810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002812:	4a44      	ldr	r2, [pc, #272]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 8002814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002818:	6453      	str	r3, [r2, #68]	; 0x44
 800281a:	4b42      	ldr	r3, [pc, #264]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a3d      	ldr	r2, [pc, #244]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002846:	2303      	movs	r3, #3
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002852:	4619      	mov	r1, r3
 8002854:	4838      	ldr	r0, [pc, #224]	; (8002938 <HAL_ADC_MspInit+0x20c>)
 8002856:	f002 fa9b 	bl	8004d90 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800285a:	4b38      	ldr	r3, [pc, #224]	; (800293c <HAL_ADC_MspInit+0x210>)
 800285c:	4a38      	ldr	r2, [pc, #224]	; (8002940 <HAL_ADC_MspInit+0x214>)
 800285e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <HAL_ADC_MspInit+0x210>)
 8002862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002866:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002868:	4b34      	ldr	r3, [pc, #208]	; (800293c <HAL_ADC_MspInit+0x210>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800286e:	4b33      	ldr	r3, [pc, #204]	; (800293c <HAL_ADC_MspInit+0x210>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002874:	4b31      	ldr	r3, [pc, #196]	; (800293c <HAL_ADC_MspInit+0x210>)
 8002876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800287a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800287c:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_ADC_MspInit+0x210>)
 800287e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002882:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002884:	4b2d      	ldr	r3, [pc, #180]	; (800293c <HAL_ADC_MspInit+0x210>)
 8002886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800288a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_ADC_MspInit+0x210>)
 800288e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002892:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002894:	4b29      	ldr	r3, [pc, #164]	; (800293c <HAL_ADC_MspInit+0x210>)
 8002896:	2200      	movs	r2, #0
 8002898:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800289a:	4b28      	ldr	r3, [pc, #160]	; (800293c <HAL_ADC_MspInit+0x210>)
 800289c:	2200      	movs	r2, #0
 800289e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80028a0:	4826      	ldr	r0, [pc, #152]	; (800293c <HAL_ADC_MspInit+0x210>)
 80028a2:	f001 fe59 	bl	8004558 <HAL_DMA_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 80028ac:	f7ff ff10 	bl	80026d0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a22      	ldr	r2, [pc, #136]	; (800293c <HAL_ADC_MspInit+0x210>)
 80028b4:	639a      	str	r2, [r3, #56]	; 0x38
 80028b6:	4a21      	ldr	r2, [pc, #132]	; (800293c <HAL_ADC_MspInit+0x210>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80028bc:	e02c      	b.n	8002918 <HAL_ADC_MspInit+0x1ec>
  else if(hadc->Instance==ADC3)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a20      	ldr	r2, [pc, #128]	; (8002944 <HAL_ADC_MspInit+0x218>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d127      	bne.n	8002918 <HAL_ADC_MspInit+0x1ec>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80028c8:	2300      	movs	r3, #0
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	4a14      	ldr	r2, [pc, #80]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 80028d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028d6:	6453      	str	r3, [r2, #68]	; 0x44
 80028d8:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	6313      	str	r3, [r2, #48]	; 0x30
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_ADC_MspInit+0x1f8>)
 80028f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002900:	2302      	movs	r3, #2
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002904:	2303      	movs	r3, #3
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002910:	4619      	mov	r1, r3
 8002912:	4809      	ldr	r0, [pc, #36]	; (8002938 <HAL_ADC_MspInit+0x20c>)
 8002914:	f002 fa3c 	bl	8004d90 <HAL_GPIO_Init>
}
 8002918:	bf00      	nop
 800291a:	3738      	adds	r7, #56	; 0x38
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40012000 	.word	0x40012000
 8002924:	40023800 	.word	0x40023800
 8002928:	40020400 	.word	0x40020400
 800292c:	200002d0 	.word	0x200002d0
 8002930:	40026410 	.word	0x40026410
 8002934:	40012100 	.word	0x40012100
 8002938:	40020000 	.word	0x40020000
 800293c:	20000330 	.word	0x20000330
 8002940:	40026440 	.word	0x40026440
 8002944:	40012200 	.word	0x40012200

08002948 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b08a      	sub	sp, #40	; 0x28
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a4c      	ldr	r2, [pc, #304]	; (8002a98 <HAL_DAC_MspInit+0x150>)
 8002966:	4293      	cmp	r3, r2
 8002968:	f040 8092 	bne.w	8002a90 <HAL_DAC_MspInit+0x148>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <HAL_DAC_MspInit+0x154>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	4a49      	ldr	r2, [pc, #292]	; (8002a9c <HAL_DAC_MspInit+0x154>)
 8002976:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800297a:	6413      	str	r3, [r2, #64]	; 0x40
 800297c:	4b47      	ldr	r3, [pc, #284]	; (8002a9c <HAL_DAC_MspInit+0x154>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	4b43      	ldr	r3, [pc, #268]	; (8002a9c <HAL_DAC_MspInit+0x154>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	4a42      	ldr	r2, [pc, #264]	; (8002a9c <HAL_DAC_MspInit+0x154>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6313      	str	r3, [r2, #48]	; 0x30
 8002998:	4b40      	ldr	r3, [pc, #256]	; (8002a9c <HAL_DAC_MspInit+0x154>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80029a4:	2330      	movs	r3, #48	; 0x30
 80029a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029a8:	2303      	movs	r3, #3
 80029aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	4619      	mov	r1, r3
 80029b6:	483a      	ldr	r0, [pc, #232]	; (8002aa0 <HAL_DAC_MspInit+0x158>)
 80029b8:	f002 f9ea 	bl	8004d90 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80029bc:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <HAL_DAC_MspInit+0x15c>)
 80029be:	4a3a      	ldr	r2, [pc, #232]	; (8002aa8 <HAL_DAC_MspInit+0x160>)
 80029c0:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80029c2:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <HAL_DAC_MspInit+0x15c>)
 80029c4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80029c8:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029ca:	4b36      	ldr	r3, [pc, #216]	; (8002aa4 <HAL_DAC_MspInit+0x15c>)
 80029cc:	2240      	movs	r2, #64	; 0x40
 80029ce:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d0:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <HAL_DAC_MspInit+0x15c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80029d6:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <HAL_DAC_MspInit+0x15c>)
 80029d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029dc:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029de:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <HAL_DAC_MspInit+0x15c>)
 80029e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029e4:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029e6:	4b2f      	ldr	r3, [pc, #188]	; (8002aa4 <HAL_DAC_MspInit+0x15c>)
 80029e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029ec:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80029ee:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <HAL_DAC_MspInit+0x15c>)
 80029f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029f4:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80029f6:	4b2b      	ldr	r3, [pc, #172]	; (8002aa4 <HAL_DAC_MspInit+0x15c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029fc:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <HAL_DAC_MspInit+0x15c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002a02:	4828      	ldr	r0, [pc, #160]	; (8002aa4 <HAL_DAC_MspInit+0x15c>)
 8002a04:	f001 fda8 	bl	8004558 <HAL_DMA_Init>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002a0e:	f7ff fe5f 	bl	80026d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a23      	ldr	r2, [pc, #140]	; (8002aa4 <HAL_DAC_MspInit+0x15c>)
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	4a22      	ldr	r2, [pc, #136]	; (8002aa4 <HAL_DAC_MspInit+0x15c>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8002a1e:	4b23      	ldr	r3, [pc, #140]	; (8002aac <HAL_DAC_MspInit+0x164>)
 8002a20:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <HAL_DAC_MspInit+0x168>)
 8002a22:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8002a24:	4b21      	ldr	r3, [pc, #132]	; (8002aac <HAL_DAC_MspInit+0x164>)
 8002a26:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002a2a:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a2c:	4b1f      	ldr	r3, [pc, #124]	; (8002aac <HAL_DAC_MspInit+0x164>)
 8002a2e:	2240      	movs	r2, #64	; 0x40
 8002a30:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <HAL_DAC_MspInit+0x164>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8002a38:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <HAL_DAC_MspInit+0x164>)
 8002a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3e:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_DAC_MspInit+0x164>)
 8002a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a46:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <HAL_DAC_MspInit+0x164>)
 8002a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a4e:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8002a50:	4b16      	ldr	r3, [pc, #88]	; (8002aac <HAL_DAC_MspInit+0x164>)
 8002a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a56:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_DAC_MspInit+0x164>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a5e:	4b13      	ldr	r3, [pc, #76]	; (8002aac <HAL_DAC_MspInit+0x164>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8002a64:	4811      	ldr	r0, [pc, #68]	; (8002aac <HAL_DAC_MspInit+0x164>)
 8002a66:	f001 fd77 	bl	8004558 <HAL_DMA_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8002a70:	f7ff fe2e 	bl	80026d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <HAL_DAC_MspInit+0x164>)
 8002a78:	60da      	str	r2, [r3, #12]
 8002a7a:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <HAL_DAC_MspInit+0x164>)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a80:	2200      	movs	r2, #0
 8002a82:	2100      	movs	r1, #0
 8002a84:	2036      	movs	r0, #54	; 0x36
 8002a86:	f001 fab3 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a8a:	2036      	movs	r0, #54	; 0x36
 8002a8c:	f001 facc 	bl	8004028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002a90:	bf00      	nop
 8002a92:	3728      	adds	r7, #40	; 0x28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40007400 	.word	0x40007400
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40020000 	.word	0x40020000
 8002aa4:	200003a4 	.word	0x200003a4
 8002aa8:	40026088 	.word	0x40026088
 8002aac:	20000404 	.word	0x20000404
 8002ab0:	400260a0 	.word	0x400260a0

08002ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08a      	sub	sp, #40	; 0x28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a34      	ldr	r2, [pc, #208]	; (8002ba4 <HAL_I2C_MspInit+0xf0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d161      	bne.n	8002b9a <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	4b33      	ldr	r3, [pc, #204]	; (8002ba8 <HAL_I2C_MspInit+0xf4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a32      	ldr	r2, [pc, #200]	; (8002ba8 <HAL_I2C_MspInit+0xf4>)
 8002ae0:	f043 0302 	orr.w	r3, r3, #2
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <HAL_I2C_MspInit+0xf4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002af2:	23c0      	movs	r3, #192	; 0xc0
 8002af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af6:	2312      	movs	r3, #18
 8002af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afe:	2303      	movs	r3, #3
 8002b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b02:	2304      	movs	r3, #4
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b06:	f107 0314 	add.w	r3, r7, #20
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4827      	ldr	r0, [pc, #156]	; (8002bac <HAL_I2C_MspInit+0xf8>)
 8002b0e:	f002 f93f 	bl	8004d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_I2C_MspInit+0xf4>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <HAL_I2C_MspInit+0xf4>)
 8002b1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <HAL_I2C_MspInit+0xf4>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_I2C_MspInit+0xfc>)
 8002b30:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <HAL_I2C_MspInit+0x100>)
 8002b32:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002b34:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <HAL_I2C_MspInit+0xfc>)
 8002b36:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b3a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <HAL_I2C_MspInit+0xfc>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_I2C_MspInit+0xfc>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b48:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <HAL_I2C_MspInit+0xfc>)
 8002b4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b4e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b50:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <HAL_I2C_MspInit+0xfc>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b56:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <HAL_I2C_MspInit+0xfc>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002b5c:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <HAL_I2C_MspInit+0xfc>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b62:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <HAL_I2C_MspInit+0xfc>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b68:	4b11      	ldr	r3, [pc, #68]	; (8002bb0 <HAL_I2C_MspInit+0xfc>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002b6e:	4810      	ldr	r0, [pc, #64]	; (8002bb0 <HAL_I2C_MspInit+0xfc>)
 8002b70:	f001 fcf2 	bl	8004558 <HAL_DMA_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8002b7a:	f7ff fda9 	bl	80026d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <HAL_I2C_MspInit+0xfc>)
 8002b82:	639a      	str	r2, [r3, #56]	; 0x38
 8002b84:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <HAL_I2C_MspInit+0xfc>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	201f      	movs	r0, #31
 8002b90:	f001 fa2e 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b94:	201f      	movs	r0, #31
 8002b96:	f001 fa47 	bl	8004028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b9a:	bf00      	nop
 8002b9c:	3728      	adds	r7, #40	; 0x28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40005400 	.word	0x40005400
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	200004b8 	.word	0x200004b8
 8002bb4:	40026010 	.word	0x40026010

08002bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b088      	sub	sp, #32
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d10e      	bne.n	8002be8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	4b40      	ldr	r3, [pc, #256]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002bd4:	f043 0301 	orr.w	r3, r3, #1
 8002bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bda:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
 8002be4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002be6:	e06e      	b.n	8002cc6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM4)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a39      	ldr	r2, [pc, #228]	; (8002cd4 <HAL_TIM_Base_MspInit+0x11c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d116      	bne.n	8002c20 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	4b36      	ldr	r3, [pc, #216]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	4a35      	ldr	r2, [pc, #212]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002bfc:	f043 0304 	orr.w	r3, r3, #4
 8002c00:	6413      	str	r3, [r2, #64]	; 0x40
 8002c02:	4b33      	ldr	r3, [pc, #204]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	2100      	movs	r1, #0
 8002c12:	201e      	movs	r0, #30
 8002c14:	f001 f9ec 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c18:	201e      	movs	r0, #30
 8002c1a:	f001 fa05 	bl	8004028 <HAL_NVIC_EnableIRQ>
}
 8002c1e:	e052      	b.n	8002cc6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a2c      	ldr	r2, [pc, #176]	; (8002cd8 <HAL_TIM_Base_MspInit+0x120>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d116      	bne.n	8002c58 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002c34:	f043 0310 	orr.w	r3, r3, #16
 8002c38:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3a:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	2036      	movs	r0, #54	; 0x36
 8002c4c:	f001 f9d0 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c50:	2036      	movs	r0, #54	; 0x36
 8002c52:	f001 f9e9 	bl	8004028 <HAL_NVIC_EnableIRQ>
}
 8002c56:	e036      	b.n	8002cc6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <HAL_TIM_Base_MspInit+0x124>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d116      	bne.n	8002c90 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002c6c:	f043 0320 	orr.w	r3, r3, #32
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	2037      	movs	r0, #55	; 0x37
 8002c84:	f001 f9b4 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002c88:	2037      	movs	r0, #55	; 0x37
 8002c8a:	f001 f9cd 	bl	8004028 <HAL_NVIC_EnableIRQ>
}
 8002c8e:	e01a      	b.n	8002cc6 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <HAL_TIM_Base_MspInit+0x128>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d115      	bne.n	8002cc6 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_TIM_Base_MspInit+0x118>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2100      	movs	r1, #0
 8002cba:	2019      	movs	r0, #25
 8002cbc:	f001 f998 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002cc0:	2019      	movs	r0, #25
 8002cc2:	f001 f9b1 	bl	8004028 <HAL_NVIC_EnableIRQ>
}
 8002cc6:	bf00      	nop
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	40000800 	.word	0x40000800
 8002cd8:	40001000 	.word	0x40001000
 8002cdc:	40001400 	.word	0x40001400
 8002ce0:	40014400 	.word	0x40014400

08002ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08c      	sub	sp, #48	; 0x30
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cec:	f107 031c 	add.w	r3, r7, #28
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	605a      	str	r2, [r3, #4]
 8002cf6:	609a      	str	r2, [r3, #8]
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a68      	ldr	r2, [pc, #416]	; (8002ea4 <HAL_UART_MspInit+0x1c0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d163      	bne.n	8002dce <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	4b67      	ldr	r3, [pc, #412]	; (8002ea8 <HAL_UART_MspInit+0x1c4>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	4a66      	ldr	r2, [pc, #408]	; (8002ea8 <HAL_UART_MspInit+0x1c4>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d14:	6413      	str	r3, [r2, #64]	; 0x40
 8002d16:	4b64      	ldr	r3, [pc, #400]	; (8002ea8 <HAL_UART_MspInit+0x1c4>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	4b60      	ldr	r3, [pc, #384]	; (8002ea8 <HAL_UART_MspInit+0x1c4>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	4a5f      	ldr	r2, [pc, #380]	; (8002ea8 <HAL_UART_MspInit+0x1c4>)
 8002d2c:	f043 0302 	orr.w	r3, r3, #2
 8002d30:	6313      	str	r3, [r2, #48]	; 0x30
 8002d32:	4b5d      	ldr	r3, [pc, #372]	; (8002ea8 <HAL_UART_MspInit+0x1c4>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d50:	2307      	movs	r3, #7
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d54:	f107 031c 	add.w	r3, r7, #28
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4854      	ldr	r0, [pc, #336]	; (8002eac <HAL_UART_MspInit+0x1c8>)
 8002d5c:	f002 f818 	bl	8004d90 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002d60:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_UART_MspInit+0x1cc>)
 8002d62:	4a54      	ldr	r2, [pc, #336]	; (8002eb4 <HAL_UART_MspInit+0x1d0>)
 8002d64:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002d66:	4b52      	ldr	r3, [pc, #328]	; (8002eb0 <HAL_UART_MspInit+0x1cc>)
 8002d68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d6e:	4b50      	ldr	r3, [pc, #320]	; (8002eb0 <HAL_UART_MspInit+0x1cc>)
 8002d70:	2240      	movs	r2, #64	; 0x40
 8002d72:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d74:	4b4e      	ldr	r3, [pc, #312]	; (8002eb0 <HAL_UART_MspInit+0x1cc>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d7a:	4b4d      	ldr	r3, [pc, #308]	; (8002eb0 <HAL_UART_MspInit+0x1cc>)
 8002d7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d80:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d82:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <HAL_UART_MspInit+0x1cc>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d88:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <HAL_UART_MspInit+0x1cc>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002d8e:	4b48      	ldr	r3, [pc, #288]	; (8002eb0 <HAL_UART_MspInit+0x1cc>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d94:	4b46      	ldr	r3, [pc, #280]	; (8002eb0 <HAL_UART_MspInit+0x1cc>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d9a:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <HAL_UART_MspInit+0x1cc>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002da0:	4843      	ldr	r0, [pc, #268]	; (8002eb0 <HAL_UART_MspInit+0x1cc>)
 8002da2:	f001 fbd9 	bl	8004558 <HAL_DMA_Init>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002dac:	f7ff fc90 	bl	80026d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a3f      	ldr	r2, [pc, #252]	; (8002eb0 <HAL_UART_MspInit+0x1cc>)
 8002db4:	635a      	str	r2, [r3, #52]	; 0x34
 8002db6:	4a3e      	ldr	r2, [pc, #248]	; (8002eb0 <HAL_UART_MspInit+0x1cc>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2027      	movs	r0, #39	; 0x27
 8002dc2:	f001 f915 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002dc6:	2027      	movs	r0, #39	; 0x27
 8002dc8:	f001 f92e 	bl	8004028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002dcc:	e066      	b.n	8002e9c <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a39      	ldr	r2, [pc, #228]	; (8002eb8 <HAL_UART_MspInit+0x1d4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d161      	bne.n	8002e9c <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002dd8:	2300      	movs	r3, #0
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <HAL_UART_MspInit+0x1c4>)
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	4a31      	ldr	r2, [pc, #196]	; (8002ea8 <HAL_UART_MspInit+0x1c4>)
 8002de2:	f043 0320 	orr.w	r3, r3, #32
 8002de6:	6453      	str	r3, [r2, #68]	; 0x44
 8002de8:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <HAL_UART_MspInit+0x1c4>)
 8002dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	613b      	str	r3, [r7, #16]
 8002df2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	4b2b      	ldr	r3, [pc, #172]	; (8002ea8 <HAL_UART_MspInit+0x1c4>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	4a2a      	ldr	r2, [pc, #168]	; (8002ea8 <HAL_UART_MspInit+0x1c4>)
 8002dfe:	f043 0304 	orr.w	r3, r3, #4
 8002e02:	6313      	str	r3, [r2, #48]	; 0x30
 8002e04:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <HAL_UART_MspInit+0x1c4>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e10:	23c0      	movs	r3, #192	; 0xc0
 8002e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	2302      	movs	r3, #2
 8002e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e20:	2308      	movs	r3, #8
 8002e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e24:	f107 031c 	add.w	r3, r7, #28
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4824      	ldr	r0, [pc, #144]	; (8002ebc <HAL_UART_MspInit+0x1d8>)
 8002e2c:	f001 ffb0 	bl	8004d90 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002e30:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <HAL_UART_MspInit+0x1dc>)
 8002e32:	4a24      	ldr	r2, [pc, #144]	; (8002ec4 <HAL_UART_MspInit+0x1e0>)
 8002e34:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_UART_MspInit+0x1dc>)
 8002e38:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002e3c:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_UART_MspInit+0x1dc>)
 8002e40:	2240      	movs	r2, #64	; 0x40
 8002e42:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e44:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <HAL_UART_MspInit+0x1dc>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HAL_UART_MspInit+0x1dc>)
 8002e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e50:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e52:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_UART_MspInit+0x1dc>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_UART_MspInit+0x1dc>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <HAL_UART_MspInit+0x1dc>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e64:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <HAL_UART_MspInit+0x1dc>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e6a:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <HAL_UART_MspInit+0x1dc>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002e70:	4813      	ldr	r0, [pc, #76]	; (8002ec0 <HAL_UART_MspInit+0x1dc>)
 8002e72:	f001 fb71 	bl	8004558 <HAL_DMA_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8002e7c:	f7ff fc28 	bl	80026d0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <HAL_UART_MspInit+0x1dc>)
 8002e84:	635a      	str	r2, [r3, #52]	; 0x34
 8002e86:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <HAL_UART_MspInit+0x1dc>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2100      	movs	r1, #0
 8002e90:	2047      	movs	r0, #71	; 0x47
 8002e92:	f001 f8ad 	bl	8003ff0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e96:	2047      	movs	r0, #71	; 0x47
 8002e98:	f001 f8c6 	bl	8004028 <HAL_NVIC_EnableIRQ>
}
 8002e9c:	bf00      	nop
 8002e9e:	3730      	adds	r7, #48	; 0x30
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40004800 	.word	0x40004800
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40020400 	.word	0x40020400
 8002eb0:	20000708 	.word	0x20000708
 8002eb4:	40026058 	.word	0x40026058
 8002eb8:	40011400 	.word	0x40011400
 8002ebc:	40020800 	.word	0x40020800
 8002ec0:	20000768 	.word	0x20000768
 8002ec4:	400264a0 	.word	0x400264a0

08002ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08c      	sub	sp, #48	; 0x30
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	2019      	movs	r0, #25
 8002ede:	f001 f887 	bl	8003ff0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ee2:	2019      	movs	r0, #25
 8002ee4:	f001 f8a0 	bl	8004028 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <HAL_InitTick+0xa4>)
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <HAL_InitTick+0xa4>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef8:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <HAL_InitTick+0xa4>)
 8002efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002f04:	f107 0210 	add.w	r2, r7, #16
 8002f08:	f107 0314 	add.w	r3, r7, #20
 8002f0c:	4611      	mov	r1, r2
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f005 f8a6 	bl	8008060 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002f14:	f005 f890 	bl	8008038 <HAL_RCC_GetPCLK2Freq>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	4a13      	ldr	r2, [pc, #76]	; (8002f70 <HAL_InitTick+0xa8>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0c9b      	lsrs	r3, r3, #18
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002f2c:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <HAL_InitTick+0xac>)
 8002f2e:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <HAL_InitTick+0xb0>)
 8002f30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <HAL_InitTick+0xac>)
 8002f34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f38:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002f3a:	4a0e      	ldr	r2, [pc, #56]	; (8002f74 <HAL_InitTick+0xac>)
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_InitTick+0xac>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_InitTick+0xac>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002f4c:	4809      	ldr	r0, [pc, #36]	; (8002f74 <HAL_InitTick+0xac>)
 8002f4e:	f005 f8b9 	bl	80080c4 <HAL_TIM_Base_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d104      	bne.n	8002f62 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002f58:	4806      	ldr	r0, [pc, #24]	; (8002f74 <HAL_InitTick+0xac>)
 8002f5a:	f005 f903 	bl	8008164 <HAL_TIM_Base_Start_IT>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	e000      	b.n	8002f64 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3730      	adds	r7, #48	; 0x30
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	431bde83 	.word	0x431bde83
 8002f74:	20005ab4 	.word	0x20005ab4
 8002f78:	40010000 	.word	0x40010000

08002f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <NMI_Handler+0x4>

08002f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f86:	e7fe      	b.n	8002f86 <HardFault_Handler+0x4>

08002f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f8c:	e7fe      	b.n	8002f8c <MemManage_Handler+0x4>

08002f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f92:	e7fe      	b.n	8002f92 <BusFault_Handler+0x4>

08002f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <UsageFault_Handler+0x4>

08002f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002fd6:	2004      	movs	r0, #4
 8002fd8:	f002 f890 	bl	80050fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002fe4:	2008      	movs	r0, #8
 8002fe6:	f002 f889 	bl	80050fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}

08002fee <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002ff2:	2010      	movs	r0, #16
 8002ff4:	f002 f882 	bl	80050fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002ff8:	bf00      	nop
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003000:	4802      	ldr	r0, [pc, #8]	; (800300c <DMA1_Stream0_IRQHandler+0x10>)
 8003002:	f001 fc41 	bl	8004888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200004b8 	.word	0x200004b8

08003010 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003014:	4802      	ldr	r0, [pc, #8]	; (8003020 <DMA1_Stream3_IRQHandler+0x10>)
 8003016:	f001 fc37 	bl	8004888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000708 	.word	0x20000708

08003024 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003028:	4802      	ldr	r0, [pc, #8]	; (8003034 <DMA1_Stream5_IRQHandler+0x10>)
 800302a:	f001 fc2d 	bl	8004888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	200003a4 	.word	0x200003a4

08003038 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 800303c:	4802      	ldr	r0, [pc, #8]	; (8003048 <DMA1_Stream6_IRQHandler+0x10>)
 800303e:	f001 fc23 	bl	8004888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000404 	.word	0x20000404

0800304c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003050:	4803      	ldr	r0, [pc, #12]	; (8003060 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003052:	f005 f926 	bl	80082a2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003056:	4803      	ldr	r0, [pc, #12]	; (8003064 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003058:	f005 f923 	bl	80082a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800305c:	bf00      	nop
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20005ab4 	.word	0x20005ab4
 8003064:	20000638 	.word	0x20000638

08003068 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800306c:	4802      	ldr	r0, [pc, #8]	; (8003078 <TIM4_IRQHandler+0x10>)
 800306e:	f005 f918 	bl	80082a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20000560 	.word	0x20000560

0800307c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003080:	4802      	ldr	r0, [pc, #8]	; (800308c <I2C1_EV_IRQHandler+0x10>)
 8003082:	f002 fc59 	bl	8005938 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000464 	.word	0x20000464

08003090 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003094:	4802      	ldr	r0, [pc, #8]	; (80030a0 <USART3_IRQHandler+0x10>)
 8003096:	f005 fd91 	bl	8008bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000680 	.word	0x20000680

080030a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80030a8:	4803      	ldr	r0, [pc, #12]	; (80030b8 <TIM6_DAC_IRQHandler+0x14>)
 80030aa:	f001 f903 	bl	80042b4 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80030ae:	4803      	ldr	r0, [pc, #12]	; (80030bc <TIM6_DAC_IRQHandler+0x18>)
 80030b0:	f005 f8f7 	bl	80082a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000390 	.word	0x20000390
 80030bc:	200005a8 	.word	0x200005a8

080030c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030c4:	4802      	ldr	r0, [pc, #8]	; (80030d0 <TIM7_IRQHandler+0x10>)
 80030c6:	f005 f8ec 	bl	80082a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	200005f0 	.word	0x200005f0

080030d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030d8:	4802      	ldr	r0, [pc, #8]	; (80030e4 <DMA2_Stream0_IRQHandler+0x10>)
 80030da:	f001 fbd5 	bl	8004888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200002d0 	.word	0x200002d0

080030e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80030ec:	4802      	ldr	r0, [pc, #8]	; (80030f8 <DMA2_Stream2_IRQHandler+0x10>)
 80030ee:	f001 fbcb 	bl	8004888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000330 	.word	0x20000330

080030fc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <DMA2_Stream6_IRQHandler+0x10>)
 8003102:	f001 fbc1 	bl	8004888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000768 	.word	0x20000768

08003110 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003114:	4802      	ldr	r0, [pc, #8]	; (8003120 <USART6_IRQHandler+0x10>)
 8003116:	f005 fd51 	bl	8008bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	200006c4 	.word	0x200006c4

08003124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
	return 1;
 8003128:	2301      	movs	r3, #1
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <_kill>:

int _kill(int pid, int sig)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800313e:	f006 fcd1 	bl	8009ae4 <__errno>
 8003142:	4603      	mov	r3, r0
 8003144:	2216      	movs	r2, #22
 8003146:	601a      	str	r2, [r3, #0]
	return -1;
 8003148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <_exit>:

void _exit (int status)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800315c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ffe7 	bl	8003134 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003166:	e7fe      	b.n	8003166 <_exit+0x12>

08003168 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	e00a      	b.n	8003190 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800317a:	f3af 8000 	nop.w
 800317e:	4601      	mov	r1, r0
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	1c5a      	adds	r2, r3, #1
 8003184:	60ba      	str	r2, [r7, #8]
 8003186:	b2ca      	uxtb	r2, r1
 8003188:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	3301      	adds	r3, #1
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	dbf0      	blt.n	800317a <_read+0x12>
	}

return len;
 8003198:	687b      	ldr	r3, [r7, #4]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b086      	sub	sp, #24
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e009      	b.n	80031c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	60ba      	str	r2, [r7, #8]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	3301      	adds	r3, #1
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	dbf1      	blt.n	80031b4 <_write+0x12>
	}
	return len;
 80031d0:	687b      	ldr	r3, [r7, #4]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <_close>:

int _close(int file)
{
 80031da:	b480      	push	{r7}
 80031dc:	b083      	sub	sp, #12
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
	return -1;
 80031e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003202:	605a      	str	r2, [r3, #4]
	return 0;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <_isatty>:

int _isatty(int file)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
	return 1;
 800321a:	2301      	movs	r3, #1
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
	return 0;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800324c:	4a14      	ldr	r2, [pc, #80]	; (80032a0 <_sbrk+0x5c>)
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <_sbrk+0x60>)
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <_sbrk+0x64>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <_sbrk+0x64>)
 8003262:	4a12      	ldr	r2, [pc, #72]	; (80032ac <_sbrk+0x68>)
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003266:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <_sbrk+0x64>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4413      	add	r3, r2
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	429a      	cmp	r2, r3
 8003272:	d207      	bcs.n	8003284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003274:	f006 fc36 	bl	8009ae4 <__errno>
 8003278:	4603      	mov	r3, r0
 800327a:	220c      	movs	r2, #12
 800327c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800327e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003282:	e009      	b.n	8003298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <_sbrk+0x64>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <_sbrk+0x64>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4413      	add	r3, r2
 8003292:	4a05      	ldr	r2, [pc, #20]	; (80032a8 <_sbrk+0x64>)
 8003294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003296:	68fb      	ldr	r3, [r7, #12]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20020000 	.word	0x20020000
 80032a4:	00000400 	.word	0x00000400
 80032a8:	20005afc 	.word	0x20005afc
 80032ac:	20005b18 	.word	0x20005b18

080032b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <SystemInit+0x20>)
 80032b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ba:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <SystemInit+0x20>)
 80032bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800330c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032d8:	480d      	ldr	r0, [pc, #52]	; (8003310 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032da:	490e      	ldr	r1, [pc, #56]	; (8003314 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032dc:	4a0e      	ldr	r2, [pc, #56]	; (8003318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032e0:	e002      	b.n	80032e8 <LoopCopyDataInit>

080032e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032e6:	3304      	adds	r3, #4

080032e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032ec:	d3f9      	bcc.n	80032e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ee:	4a0b      	ldr	r2, [pc, #44]	; (800331c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032f0:	4c0b      	ldr	r4, [pc, #44]	; (8003320 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032f4:	e001      	b.n	80032fa <LoopFillZerobss>

080032f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f8:	3204      	adds	r2, #4

080032fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032fc:	d3fb      	bcc.n	80032f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032fe:	f7ff ffd7 	bl	80032b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003302:	f006 fbf5 	bl	8009af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003306:	f7fe fc51 	bl	8001bac <main>
  bx  lr    
 800330a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800330c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003314:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003318:	0800cf34 	.word	0x0800cf34
  ldr r2, =_sbss
 800331c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003320:	20005b14 	.word	0x20005b14

08003324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003324:	e7fe      	b.n	8003324 <ADC_IRQHandler>
	...

08003328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <HAL_Init+0x40>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a0d      	ldr	r2, [pc, #52]	; (8003368 <HAL_Init+0x40>)
 8003332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003336:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_Init+0x40>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <HAL_Init+0x40>)
 800333e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003342:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003344:	4b08      	ldr	r3, [pc, #32]	; (8003368 <HAL_Init+0x40>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a07      	ldr	r2, [pc, #28]	; (8003368 <HAL_Init+0x40>)
 800334a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003350:	2003      	movs	r0, #3
 8003352:	f000 fe42 	bl	8003fda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003356:	2000      	movs	r0, #0
 8003358:	f7ff fdb6 	bl	8002ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800335c:	f7ff f9be 	bl	80026dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023c00 	.word	0x40023c00

0800336c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003370:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_IncTick+0x20>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	461a      	mov	r2, r3
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <HAL_IncTick+0x24>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4413      	add	r3, r2
 800337c:	4a04      	ldr	r2, [pc, #16]	; (8003390 <HAL_IncTick+0x24>)
 800337e:	6013      	str	r3, [r2, #0]
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000008 	.word	0x20000008
 8003390:	20005b00 	.word	0x20005b00

08003394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return uwTick;
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <HAL_GetTick+0x14>)
 800339a:	681b      	ldr	r3, [r3, #0]
}
 800339c:	4618      	mov	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	20005b00 	.word	0x20005b00

080033ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e033      	b.n	800342a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff f9ae 	bl	800272c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d118      	bne.n	800341c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033f2:	f023 0302 	bic.w	r3, r3, #2
 80033f6:	f043 0202 	orr.w	r2, r3, #2
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fbc0 	bl	8003b84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f023 0303 	bic.w	r3, r3, #3
 8003412:	f043 0201 	orr.w	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	641a      	str	r2, [r3, #64]	; 0x40
 800341a:	e001      	b.n	8003420 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003446:	2b01      	cmp	r3, #1
 8003448:	d101      	bne.n	800344e <HAL_ADC_Start+0x1a>
 800344a:	2302      	movs	r3, #2
 800344c:	e0b2      	b.n	80035b4 <HAL_ADC_Start+0x180>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b01      	cmp	r3, #1
 8003462:	d018      	beq.n	8003496 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003474:	4b52      	ldr	r3, [pc, #328]	; (80035c0 <HAL_ADC_Start+0x18c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a52      	ldr	r2, [pc, #328]	; (80035c4 <HAL_ADC_Start+0x190>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	0c9a      	lsrs	r2, r3, #18
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003488:	e002      	b.n	8003490 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	3b01      	subs	r3, #1
 800348e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f9      	bne.n	800348a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d17a      	bne.n	800359a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e2:	d106      	bne.n	80034f2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e8:	f023 0206 	bic.w	r2, r3, #6
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	645a      	str	r2, [r3, #68]	; 0x44
 80034f0:	e002      	b.n	80034f8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003500:	4b31      	ldr	r3, [pc, #196]	; (80035c8 <HAL_ADC_Start+0x194>)
 8003502:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800350c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2b00      	cmp	r3, #0
 8003518:	d12a      	bne.n	8003570 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a2b      	ldr	r2, [pc, #172]	; (80035cc <HAL_ADC_Start+0x198>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d015      	beq.n	8003550 <HAL_ADC_Start+0x11c>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a29      	ldr	r2, [pc, #164]	; (80035d0 <HAL_ADC_Start+0x19c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d105      	bne.n	800353a <HAL_ADC_Start+0x106>
 800352e:	4b26      	ldr	r3, [pc, #152]	; (80035c8 <HAL_ADC_Start+0x194>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a25      	ldr	r2, [pc, #148]	; (80035d4 <HAL_ADC_Start+0x1a0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d136      	bne.n	80035b2 <HAL_ADC_Start+0x17e>
 8003544:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <HAL_ADC_Start+0x194>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b00      	cmp	r3, #0
 800354e:	d130      	bne.n	80035b2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d129      	bne.n	80035b2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800356c:	609a      	str	r2, [r3, #8]
 800356e:	e020      	b.n	80035b2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a15      	ldr	r2, [pc, #84]	; (80035cc <HAL_ADC_Start+0x198>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d11b      	bne.n	80035b2 <HAL_ADC_Start+0x17e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d114      	bne.n	80035b2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	e00b      	b.n	80035b2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f043 0210 	orr.w	r2, r3, #16
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f043 0201 	orr.w	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr
 80035c0:	20000000 	.word	0x20000000
 80035c4:	431bde83 	.word	0x431bde83
 80035c8:	40012300 	.word	0x40012300
 80035cc:	40012000 	.word	0x40012000
 80035d0:	40012100 	.word	0x40012100
 80035d4:	40012200 	.word	0x40012200

080035d8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f4:	d113      	bne.n	800361e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003604:	d10b      	bne.n	800361e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f043 0220 	orr.w	r2, r3, #32
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e063      	b.n	80036e6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800361e:	f7ff feb9 	bl	8003394 <HAL_GetTick>
 8003622:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003624:	e021      	b.n	800366a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800362c:	d01d      	beq.n	800366a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <HAL_ADC_PollForConversion+0x6c>
 8003634:	f7ff feae 	bl	8003394 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d212      	bcs.n	800366a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b02      	cmp	r3, #2
 8003650:	d00b      	beq.n	800366a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f043 0204 	orr.w	r2, r3, #4
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e03d      	b.n	80036e6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b02      	cmp	r3, #2
 8003676:	d1d6      	bne.n	8003626 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f06f 0212 	mvn.w	r2, #18
 8003680:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d123      	bne.n	80036e4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d11f      	bne.n	80036e4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d006      	beq.n	80036c0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d111      	bne.n	80036e4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003706:	2b01      	cmp	r3, #1
 8003708:	d101      	bne.n	800370e <HAL_ADC_Start_DMA+0x1e>
 800370a:	2302      	movs	r3, #2
 800370c:	e0e9      	b.n	80038e2 <HAL_ADC_Start_DMA+0x1f2>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d018      	beq.n	8003756 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f042 0201 	orr.w	r2, r2, #1
 8003732:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003734:	4b6d      	ldr	r3, [pc, #436]	; (80038ec <HAL_ADC_Start_DMA+0x1fc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a6d      	ldr	r2, [pc, #436]	; (80038f0 <HAL_ADC_Start_DMA+0x200>)
 800373a:	fba2 2303 	umull	r2, r3, r2, r3
 800373e:	0c9a      	lsrs	r2, r3, #18
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003748:	e002      	b.n	8003750 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	3b01      	subs	r3, #1
 800374e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f9      	bne.n	800374a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003764:	d107      	bne.n	8003776 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003774:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	f040 80a1 	bne.w	80038c8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80037b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c4:	d106      	bne.n	80037d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	f023 0206 	bic.w	r2, r3, #6
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
 80037d2:	e002      	b.n	80037da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037e2:	4b44      	ldr	r3, [pc, #272]	; (80038f4 <HAL_ADC_Start_DMA+0x204>)
 80037e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	4a43      	ldr	r2, [pc, #268]	; (80038f8 <HAL_ADC_Start_DMA+0x208>)
 80037ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	4a42      	ldr	r2, [pc, #264]	; (80038fc <HAL_ADC_Start_DMA+0x20c>)
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	4a41      	ldr	r2, [pc, #260]	; (8003900 <HAL_ADC_Start_DMA+0x210>)
 80037fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003806:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003816:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003826:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	334c      	adds	r3, #76	; 0x4c
 8003832:	4619      	mov	r1, r3
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f000 ff3c 	bl	80046b4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	2b00      	cmp	r3, #0
 8003846:	d12a      	bne.n	800389e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a2d      	ldr	r2, [pc, #180]	; (8003904 <HAL_ADC_Start_DMA+0x214>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d015      	beq.n	800387e <HAL_ADC_Start_DMA+0x18e>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a2c      	ldr	r2, [pc, #176]	; (8003908 <HAL_ADC_Start_DMA+0x218>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d105      	bne.n	8003868 <HAL_ADC_Start_DMA+0x178>
 800385c:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <HAL_ADC_Start_DMA+0x204>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 031f 	and.w	r3, r3, #31
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a27      	ldr	r2, [pc, #156]	; (800390c <HAL_ADC_Start_DMA+0x21c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d136      	bne.n	80038e0 <HAL_ADC_Start_DMA+0x1f0>
 8003872:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <HAL_ADC_Start_DMA+0x204>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	d130      	bne.n	80038e0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d129      	bne.n	80038e0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800389a:	609a      	str	r2, [r3, #8]
 800389c:	e020      	b.n	80038e0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a18      	ldr	r2, [pc, #96]	; (8003904 <HAL_ADC_Start_DMA+0x214>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d11b      	bne.n	80038e0 <HAL_ADC_Start_DMA+0x1f0>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d114      	bne.n	80038e0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80038c4:	609a      	str	r2, [r3, #8]
 80038c6:	e00b      	b.n	80038e0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f043 0210 	orr.w	r2, r3, #16
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d8:	f043 0201 	orr.w	r2, r3, #1
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000000 	.word	0x20000000
 80038f0:	431bde83 	.word	0x431bde83
 80038f4:	40012300 	.word	0x40012300
 80038f8:	08003d7d 	.word	0x08003d7d
 80038fc:	08003e37 	.word	0x08003e37
 8003900:	08003e53 	.word	0x08003e53
 8003904:	40012000 	.word	0x40012000
 8003908:	40012100 	.word	0x40012100
 800390c:	40012200 	.word	0x40012200

08003910 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003954:	2b01      	cmp	r3, #1
 8003956:	d101      	bne.n	800395c <HAL_ADC_ConfigChannel+0x1c>
 8003958:	2302      	movs	r3, #2
 800395a:	e105      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x228>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b09      	cmp	r3, #9
 800396a:	d925      	bls.n	80039b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68d9      	ldr	r1, [r3, #12]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	b29b      	uxth	r3, r3
 8003978:	461a      	mov	r2, r3
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	3b1e      	subs	r3, #30
 8003982:	2207      	movs	r2, #7
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43da      	mvns	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	400a      	ands	r2, r1
 8003990:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68d9      	ldr	r1, [r3, #12]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	4618      	mov	r0, r3
 80039a4:	4603      	mov	r3, r0
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4403      	add	r3, r0
 80039aa:	3b1e      	subs	r3, #30
 80039ac:	409a      	lsls	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	60da      	str	r2, [r3, #12]
 80039b6:	e022      	b.n	80039fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6919      	ldr	r1, [r3, #16]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	4613      	mov	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	2207      	movs	r2, #7
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43da      	mvns	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	400a      	ands	r2, r1
 80039da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6919      	ldr	r1, [r3, #16]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689a      	ldr	r2, [r3, #8]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	4618      	mov	r0, r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4403      	add	r3, r0
 80039f4:	409a      	lsls	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d824      	bhi.n	8003a50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4413      	add	r3, r2
 8003a16:	3b05      	subs	r3, #5
 8003a18:	221f      	movs	r2, #31
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43da      	mvns	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	400a      	ands	r2, r1
 8003a26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	4618      	mov	r0, r3
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	3b05      	subs	r3, #5
 8003a42:	fa00 f203 	lsl.w	r2, r0, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a4e:	e04c      	b.n	8003aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	2b0c      	cmp	r3, #12
 8003a56:	d824      	bhi.n	8003aa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	3b23      	subs	r3, #35	; 0x23
 8003a6a:	221f      	movs	r2, #31
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43da      	mvns	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	400a      	ands	r2, r1
 8003a78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	4618      	mov	r0, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	3b23      	subs	r3, #35	; 0x23
 8003a94:	fa00 f203 	lsl.w	r2, r0, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8003aa0:	e023      	b.n	8003aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3b41      	subs	r3, #65	; 0x41
 8003ab4:	221f      	movs	r2, #31
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43da      	mvns	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	3b41      	subs	r3, #65	; 0x41
 8003ade:	fa00 f203 	lsl.w	r2, r0, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aea:	4b22      	ldr	r3, [pc, #136]	; (8003b74 <HAL_ADC_ConfigChannel+0x234>)
 8003aec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <HAL_ADC_ConfigChannel+0x238>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d109      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x1cc>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b12      	cmp	r3, #18
 8003afe:	d105      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <HAL_ADC_ConfigChannel+0x238>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d123      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x21e>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d003      	beq.n	8003b26 <HAL_ADC_ConfigChannel+0x1e6>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b11      	cmp	r3, #17
 8003b24:	d11b      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d111      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_ADC_ConfigChannel+0x23c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a10      	ldr	r2, [pc, #64]	; (8003b80 <HAL_ADC_ConfigChannel+0x240>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	0c9a      	lsrs	r2, r3, #18
 8003b46:	4613      	mov	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b50:	e002      	b.n	8003b58 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f9      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	40012300 	.word	0x40012300
 8003b78:	40012000 	.word	0x40012000
 8003b7c:	20000000 	.word	0x20000000
 8003b80:	431bde83 	.word	0x431bde83

08003b84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b8c:	4b79      	ldr	r3, [pc, #484]	; (8003d74 <ADC_Init+0x1f0>)
 8003b8e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	021a      	lsls	r2, r3, #8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6899      	ldr	r1, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	4a58      	ldr	r2, [pc, #352]	; (8003d78 <ADC_Init+0x1f4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d022      	beq.n	8003c62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6899      	ldr	r1, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6899      	ldr	r1, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	609a      	str	r2, [r3, #8]
 8003c60:	e00f      	b.n	8003c82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c80:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0202 	bic.w	r2, r2, #2
 8003c90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	7e1b      	ldrb	r3, [r3, #24]
 8003c9c:	005a      	lsls	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01b      	beq.n	8003ce8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685a      	ldr	r2, [r3, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cbe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	035a      	lsls	r2, r3, #13
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	e007      	b.n	8003cf8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cf6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	051a      	lsls	r2, r3, #20
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6899      	ldr	r1, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d3a:	025a      	lsls	r2, r3, #9
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6899      	ldr	r1, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	029a      	lsls	r2, r3, #10
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	40012300 	.word	0x40012300
 8003d78:	0f000001 	.word	0x0f000001

08003d7c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d13c      	bne.n	8003e10 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d12b      	bne.n	8003e08 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d127      	bne.n	8003e08 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d006      	beq.n	8003dd4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d119      	bne.n	8003e08 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0220 	bic.w	r2, r2, #32
 8003de2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d105      	bne.n	8003e08 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	f043 0201 	orr.w	r2, r3, #1
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7fd fbd3 	bl	80015b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e0e:	e00e      	b.n	8003e2e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7ff fd84 	bl	800392a <HAL_ADC_ErrorCallback>
}
 8003e22:	e004      	b.n	8003e2e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
}
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e42:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f7fd fb3b 	bl	80014c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2240      	movs	r2, #64	; 0x40
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	f043 0204 	orr.w	r2, r3, #4
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f7ff fd59 	bl	800392a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	60d3      	str	r3, [r2, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ecc:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0a1b      	lsrs	r3, r3, #8
 8003ed2:	f003 0307 	and.w	r3, r3, #7
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00

08003ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	db0b      	blt.n	8003f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	f003 021f 	and.w	r2, r3, #31
 8003efc:	4907      	ldr	r1, [pc, #28]	; (8003f1c <__NVIC_EnableIRQ+0x38>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2001      	movs	r0, #1
 8003f06:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	e000e100 	.word	0xe000e100

08003f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	6039      	str	r1, [r7, #0]
 8003f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	db0a      	blt.n	8003f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	490c      	ldr	r1, [pc, #48]	; (8003f6c <__NVIC_SetPriority+0x4c>)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	0112      	lsls	r2, r2, #4
 8003f40:	b2d2      	uxtb	r2, r2
 8003f42:	440b      	add	r3, r1
 8003f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f48:	e00a      	b.n	8003f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4908      	ldr	r1, [pc, #32]	; (8003f70 <__NVIC_SetPriority+0x50>)
 8003f50:	79fb      	ldrb	r3, [r7, #7]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	3b04      	subs	r3, #4
 8003f58:	0112      	lsls	r2, r2, #4
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	761a      	strb	r2, [r3, #24]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000e100 	.word	0xe000e100
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b089      	sub	sp, #36	; 0x24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	bf28      	it	cs
 8003f92:	2304      	movcs	r3, #4
 8003f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	2b06      	cmp	r3, #6
 8003f9c:	d902      	bls.n	8003fa4 <NVIC_EncodePriority+0x30>
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3b03      	subs	r3, #3
 8003fa2:	e000      	b.n	8003fa6 <NVIC_EncodePriority+0x32>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43da      	mvns	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	401a      	ands	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	43d9      	mvns	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fcc:	4313      	orrs	r3, r2
         );
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3724      	adds	r7, #36	; 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ff4c 	bl	8003e80 <__NVIC_SetPriorityGrouping>
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004002:	f7ff ff61 	bl	8003ec8 <__NVIC_GetPriorityGrouping>
 8004006:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	6978      	ldr	r0, [r7, #20]
 800400e:	f7ff ffb1 	bl	8003f74 <NVIC_EncodePriority>
 8004012:	4602      	mov	r2, r0
 8004014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff ff80 	bl	8003f20 <__NVIC_SetPriority>
}
 8004020:	bf00      	nop
 8004022:	3718      	adds	r7, #24
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff ff54 	bl	8003ee4 <__NVIC_EnableIRQ>
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e014      	b.n	8004080 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	791b      	ldrb	r3, [r3, #4]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fe fc6e 	bl	8002948 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	795b      	ldrb	r3, [r3, #5]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d101      	bne.n	80040aa <HAL_DAC_Start_DMA+0x22>
 80040a6:	2302      	movs	r3, #2
 80040a8:	e0ab      	b.n	8004202 <HAL_DAC_Start_DMA+0x17a>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2202      	movs	r2, #2
 80040b4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d12f      	bne.n	800411c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a52      	ldr	r2, [pc, #328]	; (800420c <HAL_DAC_Start_DMA+0x184>)
 80040c2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4a51      	ldr	r2, [pc, #324]	; (8004210 <HAL_DAC_Start_DMA+0x188>)
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4a50      	ldr	r2, [pc, #320]	; (8004214 <HAL_DAC_Start_DMA+0x18c>)
 80040d2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040e2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d013      	beq.n	8004112 <HAL_DAC_Start_DMA+0x8a>
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	2b08      	cmp	r3, #8
 80040ee:	d845      	bhi.n	800417c <HAL_DAC_Start_DMA+0xf4>
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_DAC_Start_DMA+0x76>
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	2b04      	cmp	r3, #4
 80040fa:	d005      	beq.n	8004108 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80040fc:	e03e      	b.n	800417c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3308      	adds	r3, #8
 8004104:	613b      	str	r3, [r7, #16]
        break;
 8004106:	e03c      	b.n	8004182 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	613b      	str	r3, [r7, #16]
        break;
 8004110:	e037      	b.n	8004182 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3310      	adds	r3, #16
 8004118:	613b      	str	r3, [r7, #16]
        break;
 800411a:	e032      	b.n	8004182 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4a3d      	ldr	r2, [pc, #244]	; (8004218 <HAL_DAC_Start_DMA+0x190>)
 8004122:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a3c      	ldr	r2, [pc, #240]	; (800421c <HAL_DAC_Start_DMA+0x194>)
 800412a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	4a3b      	ldr	r2, [pc, #236]	; (8004220 <HAL_DAC_Start_DMA+0x198>)
 8004132:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004142:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	2b08      	cmp	r3, #8
 8004148:	d013      	beq.n	8004172 <HAL_DAC_Start_DMA+0xea>
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d817      	bhi.n	8004180 <HAL_DAC_Start_DMA+0xf8>
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_DAC_Start_DMA+0xd6>
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	2b04      	cmp	r3, #4
 800415a:	d005      	beq.n	8004168 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800415c:	e010      	b.n	8004180 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3314      	adds	r3, #20
 8004164:	613b      	str	r3, [r7, #16]
        break;
 8004166:	e00c      	b.n	8004182 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3318      	adds	r3, #24
 800416e:	613b      	str	r3, [r7, #16]
        break;
 8004170:	e007      	b.n	8004182 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	331c      	adds	r3, #28
 8004178:	613b      	str	r3, [r7, #16]
        break;
 800417a:	e002      	b.n	8004182 <HAL_DAC_Start_DMA+0xfa>
        break;
 800417c:	bf00      	nop
 800417e:	e000      	b.n	8004182 <HAL_DAC_Start_DMA+0xfa>
        break;
 8004180:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d111      	bne.n	80041ac <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004196:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6898      	ldr	r0, [r3, #8]
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	f000 fa87 	bl	80046b4 <HAL_DMA_Start_IT>
 80041a6:	4603      	mov	r3, r0
 80041a8:	75fb      	strb	r3, [r7, #23]
 80041aa:	e010      	b.n	80041ce <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80041ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	68d8      	ldr	r0, [r3, #12]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	f000 fa75 	bl	80046b4 <HAL_DMA_Start_IT>
 80041ca:	4603      	mov	r3, r0
 80041cc:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10c      	bne.n	80041f4 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6819      	ldr	r1, [r3, #0]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 0310 	and.w	r3, r3, #16
 80041e6:	2201      	movs	r2, #1
 80041e8:	409a      	lsls	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	e005      	b.n	8004200 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f043 0204 	orr.w	r2, r3, #4
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004200:	7dfb      	ldrb	r3, [r7, #23]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3718      	adds	r7, #24
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	08004443 	.word	0x08004443
 8004210:	08004465 	.word	0x08004465
 8004214:	08004481 	.word	0x08004481
 8004218:	080044eb 	.word	0x080044eb
 800421c:	0800450d 	.word	0x0800450d
 8004220:	08004529 	.word	0x08004529

08004224 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6819      	ldr	r1, [r3, #0]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	43da      	mvns	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	400a      	ands	r2, r1
 800424a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6819      	ldr	r1, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	2201      	movs	r2, #1
 800425a:	fa02 f303 	lsl.w	r3, r2, r3
 800425e:	43da      	mvns	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	400a      	ands	r2, r1
 8004266:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10d      	bne.n	800428a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fa76 	bl	8004764 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	e00c      	b.n	80042a4 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fa68 	bl	8004764 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80042a2:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ca:	d120      	bne.n	800430e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042da:	d118      	bne.n	800430e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2204      	movs	r2, #4
 80042e0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	f043 0201 	orr.w	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004306:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f841 	bl	8004390 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800431c:	d120      	bne.n	8004360 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800432c:	d118      	bne.n	8004360 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2204      	movs	r2, #4
 8004332:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f043 0202 	orr.w	r2, r3, #2
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004348:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004358:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8bb 	bl	80044d6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004398:	bf00      	nop
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	795b      	ldrb	r3, [r3, #5]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_DAC_ConfigChannel+0x18>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e03c      	b.n	8004436 <HAL_DAC_ConfigChannel+0x92>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2202      	movs	r2, #2
 80043c6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f003 0310 	and.w	r3, r3, #16
 80043d6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	4013      	ands	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	fa02 f303 	lsl.w	r3, r2, r3
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6819      	ldr	r1, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	22c0      	movs	r2, #192	; 0xc0
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	43da      	mvns	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	400a      	ands	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2201      	movs	r2, #1
 800442c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f7fd f873 	bl	800153c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	711a      	strb	r2, [r3, #4]
}
 800445c:	bf00      	nop
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f7ff ff78 	bl	8004368 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f043 0204 	orr.w	r2, r3, #4
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff ff6e 	bl	800437c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2201      	movs	r2, #1
 80044a4:	711a      	strb	r2, [r3, #4]
}
 80044a6:	bf00      	nop
 80044a8:	3710      	adds	r7, #16
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7fd f83d 	bl	8001578 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	711a      	strb	r2, [r3, #4]
}
 8004504:	bf00      	nop
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f7ff ffc7 	bl	80044ae <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f043 0204 	orr.w	r2, r3, #4
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff ffbd 	bl	80044c2 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2201      	movs	r2, #1
 800454c:	711a      	strb	r2, [r3, #4]
}
 800454e:	bf00      	nop
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004564:	f7fe ff16 	bl	8003394 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e099      	b.n	80046a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2202      	movs	r2, #2
 8004578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0201 	bic.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004594:	e00f      	b.n	80045b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004596:	f7fe fefd 	bl	8003394 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d908      	bls.n	80045b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2220      	movs	r2, #32
 80045a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2203      	movs	r2, #3
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e078      	b.n	80046a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e8      	bne.n	8004596 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	4b38      	ldr	r3, [pc, #224]	; (80046b0 <HAL_DMA_Init+0x158>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	2b04      	cmp	r3, #4
 800460e:	d107      	bne.n	8004620 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	4313      	orrs	r3, r2
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f023 0307 	bic.w	r3, r3, #7
 8004636:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004646:	2b04      	cmp	r3, #4
 8004648:	d117      	bne.n	800467a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00e      	beq.n	800467a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 fb1b 	bl	8004c98 <DMA_CheckFifoParam>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2240      	movs	r2, #64	; 0x40
 800466c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004676:	2301      	movs	r3, #1
 8004678:	e016      	b.n	80046a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fad2 	bl	8004c2c <DMA_CalcBaseAndBitshift>
 8004688:	4603      	mov	r3, r0
 800468a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004690:	223f      	movs	r2, #63	; 0x3f
 8004692:	409a      	lsls	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	f010803f 	.word	0xf010803f

080046b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d101      	bne.n	80046da <HAL_DMA_Start_IT+0x26>
 80046d6:	2302      	movs	r3, #2
 80046d8:	e040      	b.n	800475c <HAL_DMA_Start_IT+0xa8>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d12f      	bne.n	800474e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2202      	movs	r2, #2
 80046f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 fa64 	bl	8004bd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470c:	223f      	movs	r2, #63	; 0x3f
 800470e:	409a      	lsls	r2, r3
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f042 0216 	orr.w	r2, r2, #22
 8004722:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0208 	orr.w	r2, r2, #8
 800473a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	e005      	b.n	800475a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004756:	2302      	movs	r3, #2
 8004758:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800475a:	7dfb      	ldrb	r3, [r7, #23]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004770:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004772:	f7fe fe0f 	bl	8003394 <HAL_GetTick>
 8004776:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d008      	beq.n	8004796 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2280      	movs	r2, #128	; 0x80
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e052      	b.n	800483c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0216 	bic.w	r2, r2, #22
 80047a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d103      	bne.n	80047c6 <HAL_DMA_Abort+0x62>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 0208 	bic.w	r2, r2, #8
 80047d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0201 	bic.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047e6:	e013      	b.n	8004810 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047e8:	f7fe fdd4 	bl	8003394 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d90c      	bls.n	8004810 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2203      	movs	r2, #3
 8004800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e015      	b.n	800483c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1e4      	bne.n	80047e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	223f      	movs	r2, #63	; 0x3f
 8004824:	409a      	lsls	r2, r3
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d004      	beq.n	8004862 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2280      	movs	r2, #128	; 0x80
 800485c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e00c      	b.n	800487c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2205      	movs	r2, #5
 8004866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004894:	4b8e      	ldr	r3, [pc, #568]	; (8004ad0 <HAL_DMA_IRQHandler+0x248>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a8e      	ldr	r2, [pc, #568]	; (8004ad4 <HAL_DMA_IRQHandler+0x24c>)
 800489a:	fba2 2303 	umull	r2, r3, r2, r3
 800489e:	0a9b      	lsrs	r3, r3, #10
 80048a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b2:	2208      	movs	r2, #8
 80048b4:	409a      	lsls	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01a      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d013      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 0204 	bic.w	r2, r2, #4
 80048da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e0:	2208      	movs	r2, #8
 80048e2:	409a      	lsls	r2, r3
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ec:	f043 0201 	orr.w	r2, r3, #1
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f8:	2201      	movs	r2, #1
 80048fa:	409a      	lsls	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4013      	ands	r3, r2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d012      	beq.n	800492a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004916:	2201      	movs	r2, #1
 8004918:	409a      	lsls	r2, r3
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	f043 0202 	orr.w	r2, r3, #2
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492e:	2204      	movs	r2, #4
 8004930:	409a      	lsls	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4013      	ands	r3, r2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d012      	beq.n	8004960 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00b      	beq.n	8004960 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494c:	2204      	movs	r2, #4
 800494e:	409a      	lsls	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004958:	f043 0204 	orr.w	r2, r3, #4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004964:	2210      	movs	r2, #16
 8004966:	409a      	lsls	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4013      	ands	r3, r2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d043      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d03c      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004982:	2210      	movs	r2, #16
 8004984:	409a      	lsls	r2, r3
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d018      	beq.n	80049ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d108      	bne.n	80049b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d024      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	4798      	blx	r3
 80049b6:	e01f      	b.n	80049f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01b      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	4798      	blx	r3
 80049c8:	e016      	b.n	80049f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d107      	bne.n	80049e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0208 	bic.w	r2, r2, #8
 80049e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049fc:	2220      	movs	r2, #32
 80049fe:	409a      	lsls	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4013      	ands	r3, r2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 808f 	beq.w	8004b28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0310 	and.w	r3, r3, #16
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 8087 	beq.w	8004b28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1e:	2220      	movs	r2, #32
 8004a20:	409a      	lsls	r2, r3
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	d136      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0216 	bic.w	r2, r2, #22
 8004a40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <HAL_DMA_IRQHandler+0x1da>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d007      	beq.n	8004a72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0208 	bic.w	r2, r2, #8
 8004a70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a76:	223f      	movs	r2, #63	; 0x3f
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d07e      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
        }
        return;
 8004a9e:	e079      	b.n	8004b94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01d      	beq.n	8004aea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10d      	bne.n	8004ad8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d031      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4798      	blx	r3
 8004acc:	e02c      	b.n	8004b28 <HAL_DMA_IRQHandler+0x2a0>
 8004ace:	bf00      	nop
 8004ad0:	20000000 	.word	0x20000000
 8004ad4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d023      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
 8004ae8:	e01e      	b.n	8004b28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10f      	bne.n	8004b18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f022 0210 	bic.w	r2, r2, #16
 8004b06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d032      	beq.n	8004b96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d022      	beq.n	8004b82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2205      	movs	r2, #5
 8004b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0201 	bic.w	r2, r2, #1
 8004b52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	3301      	adds	r3, #1
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d307      	bcc.n	8004b70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f2      	bne.n	8004b54 <HAL_DMA_IRQHandler+0x2cc>
 8004b6e:	e000      	b.n	8004b72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	4798      	blx	r3
 8004b92:	e000      	b.n	8004b96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b94:	bf00      	nop
    }
  }
}
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004baa:	b2db      	uxtb	r3, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b40      	cmp	r3, #64	; 0x40
 8004bfc:	d108      	bne.n	8004c10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c0e:	e007      	b.n	8004c20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
}
 8004c20:	bf00      	nop
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	3b10      	subs	r3, #16
 8004c3c:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <DMA_CalcBaseAndBitshift+0x64>)
 8004c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c42:	091b      	lsrs	r3, r3, #4
 8004c44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c46:	4a13      	ldr	r2, [pc, #76]	; (8004c94 <DMA_CalcBaseAndBitshift+0x68>)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d909      	bls.n	8004c6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c62:	f023 0303 	bic.w	r3, r3, #3
 8004c66:	1d1a      	adds	r2, r3, #4
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	659a      	str	r2, [r3, #88]	; 0x58
 8004c6c:	e007      	b.n	8004c7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c76:	f023 0303 	bic.w	r3, r3, #3
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	aaaaaaab 	.word	0xaaaaaaab
 8004c94:	0800cb44 	.word	0x0800cb44

08004c98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d11f      	bne.n	8004cf2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d856      	bhi.n	8004d66 <DMA_CheckFifoParam+0xce>
 8004cb8:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <DMA_CheckFifoParam+0x28>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004cd1 	.word	0x08004cd1
 8004cc4:	08004ce3 	.word	0x08004ce3
 8004cc8:	08004cd1 	.word	0x08004cd1
 8004ccc:	08004d67 	.word	0x08004d67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d046      	beq.n	8004d6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce0:	e043      	b.n	8004d6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cea:	d140      	bne.n	8004d6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf0:	e03d      	b.n	8004d6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfa:	d121      	bne.n	8004d40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d837      	bhi.n	8004d72 <DMA_CheckFifoParam+0xda>
 8004d02:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <DMA_CheckFifoParam+0x70>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d19 	.word	0x08004d19
 8004d0c:	08004d1f 	.word	0x08004d1f
 8004d10:	08004d19 	.word	0x08004d19
 8004d14:	08004d31 	.word	0x08004d31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1c:	e030      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d025      	beq.n	8004d76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d2e:	e022      	b.n	8004d76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d38:	d11f      	bne.n	8004d7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d3e:	e01c      	b.n	8004d7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d903      	bls.n	8004d4e <DMA_CheckFifoParam+0xb6>
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d003      	beq.n	8004d54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d4c:	e018      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
      break;
 8004d52:	e015      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      break;
 8004d64:	e00b      	b.n	8004d7e <DMA_CheckFifoParam+0xe6>
      break;
 8004d66:	bf00      	nop
 8004d68:	e00a      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e008      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d6e:	bf00      	nop
 8004d70:	e006      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d72:	bf00      	nop
 8004d74:	e004      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d76:	bf00      	nop
 8004d78:	e002      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d7a:	bf00      	nop
 8004d7c:	e000      	b.n	8004d80 <DMA_CheckFifoParam+0xe8>
      break;
 8004d7e:	bf00      	nop
    }
  } 
  
  return status; 
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop

08004d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b089      	sub	sp, #36	; 0x24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004da6:	2300      	movs	r3, #0
 8004da8:	61fb      	str	r3, [r7, #28]
 8004daa:	e16b      	b.n	8005084 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dac:	2201      	movs	r2, #1
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	f040 815a 	bne.w	800507e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d005      	beq.n	8004de2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d130      	bne.n	8004e44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	2203      	movs	r2, #3
 8004dee:	fa02 f303 	lsl.w	r3, r2, r3
 8004df2:	43db      	mvns	r3, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4013      	ands	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e18:	2201      	movs	r2, #1
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	091b      	lsrs	r3, r3, #4
 8004e2e:	f003 0201 	and.w	r2, r3, #1
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f003 0303 	and.w	r3, r3, #3
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d017      	beq.n	8004e80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d123      	bne.n	8004ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	08da      	lsrs	r2, r3, #3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3208      	adds	r2, #8
 8004e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	f003 0307 	and.w	r3, r3, #7
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	220f      	movs	r2, #15
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	691a      	ldr	r2, [r3, #16]
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	08da      	lsrs	r2, r3, #3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3208      	adds	r2, #8
 8004ece:	69b9      	ldr	r1, [r7, #24]
 8004ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	005b      	lsls	r3, r3, #1
 8004ede:	2203      	movs	r2, #3
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f003 0203 	and.w	r2, r3, #3
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 80b4 	beq.w	800507e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	4b60      	ldr	r3, [pc, #384]	; (800509c <HAL_GPIO_Init+0x30c>)
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	4a5f      	ldr	r2, [pc, #380]	; (800509c <HAL_GPIO_Init+0x30c>)
 8004f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f24:	6453      	str	r3, [r2, #68]	; 0x44
 8004f26:	4b5d      	ldr	r3, [pc, #372]	; (800509c <HAL_GPIO_Init+0x30c>)
 8004f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f32:	4a5b      	ldr	r2, [pc, #364]	; (80050a0 <HAL_GPIO_Init+0x310>)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	089b      	lsrs	r3, r3, #2
 8004f38:	3302      	adds	r3, #2
 8004f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	220f      	movs	r2, #15
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	4013      	ands	r3, r2
 8004f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a52      	ldr	r2, [pc, #328]	; (80050a4 <HAL_GPIO_Init+0x314>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d02b      	beq.n	8004fb6 <HAL_GPIO_Init+0x226>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a51      	ldr	r2, [pc, #324]	; (80050a8 <HAL_GPIO_Init+0x318>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d025      	beq.n	8004fb2 <HAL_GPIO_Init+0x222>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a50      	ldr	r2, [pc, #320]	; (80050ac <HAL_GPIO_Init+0x31c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d01f      	beq.n	8004fae <HAL_GPIO_Init+0x21e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a4f      	ldr	r2, [pc, #316]	; (80050b0 <HAL_GPIO_Init+0x320>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d019      	beq.n	8004faa <HAL_GPIO_Init+0x21a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a4e      	ldr	r2, [pc, #312]	; (80050b4 <HAL_GPIO_Init+0x324>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <HAL_GPIO_Init+0x216>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a4d      	ldr	r2, [pc, #308]	; (80050b8 <HAL_GPIO_Init+0x328>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00d      	beq.n	8004fa2 <HAL_GPIO_Init+0x212>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a4c      	ldr	r2, [pc, #304]	; (80050bc <HAL_GPIO_Init+0x32c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d007      	beq.n	8004f9e <HAL_GPIO_Init+0x20e>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a4b      	ldr	r2, [pc, #300]	; (80050c0 <HAL_GPIO_Init+0x330>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d101      	bne.n	8004f9a <HAL_GPIO_Init+0x20a>
 8004f96:	2307      	movs	r3, #7
 8004f98:	e00e      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	e00c      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004f9e:	2306      	movs	r3, #6
 8004fa0:	e00a      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004fa2:	2305      	movs	r3, #5
 8004fa4:	e008      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004fa6:	2304      	movs	r3, #4
 8004fa8:	e006      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004faa:	2303      	movs	r3, #3
 8004fac:	e004      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e002      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <HAL_GPIO_Init+0x228>
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	f002 0203 	and.w	r2, r2, #3
 8004fbe:	0092      	lsls	r2, r2, #2
 8004fc0:	4093      	lsls	r3, r2
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fc8:	4935      	ldr	r1, [pc, #212]	; (80050a0 <HAL_GPIO_Init+0x310>)
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	089b      	lsrs	r3, r3, #2
 8004fce:	3302      	adds	r3, #2
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fd6:	4b3b      	ldr	r3, [pc, #236]	; (80050c4 <HAL_GPIO_Init+0x334>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	43db      	mvns	r3, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ffa:	4a32      	ldr	r2, [pc, #200]	; (80050c4 <HAL_GPIO_Init+0x334>)
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005000:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <HAL_GPIO_Init+0x334>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005024:	4a27      	ldr	r2, [pc, #156]	; (80050c4 <HAL_GPIO_Init+0x334>)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800502a:	4b26      	ldr	r3, [pc, #152]	; (80050c4 <HAL_GPIO_Init+0x334>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	43db      	mvns	r3, r3
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	4013      	ands	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800504e:	4a1d      	ldr	r2, [pc, #116]	; (80050c4 <HAL_GPIO_Init+0x334>)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005054:	4b1b      	ldr	r3, [pc, #108]	; (80050c4 <HAL_GPIO_Init+0x334>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	43db      	mvns	r3, r3
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	4013      	ands	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005078:	4a12      	ldr	r2, [pc, #72]	; (80050c4 <HAL_GPIO_Init+0x334>)
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3301      	adds	r3, #1
 8005082:	61fb      	str	r3, [r7, #28]
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b0f      	cmp	r3, #15
 8005088:	f67f ae90 	bls.w	8004dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800508c:	bf00      	nop
 800508e:	bf00      	nop
 8005090:	3724      	adds	r7, #36	; 0x24
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800
 80050a0:	40013800 	.word	0x40013800
 80050a4:	40020000 	.word	0x40020000
 80050a8:	40020400 	.word	0x40020400
 80050ac:	40020800 	.word	0x40020800
 80050b0:	40020c00 	.word	0x40020c00
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40021400 	.word	0x40021400
 80050bc:	40021800 	.word	0x40021800
 80050c0:	40021c00 	.word	0x40021c00
 80050c4:	40013c00 	.word	0x40013c00

080050c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	807b      	strh	r3, [r7, #2]
 80050d4:	4613      	mov	r3, r2
 80050d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050d8:	787b      	ldrb	r3, [r7, #1]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050de:	887a      	ldrh	r2, [r7, #2]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050e4:	e003      	b.n	80050ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050e6:	887b      	ldrh	r3, [r7, #2]
 80050e8:	041a      	lsls	r2, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	619a      	str	r2, [r3, #24]
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	4603      	mov	r3, r0
 8005104:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005108:	695a      	ldr	r2, [r3, #20]
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	4013      	ands	r3, r2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d006      	beq.n	8005120 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005112:	4a05      	ldr	r2, [pc, #20]	; (8005128 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005114:	88fb      	ldrh	r3, [r7, #6]
 8005116:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005118:	88fb      	ldrh	r3, [r7, #6]
 800511a:	4618      	mov	r0, r3
 800511c:	f7fc f946 	bl	80013ac <HAL_GPIO_EXTI_Callback>
  }
}
 8005120:	bf00      	nop
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40013c00 	.word	0x40013c00

0800512c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e12b      	b.n	8005396 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d106      	bne.n	8005158 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fd fcae 	bl	8002ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2224      	movs	r2, #36	; 0x24
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800517e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800518e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005190:	f002 ff3e 	bl	8008010 <HAL_RCC_GetPCLK1Freq>
 8005194:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	4a81      	ldr	r2, [pc, #516]	; (80053a0 <HAL_I2C_Init+0x274>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d807      	bhi.n	80051b0 <HAL_I2C_Init+0x84>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a80      	ldr	r2, [pc, #512]	; (80053a4 <HAL_I2C_Init+0x278>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	bf94      	ite	ls
 80051a8:	2301      	movls	r3, #1
 80051aa:	2300      	movhi	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	e006      	b.n	80051be <HAL_I2C_Init+0x92>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a7d      	ldr	r2, [pc, #500]	; (80053a8 <HAL_I2C_Init+0x27c>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	bf94      	ite	ls
 80051b8:	2301      	movls	r3, #1
 80051ba:	2300      	movhi	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e0e7      	b.n	8005396 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4a78      	ldr	r2, [pc, #480]	; (80053ac <HAL_I2C_Init+0x280>)
 80051ca:	fba2 2303 	umull	r2, r3, r2, r3
 80051ce:	0c9b      	lsrs	r3, r3, #18
 80051d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	4a6a      	ldr	r2, [pc, #424]	; (80053a0 <HAL_I2C_Init+0x274>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d802      	bhi.n	8005200 <HAL_I2C_Init+0xd4>
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	3301      	adds	r3, #1
 80051fe:	e009      	b.n	8005214 <HAL_I2C_Init+0xe8>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005206:	fb02 f303 	mul.w	r3, r2, r3
 800520a:	4a69      	ldr	r2, [pc, #420]	; (80053b0 <HAL_I2C_Init+0x284>)
 800520c:	fba2 2303 	umull	r2, r3, r2, r3
 8005210:	099b      	lsrs	r3, r3, #6
 8005212:	3301      	adds	r3, #1
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	430b      	orrs	r3, r1
 800521a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005226:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	495c      	ldr	r1, [pc, #368]	; (80053a0 <HAL_I2C_Init+0x274>)
 8005230:	428b      	cmp	r3, r1
 8005232:	d819      	bhi.n	8005268 <HAL_I2C_Init+0x13c>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1e59      	subs	r1, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005242:	1c59      	adds	r1, r3, #1
 8005244:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005248:	400b      	ands	r3, r1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_I2C_Init+0x138>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	1e59      	subs	r1, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	fbb1 f3f3 	udiv	r3, r1, r3
 800525c:	3301      	adds	r3, #1
 800525e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005262:	e051      	b.n	8005308 <HAL_I2C_Init+0x1dc>
 8005264:	2304      	movs	r3, #4
 8005266:	e04f      	b.n	8005308 <HAL_I2C_Init+0x1dc>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d111      	bne.n	8005294 <HAL_I2C_Init+0x168>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1e58      	subs	r0, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6859      	ldr	r1, [r3, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	440b      	add	r3, r1
 800527e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005282:	3301      	adds	r3, #1
 8005284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	e012      	b.n	80052ba <HAL_I2C_Init+0x18e>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1e58      	subs	r0, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6859      	ldr	r1, [r3, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	0099      	lsls	r1, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052aa:	3301      	adds	r3, #1
 80052ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	bf0c      	ite	eq
 80052b4:	2301      	moveq	r3, #1
 80052b6:	2300      	movne	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_I2C_Init+0x196>
 80052be:	2301      	movs	r3, #1
 80052c0:	e022      	b.n	8005308 <HAL_I2C_Init+0x1dc>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10e      	bne.n	80052e8 <HAL_I2C_Init+0x1bc>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	1e58      	subs	r0, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6859      	ldr	r1, [r3, #4]
 80052d2:	460b      	mov	r3, r1
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	440b      	add	r3, r1
 80052d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80052dc:	3301      	adds	r3, #1
 80052de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052e6:	e00f      	b.n	8005308 <HAL_I2C_Init+0x1dc>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1e58      	subs	r0, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6859      	ldr	r1, [r3, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	0099      	lsls	r1, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80052fe:	3301      	adds	r3, #1
 8005300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005308:	6879      	ldr	r1, [r7, #4]
 800530a:	6809      	ldr	r1, [r1, #0]
 800530c:	4313      	orrs	r3, r2
 800530e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69da      	ldr	r2, [r3, #28]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005336:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6911      	ldr	r1, [r2, #16]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68d2      	ldr	r2, [r2, #12]
 8005342:	4311      	orrs	r1, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6812      	ldr	r2, [r2, #0]
 8005348:	430b      	orrs	r3, r1
 800534a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	000186a0 	.word	0x000186a0
 80053a4:	001e847f 	.word	0x001e847f
 80053a8:	003d08ff 	.word	0x003d08ff
 80053ac:	431bde83 	.word	0x431bde83
 80053b0:	10624dd3 	.word	0x10624dd3

080053b4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08c      	sub	sp, #48	; 0x30
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	4608      	mov	r0, r1
 80053be:	4611      	mov	r1, r2
 80053c0:	461a      	mov	r2, r3
 80053c2:	4603      	mov	r3, r0
 80053c4:	817b      	strh	r3, [r7, #10]
 80053c6:	460b      	mov	r3, r1
 80053c8:	813b      	strh	r3, [r7, #8]
 80053ca:	4613      	mov	r3, r2
 80053cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053ce:	f7fd ffe1 	bl	8003394 <HAL_GetTick>
 80053d2:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	f040 8176 	bne.w	80056d2 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80053e6:	4b95      	ldr	r3, [pc, #596]	; (800563c <HAL_I2C_Mem_Read_DMA+0x288>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	08db      	lsrs	r3, r3, #3
 80053ec:	4a94      	ldr	r2, [pc, #592]	; (8005640 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	0a1a      	lsrs	r2, r3, #8
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	009a      	lsls	r2, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	3b01      	subs	r3, #1
 8005404:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d116      	bne.n	800543a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f043 0220 	orr.w	r2, r3, #32
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e14c      	b.n	80056d4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b02      	cmp	r3, #2
 8005446:	d0db      	beq.n	8005400 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d101      	bne.n	8005456 <HAL_I2C_Mem_Read_DMA+0xa2>
 8005452:	2302      	movs	r3, #2
 8005454:	e13e      	b.n	80056d4 <HAL_I2C_Mem_Read_DMA+0x320>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b01      	cmp	r3, #1
 800546a:	d007      	beq.n	800547c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0201 	orr.w	r2, r2, #1
 800547a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800548a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2222      	movs	r2, #34	; 0x22
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2240      	movs	r2, #64	; 0x40
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80054ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4a62      	ldr	r2, [pc, #392]	; (8005644 <HAL_I2C_Mem_Read_DMA+0x290>)
 80054bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80054be:	897a      	ldrh	r2, [r7, #10]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 80054c4:	893a      	ldrh	r2, [r7, #8]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80054ca:	88fa      	ldrh	r2, [r7, #6]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 80cc 	beq.w	8005678 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d02d      	beq.n	8005544 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	4a56      	ldr	r2, [pc, #344]	; (8005648 <HAL_I2C_Mem_Read_DMA+0x294>)
 80054ee:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	4a55      	ldr	r2, [pc, #340]	; (800564c <HAL_I2C_Mem_Read_DMA+0x298>)
 80054f6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fc:	2200      	movs	r2, #0
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	2200      	movs	r2, #0
 8005506:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550c:	2200      	movs	r2, #0
 800550e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	2200      	movs	r2, #0
 8005516:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3310      	adds	r3, #16
 8005522:	4619      	mov	r1, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	461a      	mov	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552e:	f7ff f8c1 	bl	80046b4 <HAL_DMA_Start_IT>
 8005532:	4603      	mov	r3, r0
 8005534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800553c:	2b00      	cmp	r3, #0
 800553e:	f040 8087 	bne.w	8005650 <HAL_I2C_Mem_Read_DMA+0x29c>
 8005542:	e013      	b.n	800556c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0b3      	b.n	80056d4 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800556c:	88f8      	ldrh	r0, [r7, #6]
 800556e:	893a      	ldrh	r2, [r7, #8]
 8005570:	8979      	ldrh	r1, [r7, #10]
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	9301      	str	r3, [sp, #4]
 8005576:	2323      	movs	r3, #35	; 0x23
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	4603      	mov	r3, r0
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f001 fca1 	bl	8006ec4 <I2C_RequestMemoryRead>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d023      	beq.n	80055d0 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff f959 	bl	8004844 <HAL_DMA_Abort_IT>
 8005592:	4603      	mov	r3, r0
 8005594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	2200      	movs	r2, #0
 800559e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ae:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e081      	b.n	80056d4 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d108      	bne.n	80055ea <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	e007      	b.n	80055fa <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fa:	2300      	movs	r3, #0
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	61bb      	str	r3, [r7, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	61bb      	str	r3, [r7, #24]
 800560e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005626:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005636:	605a      	str	r2, [r3, #4]
 8005638:	e049      	b.n	80056ce <HAL_I2C_Mem_Read_DMA+0x31a>
 800563a:	bf00      	nop
 800563c:	20000000 	.word	0x20000000
 8005640:	14f8b589 	.word	0x14f8b589
 8005644:	ffff0000 	.word	0xffff0000
 8005648:	08007095 	.word	0x08007095
 800564c:	0800723f 	.word	0x0800723f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005664:	f043 0210 	orr.w	r2, r3, #16
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e02d      	b.n	80056d4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005678:	88f8      	ldrh	r0, [r7, #6]
 800567a:	893a      	ldrh	r2, [r7, #8]
 800567c:	8979      	ldrh	r1, [r7, #10]
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	2323      	movs	r3, #35	; 0x23
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	4603      	mov	r3, r0
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f001 fc1b 	bl	8006ec4 <I2C_RequestMemoryRead>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e01d      	b.n	80056d4 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005698:	2300      	movs	r3, #0
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056bc:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	e000      	b.n	80056d4 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 80056d2:	2302      	movs	r3, #2
  }
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3728      	adds	r7, #40	; 0x28
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08a      	sub	sp, #40	; 0x28
 80056e0:	af02      	add	r7, sp, #8
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	607a      	str	r2, [r7, #4]
 80056e6:	603b      	str	r3, [r7, #0]
 80056e8:	460b      	mov	r3, r1
 80056ea:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80056ec:	f7fd fe52 	bl	8003394 <HAL_GetTick>
 80056f0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b20      	cmp	r3, #32
 8005700:	f040 8111 	bne.w	8005926 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	2319      	movs	r3, #25
 800570a:	2201      	movs	r2, #1
 800570c:	4988      	ldr	r1, [pc, #544]	; (8005930 <HAL_I2C_IsDeviceReady+0x254>)
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f001 fe7a 	bl	8007408 <I2C_WaitOnFlagUntilTimeout>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800571a:	2302      	movs	r3, #2
 800571c:	e104      	b.n	8005928 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_I2C_IsDeviceReady+0x50>
 8005728:	2302      	movs	r3, #2
 800572a:	e0fd      	b.n	8005928 <HAL_I2C_IsDeviceReady+0x24c>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b01      	cmp	r3, #1
 8005740:	d007      	beq.n	8005752 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0201 	orr.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005760:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2224      	movs	r2, #36	; 0x24
 8005766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a70      	ldr	r2, [pc, #448]	; (8005934 <HAL_I2C_IsDeviceReady+0x258>)
 8005774:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005784:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2200      	movs	r2, #0
 800578e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f001 fe38 	bl	8007408 <I2C_WaitOnFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ac:	d103      	bne.n	80057b6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e0b6      	b.n	8005928 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057ba:	897b      	ldrh	r3, [r7, #10]
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	461a      	mov	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80057c8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80057ca:	f7fd fde3 	bl	8003394 <HAL_GetTick>
 80057ce:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b02      	cmp	r3, #2
 80057dc:	bf0c      	ite	eq
 80057de:	2301      	moveq	r3, #1
 80057e0:	2300      	movne	r3, #0
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057f4:	bf0c      	ite	eq
 80057f6:	2301      	moveq	r3, #1
 80057f8:	2300      	movne	r3, #0
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80057fe:	e025      	b.n	800584c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005800:	f7fd fdc8 	bl	8003394 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	683a      	ldr	r2, [r7, #0]
 800580c:	429a      	cmp	r2, r3
 800580e:	d302      	bcc.n	8005816 <HAL_I2C_IsDeviceReady+0x13a>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d103      	bne.n	800581e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	22a0      	movs	r2, #160	; 0xa0
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	2b02      	cmp	r3, #2
 800582a:	bf0c      	ite	eq
 800582c:	2301      	moveq	r3, #1
 800582e:	2300      	movne	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005842:	bf0c      	ite	eq
 8005844:	2301      	moveq	r3, #1
 8005846:	2300      	movne	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2ba0      	cmp	r3, #160	; 0xa0
 8005856:	d005      	beq.n	8005864 <HAL_I2C_IsDeviceReady+0x188>
 8005858:	7dfb      	ldrb	r3, [r7, #23]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d102      	bne.n	8005864 <HAL_I2C_IsDeviceReady+0x188>
 800585e:	7dbb      	ldrb	r3, [r7, #22]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0cd      	beq.n	8005800 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b02      	cmp	r3, #2
 8005878:	d129      	bne.n	80058ce <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005888:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588a:	2300      	movs	r3, #0
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	613b      	str	r3, [r7, #16]
 800589e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	2319      	movs	r3, #25
 80058a6:	2201      	movs	r2, #1
 80058a8:	4921      	ldr	r1, [pc, #132]	; (8005930 <HAL_I2C_IsDeviceReady+0x254>)
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f001 fdac 	bl	8007408 <I2C_WaitOnFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e036      	b.n	8005928 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	e02c      	b.n	8005928 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058dc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058e6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	9300      	str	r3, [sp, #0]
 80058ec:	2319      	movs	r3, #25
 80058ee:	2201      	movs	r2, #1
 80058f0:	490f      	ldr	r1, [pc, #60]	; (8005930 <HAL_I2C_IsDeviceReady+0x254>)
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f001 fd88 	bl	8007408 <I2C_WaitOnFlagUntilTimeout>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e012      	b.n	8005928 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	3301      	adds	r3, #1
 8005906:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	429a      	cmp	r2, r3
 800590e:	f4ff af32 	bcc.w	8005776 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005926:	2302      	movs	r3, #2
  }
}
 8005928:	4618      	mov	r0, r3
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	00100002 	.word	0x00100002
 8005934:	ffff0000 	.word	0xffff0000

08005938 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005950:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005958:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005960:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	2b10      	cmp	r3, #16
 8005966:	d003      	beq.n	8005970 <HAL_I2C_EV_IRQHandler+0x38>
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b40      	cmp	r3, #64	; 0x40
 800596c:	f040 80c1 	bne.w	8005af2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10d      	bne.n	80059a6 <HAL_I2C_EV_IRQHandler+0x6e>
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005990:	d003      	beq.n	800599a <HAL_I2C_EV_IRQHandler+0x62>
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005998:	d101      	bne.n	800599e <HAL_I2C_EV_IRQHandler+0x66>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <HAL_I2C_EV_IRQHandler+0x68>
 800599e:	2300      	movs	r3, #0
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	f000 8132 	beq.w	8005c0a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00c      	beq.n	80059ca <HAL_I2C_EV_IRQHandler+0x92>
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	0a5b      	lsrs	r3, r3, #9
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d006      	beq.n	80059ca <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 fe9c 	bl	80076fa <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fcd2 	bl	800636c <I2C_Master_SB>
 80059c8:	e092      	b.n	8005af0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	08db      	lsrs	r3, r3, #3
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <HAL_I2C_EV_IRQHandler+0xb2>
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	0a5b      	lsrs	r3, r3, #9
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fd48 	bl	8006478 <I2C_Master_ADD10>
 80059e8:	e082      	b.n	8005af0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	085b      	lsrs	r3, r3, #1
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <HAL_I2C_EV_IRQHandler+0xd2>
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	0a5b      	lsrs	r3, r3, #9
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fd62 	bl	80064cc <I2C_Master_ADDR>
 8005a08:	e072      	b.n	8005af0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	089b      	lsrs	r3, r3, #2
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d03b      	beq.n	8005a8e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a24:	f000 80f3 	beq.w	8005c0e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	09db      	lsrs	r3, r3, #7
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00f      	beq.n	8005a54 <HAL_I2C_EV_IRQHandler+0x11c>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	0a9b      	lsrs	r3, r3, #10
 8005a38:	f003 0301 	and.w	r3, r3, #1
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d009      	beq.n	8005a54 <HAL_I2C_EV_IRQHandler+0x11c>
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	089b      	lsrs	r3, r3, #2
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d103      	bne.n	8005a54 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f942 	bl	8005cd6 <I2C_MasterTransmit_TXE>
 8005a52:	e04d      	b.n	8005af0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	089b      	lsrs	r3, r3, #2
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80d6 	beq.w	8005c0e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	0a5b      	lsrs	r3, r3, #9
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 80cf 	beq.w	8005c0e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a70:	7bbb      	ldrb	r3, [r7, #14]
 8005a72:	2b21      	cmp	r3, #33	; 0x21
 8005a74:	d103      	bne.n	8005a7e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f9c9 	bl	8005e0e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a7c:	e0c7      	b.n	8005c0e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	f040 80c4 	bne.w	8005c0e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fa37 	bl	8005efa <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a8c:	e0bf      	b.n	8005c0e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a9c:	f000 80b7 	beq.w	8005c0e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	099b      	lsrs	r3, r3, #6
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00f      	beq.n	8005acc <HAL_I2C_EV_IRQHandler+0x194>
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	0a9b      	lsrs	r3, r3, #10
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <HAL_I2C_EV_IRQHandler+0x194>
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	089b      	lsrs	r3, r3, #2
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d103      	bne.n	8005acc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 faac 	bl	8006022 <I2C_MasterReceive_RXNE>
 8005aca:	e011      	b.n	8005af0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	089b      	lsrs	r3, r3, #2
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 809a 	beq.w	8005c0e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	0a5b      	lsrs	r3, r3, #9
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 8093 	beq.w	8005c0e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fb55 	bl	8006198 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aee:	e08e      	b.n	8005c0e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005af0:	e08d      	b.n	8005c0e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d004      	beq.n	8005b04 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	61fb      	str	r3, [r7, #28]
 8005b02:	e007      	b.n	8005b14 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d012      	beq.n	8005b46 <HAL_I2C_EV_IRQHandler+0x20e>
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	0a5b      	lsrs	r3, r3, #9
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00c      	beq.n	8005b46 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005b3c:	69b9      	ldr	r1, [r7, #24]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 ff13 	bl	800696a <I2C_Slave_ADDR>
 8005b44:	e066      	b.n	8005c14 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d009      	beq.n	8005b66 <HAL_I2C_EV_IRQHandler+0x22e>
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	0a5b      	lsrs	r3, r3, #9
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 ff4e 	bl	8006a00 <I2C_Slave_STOPF>
 8005b64:	e056      	b.n	8005c14 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b66:	7bbb      	ldrb	r3, [r7, #14]
 8005b68:	2b21      	cmp	r3, #33	; 0x21
 8005b6a:	d002      	beq.n	8005b72 <HAL_I2C_EV_IRQHandler+0x23a>
 8005b6c:	7bbb      	ldrb	r3, [r7, #14]
 8005b6e:	2b29      	cmp	r3, #41	; 0x29
 8005b70:	d125      	bne.n	8005bbe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	09db      	lsrs	r3, r3, #7
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00f      	beq.n	8005b9e <HAL_I2C_EV_IRQHandler+0x266>
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	0a9b      	lsrs	r3, r3, #10
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d009      	beq.n	8005b9e <HAL_I2C_EV_IRQHandler+0x266>
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	089b      	lsrs	r3, r3, #2
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d103      	bne.n	8005b9e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fe29 	bl	80067ee <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b9c:	e039      	b.n	8005c12 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	089b      	lsrs	r3, r3, #2
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d033      	beq.n	8005c12 <HAL_I2C_EV_IRQHandler+0x2da>
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	0a5b      	lsrs	r3, r3, #9
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d02d      	beq.n	8005c12 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fe56 	bl	8006868 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bbc:	e029      	b.n	8005c12 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	099b      	lsrs	r3, r3, #6
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00f      	beq.n	8005bea <HAL_I2C_EV_IRQHandler+0x2b2>
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	0a9b      	lsrs	r3, r3, #10
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d009      	beq.n	8005bea <HAL_I2C_EV_IRQHandler+0x2b2>
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	089b      	lsrs	r3, r3, #2
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fe61 	bl	80068aa <I2C_SlaveReceive_RXNE>
 8005be8:	e014      	b.n	8005c14 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	089b      	lsrs	r3, r3, #2
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00e      	beq.n	8005c14 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	0a5b      	lsrs	r3, r3, #9
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fe8f 	bl	8006926 <I2C_SlaveReceive_BTF>
 8005c08:	e004      	b.n	8005c14 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005c0a:	bf00      	nop
 8005c0c:	e002      	b.n	8005c14 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c12:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005c14:	3720      	adds	r7, #32
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	b083      	sub	sp, #12
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
 8005c76:	4613      	mov	r3, r2
 8005c78:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cec:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d150      	bne.n	8005d9e <I2C_MasterTransmit_TXE+0xc8>
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	2b21      	cmp	r3, #33	; 0x21
 8005d00:	d14d      	bne.n	8005d9e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d01d      	beq.n	8005d44 <I2C_MasterTransmit_TXE+0x6e>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b20      	cmp	r3, #32
 8005d0c:	d01a      	beq.n	8005d44 <I2C_MasterTransmit_TXE+0x6e>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d14:	d016      	beq.n	8005d44 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d24:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2211      	movs	r2, #17
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff ff6c 	bl	8005c1a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d42:	e060      	b.n	8005e06 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005d52:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d62:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b40      	cmp	r3, #64	; 0x40
 8005d7c:	d107      	bne.n	8005d8e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff ff87 	bl	8005c9a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d8c:	e03b      	b.n	8005e06 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff ff3f 	bl	8005c1a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d9c:	e033      	b.n	8005e06 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	2b21      	cmp	r3, #33	; 0x21
 8005da2:	d005      	beq.n	8005db0 <I2C_MasterTransmit_TXE+0xda>
 8005da4:	7bbb      	ldrb	r3, [r7, #14]
 8005da6:	2b40      	cmp	r3, #64	; 0x40
 8005da8:	d12d      	bne.n	8005e06 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	2b22      	cmp	r3, #34	; 0x22
 8005dae:	d12a      	bne.n	8005e06 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d108      	bne.n	8005dcc <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005dca:	e01c      	b.n	8005e06 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b40      	cmp	r3, #64	; 0x40
 8005dd6:	d103      	bne.n	8005de0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f88e 	bl	8005efa <I2C_MemoryTransmit_TXE_BTF>
}
 8005dde:	e012      	b.n	8005e06 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	781a      	ldrb	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005e04:	e7ff      	b.n	8005e06 <I2C_MasterTransmit_TXE+0x130>
 8005e06:	bf00      	nop
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b21      	cmp	r3, #33	; 0x21
 8005e26:	d164      	bne.n	8005ef2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d012      	beq.n	8005e58 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	781a      	ldrb	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005e56:	e04c      	b.n	8005ef2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2b08      	cmp	r3, #8
 8005e5c:	d01d      	beq.n	8005e9a <I2C_MasterTransmit_BTF+0x8c>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d01a      	beq.n	8005e9a <I2C_MasterTransmit_BTF+0x8c>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e6a:	d016      	beq.n	8005e9a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e7a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2211      	movs	r2, #17
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff fec1 	bl	8005c1a <HAL_I2C_MasterTxCpltCallback>
}
 8005e98:	e02b      	b.n	8005ef2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ea8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	d107      	bne.n	8005ee4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff fedc 	bl	8005c9a <HAL_I2C_MemTxCpltCallback>
}
 8005ee2:	e006      	b.n	8005ef2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff fe94 	bl	8005c1a <HAL_I2C_MasterTxCpltCallback>
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f08:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d11d      	bne.n	8005f4e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d10b      	bne.n	8005f32 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f2a:	1c9a      	adds	r2, r3, #2
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005f30:	e073      	b.n	800601a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	121b      	asrs	r3, r3, #8
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f4c:	e065      	b.n	800601a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d10b      	bne.n	8005f6e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f6c:	e055      	b.n	800601a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d151      	bne.n	800601a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	2b22      	cmp	r3, #34	; 0x22
 8005f7a:	d10d      	bne.n	8005f98 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f8a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005f96:	e040      	b.n	800601a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d015      	beq.n	8005fce <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005fa2:	7bfb      	ldrb	r3, [r7, #15]
 8005fa4:	2b21      	cmp	r3, #33	; 0x21
 8005fa6:	d112      	bne.n	8005fce <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	781a      	ldrb	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005fcc:	e025      	b.n	800601a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d120      	bne.n	800601a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	2b21      	cmp	r3, #33	; 0x21
 8005fdc:	d11d      	bne.n	800601a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	685a      	ldr	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005fec:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ffc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff fe40 	bl	8005c9a <HAL_I2C_MemTxCpltCallback>
}
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b22      	cmp	r3, #34	; 0x22
 8006034:	f040 80ac 	bne.w	8006190 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603c:	b29b      	uxth	r3, r3
 800603e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b03      	cmp	r3, #3
 8006044:	d921      	bls.n	800608a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006062:	b29b      	uxth	r3, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b03      	cmp	r3, #3
 8006074:	f040 808c 	bne.w	8006190 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006086:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006088:	e082      	b.n	8006190 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608e:	2b02      	cmp	r3, #2
 8006090:	d075      	beq.n	800617e <I2C_MasterReceive_RXNE+0x15c>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2b01      	cmp	r3, #1
 8006096:	d002      	beq.n	800609e <I2C_MasterReceive_RXNE+0x7c>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d16f      	bne.n	800617e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 faca 	bl	8007638 <I2C_WaitOnSTOPRequestThroughIT>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d142      	bne.n	8006130 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060c8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691a      	ldr	r2, [r3, #16]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d10a      	bne.n	800611a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fb f962 	bl	80013dc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006118:	e03a      	b.n	8006190 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2212      	movs	r2, #18
 8006126:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff fd80 	bl	8005c2e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800612e:	e02f      	b.n	8006190 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800613e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	1c5a      	adds	r2, r3, #1
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff fd99 	bl	8005cae <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800617c:	e008      	b.n	8006190 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800618c:	605a      	str	r2, [r3, #4]
}
 800618e:	e7ff      	b.n	8006190 <I2C_MasterReceive_RXNE+0x16e>
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d11b      	bne.n	80061e8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061be:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691a      	ldr	r2, [r3, #16]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	b2d2      	uxtb	r2, r2
 80061cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061dc:	b29b      	uxth	r3, r3
 80061de:	3b01      	subs	r3, #1
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80061e6:	e0bd      	b.n	8006364 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d129      	bne.n	8006246 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006200:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2b04      	cmp	r3, #4
 8006206:	d00a      	beq.n	800621e <I2C_MasterReceive_BTF+0x86>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d007      	beq.n	800621e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800621c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800623a:	b29b      	uxth	r3, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	b29a      	uxth	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006244:	e08e      	b.n	8006364 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d176      	bne.n	800633e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d002      	beq.n	800625c <I2C_MasterReceive_BTF+0xc4>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b10      	cmp	r3, #16
 800625a:	d108      	bne.n	800626e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	e019      	b.n	80062a2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b04      	cmp	r3, #4
 8006272:	d002      	beq.n	800627a <I2C_MasterReceive_BTF+0xe2>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2b02      	cmp	r3, #2
 8006278:	d108      	bne.n	800628c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	e00a      	b.n	80062a2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b10      	cmp	r3, #16
 8006290:	d007      	beq.n	80062a2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	3b01      	subs	r3, #1
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80062fc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	d10a      	bne.n	8006328 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7fb f85b 	bl	80013dc <HAL_I2C_MemRxCpltCallback>
}
 8006326:	e01d      	b.n	8006364 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2212      	movs	r2, #18
 8006334:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7ff fc79 	bl	8005c2e <HAL_I2C_MasterRxCpltCallback>
}
 800633c:	e012      	b.n	8006364 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635a:	b29b      	uxth	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b40      	cmp	r3, #64	; 0x40
 800637e:	d117      	bne.n	80063b0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800638c:	b2db      	uxtb	r3, r3
 800638e:	461a      	mov	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006398:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800639a:	e067      	b.n	800646c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	f043 0301 	orr.w	r3, r3, #1
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	611a      	str	r2, [r3, #16]
}
 80063ae:	e05d      	b.n	800646c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063b8:	d133      	bne.n	8006422 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b21      	cmp	r3, #33	; 0x21
 80063c4:	d109      	bne.n	80063da <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	461a      	mov	r2, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063d6:	611a      	str	r2, [r3, #16]
 80063d8:	e008      	b.n	80063ec <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	f043 0301 	orr.w	r3, r3, #1
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <I2C_Master_SB+0x92>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d108      	bne.n	8006410 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	2b00      	cmp	r3, #0
 8006404:	d032      	beq.n	800646c <I2C_Master_SB+0x100>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640c:	2b00      	cmp	r3, #0
 800640e:	d02d      	beq.n	800646c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800641e:	605a      	str	r2, [r3, #4]
}
 8006420:	e024      	b.n	800646c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10e      	bne.n	8006448 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642e:	b29b      	uxth	r3, r3
 8006430:	11db      	asrs	r3, r3, #7
 8006432:	b2db      	uxtb	r3, r3
 8006434:	f003 0306 	and.w	r3, r3, #6
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f063 030f 	orn	r3, r3, #15
 800643e:	b2da      	uxtb	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	611a      	str	r2, [r3, #16]
}
 8006446:	e011      	b.n	800646c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800644c:	2b01      	cmp	r3, #1
 800644e:	d10d      	bne.n	800646c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006454:	b29b      	uxth	r3, r3
 8006456:	11db      	asrs	r3, r3, #7
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f003 0306 	and.w	r3, r3, #6
 800645e:	b2db      	uxtb	r3, r3
 8006460:	f063 030e 	orn	r3, r3, #14
 8006464:	b2da      	uxtb	r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	611a      	str	r2, [r3, #16]
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006484:	b2da      	uxtb	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006490:	2b00      	cmp	r3, #0
 8006492:	d004      	beq.n	800649e <I2C_Master_ADD10+0x26>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d108      	bne.n	80064b0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00c      	beq.n	80064c0 <I2C_Master_ADD10+0x48>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d007      	beq.n	80064c0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064be:	605a      	str	r2, [r3, #4]
  }
}
 80064c0:	bf00      	nop
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b091      	sub	sp, #68	; 0x44
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b22      	cmp	r3, #34	; 0x22
 80064f4:	f040 8169 	bne.w	80067ca <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10f      	bne.n	8006520 <I2C_Master_ADDR+0x54>
 8006500:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006504:	2b40      	cmp	r3, #64	; 0x40
 8006506:	d10b      	bne.n	8006520 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006508:	2300      	movs	r3, #0
 800650a:	633b      	str	r3, [r7, #48]	; 0x30
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	633b      	str	r3, [r7, #48]	; 0x30
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	633b      	str	r3, [r7, #48]	; 0x30
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	e160      	b.n	80067e2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006524:	2b00      	cmp	r3, #0
 8006526:	d11d      	bne.n	8006564 <I2C_Master_ADDR+0x98>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006530:	d118      	bne.n	8006564 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006532:	2300      	movs	r3, #0
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006556:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	651a      	str	r2, [r3, #80]	; 0x50
 8006562:	e13e      	b.n	80067e2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d113      	bne.n	8006596 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800656e:	2300      	movs	r3, #0
 8006570:	62bb      	str	r3, [r7, #40]	; 0x28
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	e115      	b.n	80067c2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	f040 808a 	bne.w	80066b6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80065a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065a8:	d137      	bne.n	800661a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065b8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065c8:	d113      	bne.n	80065f2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065d8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065da:	2300      	movs	r3, #0
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	e0e7      	b.n	80067c2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f2:	2300      	movs	r3, #0
 80065f4:	623b      	str	r3, [r7, #32]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	623b      	str	r3, [r7, #32]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	623b      	str	r3, [r7, #32]
 8006606:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	e0d3      	b.n	80067c2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661c:	2b08      	cmp	r3, #8
 800661e:	d02e      	beq.n	800667e <I2C_Master_ADDR+0x1b2>
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	2b20      	cmp	r3, #32
 8006624:	d02b      	beq.n	800667e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006628:	2b12      	cmp	r3, #18
 800662a:	d102      	bne.n	8006632 <I2C_Master_ADDR+0x166>
 800662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800662e:	2b01      	cmp	r3, #1
 8006630:	d125      	bne.n	800667e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006634:	2b04      	cmp	r3, #4
 8006636:	d00e      	beq.n	8006656 <I2C_Master_ADDR+0x18a>
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	2b02      	cmp	r3, #2
 800663c:	d00b      	beq.n	8006656 <I2C_Master_ADDR+0x18a>
 800663e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006640:	2b10      	cmp	r3, #16
 8006642:	d008      	beq.n	8006656 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	e007      	b.n	8006666 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006664:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006666:	2300      	movs	r3, #0
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	61fb      	str	r3, [r7, #28]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	61fb      	str	r3, [r7, #28]
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	e0a1      	b.n	80067c2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800668e:	2300      	movs	r3, #0
 8006690:	61bb      	str	r3, [r7, #24]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	e085      	b.n	80067c2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b02      	cmp	r3, #2
 80066be:	d14d      	bne.n	800675c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80066c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c2:	2b04      	cmp	r3, #4
 80066c4:	d016      	beq.n	80066f4 <I2C_Master_ADDR+0x228>
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d013      	beq.n	80066f4 <I2C_Master_ADDR+0x228>
 80066cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d010      	beq.n	80066f4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	e007      	b.n	8006704 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006702:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800670e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006712:	d117      	bne.n	8006744 <I2C_Master_ADDR+0x278>
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800671a:	d00b      	beq.n	8006734 <I2C_Master_ADDR+0x268>
 800671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671e:	2b01      	cmp	r3, #1
 8006720:	d008      	beq.n	8006734 <I2C_Master_ADDR+0x268>
 8006722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006724:	2b08      	cmp	r3, #8
 8006726:	d005      	beq.n	8006734 <I2C_Master_ADDR+0x268>
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	2b10      	cmp	r3, #16
 800672c:	d002      	beq.n	8006734 <I2C_Master_ADDR+0x268>
 800672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006730:	2b20      	cmp	r3, #32
 8006732:	d107      	bne.n	8006744 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006742:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006744:	2300      	movs	r3, #0
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	e032      	b.n	80067c2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800676a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006776:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800677a:	d117      	bne.n	80067ac <I2C_Master_ADDR+0x2e0>
 800677c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006782:	d00b      	beq.n	800679c <I2C_Master_ADDR+0x2d0>
 8006784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006786:	2b01      	cmp	r3, #1
 8006788:	d008      	beq.n	800679c <I2C_Master_ADDR+0x2d0>
 800678a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678c:	2b08      	cmp	r3, #8
 800678e:	d005      	beq.n	800679c <I2C_Master_ADDR+0x2d0>
 8006790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006792:	2b10      	cmp	r3, #16
 8006794:	d002      	beq.n	800679c <I2C_Master_ADDR+0x2d0>
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	2b20      	cmp	r3, #32
 800679a:	d107      	bne.n	80067ac <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067aa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ac:	2300      	movs	r3, #0
 80067ae:	613b      	str	r3, [r7, #16]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	613b      	str	r3, [r7, #16]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	613b      	str	r3, [r7, #16]
 80067c0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80067c8:	e00b      	b.n	80067e2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	60fb      	str	r3, [r7, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	68fb      	ldr	r3, [r7, #12]
}
 80067e0:	e7ff      	b.n	80067e2 <I2C_Master_ADDR+0x316>
 80067e2:	bf00      	nop
 80067e4:	3744      	adds	r7, #68	; 0x44
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d02b      	beq.n	8006860 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680c:	781a      	ldrb	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006822:	b29b      	uxth	r3, r3
 8006824:	3b01      	subs	r3, #1
 8006826:	b29a      	uxth	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d114      	bne.n	8006860 <I2C_SlaveTransmit_TXE+0x72>
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	2b29      	cmp	r3, #41	; 0x29
 800683a:	d111      	bne.n	8006860 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800684a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2221      	movs	r2, #33	; 0x21
 8006850:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2228      	movs	r2, #40	; 0x28
 8006856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7ff f9f1 	bl	8005c42 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d011      	beq.n	800689e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	781a      	ldrb	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068be:	b29b      	uxth	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d02c      	beq.n	800691e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	691a      	ldr	r2, [r3, #16]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d6:	1c5a      	adds	r2, r3, #1
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d114      	bne.n	800691e <I2C_SlaveReceive_RXNE+0x74>
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
 80068f6:	2b2a      	cmp	r3, #42	; 0x2a
 80068f8:	d111      	bne.n	800691e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685a      	ldr	r2, [r3, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006908:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2222      	movs	r2, #34	; 0x22
 800690e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2228      	movs	r2, #40	; 0x28
 8006914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff f99c 	bl	8005c56 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800691e:	bf00      	nop
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}

08006926 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006932:	b29b      	uxth	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d012      	beq.n	800695e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	691a      	ldr	r2, [r3, #16]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	1c5a      	adds	r2, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006974:	2300      	movs	r3, #0
 8006976:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006984:	2b28      	cmp	r3, #40	; 0x28
 8006986:	d127      	bne.n	80069d8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006996:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	089b      	lsrs	r3, r3, #2
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80069a4:	2301      	movs	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	09db      	lsrs	r3, r3, #7
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d103      	bne.n	80069bc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	81bb      	strh	r3, [r7, #12]
 80069ba:	e002      	b.n	80069c2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80069ca:	89ba      	ldrh	r2, [r7, #12]
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	4619      	mov	r1, r3
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff f94a 	bl	8005c6a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80069d6:	e00e      	b.n	80069f6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069d8:	2300      	movs	r3, #0
 80069da:	60bb      	str	r3, [r7, #8]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	60bb      	str	r3, [r7, #8]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	60bb      	str	r3, [r7, #8]
 80069ec:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80069f6:	bf00      	nop
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a0e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a1e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006a20:	2300      	movs	r3, #0
 8006a22:	60bb      	str	r3, [r7, #8]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	60bb      	str	r3, [r7, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
 8006a3c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a5c:	d172      	bne.n	8006b44 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a5e:	7bfb      	ldrb	r3, [r7, #15]
 8006a60:	2b22      	cmp	r3, #34	; 0x22
 8006a62:	d002      	beq.n	8006a6a <I2C_Slave_STOPF+0x6a>
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b2a      	cmp	r3, #42	; 0x2a
 8006a68:	d135      	bne.n	8006ad6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d005      	beq.n	8006a8e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a86:	f043 0204 	orr.w	r2, r3, #4
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fe f87a 	bl	8004b9c <HAL_DMA_GetState>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d049      	beq.n	8006b42 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab2:	4a69      	ldr	r2, [pc, #420]	; (8006c58 <I2C_Slave_STOPF+0x258>)
 8006ab4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fd fec2 	bl	8004844 <HAL_DMA_Abort_IT>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d03d      	beq.n	8006b42 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ad4:	e035      	b.n	8006b42 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f043 0204 	orr.w	r2, r3, #4
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b08:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe f844 	bl	8004b9c <HAL_DMA_GetState>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d014      	beq.n	8006b44 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1e:	4a4e      	ldr	r2, [pc, #312]	; (8006c58 <I2C_Slave_STOPF+0x258>)
 8006b20:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fd fe8c 	bl	8004844 <HAL_DMA_Abort_IT>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d008      	beq.n	8006b44 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	4798      	blx	r3
 8006b40:	e000      	b.n	8006b44 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b42:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d03e      	beq.n	8006bcc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d112      	bne.n	8006b82 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691a      	ldr	r2, [r3, #16]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b40      	cmp	r3, #64	; 0x40
 8006b8e:	d112      	bne.n	8006bb6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691a      	ldr	r2, [r3, #16]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	f043 0204 	orr.w	r2, r3, #4
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f843 	bl	8006c60 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006bda:	e039      	b.n	8006c50 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006bdc:	7bfb      	ldrb	r3, [r7, #15]
 8006bde:	2b2a      	cmp	r3, #42	; 0x2a
 8006be0:	d109      	bne.n	8006bf6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2228      	movs	r2, #40	; 0x28
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff f830 	bl	8005c56 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b28      	cmp	r3, #40	; 0x28
 8006c00:	d111      	bne.n	8006c26 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <I2C_Slave_STOPF+0x25c>)
 8006c06:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2220      	movs	r2, #32
 8006c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff f831 	bl	8005c86 <HAL_I2C_ListenCpltCallback>
}
 8006c24:	e014      	b.n	8006c50 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2a:	2b22      	cmp	r3, #34	; 0x22
 8006c2c:	d002      	beq.n	8006c34 <I2C_Slave_STOPF+0x234>
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	2b22      	cmp	r3, #34	; 0x22
 8006c32:	d10d      	bne.n	8006c50 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f7ff f803 	bl	8005c56 <HAL_I2C_SlaveRxCpltCallback>
}
 8006c50:	bf00      	nop
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	080072b9 	.word	0x080072b9
 8006c5c:	ffff0000 	.word	0xffff0000

08006c60 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c78:	7bbb      	ldrb	r3, [r7, #14]
 8006c7a:	2b10      	cmp	r3, #16
 8006c7c:	d002      	beq.n	8006c84 <I2C_ITError+0x24>
 8006c7e:	7bbb      	ldrb	r3, [r7, #14]
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	d10a      	bne.n	8006c9a <I2C_ITError+0x3a>
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	2b22      	cmp	r3, #34	; 0x22
 8006c88:	d107      	bne.n	8006c9a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c98:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006ca0:	2b28      	cmp	r3, #40	; 0x28
 8006ca2:	d107      	bne.n	8006cb4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2228      	movs	r2, #40	; 0x28
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006cb2:	e015      	b.n	8006ce0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cc2:	d00a      	beq.n	8006cda <I2C_ITError+0x7a>
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	2b60      	cmp	r3, #96	; 0x60
 8006cc8:	d007      	beq.n	8006cda <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cee:	d162      	bne.n	8006db6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cfe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d020      	beq.n	8006d50 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	4a6a      	ldr	r2, [pc, #424]	; (8006ebc <I2C_ITError+0x25c>)
 8006d14:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7fd fd92 	bl	8004844 <HAL_DMA_Abort_IT>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8089 	beq.w	8006e3a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f022 0201 	bic.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	4798      	blx	r3
 8006d4e:	e074      	b.n	8006e3a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	4a59      	ldr	r2, [pc, #356]	; (8006ebc <I2C_ITError+0x25c>)
 8006d56:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fd fd71 	bl	8004844 <HAL_DMA_Abort_IT>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d068      	beq.n	8006e3a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d10b      	bne.n	8006d8e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0201 	bic.w	r2, r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006db0:	4610      	mov	r0, r2
 8006db2:	4798      	blx	r3
 8006db4:	e041      	b.n	8006e3a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b60      	cmp	r3, #96	; 0x60
 8006dc0:	d125      	bne.n	8006e0e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d10b      	bne.n	8006df6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	691a      	ldr	r2, [r3, #16]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0201 	bic.w	r2, r2, #1
 8006e04:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7fe ff5b 	bl	8005cc2 <HAL_I2C_AbortCpltCallback>
 8006e0c:	e015      	b.n	8006e3a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b40      	cmp	r3, #64	; 0x40
 8006e1a:	d10b      	bne.n	8006e34 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7fe ff3a 	bl	8005cae <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10e      	bne.n	8006e68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d109      	bne.n	8006e68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d104      	bne.n	8006e68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e76:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e7e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d113      	bne.n	8006eb4 <I2C_ITError+0x254>
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	2b28      	cmp	r3, #40	; 0x28
 8006e90:	d110      	bne.n	8006eb4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a0a      	ldr	r2, [pc, #40]	; (8006ec0 <I2C_ITError+0x260>)
 8006e96:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fe fee9 	bl	8005c86 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006eb4:	bf00      	nop
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	080072b9 	.word	0x080072b9
 8006ec0:	ffff0000 	.word	0xffff0000

08006ec4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	4608      	mov	r0, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	817b      	strh	r3, [r7, #10]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	813b      	strh	r3, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006eec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006efc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 fa7c 	bl	8007408 <I2C_WaitOnFlagUntilTimeout>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00d      	beq.n	8006f32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f24:	d103      	bne.n	8006f2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e0aa      	b.n	8007088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f32:	897b      	ldrh	r3, [r7, #10]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	461a      	mov	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	6a3a      	ldr	r2, [r7, #32]
 8006f46:	4952      	ldr	r1, [pc, #328]	; (8007090 <I2C_RequestMemoryRead+0x1cc>)
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 fab4 	bl	80074b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d001      	beq.n	8006f58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e097      	b.n	8007088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f58:	2300      	movs	r3, #0
 8006f5a:	617b      	str	r3, [r7, #20]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	617b      	str	r3, [r7, #20]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f70:	6a39      	ldr	r1, [r7, #32]
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 fb1e 	bl	80075b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00d      	beq.n	8006f9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d107      	bne.n	8006f96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e076      	b.n	8007088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f9a:	88fb      	ldrh	r3, [r7, #6]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d105      	bne.n	8006fac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fa0:	893b      	ldrh	r3, [r7, #8]
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	611a      	str	r2, [r3, #16]
 8006faa:	e021      	b.n	8006ff0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006fac:	893b      	ldrh	r3, [r7, #8]
 8006fae:	0a1b      	lsrs	r3, r3, #8
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fbc:	6a39      	ldr	r1, [r7, #32]
 8006fbe:	68f8      	ldr	r0, [r7, #12]
 8006fc0:	f000 faf8 	bl	80075b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00d      	beq.n	8006fe6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d107      	bne.n	8006fe2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e050      	b.n	8007088 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fe6:	893b      	ldrh	r3, [r7, #8]
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff2:	6a39      	ldr	r1, [r7, #32]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 fadd 	bl	80075b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00d      	beq.n	800701c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007004:	2b04      	cmp	r3, #4
 8007006:	d107      	bne.n	8007018 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007016:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e035      	b.n	8007088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800702a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	2200      	movs	r2, #0
 8007034:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 f9e5 	bl	8007408 <I2C_WaitOnFlagUntilTimeout>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00d      	beq.n	8007060 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007052:	d103      	bne.n	800705c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f44f 7200 	mov.w	r2, #512	; 0x200
 800705a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e013      	b.n	8007088 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007060:	897b      	ldrh	r3, [r7, #10]
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f043 0301 	orr.w	r3, r3, #1
 8007068:	b2da      	uxtb	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	6a3a      	ldr	r2, [r7, #32]
 8007074:	4906      	ldr	r1, [pc, #24]	; (8007090 <I2C_RequestMemoryRead+0x1cc>)
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fa1d 	bl	80074b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e000      	b.n	8007088 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	00010002 	.word	0x00010002

08007094 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a8:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070b0:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80070c6:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d003      	beq.n	80070d8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d4:	2200      	movs	r2, #0
 80070d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e4:	2200      	movs	r2, #0
 80070e6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80070e8:	7cfb      	ldrb	r3, [r7, #19]
 80070ea:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80070ee:	2b21      	cmp	r3, #33	; 0x21
 80070f0:	d007      	beq.n	8007102 <I2C_DMAXferCplt+0x6e>
 80070f2:	7cfb      	ldrb	r3, [r7, #19]
 80070f4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80070f8:	2b22      	cmp	r3, #34	; 0x22
 80070fa:	d131      	bne.n	8007160 <I2C_DMAXferCplt+0xcc>
 80070fc:	7cbb      	ldrb	r3, [r7, #18]
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d12e      	bne.n	8007160 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007110:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2200      	movs	r2, #0
 8007116:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007118:	7cfb      	ldrb	r3, [r7, #19]
 800711a:	2b29      	cmp	r3, #41	; 0x29
 800711c:	d10a      	bne.n	8007134 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2221      	movs	r2, #33	; 0x21
 8007122:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	2228      	movs	r2, #40	; 0x28
 8007128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800712c:	6978      	ldr	r0, [r7, #20]
 800712e:	f7fe fd88 	bl	8005c42 <HAL_I2C_SlaveTxCpltCallback>
 8007132:	e00c      	b.n	800714e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007134:	7cfb      	ldrb	r3, [r7, #19]
 8007136:	2b2a      	cmp	r3, #42	; 0x2a
 8007138:	d109      	bne.n	800714e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2222      	movs	r2, #34	; 0x22
 800713e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2228      	movs	r2, #40	; 0x28
 8007144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007148:	6978      	ldr	r0, [r7, #20]
 800714a:	f7fe fd84 	bl	8005c56 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800715c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800715e:	e06a      	b.n	8007236 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007166:	b2db      	uxtb	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	d064      	beq.n	8007236 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007170:	b29b      	uxth	r3, r3
 8007172:	2b01      	cmp	r3, #1
 8007174:	d107      	bne.n	8007186 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007184:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007194:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800719c:	d009      	beq.n	80071b2 <I2C_DMAXferCplt+0x11e>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	d006      	beq.n	80071b2 <I2C_DMAXferCplt+0x11e>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80071aa:	d002      	beq.n	80071b2 <I2C_DMAXferCplt+0x11e>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d107      	bne.n	80071c2 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071c0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071d0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071e0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2200      	movs	r2, #0
 80071e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80071f0:	6978      	ldr	r0, [r7, #20]
 80071f2:	f7fe fd5c 	bl	8005cae <HAL_I2C_ErrorCallback>
}
 80071f6:	e01e      	b.n	8007236 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2220      	movs	r2, #32
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b40      	cmp	r3, #64	; 0x40
 800720a:	d10a      	bne.n	8007222 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2200      	movs	r2, #0
 8007218:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800721a:	6978      	ldr	r0, [r7, #20]
 800721c:	f7fa f8de 	bl	80013dc <HAL_I2C_MemRxCpltCallback>
}
 8007220:	e009      	b.n	8007236 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2212      	movs	r2, #18
 800722e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007230:	6978      	ldr	r0, [r7, #20]
 8007232:	f7fe fcfc 	bl	8005c2e <HAL_I2C_MasterRxCpltCallback>
}
 8007236:	bf00      	nop
 8007238:	3718      	adds	r7, #24
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b084      	sub	sp, #16
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007258:	2200      	movs	r2, #0
 800725a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	2200      	movs	r2, #0
 800726a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7fd fca3 	bl	8004bb8 <HAL_DMA_GetError>
 8007272:	4603      	mov	r3, r0
 8007274:	2b02      	cmp	r3, #2
 8007276:	d01b      	beq.n	80072b0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007286:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2220      	movs	r2, #32
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a2:	f043 0210 	orr.w	r2, r3, #16
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f7fe fcff 	bl	8005cae <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072b0:	bf00      	nop
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80072d2:	4b4b      	ldr	r3, [pc, #300]	; (8007400 <I2C_DMAAbort+0x148>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	08db      	lsrs	r3, r3, #3
 80072d8:	4a4a      	ldr	r2, [pc, #296]	; (8007404 <I2C_DMAAbort+0x14c>)
 80072da:	fba2 2303 	umull	r2, r3, r2, r3
 80072de:	0a1a      	lsrs	r2, r3, #8
 80072e0:	4613      	mov	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	00da      	lsls	r2, r3, #3
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d106      	bne.n	8007300 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	f043 0220 	orr.w	r2, r3, #32
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80072fe:	e00a      	b.n	8007316 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	3b01      	subs	r3, #1
 8007304:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007314:	d0ea      	beq.n	80072ec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007322:	2200      	movs	r2, #0
 8007324:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	2200      	movs	r2, #0
 8007334:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007344:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2200      	movs	r2, #0
 800734a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007358:	2200      	movs	r2, #0
 800735a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	2200      	movs	r2, #0
 800736a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0201 	bic.w	r2, r2, #1
 800737a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b60      	cmp	r3, #96	; 0x60
 8007386:	d10e      	bne.n	80073a6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2220      	movs	r2, #32
 800738c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	2200      	movs	r2, #0
 800739c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800739e:	6978      	ldr	r0, [r7, #20]
 80073a0:	f7fe fc8f 	bl	8005cc2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073a4:	e027      	b.n	80073f6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073a6:	7cfb      	ldrb	r3, [r7, #19]
 80073a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073ac:	2b28      	cmp	r3, #40	; 0x28
 80073ae:	d117      	bne.n	80073e0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f042 0201 	orr.w	r2, r2, #1
 80073be:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073ce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2200      	movs	r2, #0
 80073d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2228      	movs	r2, #40	; 0x28
 80073da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80073de:	e007      	b.n	80073f0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80073f0:	6978      	ldr	r0, [r7, #20]
 80073f2:	f7fe fc5c 	bl	8005cae <HAL_I2C_ErrorCallback>
}
 80073f6:	bf00      	nop
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	20000000 	.word	0x20000000
 8007404:	14f8b589 	.word	0x14f8b589

08007408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	603b      	str	r3, [r7, #0]
 8007414:	4613      	mov	r3, r2
 8007416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007418:	e025      	b.n	8007466 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007420:	d021      	beq.n	8007466 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007422:	f7fb ffb7 	bl	8003394 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d302      	bcc.n	8007438 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d116      	bne.n	8007466 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2220      	movs	r2, #32
 8007442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	f043 0220 	orr.w	r2, r3, #32
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e023      	b.n	80074ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	0c1b      	lsrs	r3, r3, #16
 800746a:	b2db      	uxtb	r3, r3
 800746c:	2b01      	cmp	r3, #1
 800746e:	d10d      	bne.n	800748c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	695b      	ldr	r3, [r3, #20]
 8007476:	43da      	mvns	r2, r3
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	4013      	ands	r3, r2
 800747c:	b29b      	uxth	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	bf0c      	ite	eq
 8007482:	2301      	moveq	r3, #1
 8007484:	2300      	movne	r3, #0
 8007486:	b2db      	uxtb	r3, r3
 8007488:	461a      	mov	r2, r3
 800748a:	e00c      	b.n	80074a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	43da      	mvns	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4013      	ands	r3, r2
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	bf0c      	ite	eq
 800749e:	2301      	moveq	r3, #1
 80074a0:	2300      	movne	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	79fb      	ldrb	r3, [r7, #7]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d0b6      	beq.n	800741a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	607a      	str	r2, [r7, #4]
 80074c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074c4:	e051      	b.n	800756a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d4:	d123      	bne.n	800751e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80074ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2200      	movs	r2, #0
 80074f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2220      	movs	r2, #32
 80074fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	f043 0204 	orr.w	r2, r3, #4
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e046      	b.n	80075ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007524:	d021      	beq.n	800756a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007526:	f7fb ff35 	bl	8003394 <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	429a      	cmp	r2, r3
 8007534:	d302      	bcc.n	800753c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d116      	bne.n	800756a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2220      	movs	r2, #32
 8007546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f043 0220 	orr.w	r2, r3, #32
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e020      	b.n	80075ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	0c1b      	lsrs	r3, r3, #16
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b01      	cmp	r3, #1
 8007572:	d10c      	bne.n	800758e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	43da      	mvns	r2, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4013      	ands	r3, r2
 8007580:	b29b      	uxth	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	bf14      	ite	ne
 8007586:	2301      	movne	r3, #1
 8007588:	2300      	moveq	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	e00b      	b.n	80075a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	699b      	ldr	r3, [r3, #24]
 8007594:	43da      	mvns	r2, r3
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	4013      	ands	r3, r2
 800759a:	b29b      	uxth	r3, r3
 800759c:	2b00      	cmp	r3, #0
 800759e:	bf14      	ite	ne
 80075a0:	2301      	movne	r3, #1
 80075a2:	2300      	moveq	r3, #0
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d18d      	bne.n	80074c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80075c0:	e02d      	b.n	800761e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f86a 	bl	800769c <I2C_IsAcknowledgeFailed>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e02d      	b.n	800762e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075d8:	d021      	beq.n	800761e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075da:	f7fb fedb 	bl	8003394 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d302      	bcc.n	80075f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d116      	bne.n	800761e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2220      	movs	r2, #32
 80075fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	f043 0220 	orr.w	r2, r3, #32
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e007      	b.n	800762e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007628:	2b80      	cmp	r3, #128	; 0x80
 800762a:	d1ca      	bne.n	80075c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007644:	4b13      	ldr	r3, [pc, #76]	; (8007694 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	08db      	lsrs	r3, r3, #3
 800764a:	4a13      	ldr	r2, [pc, #76]	; (8007698 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800764c:	fba2 2303 	umull	r2, r3, r2, r3
 8007650:	0a1a      	lsrs	r2, r3, #8
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3b01      	subs	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d107      	bne.n	8007676 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	f043 0220 	orr.w	r2, r3, #32
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e008      	b.n	8007688 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007684:	d0e9      	beq.n	800765a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	20000000 	.word	0x20000000
 8007698:	14f8b589 	.word	0x14f8b589

0800769c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b2:	d11b      	bne.n	80076ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2220      	movs	r2, #32
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d8:	f043 0204 	orr.w	r2, r3, #4
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800770a:	d103      	bne.n	8007714 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007712:	e007      	b.n	8007724 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800771c:	d102      	bne.n	8007724 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2208      	movs	r2, #8
 8007722:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d101      	bne.n	8007742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e267      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b00      	cmp	r3, #0
 800774c:	d075      	beq.n	800783a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800774e:	4b88      	ldr	r3, [pc, #544]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f003 030c 	and.w	r3, r3, #12
 8007756:	2b04      	cmp	r3, #4
 8007758:	d00c      	beq.n	8007774 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800775a:	4b85      	ldr	r3, [pc, #532]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007762:	2b08      	cmp	r3, #8
 8007764:	d112      	bne.n	800778c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007766:	4b82      	ldr	r3, [pc, #520]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800776e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007772:	d10b      	bne.n	800778c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007774:	4b7e      	ldr	r3, [pc, #504]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d05b      	beq.n	8007838 <HAL_RCC_OscConfig+0x108>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d157      	bne.n	8007838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e242      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007794:	d106      	bne.n	80077a4 <HAL_RCC_OscConfig+0x74>
 8007796:	4b76      	ldr	r3, [pc, #472]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a75      	ldr	r2, [pc, #468]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 800779c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	e01d      	b.n	80077e0 <HAL_RCC_OscConfig+0xb0>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077ac:	d10c      	bne.n	80077c8 <HAL_RCC_OscConfig+0x98>
 80077ae:	4b70      	ldr	r3, [pc, #448]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a6f      	ldr	r2, [pc, #444]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	4b6d      	ldr	r3, [pc, #436]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a6c      	ldr	r2, [pc, #432]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	e00b      	b.n	80077e0 <HAL_RCC_OscConfig+0xb0>
 80077c8:	4b69      	ldr	r3, [pc, #420]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a68      	ldr	r2, [pc, #416]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077d2:	6013      	str	r3, [r2, #0]
 80077d4:	4b66      	ldr	r3, [pc, #408]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a65      	ldr	r2, [pc, #404]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80077da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d013      	beq.n	8007810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077e8:	f7fb fdd4 	bl	8003394 <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80077f0:	f7fb fdd0 	bl	8003394 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b64      	cmp	r3, #100	; 0x64
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e207      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007802:	4b5b      	ldr	r3, [pc, #364]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0f0      	beq.n	80077f0 <HAL_RCC_OscConfig+0xc0>
 800780e:	e014      	b.n	800783a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007810:	f7fb fdc0 	bl	8003394 <HAL_GetTick>
 8007814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007816:	e008      	b.n	800782a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007818:	f7fb fdbc 	bl	8003394 <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	2b64      	cmp	r3, #100	; 0x64
 8007824:	d901      	bls.n	800782a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007826:	2303      	movs	r3, #3
 8007828:	e1f3      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800782a:	4b51      	ldr	r3, [pc, #324]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1f0      	bne.n	8007818 <HAL_RCC_OscConfig+0xe8>
 8007836:	e000      	b.n	800783a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d063      	beq.n	800790e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007846:	4b4a      	ldr	r3, [pc, #296]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 030c 	and.w	r3, r3, #12
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00b      	beq.n	800786a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007852:	4b47      	ldr	r3, [pc, #284]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800785a:	2b08      	cmp	r3, #8
 800785c:	d11c      	bne.n	8007898 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800785e:	4b44      	ldr	r3, [pc, #272]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d116      	bne.n	8007898 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800786a:	4b41      	ldr	r3, [pc, #260]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d005      	beq.n	8007882 <HAL_RCC_OscConfig+0x152>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d001      	beq.n	8007882 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e1c7      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007882:	4b3b      	ldr	r3, [pc, #236]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	4937      	ldr	r1, [pc, #220]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007892:	4313      	orrs	r3, r2
 8007894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007896:	e03a      	b.n	800790e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d020      	beq.n	80078e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078a0:	4b34      	ldr	r3, [pc, #208]	; (8007974 <HAL_RCC_OscConfig+0x244>)
 80078a2:	2201      	movs	r2, #1
 80078a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a6:	f7fb fd75 	bl	8003394 <HAL_GetTick>
 80078aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078ac:	e008      	b.n	80078c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078ae:	f7fb fd71 	bl	8003394 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d901      	bls.n	80078c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e1a8      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078c0:	4b2b      	ldr	r3, [pc, #172]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0f0      	beq.n	80078ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078cc:	4b28      	ldr	r3, [pc, #160]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	00db      	lsls	r3, r3, #3
 80078da:	4925      	ldr	r1, [pc, #148]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	600b      	str	r3, [r1, #0]
 80078e0:	e015      	b.n	800790e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078e2:	4b24      	ldr	r3, [pc, #144]	; (8007974 <HAL_RCC_OscConfig+0x244>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e8:	f7fb fd54 	bl	8003394 <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ee:	e008      	b.n	8007902 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078f0:	f7fb fd50 	bl	8003394 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e187      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007902:	4b1b      	ldr	r3, [pc, #108]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1f0      	bne.n	80078f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0308 	and.w	r3, r3, #8
 8007916:	2b00      	cmp	r3, #0
 8007918:	d036      	beq.n	8007988 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d016      	beq.n	8007950 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007922:	4b15      	ldr	r3, [pc, #84]	; (8007978 <HAL_RCC_OscConfig+0x248>)
 8007924:	2201      	movs	r2, #1
 8007926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007928:	f7fb fd34 	bl	8003394 <HAL_GetTick>
 800792c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800792e:	e008      	b.n	8007942 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007930:	f7fb fd30 	bl	8003394 <HAL_GetTick>
 8007934:	4602      	mov	r2, r0
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1ad3      	subs	r3, r2, r3
 800793a:	2b02      	cmp	r3, #2
 800793c:	d901      	bls.n	8007942 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e167      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007942:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <HAL_RCC_OscConfig+0x240>)
 8007944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	d0f0      	beq.n	8007930 <HAL_RCC_OscConfig+0x200>
 800794e:	e01b      	b.n	8007988 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007950:	4b09      	ldr	r3, [pc, #36]	; (8007978 <HAL_RCC_OscConfig+0x248>)
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007956:	f7fb fd1d 	bl	8003394 <HAL_GetTick>
 800795a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800795c:	e00e      	b.n	800797c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800795e:	f7fb fd19 	bl	8003394 <HAL_GetTick>
 8007962:	4602      	mov	r2, r0
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	2b02      	cmp	r3, #2
 800796a:	d907      	bls.n	800797c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e150      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
 8007970:	40023800 	.word	0x40023800
 8007974:	42470000 	.word	0x42470000
 8007978:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800797c:	4b88      	ldr	r3, [pc, #544]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 800797e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007980:	f003 0302 	and.w	r3, r3, #2
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1ea      	bne.n	800795e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 8097 	beq.w	8007ac4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007996:	2300      	movs	r3, #0
 8007998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800799a:	4b81      	ldr	r3, [pc, #516]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10f      	bne.n	80079c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079a6:	2300      	movs	r3, #0
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	4b7d      	ldr	r3, [pc, #500]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 80079ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ae:	4a7c      	ldr	r2, [pc, #496]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 80079b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b4:	6413      	str	r3, [r2, #64]	; 0x40
 80079b6:	4b7a      	ldr	r3, [pc, #488]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 80079b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079be:	60bb      	str	r3, [r7, #8]
 80079c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079c2:	2301      	movs	r3, #1
 80079c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079c6:	4b77      	ldr	r3, [pc, #476]	; (8007ba4 <HAL_RCC_OscConfig+0x474>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d118      	bne.n	8007a04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079d2:	4b74      	ldr	r3, [pc, #464]	; (8007ba4 <HAL_RCC_OscConfig+0x474>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a73      	ldr	r2, [pc, #460]	; (8007ba4 <HAL_RCC_OscConfig+0x474>)
 80079d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079de:	f7fb fcd9 	bl	8003394 <HAL_GetTick>
 80079e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079e4:	e008      	b.n	80079f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079e6:	f7fb fcd5 	bl	8003394 <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e10c      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079f8:	4b6a      	ldr	r3, [pc, #424]	; (8007ba4 <HAL_RCC_OscConfig+0x474>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0f0      	beq.n	80079e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d106      	bne.n	8007a1a <HAL_RCC_OscConfig+0x2ea>
 8007a0c:	4b64      	ldr	r3, [pc, #400]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a10:	4a63      	ldr	r2, [pc, #396]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a12:	f043 0301 	orr.w	r3, r3, #1
 8007a16:	6713      	str	r3, [r2, #112]	; 0x70
 8007a18:	e01c      	b.n	8007a54 <HAL_RCC_OscConfig+0x324>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	2b05      	cmp	r3, #5
 8007a20:	d10c      	bne.n	8007a3c <HAL_RCC_OscConfig+0x30c>
 8007a22:	4b5f      	ldr	r3, [pc, #380]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a26:	4a5e      	ldr	r2, [pc, #376]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a28:	f043 0304 	orr.w	r3, r3, #4
 8007a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a2e:	4b5c      	ldr	r3, [pc, #368]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a32:	4a5b      	ldr	r2, [pc, #364]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a34:	f043 0301 	orr.w	r3, r3, #1
 8007a38:	6713      	str	r3, [r2, #112]	; 0x70
 8007a3a:	e00b      	b.n	8007a54 <HAL_RCC_OscConfig+0x324>
 8007a3c:	4b58      	ldr	r3, [pc, #352]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a40:	4a57      	ldr	r2, [pc, #348]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a42:	f023 0301 	bic.w	r3, r3, #1
 8007a46:	6713      	str	r3, [r2, #112]	; 0x70
 8007a48:	4b55      	ldr	r3, [pc, #340]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4c:	4a54      	ldr	r2, [pc, #336]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a4e:	f023 0304 	bic.w	r3, r3, #4
 8007a52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d015      	beq.n	8007a88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a5c:	f7fb fc9a 	bl	8003394 <HAL_GetTick>
 8007a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a62:	e00a      	b.n	8007a7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a64:	f7fb fc96 	bl	8003394 <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d901      	bls.n	8007a7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e0cb      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a7a:	4b49      	ldr	r3, [pc, #292]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a7e:	f003 0302 	and.w	r3, r3, #2
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0ee      	beq.n	8007a64 <HAL_RCC_OscConfig+0x334>
 8007a86:	e014      	b.n	8007ab2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a88:	f7fb fc84 	bl	8003394 <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a8e:	e00a      	b.n	8007aa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a90:	f7fb fc80 	bl	8003394 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d901      	bls.n	8007aa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e0b5      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aa6:	4b3e      	ldr	r3, [pc, #248]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1ee      	bne.n	8007a90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ab2:	7dfb      	ldrb	r3, [r7, #23]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d105      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ab8:	4b39      	ldr	r3, [pc, #228]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	4a38      	ldr	r2, [pc, #224]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ac2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 80a1 	beq.w	8007c10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ace:	4b34      	ldr	r3, [pc, #208]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 030c 	and.w	r3, r3, #12
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d05c      	beq.n	8007b94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d141      	bne.n	8007b66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ae2:	4b31      	ldr	r3, [pc, #196]	; (8007ba8 <HAL_RCC_OscConfig+0x478>)
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ae8:	f7fb fc54 	bl	8003394 <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aee:	e008      	b.n	8007b02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007af0:	f7fb fc50 	bl	8003394 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e087      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b02:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1f0      	bne.n	8007af0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	69da      	ldr	r2, [r3, #28]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1c:	019b      	lsls	r3, r3, #6
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b24:	085b      	lsrs	r3, r3, #1
 8007b26:	3b01      	subs	r3, #1
 8007b28:	041b      	lsls	r3, r3, #16
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b30:	061b      	lsls	r3, r3, #24
 8007b32:	491b      	ldr	r1, [pc, #108]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b38:	4b1b      	ldr	r3, [pc, #108]	; (8007ba8 <HAL_RCC_OscConfig+0x478>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b3e:	f7fb fc29 	bl	8003394 <HAL_GetTick>
 8007b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b44:	e008      	b.n	8007b58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b46:	f7fb fc25 	bl	8003394 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	1ad3      	subs	r3, r2, r3
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d901      	bls.n	8007b58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b54:	2303      	movs	r3, #3
 8007b56:	e05c      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b58:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d0f0      	beq.n	8007b46 <HAL_RCC_OscConfig+0x416>
 8007b64:	e054      	b.n	8007c10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b66:	4b10      	ldr	r3, [pc, #64]	; (8007ba8 <HAL_RCC_OscConfig+0x478>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b6c:	f7fb fc12 	bl	8003394 <HAL_GetTick>
 8007b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b74:	f7fb fc0e 	bl	8003394 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e045      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b86:	4b06      	ldr	r3, [pc, #24]	; (8007ba0 <HAL_RCC_OscConfig+0x470>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1f0      	bne.n	8007b74 <HAL_RCC_OscConfig+0x444>
 8007b92:	e03d      	b.n	8007c10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d107      	bne.n	8007bac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e038      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
 8007ba0:	40023800 	.word	0x40023800
 8007ba4:	40007000 	.word	0x40007000
 8007ba8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bac:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <HAL_RCC_OscConfig+0x4ec>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d028      	beq.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d121      	bne.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d11a      	bne.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bdc:	4013      	ands	r3, r2
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007be2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d111      	bne.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	085b      	lsrs	r3, r3, #1
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d107      	bne.n	8007c0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d001      	beq.n	8007c10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e000      	b.n	8007c12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	40023800 	.word	0x40023800

08007c20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e0cc      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c34:	4b68      	ldr	r3, [pc, #416]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0307 	and.w	r3, r3, #7
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d90c      	bls.n	8007c5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c42:	4b65      	ldr	r3, [pc, #404]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	b2d2      	uxtb	r2, r2
 8007c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c4a:	4b63      	ldr	r3, [pc, #396]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0307 	and.w	r3, r3, #7
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d001      	beq.n	8007c5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e0b8      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d020      	beq.n	8007caa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d005      	beq.n	8007c80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c74:	4b59      	ldr	r3, [pc, #356]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	4a58      	ldr	r2, [pc, #352]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c8c:	4b53      	ldr	r3, [pc, #332]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	4a52      	ldr	r2, [pc, #328]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c98:	4b50      	ldr	r3, [pc, #320]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	494d      	ldr	r1, [pc, #308]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d044      	beq.n	8007d40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d107      	bne.n	8007cce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cbe:	4b47      	ldr	r3, [pc, #284]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d119      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e07f      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d003      	beq.n	8007cde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d107      	bne.n	8007cee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cde:	4b3f      	ldr	r3, [pc, #252]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d109      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e06f      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cee:	4b3b      	ldr	r3, [pc, #236]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e067      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cfe:	4b37      	ldr	r3, [pc, #220]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f023 0203 	bic.w	r2, r3, #3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	4934      	ldr	r1, [pc, #208]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d10:	f7fb fb40 	bl	8003394 <HAL_GetTick>
 8007d14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d16:	e00a      	b.n	8007d2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d18:	f7fb fb3c 	bl	8003394 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e04f      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d2e:	4b2b      	ldr	r3, [pc, #172]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f003 020c 	and.w	r2, r3, #12
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d1eb      	bne.n	8007d18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d40:	4b25      	ldr	r3, [pc, #148]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0307 	and.w	r3, r3, #7
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d20c      	bcs.n	8007d68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d4e:	4b22      	ldr	r3, [pc, #136]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	b2d2      	uxtb	r2, r2
 8007d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d56:	4b20      	ldr	r3, [pc, #128]	; (8007dd8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d001      	beq.n	8007d68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e032      	b.n	8007dce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d008      	beq.n	8007d86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d74:	4b19      	ldr	r3, [pc, #100]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	4916      	ldr	r1, [pc, #88]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0308 	and.w	r3, r3, #8
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d009      	beq.n	8007da6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d92:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	490e      	ldr	r1, [pc, #56]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007da6:	f000 f821 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 8007daa:	4602      	mov	r2, r0
 8007dac:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <HAL_RCC_ClockConfig+0x1bc>)
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	091b      	lsrs	r3, r3, #4
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	490a      	ldr	r1, [pc, #40]	; (8007de0 <HAL_RCC_ClockConfig+0x1c0>)
 8007db8:	5ccb      	ldrb	r3, [r1, r3]
 8007dba:	fa22 f303 	lsr.w	r3, r2, r3
 8007dbe:	4a09      	ldr	r2, [pc, #36]	; (8007de4 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007dc2:	4b09      	ldr	r3, [pc, #36]	; (8007de8 <HAL_RCC_ClockConfig+0x1c8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7fb f87e 	bl	8002ec8 <HAL_InitTick>

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	40023c00 	.word	0x40023c00
 8007ddc:	40023800 	.word	0x40023800
 8007de0:	0800cb2c 	.word	0x0800cb2c
 8007de4:	20000000 	.word	0x20000000
 8007de8:	20000004 	.word	0x20000004

08007dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007df0:	b094      	sub	sp, #80	; 0x50
 8007df2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	647b      	str	r3, [r7, #68]	; 0x44
 8007df8:	2300      	movs	r3, #0
 8007dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e04:	4b79      	ldr	r3, [pc, #484]	; (8007fec <HAL_RCC_GetSysClockFreq+0x200>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f003 030c 	and.w	r3, r3, #12
 8007e0c:	2b08      	cmp	r3, #8
 8007e0e:	d00d      	beq.n	8007e2c <HAL_RCC_GetSysClockFreq+0x40>
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	f200 80e1 	bhi.w	8007fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <HAL_RCC_GetSysClockFreq+0x34>
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d003      	beq.n	8007e26 <HAL_RCC_GetSysClockFreq+0x3a>
 8007e1e:	e0db      	b.n	8007fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e20:	4b73      	ldr	r3, [pc, #460]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007e24:	e0db      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e26:	4b73      	ldr	r3, [pc, #460]	; (8007ff4 <HAL_RCC_GetSysClockFreq+0x208>)
 8007e28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e2a:	e0d8      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e2c:	4b6f      	ldr	r3, [pc, #444]	; (8007fec <HAL_RCC_GetSysClockFreq+0x200>)
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e36:	4b6d      	ldr	r3, [pc, #436]	; (8007fec <HAL_RCC_GetSysClockFreq+0x200>)
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d063      	beq.n	8007f0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e42:	4b6a      	ldr	r3, [pc, #424]	; (8007fec <HAL_RCC_GetSysClockFreq+0x200>)
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	099b      	lsrs	r3, r3, #6
 8007e48:	2200      	movs	r2, #0
 8007e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e54:	633b      	str	r3, [r7, #48]	; 0x30
 8007e56:	2300      	movs	r3, #0
 8007e58:	637b      	str	r3, [r7, #52]	; 0x34
 8007e5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e5e:	4622      	mov	r2, r4
 8007e60:	462b      	mov	r3, r5
 8007e62:	f04f 0000 	mov.w	r0, #0
 8007e66:	f04f 0100 	mov.w	r1, #0
 8007e6a:	0159      	lsls	r1, r3, #5
 8007e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e70:	0150      	lsls	r0, r2, #5
 8007e72:	4602      	mov	r2, r0
 8007e74:	460b      	mov	r3, r1
 8007e76:	4621      	mov	r1, r4
 8007e78:	1a51      	subs	r1, r2, r1
 8007e7a:	6139      	str	r1, [r7, #16]
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e90:	4659      	mov	r1, fp
 8007e92:	018b      	lsls	r3, r1, #6
 8007e94:	4651      	mov	r1, sl
 8007e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e9a:	4651      	mov	r1, sl
 8007e9c:	018a      	lsls	r2, r1, #6
 8007e9e:	4651      	mov	r1, sl
 8007ea0:	ebb2 0801 	subs.w	r8, r2, r1
 8007ea4:	4659      	mov	r1, fp
 8007ea6:	eb63 0901 	sbc.w	r9, r3, r1
 8007eaa:	f04f 0200 	mov.w	r2, #0
 8007eae:	f04f 0300 	mov.w	r3, #0
 8007eb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007eb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007eba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ebe:	4690      	mov	r8, r2
 8007ec0:	4699      	mov	r9, r3
 8007ec2:	4623      	mov	r3, r4
 8007ec4:	eb18 0303 	adds.w	r3, r8, r3
 8007ec8:	60bb      	str	r3, [r7, #8]
 8007eca:	462b      	mov	r3, r5
 8007ecc:	eb49 0303 	adc.w	r3, r9, r3
 8007ed0:	60fb      	str	r3, [r7, #12]
 8007ed2:	f04f 0200 	mov.w	r2, #0
 8007ed6:	f04f 0300 	mov.w	r3, #0
 8007eda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007ede:	4629      	mov	r1, r5
 8007ee0:	024b      	lsls	r3, r1, #9
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007ee8:	4621      	mov	r1, r4
 8007eea:	024a      	lsls	r2, r1, #9
 8007eec:	4610      	mov	r0, r2
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ef8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007efc:	f7f8 fea4 	bl	8000c48 <__aeabi_uldivmod>
 8007f00:	4602      	mov	r2, r0
 8007f02:	460b      	mov	r3, r1
 8007f04:	4613      	mov	r3, r2
 8007f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f08:	e058      	b.n	8007fbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f0a:	4b38      	ldr	r3, [pc, #224]	; (8007fec <HAL_RCC_GetSysClockFreq+0x200>)
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	099b      	lsrs	r3, r3, #6
 8007f10:	2200      	movs	r2, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	4611      	mov	r1, r2
 8007f16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f1a:	623b      	str	r3, [r7, #32]
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007f24:	4642      	mov	r2, r8
 8007f26:	464b      	mov	r3, r9
 8007f28:	f04f 0000 	mov.w	r0, #0
 8007f2c:	f04f 0100 	mov.w	r1, #0
 8007f30:	0159      	lsls	r1, r3, #5
 8007f32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f36:	0150      	lsls	r0, r2, #5
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	4641      	mov	r1, r8
 8007f3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007f42:	4649      	mov	r1, r9
 8007f44:	eb63 0b01 	sbc.w	fp, r3, r1
 8007f48:	f04f 0200 	mov.w	r2, #0
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007f54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007f58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007f5c:	ebb2 040a 	subs.w	r4, r2, sl
 8007f60:	eb63 050b 	sbc.w	r5, r3, fp
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	f04f 0300 	mov.w	r3, #0
 8007f6c:	00eb      	lsls	r3, r5, #3
 8007f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f72:	00e2      	lsls	r2, r4, #3
 8007f74:	4614      	mov	r4, r2
 8007f76:	461d      	mov	r5, r3
 8007f78:	4643      	mov	r3, r8
 8007f7a:	18e3      	adds	r3, r4, r3
 8007f7c:	603b      	str	r3, [r7, #0]
 8007f7e:	464b      	mov	r3, r9
 8007f80:	eb45 0303 	adc.w	r3, r5, r3
 8007f84:	607b      	str	r3, [r7, #4]
 8007f86:	f04f 0200 	mov.w	r2, #0
 8007f8a:	f04f 0300 	mov.w	r3, #0
 8007f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f92:	4629      	mov	r1, r5
 8007f94:	028b      	lsls	r3, r1, #10
 8007f96:	4621      	mov	r1, r4
 8007f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	028a      	lsls	r2, r1, #10
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	61bb      	str	r3, [r7, #24]
 8007faa:	61fa      	str	r2, [r7, #28]
 8007fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fb0:	f7f8 fe4a 	bl	8000c48 <__aeabi_uldivmod>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4613      	mov	r3, r2
 8007fba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	; (8007fec <HAL_RCC_GetSysClockFreq+0x200>)
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	0c1b      	lsrs	r3, r3, #16
 8007fc2:	f003 0303 	and.w	r3, r3, #3
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007fd6:	e002      	b.n	8007fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fd8:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007fda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3750      	adds	r7, #80	; 0x50
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fea:	bf00      	nop
 8007fec:	40023800 	.word	0x40023800
 8007ff0:	00f42400 	.word	0x00f42400
 8007ff4:	007a1200 	.word	0x007a1200

08007ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ffc:	4b03      	ldr	r3, [pc, #12]	; (800800c <HAL_RCC_GetHCLKFreq+0x14>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
}
 8008000:	4618      	mov	r0, r3
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	20000000 	.word	0x20000000

08008010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008014:	f7ff fff0 	bl	8007ff8 <HAL_RCC_GetHCLKFreq>
 8008018:	4602      	mov	r2, r0
 800801a:	4b05      	ldr	r3, [pc, #20]	; (8008030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	0a9b      	lsrs	r3, r3, #10
 8008020:	f003 0307 	and.w	r3, r3, #7
 8008024:	4903      	ldr	r1, [pc, #12]	; (8008034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008026:	5ccb      	ldrb	r3, [r1, r3]
 8008028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800802c:	4618      	mov	r0, r3
 800802e:	bd80      	pop	{r7, pc}
 8008030:	40023800 	.word	0x40023800
 8008034:	0800cb3c 	.word	0x0800cb3c

08008038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800803c:	f7ff ffdc 	bl	8007ff8 <HAL_RCC_GetHCLKFreq>
 8008040:	4602      	mov	r2, r0
 8008042:	4b05      	ldr	r3, [pc, #20]	; (8008058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	0b5b      	lsrs	r3, r3, #13
 8008048:	f003 0307 	and.w	r3, r3, #7
 800804c:	4903      	ldr	r1, [pc, #12]	; (800805c <HAL_RCC_GetPCLK2Freq+0x24>)
 800804e:	5ccb      	ldrb	r3, [r1, r3]
 8008050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008054:	4618      	mov	r0, r3
 8008056:	bd80      	pop	{r7, pc}
 8008058:	40023800 	.word	0x40023800
 800805c:	0800cb3c 	.word	0x0800cb3c

08008060 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	220f      	movs	r2, #15
 800806e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008070:	4b12      	ldr	r3, [pc, #72]	; (80080bc <HAL_RCC_GetClockConfig+0x5c>)
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	f003 0203 	and.w	r2, r3, #3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800807c:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <HAL_RCC_GetClockConfig+0x5c>)
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008088:	4b0c      	ldr	r3, [pc, #48]	; (80080bc <HAL_RCC_GetClockConfig+0x5c>)
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008094:	4b09      	ldr	r3, [pc, #36]	; (80080bc <HAL_RCC_GetClockConfig+0x5c>)
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	08db      	lsrs	r3, r3, #3
 800809a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80080a2:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <HAL_RCC_GetClockConfig+0x60>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0207 	and.w	r2, r3, #7
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	601a      	str	r2, [r3, #0]
}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	40023800 	.word	0x40023800
 80080c0:	40023c00 	.word	0x40023c00

080080c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e041      	b.n	800815a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d106      	bne.n	80080f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fa fd64 	bl	8002bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3304      	adds	r3, #4
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f000 fac4 	bl	8008690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b01      	cmp	r3, #1
 8008176:	d001      	beq.n	800817c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e04e      	b.n	800821a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2202      	movs	r2, #2
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f042 0201 	orr.w	r2, r2, #1
 8008192:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a23      	ldr	r2, [pc, #140]	; (8008228 <HAL_TIM_Base_Start_IT+0xc4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d022      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081a6:	d01d      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a1f      	ldr	r2, [pc, #124]	; (800822c <HAL_TIM_Base_Start_IT+0xc8>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d018      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a1e      	ldr	r2, [pc, #120]	; (8008230 <HAL_TIM_Base_Start_IT+0xcc>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d013      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a1c      	ldr	r2, [pc, #112]	; (8008234 <HAL_TIM_Base_Start_IT+0xd0>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d00e      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a1b      	ldr	r2, [pc, #108]	; (8008238 <HAL_TIM_Base_Start_IT+0xd4>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d009      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a19      	ldr	r2, [pc, #100]	; (800823c <HAL_TIM_Base_Start_IT+0xd8>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d004      	beq.n	80081e4 <HAL_TIM_Base_Start_IT+0x80>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a18      	ldr	r2, [pc, #96]	; (8008240 <HAL_TIM_Base_Start_IT+0xdc>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d111      	bne.n	8008208 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f003 0307 	and.w	r3, r3, #7
 80081ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b06      	cmp	r3, #6
 80081f4:	d010      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f042 0201 	orr.w	r2, r2, #1
 8008204:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008206:	e007      	b.n	8008218 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0201 	orr.w	r2, r2, #1
 8008216:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	40010000 	.word	0x40010000
 800822c:	40000400 	.word	0x40000400
 8008230:	40000800 	.word	0x40000800
 8008234:	40000c00 	.word	0x40000c00
 8008238:	40010400 	.word	0x40010400
 800823c:	40014000 	.word	0x40014000
 8008240:	40001800 	.word	0x40001800

08008244 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f022 0201 	bic.w	r2, r2, #1
 800825a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6a1a      	ldr	r2, [r3, #32]
 8008262:	f241 1311 	movw	r3, #4369	; 0x1111
 8008266:	4013      	ands	r3, r2
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10f      	bne.n	800828c <HAL_TIM_Base_Stop_IT+0x48>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6a1a      	ldr	r2, [r3, #32]
 8008272:	f240 4344 	movw	r3, #1092	; 0x444
 8008276:	4013      	ands	r3, r2
 8008278:	2b00      	cmp	r3, #0
 800827a:	d107      	bne.n	800828c <HAL_TIM_Base_Stop_IT+0x48>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f022 0201 	bic.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	f003 0302 	and.w	r3, r3, #2
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d122      	bne.n	80082fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d11b      	bne.n	80082fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f06f 0202 	mvn.w	r2, #2
 80082ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	f003 0303 	and.w	r3, r3, #3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f9b5 	bl	8008654 <HAL_TIM_IC_CaptureCallback>
 80082ea:	e005      	b.n	80082f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f9a7 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f9b8 	bl	8008668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	f003 0304 	and.w	r3, r3, #4
 8008308:	2b04      	cmp	r3, #4
 800830a:	d122      	bne.n	8008352 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	f003 0304 	and.w	r3, r3, #4
 8008316:	2b04      	cmp	r3, #4
 8008318:	d11b      	bne.n	8008352 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f06f 0204 	mvn.w	r2, #4
 8008322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f98b 	bl	8008654 <HAL_TIM_IC_CaptureCallback>
 800833e:	e005      	b.n	800834c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f97d 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f98e 	bl	8008668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	f003 0308 	and.w	r3, r3, #8
 800835c:	2b08      	cmp	r3, #8
 800835e:	d122      	bne.n	80083a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f003 0308 	and.w	r3, r3, #8
 800836a:	2b08      	cmp	r3, #8
 800836c:	d11b      	bne.n	80083a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f06f 0208 	mvn.w	r2, #8
 8008376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2204      	movs	r2, #4
 800837c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	f003 0303 	and.w	r3, r3, #3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f961 	bl	8008654 <HAL_TIM_IC_CaptureCallback>
 8008392:	e005      	b.n	80083a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f953 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f964 	bl	8008668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	f003 0310 	and.w	r3, r3, #16
 80083b0:	2b10      	cmp	r3, #16
 80083b2:	d122      	bne.n	80083fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f003 0310 	and.w	r3, r3, #16
 80083be:	2b10      	cmp	r3, #16
 80083c0:	d11b      	bne.n	80083fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f06f 0210 	mvn.w	r2, #16
 80083ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2208      	movs	r2, #8
 80083d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f937 	bl	8008654 <HAL_TIM_IC_CaptureCallback>
 80083e6:	e005      	b.n	80083f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f929 	bl	8008640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f93a 	bl	8008668 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	2b01      	cmp	r3, #1
 8008406:	d10e      	bne.n	8008426 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b01      	cmp	r3, #1
 8008414:	d107      	bne.n	8008426 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f06f 0201 	mvn.w	r2, #1
 800841e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7fa f8db 	bl	80025dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008430:	2b80      	cmp	r3, #128	; 0x80
 8008432:	d10e      	bne.n	8008452 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843e:	2b80      	cmp	r3, #128	; 0x80
 8008440:	d107      	bne.n	8008452 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800844a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fadf 	bl	8008a10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845c:	2b40      	cmp	r3, #64	; 0x40
 800845e:	d10e      	bne.n	800847e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846a:	2b40      	cmp	r3, #64	; 0x40
 800846c:	d107      	bne.n	800847e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 f8ff 	bl	800867c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	f003 0320 	and.w	r3, r3, #32
 8008488:	2b20      	cmp	r3, #32
 800848a:	d10e      	bne.n	80084aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f003 0320 	and.w	r3, r3, #32
 8008496:	2b20      	cmp	r3, #32
 8008498:	d107      	bne.n	80084aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f06f 0220 	mvn.w	r2, #32
 80084a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 faa9 	bl	80089fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084aa:	bf00      	nop
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084b2:	b580      	push	{r7, lr}
 80084b4:	b084      	sub	sp, #16
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
 80084ba:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d101      	bne.n	80084ce <HAL_TIM_ConfigClockSource+0x1c>
 80084ca:	2302      	movs	r3, #2
 80084cc:	e0b4      	b.n	8008638 <HAL_TIM_ConfigClockSource+0x186>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2202      	movs	r2, #2
 80084da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80084ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084f4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008506:	d03e      	beq.n	8008586 <HAL_TIM_ConfigClockSource+0xd4>
 8008508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800850c:	f200 8087 	bhi.w	800861e <HAL_TIM_ConfigClockSource+0x16c>
 8008510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008514:	f000 8086 	beq.w	8008624 <HAL_TIM_ConfigClockSource+0x172>
 8008518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800851c:	d87f      	bhi.n	800861e <HAL_TIM_ConfigClockSource+0x16c>
 800851e:	2b70      	cmp	r3, #112	; 0x70
 8008520:	d01a      	beq.n	8008558 <HAL_TIM_ConfigClockSource+0xa6>
 8008522:	2b70      	cmp	r3, #112	; 0x70
 8008524:	d87b      	bhi.n	800861e <HAL_TIM_ConfigClockSource+0x16c>
 8008526:	2b60      	cmp	r3, #96	; 0x60
 8008528:	d050      	beq.n	80085cc <HAL_TIM_ConfigClockSource+0x11a>
 800852a:	2b60      	cmp	r3, #96	; 0x60
 800852c:	d877      	bhi.n	800861e <HAL_TIM_ConfigClockSource+0x16c>
 800852e:	2b50      	cmp	r3, #80	; 0x50
 8008530:	d03c      	beq.n	80085ac <HAL_TIM_ConfigClockSource+0xfa>
 8008532:	2b50      	cmp	r3, #80	; 0x50
 8008534:	d873      	bhi.n	800861e <HAL_TIM_ConfigClockSource+0x16c>
 8008536:	2b40      	cmp	r3, #64	; 0x40
 8008538:	d058      	beq.n	80085ec <HAL_TIM_ConfigClockSource+0x13a>
 800853a:	2b40      	cmp	r3, #64	; 0x40
 800853c:	d86f      	bhi.n	800861e <HAL_TIM_ConfigClockSource+0x16c>
 800853e:	2b30      	cmp	r3, #48	; 0x30
 8008540:	d064      	beq.n	800860c <HAL_TIM_ConfigClockSource+0x15a>
 8008542:	2b30      	cmp	r3, #48	; 0x30
 8008544:	d86b      	bhi.n	800861e <HAL_TIM_ConfigClockSource+0x16c>
 8008546:	2b20      	cmp	r3, #32
 8008548:	d060      	beq.n	800860c <HAL_TIM_ConfigClockSource+0x15a>
 800854a:	2b20      	cmp	r3, #32
 800854c:	d867      	bhi.n	800861e <HAL_TIM_ConfigClockSource+0x16c>
 800854e:	2b00      	cmp	r3, #0
 8008550:	d05c      	beq.n	800860c <HAL_TIM_ConfigClockSource+0x15a>
 8008552:	2b10      	cmp	r3, #16
 8008554:	d05a      	beq.n	800860c <HAL_TIM_ConfigClockSource+0x15a>
 8008556:	e062      	b.n	800861e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6818      	ldr	r0, [r3, #0]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	6899      	ldr	r1, [r3, #8]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	68db      	ldr	r3, [r3, #12]
 8008568:	f000 f9ac 	bl	80088c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800857a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	609a      	str	r2, [r3, #8]
      break;
 8008584:	e04f      	b.n	8008626 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6818      	ldr	r0, [r3, #0]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	6899      	ldr	r1, [r3, #8]
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	f000 f995 	bl	80088c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689a      	ldr	r2, [r3, #8]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085a8:	609a      	str	r2, [r3, #8]
      break;
 80085aa:	e03c      	b.n	8008626 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	6859      	ldr	r1, [r3, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	461a      	mov	r2, r3
 80085ba:	f000 f909 	bl	80087d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2150      	movs	r1, #80	; 0x50
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 f962 	bl	800888e <TIM_ITRx_SetConfig>
      break;
 80085ca:	e02c      	b.n	8008626 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6818      	ldr	r0, [r3, #0]
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	6859      	ldr	r1, [r3, #4]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	68db      	ldr	r3, [r3, #12]
 80085d8:	461a      	mov	r2, r3
 80085da:	f000 f928 	bl	800882e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2160      	movs	r1, #96	; 0x60
 80085e4:	4618      	mov	r0, r3
 80085e6:	f000 f952 	bl	800888e <TIM_ITRx_SetConfig>
      break;
 80085ea:	e01c      	b.n	8008626 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	6859      	ldr	r1, [r3, #4]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	461a      	mov	r2, r3
 80085fa:	f000 f8e9 	bl	80087d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2140      	movs	r1, #64	; 0x40
 8008604:	4618      	mov	r0, r3
 8008606:	f000 f942 	bl	800888e <TIM_ITRx_SetConfig>
      break;
 800860a:	e00c      	b.n	8008626 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4619      	mov	r1, r3
 8008616:	4610      	mov	r0, r2
 8008618:	f000 f939 	bl	800888e <TIM_ITRx_SetConfig>
      break;
 800861c:	e003      	b.n	8008626 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800861e:	2301      	movs	r3, #1
 8008620:	73fb      	strb	r3, [r7, #15]
      break;
 8008622:	e000      	b.n	8008626 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008624:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008636:	7bfb      	ldrb	r3, [r7, #15]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008648:	bf00      	nop
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800865c:	bf00      	nop
 800865e:	370c      	adds	r7, #12
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800867c:	b480      	push	{r7}
 800867e:	b083      	sub	sp, #12
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a40      	ldr	r2, [pc, #256]	; (80087a4 <TIM_Base_SetConfig+0x114>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d013      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ae:	d00f      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a3d      	ldr	r2, [pc, #244]	; (80087a8 <TIM_Base_SetConfig+0x118>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d00b      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a3c      	ldr	r2, [pc, #240]	; (80087ac <TIM_Base_SetConfig+0x11c>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d007      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a3b      	ldr	r2, [pc, #236]	; (80087b0 <TIM_Base_SetConfig+0x120>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d003      	beq.n	80086d0 <TIM_Base_SetConfig+0x40>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a3a      	ldr	r2, [pc, #232]	; (80087b4 <TIM_Base_SetConfig+0x124>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d108      	bne.n	80086e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	4313      	orrs	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a2f      	ldr	r2, [pc, #188]	; (80087a4 <TIM_Base_SetConfig+0x114>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d02b      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f0:	d027      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a2c      	ldr	r2, [pc, #176]	; (80087a8 <TIM_Base_SetConfig+0x118>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d023      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a2b      	ldr	r2, [pc, #172]	; (80087ac <TIM_Base_SetConfig+0x11c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d01f      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a2a      	ldr	r2, [pc, #168]	; (80087b0 <TIM_Base_SetConfig+0x120>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d01b      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a29      	ldr	r2, [pc, #164]	; (80087b4 <TIM_Base_SetConfig+0x124>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d017      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a28      	ldr	r2, [pc, #160]	; (80087b8 <TIM_Base_SetConfig+0x128>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d013      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a27      	ldr	r2, [pc, #156]	; (80087bc <TIM_Base_SetConfig+0x12c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d00f      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a26      	ldr	r2, [pc, #152]	; (80087c0 <TIM_Base_SetConfig+0x130>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d00b      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a25      	ldr	r2, [pc, #148]	; (80087c4 <TIM_Base_SetConfig+0x134>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d007      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a24      	ldr	r2, [pc, #144]	; (80087c8 <TIM_Base_SetConfig+0x138>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d003      	beq.n	8008742 <TIM_Base_SetConfig+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a23      	ldr	r2, [pc, #140]	; (80087cc <TIM_Base_SetConfig+0x13c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d108      	bne.n	8008754 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4313      	orrs	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	4313      	orrs	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	689a      	ldr	r2, [r3, #8]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	681a      	ldr	r2, [r3, #0]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a0a      	ldr	r2, [pc, #40]	; (80087a4 <TIM_Base_SetConfig+0x114>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d003      	beq.n	8008788 <TIM_Base_SetConfig+0xf8>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a0c      	ldr	r2, [pc, #48]	; (80087b4 <TIM_Base_SetConfig+0x124>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d103      	bne.n	8008790 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	691a      	ldr	r2, [r3, #16]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	615a      	str	r2, [r3, #20]
}
 8008796:	bf00      	nop
 8008798:	3714      	adds	r7, #20
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	40010000 	.word	0x40010000
 80087a8:	40000400 	.word	0x40000400
 80087ac:	40000800 	.word	0x40000800
 80087b0:	40000c00 	.word	0x40000c00
 80087b4:	40010400 	.word	0x40010400
 80087b8:	40014000 	.word	0x40014000
 80087bc:	40014400 	.word	0x40014400
 80087c0:	40014800 	.word	0x40014800
 80087c4:	40001800 	.word	0x40001800
 80087c8:	40001c00 	.word	0x40001c00
 80087cc:	40002000 	.word	0x40002000

080087d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	f023 0201 	bic.w	r2, r3, #1
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80087fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	011b      	lsls	r3, r3, #4
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	4313      	orrs	r3, r2
 8008804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f023 030a 	bic.w	r3, r3, #10
 800880c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4313      	orrs	r3, r2
 8008814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	621a      	str	r2, [r3, #32]
}
 8008822:	bf00      	nop
 8008824:	371c      	adds	r7, #28
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800882e:	b480      	push	{r7}
 8008830:	b087      	sub	sp, #28
 8008832:	af00      	add	r7, sp, #0
 8008834:	60f8      	str	r0, [r7, #12]
 8008836:	60b9      	str	r1, [r7, #8]
 8008838:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f023 0210 	bic.w	r2, r3, #16
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6a1b      	ldr	r3, [r3, #32]
 8008850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008858:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	031b      	lsls	r3, r3, #12
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	4313      	orrs	r3, r2
 8008862:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800886a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	4313      	orrs	r3, r2
 8008874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	621a      	str	r2, [r3, #32]
}
 8008882:	bf00      	nop
 8008884:	371c      	adds	r7, #28
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800888e:	b480      	push	{r7}
 8008890:	b085      	sub	sp, #20
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f043 0307 	orr.w	r3, r3, #7
 80088b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	609a      	str	r2, [r3, #8]
}
 80088b8:	bf00      	nop
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	021a      	lsls	r2, r3, #8
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	431a      	orrs	r2, r3
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	609a      	str	r2, [r3, #8]
}
 80088f8:	bf00      	nop
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008914:	2b01      	cmp	r3, #1
 8008916:	d101      	bne.n	800891c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008918:	2302      	movs	r3, #2
 800891a:	e05a      	b.n	80089d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008942:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	4313      	orrs	r3, r2
 800894c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a21      	ldr	r2, [pc, #132]	; (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d022      	beq.n	80089a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008968:	d01d      	beq.n	80089a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d018      	beq.n	80089a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a1b      	ldr	r2, [pc, #108]	; (80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d013      	beq.n	80089a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a1a      	ldr	r2, [pc, #104]	; (80089ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d00e      	beq.n	80089a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a18      	ldr	r2, [pc, #96]	; (80089f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d009      	beq.n	80089a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a17      	ldr	r2, [pc, #92]	; (80089f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d004      	beq.n	80089a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a15      	ldr	r2, [pc, #84]	; (80089f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d10c      	bne.n	80089c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	40010000 	.word	0x40010000
 80089e4:	40000400 	.word	0x40000400
 80089e8:	40000800 	.word	0x40000800
 80089ec:	40000c00 	.word	0x40000c00
 80089f0:	40010400 	.word	0x40010400
 80089f4:	40014000 	.word	0x40014000
 80089f8:	40001800 	.word	0x40001800

080089fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e03f      	b.n	8008ab6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d106      	bne.n	8008a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7fa f94a 	bl	8002ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2224      	movs	r2, #36	; 0x24
 8008a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68da      	ldr	r2, [r3, #12]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fdc7 	bl	80095fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	691a      	ldr	r2, [r3, #16]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	695a      	ldr	r2, [r3, #20]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68da      	ldr	r2, [r3, #12]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2220      	movs	r2, #32
 8008ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
	...

08008ac0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b08c      	sub	sp, #48	; 0x30
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	4613      	mov	r3, r2
 8008acc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b20      	cmp	r3, #32
 8008ad8:	d165      	bne.n	8008ba6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <HAL_UART_Transmit_DMA+0x26>
 8008ae0:	88fb      	ldrh	r3, [r7, #6]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e05e      	b.n	8008ba8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d101      	bne.n	8008af8 <HAL_UART_Transmit_DMA+0x38>
 8008af4:	2302      	movs	r3, #2
 8008af6:	e057      	b.n	8008ba8 <HAL_UART_Transmit_DMA+0xe8>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008b00:	68ba      	ldr	r2, [r7, #8]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	88fa      	ldrh	r2, [r7, #6]
 8008b0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	88fa      	ldrh	r2, [r7, #6]
 8008b10:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2221      	movs	r2, #33	; 0x21
 8008b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b24:	4a22      	ldr	r2, [pc, #136]	; (8008bb0 <HAL_UART_Transmit_DMA+0xf0>)
 8008b26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2c:	4a21      	ldr	r2, [pc, #132]	; (8008bb4 <HAL_UART_Transmit_DMA+0xf4>)
 8008b2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b34:	4a20      	ldr	r2, [pc, #128]	; (8008bb8 <HAL_UART_Transmit_DMA+0xf8>)
 8008b36:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008b40:	f107 0308 	add.w	r3, r7, #8
 8008b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	6819      	ldr	r1, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3304      	adds	r3, #4
 8008b54:	461a      	mov	r2, r3
 8008b56:	88fb      	ldrh	r3, [r7, #6]
 8008b58:	f7fb fdac 	bl	80046b4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008b64:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	3314      	adds	r3, #20
 8008b74:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b76:	69bb      	ldr	r3, [r7, #24]
 8008b78:	e853 3f00 	ldrex	r3, [r3]
 8008b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3314      	adds	r3, #20
 8008b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b8e:	627a      	str	r2, [r7, #36]	; 0x24
 8008b90:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b92:	6a39      	ldr	r1, [r7, #32]
 8008b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b96:	e841 2300 	strex	r3, r2, [r1]
 8008b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1e5      	bne.n	8008b6e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	e000      	b.n	8008ba8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008ba6:	2302      	movs	r3, #2
  }
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3730      	adds	r7, #48	; 0x30
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	0800912d 	.word	0x0800912d
 8008bb4:	080091c7 	.word	0x080091c7
 8008bb8:	080091e3 	.word	0x080091e3

08008bbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b0ba      	sub	sp, #232	; 0xe8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bf2:	f003 030f 	and.w	r3, r3, #15
 8008bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008bfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10f      	bne.n	8008c22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c06:	f003 0320 	and.w	r3, r3, #32
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d009      	beq.n	8008c22 <HAL_UART_IRQHandler+0x66>
 8008c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c12:	f003 0320 	and.w	r3, r3, #32
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fc32 	bl	8009484 <UART_Receive_IT>
      return;
 8008c20:	e256      	b.n	80090d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 80de 	beq.w	8008de8 <HAL_UART_IRQHandler+0x22c>
 8008c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c30:	f003 0301 	and.w	r3, r3, #1
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d106      	bne.n	8008c46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f000 80d1 	beq.w	8008de8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00b      	beq.n	8008c6a <HAL_UART_IRQHandler+0xae>
 8008c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d005      	beq.n	8008c6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c62:	f043 0201 	orr.w	r2, r3, #1
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c6e:	f003 0304 	and.w	r3, r3, #4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00b      	beq.n	8008c8e <HAL_UART_IRQHandler+0xd2>
 8008c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d005      	beq.n	8008c8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c86:	f043 0202 	orr.w	r2, r3, #2
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00b      	beq.n	8008cb2 <HAL_UART_IRQHandler+0xf6>
 8008c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d005      	beq.n	8008cb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	f043 0204 	orr.w	r2, r3, #4
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cb6:	f003 0308 	and.w	r3, r3, #8
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d011      	beq.n	8008ce2 <HAL_UART_IRQHandler+0x126>
 8008cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d105      	bne.n	8008cd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d005      	beq.n	8008ce2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cda:	f043 0208 	orr.w	r2, r3, #8
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 81ed 	beq.w	80090c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf0:	f003 0320 	and.w	r3, r3, #32
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d008      	beq.n	8008d0a <HAL_UART_IRQHandler+0x14e>
 8008cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fbbd 	bl	8009484 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d14:	2b40      	cmp	r3, #64	; 0x40
 8008d16:	bf0c      	ite	eq
 8008d18:	2301      	moveq	r3, #1
 8008d1a:	2300      	movne	r3, #0
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d26:	f003 0308 	and.w	r3, r3, #8
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d103      	bne.n	8008d36 <HAL_UART_IRQHandler+0x17a>
 8008d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d04f      	beq.n	8008dd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fac5 	bl	80092c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d46:	2b40      	cmp	r3, #64	; 0x40
 8008d48:	d141      	bne.n	8008dce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3314      	adds	r3, #20
 8008d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3314      	adds	r3, #20
 8008d72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d86:	e841 2300 	strex	r3, r2, [r1]
 8008d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1d9      	bne.n	8008d4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d013      	beq.n	8008dc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da2:	4a7d      	ldr	r2, [pc, #500]	; (8008f98 <HAL_UART_IRQHandler+0x3dc>)
 8008da4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fb fd4a 	bl	8004844 <HAL_DMA_Abort_IT>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d016      	beq.n	8008de4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc4:	e00e      	b.n	8008de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f99a 	bl	8009100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dcc:	e00a      	b.n	8008de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f996 	bl	8009100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd4:	e006      	b.n	8008de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f992 	bl	8009100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008de2:	e170      	b.n	80090c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de4:	bf00      	nop
    return;
 8008de6:	e16e      	b.n	80090c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	f040 814a 	bne.w	8009086 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008df6:	f003 0310 	and.w	r3, r3, #16
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f000 8143 	beq.w	8009086 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e04:	f003 0310 	and.w	r3, r3, #16
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 813c 	beq.w	8009086 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60bb      	str	r3, [r7, #8]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	60bb      	str	r3, [r7, #8]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	60bb      	str	r3, [r7, #8]
 8008e22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2e:	2b40      	cmp	r3, #64	; 0x40
 8008e30:	f040 80b4 	bne.w	8008f9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 8140 	beq.w	80090ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e52:	429a      	cmp	r2, r3
 8008e54:	f080 8139 	bcs.w	80090ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6a:	f000 8088 	beq.w	8008f7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	330c      	adds	r3, #12
 8008e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e7c:	e853 3f00 	ldrex	r3, [r3]
 8008e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	330c      	adds	r3, #12
 8008e96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008e9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1d9      	bne.n	8008e6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3314      	adds	r3, #20
 8008ec0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ec4:	e853 3f00 	ldrex	r3, [r3]
 8008ec8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ecc:	f023 0301 	bic.w	r3, r3, #1
 8008ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3314      	adds	r3, #20
 8008eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008ede:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008eea:	e841 2300 	strex	r3, r2, [r1]
 8008eee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1e1      	bne.n	8008eba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3314      	adds	r3, #20
 8008efc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f00:	e853 3f00 	ldrex	r3, [r3]
 8008f04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3314      	adds	r3, #20
 8008f16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f22:	e841 2300 	strex	r3, r2, [r1]
 8008f26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d1e3      	bne.n	8008ef6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2220      	movs	r2, #32
 8008f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	330c      	adds	r3, #12
 8008f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f46:	e853 3f00 	ldrex	r3, [r3]
 8008f4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f4e:	f023 0310 	bic.w	r3, r3, #16
 8008f52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	330c      	adds	r3, #12
 8008f5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f60:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e3      	bne.n	8008f3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7fb fbf3 	bl	8004764 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f8c0 	bl	8009114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f94:	e099      	b.n	80090ca <HAL_UART_IRQHandler+0x50e>
 8008f96:	bf00      	nop
 8008f98:	0800938d 	.word	0x0800938d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 808b 	beq.w	80090ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 8086 	beq.w	80090ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	330c      	adds	r3, #12
 8008fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	330c      	adds	r3, #12
 8008fe2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008fe6:	647a      	str	r2, [r7, #68]	; 0x44
 8008fe8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e3      	bne.n	8008fc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3314      	adds	r3, #20
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009004:	e853 3f00 	ldrex	r3, [r3]
 8009008:	623b      	str	r3, [r7, #32]
   return(result);
 800900a:	6a3b      	ldr	r3, [r7, #32]
 800900c:	f023 0301 	bic.w	r3, r3, #1
 8009010:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3314      	adds	r3, #20
 800901a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800901e:	633a      	str	r2, [r7, #48]	; 0x30
 8009020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e3      	bne.n	8008ffa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2220      	movs	r2, #32
 8009036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	330c      	adds	r3, #12
 8009046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	e853 3f00 	ldrex	r3, [r3]
 800904e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f023 0310 	bic.w	r3, r3, #16
 8009056:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	330c      	adds	r3, #12
 8009060:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009064:	61fa      	str	r2, [r7, #28]
 8009066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009068:	69b9      	ldr	r1, [r7, #24]
 800906a:	69fa      	ldr	r2, [r7, #28]
 800906c:	e841 2300 	strex	r3, r2, [r1]
 8009070:	617b      	str	r3, [r7, #20]
   return(result);
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d1e3      	bne.n	8009040 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800907c:	4619      	mov	r1, r3
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f848 	bl	8009114 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009084:	e023      	b.n	80090ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800908a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800908e:	2b00      	cmp	r3, #0
 8009090:	d009      	beq.n	80090a6 <HAL_UART_IRQHandler+0x4ea>
 8009092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f988 	bl	80093b4 <UART_Transmit_IT>
    return;
 80090a4:	e014      	b.n	80090d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80090a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00e      	beq.n	80090d0 <HAL_UART_IRQHandler+0x514>
 80090b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d008      	beq.n	80090d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f9c8 	bl	8009454 <UART_EndTransmit_IT>
    return;
 80090c4:	e004      	b.n	80090d0 <HAL_UART_IRQHandler+0x514>
    return;
 80090c6:	bf00      	nop
 80090c8:	e002      	b.n	80090d0 <HAL_UART_IRQHandler+0x514>
      return;
 80090ca:	bf00      	nop
 80090cc:	e000      	b.n	80090d0 <HAL_UART_IRQHandler+0x514>
      return;
 80090ce:	bf00      	nop
  }
}
 80090d0:	37e8      	adds	r7, #232	; 0xe8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop

080090d8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b090      	sub	sp, #64	; 0x40
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009144:	2b00      	cmp	r3, #0
 8009146:	d137      	bne.n	80091b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800914a:	2200      	movs	r2, #0
 800914c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800914e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3314      	adds	r3, #20
 8009154:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	623b      	str	r3, [r7, #32]
   return(result);
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009164:	63bb      	str	r3, [r7, #56]	; 0x38
 8009166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3314      	adds	r3, #20
 800916c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800916e:	633a      	str	r2, [r7, #48]	; 0x30
 8009170:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800917c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e5      	bne.n	800914e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	330c      	adds	r3, #12
 8009188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	e853 3f00 	ldrex	r3, [r3]
 8009190:	60fb      	str	r3, [r7, #12]
   return(result);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009198:	637b      	str	r3, [r7, #52]	; 0x34
 800919a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	330c      	adds	r3, #12
 80091a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091a2:	61fa      	str	r2, [r7, #28]
 80091a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	69b9      	ldr	r1, [r7, #24]
 80091a8:	69fa      	ldr	r2, [r7, #28]
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	617b      	str	r3, [r7, #20]
   return(result);
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e5      	bne.n	8009182 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091b6:	e002      	b.n	80091be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80091b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80091ba:	f7f8 f925 	bl	8001408 <HAL_UART_TxCpltCallback>
}
 80091be:	bf00      	nop
 80091c0:	3740      	adds	r7, #64	; 0x40
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}

080091c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b084      	sub	sp, #16
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f7ff ff7f 	bl	80090d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091fe:	2b80      	cmp	r3, #128	; 0x80
 8009200:	bf0c      	ite	eq
 8009202:	2301      	moveq	r3, #1
 8009204:	2300      	movne	r3, #0
 8009206:	b2db      	uxtb	r3, r3
 8009208:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009210:	b2db      	uxtb	r3, r3
 8009212:	2b21      	cmp	r3, #33	; 0x21
 8009214:	d108      	bne.n	8009228 <UART_DMAError+0x46>
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d005      	beq.n	8009228 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2200      	movs	r2, #0
 8009220:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009222:	68b8      	ldr	r0, [r7, #8]
 8009224:	f000 f827 	bl	8009276 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009232:	2b40      	cmp	r3, #64	; 0x40
 8009234:	bf0c      	ite	eq
 8009236:	2301      	moveq	r3, #1
 8009238:	2300      	movne	r3, #0
 800923a:	b2db      	uxtb	r3, r3
 800923c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b22      	cmp	r3, #34	; 0x22
 8009248:	d108      	bne.n	800925c <UART_DMAError+0x7a>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d005      	beq.n	800925c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	2200      	movs	r2, #0
 8009254:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009256:	68b8      	ldr	r0, [r7, #8]
 8009258:	f000 f835 	bl	80092c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009260:	f043 0210 	orr.w	r2, r3, #16
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009268:	68b8      	ldr	r0, [r7, #8]
 800926a:	f7ff ff49 	bl	8009100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800926e:	bf00      	nop
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009276:	b480      	push	{r7}
 8009278:	b089      	sub	sp, #36	; 0x24
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	330c      	adds	r3, #12
 8009284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	e853 3f00 	ldrex	r3, [r3]
 800928c:	60bb      	str	r3, [r7, #8]
   return(result);
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009294:	61fb      	str	r3, [r7, #28]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	330c      	adds	r3, #12
 800929c:	69fa      	ldr	r2, [r7, #28]
 800929e:	61ba      	str	r2, [r7, #24]
 80092a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a2:	6979      	ldr	r1, [r7, #20]
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	e841 2300 	strex	r3, r2, [r1]
 80092aa:	613b      	str	r3, [r7, #16]
   return(result);
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1e5      	bne.n	800927e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2220      	movs	r2, #32
 80092b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80092ba:	bf00      	nop
 80092bc:	3724      	adds	r7, #36	; 0x24
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b095      	sub	sp, #84	; 0x54
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	330c      	adds	r3, #12
 80092d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	330c      	adds	r3, #12
 80092ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092ee:	643a      	str	r2, [r7, #64]	; 0x40
 80092f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092f6:	e841 2300 	strex	r3, r2, [r1]
 80092fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d1e5      	bne.n	80092ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3314      	adds	r3, #20
 8009308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	e853 3f00 	ldrex	r3, [r3]
 8009310:	61fb      	str	r3, [r7, #28]
   return(result);
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	f023 0301 	bic.w	r3, r3, #1
 8009318:	64bb      	str	r3, [r7, #72]	; 0x48
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3314      	adds	r3, #20
 8009320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009322:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009324:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800932a:	e841 2300 	strex	r3, r2, [r1]
 800932e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1e5      	bne.n	8009302 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933a:	2b01      	cmp	r3, #1
 800933c:	d119      	bne.n	8009372 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	330c      	adds	r3, #12
 8009344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	60bb      	str	r3, [r7, #8]
   return(result);
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	f023 0310 	bic.w	r3, r3, #16
 8009354:	647b      	str	r3, [r7, #68]	; 0x44
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	330c      	adds	r3, #12
 800935c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800935e:	61ba      	str	r2, [r7, #24]
 8009360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009362:	6979      	ldr	r1, [r7, #20]
 8009364:	69ba      	ldr	r2, [r7, #24]
 8009366:	e841 2300 	strex	r3, r2, [r1]
 800936a:	613b      	str	r3, [r7, #16]
   return(result);
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1e5      	bne.n	800933e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2220      	movs	r2, #32
 8009376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009380:	bf00      	nop
 8009382:	3754      	adds	r7, #84	; 0x54
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009398:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2200      	movs	r2, #0
 80093a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f7ff feaa 	bl	8009100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093ac:	bf00      	nop
 80093ae:	3710      	adds	r7, #16
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	2b21      	cmp	r3, #33	; 0x21
 80093c6:	d13e      	bne.n	8009446 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d0:	d114      	bne.n	80093fc <UART_Transmit_IT+0x48>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d110      	bne.n	80093fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a1b      	ldr	r3, [r3, #32]
 80093de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	881b      	ldrh	r3, [r3, #0]
 80093e4:	461a      	mov	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80093ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a1b      	ldr	r3, [r3, #32]
 80093f4:	1c9a      	adds	r2, r3, #2
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	621a      	str	r2, [r3, #32]
 80093fa:	e008      	b.n	800940e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a1b      	ldr	r3, [r3, #32]
 8009400:	1c59      	adds	r1, r3, #1
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	6211      	str	r1, [r2, #32]
 8009406:	781a      	ldrb	r2, [r3, #0]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009412:	b29b      	uxth	r3, r3
 8009414:	3b01      	subs	r3, #1
 8009416:	b29b      	uxth	r3, r3
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	4619      	mov	r1, r3
 800941c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10f      	bne.n	8009442 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	68da      	ldr	r2, [r3, #12]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009430:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68da      	ldr	r2, [r3, #12]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009440:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009442:	2300      	movs	r3, #0
 8009444:	e000      	b.n	8009448 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009446:	2302      	movs	r3, #2
  }
}
 8009448:	4618      	mov	r0, r3
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	68da      	ldr	r2, [r3, #12]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800946a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2220      	movs	r2, #32
 8009470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7f7 ffc7 	bl	8001408 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08c      	sub	sp, #48	; 0x30
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b22      	cmp	r3, #34	; 0x22
 8009496:	f040 80ab 	bne.w	80095f0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a2:	d117      	bne.n	80094d4 <UART_Receive_IT+0x50>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d113      	bne.n	80094d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80094ac:	2300      	movs	r3, #0
 80094ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	b29b      	uxth	r3, r3
 80094be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094cc:	1c9a      	adds	r2, r3, #2
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	629a      	str	r2, [r3, #40]	; 0x28
 80094d2:	e026      	b.n	8009522 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e6:	d007      	beq.n	80094f8 <UART_Receive_IT+0x74>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10a      	bne.n	8009506 <UART_Receive_IT+0x82>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d106      	bne.n	8009506 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009502:	701a      	strb	r2, [r3, #0]
 8009504:	e008      	b.n	8009518 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	b2db      	uxtb	r3, r3
 800950e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009512:	b2da      	uxtb	r2, r3
 8009514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009516:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951c:	1c5a      	adds	r2, r3, #1
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009526:	b29b      	uxth	r3, r3
 8009528:	3b01      	subs	r3, #1
 800952a:	b29b      	uxth	r3, r3
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	4619      	mov	r1, r3
 8009530:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009532:	2b00      	cmp	r3, #0
 8009534:	d15a      	bne.n	80095ec <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f022 0220 	bic.w	r2, r2, #32
 8009544:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68da      	ldr	r2, [r3, #12]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009554:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	695a      	ldr	r2, [r3, #20]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f022 0201 	bic.w	r2, r2, #1
 8009564:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2220      	movs	r2, #32
 800956a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009572:	2b01      	cmp	r3, #1
 8009574:	d135      	bne.n	80095e2 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	330c      	adds	r3, #12
 8009582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	e853 3f00 	ldrex	r3, [r3]
 800958a:	613b      	str	r3, [r7, #16]
   return(result);
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f023 0310 	bic.w	r3, r3, #16
 8009592:	627b      	str	r3, [r7, #36]	; 0x24
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	330c      	adds	r3, #12
 800959a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800959c:	623a      	str	r2, [r7, #32]
 800959e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a0:	69f9      	ldr	r1, [r7, #28]
 80095a2:	6a3a      	ldr	r2, [r7, #32]
 80095a4:	e841 2300 	strex	r3, r2, [r1]
 80095a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d1e5      	bne.n	800957c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0310 	and.w	r3, r3, #16
 80095ba:	2b10      	cmp	r3, #16
 80095bc:	d10a      	bne.n	80095d4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80095be:	2300      	movs	r3, #0
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	60fb      	str	r3, [r7, #12]
 80095d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff fd9a 	bl	8009114 <HAL_UARTEx_RxEventCallback>
 80095e0:	e002      	b.n	80095e8 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff fd82 	bl	80090ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80095e8:	2300      	movs	r3, #0
 80095ea:	e002      	b.n	80095f2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	e000      	b.n	80095f2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80095f0:	2302      	movs	r3, #2
  }
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3730      	adds	r7, #48	; 0x30
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
	...

080095fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80095fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009600:	b0c0      	sub	sp, #256	; 0x100
 8009602:	af00      	add	r7, sp, #0
 8009604:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009618:	68d9      	ldr	r1, [r3, #12]
 800961a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	ea40 0301 	orr.w	r3, r0, r1
 8009624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800962a:	689a      	ldr	r2, [r3, #8]
 800962c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	431a      	orrs	r2, r3
 8009634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	431a      	orrs	r2, r3
 800963c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	4313      	orrs	r3, r2
 8009644:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009654:	f021 010c 	bic.w	r1, r1, #12
 8009658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009662:	430b      	orrs	r3, r1
 8009664:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009676:	6999      	ldr	r1, [r3, #24]
 8009678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	ea40 0301 	orr.w	r3, r0, r1
 8009682:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	4b8f      	ldr	r3, [pc, #572]	; (80098c8 <UART_SetConfig+0x2cc>)
 800968c:	429a      	cmp	r2, r3
 800968e:	d005      	beq.n	800969c <UART_SetConfig+0xa0>
 8009690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	4b8d      	ldr	r3, [pc, #564]	; (80098cc <UART_SetConfig+0x2d0>)
 8009698:	429a      	cmp	r2, r3
 800969a:	d104      	bne.n	80096a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800969c:	f7fe fccc 	bl	8008038 <HAL_RCC_GetPCLK2Freq>
 80096a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80096a4:	e003      	b.n	80096ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80096a6:	f7fe fcb3 	bl	8008010 <HAL_RCC_GetPCLK1Freq>
 80096aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b2:	69db      	ldr	r3, [r3, #28]
 80096b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096b8:	f040 810c 	bne.w	80098d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80096bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096c0:	2200      	movs	r2, #0
 80096c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80096ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80096ce:	4622      	mov	r2, r4
 80096d0:	462b      	mov	r3, r5
 80096d2:	1891      	adds	r1, r2, r2
 80096d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80096d6:	415b      	adcs	r3, r3
 80096d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80096de:	4621      	mov	r1, r4
 80096e0:	eb12 0801 	adds.w	r8, r2, r1
 80096e4:	4629      	mov	r1, r5
 80096e6:	eb43 0901 	adc.w	r9, r3, r1
 80096ea:	f04f 0200 	mov.w	r2, #0
 80096ee:	f04f 0300 	mov.w	r3, #0
 80096f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096fe:	4690      	mov	r8, r2
 8009700:	4699      	mov	r9, r3
 8009702:	4623      	mov	r3, r4
 8009704:	eb18 0303 	adds.w	r3, r8, r3
 8009708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800970c:	462b      	mov	r3, r5
 800970e:	eb49 0303 	adc.w	r3, r9, r3
 8009712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009722:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800972a:	460b      	mov	r3, r1
 800972c:	18db      	adds	r3, r3, r3
 800972e:	653b      	str	r3, [r7, #80]	; 0x50
 8009730:	4613      	mov	r3, r2
 8009732:	eb42 0303 	adc.w	r3, r2, r3
 8009736:	657b      	str	r3, [r7, #84]	; 0x54
 8009738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800973c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009740:	f7f7 fa82 	bl	8000c48 <__aeabi_uldivmod>
 8009744:	4602      	mov	r2, r0
 8009746:	460b      	mov	r3, r1
 8009748:	4b61      	ldr	r3, [pc, #388]	; (80098d0 <UART_SetConfig+0x2d4>)
 800974a:	fba3 2302 	umull	r2, r3, r3, r2
 800974e:	095b      	lsrs	r3, r3, #5
 8009750:	011c      	lsls	r4, r3, #4
 8009752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009756:	2200      	movs	r2, #0
 8009758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800975c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009760:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009764:	4642      	mov	r2, r8
 8009766:	464b      	mov	r3, r9
 8009768:	1891      	adds	r1, r2, r2
 800976a:	64b9      	str	r1, [r7, #72]	; 0x48
 800976c:	415b      	adcs	r3, r3
 800976e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009770:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009774:	4641      	mov	r1, r8
 8009776:	eb12 0a01 	adds.w	sl, r2, r1
 800977a:	4649      	mov	r1, r9
 800977c:	eb43 0b01 	adc.w	fp, r3, r1
 8009780:	f04f 0200 	mov.w	r2, #0
 8009784:	f04f 0300 	mov.w	r3, #0
 8009788:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800978c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009794:	4692      	mov	sl, r2
 8009796:	469b      	mov	fp, r3
 8009798:	4643      	mov	r3, r8
 800979a:	eb1a 0303 	adds.w	r3, sl, r3
 800979e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097a2:	464b      	mov	r3, r9
 80097a4:	eb4b 0303 	adc.w	r3, fp, r3
 80097a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80097ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80097bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80097c0:	460b      	mov	r3, r1
 80097c2:	18db      	adds	r3, r3, r3
 80097c4:	643b      	str	r3, [r7, #64]	; 0x40
 80097c6:	4613      	mov	r3, r2
 80097c8:	eb42 0303 	adc.w	r3, r2, r3
 80097cc:	647b      	str	r3, [r7, #68]	; 0x44
 80097ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80097d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80097d6:	f7f7 fa37 	bl	8000c48 <__aeabi_uldivmod>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	4611      	mov	r1, r2
 80097e0:	4b3b      	ldr	r3, [pc, #236]	; (80098d0 <UART_SetConfig+0x2d4>)
 80097e2:	fba3 2301 	umull	r2, r3, r3, r1
 80097e6:	095b      	lsrs	r3, r3, #5
 80097e8:	2264      	movs	r2, #100	; 0x64
 80097ea:	fb02 f303 	mul.w	r3, r2, r3
 80097ee:	1acb      	subs	r3, r1, r3
 80097f0:	00db      	lsls	r3, r3, #3
 80097f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80097f6:	4b36      	ldr	r3, [pc, #216]	; (80098d0 <UART_SetConfig+0x2d4>)
 80097f8:	fba3 2302 	umull	r2, r3, r3, r2
 80097fc:	095b      	lsrs	r3, r3, #5
 80097fe:	005b      	lsls	r3, r3, #1
 8009800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009804:	441c      	add	r4, r3
 8009806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800980a:	2200      	movs	r2, #0
 800980c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009810:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009814:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009818:	4642      	mov	r2, r8
 800981a:	464b      	mov	r3, r9
 800981c:	1891      	adds	r1, r2, r2
 800981e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009820:	415b      	adcs	r3, r3
 8009822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009828:	4641      	mov	r1, r8
 800982a:	1851      	adds	r1, r2, r1
 800982c:	6339      	str	r1, [r7, #48]	; 0x30
 800982e:	4649      	mov	r1, r9
 8009830:	414b      	adcs	r3, r1
 8009832:	637b      	str	r3, [r7, #52]	; 0x34
 8009834:	f04f 0200 	mov.w	r2, #0
 8009838:	f04f 0300 	mov.w	r3, #0
 800983c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009840:	4659      	mov	r1, fp
 8009842:	00cb      	lsls	r3, r1, #3
 8009844:	4651      	mov	r1, sl
 8009846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800984a:	4651      	mov	r1, sl
 800984c:	00ca      	lsls	r2, r1, #3
 800984e:	4610      	mov	r0, r2
 8009850:	4619      	mov	r1, r3
 8009852:	4603      	mov	r3, r0
 8009854:	4642      	mov	r2, r8
 8009856:	189b      	adds	r3, r3, r2
 8009858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800985c:	464b      	mov	r3, r9
 800985e:	460a      	mov	r2, r1
 8009860:	eb42 0303 	adc.w	r3, r2, r3
 8009864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009874:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009878:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800987c:	460b      	mov	r3, r1
 800987e:	18db      	adds	r3, r3, r3
 8009880:	62bb      	str	r3, [r7, #40]	; 0x28
 8009882:	4613      	mov	r3, r2
 8009884:	eb42 0303 	adc.w	r3, r2, r3
 8009888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800988a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800988e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009892:	f7f7 f9d9 	bl	8000c48 <__aeabi_uldivmod>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	4b0d      	ldr	r3, [pc, #52]	; (80098d0 <UART_SetConfig+0x2d4>)
 800989c:	fba3 1302 	umull	r1, r3, r3, r2
 80098a0:	095b      	lsrs	r3, r3, #5
 80098a2:	2164      	movs	r1, #100	; 0x64
 80098a4:	fb01 f303 	mul.w	r3, r1, r3
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	00db      	lsls	r3, r3, #3
 80098ac:	3332      	adds	r3, #50	; 0x32
 80098ae:	4a08      	ldr	r2, [pc, #32]	; (80098d0 <UART_SetConfig+0x2d4>)
 80098b0:	fba2 2303 	umull	r2, r3, r2, r3
 80098b4:	095b      	lsrs	r3, r3, #5
 80098b6:	f003 0207 	and.w	r2, r3, #7
 80098ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4422      	add	r2, r4
 80098c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80098c4:	e105      	b.n	8009ad2 <UART_SetConfig+0x4d6>
 80098c6:	bf00      	nop
 80098c8:	40011000 	.word	0x40011000
 80098cc:	40011400 	.word	0x40011400
 80098d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80098d8:	2200      	movs	r2, #0
 80098da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80098de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80098e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80098e6:	4642      	mov	r2, r8
 80098e8:	464b      	mov	r3, r9
 80098ea:	1891      	adds	r1, r2, r2
 80098ec:	6239      	str	r1, [r7, #32]
 80098ee:	415b      	adcs	r3, r3
 80098f0:	627b      	str	r3, [r7, #36]	; 0x24
 80098f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098f6:	4641      	mov	r1, r8
 80098f8:	1854      	adds	r4, r2, r1
 80098fa:	4649      	mov	r1, r9
 80098fc:	eb43 0501 	adc.w	r5, r3, r1
 8009900:	f04f 0200 	mov.w	r2, #0
 8009904:	f04f 0300 	mov.w	r3, #0
 8009908:	00eb      	lsls	r3, r5, #3
 800990a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800990e:	00e2      	lsls	r2, r4, #3
 8009910:	4614      	mov	r4, r2
 8009912:	461d      	mov	r5, r3
 8009914:	4643      	mov	r3, r8
 8009916:	18e3      	adds	r3, r4, r3
 8009918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800991c:	464b      	mov	r3, r9
 800991e:	eb45 0303 	adc.w	r3, r5, r3
 8009922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009932:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009936:	f04f 0200 	mov.w	r2, #0
 800993a:	f04f 0300 	mov.w	r3, #0
 800993e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009942:	4629      	mov	r1, r5
 8009944:	008b      	lsls	r3, r1, #2
 8009946:	4621      	mov	r1, r4
 8009948:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800994c:	4621      	mov	r1, r4
 800994e:	008a      	lsls	r2, r1, #2
 8009950:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009954:	f7f7 f978 	bl	8000c48 <__aeabi_uldivmod>
 8009958:	4602      	mov	r2, r0
 800995a:	460b      	mov	r3, r1
 800995c:	4b60      	ldr	r3, [pc, #384]	; (8009ae0 <UART_SetConfig+0x4e4>)
 800995e:	fba3 2302 	umull	r2, r3, r3, r2
 8009962:	095b      	lsrs	r3, r3, #5
 8009964:	011c      	lsls	r4, r3, #4
 8009966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800996a:	2200      	movs	r2, #0
 800996c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009970:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009974:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009978:	4642      	mov	r2, r8
 800997a:	464b      	mov	r3, r9
 800997c:	1891      	adds	r1, r2, r2
 800997e:	61b9      	str	r1, [r7, #24]
 8009980:	415b      	adcs	r3, r3
 8009982:	61fb      	str	r3, [r7, #28]
 8009984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009988:	4641      	mov	r1, r8
 800998a:	1851      	adds	r1, r2, r1
 800998c:	6139      	str	r1, [r7, #16]
 800998e:	4649      	mov	r1, r9
 8009990:	414b      	adcs	r3, r1
 8009992:	617b      	str	r3, [r7, #20]
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	f04f 0300 	mov.w	r3, #0
 800999c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80099a0:	4659      	mov	r1, fp
 80099a2:	00cb      	lsls	r3, r1, #3
 80099a4:	4651      	mov	r1, sl
 80099a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099aa:	4651      	mov	r1, sl
 80099ac:	00ca      	lsls	r2, r1, #3
 80099ae:	4610      	mov	r0, r2
 80099b0:	4619      	mov	r1, r3
 80099b2:	4603      	mov	r3, r0
 80099b4:	4642      	mov	r2, r8
 80099b6:	189b      	adds	r3, r3, r2
 80099b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099bc:	464b      	mov	r3, r9
 80099be:	460a      	mov	r2, r1
 80099c0:	eb42 0303 	adc.w	r3, r2, r3
 80099c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80099d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80099d4:	f04f 0200 	mov.w	r2, #0
 80099d8:	f04f 0300 	mov.w	r3, #0
 80099dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80099e0:	4649      	mov	r1, r9
 80099e2:	008b      	lsls	r3, r1, #2
 80099e4:	4641      	mov	r1, r8
 80099e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099ea:	4641      	mov	r1, r8
 80099ec:	008a      	lsls	r2, r1, #2
 80099ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80099f2:	f7f7 f929 	bl	8000c48 <__aeabi_uldivmod>
 80099f6:	4602      	mov	r2, r0
 80099f8:	460b      	mov	r3, r1
 80099fa:	4b39      	ldr	r3, [pc, #228]	; (8009ae0 <UART_SetConfig+0x4e4>)
 80099fc:	fba3 1302 	umull	r1, r3, r3, r2
 8009a00:	095b      	lsrs	r3, r3, #5
 8009a02:	2164      	movs	r1, #100	; 0x64
 8009a04:	fb01 f303 	mul.w	r3, r1, r3
 8009a08:	1ad3      	subs	r3, r2, r3
 8009a0a:	011b      	lsls	r3, r3, #4
 8009a0c:	3332      	adds	r3, #50	; 0x32
 8009a0e:	4a34      	ldr	r2, [pc, #208]	; (8009ae0 <UART_SetConfig+0x4e4>)
 8009a10:	fba2 2303 	umull	r2, r3, r2, r3
 8009a14:	095b      	lsrs	r3, r3, #5
 8009a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a1a:	441c      	add	r4, r3
 8009a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a20:	2200      	movs	r2, #0
 8009a22:	673b      	str	r3, [r7, #112]	; 0x70
 8009a24:	677a      	str	r2, [r7, #116]	; 0x74
 8009a26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009a2a:	4642      	mov	r2, r8
 8009a2c:	464b      	mov	r3, r9
 8009a2e:	1891      	adds	r1, r2, r2
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	415b      	adcs	r3, r3
 8009a34:	60fb      	str	r3, [r7, #12]
 8009a36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009a3a:	4641      	mov	r1, r8
 8009a3c:	1851      	adds	r1, r2, r1
 8009a3e:	6039      	str	r1, [r7, #0]
 8009a40:	4649      	mov	r1, r9
 8009a42:	414b      	adcs	r3, r1
 8009a44:	607b      	str	r3, [r7, #4]
 8009a46:	f04f 0200 	mov.w	r2, #0
 8009a4a:	f04f 0300 	mov.w	r3, #0
 8009a4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009a52:	4659      	mov	r1, fp
 8009a54:	00cb      	lsls	r3, r1, #3
 8009a56:	4651      	mov	r1, sl
 8009a58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a5c:	4651      	mov	r1, sl
 8009a5e:	00ca      	lsls	r2, r1, #3
 8009a60:	4610      	mov	r0, r2
 8009a62:	4619      	mov	r1, r3
 8009a64:	4603      	mov	r3, r0
 8009a66:	4642      	mov	r2, r8
 8009a68:	189b      	adds	r3, r3, r2
 8009a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a6c:	464b      	mov	r3, r9
 8009a6e:	460a      	mov	r2, r1
 8009a70:	eb42 0303 	adc.w	r3, r2, r3
 8009a74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8009a80:	667a      	str	r2, [r7, #100]	; 0x64
 8009a82:	f04f 0200 	mov.w	r2, #0
 8009a86:	f04f 0300 	mov.w	r3, #0
 8009a8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009a8e:	4649      	mov	r1, r9
 8009a90:	008b      	lsls	r3, r1, #2
 8009a92:	4641      	mov	r1, r8
 8009a94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a98:	4641      	mov	r1, r8
 8009a9a:	008a      	lsls	r2, r1, #2
 8009a9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009aa0:	f7f7 f8d2 	bl	8000c48 <__aeabi_uldivmod>
 8009aa4:	4602      	mov	r2, r0
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4b0d      	ldr	r3, [pc, #52]	; (8009ae0 <UART_SetConfig+0x4e4>)
 8009aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8009aae:	095b      	lsrs	r3, r3, #5
 8009ab0:	2164      	movs	r1, #100	; 0x64
 8009ab2:	fb01 f303 	mul.w	r3, r1, r3
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	3332      	adds	r3, #50	; 0x32
 8009abc:	4a08      	ldr	r2, [pc, #32]	; (8009ae0 <UART_SetConfig+0x4e4>)
 8009abe:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac2:	095b      	lsrs	r3, r3, #5
 8009ac4:	f003 020f 	and.w	r2, r3, #15
 8009ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4422      	add	r2, r4
 8009ad0:	609a      	str	r2, [r3, #8]
}
 8009ad2:	bf00      	nop
 8009ad4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ade:	bf00      	nop
 8009ae0:	51eb851f 	.word	0x51eb851f

08009ae4 <__errno>:
 8009ae4:	4b01      	ldr	r3, [pc, #4]	; (8009aec <__errno+0x8>)
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	2000000c 	.word	0x2000000c

08009af0 <__libc_init_array>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	4d0d      	ldr	r5, [pc, #52]	; (8009b28 <__libc_init_array+0x38>)
 8009af4:	4c0d      	ldr	r4, [pc, #52]	; (8009b2c <__libc_init_array+0x3c>)
 8009af6:	1b64      	subs	r4, r4, r5
 8009af8:	10a4      	asrs	r4, r4, #2
 8009afa:	2600      	movs	r6, #0
 8009afc:	42a6      	cmp	r6, r4
 8009afe:	d109      	bne.n	8009b14 <__libc_init_array+0x24>
 8009b00:	4d0b      	ldr	r5, [pc, #44]	; (8009b30 <__libc_init_array+0x40>)
 8009b02:	4c0c      	ldr	r4, [pc, #48]	; (8009b34 <__libc_init_array+0x44>)
 8009b04:	f002 ffe2 	bl	800cacc <_init>
 8009b08:	1b64      	subs	r4, r4, r5
 8009b0a:	10a4      	asrs	r4, r4, #2
 8009b0c:	2600      	movs	r6, #0
 8009b0e:	42a6      	cmp	r6, r4
 8009b10:	d105      	bne.n	8009b1e <__libc_init_array+0x2e>
 8009b12:	bd70      	pop	{r4, r5, r6, pc}
 8009b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b18:	4798      	blx	r3
 8009b1a:	3601      	adds	r6, #1
 8009b1c:	e7ee      	b.n	8009afc <__libc_init_array+0xc>
 8009b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b22:	4798      	blx	r3
 8009b24:	3601      	adds	r6, #1
 8009b26:	e7f2      	b.n	8009b0e <__libc_init_array+0x1e>
 8009b28:	0800cf2c 	.word	0x0800cf2c
 8009b2c:	0800cf2c 	.word	0x0800cf2c
 8009b30:	0800cf2c 	.word	0x0800cf2c
 8009b34:	0800cf30 	.word	0x0800cf30

08009b38 <memset>:
 8009b38:	4402      	add	r2, r0
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d100      	bne.n	8009b42 <memset+0xa>
 8009b40:	4770      	bx	lr
 8009b42:	f803 1b01 	strb.w	r1, [r3], #1
 8009b46:	e7f9      	b.n	8009b3c <memset+0x4>

08009b48 <__cvt>:
 8009b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b4c:	ec55 4b10 	vmov	r4, r5, d0
 8009b50:	2d00      	cmp	r5, #0
 8009b52:	460e      	mov	r6, r1
 8009b54:	4619      	mov	r1, r3
 8009b56:	462b      	mov	r3, r5
 8009b58:	bfbb      	ittet	lt
 8009b5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009b5e:	461d      	movlt	r5, r3
 8009b60:	2300      	movge	r3, #0
 8009b62:	232d      	movlt	r3, #45	; 0x2d
 8009b64:	700b      	strb	r3, [r1, #0]
 8009b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b6c:	4691      	mov	r9, r2
 8009b6e:	f023 0820 	bic.w	r8, r3, #32
 8009b72:	bfbc      	itt	lt
 8009b74:	4622      	movlt	r2, r4
 8009b76:	4614      	movlt	r4, r2
 8009b78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b7c:	d005      	beq.n	8009b8a <__cvt+0x42>
 8009b7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009b82:	d100      	bne.n	8009b86 <__cvt+0x3e>
 8009b84:	3601      	adds	r6, #1
 8009b86:	2102      	movs	r1, #2
 8009b88:	e000      	b.n	8009b8c <__cvt+0x44>
 8009b8a:	2103      	movs	r1, #3
 8009b8c:	ab03      	add	r3, sp, #12
 8009b8e:	9301      	str	r3, [sp, #4]
 8009b90:	ab02      	add	r3, sp, #8
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	ec45 4b10 	vmov	d0, r4, r5
 8009b98:	4653      	mov	r3, sl
 8009b9a:	4632      	mov	r2, r6
 8009b9c:	f000 fcec 	bl	800a578 <_dtoa_r>
 8009ba0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009ba4:	4607      	mov	r7, r0
 8009ba6:	d102      	bne.n	8009bae <__cvt+0x66>
 8009ba8:	f019 0f01 	tst.w	r9, #1
 8009bac:	d022      	beq.n	8009bf4 <__cvt+0xac>
 8009bae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bb2:	eb07 0906 	add.w	r9, r7, r6
 8009bb6:	d110      	bne.n	8009bda <__cvt+0x92>
 8009bb8:	783b      	ldrb	r3, [r7, #0]
 8009bba:	2b30      	cmp	r3, #48	; 0x30
 8009bbc:	d10a      	bne.n	8009bd4 <__cvt+0x8c>
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	4629      	mov	r1, r5
 8009bc6:	f7f6 ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009bca:	b918      	cbnz	r0, 8009bd4 <__cvt+0x8c>
 8009bcc:	f1c6 0601 	rsb	r6, r6, #1
 8009bd0:	f8ca 6000 	str.w	r6, [sl]
 8009bd4:	f8da 3000 	ldr.w	r3, [sl]
 8009bd8:	4499      	add	r9, r3
 8009bda:	2200      	movs	r2, #0
 8009bdc:	2300      	movs	r3, #0
 8009bde:	4620      	mov	r0, r4
 8009be0:	4629      	mov	r1, r5
 8009be2:	f7f6 ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 8009be6:	b108      	cbz	r0, 8009bec <__cvt+0xa4>
 8009be8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009bec:	2230      	movs	r2, #48	; 0x30
 8009bee:	9b03      	ldr	r3, [sp, #12]
 8009bf0:	454b      	cmp	r3, r9
 8009bf2:	d307      	bcc.n	8009c04 <__cvt+0xbc>
 8009bf4:	9b03      	ldr	r3, [sp, #12]
 8009bf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bf8:	1bdb      	subs	r3, r3, r7
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	6013      	str	r3, [r2, #0]
 8009bfe:	b004      	add	sp, #16
 8009c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c04:	1c59      	adds	r1, r3, #1
 8009c06:	9103      	str	r1, [sp, #12]
 8009c08:	701a      	strb	r2, [r3, #0]
 8009c0a:	e7f0      	b.n	8009bee <__cvt+0xa6>

08009c0c <__exponent>:
 8009c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2900      	cmp	r1, #0
 8009c12:	bfb8      	it	lt
 8009c14:	4249      	neglt	r1, r1
 8009c16:	f803 2b02 	strb.w	r2, [r3], #2
 8009c1a:	bfb4      	ite	lt
 8009c1c:	222d      	movlt	r2, #45	; 0x2d
 8009c1e:	222b      	movge	r2, #43	; 0x2b
 8009c20:	2909      	cmp	r1, #9
 8009c22:	7042      	strb	r2, [r0, #1]
 8009c24:	dd2a      	ble.n	8009c7c <__exponent+0x70>
 8009c26:	f10d 0407 	add.w	r4, sp, #7
 8009c2a:	46a4      	mov	ip, r4
 8009c2c:	270a      	movs	r7, #10
 8009c2e:	46a6      	mov	lr, r4
 8009c30:	460a      	mov	r2, r1
 8009c32:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c36:	fb07 1516 	mls	r5, r7, r6, r1
 8009c3a:	3530      	adds	r5, #48	; 0x30
 8009c3c:	2a63      	cmp	r2, #99	; 0x63
 8009c3e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009c42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009c46:	4631      	mov	r1, r6
 8009c48:	dcf1      	bgt.n	8009c2e <__exponent+0x22>
 8009c4a:	3130      	adds	r1, #48	; 0x30
 8009c4c:	f1ae 0502 	sub.w	r5, lr, #2
 8009c50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009c54:	1c44      	adds	r4, r0, #1
 8009c56:	4629      	mov	r1, r5
 8009c58:	4561      	cmp	r1, ip
 8009c5a:	d30a      	bcc.n	8009c72 <__exponent+0x66>
 8009c5c:	f10d 0209 	add.w	r2, sp, #9
 8009c60:	eba2 020e 	sub.w	r2, r2, lr
 8009c64:	4565      	cmp	r5, ip
 8009c66:	bf88      	it	hi
 8009c68:	2200      	movhi	r2, #0
 8009c6a:	4413      	add	r3, r2
 8009c6c:	1a18      	subs	r0, r3, r0
 8009c6e:	b003      	add	sp, #12
 8009c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009c7a:	e7ed      	b.n	8009c58 <__exponent+0x4c>
 8009c7c:	2330      	movs	r3, #48	; 0x30
 8009c7e:	3130      	adds	r1, #48	; 0x30
 8009c80:	7083      	strb	r3, [r0, #2]
 8009c82:	70c1      	strb	r1, [r0, #3]
 8009c84:	1d03      	adds	r3, r0, #4
 8009c86:	e7f1      	b.n	8009c6c <__exponent+0x60>

08009c88 <_printf_float>:
 8009c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8c:	ed2d 8b02 	vpush	{d8}
 8009c90:	b08d      	sub	sp, #52	; 0x34
 8009c92:	460c      	mov	r4, r1
 8009c94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c98:	4616      	mov	r6, r2
 8009c9a:	461f      	mov	r7, r3
 8009c9c:	4605      	mov	r5, r0
 8009c9e:	f001 fa59 	bl	800b154 <_localeconv_r>
 8009ca2:	f8d0 a000 	ldr.w	sl, [r0]
 8009ca6:	4650      	mov	r0, sl
 8009ca8:	f7f6 fa92 	bl	80001d0 <strlen>
 8009cac:	2300      	movs	r3, #0
 8009cae:	930a      	str	r3, [sp, #40]	; 0x28
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	9305      	str	r3, [sp, #20]
 8009cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8009cb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009cbc:	3307      	adds	r3, #7
 8009cbe:	f023 0307 	bic.w	r3, r3, #7
 8009cc2:	f103 0208 	add.w	r2, r3, #8
 8009cc6:	f8c8 2000 	str.w	r2, [r8]
 8009cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009cd2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009cd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009cda:	9307      	str	r3, [sp, #28]
 8009cdc:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ce0:	ee08 0a10 	vmov	s16, r0
 8009ce4:	4b9f      	ldr	r3, [pc, #636]	; (8009f64 <_printf_float+0x2dc>)
 8009ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cee:	f7f6 ff1d 	bl	8000b2c <__aeabi_dcmpun>
 8009cf2:	bb88      	cbnz	r0, 8009d58 <_printf_float+0xd0>
 8009cf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cf8:	4b9a      	ldr	r3, [pc, #616]	; (8009f64 <_printf_float+0x2dc>)
 8009cfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cfe:	f7f6 fef7 	bl	8000af0 <__aeabi_dcmple>
 8009d02:	bb48      	cbnz	r0, 8009d58 <_printf_float+0xd0>
 8009d04:	2200      	movs	r2, #0
 8009d06:	2300      	movs	r3, #0
 8009d08:	4640      	mov	r0, r8
 8009d0a:	4649      	mov	r1, r9
 8009d0c:	f7f6 fee6 	bl	8000adc <__aeabi_dcmplt>
 8009d10:	b110      	cbz	r0, 8009d18 <_printf_float+0x90>
 8009d12:	232d      	movs	r3, #45	; 0x2d
 8009d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d18:	4b93      	ldr	r3, [pc, #588]	; (8009f68 <_printf_float+0x2e0>)
 8009d1a:	4894      	ldr	r0, [pc, #592]	; (8009f6c <_printf_float+0x2e4>)
 8009d1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d20:	bf94      	ite	ls
 8009d22:	4698      	movls	r8, r3
 8009d24:	4680      	movhi	r8, r0
 8009d26:	2303      	movs	r3, #3
 8009d28:	6123      	str	r3, [r4, #16]
 8009d2a:	9b05      	ldr	r3, [sp, #20]
 8009d2c:	f023 0204 	bic.w	r2, r3, #4
 8009d30:	6022      	str	r2, [r4, #0]
 8009d32:	f04f 0900 	mov.w	r9, #0
 8009d36:	9700      	str	r7, [sp, #0]
 8009d38:	4633      	mov	r3, r6
 8009d3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 f9d8 	bl	800a0f4 <_printf_common>
 8009d44:	3001      	adds	r0, #1
 8009d46:	f040 8090 	bne.w	8009e6a <_printf_float+0x1e2>
 8009d4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d4e:	b00d      	add	sp, #52	; 0x34
 8009d50:	ecbd 8b02 	vpop	{d8}
 8009d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d58:	4642      	mov	r2, r8
 8009d5a:	464b      	mov	r3, r9
 8009d5c:	4640      	mov	r0, r8
 8009d5e:	4649      	mov	r1, r9
 8009d60:	f7f6 fee4 	bl	8000b2c <__aeabi_dcmpun>
 8009d64:	b140      	cbz	r0, 8009d78 <_printf_float+0xf0>
 8009d66:	464b      	mov	r3, r9
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bfbc      	itt	lt
 8009d6c:	232d      	movlt	r3, #45	; 0x2d
 8009d6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009d72:	487f      	ldr	r0, [pc, #508]	; (8009f70 <_printf_float+0x2e8>)
 8009d74:	4b7f      	ldr	r3, [pc, #508]	; (8009f74 <_printf_float+0x2ec>)
 8009d76:	e7d1      	b.n	8009d1c <_printf_float+0x94>
 8009d78:	6863      	ldr	r3, [r4, #4]
 8009d7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009d7e:	9206      	str	r2, [sp, #24]
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	d13f      	bne.n	8009e04 <_printf_float+0x17c>
 8009d84:	2306      	movs	r3, #6
 8009d86:	6063      	str	r3, [r4, #4]
 8009d88:	9b05      	ldr	r3, [sp, #20]
 8009d8a:	6861      	ldr	r1, [r4, #4]
 8009d8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d90:	2300      	movs	r3, #0
 8009d92:	9303      	str	r3, [sp, #12]
 8009d94:	ab0a      	add	r3, sp, #40	; 0x28
 8009d96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d9a:	ab09      	add	r3, sp, #36	; 0x24
 8009d9c:	ec49 8b10 	vmov	d0, r8, r9
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	6022      	str	r2, [r4, #0]
 8009da4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009da8:	4628      	mov	r0, r5
 8009daa:	f7ff fecd 	bl	8009b48 <__cvt>
 8009dae:	9b06      	ldr	r3, [sp, #24]
 8009db0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009db2:	2b47      	cmp	r3, #71	; 0x47
 8009db4:	4680      	mov	r8, r0
 8009db6:	d108      	bne.n	8009dca <_printf_float+0x142>
 8009db8:	1cc8      	adds	r0, r1, #3
 8009dba:	db02      	blt.n	8009dc2 <_printf_float+0x13a>
 8009dbc:	6863      	ldr	r3, [r4, #4]
 8009dbe:	4299      	cmp	r1, r3
 8009dc0:	dd41      	ble.n	8009e46 <_printf_float+0x1be>
 8009dc2:	f1ab 0b02 	sub.w	fp, fp, #2
 8009dc6:	fa5f fb8b 	uxtb.w	fp, fp
 8009dca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009dce:	d820      	bhi.n	8009e12 <_printf_float+0x18a>
 8009dd0:	3901      	subs	r1, #1
 8009dd2:	465a      	mov	r2, fp
 8009dd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009dd8:	9109      	str	r1, [sp, #36]	; 0x24
 8009dda:	f7ff ff17 	bl	8009c0c <__exponent>
 8009dde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009de0:	1813      	adds	r3, r2, r0
 8009de2:	2a01      	cmp	r2, #1
 8009de4:	4681      	mov	r9, r0
 8009de6:	6123      	str	r3, [r4, #16]
 8009de8:	dc02      	bgt.n	8009df0 <_printf_float+0x168>
 8009dea:	6822      	ldr	r2, [r4, #0]
 8009dec:	07d2      	lsls	r2, r2, #31
 8009dee:	d501      	bpl.n	8009df4 <_printf_float+0x16c>
 8009df0:	3301      	adds	r3, #1
 8009df2:	6123      	str	r3, [r4, #16]
 8009df4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d09c      	beq.n	8009d36 <_printf_float+0xae>
 8009dfc:	232d      	movs	r3, #45	; 0x2d
 8009dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e02:	e798      	b.n	8009d36 <_printf_float+0xae>
 8009e04:	9a06      	ldr	r2, [sp, #24]
 8009e06:	2a47      	cmp	r2, #71	; 0x47
 8009e08:	d1be      	bne.n	8009d88 <_printf_float+0x100>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1bc      	bne.n	8009d88 <_printf_float+0x100>
 8009e0e:	2301      	movs	r3, #1
 8009e10:	e7b9      	b.n	8009d86 <_printf_float+0xfe>
 8009e12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e16:	d118      	bne.n	8009e4a <_printf_float+0x1c2>
 8009e18:	2900      	cmp	r1, #0
 8009e1a:	6863      	ldr	r3, [r4, #4]
 8009e1c:	dd0b      	ble.n	8009e36 <_printf_float+0x1ae>
 8009e1e:	6121      	str	r1, [r4, #16]
 8009e20:	b913      	cbnz	r3, 8009e28 <_printf_float+0x1a0>
 8009e22:	6822      	ldr	r2, [r4, #0]
 8009e24:	07d0      	lsls	r0, r2, #31
 8009e26:	d502      	bpl.n	8009e2e <_printf_float+0x1a6>
 8009e28:	3301      	adds	r3, #1
 8009e2a:	440b      	add	r3, r1
 8009e2c:	6123      	str	r3, [r4, #16]
 8009e2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e30:	f04f 0900 	mov.w	r9, #0
 8009e34:	e7de      	b.n	8009df4 <_printf_float+0x16c>
 8009e36:	b913      	cbnz	r3, 8009e3e <_printf_float+0x1b6>
 8009e38:	6822      	ldr	r2, [r4, #0]
 8009e3a:	07d2      	lsls	r2, r2, #31
 8009e3c:	d501      	bpl.n	8009e42 <_printf_float+0x1ba>
 8009e3e:	3302      	adds	r3, #2
 8009e40:	e7f4      	b.n	8009e2c <_printf_float+0x1a4>
 8009e42:	2301      	movs	r3, #1
 8009e44:	e7f2      	b.n	8009e2c <_printf_float+0x1a4>
 8009e46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e4c:	4299      	cmp	r1, r3
 8009e4e:	db05      	blt.n	8009e5c <_printf_float+0x1d4>
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	6121      	str	r1, [r4, #16]
 8009e54:	07d8      	lsls	r0, r3, #31
 8009e56:	d5ea      	bpl.n	8009e2e <_printf_float+0x1a6>
 8009e58:	1c4b      	adds	r3, r1, #1
 8009e5a:	e7e7      	b.n	8009e2c <_printf_float+0x1a4>
 8009e5c:	2900      	cmp	r1, #0
 8009e5e:	bfd4      	ite	le
 8009e60:	f1c1 0202 	rsble	r2, r1, #2
 8009e64:	2201      	movgt	r2, #1
 8009e66:	4413      	add	r3, r2
 8009e68:	e7e0      	b.n	8009e2c <_printf_float+0x1a4>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	055a      	lsls	r2, r3, #21
 8009e6e:	d407      	bmi.n	8009e80 <_printf_float+0x1f8>
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	4642      	mov	r2, r8
 8009e74:	4631      	mov	r1, r6
 8009e76:	4628      	mov	r0, r5
 8009e78:	47b8      	blx	r7
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	d12c      	bne.n	8009ed8 <_printf_float+0x250>
 8009e7e:	e764      	b.n	8009d4a <_printf_float+0xc2>
 8009e80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e84:	f240 80e0 	bls.w	800a048 <_printf_float+0x3c0>
 8009e88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	2300      	movs	r3, #0
 8009e90:	f7f6 fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d034      	beq.n	8009f02 <_printf_float+0x27a>
 8009e98:	4a37      	ldr	r2, [pc, #220]	; (8009f78 <_printf_float+0x2f0>)
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	47b8      	blx	r7
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	f43f af51 	beq.w	8009d4a <_printf_float+0xc2>
 8009ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009eac:	429a      	cmp	r2, r3
 8009eae:	db02      	blt.n	8009eb6 <_printf_float+0x22e>
 8009eb0:	6823      	ldr	r3, [r4, #0]
 8009eb2:	07d8      	lsls	r0, r3, #31
 8009eb4:	d510      	bpl.n	8009ed8 <_printf_float+0x250>
 8009eb6:	ee18 3a10 	vmov	r3, s16
 8009eba:	4652      	mov	r2, sl
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b8      	blx	r7
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	f43f af41 	beq.w	8009d4a <_printf_float+0xc2>
 8009ec8:	f04f 0800 	mov.w	r8, #0
 8009ecc:	f104 091a 	add.w	r9, r4, #26
 8009ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	4543      	cmp	r3, r8
 8009ed6:	dc09      	bgt.n	8009eec <_printf_float+0x264>
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	079b      	lsls	r3, r3, #30
 8009edc:	f100 8105 	bmi.w	800a0ea <_printf_float+0x462>
 8009ee0:	68e0      	ldr	r0, [r4, #12]
 8009ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ee4:	4298      	cmp	r0, r3
 8009ee6:	bfb8      	it	lt
 8009ee8:	4618      	movlt	r0, r3
 8009eea:	e730      	b.n	8009d4e <_printf_float+0xc6>
 8009eec:	2301      	movs	r3, #1
 8009eee:	464a      	mov	r2, r9
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	47b8      	blx	r7
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	f43f af27 	beq.w	8009d4a <_printf_float+0xc2>
 8009efc:	f108 0801 	add.w	r8, r8, #1
 8009f00:	e7e6      	b.n	8009ed0 <_printf_float+0x248>
 8009f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	dc39      	bgt.n	8009f7c <_printf_float+0x2f4>
 8009f08:	4a1b      	ldr	r2, [pc, #108]	; (8009f78 <_printf_float+0x2f0>)
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	4631      	mov	r1, r6
 8009f0e:	4628      	mov	r0, r5
 8009f10:	47b8      	blx	r7
 8009f12:	3001      	adds	r0, #1
 8009f14:	f43f af19 	beq.w	8009d4a <_printf_float+0xc2>
 8009f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	d102      	bne.n	8009f26 <_printf_float+0x29e>
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	07d9      	lsls	r1, r3, #31
 8009f24:	d5d8      	bpl.n	8009ed8 <_printf_float+0x250>
 8009f26:	ee18 3a10 	vmov	r3, s16
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4628      	mov	r0, r5
 8009f30:	47b8      	blx	r7
 8009f32:	3001      	adds	r0, #1
 8009f34:	f43f af09 	beq.w	8009d4a <_printf_float+0xc2>
 8009f38:	f04f 0900 	mov.w	r9, #0
 8009f3c:	f104 0a1a 	add.w	sl, r4, #26
 8009f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f42:	425b      	negs	r3, r3
 8009f44:	454b      	cmp	r3, r9
 8009f46:	dc01      	bgt.n	8009f4c <_printf_float+0x2c4>
 8009f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f4a:	e792      	b.n	8009e72 <_printf_float+0x1ea>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	4652      	mov	r2, sl
 8009f50:	4631      	mov	r1, r6
 8009f52:	4628      	mov	r0, r5
 8009f54:	47b8      	blx	r7
 8009f56:	3001      	adds	r0, #1
 8009f58:	f43f aef7 	beq.w	8009d4a <_printf_float+0xc2>
 8009f5c:	f109 0901 	add.w	r9, r9, #1
 8009f60:	e7ee      	b.n	8009f40 <_printf_float+0x2b8>
 8009f62:	bf00      	nop
 8009f64:	7fefffff 	.word	0x7fefffff
 8009f68:	0800cb50 	.word	0x0800cb50
 8009f6c:	0800cb54 	.word	0x0800cb54
 8009f70:	0800cb5c 	.word	0x0800cb5c
 8009f74:	0800cb58 	.word	0x0800cb58
 8009f78:	0800cb60 	.word	0x0800cb60
 8009f7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f80:	429a      	cmp	r2, r3
 8009f82:	bfa8      	it	ge
 8009f84:	461a      	movge	r2, r3
 8009f86:	2a00      	cmp	r2, #0
 8009f88:	4691      	mov	r9, r2
 8009f8a:	dc37      	bgt.n	8009ffc <_printf_float+0x374>
 8009f8c:	f04f 0b00 	mov.w	fp, #0
 8009f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f94:	f104 021a 	add.w	r2, r4, #26
 8009f98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f9a:	9305      	str	r3, [sp, #20]
 8009f9c:	eba3 0309 	sub.w	r3, r3, r9
 8009fa0:	455b      	cmp	r3, fp
 8009fa2:	dc33      	bgt.n	800a00c <_printf_float+0x384>
 8009fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	db3b      	blt.n	800a024 <_printf_float+0x39c>
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	07da      	lsls	r2, r3, #31
 8009fb0:	d438      	bmi.n	800a024 <_printf_float+0x39c>
 8009fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb4:	9a05      	ldr	r2, [sp, #20]
 8009fb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fb8:	1a9a      	subs	r2, r3, r2
 8009fba:	eba3 0901 	sub.w	r9, r3, r1
 8009fbe:	4591      	cmp	r9, r2
 8009fc0:	bfa8      	it	ge
 8009fc2:	4691      	movge	r9, r2
 8009fc4:	f1b9 0f00 	cmp.w	r9, #0
 8009fc8:	dc35      	bgt.n	800a036 <_printf_float+0x3ae>
 8009fca:	f04f 0800 	mov.w	r8, #0
 8009fce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009fd2:	f104 0a1a 	add.w	sl, r4, #26
 8009fd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fda:	1a9b      	subs	r3, r3, r2
 8009fdc:	eba3 0309 	sub.w	r3, r3, r9
 8009fe0:	4543      	cmp	r3, r8
 8009fe2:	f77f af79 	ble.w	8009ed8 <_printf_float+0x250>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	4652      	mov	r2, sl
 8009fea:	4631      	mov	r1, r6
 8009fec:	4628      	mov	r0, r5
 8009fee:	47b8      	blx	r7
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	f43f aeaa 	beq.w	8009d4a <_printf_float+0xc2>
 8009ff6:	f108 0801 	add.w	r8, r8, #1
 8009ffa:	e7ec      	b.n	8009fd6 <_printf_float+0x34e>
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	4631      	mov	r1, r6
 800a000:	4642      	mov	r2, r8
 800a002:	4628      	mov	r0, r5
 800a004:	47b8      	blx	r7
 800a006:	3001      	adds	r0, #1
 800a008:	d1c0      	bne.n	8009f8c <_printf_float+0x304>
 800a00a:	e69e      	b.n	8009d4a <_printf_float+0xc2>
 800a00c:	2301      	movs	r3, #1
 800a00e:	4631      	mov	r1, r6
 800a010:	4628      	mov	r0, r5
 800a012:	9205      	str	r2, [sp, #20]
 800a014:	47b8      	blx	r7
 800a016:	3001      	adds	r0, #1
 800a018:	f43f ae97 	beq.w	8009d4a <_printf_float+0xc2>
 800a01c:	9a05      	ldr	r2, [sp, #20]
 800a01e:	f10b 0b01 	add.w	fp, fp, #1
 800a022:	e7b9      	b.n	8009f98 <_printf_float+0x310>
 800a024:	ee18 3a10 	vmov	r3, s16
 800a028:	4652      	mov	r2, sl
 800a02a:	4631      	mov	r1, r6
 800a02c:	4628      	mov	r0, r5
 800a02e:	47b8      	blx	r7
 800a030:	3001      	adds	r0, #1
 800a032:	d1be      	bne.n	8009fb2 <_printf_float+0x32a>
 800a034:	e689      	b.n	8009d4a <_printf_float+0xc2>
 800a036:	9a05      	ldr	r2, [sp, #20]
 800a038:	464b      	mov	r3, r9
 800a03a:	4442      	add	r2, r8
 800a03c:	4631      	mov	r1, r6
 800a03e:	4628      	mov	r0, r5
 800a040:	47b8      	blx	r7
 800a042:	3001      	adds	r0, #1
 800a044:	d1c1      	bne.n	8009fca <_printf_float+0x342>
 800a046:	e680      	b.n	8009d4a <_printf_float+0xc2>
 800a048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a04a:	2a01      	cmp	r2, #1
 800a04c:	dc01      	bgt.n	800a052 <_printf_float+0x3ca>
 800a04e:	07db      	lsls	r3, r3, #31
 800a050:	d538      	bpl.n	800a0c4 <_printf_float+0x43c>
 800a052:	2301      	movs	r3, #1
 800a054:	4642      	mov	r2, r8
 800a056:	4631      	mov	r1, r6
 800a058:	4628      	mov	r0, r5
 800a05a:	47b8      	blx	r7
 800a05c:	3001      	adds	r0, #1
 800a05e:	f43f ae74 	beq.w	8009d4a <_printf_float+0xc2>
 800a062:	ee18 3a10 	vmov	r3, s16
 800a066:	4652      	mov	r2, sl
 800a068:	4631      	mov	r1, r6
 800a06a:	4628      	mov	r0, r5
 800a06c:	47b8      	blx	r7
 800a06e:	3001      	adds	r0, #1
 800a070:	f43f ae6b 	beq.w	8009d4a <_printf_float+0xc2>
 800a074:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a078:	2200      	movs	r2, #0
 800a07a:	2300      	movs	r3, #0
 800a07c:	f7f6 fd24 	bl	8000ac8 <__aeabi_dcmpeq>
 800a080:	b9d8      	cbnz	r0, 800a0ba <_printf_float+0x432>
 800a082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a084:	f108 0201 	add.w	r2, r8, #1
 800a088:	3b01      	subs	r3, #1
 800a08a:	4631      	mov	r1, r6
 800a08c:	4628      	mov	r0, r5
 800a08e:	47b8      	blx	r7
 800a090:	3001      	adds	r0, #1
 800a092:	d10e      	bne.n	800a0b2 <_printf_float+0x42a>
 800a094:	e659      	b.n	8009d4a <_printf_float+0xc2>
 800a096:	2301      	movs	r3, #1
 800a098:	4652      	mov	r2, sl
 800a09a:	4631      	mov	r1, r6
 800a09c:	4628      	mov	r0, r5
 800a09e:	47b8      	blx	r7
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	f43f ae52 	beq.w	8009d4a <_printf_float+0xc2>
 800a0a6:	f108 0801 	add.w	r8, r8, #1
 800a0aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	4543      	cmp	r3, r8
 800a0b0:	dcf1      	bgt.n	800a096 <_printf_float+0x40e>
 800a0b2:	464b      	mov	r3, r9
 800a0b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a0b8:	e6dc      	b.n	8009e74 <_printf_float+0x1ec>
 800a0ba:	f04f 0800 	mov.w	r8, #0
 800a0be:	f104 0a1a 	add.w	sl, r4, #26
 800a0c2:	e7f2      	b.n	800a0aa <_printf_float+0x422>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	4642      	mov	r2, r8
 800a0c8:	e7df      	b.n	800a08a <_printf_float+0x402>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	464a      	mov	r2, r9
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	47b8      	blx	r7
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	f43f ae38 	beq.w	8009d4a <_printf_float+0xc2>
 800a0da:	f108 0801 	add.w	r8, r8, #1
 800a0de:	68e3      	ldr	r3, [r4, #12]
 800a0e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a0e2:	1a5b      	subs	r3, r3, r1
 800a0e4:	4543      	cmp	r3, r8
 800a0e6:	dcf0      	bgt.n	800a0ca <_printf_float+0x442>
 800a0e8:	e6fa      	b.n	8009ee0 <_printf_float+0x258>
 800a0ea:	f04f 0800 	mov.w	r8, #0
 800a0ee:	f104 0919 	add.w	r9, r4, #25
 800a0f2:	e7f4      	b.n	800a0de <_printf_float+0x456>

0800a0f4 <_printf_common>:
 800a0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f8:	4616      	mov	r6, r2
 800a0fa:	4699      	mov	r9, r3
 800a0fc:	688a      	ldr	r2, [r1, #8]
 800a0fe:	690b      	ldr	r3, [r1, #16]
 800a100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a104:	4293      	cmp	r3, r2
 800a106:	bfb8      	it	lt
 800a108:	4613      	movlt	r3, r2
 800a10a:	6033      	str	r3, [r6, #0]
 800a10c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a110:	4607      	mov	r7, r0
 800a112:	460c      	mov	r4, r1
 800a114:	b10a      	cbz	r2, 800a11a <_printf_common+0x26>
 800a116:	3301      	adds	r3, #1
 800a118:	6033      	str	r3, [r6, #0]
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	0699      	lsls	r1, r3, #26
 800a11e:	bf42      	ittt	mi
 800a120:	6833      	ldrmi	r3, [r6, #0]
 800a122:	3302      	addmi	r3, #2
 800a124:	6033      	strmi	r3, [r6, #0]
 800a126:	6825      	ldr	r5, [r4, #0]
 800a128:	f015 0506 	ands.w	r5, r5, #6
 800a12c:	d106      	bne.n	800a13c <_printf_common+0x48>
 800a12e:	f104 0a19 	add.w	sl, r4, #25
 800a132:	68e3      	ldr	r3, [r4, #12]
 800a134:	6832      	ldr	r2, [r6, #0]
 800a136:	1a9b      	subs	r3, r3, r2
 800a138:	42ab      	cmp	r3, r5
 800a13a:	dc26      	bgt.n	800a18a <_printf_common+0x96>
 800a13c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a140:	1e13      	subs	r3, r2, #0
 800a142:	6822      	ldr	r2, [r4, #0]
 800a144:	bf18      	it	ne
 800a146:	2301      	movne	r3, #1
 800a148:	0692      	lsls	r2, r2, #26
 800a14a:	d42b      	bmi.n	800a1a4 <_printf_common+0xb0>
 800a14c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a150:	4649      	mov	r1, r9
 800a152:	4638      	mov	r0, r7
 800a154:	47c0      	blx	r8
 800a156:	3001      	adds	r0, #1
 800a158:	d01e      	beq.n	800a198 <_printf_common+0xa4>
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	68e5      	ldr	r5, [r4, #12]
 800a15e:	6832      	ldr	r2, [r6, #0]
 800a160:	f003 0306 	and.w	r3, r3, #6
 800a164:	2b04      	cmp	r3, #4
 800a166:	bf08      	it	eq
 800a168:	1aad      	subeq	r5, r5, r2
 800a16a:	68a3      	ldr	r3, [r4, #8]
 800a16c:	6922      	ldr	r2, [r4, #16]
 800a16e:	bf0c      	ite	eq
 800a170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a174:	2500      	movne	r5, #0
 800a176:	4293      	cmp	r3, r2
 800a178:	bfc4      	itt	gt
 800a17a:	1a9b      	subgt	r3, r3, r2
 800a17c:	18ed      	addgt	r5, r5, r3
 800a17e:	2600      	movs	r6, #0
 800a180:	341a      	adds	r4, #26
 800a182:	42b5      	cmp	r5, r6
 800a184:	d11a      	bne.n	800a1bc <_printf_common+0xc8>
 800a186:	2000      	movs	r0, #0
 800a188:	e008      	b.n	800a19c <_printf_common+0xa8>
 800a18a:	2301      	movs	r3, #1
 800a18c:	4652      	mov	r2, sl
 800a18e:	4649      	mov	r1, r9
 800a190:	4638      	mov	r0, r7
 800a192:	47c0      	blx	r8
 800a194:	3001      	adds	r0, #1
 800a196:	d103      	bne.n	800a1a0 <_printf_common+0xac>
 800a198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a0:	3501      	adds	r5, #1
 800a1a2:	e7c6      	b.n	800a132 <_printf_common+0x3e>
 800a1a4:	18e1      	adds	r1, r4, r3
 800a1a6:	1c5a      	adds	r2, r3, #1
 800a1a8:	2030      	movs	r0, #48	; 0x30
 800a1aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1ae:	4422      	add	r2, r4
 800a1b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1b8:	3302      	adds	r3, #2
 800a1ba:	e7c7      	b.n	800a14c <_printf_common+0x58>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	4622      	mov	r2, r4
 800a1c0:	4649      	mov	r1, r9
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	47c0      	blx	r8
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	d0e6      	beq.n	800a198 <_printf_common+0xa4>
 800a1ca:	3601      	adds	r6, #1
 800a1cc:	e7d9      	b.n	800a182 <_printf_common+0x8e>
	...

0800a1d0 <_printf_i>:
 800a1d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d4:	7e0f      	ldrb	r7, [r1, #24]
 800a1d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1d8:	2f78      	cmp	r7, #120	; 0x78
 800a1da:	4691      	mov	r9, r2
 800a1dc:	4680      	mov	r8, r0
 800a1de:	460c      	mov	r4, r1
 800a1e0:	469a      	mov	sl, r3
 800a1e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1e6:	d807      	bhi.n	800a1f8 <_printf_i+0x28>
 800a1e8:	2f62      	cmp	r7, #98	; 0x62
 800a1ea:	d80a      	bhi.n	800a202 <_printf_i+0x32>
 800a1ec:	2f00      	cmp	r7, #0
 800a1ee:	f000 80d8 	beq.w	800a3a2 <_printf_i+0x1d2>
 800a1f2:	2f58      	cmp	r7, #88	; 0x58
 800a1f4:	f000 80a3 	beq.w	800a33e <_printf_i+0x16e>
 800a1f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a200:	e03a      	b.n	800a278 <_printf_i+0xa8>
 800a202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a206:	2b15      	cmp	r3, #21
 800a208:	d8f6      	bhi.n	800a1f8 <_printf_i+0x28>
 800a20a:	a101      	add	r1, pc, #4	; (adr r1, 800a210 <_printf_i+0x40>)
 800a20c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a210:	0800a269 	.word	0x0800a269
 800a214:	0800a27d 	.word	0x0800a27d
 800a218:	0800a1f9 	.word	0x0800a1f9
 800a21c:	0800a1f9 	.word	0x0800a1f9
 800a220:	0800a1f9 	.word	0x0800a1f9
 800a224:	0800a1f9 	.word	0x0800a1f9
 800a228:	0800a27d 	.word	0x0800a27d
 800a22c:	0800a1f9 	.word	0x0800a1f9
 800a230:	0800a1f9 	.word	0x0800a1f9
 800a234:	0800a1f9 	.word	0x0800a1f9
 800a238:	0800a1f9 	.word	0x0800a1f9
 800a23c:	0800a389 	.word	0x0800a389
 800a240:	0800a2ad 	.word	0x0800a2ad
 800a244:	0800a36b 	.word	0x0800a36b
 800a248:	0800a1f9 	.word	0x0800a1f9
 800a24c:	0800a1f9 	.word	0x0800a1f9
 800a250:	0800a3ab 	.word	0x0800a3ab
 800a254:	0800a1f9 	.word	0x0800a1f9
 800a258:	0800a2ad 	.word	0x0800a2ad
 800a25c:	0800a1f9 	.word	0x0800a1f9
 800a260:	0800a1f9 	.word	0x0800a1f9
 800a264:	0800a373 	.word	0x0800a373
 800a268:	682b      	ldr	r3, [r5, #0]
 800a26a:	1d1a      	adds	r2, r3, #4
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	602a      	str	r2, [r5, #0]
 800a270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a278:	2301      	movs	r3, #1
 800a27a:	e0a3      	b.n	800a3c4 <_printf_i+0x1f4>
 800a27c:	6820      	ldr	r0, [r4, #0]
 800a27e:	6829      	ldr	r1, [r5, #0]
 800a280:	0606      	lsls	r6, r0, #24
 800a282:	f101 0304 	add.w	r3, r1, #4
 800a286:	d50a      	bpl.n	800a29e <_printf_i+0xce>
 800a288:	680e      	ldr	r6, [r1, #0]
 800a28a:	602b      	str	r3, [r5, #0]
 800a28c:	2e00      	cmp	r6, #0
 800a28e:	da03      	bge.n	800a298 <_printf_i+0xc8>
 800a290:	232d      	movs	r3, #45	; 0x2d
 800a292:	4276      	negs	r6, r6
 800a294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a298:	485e      	ldr	r0, [pc, #376]	; (800a414 <_printf_i+0x244>)
 800a29a:	230a      	movs	r3, #10
 800a29c:	e019      	b.n	800a2d2 <_printf_i+0x102>
 800a29e:	680e      	ldr	r6, [r1, #0]
 800a2a0:	602b      	str	r3, [r5, #0]
 800a2a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2a6:	bf18      	it	ne
 800a2a8:	b236      	sxthne	r6, r6
 800a2aa:	e7ef      	b.n	800a28c <_printf_i+0xbc>
 800a2ac:	682b      	ldr	r3, [r5, #0]
 800a2ae:	6820      	ldr	r0, [r4, #0]
 800a2b0:	1d19      	adds	r1, r3, #4
 800a2b2:	6029      	str	r1, [r5, #0]
 800a2b4:	0601      	lsls	r1, r0, #24
 800a2b6:	d501      	bpl.n	800a2bc <_printf_i+0xec>
 800a2b8:	681e      	ldr	r6, [r3, #0]
 800a2ba:	e002      	b.n	800a2c2 <_printf_i+0xf2>
 800a2bc:	0646      	lsls	r6, r0, #25
 800a2be:	d5fb      	bpl.n	800a2b8 <_printf_i+0xe8>
 800a2c0:	881e      	ldrh	r6, [r3, #0]
 800a2c2:	4854      	ldr	r0, [pc, #336]	; (800a414 <_printf_i+0x244>)
 800a2c4:	2f6f      	cmp	r7, #111	; 0x6f
 800a2c6:	bf0c      	ite	eq
 800a2c8:	2308      	moveq	r3, #8
 800a2ca:	230a      	movne	r3, #10
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2d2:	6865      	ldr	r5, [r4, #4]
 800a2d4:	60a5      	str	r5, [r4, #8]
 800a2d6:	2d00      	cmp	r5, #0
 800a2d8:	bfa2      	ittt	ge
 800a2da:	6821      	ldrge	r1, [r4, #0]
 800a2dc:	f021 0104 	bicge.w	r1, r1, #4
 800a2e0:	6021      	strge	r1, [r4, #0]
 800a2e2:	b90e      	cbnz	r6, 800a2e8 <_printf_i+0x118>
 800a2e4:	2d00      	cmp	r5, #0
 800a2e6:	d04d      	beq.n	800a384 <_printf_i+0x1b4>
 800a2e8:	4615      	mov	r5, r2
 800a2ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2ee:	fb03 6711 	mls	r7, r3, r1, r6
 800a2f2:	5dc7      	ldrb	r7, [r0, r7]
 800a2f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a2f8:	4637      	mov	r7, r6
 800a2fa:	42bb      	cmp	r3, r7
 800a2fc:	460e      	mov	r6, r1
 800a2fe:	d9f4      	bls.n	800a2ea <_printf_i+0x11a>
 800a300:	2b08      	cmp	r3, #8
 800a302:	d10b      	bne.n	800a31c <_printf_i+0x14c>
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	07de      	lsls	r6, r3, #31
 800a308:	d508      	bpl.n	800a31c <_printf_i+0x14c>
 800a30a:	6923      	ldr	r3, [r4, #16]
 800a30c:	6861      	ldr	r1, [r4, #4]
 800a30e:	4299      	cmp	r1, r3
 800a310:	bfde      	ittt	le
 800a312:	2330      	movle	r3, #48	; 0x30
 800a314:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a318:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a31c:	1b52      	subs	r2, r2, r5
 800a31e:	6122      	str	r2, [r4, #16]
 800a320:	f8cd a000 	str.w	sl, [sp]
 800a324:	464b      	mov	r3, r9
 800a326:	aa03      	add	r2, sp, #12
 800a328:	4621      	mov	r1, r4
 800a32a:	4640      	mov	r0, r8
 800a32c:	f7ff fee2 	bl	800a0f4 <_printf_common>
 800a330:	3001      	adds	r0, #1
 800a332:	d14c      	bne.n	800a3ce <_printf_i+0x1fe>
 800a334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a338:	b004      	add	sp, #16
 800a33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a33e:	4835      	ldr	r0, [pc, #212]	; (800a414 <_printf_i+0x244>)
 800a340:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a344:	6829      	ldr	r1, [r5, #0]
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	f851 6b04 	ldr.w	r6, [r1], #4
 800a34c:	6029      	str	r1, [r5, #0]
 800a34e:	061d      	lsls	r5, r3, #24
 800a350:	d514      	bpl.n	800a37c <_printf_i+0x1ac>
 800a352:	07df      	lsls	r7, r3, #31
 800a354:	bf44      	itt	mi
 800a356:	f043 0320 	orrmi.w	r3, r3, #32
 800a35a:	6023      	strmi	r3, [r4, #0]
 800a35c:	b91e      	cbnz	r6, 800a366 <_printf_i+0x196>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	f023 0320 	bic.w	r3, r3, #32
 800a364:	6023      	str	r3, [r4, #0]
 800a366:	2310      	movs	r3, #16
 800a368:	e7b0      	b.n	800a2cc <_printf_i+0xfc>
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	f043 0320 	orr.w	r3, r3, #32
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	2378      	movs	r3, #120	; 0x78
 800a374:	4828      	ldr	r0, [pc, #160]	; (800a418 <_printf_i+0x248>)
 800a376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a37a:	e7e3      	b.n	800a344 <_printf_i+0x174>
 800a37c:	0659      	lsls	r1, r3, #25
 800a37e:	bf48      	it	mi
 800a380:	b2b6      	uxthmi	r6, r6
 800a382:	e7e6      	b.n	800a352 <_printf_i+0x182>
 800a384:	4615      	mov	r5, r2
 800a386:	e7bb      	b.n	800a300 <_printf_i+0x130>
 800a388:	682b      	ldr	r3, [r5, #0]
 800a38a:	6826      	ldr	r6, [r4, #0]
 800a38c:	6961      	ldr	r1, [r4, #20]
 800a38e:	1d18      	adds	r0, r3, #4
 800a390:	6028      	str	r0, [r5, #0]
 800a392:	0635      	lsls	r5, r6, #24
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	d501      	bpl.n	800a39c <_printf_i+0x1cc>
 800a398:	6019      	str	r1, [r3, #0]
 800a39a:	e002      	b.n	800a3a2 <_printf_i+0x1d2>
 800a39c:	0670      	lsls	r0, r6, #25
 800a39e:	d5fb      	bpl.n	800a398 <_printf_i+0x1c8>
 800a3a0:	8019      	strh	r1, [r3, #0]
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	6123      	str	r3, [r4, #16]
 800a3a6:	4615      	mov	r5, r2
 800a3a8:	e7ba      	b.n	800a320 <_printf_i+0x150>
 800a3aa:	682b      	ldr	r3, [r5, #0]
 800a3ac:	1d1a      	adds	r2, r3, #4
 800a3ae:	602a      	str	r2, [r5, #0]
 800a3b0:	681d      	ldr	r5, [r3, #0]
 800a3b2:	6862      	ldr	r2, [r4, #4]
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f7f5 ff12 	bl	80001e0 <memchr>
 800a3bc:	b108      	cbz	r0, 800a3c2 <_printf_i+0x1f2>
 800a3be:	1b40      	subs	r0, r0, r5
 800a3c0:	6060      	str	r0, [r4, #4]
 800a3c2:	6863      	ldr	r3, [r4, #4]
 800a3c4:	6123      	str	r3, [r4, #16]
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3cc:	e7a8      	b.n	800a320 <_printf_i+0x150>
 800a3ce:	6923      	ldr	r3, [r4, #16]
 800a3d0:	462a      	mov	r2, r5
 800a3d2:	4649      	mov	r1, r9
 800a3d4:	4640      	mov	r0, r8
 800a3d6:	47d0      	blx	sl
 800a3d8:	3001      	adds	r0, #1
 800a3da:	d0ab      	beq.n	800a334 <_printf_i+0x164>
 800a3dc:	6823      	ldr	r3, [r4, #0]
 800a3de:	079b      	lsls	r3, r3, #30
 800a3e0:	d413      	bmi.n	800a40a <_printf_i+0x23a>
 800a3e2:	68e0      	ldr	r0, [r4, #12]
 800a3e4:	9b03      	ldr	r3, [sp, #12]
 800a3e6:	4298      	cmp	r0, r3
 800a3e8:	bfb8      	it	lt
 800a3ea:	4618      	movlt	r0, r3
 800a3ec:	e7a4      	b.n	800a338 <_printf_i+0x168>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	4632      	mov	r2, r6
 800a3f2:	4649      	mov	r1, r9
 800a3f4:	4640      	mov	r0, r8
 800a3f6:	47d0      	blx	sl
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	d09b      	beq.n	800a334 <_printf_i+0x164>
 800a3fc:	3501      	adds	r5, #1
 800a3fe:	68e3      	ldr	r3, [r4, #12]
 800a400:	9903      	ldr	r1, [sp, #12]
 800a402:	1a5b      	subs	r3, r3, r1
 800a404:	42ab      	cmp	r3, r5
 800a406:	dcf2      	bgt.n	800a3ee <_printf_i+0x21e>
 800a408:	e7eb      	b.n	800a3e2 <_printf_i+0x212>
 800a40a:	2500      	movs	r5, #0
 800a40c:	f104 0619 	add.w	r6, r4, #25
 800a410:	e7f5      	b.n	800a3fe <_printf_i+0x22e>
 800a412:	bf00      	nop
 800a414:	0800cb62 	.word	0x0800cb62
 800a418:	0800cb73 	.word	0x0800cb73

0800a41c <siprintf>:
 800a41c:	b40e      	push	{r1, r2, r3}
 800a41e:	b500      	push	{lr}
 800a420:	b09c      	sub	sp, #112	; 0x70
 800a422:	ab1d      	add	r3, sp, #116	; 0x74
 800a424:	9002      	str	r0, [sp, #8]
 800a426:	9006      	str	r0, [sp, #24]
 800a428:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a42c:	4809      	ldr	r0, [pc, #36]	; (800a454 <siprintf+0x38>)
 800a42e:	9107      	str	r1, [sp, #28]
 800a430:	9104      	str	r1, [sp, #16]
 800a432:	4909      	ldr	r1, [pc, #36]	; (800a458 <siprintf+0x3c>)
 800a434:	f853 2b04 	ldr.w	r2, [r3], #4
 800a438:	9105      	str	r1, [sp, #20]
 800a43a:	6800      	ldr	r0, [r0, #0]
 800a43c:	9301      	str	r3, [sp, #4]
 800a43e:	a902      	add	r1, sp, #8
 800a440:	f001 fb78 	bl	800bb34 <_svfiprintf_r>
 800a444:	9b02      	ldr	r3, [sp, #8]
 800a446:	2200      	movs	r2, #0
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	b01c      	add	sp, #112	; 0x70
 800a44c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a450:	b003      	add	sp, #12
 800a452:	4770      	bx	lr
 800a454:	2000000c 	.word	0x2000000c
 800a458:	ffff0208 	.word	0xffff0208

0800a45c <quorem>:
 800a45c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a460:	6903      	ldr	r3, [r0, #16]
 800a462:	690c      	ldr	r4, [r1, #16]
 800a464:	42a3      	cmp	r3, r4
 800a466:	4607      	mov	r7, r0
 800a468:	f2c0 8081 	blt.w	800a56e <quorem+0x112>
 800a46c:	3c01      	subs	r4, #1
 800a46e:	f101 0814 	add.w	r8, r1, #20
 800a472:	f100 0514 	add.w	r5, r0, #20
 800a476:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a47a:	9301      	str	r3, [sp, #4]
 800a47c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a480:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a484:	3301      	adds	r3, #1
 800a486:	429a      	cmp	r2, r3
 800a488:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a48c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a490:	fbb2 f6f3 	udiv	r6, r2, r3
 800a494:	d331      	bcc.n	800a4fa <quorem+0x9e>
 800a496:	f04f 0e00 	mov.w	lr, #0
 800a49a:	4640      	mov	r0, r8
 800a49c:	46ac      	mov	ip, r5
 800a49e:	46f2      	mov	sl, lr
 800a4a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4a4:	b293      	uxth	r3, r2
 800a4a6:	fb06 e303 	mla	r3, r6, r3, lr
 800a4aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	ebaa 0303 	sub.w	r3, sl, r3
 800a4b4:	f8dc a000 	ldr.w	sl, [ip]
 800a4b8:	0c12      	lsrs	r2, r2, #16
 800a4ba:	fa13 f38a 	uxtah	r3, r3, sl
 800a4be:	fb06 e202 	mla	r2, r6, r2, lr
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	9b00      	ldr	r3, [sp, #0]
 800a4c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4ca:	b292      	uxth	r2, r2
 800a4cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a4d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4d4:	f8bd 3000 	ldrh.w	r3, [sp]
 800a4d8:	4581      	cmp	r9, r0
 800a4da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4de:	f84c 3b04 	str.w	r3, [ip], #4
 800a4e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a4e6:	d2db      	bcs.n	800a4a0 <quorem+0x44>
 800a4e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a4ec:	b92b      	cbnz	r3, 800a4fa <quorem+0x9e>
 800a4ee:	9b01      	ldr	r3, [sp, #4]
 800a4f0:	3b04      	subs	r3, #4
 800a4f2:	429d      	cmp	r5, r3
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	d32e      	bcc.n	800a556 <quorem+0xfa>
 800a4f8:	613c      	str	r4, [r7, #16]
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	f001 f8c6 	bl	800b68c <__mcmp>
 800a500:	2800      	cmp	r0, #0
 800a502:	db24      	blt.n	800a54e <quorem+0xf2>
 800a504:	3601      	adds	r6, #1
 800a506:	4628      	mov	r0, r5
 800a508:	f04f 0c00 	mov.w	ip, #0
 800a50c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a510:	f8d0 e000 	ldr.w	lr, [r0]
 800a514:	b293      	uxth	r3, r2
 800a516:	ebac 0303 	sub.w	r3, ip, r3
 800a51a:	0c12      	lsrs	r2, r2, #16
 800a51c:	fa13 f38e 	uxtah	r3, r3, lr
 800a520:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a524:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a528:	b29b      	uxth	r3, r3
 800a52a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a52e:	45c1      	cmp	r9, r8
 800a530:	f840 3b04 	str.w	r3, [r0], #4
 800a534:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a538:	d2e8      	bcs.n	800a50c <quorem+0xb0>
 800a53a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a53e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a542:	b922      	cbnz	r2, 800a54e <quorem+0xf2>
 800a544:	3b04      	subs	r3, #4
 800a546:	429d      	cmp	r5, r3
 800a548:	461a      	mov	r2, r3
 800a54a:	d30a      	bcc.n	800a562 <quorem+0x106>
 800a54c:	613c      	str	r4, [r7, #16]
 800a54e:	4630      	mov	r0, r6
 800a550:	b003      	add	sp, #12
 800a552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a556:	6812      	ldr	r2, [r2, #0]
 800a558:	3b04      	subs	r3, #4
 800a55a:	2a00      	cmp	r2, #0
 800a55c:	d1cc      	bne.n	800a4f8 <quorem+0x9c>
 800a55e:	3c01      	subs	r4, #1
 800a560:	e7c7      	b.n	800a4f2 <quorem+0x96>
 800a562:	6812      	ldr	r2, [r2, #0]
 800a564:	3b04      	subs	r3, #4
 800a566:	2a00      	cmp	r2, #0
 800a568:	d1f0      	bne.n	800a54c <quorem+0xf0>
 800a56a:	3c01      	subs	r4, #1
 800a56c:	e7eb      	b.n	800a546 <quorem+0xea>
 800a56e:	2000      	movs	r0, #0
 800a570:	e7ee      	b.n	800a550 <quorem+0xf4>
 800a572:	0000      	movs	r0, r0
 800a574:	0000      	movs	r0, r0
	...

0800a578 <_dtoa_r>:
 800a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a57c:	ed2d 8b04 	vpush	{d8-d9}
 800a580:	ec57 6b10 	vmov	r6, r7, d0
 800a584:	b093      	sub	sp, #76	; 0x4c
 800a586:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a588:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a58c:	9106      	str	r1, [sp, #24]
 800a58e:	ee10 aa10 	vmov	sl, s0
 800a592:	4604      	mov	r4, r0
 800a594:	9209      	str	r2, [sp, #36]	; 0x24
 800a596:	930c      	str	r3, [sp, #48]	; 0x30
 800a598:	46bb      	mov	fp, r7
 800a59a:	b975      	cbnz	r5, 800a5ba <_dtoa_r+0x42>
 800a59c:	2010      	movs	r0, #16
 800a59e:	f000 fddd 	bl	800b15c <malloc>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	6260      	str	r0, [r4, #36]	; 0x24
 800a5a6:	b920      	cbnz	r0, 800a5b2 <_dtoa_r+0x3a>
 800a5a8:	4ba7      	ldr	r3, [pc, #668]	; (800a848 <_dtoa_r+0x2d0>)
 800a5aa:	21ea      	movs	r1, #234	; 0xea
 800a5ac:	48a7      	ldr	r0, [pc, #668]	; (800a84c <_dtoa_r+0x2d4>)
 800a5ae:	f001 fbd1 	bl	800bd54 <__assert_func>
 800a5b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5b6:	6005      	str	r5, [r0, #0]
 800a5b8:	60c5      	str	r5, [r0, #12]
 800a5ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5bc:	6819      	ldr	r1, [r3, #0]
 800a5be:	b151      	cbz	r1, 800a5d6 <_dtoa_r+0x5e>
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	604a      	str	r2, [r1, #4]
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	4093      	lsls	r3, r2
 800a5c8:	608b      	str	r3, [r1, #8]
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	f000 fe1c 	bl	800b208 <_Bfree>
 800a5d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
 800a5d6:	1e3b      	subs	r3, r7, #0
 800a5d8:	bfaa      	itet	ge
 800a5da:	2300      	movge	r3, #0
 800a5dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a5e0:	f8c8 3000 	strge.w	r3, [r8]
 800a5e4:	4b9a      	ldr	r3, [pc, #616]	; (800a850 <_dtoa_r+0x2d8>)
 800a5e6:	bfbc      	itt	lt
 800a5e8:	2201      	movlt	r2, #1
 800a5ea:	f8c8 2000 	strlt.w	r2, [r8]
 800a5ee:	ea33 030b 	bics.w	r3, r3, fp
 800a5f2:	d11b      	bne.n	800a62c <_dtoa_r+0xb4>
 800a5f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a5fa:	6013      	str	r3, [r2, #0]
 800a5fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a600:	4333      	orrs	r3, r6
 800a602:	f000 8592 	beq.w	800b12a <_dtoa_r+0xbb2>
 800a606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a608:	b963      	cbnz	r3, 800a624 <_dtoa_r+0xac>
 800a60a:	4b92      	ldr	r3, [pc, #584]	; (800a854 <_dtoa_r+0x2dc>)
 800a60c:	e022      	b.n	800a654 <_dtoa_r+0xdc>
 800a60e:	4b92      	ldr	r3, [pc, #584]	; (800a858 <_dtoa_r+0x2e0>)
 800a610:	9301      	str	r3, [sp, #4]
 800a612:	3308      	adds	r3, #8
 800a614:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	9801      	ldr	r0, [sp, #4]
 800a61a:	b013      	add	sp, #76	; 0x4c
 800a61c:	ecbd 8b04 	vpop	{d8-d9}
 800a620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a624:	4b8b      	ldr	r3, [pc, #556]	; (800a854 <_dtoa_r+0x2dc>)
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	3303      	adds	r3, #3
 800a62a:	e7f3      	b.n	800a614 <_dtoa_r+0x9c>
 800a62c:	2200      	movs	r2, #0
 800a62e:	2300      	movs	r3, #0
 800a630:	4650      	mov	r0, sl
 800a632:	4659      	mov	r1, fp
 800a634:	f7f6 fa48 	bl	8000ac8 <__aeabi_dcmpeq>
 800a638:	ec4b ab19 	vmov	d9, sl, fp
 800a63c:	4680      	mov	r8, r0
 800a63e:	b158      	cbz	r0, 800a658 <_dtoa_r+0xe0>
 800a640:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a642:	2301      	movs	r3, #1
 800a644:	6013      	str	r3, [r2, #0]
 800a646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 856b 	beq.w	800b124 <_dtoa_r+0xbac>
 800a64e:	4883      	ldr	r0, [pc, #524]	; (800a85c <_dtoa_r+0x2e4>)
 800a650:	6018      	str	r0, [r3, #0]
 800a652:	1e43      	subs	r3, r0, #1
 800a654:	9301      	str	r3, [sp, #4]
 800a656:	e7df      	b.n	800a618 <_dtoa_r+0xa0>
 800a658:	ec4b ab10 	vmov	d0, sl, fp
 800a65c:	aa10      	add	r2, sp, #64	; 0x40
 800a65e:	a911      	add	r1, sp, #68	; 0x44
 800a660:	4620      	mov	r0, r4
 800a662:	f001 f8b9 	bl	800b7d8 <__d2b>
 800a666:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a66a:	ee08 0a10 	vmov	s16, r0
 800a66e:	2d00      	cmp	r5, #0
 800a670:	f000 8084 	beq.w	800a77c <_dtoa_r+0x204>
 800a674:	ee19 3a90 	vmov	r3, s19
 800a678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a67c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a680:	4656      	mov	r6, sl
 800a682:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a686:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a68a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a68e:	4b74      	ldr	r3, [pc, #464]	; (800a860 <_dtoa_r+0x2e8>)
 800a690:	2200      	movs	r2, #0
 800a692:	4630      	mov	r0, r6
 800a694:	4639      	mov	r1, r7
 800a696:	f7f5 fdf7 	bl	8000288 <__aeabi_dsub>
 800a69a:	a365      	add	r3, pc, #404	; (adr r3, 800a830 <_dtoa_r+0x2b8>)
 800a69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a0:	f7f5 ffaa 	bl	80005f8 <__aeabi_dmul>
 800a6a4:	a364      	add	r3, pc, #400	; (adr r3, 800a838 <_dtoa_r+0x2c0>)
 800a6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6aa:	f7f5 fdef 	bl	800028c <__adddf3>
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	460f      	mov	r7, r1
 800a6b4:	f7f5 ff36 	bl	8000524 <__aeabi_i2d>
 800a6b8:	a361      	add	r3, pc, #388	; (adr r3, 800a840 <_dtoa_r+0x2c8>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f7f5 ff9b 	bl	80005f8 <__aeabi_dmul>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	4639      	mov	r1, r7
 800a6ca:	f7f5 fddf 	bl	800028c <__adddf3>
 800a6ce:	4606      	mov	r6, r0
 800a6d0:	460f      	mov	r7, r1
 800a6d2:	f7f6 fa41 	bl	8000b58 <__aeabi_d2iz>
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	9000      	str	r0, [sp, #0]
 800a6da:	2300      	movs	r3, #0
 800a6dc:	4630      	mov	r0, r6
 800a6de:	4639      	mov	r1, r7
 800a6e0:	f7f6 f9fc 	bl	8000adc <__aeabi_dcmplt>
 800a6e4:	b150      	cbz	r0, 800a6fc <_dtoa_r+0x184>
 800a6e6:	9800      	ldr	r0, [sp, #0]
 800a6e8:	f7f5 ff1c 	bl	8000524 <__aeabi_i2d>
 800a6ec:	4632      	mov	r2, r6
 800a6ee:	463b      	mov	r3, r7
 800a6f0:	f7f6 f9ea 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6f4:	b910      	cbnz	r0, 800a6fc <_dtoa_r+0x184>
 800a6f6:	9b00      	ldr	r3, [sp, #0]
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	9b00      	ldr	r3, [sp, #0]
 800a6fe:	2b16      	cmp	r3, #22
 800a700:	d85a      	bhi.n	800a7b8 <_dtoa_r+0x240>
 800a702:	9a00      	ldr	r2, [sp, #0]
 800a704:	4b57      	ldr	r3, [pc, #348]	; (800a864 <_dtoa_r+0x2ec>)
 800a706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a70e:	ec51 0b19 	vmov	r0, r1, d9
 800a712:	f7f6 f9e3 	bl	8000adc <__aeabi_dcmplt>
 800a716:	2800      	cmp	r0, #0
 800a718:	d050      	beq.n	800a7bc <_dtoa_r+0x244>
 800a71a:	9b00      	ldr	r3, [sp, #0]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	2300      	movs	r3, #0
 800a722:	930b      	str	r3, [sp, #44]	; 0x2c
 800a724:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a726:	1b5d      	subs	r5, r3, r5
 800a728:	1e6b      	subs	r3, r5, #1
 800a72a:	9305      	str	r3, [sp, #20]
 800a72c:	bf45      	ittet	mi
 800a72e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a732:	9304      	strmi	r3, [sp, #16]
 800a734:	2300      	movpl	r3, #0
 800a736:	2300      	movmi	r3, #0
 800a738:	bf4c      	ite	mi
 800a73a:	9305      	strmi	r3, [sp, #20]
 800a73c:	9304      	strpl	r3, [sp, #16]
 800a73e:	9b00      	ldr	r3, [sp, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	db3d      	blt.n	800a7c0 <_dtoa_r+0x248>
 800a744:	9b05      	ldr	r3, [sp, #20]
 800a746:	9a00      	ldr	r2, [sp, #0]
 800a748:	920a      	str	r2, [sp, #40]	; 0x28
 800a74a:	4413      	add	r3, r2
 800a74c:	9305      	str	r3, [sp, #20]
 800a74e:	2300      	movs	r3, #0
 800a750:	9307      	str	r3, [sp, #28]
 800a752:	9b06      	ldr	r3, [sp, #24]
 800a754:	2b09      	cmp	r3, #9
 800a756:	f200 8089 	bhi.w	800a86c <_dtoa_r+0x2f4>
 800a75a:	2b05      	cmp	r3, #5
 800a75c:	bfc4      	itt	gt
 800a75e:	3b04      	subgt	r3, #4
 800a760:	9306      	strgt	r3, [sp, #24]
 800a762:	9b06      	ldr	r3, [sp, #24]
 800a764:	f1a3 0302 	sub.w	r3, r3, #2
 800a768:	bfcc      	ite	gt
 800a76a:	2500      	movgt	r5, #0
 800a76c:	2501      	movle	r5, #1
 800a76e:	2b03      	cmp	r3, #3
 800a770:	f200 8087 	bhi.w	800a882 <_dtoa_r+0x30a>
 800a774:	e8df f003 	tbb	[pc, r3]
 800a778:	59383a2d 	.word	0x59383a2d
 800a77c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a780:	441d      	add	r5, r3
 800a782:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a786:	2b20      	cmp	r3, #32
 800a788:	bfc1      	itttt	gt
 800a78a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a78e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a792:	fa0b f303 	lslgt.w	r3, fp, r3
 800a796:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a79a:	bfda      	itte	le
 800a79c:	f1c3 0320 	rsble	r3, r3, #32
 800a7a0:	fa06 f003 	lslle.w	r0, r6, r3
 800a7a4:	4318      	orrgt	r0, r3
 800a7a6:	f7f5 fead 	bl	8000504 <__aeabi_ui2d>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	4606      	mov	r6, r0
 800a7ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a7b2:	3d01      	subs	r5, #1
 800a7b4:	930e      	str	r3, [sp, #56]	; 0x38
 800a7b6:	e76a      	b.n	800a68e <_dtoa_r+0x116>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e7b2      	b.n	800a722 <_dtoa_r+0x1aa>
 800a7bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7be:	e7b1      	b.n	800a724 <_dtoa_r+0x1ac>
 800a7c0:	9b04      	ldr	r3, [sp, #16]
 800a7c2:	9a00      	ldr	r2, [sp, #0]
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	9304      	str	r3, [sp, #16]
 800a7c8:	4253      	negs	r3, r2
 800a7ca:	9307      	str	r3, [sp, #28]
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a7d0:	e7bf      	b.n	800a752 <_dtoa_r+0x1da>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	9308      	str	r3, [sp, #32]
 800a7d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	dc55      	bgt.n	800a888 <_dtoa_r+0x310>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a7e6:	e00c      	b.n	800a802 <_dtoa_r+0x28a>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e7f3      	b.n	800a7d4 <_dtoa_r+0x25c>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7f0:	9308      	str	r3, [sp, #32]
 800a7f2:	9b00      	ldr	r3, [sp, #0]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	9302      	str	r3, [sp, #8]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	9303      	str	r3, [sp, #12]
 800a7fe:	bfb8      	it	lt
 800a800:	2301      	movlt	r3, #1
 800a802:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a804:	2200      	movs	r2, #0
 800a806:	6042      	str	r2, [r0, #4]
 800a808:	2204      	movs	r2, #4
 800a80a:	f102 0614 	add.w	r6, r2, #20
 800a80e:	429e      	cmp	r6, r3
 800a810:	6841      	ldr	r1, [r0, #4]
 800a812:	d93d      	bls.n	800a890 <_dtoa_r+0x318>
 800a814:	4620      	mov	r0, r4
 800a816:	f000 fcb7 	bl	800b188 <_Balloc>
 800a81a:	9001      	str	r0, [sp, #4]
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d13b      	bne.n	800a898 <_dtoa_r+0x320>
 800a820:	4b11      	ldr	r3, [pc, #68]	; (800a868 <_dtoa_r+0x2f0>)
 800a822:	4602      	mov	r2, r0
 800a824:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a828:	e6c0      	b.n	800a5ac <_dtoa_r+0x34>
 800a82a:	2301      	movs	r3, #1
 800a82c:	e7df      	b.n	800a7ee <_dtoa_r+0x276>
 800a82e:	bf00      	nop
 800a830:	636f4361 	.word	0x636f4361
 800a834:	3fd287a7 	.word	0x3fd287a7
 800a838:	8b60c8b3 	.word	0x8b60c8b3
 800a83c:	3fc68a28 	.word	0x3fc68a28
 800a840:	509f79fb 	.word	0x509f79fb
 800a844:	3fd34413 	.word	0x3fd34413
 800a848:	0800cb91 	.word	0x0800cb91
 800a84c:	0800cba8 	.word	0x0800cba8
 800a850:	7ff00000 	.word	0x7ff00000
 800a854:	0800cb8d 	.word	0x0800cb8d
 800a858:	0800cb84 	.word	0x0800cb84
 800a85c:	0800cb61 	.word	0x0800cb61
 800a860:	3ff80000 	.word	0x3ff80000
 800a864:	0800cc98 	.word	0x0800cc98
 800a868:	0800cc03 	.word	0x0800cc03
 800a86c:	2501      	movs	r5, #1
 800a86e:	2300      	movs	r3, #0
 800a870:	9306      	str	r3, [sp, #24]
 800a872:	9508      	str	r5, [sp, #32]
 800a874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a878:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a87c:	2200      	movs	r2, #0
 800a87e:	2312      	movs	r3, #18
 800a880:	e7b0      	b.n	800a7e4 <_dtoa_r+0x26c>
 800a882:	2301      	movs	r3, #1
 800a884:	9308      	str	r3, [sp, #32]
 800a886:	e7f5      	b.n	800a874 <_dtoa_r+0x2fc>
 800a888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a88a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a88e:	e7b8      	b.n	800a802 <_dtoa_r+0x28a>
 800a890:	3101      	adds	r1, #1
 800a892:	6041      	str	r1, [r0, #4]
 800a894:	0052      	lsls	r2, r2, #1
 800a896:	e7b8      	b.n	800a80a <_dtoa_r+0x292>
 800a898:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a89a:	9a01      	ldr	r2, [sp, #4]
 800a89c:	601a      	str	r2, [r3, #0]
 800a89e:	9b03      	ldr	r3, [sp, #12]
 800a8a0:	2b0e      	cmp	r3, #14
 800a8a2:	f200 809d 	bhi.w	800a9e0 <_dtoa_r+0x468>
 800a8a6:	2d00      	cmp	r5, #0
 800a8a8:	f000 809a 	beq.w	800a9e0 <_dtoa_r+0x468>
 800a8ac:	9b00      	ldr	r3, [sp, #0]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	dd32      	ble.n	800a918 <_dtoa_r+0x3a0>
 800a8b2:	4ab7      	ldr	r2, [pc, #732]	; (800ab90 <_dtoa_r+0x618>)
 800a8b4:	f003 030f 	and.w	r3, r3, #15
 800a8b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8c0:	9b00      	ldr	r3, [sp, #0]
 800a8c2:	05d8      	lsls	r0, r3, #23
 800a8c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a8c8:	d516      	bpl.n	800a8f8 <_dtoa_r+0x380>
 800a8ca:	4bb2      	ldr	r3, [pc, #712]	; (800ab94 <_dtoa_r+0x61c>)
 800a8cc:	ec51 0b19 	vmov	r0, r1, d9
 800a8d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8d4:	f7f5 ffba 	bl	800084c <__aeabi_ddiv>
 800a8d8:	f007 070f 	and.w	r7, r7, #15
 800a8dc:	4682      	mov	sl, r0
 800a8de:	468b      	mov	fp, r1
 800a8e0:	2503      	movs	r5, #3
 800a8e2:	4eac      	ldr	r6, [pc, #688]	; (800ab94 <_dtoa_r+0x61c>)
 800a8e4:	b957      	cbnz	r7, 800a8fc <_dtoa_r+0x384>
 800a8e6:	4642      	mov	r2, r8
 800a8e8:	464b      	mov	r3, r9
 800a8ea:	4650      	mov	r0, sl
 800a8ec:	4659      	mov	r1, fp
 800a8ee:	f7f5 ffad 	bl	800084c <__aeabi_ddiv>
 800a8f2:	4682      	mov	sl, r0
 800a8f4:	468b      	mov	fp, r1
 800a8f6:	e028      	b.n	800a94a <_dtoa_r+0x3d2>
 800a8f8:	2502      	movs	r5, #2
 800a8fa:	e7f2      	b.n	800a8e2 <_dtoa_r+0x36a>
 800a8fc:	07f9      	lsls	r1, r7, #31
 800a8fe:	d508      	bpl.n	800a912 <_dtoa_r+0x39a>
 800a900:	4640      	mov	r0, r8
 800a902:	4649      	mov	r1, r9
 800a904:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a908:	f7f5 fe76 	bl	80005f8 <__aeabi_dmul>
 800a90c:	3501      	adds	r5, #1
 800a90e:	4680      	mov	r8, r0
 800a910:	4689      	mov	r9, r1
 800a912:	107f      	asrs	r7, r7, #1
 800a914:	3608      	adds	r6, #8
 800a916:	e7e5      	b.n	800a8e4 <_dtoa_r+0x36c>
 800a918:	f000 809b 	beq.w	800aa52 <_dtoa_r+0x4da>
 800a91c:	9b00      	ldr	r3, [sp, #0]
 800a91e:	4f9d      	ldr	r7, [pc, #628]	; (800ab94 <_dtoa_r+0x61c>)
 800a920:	425e      	negs	r6, r3
 800a922:	4b9b      	ldr	r3, [pc, #620]	; (800ab90 <_dtoa_r+0x618>)
 800a924:	f006 020f 	and.w	r2, r6, #15
 800a928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	ec51 0b19 	vmov	r0, r1, d9
 800a934:	f7f5 fe60 	bl	80005f8 <__aeabi_dmul>
 800a938:	1136      	asrs	r6, r6, #4
 800a93a:	4682      	mov	sl, r0
 800a93c:	468b      	mov	fp, r1
 800a93e:	2300      	movs	r3, #0
 800a940:	2502      	movs	r5, #2
 800a942:	2e00      	cmp	r6, #0
 800a944:	d17a      	bne.n	800aa3c <_dtoa_r+0x4c4>
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1d3      	bne.n	800a8f2 <_dtoa_r+0x37a>
 800a94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	f000 8082 	beq.w	800aa56 <_dtoa_r+0x4de>
 800a952:	4b91      	ldr	r3, [pc, #580]	; (800ab98 <_dtoa_r+0x620>)
 800a954:	2200      	movs	r2, #0
 800a956:	4650      	mov	r0, sl
 800a958:	4659      	mov	r1, fp
 800a95a:	f7f6 f8bf 	bl	8000adc <__aeabi_dcmplt>
 800a95e:	2800      	cmp	r0, #0
 800a960:	d079      	beq.n	800aa56 <_dtoa_r+0x4de>
 800a962:	9b03      	ldr	r3, [sp, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d076      	beq.n	800aa56 <_dtoa_r+0x4de>
 800a968:	9b02      	ldr	r3, [sp, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	dd36      	ble.n	800a9dc <_dtoa_r+0x464>
 800a96e:	9b00      	ldr	r3, [sp, #0]
 800a970:	4650      	mov	r0, sl
 800a972:	4659      	mov	r1, fp
 800a974:	1e5f      	subs	r7, r3, #1
 800a976:	2200      	movs	r2, #0
 800a978:	4b88      	ldr	r3, [pc, #544]	; (800ab9c <_dtoa_r+0x624>)
 800a97a:	f7f5 fe3d 	bl	80005f8 <__aeabi_dmul>
 800a97e:	9e02      	ldr	r6, [sp, #8]
 800a980:	4682      	mov	sl, r0
 800a982:	468b      	mov	fp, r1
 800a984:	3501      	adds	r5, #1
 800a986:	4628      	mov	r0, r5
 800a988:	f7f5 fdcc 	bl	8000524 <__aeabi_i2d>
 800a98c:	4652      	mov	r2, sl
 800a98e:	465b      	mov	r3, fp
 800a990:	f7f5 fe32 	bl	80005f8 <__aeabi_dmul>
 800a994:	4b82      	ldr	r3, [pc, #520]	; (800aba0 <_dtoa_r+0x628>)
 800a996:	2200      	movs	r2, #0
 800a998:	f7f5 fc78 	bl	800028c <__adddf3>
 800a99c:	46d0      	mov	r8, sl
 800a99e:	46d9      	mov	r9, fp
 800a9a0:	4682      	mov	sl, r0
 800a9a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a9a6:	2e00      	cmp	r6, #0
 800a9a8:	d158      	bne.n	800aa5c <_dtoa_r+0x4e4>
 800a9aa:	4b7e      	ldr	r3, [pc, #504]	; (800aba4 <_dtoa_r+0x62c>)
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	f7f5 fc69 	bl	8000288 <__aeabi_dsub>
 800a9b6:	4652      	mov	r2, sl
 800a9b8:	465b      	mov	r3, fp
 800a9ba:	4680      	mov	r8, r0
 800a9bc:	4689      	mov	r9, r1
 800a9be:	f7f6 f8ab 	bl	8000b18 <__aeabi_dcmpgt>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	f040 8295 	bne.w	800aef2 <_dtoa_r+0x97a>
 800a9c8:	4652      	mov	r2, sl
 800a9ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	f7f6 f883 	bl	8000adc <__aeabi_dcmplt>
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	f040 8289 	bne.w	800aeee <_dtoa_r+0x976>
 800a9dc:	ec5b ab19 	vmov	sl, fp, d9
 800a9e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f2c0 8148 	blt.w	800ac78 <_dtoa_r+0x700>
 800a9e8:	9a00      	ldr	r2, [sp, #0]
 800a9ea:	2a0e      	cmp	r2, #14
 800a9ec:	f300 8144 	bgt.w	800ac78 <_dtoa_r+0x700>
 800a9f0:	4b67      	ldr	r3, [pc, #412]	; (800ab90 <_dtoa_r+0x618>)
 800a9f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f280 80d5 	bge.w	800abac <_dtoa_r+0x634>
 800aa02:	9b03      	ldr	r3, [sp, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f300 80d1 	bgt.w	800abac <_dtoa_r+0x634>
 800aa0a:	f040 826f 	bne.w	800aeec <_dtoa_r+0x974>
 800aa0e:	4b65      	ldr	r3, [pc, #404]	; (800aba4 <_dtoa_r+0x62c>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	4640      	mov	r0, r8
 800aa14:	4649      	mov	r1, r9
 800aa16:	f7f5 fdef 	bl	80005f8 <__aeabi_dmul>
 800aa1a:	4652      	mov	r2, sl
 800aa1c:	465b      	mov	r3, fp
 800aa1e:	f7f6 f871 	bl	8000b04 <__aeabi_dcmpge>
 800aa22:	9e03      	ldr	r6, [sp, #12]
 800aa24:	4637      	mov	r7, r6
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f040 8245 	bne.w	800aeb6 <_dtoa_r+0x93e>
 800aa2c:	9d01      	ldr	r5, [sp, #4]
 800aa2e:	2331      	movs	r3, #49	; 0x31
 800aa30:	f805 3b01 	strb.w	r3, [r5], #1
 800aa34:	9b00      	ldr	r3, [sp, #0]
 800aa36:	3301      	adds	r3, #1
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	e240      	b.n	800aebe <_dtoa_r+0x946>
 800aa3c:	07f2      	lsls	r2, r6, #31
 800aa3e:	d505      	bpl.n	800aa4c <_dtoa_r+0x4d4>
 800aa40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa44:	f7f5 fdd8 	bl	80005f8 <__aeabi_dmul>
 800aa48:	3501      	adds	r5, #1
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	1076      	asrs	r6, r6, #1
 800aa4e:	3708      	adds	r7, #8
 800aa50:	e777      	b.n	800a942 <_dtoa_r+0x3ca>
 800aa52:	2502      	movs	r5, #2
 800aa54:	e779      	b.n	800a94a <_dtoa_r+0x3d2>
 800aa56:	9f00      	ldr	r7, [sp, #0]
 800aa58:	9e03      	ldr	r6, [sp, #12]
 800aa5a:	e794      	b.n	800a986 <_dtoa_r+0x40e>
 800aa5c:	9901      	ldr	r1, [sp, #4]
 800aa5e:	4b4c      	ldr	r3, [pc, #304]	; (800ab90 <_dtoa_r+0x618>)
 800aa60:	4431      	add	r1, r6
 800aa62:	910d      	str	r1, [sp, #52]	; 0x34
 800aa64:	9908      	ldr	r1, [sp, #32]
 800aa66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa6e:	2900      	cmp	r1, #0
 800aa70:	d043      	beq.n	800aafa <_dtoa_r+0x582>
 800aa72:	494d      	ldr	r1, [pc, #308]	; (800aba8 <_dtoa_r+0x630>)
 800aa74:	2000      	movs	r0, #0
 800aa76:	f7f5 fee9 	bl	800084c <__aeabi_ddiv>
 800aa7a:	4652      	mov	r2, sl
 800aa7c:	465b      	mov	r3, fp
 800aa7e:	f7f5 fc03 	bl	8000288 <__aeabi_dsub>
 800aa82:	9d01      	ldr	r5, [sp, #4]
 800aa84:	4682      	mov	sl, r0
 800aa86:	468b      	mov	fp, r1
 800aa88:	4649      	mov	r1, r9
 800aa8a:	4640      	mov	r0, r8
 800aa8c:	f7f6 f864 	bl	8000b58 <__aeabi_d2iz>
 800aa90:	4606      	mov	r6, r0
 800aa92:	f7f5 fd47 	bl	8000524 <__aeabi_i2d>
 800aa96:	4602      	mov	r2, r0
 800aa98:	460b      	mov	r3, r1
 800aa9a:	4640      	mov	r0, r8
 800aa9c:	4649      	mov	r1, r9
 800aa9e:	f7f5 fbf3 	bl	8000288 <__aeabi_dsub>
 800aaa2:	3630      	adds	r6, #48	; 0x30
 800aaa4:	f805 6b01 	strb.w	r6, [r5], #1
 800aaa8:	4652      	mov	r2, sl
 800aaaa:	465b      	mov	r3, fp
 800aaac:	4680      	mov	r8, r0
 800aaae:	4689      	mov	r9, r1
 800aab0:	f7f6 f814 	bl	8000adc <__aeabi_dcmplt>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d163      	bne.n	800ab80 <_dtoa_r+0x608>
 800aab8:	4642      	mov	r2, r8
 800aaba:	464b      	mov	r3, r9
 800aabc:	4936      	ldr	r1, [pc, #216]	; (800ab98 <_dtoa_r+0x620>)
 800aabe:	2000      	movs	r0, #0
 800aac0:	f7f5 fbe2 	bl	8000288 <__aeabi_dsub>
 800aac4:	4652      	mov	r2, sl
 800aac6:	465b      	mov	r3, fp
 800aac8:	f7f6 f808 	bl	8000adc <__aeabi_dcmplt>
 800aacc:	2800      	cmp	r0, #0
 800aace:	f040 80b5 	bne.w	800ac3c <_dtoa_r+0x6c4>
 800aad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aad4:	429d      	cmp	r5, r3
 800aad6:	d081      	beq.n	800a9dc <_dtoa_r+0x464>
 800aad8:	4b30      	ldr	r3, [pc, #192]	; (800ab9c <_dtoa_r+0x624>)
 800aada:	2200      	movs	r2, #0
 800aadc:	4650      	mov	r0, sl
 800aade:	4659      	mov	r1, fp
 800aae0:	f7f5 fd8a 	bl	80005f8 <__aeabi_dmul>
 800aae4:	4b2d      	ldr	r3, [pc, #180]	; (800ab9c <_dtoa_r+0x624>)
 800aae6:	4682      	mov	sl, r0
 800aae8:	468b      	mov	fp, r1
 800aaea:	4640      	mov	r0, r8
 800aaec:	4649      	mov	r1, r9
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f7f5 fd82 	bl	80005f8 <__aeabi_dmul>
 800aaf4:	4680      	mov	r8, r0
 800aaf6:	4689      	mov	r9, r1
 800aaf8:	e7c6      	b.n	800aa88 <_dtoa_r+0x510>
 800aafa:	4650      	mov	r0, sl
 800aafc:	4659      	mov	r1, fp
 800aafe:	f7f5 fd7b 	bl	80005f8 <__aeabi_dmul>
 800ab02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab04:	9d01      	ldr	r5, [sp, #4]
 800ab06:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab08:	4682      	mov	sl, r0
 800ab0a:	468b      	mov	fp, r1
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	4640      	mov	r0, r8
 800ab10:	f7f6 f822 	bl	8000b58 <__aeabi_d2iz>
 800ab14:	4606      	mov	r6, r0
 800ab16:	f7f5 fd05 	bl	8000524 <__aeabi_i2d>
 800ab1a:	3630      	adds	r6, #48	; 0x30
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	460b      	mov	r3, r1
 800ab20:	4640      	mov	r0, r8
 800ab22:	4649      	mov	r1, r9
 800ab24:	f7f5 fbb0 	bl	8000288 <__aeabi_dsub>
 800ab28:	f805 6b01 	strb.w	r6, [r5], #1
 800ab2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab2e:	429d      	cmp	r5, r3
 800ab30:	4680      	mov	r8, r0
 800ab32:	4689      	mov	r9, r1
 800ab34:	f04f 0200 	mov.w	r2, #0
 800ab38:	d124      	bne.n	800ab84 <_dtoa_r+0x60c>
 800ab3a:	4b1b      	ldr	r3, [pc, #108]	; (800aba8 <_dtoa_r+0x630>)
 800ab3c:	4650      	mov	r0, sl
 800ab3e:	4659      	mov	r1, fp
 800ab40:	f7f5 fba4 	bl	800028c <__adddf3>
 800ab44:	4602      	mov	r2, r0
 800ab46:	460b      	mov	r3, r1
 800ab48:	4640      	mov	r0, r8
 800ab4a:	4649      	mov	r1, r9
 800ab4c:	f7f5 ffe4 	bl	8000b18 <__aeabi_dcmpgt>
 800ab50:	2800      	cmp	r0, #0
 800ab52:	d173      	bne.n	800ac3c <_dtoa_r+0x6c4>
 800ab54:	4652      	mov	r2, sl
 800ab56:	465b      	mov	r3, fp
 800ab58:	4913      	ldr	r1, [pc, #76]	; (800aba8 <_dtoa_r+0x630>)
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	f7f5 fb94 	bl	8000288 <__aeabi_dsub>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4640      	mov	r0, r8
 800ab66:	4649      	mov	r1, r9
 800ab68:	f7f5 ffb8 	bl	8000adc <__aeabi_dcmplt>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	f43f af35 	beq.w	800a9dc <_dtoa_r+0x464>
 800ab72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab74:	1e6b      	subs	r3, r5, #1
 800ab76:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab7c:	2b30      	cmp	r3, #48	; 0x30
 800ab7e:	d0f8      	beq.n	800ab72 <_dtoa_r+0x5fa>
 800ab80:	9700      	str	r7, [sp, #0]
 800ab82:	e049      	b.n	800ac18 <_dtoa_r+0x6a0>
 800ab84:	4b05      	ldr	r3, [pc, #20]	; (800ab9c <_dtoa_r+0x624>)
 800ab86:	f7f5 fd37 	bl	80005f8 <__aeabi_dmul>
 800ab8a:	4680      	mov	r8, r0
 800ab8c:	4689      	mov	r9, r1
 800ab8e:	e7bd      	b.n	800ab0c <_dtoa_r+0x594>
 800ab90:	0800cc98 	.word	0x0800cc98
 800ab94:	0800cc70 	.word	0x0800cc70
 800ab98:	3ff00000 	.word	0x3ff00000
 800ab9c:	40240000 	.word	0x40240000
 800aba0:	401c0000 	.word	0x401c0000
 800aba4:	40140000 	.word	0x40140000
 800aba8:	3fe00000 	.word	0x3fe00000
 800abac:	9d01      	ldr	r5, [sp, #4]
 800abae:	4656      	mov	r6, sl
 800abb0:	465f      	mov	r7, fp
 800abb2:	4642      	mov	r2, r8
 800abb4:	464b      	mov	r3, r9
 800abb6:	4630      	mov	r0, r6
 800abb8:	4639      	mov	r1, r7
 800abba:	f7f5 fe47 	bl	800084c <__aeabi_ddiv>
 800abbe:	f7f5 ffcb 	bl	8000b58 <__aeabi_d2iz>
 800abc2:	4682      	mov	sl, r0
 800abc4:	f7f5 fcae 	bl	8000524 <__aeabi_i2d>
 800abc8:	4642      	mov	r2, r8
 800abca:	464b      	mov	r3, r9
 800abcc:	f7f5 fd14 	bl	80005f8 <__aeabi_dmul>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	4630      	mov	r0, r6
 800abd6:	4639      	mov	r1, r7
 800abd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800abdc:	f7f5 fb54 	bl	8000288 <__aeabi_dsub>
 800abe0:	f805 6b01 	strb.w	r6, [r5], #1
 800abe4:	9e01      	ldr	r6, [sp, #4]
 800abe6:	9f03      	ldr	r7, [sp, #12]
 800abe8:	1bae      	subs	r6, r5, r6
 800abea:	42b7      	cmp	r7, r6
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	d135      	bne.n	800ac5e <_dtoa_r+0x6e6>
 800abf2:	f7f5 fb4b 	bl	800028c <__adddf3>
 800abf6:	4642      	mov	r2, r8
 800abf8:	464b      	mov	r3, r9
 800abfa:	4606      	mov	r6, r0
 800abfc:	460f      	mov	r7, r1
 800abfe:	f7f5 ff8b 	bl	8000b18 <__aeabi_dcmpgt>
 800ac02:	b9d0      	cbnz	r0, 800ac3a <_dtoa_r+0x6c2>
 800ac04:	4642      	mov	r2, r8
 800ac06:	464b      	mov	r3, r9
 800ac08:	4630      	mov	r0, r6
 800ac0a:	4639      	mov	r1, r7
 800ac0c:	f7f5 ff5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac10:	b110      	cbz	r0, 800ac18 <_dtoa_r+0x6a0>
 800ac12:	f01a 0f01 	tst.w	sl, #1
 800ac16:	d110      	bne.n	800ac3a <_dtoa_r+0x6c2>
 800ac18:	4620      	mov	r0, r4
 800ac1a:	ee18 1a10 	vmov	r1, s16
 800ac1e:	f000 faf3 	bl	800b208 <_Bfree>
 800ac22:	2300      	movs	r3, #0
 800ac24:	9800      	ldr	r0, [sp, #0]
 800ac26:	702b      	strb	r3, [r5, #0]
 800ac28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	6018      	str	r0, [r3, #0]
 800ac2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f43f acf1 	beq.w	800a618 <_dtoa_r+0xa0>
 800ac36:	601d      	str	r5, [r3, #0]
 800ac38:	e4ee      	b.n	800a618 <_dtoa_r+0xa0>
 800ac3a:	9f00      	ldr	r7, [sp, #0]
 800ac3c:	462b      	mov	r3, r5
 800ac3e:	461d      	mov	r5, r3
 800ac40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac44:	2a39      	cmp	r2, #57	; 0x39
 800ac46:	d106      	bne.n	800ac56 <_dtoa_r+0x6de>
 800ac48:	9a01      	ldr	r2, [sp, #4]
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d1f7      	bne.n	800ac3e <_dtoa_r+0x6c6>
 800ac4e:	9901      	ldr	r1, [sp, #4]
 800ac50:	2230      	movs	r2, #48	; 0x30
 800ac52:	3701      	adds	r7, #1
 800ac54:	700a      	strb	r2, [r1, #0]
 800ac56:	781a      	ldrb	r2, [r3, #0]
 800ac58:	3201      	adds	r2, #1
 800ac5a:	701a      	strb	r2, [r3, #0]
 800ac5c:	e790      	b.n	800ab80 <_dtoa_r+0x608>
 800ac5e:	4ba6      	ldr	r3, [pc, #664]	; (800aef8 <_dtoa_r+0x980>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	f7f5 fcc9 	bl	80005f8 <__aeabi_dmul>
 800ac66:	2200      	movs	r2, #0
 800ac68:	2300      	movs	r3, #0
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	460f      	mov	r7, r1
 800ac6e:	f7f5 ff2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac72:	2800      	cmp	r0, #0
 800ac74:	d09d      	beq.n	800abb2 <_dtoa_r+0x63a>
 800ac76:	e7cf      	b.n	800ac18 <_dtoa_r+0x6a0>
 800ac78:	9a08      	ldr	r2, [sp, #32]
 800ac7a:	2a00      	cmp	r2, #0
 800ac7c:	f000 80d7 	beq.w	800ae2e <_dtoa_r+0x8b6>
 800ac80:	9a06      	ldr	r2, [sp, #24]
 800ac82:	2a01      	cmp	r2, #1
 800ac84:	f300 80ba 	bgt.w	800adfc <_dtoa_r+0x884>
 800ac88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac8a:	2a00      	cmp	r2, #0
 800ac8c:	f000 80b2 	beq.w	800adf4 <_dtoa_r+0x87c>
 800ac90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ac94:	9e07      	ldr	r6, [sp, #28]
 800ac96:	9d04      	ldr	r5, [sp, #16]
 800ac98:	9a04      	ldr	r2, [sp, #16]
 800ac9a:	441a      	add	r2, r3
 800ac9c:	9204      	str	r2, [sp, #16]
 800ac9e:	9a05      	ldr	r2, [sp, #20]
 800aca0:	2101      	movs	r1, #1
 800aca2:	441a      	add	r2, r3
 800aca4:	4620      	mov	r0, r4
 800aca6:	9205      	str	r2, [sp, #20]
 800aca8:	f000 fb66 	bl	800b378 <__i2b>
 800acac:	4607      	mov	r7, r0
 800acae:	2d00      	cmp	r5, #0
 800acb0:	dd0c      	ble.n	800accc <_dtoa_r+0x754>
 800acb2:	9b05      	ldr	r3, [sp, #20]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	dd09      	ble.n	800accc <_dtoa_r+0x754>
 800acb8:	42ab      	cmp	r3, r5
 800acba:	9a04      	ldr	r2, [sp, #16]
 800acbc:	bfa8      	it	ge
 800acbe:	462b      	movge	r3, r5
 800acc0:	1ad2      	subs	r2, r2, r3
 800acc2:	9204      	str	r2, [sp, #16]
 800acc4:	9a05      	ldr	r2, [sp, #20]
 800acc6:	1aed      	subs	r5, r5, r3
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	9305      	str	r3, [sp, #20]
 800accc:	9b07      	ldr	r3, [sp, #28]
 800acce:	b31b      	cbz	r3, 800ad18 <_dtoa_r+0x7a0>
 800acd0:	9b08      	ldr	r3, [sp, #32]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f000 80af 	beq.w	800ae36 <_dtoa_r+0x8be>
 800acd8:	2e00      	cmp	r6, #0
 800acda:	dd13      	ble.n	800ad04 <_dtoa_r+0x78c>
 800acdc:	4639      	mov	r1, r7
 800acde:	4632      	mov	r2, r6
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 fc09 	bl	800b4f8 <__pow5mult>
 800ace6:	ee18 2a10 	vmov	r2, s16
 800acea:	4601      	mov	r1, r0
 800acec:	4607      	mov	r7, r0
 800acee:	4620      	mov	r0, r4
 800acf0:	f000 fb58 	bl	800b3a4 <__multiply>
 800acf4:	ee18 1a10 	vmov	r1, s16
 800acf8:	4680      	mov	r8, r0
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 fa84 	bl	800b208 <_Bfree>
 800ad00:	ee08 8a10 	vmov	s16, r8
 800ad04:	9b07      	ldr	r3, [sp, #28]
 800ad06:	1b9a      	subs	r2, r3, r6
 800ad08:	d006      	beq.n	800ad18 <_dtoa_r+0x7a0>
 800ad0a:	ee18 1a10 	vmov	r1, s16
 800ad0e:	4620      	mov	r0, r4
 800ad10:	f000 fbf2 	bl	800b4f8 <__pow5mult>
 800ad14:	ee08 0a10 	vmov	s16, r0
 800ad18:	2101      	movs	r1, #1
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f000 fb2c 	bl	800b378 <__i2b>
 800ad20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	4606      	mov	r6, r0
 800ad26:	f340 8088 	ble.w	800ae3a <_dtoa_r+0x8c2>
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	4601      	mov	r1, r0
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 fbe2 	bl	800b4f8 <__pow5mult>
 800ad34:	9b06      	ldr	r3, [sp, #24]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	4606      	mov	r6, r0
 800ad3a:	f340 8081 	ble.w	800ae40 <_dtoa_r+0x8c8>
 800ad3e:	f04f 0800 	mov.w	r8, #0
 800ad42:	6933      	ldr	r3, [r6, #16]
 800ad44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad48:	6918      	ldr	r0, [r3, #16]
 800ad4a:	f000 fac5 	bl	800b2d8 <__hi0bits>
 800ad4e:	f1c0 0020 	rsb	r0, r0, #32
 800ad52:	9b05      	ldr	r3, [sp, #20]
 800ad54:	4418      	add	r0, r3
 800ad56:	f010 001f 	ands.w	r0, r0, #31
 800ad5a:	f000 8092 	beq.w	800ae82 <_dtoa_r+0x90a>
 800ad5e:	f1c0 0320 	rsb	r3, r0, #32
 800ad62:	2b04      	cmp	r3, #4
 800ad64:	f340 808a 	ble.w	800ae7c <_dtoa_r+0x904>
 800ad68:	f1c0 001c 	rsb	r0, r0, #28
 800ad6c:	9b04      	ldr	r3, [sp, #16]
 800ad6e:	4403      	add	r3, r0
 800ad70:	9304      	str	r3, [sp, #16]
 800ad72:	9b05      	ldr	r3, [sp, #20]
 800ad74:	4403      	add	r3, r0
 800ad76:	4405      	add	r5, r0
 800ad78:	9305      	str	r3, [sp, #20]
 800ad7a:	9b04      	ldr	r3, [sp, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	dd07      	ble.n	800ad90 <_dtoa_r+0x818>
 800ad80:	ee18 1a10 	vmov	r1, s16
 800ad84:	461a      	mov	r2, r3
 800ad86:	4620      	mov	r0, r4
 800ad88:	f000 fc10 	bl	800b5ac <__lshift>
 800ad8c:	ee08 0a10 	vmov	s16, r0
 800ad90:	9b05      	ldr	r3, [sp, #20]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	dd05      	ble.n	800ada2 <_dtoa_r+0x82a>
 800ad96:	4631      	mov	r1, r6
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 fc06 	bl	800b5ac <__lshift>
 800ada0:	4606      	mov	r6, r0
 800ada2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d06e      	beq.n	800ae86 <_dtoa_r+0x90e>
 800ada8:	ee18 0a10 	vmov	r0, s16
 800adac:	4631      	mov	r1, r6
 800adae:	f000 fc6d 	bl	800b68c <__mcmp>
 800adb2:	2800      	cmp	r0, #0
 800adb4:	da67      	bge.n	800ae86 <_dtoa_r+0x90e>
 800adb6:	9b00      	ldr	r3, [sp, #0]
 800adb8:	3b01      	subs	r3, #1
 800adba:	ee18 1a10 	vmov	r1, s16
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	220a      	movs	r2, #10
 800adc2:	2300      	movs	r3, #0
 800adc4:	4620      	mov	r0, r4
 800adc6:	f000 fa41 	bl	800b24c <__multadd>
 800adca:	9b08      	ldr	r3, [sp, #32]
 800adcc:	ee08 0a10 	vmov	s16, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 81b1 	beq.w	800b138 <_dtoa_r+0xbc0>
 800add6:	2300      	movs	r3, #0
 800add8:	4639      	mov	r1, r7
 800adda:	220a      	movs	r2, #10
 800addc:	4620      	mov	r0, r4
 800adde:	f000 fa35 	bl	800b24c <__multadd>
 800ade2:	9b02      	ldr	r3, [sp, #8]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	4607      	mov	r7, r0
 800ade8:	f300 808e 	bgt.w	800af08 <_dtoa_r+0x990>
 800adec:	9b06      	ldr	r3, [sp, #24]
 800adee:	2b02      	cmp	r3, #2
 800adf0:	dc51      	bgt.n	800ae96 <_dtoa_r+0x91e>
 800adf2:	e089      	b.n	800af08 <_dtoa_r+0x990>
 800adf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800adf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800adfa:	e74b      	b.n	800ac94 <_dtoa_r+0x71c>
 800adfc:	9b03      	ldr	r3, [sp, #12]
 800adfe:	1e5e      	subs	r6, r3, #1
 800ae00:	9b07      	ldr	r3, [sp, #28]
 800ae02:	42b3      	cmp	r3, r6
 800ae04:	bfbf      	itttt	lt
 800ae06:	9b07      	ldrlt	r3, [sp, #28]
 800ae08:	9607      	strlt	r6, [sp, #28]
 800ae0a:	1af2      	sublt	r2, r6, r3
 800ae0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae0e:	bfb6      	itet	lt
 800ae10:	189b      	addlt	r3, r3, r2
 800ae12:	1b9e      	subge	r6, r3, r6
 800ae14:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae16:	9b03      	ldr	r3, [sp, #12]
 800ae18:	bfb8      	it	lt
 800ae1a:	2600      	movlt	r6, #0
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	bfb7      	itett	lt
 800ae20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ae24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae28:	1a9d      	sublt	r5, r3, r2
 800ae2a:	2300      	movlt	r3, #0
 800ae2c:	e734      	b.n	800ac98 <_dtoa_r+0x720>
 800ae2e:	9e07      	ldr	r6, [sp, #28]
 800ae30:	9d04      	ldr	r5, [sp, #16]
 800ae32:	9f08      	ldr	r7, [sp, #32]
 800ae34:	e73b      	b.n	800acae <_dtoa_r+0x736>
 800ae36:	9a07      	ldr	r2, [sp, #28]
 800ae38:	e767      	b.n	800ad0a <_dtoa_r+0x792>
 800ae3a:	9b06      	ldr	r3, [sp, #24]
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	dc18      	bgt.n	800ae72 <_dtoa_r+0x8fa>
 800ae40:	f1ba 0f00 	cmp.w	sl, #0
 800ae44:	d115      	bne.n	800ae72 <_dtoa_r+0x8fa>
 800ae46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae4a:	b993      	cbnz	r3, 800ae72 <_dtoa_r+0x8fa>
 800ae4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae50:	0d1b      	lsrs	r3, r3, #20
 800ae52:	051b      	lsls	r3, r3, #20
 800ae54:	b183      	cbz	r3, 800ae78 <_dtoa_r+0x900>
 800ae56:	9b04      	ldr	r3, [sp, #16]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	9304      	str	r3, [sp, #16]
 800ae5c:	9b05      	ldr	r3, [sp, #20]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	9305      	str	r3, [sp, #20]
 800ae62:	f04f 0801 	mov.w	r8, #1
 800ae66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f47f af6a 	bne.w	800ad42 <_dtoa_r+0x7ca>
 800ae6e:	2001      	movs	r0, #1
 800ae70:	e76f      	b.n	800ad52 <_dtoa_r+0x7da>
 800ae72:	f04f 0800 	mov.w	r8, #0
 800ae76:	e7f6      	b.n	800ae66 <_dtoa_r+0x8ee>
 800ae78:	4698      	mov	r8, r3
 800ae7a:	e7f4      	b.n	800ae66 <_dtoa_r+0x8ee>
 800ae7c:	f43f af7d 	beq.w	800ad7a <_dtoa_r+0x802>
 800ae80:	4618      	mov	r0, r3
 800ae82:	301c      	adds	r0, #28
 800ae84:	e772      	b.n	800ad6c <_dtoa_r+0x7f4>
 800ae86:	9b03      	ldr	r3, [sp, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	dc37      	bgt.n	800aefc <_dtoa_r+0x984>
 800ae8c:	9b06      	ldr	r3, [sp, #24]
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	dd34      	ble.n	800aefc <_dtoa_r+0x984>
 800ae92:	9b03      	ldr	r3, [sp, #12]
 800ae94:	9302      	str	r3, [sp, #8]
 800ae96:	9b02      	ldr	r3, [sp, #8]
 800ae98:	b96b      	cbnz	r3, 800aeb6 <_dtoa_r+0x93e>
 800ae9a:	4631      	mov	r1, r6
 800ae9c:	2205      	movs	r2, #5
 800ae9e:	4620      	mov	r0, r4
 800aea0:	f000 f9d4 	bl	800b24c <__multadd>
 800aea4:	4601      	mov	r1, r0
 800aea6:	4606      	mov	r6, r0
 800aea8:	ee18 0a10 	vmov	r0, s16
 800aeac:	f000 fbee 	bl	800b68c <__mcmp>
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	f73f adbb 	bgt.w	800aa2c <_dtoa_r+0x4b4>
 800aeb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb8:	9d01      	ldr	r5, [sp, #4]
 800aeba:	43db      	mvns	r3, r3
 800aebc:	9300      	str	r3, [sp, #0]
 800aebe:	f04f 0800 	mov.w	r8, #0
 800aec2:	4631      	mov	r1, r6
 800aec4:	4620      	mov	r0, r4
 800aec6:	f000 f99f 	bl	800b208 <_Bfree>
 800aeca:	2f00      	cmp	r7, #0
 800aecc:	f43f aea4 	beq.w	800ac18 <_dtoa_r+0x6a0>
 800aed0:	f1b8 0f00 	cmp.w	r8, #0
 800aed4:	d005      	beq.n	800aee2 <_dtoa_r+0x96a>
 800aed6:	45b8      	cmp	r8, r7
 800aed8:	d003      	beq.n	800aee2 <_dtoa_r+0x96a>
 800aeda:	4641      	mov	r1, r8
 800aedc:	4620      	mov	r0, r4
 800aede:	f000 f993 	bl	800b208 <_Bfree>
 800aee2:	4639      	mov	r1, r7
 800aee4:	4620      	mov	r0, r4
 800aee6:	f000 f98f 	bl	800b208 <_Bfree>
 800aeea:	e695      	b.n	800ac18 <_dtoa_r+0x6a0>
 800aeec:	2600      	movs	r6, #0
 800aeee:	4637      	mov	r7, r6
 800aef0:	e7e1      	b.n	800aeb6 <_dtoa_r+0x93e>
 800aef2:	9700      	str	r7, [sp, #0]
 800aef4:	4637      	mov	r7, r6
 800aef6:	e599      	b.n	800aa2c <_dtoa_r+0x4b4>
 800aef8:	40240000 	.word	0x40240000
 800aefc:	9b08      	ldr	r3, [sp, #32]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f000 80ca 	beq.w	800b098 <_dtoa_r+0xb20>
 800af04:	9b03      	ldr	r3, [sp, #12]
 800af06:	9302      	str	r3, [sp, #8]
 800af08:	2d00      	cmp	r5, #0
 800af0a:	dd05      	ble.n	800af18 <_dtoa_r+0x9a0>
 800af0c:	4639      	mov	r1, r7
 800af0e:	462a      	mov	r2, r5
 800af10:	4620      	mov	r0, r4
 800af12:	f000 fb4b 	bl	800b5ac <__lshift>
 800af16:	4607      	mov	r7, r0
 800af18:	f1b8 0f00 	cmp.w	r8, #0
 800af1c:	d05b      	beq.n	800afd6 <_dtoa_r+0xa5e>
 800af1e:	6879      	ldr	r1, [r7, #4]
 800af20:	4620      	mov	r0, r4
 800af22:	f000 f931 	bl	800b188 <_Balloc>
 800af26:	4605      	mov	r5, r0
 800af28:	b928      	cbnz	r0, 800af36 <_dtoa_r+0x9be>
 800af2a:	4b87      	ldr	r3, [pc, #540]	; (800b148 <_dtoa_r+0xbd0>)
 800af2c:	4602      	mov	r2, r0
 800af2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af32:	f7ff bb3b 	b.w	800a5ac <_dtoa_r+0x34>
 800af36:	693a      	ldr	r2, [r7, #16]
 800af38:	3202      	adds	r2, #2
 800af3a:	0092      	lsls	r2, r2, #2
 800af3c:	f107 010c 	add.w	r1, r7, #12
 800af40:	300c      	adds	r0, #12
 800af42:	f000 f913 	bl	800b16c <memcpy>
 800af46:	2201      	movs	r2, #1
 800af48:	4629      	mov	r1, r5
 800af4a:	4620      	mov	r0, r4
 800af4c:	f000 fb2e 	bl	800b5ac <__lshift>
 800af50:	9b01      	ldr	r3, [sp, #4]
 800af52:	f103 0901 	add.w	r9, r3, #1
 800af56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af5a:	4413      	add	r3, r2
 800af5c:	9305      	str	r3, [sp, #20]
 800af5e:	f00a 0301 	and.w	r3, sl, #1
 800af62:	46b8      	mov	r8, r7
 800af64:	9304      	str	r3, [sp, #16]
 800af66:	4607      	mov	r7, r0
 800af68:	4631      	mov	r1, r6
 800af6a:	ee18 0a10 	vmov	r0, s16
 800af6e:	f7ff fa75 	bl	800a45c <quorem>
 800af72:	4641      	mov	r1, r8
 800af74:	9002      	str	r0, [sp, #8]
 800af76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af7a:	ee18 0a10 	vmov	r0, s16
 800af7e:	f000 fb85 	bl	800b68c <__mcmp>
 800af82:	463a      	mov	r2, r7
 800af84:	9003      	str	r0, [sp, #12]
 800af86:	4631      	mov	r1, r6
 800af88:	4620      	mov	r0, r4
 800af8a:	f000 fb9b 	bl	800b6c4 <__mdiff>
 800af8e:	68c2      	ldr	r2, [r0, #12]
 800af90:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800af94:	4605      	mov	r5, r0
 800af96:	bb02      	cbnz	r2, 800afda <_dtoa_r+0xa62>
 800af98:	4601      	mov	r1, r0
 800af9a:	ee18 0a10 	vmov	r0, s16
 800af9e:	f000 fb75 	bl	800b68c <__mcmp>
 800afa2:	4602      	mov	r2, r0
 800afa4:	4629      	mov	r1, r5
 800afa6:	4620      	mov	r0, r4
 800afa8:	9207      	str	r2, [sp, #28]
 800afaa:	f000 f92d 	bl	800b208 <_Bfree>
 800afae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800afb2:	ea43 0102 	orr.w	r1, r3, r2
 800afb6:	9b04      	ldr	r3, [sp, #16]
 800afb8:	430b      	orrs	r3, r1
 800afba:	464d      	mov	r5, r9
 800afbc:	d10f      	bne.n	800afde <_dtoa_r+0xa66>
 800afbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800afc2:	d02a      	beq.n	800b01a <_dtoa_r+0xaa2>
 800afc4:	9b03      	ldr	r3, [sp, #12]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	dd02      	ble.n	800afd0 <_dtoa_r+0xa58>
 800afca:	9b02      	ldr	r3, [sp, #8]
 800afcc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800afd0:	f88b a000 	strb.w	sl, [fp]
 800afd4:	e775      	b.n	800aec2 <_dtoa_r+0x94a>
 800afd6:	4638      	mov	r0, r7
 800afd8:	e7ba      	b.n	800af50 <_dtoa_r+0x9d8>
 800afda:	2201      	movs	r2, #1
 800afdc:	e7e2      	b.n	800afa4 <_dtoa_r+0xa2c>
 800afde:	9b03      	ldr	r3, [sp, #12]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	db04      	blt.n	800afee <_dtoa_r+0xa76>
 800afe4:	9906      	ldr	r1, [sp, #24]
 800afe6:	430b      	orrs	r3, r1
 800afe8:	9904      	ldr	r1, [sp, #16]
 800afea:	430b      	orrs	r3, r1
 800afec:	d122      	bne.n	800b034 <_dtoa_r+0xabc>
 800afee:	2a00      	cmp	r2, #0
 800aff0:	ddee      	ble.n	800afd0 <_dtoa_r+0xa58>
 800aff2:	ee18 1a10 	vmov	r1, s16
 800aff6:	2201      	movs	r2, #1
 800aff8:	4620      	mov	r0, r4
 800affa:	f000 fad7 	bl	800b5ac <__lshift>
 800affe:	4631      	mov	r1, r6
 800b000:	ee08 0a10 	vmov	s16, r0
 800b004:	f000 fb42 	bl	800b68c <__mcmp>
 800b008:	2800      	cmp	r0, #0
 800b00a:	dc03      	bgt.n	800b014 <_dtoa_r+0xa9c>
 800b00c:	d1e0      	bne.n	800afd0 <_dtoa_r+0xa58>
 800b00e:	f01a 0f01 	tst.w	sl, #1
 800b012:	d0dd      	beq.n	800afd0 <_dtoa_r+0xa58>
 800b014:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b018:	d1d7      	bne.n	800afca <_dtoa_r+0xa52>
 800b01a:	2339      	movs	r3, #57	; 0x39
 800b01c:	f88b 3000 	strb.w	r3, [fp]
 800b020:	462b      	mov	r3, r5
 800b022:	461d      	mov	r5, r3
 800b024:	3b01      	subs	r3, #1
 800b026:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b02a:	2a39      	cmp	r2, #57	; 0x39
 800b02c:	d071      	beq.n	800b112 <_dtoa_r+0xb9a>
 800b02e:	3201      	adds	r2, #1
 800b030:	701a      	strb	r2, [r3, #0]
 800b032:	e746      	b.n	800aec2 <_dtoa_r+0x94a>
 800b034:	2a00      	cmp	r2, #0
 800b036:	dd07      	ble.n	800b048 <_dtoa_r+0xad0>
 800b038:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b03c:	d0ed      	beq.n	800b01a <_dtoa_r+0xaa2>
 800b03e:	f10a 0301 	add.w	r3, sl, #1
 800b042:	f88b 3000 	strb.w	r3, [fp]
 800b046:	e73c      	b.n	800aec2 <_dtoa_r+0x94a>
 800b048:	9b05      	ldr	r3, [sp, #20]
 800b04a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b04e:	4599      	cmp	r9, r3
 800b050:	d047      	beq.n	800b0e2 <_dtoa_r+0xb6a>
 800b052:	ee18 1a10 	vmov	r1, s16
 800b056:	2300      	movs	r3, #0
 800b058:	220a      	movs	r2, #10
 800b05a:	4620      	mov	r0, r4
 800b05c:	f000 f8f6 	bl	800b24c <__multadd>
 800b060:	45b8      	cmp	r8, r7
 800b062:	ee08 0a10 	vmov	s16, r0
 800b066:	f04f 0300 	mov.w	r3, #0
 800b06a:	f04f 020a 	mov.w	r2, #10
 800b06e:	4641      	mov	r1, r8
 800b070:	4620      	mov	r0, r4
 800b072:	d106      	bne.n	800b082 <_dtoa_r+0xb0a>
 800b074:	f000 f8ea 	bl	800b24c <__multadd>
 800b078:	4680      	mov	r8, r0
 800b07a:	4607      	mov	r7, r0
 800b07c:	f109 0901 	add.w	r9, r9, #1
 800b080:	e772      	b.n	800af68 <_dtoa_r+0x9f0>
 800b082:	f000 f8e3 	bl	800b24c <__multadd>
 800b086:	4639      	mov	r1, r7
 800b088:	4680      	mov	r8, r0
 800b08a:	2300      	movs	r3, #0
 800b08c:	220a      	movs	r2, #10
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 f8dc 	bl	800b24c <__multadd>
 800b094:	4607      	mov	r7, r0
 800b096:	e7f1      	b.n	800b07c <_dtoa_r+0xb04>
 800b098:	9b03      	ldr	r3, [sp, #12]
 800b09a:	9302      	str	r3, [sp, #8]
 800b09c:	9d01      	ldr	r5, [sp, #4]
 800b09e:	ee18 0a10 	vmov	r0, s16
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	f7ff f9da 	bl	800a45c <quorem>
 800b0a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0ac:	9b01      	ldr	r3, [sp, #4]
 800b0ae:	f805 ab01 	strb.w	sl, [r5], #1
 800b0b2:	1aea      	subs	r2, r5, r3
 800b0b4:	9b02      	ldr	r3, [sp, #8]
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	dd09      	ble.n	800b0ce <_dtoa_r+0xb56>
 800b0ba:	ee18 1a10 	vmov	r1, s16
 800b0be:	2300      	movs	r3, #0
 800b0c0:	220a      	movs	r2, #10
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 f8c2 	bl	800b24c <__multadd>
 800b0c8:	ee08 0a10 	vmov	s16, r0
 800b0cc:	e7e7      	b.n	800b09e <_dtoa_r+0xb26>
 800b0ce:	9b02      	ldr	r3, [sp, #8]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	bfc8      	it	gt
 800b0d4:	461d      	movgt	r5, r3
 800b0d6:	9b01      	ldr	r3, [sp, #4]
 800b0d8:	bfd8      	it	le
 800b0da:	2501      	movle	r5, #1
 800b0dc:	441d      	add	r5, r3
 800b0de:	f04f 0800 	mov.w	r8, #0
 800b0e2:	ee18 1a10 	vmov	r1, s16
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	f000 fa5f 	bl	800b5ac <__lshift>
 800b0ee:	4631      	mov	r1, r6
 800b0f0:	ee08 0a10 	vmov	s16, r0
 800b0f4:	f000 faca 	bl	800b68c <__mcmp>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	dc91      	bgt.n	800b020 <_dtoa_r+0xaa8>
 800b0fc:	d102      	bne.n	800b104 <_dtoa_r+0xb8c>
 800b0fe:	f01a 0f01 	tst.w	sl, #1
 800b102:	d18d      	bne.n	800b020 <_dtoa_r+0xaa8>
 800b104:	462b      	mov	r3, r5
 800b106:	461d      	mov	r5, r3
 800b108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b10c:	2a30      	cmp	r2, #48	; 0x30
 800b10e:	d0fa      	beq.n	800b106 <_dtoa_r+0xb8e>
 800b110:	e6d7      	b.n	800aec2 <_dtoa_r+0x94a>
 800b112:	9a01      	ldr	r2, [sp, #4]
 800b114:	429a      	cmp	r2, r3
 800b116:	d184      	bne.n	800b022 <_dtoa_r+0xaaa>
 800b118:	9b00      	ldr	r3, [sp, #0]
 800b11a:	3301      	adds	r3, #1
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	2331      	movs	r3, #49	; 0x31
 800b120:	7013      	strb	r3, [r2, #0]
 800b122:	e6ce      	b.n	800aec2 <_dtoa_r+0x94a>
 800b124:	4b09      	ldr	r3, [pc, #36]	; (800b14c <_dtoa_r+0xbd4>)
 800b126:	f7ff ba95 	b.w	800a654 <_dtoa_r+0xdc>
 800b12a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f47f aa6e 	bne.w	800a60e <_dtoa_r+0x96>
 800b132:	4b07      	ldr	r3, [pc, #28]	; (800b150 <_dtoa_r+0xbd8>)
 800b134:	f7ff ba8e 	b.w	800a654 <_dtoa_r+0xdc>
 800b138:	9b02      	ldr	r3, [sp, #8]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	dcae      	bgt.n	800b09c <_dtoa_r+0xb24>
 800b13e:	9b06      	ldr	r3, [sp, #24]
 800b140:	2b02      	cmp	r3, #2
 800b142:	f73f aea8 	bgt.w	800ae96 <_dtoa_r+0x91e>
 800b146:	e7a9      	b.n	800b09c <_dtoa_r+0xb24>
 800b148:	0800cc03 	.word	0x0800cc03
 800b14c:	0800cb60 	.word	0x0800cb60
 800b150:	0800cb84 	.word	0x0800cb84

0800b154 <_localeconv_r>:
 800b154:	4800      	ldr	r0, [pc, #0]	; (800b158 <_localeconv_r+0x4>)
 800b156:	4770      	bx	lr
 800b158:	20000160 	.word	0x20000160

0800b15c <malloc>:
 800b15c:	4b02      	ldr	r3, [pc, #8]	; (800b168 <malloc+0xc>)
 800b15e:	4601      	mov	r1, r0
 800b160:	6818      	ldr	r0, [r3, #0]
 800b162:	f000 bc17 	b.w	800b994 <_malloc_r>
 800b166:	bf00      	nop
 800b168:	2000000c 	.word	0x2000000c

0800b16c <memcpy>:
 800b16c:	440a      	add	r2, r1
 800b16e:	4291      	cmp	r1, r2
 800b170:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b174:	d100      	bne.n	800b178 <memcpy+0xc>
 800b176:	4770      	bx	lr
 800b178:	b510      	push	{r4, lr}
 800b17a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b17e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b182:	4291      	cmp	r1, r2
 800b184:	d1f9      	bne.n	800b17a <memcpy+0xe>
 800b186:	bd10      	pop	{r4, pc}

0800b188 <_Balloc>:
 800b188:	b570      	push	{r4, r5, r6, lr}
 800b18a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b18c:	4604      	mov	r4, r0
 800b18e:	460d      	mov	r5, r1
 800b190:	b976      	cbnz	r6, 800b1b0 <_Balloc+0x28>
 800b192:	2010      	movs	r0, #16
 800b194:	f7ff ffe2 	bl	800b15c <malloc>
 800b198:	4602      	mov	r2, r0
 800b19a:	6260      	str	r0, [r4, #36]	; 0x24
 800b19c:	b920      	cbnz	r0, 800b1a8 <_Balloc+0x20>
 800b19e:	4b18      	ldr	r3, [pc, #96]	; (800b200 <_Balloc+0x78>)
 800b1a0:	4818      	ldr	r0, [pc, #96]	; (800b204 <_Balloc+0x7c>)
 800b1a2:	2166      	movs	r1, #102	; 0x66
 800b1a4:	f000 fdd6 	bl	800bd54 <__assert_func>
 800b1a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1ac:	6006      	str	r6, [r0, #0]
 800b1ae:	60c6      	str	r6, [r0, #12]
 800b1b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b1b2:	68f3      	ldr	r3, [r6, #12]
 800b1b4:	b183      	cbz	r3, 800b1d8 <_Balloc+0x50>
 800b1b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1be:	b9b8      	cbnz	r0, 800b1f0 <_Balloc+0x68>
 800b1c0:	2101      	movs	r1, #1
 800b1c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b1c6:	1d72      	adds	r2, r6, #5
 800b1c8:	0092      	lsls	r2, r2, #2
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f000 fb60 	bl	800b890 <_calloc_r>
 800b1d0:	b160      	cbz	r0, 800b1ec <_Balloc+0x64>
 800b1d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1d6:	e00e      	b.n	800b1f6 <_Balloc+0x6e>
 800b1d8:	2221      	movs	r2, #33	; 0x21
 800b1da:	2104      	movs	r1, #4
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f000 fb57 	bl	800b890 <_calloc_r>
 800b1e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1e4:	60f0      	str	r0, [r6, #12]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d1e4      	bne.n	800b1b6 <_Balloc+0x2e>
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	bd70      	pop	{r4, r5, r6, pc}
 800b1f0:	6802      	ldr	r2, [r0, #0]
 800b1f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1fc:	e7f7      	b.n	800b1ee <_Balloc+0x66>
 800b1fe:	bf00      	nop
 800b200:	0800cb91 	.word	0x0800cb91
 800b204:	0800cc14 	.word	0x0800cc14

0800b208 <_Bfree>:
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b20c:	4605      	mov	r5, r0
 800b20e:	460c      	mov	r4, r1
 800b210:	b976      	cbnz	r6, 800b230 <_Bfree+0x28>
 800b212:	2010      	movs	r0, #16
 800b214:	f7ff ffa2 	bl	800b15c <malloc>
 800b218:	4602      	mov	r2, r0
 800b21a:	6268      	str	r0, [r5, #36]	; 0x24
 800b21c:	b920      	cbnz	r0, 800b228 <_Bfree+0x20>
 800b21e:	4b09      	ldr	r3, [pc, #36]	; (800b244 <_Bfree+0x3c>)
 800b220:	4809      	ldr	r0, [pc, #36]	; (800b248 <_Bfree+0x40>)
 800b222:	218a      	movs	r1, #138	; 0x8a
 800b224:	f000 fd96 	bl	800bd54 <__assert_func>
 800b228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b22c:	6006      	str	r6, [r0, #0]
 800b22e:	60c6      	str	r6, [r0, #12]
 800b230:	b13c      	cbz	r4, 800b242 <_Bfree+0x3a>
 800b232:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b234:	6862      	ldr	r2, [r4, #4]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b23c:	6021      	str	r1, [r4, #0]
 800b23e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b242:	bd70      	pop	{r4, r5, r6, pc}
 800b244:	0800cb91 	.word	0x0800cb91
 800b248:	0800cc14 	.word	0x0800cc14

0800b24c <__multadd>:
 800b24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b250:	690d      	ldr	r5, [r1, #16]
 800b252:	4607      	mov	r7, r0
 800b254:	460c      	mov	r4, r1
 800b256:	461e      	mov	r6, r3
 800b258:	f101 0c14 	add.w	ip, r1, #20
 800b25c:	2000      	movs	r0, #0
 800b25e:	f8dc 3000 	ldr.w	r3, [ip]
 800b262:	b299      	uxth	r1, r3
 800b264:	fb02 6101 	mla	r1, r2, r1, r6
 800b268:	0c1e      	lsrs	r6, r3, #16
 800b26a:	0c0b      	lsrs	r3, r1, #16
 800b26c:	fb02 3306 	mla	r3, r2, r6, r3
 800b270:	b289      	uxth	r1, r1
 800b272:	3001      	adds	r0, #1
 800b274:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b278:	4285      	cmp	r5, r0
 800b27a:	f84c 1b04 	str.w	r1, [ip], #4
 800b27e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b282:	dcec      	bgt.n	800b25e <__multadd+0x12>
 800b284:	b30e      	cbz	r6, 800b2ca <__multadd+0x7e>
 800b286:	68a3      	ldr	r3, [r4, #8]
 800b288:	42ab      	cmp	r3, r5
 800b28a:	dc19      	bgt.n	800b2c0 <__multadd+0x74>
 800b28c:	6861      	ldr	r1, [r4, #4]
 800b28e:	4638      	mov	r0, r7
 800b290:	3101      	adds	r1, #1
 800b292:	f7ff ff79 	bl	800b188 <_Balloc>
 800b296:	4680      	mov	r8, r0
 800b298:	b928      	cbnz	r0, 800b2a6 <__multadd+0x5a>
 800b29a:	4602      	mov	r2, r0
 800b29c:	4b0c      	ldr	r3, [pc, #48]	; (800b2d0 <__multadd+0x84>)
 800b29e:	480d      	ldr	r0, [pc, #52]	; (800b2d4 <__multadd+0x88>)
 800b2a0:	21b5      	movs	r1, #181	; 0xb5
 800b2a2:	f000 fd57 	bl	800bd54 <__assert_func>
 800b2a6:	6922      	ldr	r2, [r4, #16]
 800b2a8:	3202      	adds	r2, #2
 800b2aa:	f104 010c 	add.w	r1, r4, #12
 800b2ae:	0092      	lsls	r2, r2, #2
 800b2b0:	300c      	adds	r0, #12
 800b2b2:	f7ff ff5b 	bl	800b16c <memcpy>
 800b2b6:	4621      	mov	r1, r4
 800b2b8:	4638      	mov	r0, r7
 800b2ba:	f7ff ffa5 	bl	800b208 <_Bfree>
 800b2be:	4644      	mov	r4, r8
 800b2c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2c4:	3501      	adds	r5, #1
 800b2c6:	615e      	str	r6, [r3, #20]
 800b2c8:	6125      	str	r5, [r4, #16]
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d0:	0800cc03 	.word	0x0800cc03
 800b2d4:	0800cc14 	.word	0x0800cc14

0800b2d8 <__hi0bits>:
 800b2d8:	0c03      	lsrs	r3, r0, #16
 800b2da:	041b      	lsls	r3, r3, #16
 800b2dc:	b9d3      	cbnz	r3, 800b314 <__hi0bits+0x3c>
 800b2de:	0400      	lsls	r0, r0, #16
 800b2e0:	2310      	movs	r3, #16
 800b2e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2e6:	bf04      	itt	eq
 800b2e8:	0200      	lsleq	r0, r0, #8
 800b2ea:	3308      	addeq	r3, #8
 800b2ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b2f0:	bf04      	itt	eq
 800b2f2:	0100      	lsleq	r0, r0, #4
 800b2f4:	3304      	addeq	r3, #4
 800b2f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b2fa:	bf04      	itt	eq
 800b2fc:	0080      	lsleq	r0, r0, #2
 800b2fe:	3302      	addeq	r3, #2
 800b300:	2800      	cmp	r0, #0
 800b302:	db05      	blt.n	800b310 <__hi0bits+0x38>
 800b304:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b308:	f103 0301 	add.w	r3, r3, #1
 800b30c:	bf08      	it	eq
 800b30e:	2320      	moveq	r3, #32
 800b310:	4618      	mov	r0, r3
 800b312:	4770      	bx	lr
 800b314:	2300      	movs	r3, #0
 800b316:	e7e4      	b.n	800b2e2 <__hi0bits+0xa>

0800b318 <__lo0bits>:
 800b318:	6803      	ldr	r3, [r0, #0]
 800b31a:	f013 0207 	ands.w	r2, r3, #7
 800b31e:	4601      	mov	r1, r0
 800b320:	d00b      	beq.n	800b33a <__lo0bits+0x22>
 800b322:	07da      	lsls	r2, r3, #31
 800b324:	d423      	bmi.n	800b36e <__lo0bits+0x56>
 800b326:	0798      	lsls	r0, r3, #30
 800b328:	bf49      	itett	mi
 800b32a:	085b      	lsrmi	r3, r3, #1
 800b32c:	089b      	lsrpl	r3, r3, #2
 800b32e:	2001      	movmi	r0, #1
 800b330:	600b      	strmi	r3, [r1, #0]
 800b332:	bf5c      	itt	pl
 800b334:	600b      	strpl	r3, [r1, #0]
 800b336:	2002      	movpl	r0, #2
 800b338:	4770      	bx	lr
 800b33a:	b298      	uxth	r0, r3
 800b33c:	b9a8      	cbnz	r0, 800b36a <__lo0bits+0x52>
 800b33e:	0c1b      	lsrs	r3, r3, #16
 800b340:	2010      	movs	r0, #16
 800b342:	b2da      	uxtb	r2, r3
 800b344:	b90a      	cbnz	r2, 800b34a <__lo0bits+0x32>
 800b346:	3008      	adds	r0, #8
 800b348:	0a1b      	lsrs	r3, r3, #8
 800b34a:	071a      	lsls	r2, r3, #28
 800b34c:	bf04      	itt	eq
 800b34e:	091b      	lsreq	r3, r3, #4
 800b350:	3004      	addeq	r0, #4
 800b352:	079a      	lsls	r2, r3, #30
 800b354:	bf04      	itt	eq
 800b356:	089b      	lsreq	r3, r3, #2
 800b358:	3002      	addeq	r0, #2
 800b35a:	07da      	lsls	r2, r3, #31
 800b35c:	d403      	bmi.n	800b366 <__lo0bits+0x4e>
 800b35e:	085b      	lsrs	r3, r3, #1
 800b360:	f100 0001 	add.w	r0, r0, #1
 800b364:	d005      	beq.n	800b372 <__lo0bits+0x5a>
 800b366:	600b      	str	r3, [r1, #0]
 800b368:	4770      	bx	lr
 800b36a:	4610      	mov	r0, r2
 800b36c:	e7e9      	b.n	800b342 <__lo0bits+0x2a>
 800b36e:	2000      	movs	r0, #0
 800b370:	4770      	bx	lr
 800b372:	2020      	movs	r0, #32
 800b374:	4770      	bx	lr
	...

0800b378 <__i2b>:
 800b378:	b510      	push	{r4, lr}
 800b37a:	460c      	mov	r4, r1
 800b37c:	2101      	movs	r1, #1
 800b37e:	f7ff ff03 	bl	800b188 <_Balloc>
 800b382:	4602      	mov	r2, r0
 800b384:	b928      	cbnz	r0, 800b392 <__i2b+0x1a>
 800b386:	4b05      	ldr	r3, [pc, #20]	; (800b39c <__i2b+0x24>)
 800b388:	4805      	ldr	r0, [pc, #20]	; (800b3a0 <__i2b+0x28>)
 800b38a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b38e:	f000 fce1 	bl	800bd54 <__assert_func>
 800b392:	2301      	movs	r3, #1
 800b394:	6144      	str	r4, [r0, #20]
 800b396:	6103      	str	r3, [r0, #16]
 800b398:	bd10      	pop	{r4, pc}
 800b39a:	bf00      	nop
 800b39c:	0800cc03 	.word	0x0800cc03
 800b3a0:	0800cc14 	.word	0x0800cc14

0800b3a4 <__multiply>:
 800b3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a8:	4691      	mov	r9, r2
 800b3aa:	690a      	ldr	r2, [r1, #16]
 800b3ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	bfb8      	it	lt
 800b3b4:	460b      	movlt	r3, r1
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	bfbc      	itt	lt
 800b3ba:	464c      	movlt	r4, r9
 800b3bc:	4699      	movlt	r9, r3
 800b3be:	6927      	ldr	r7, [r4, #16]
 800b3c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b3c4:	68a3      	ldr	r3, [r4, #8]
 800b3c6:	6861      	ldr	r1, [r4, #4]
 800b3c8:	eb07 060a 	add.w	r6, r7, sl
 800b3cc:	42b3      	cmp	r3, r6
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	bfb8      	it	lt
 800b3d2:	3101      	addlt	r1, #1
 800b3d4:	f7ff fed8 	bl	800b188 <_Balloc>
 800b3d8:	b930      	cbnz	r0, 800b3e8 <__multiply+0x44>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	4b44      	ldr	r3, [pc, #272]	; (800b4f0 <__multiply+0x14c>)
 800b3de:	4845      	ldr	r0, [pc, #276]	; (800b4f4 <__multiply+0x150>)
 800b3e0:	f240 115d 	movw	r1, #349	; 0x15d
 800b3e4:	f000 fcb6 	bl	800bd54 <__assert_func>
 800b3e8:	f100 0514 	add.w	r5, r0, #20
 800b3ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b3f0:	462b      	mov	r3, r5
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	4543      	cmp	r3, r8
 800b3f6:	d321      	bcc.n	800b43c <__multiply+0x98>
 800b3f8:	f104 0314 	add.w	r3, r4, #20
 800b3fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b400:	f109 0314 	add.w	r3, r9, #20
 800b404:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b408:	9202      	str	r2, [sp, #8]
 800b40a:	1b3a      	subs	r2, r7, r4
 800b40c:	3a15      	subs	r2, #21
 800b40e:	f022 0203 	bic.w	r2, r2, #3
 800b412:	3204      	adds	r2, #4
 800b414:	f104 0115 	add.w	r1, r4, #21
 800b418:	428f      	cmp	r7, r1
 800b41a:	bf38      	it	cc
 800b41c:	2204      	movcc	r2, #4
 800b41e:	9201      	str	r2, [sp, #4]
 800b420:	9a02      	ldr	r2, [sp, #8]
 800b422:	9303      	str	r3, [sp, #12]
 800b424:	429a      	cmp	r2, r3
 800b426:	d80c      	bhi.n	800b442 <__multiply+0x9e>
 800b428:	2e00      	cmp	r6, #0
 800b42a:	dd03      	ble.n	800b434 <__multiply+0x90>
 800b42c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b430:	2b00      	cmp	r3, #0
 800b432:	d05a      	beq.n	800b4ea <__multiply+0x146>
 800b434:	6106      	str	r6, [r0, #16]
 800b436:	b005      	add	sp, #20
 800b438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43c:	f843 2b04 	str.w	r2, [r3], #4
 800b440:	e7d8      	b.n	800b3f4 <__multiply+0x50>
 800b442:	f8b3 a000 	ldrh.w	sl, [r3]
 800b446:	f1ba 0f00 	cmp.w	sl, #0
 800b44a:	d024      	beq.n	800b496 <__multiply+0xf2>
 800b44c:	f104 0e14 	add.w	lr, r4, #20
 800b450:	46a9      	mov	r9, r5
 800b452:	f04f 0c00 	mov.w	ip, #0
 800b456:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b45a:	f8d9 1000 	ldr.w	r1, [r9]
 800b45e:	fa1f fb82 	uxth.w	fp, r2
 800b462:	b289      	uxth	r1, r1
 800b464:	fb0a 110b 	mla	r1, sl, fp, r1
 800b468:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b46c:	f8d9 2000 	ldr.w	r2, [r9]
 800b470:	4461      	add	r1, ip
 800b472:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b476:	fb0a c20b 	mla	r2, sl, fp, ip
 800b47a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b47e:	b289      	uxth	r1, r1
 800b480:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b484:	4577      	cmp	r7, lr
 800b486:	f849 1b04 	str.w	r1, [r9], #4
 800b48a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b48e:	d8e2      	bhi.n	800b456 <__multiply+0xb2>
 800b490:	9a01      	ldr	r2, [sp, #4]
 800b492:	f845 c002 	str.w	ip, [r5, r2]
 800b496:	9a03      	ldr	r2, [sp, #12]
 800b498:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b49c:	3304      	adds	r3, #4
 800b49e:	f1b9 0f00 	cmp.w	r9, #0
 800b4a2:	d020      	beq.n	800b4e6 <__multiply+0x142>
 800b4a4:	6829      	ldr	r1, [r5, #0]
 800b4a6:	f104 0c14 	add.w	ip, r4, #20
 800b4aa:	46ae      	mov	lr, r5
 800b4ac:	f04f 0a00 	mov.w	sl, #0
 800b4b0:	f8bc b000 	ldrh.w	fp, [ip]
 800b4b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b4b8:	fb09 220b 	mla	r2, r9, fp, r2
 800b4bc:	4492      	add	sl, r2
 800b4be:	b289      	uxth	r1, r1
 800b4c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b4c4:	f84e 1b04 	str.w	r1, [lr], #4
 800b4c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b4cc:	f8be 1000 	ldrh.w	r1, [lr]
 800b4d0:	0c12      	lsrs	r2, r2, #16
 800b4d2:	fb09 1102 	mla	r1, r9, r2, r1
 800b4d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b4da:	4567      	cmp	r7, ip
 800b4dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b4e0:	d8e6      	bhi.n	800b4b0 <__multiply+0x10c>
 800b4e2:	9a01      	ldr	r2, [sp, #4]
 800b4e4:	50a9      	str	r1, [r5, r2]
 800b4e6:	3504      	adds	r5, #4
 800b4e8:	e79a      	b.n	800b420 <__multiply+0x7c>
 800b4ea:	3e01      	subs	r6, #1
 800b4ec:	e79c      	b.n	800b428 <__multiply+0x84>
 800b4ee:	bf00      	nop
 800b4f0:	0800cc03 	.word	0x0800cc03
 800b4f4:	0800cc14 	.word	0x0800cc14

0800b4f8 <__pow5mult>:
 800b4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4fc:	4615      	mov	r5, r2
 800b4fe:	f012 0203 	ands.w	r2, r2, #3
 800b502:	4606      	mov	r6, r0
 800b504:	460f      	mov	r7, r1
 800b506:	d007      	beq.n	800b518 <__pow5mult+0x20>
 800b508:	4c25      	ldr	r4, [pc, #148]	; (800b5a0 <__pow5mult+0xa8>)
 800b50a:	3a01      	subs	r2, #1
 800b50c:	2300      	movs	r3, #0
 800b50e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b512:	f7ff fe9b 	bl	800b24c <__multadd>
 800b516:	4607      	mov	r7, r0
 800b518:	10ad      	asrs	r5, r5, #2
 800b51a:	d03d      	beq.n	800b598 <__pow5mult+0xa0>
 800b51c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b51e:	b97c      	cbnz	r4, 800b540 <__pow5mult+0x48>
 800b520:	2010      	movs	r0, #16
 800b522:	f7ff fe1b 	bl	800b15c <malloc>
 800b526:	4602      	mov	r2, r0
 800b528:	6270      	str	r0, [r6, #36]	; 0x24
 800b52a:	b928      	cbnz	r0, 800b538 <__pow5mult+0x40>
 800b52c:	4b1d      	ldr	r3, [pc, #116]	; (800b5a4 <__pow5mult+0xac>)
 800b52e:	481e      	ldr	r0, [pc, #120]	; (800b5a8 <__pow5mult+0xb0>)
 800b530:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b534:	f000 fc0e 	bl	800bd54 <__assert_func>
 800b538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b53c:	6004      	str	r4, [r0, #0]
 800b53e:	60c4      	str	r4, [r0, #12]
 800b540:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b548:	b94c      	cbnz	r4, 800b55e <__pow5mult+0x66>
 800b54a:	f240 2171 	movw	r1, #625	; 0x271
 800b54e:	4630      	mov	r0, r6
 800b550:	f7ff ff12 	bl	800b378 <__i2b>
 800b554:	2300      	movs	r3, #0
 800b556:	f8c8 0008 	str.w	r0, [r8, #8]
 800b55a:	4604      	mov	r4, r0
 800b55c:	6003      	str	r3, [r0, #0]
 800b55e:	f04f 0900 	mov.w	r9, #0
 800b562:	07eb      	lsls	r3, r5, #31
 800b564:	d50a      	bpl.n	800b57c <__pow5mult+0x84>
 800b566:	4639      	mov	r1, r7
 800b568:	4622      	mov	r2, r4
 800b56a:	4630      	mov	r0, r6
 800b56c:	f7ff ff1a 	bl	800b3a4 <__multiply>
 800b570:	4639      	mov	r1, r7
 800b572:	4680      	mov	r8, r0
 800b574:	4630      	mov	r0, r6
 800b576:	f7ff fe47 	bl	800b208 <_Bfree>
 800b57a:	4647      	mov	r7, r8
 800b57c:	106d      	asrs	r5, r5, #1
 800b57e:	d00b      	beq.n	800b598 <__pow5mult+0xa0>
 800b580:	6820      	ldr	r0, [r4, #0]
 800b582:	b938      	cbnz	r0, 800b594 <__pow5mult+0x9c>
 800b584:	4622      	mov	r2, r4
 800b586:	4621      	mov	r1, r4
 800b588:	4630      	mov	r0, r6
 800b58a:	f7ff ff0b 	bl	800b3a4 <__multiply>
 800b58e:	6020      	str	r0, [r4, #0]
 800b590:	f8c0 9000 	str.w	r9, [r0]
 800b594:	4604      	mov	r4, r0
 800b596:	e7e4      	b.n	800b562 <__pow5mult+0x6a>
 800b598:	4638      	mov	r0, r7
 800b59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b59e:	bf00      	nop
 800b5a0:	0800cd60 	.word	0x0800cd60
 800b5a4:	0800cb91 	.word	0x0800cb91
 800b5a8:	0800cc14 	.word	0x0800cc14

0800b5ac <__lshift>:
 800b5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5b0:	460c      	mov	r4, r1
 800b5b2:	6849      	ldr	r1, [r1, #4]
 800b5b4:	6923      	ldr	r3, [r4, #16]
 800b5b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5ba:	68a3      	ldr	r3, [r4, #8]
 800b5bc:	4607      	mov	r7, r0
 800b5be:	4691      	mov	r9, r2
 800b5c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5c4:	f108 0601 	add.w	r6, r8, #1
 800b5c8:	42b3      	cmp	r3, r6
 800b5ca:	db0b      	blt.n	800b5e4 <__lshift+0x38>
 800b5cc:	4638      	mov	r0, r7
 800b5ce:	f7ff fddb 	bl	800b188 <_Balloc>
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	b948      	cbnz	r0, 800b5ea <__lshift+0x3e>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	4b2a      	ldr	r3, [pc, #168]	; (800b684 <__lshift+0xd8>)
 800b5da:	482b      	ldr	r0, [pc, #172]	; (800b688 <__lshift+0xdc>)
 800b5dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b5e0:	f000 fbb8 	bl	800bd54 <__assert_func>
 800b5e4:	3101      	adds	r1, #1
 800b5e6:	005b      	lsls	r3, r3, #1
 800b5e8:	e7ee      	b.n	800b5c8 <__lshift+0x1c>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	f100 0114 	add.w	r1, r0, #20
 800b5f0:	f100 0210 	add.w	r2, r0, #16
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	4553      	cmp	r3, sl
 800b5f8:	db37      	blt.n	800b66a <__lshift+0xbe>
 800b5fa:	6920      	ldr	r0, [r4, #16]
 800b5fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b600:	f104 0314 	add.w	r3, r4, #20
 800b604:	f019 091f 	ands.w	r9, r9, #31
 800b608:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b60c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b610:	d02f      	beq.n	800b672 <__lshift+0xc6>
 800b612:	f1c9 0e20 	rsb	lr, r9, #32
 800b616:	468a      	mov	sl, r1
 800b618:	f04f 0c00 	mov.w	ip, #0
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	fa02 f209 	lsl.w	r2, r2, r9
 800b622:	ea42 020c 	orr.w	r2, r2, ip
 800b626:	f84a 2b04 	str.w	r2, [sl], #4
 800b62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b62e:	4298      	cmp	r0, r3
 800b630:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b634:	d8f2      	bhi.n	800b61c <__lshift+0x70>
 800b636:	1b03      	subs	r3, r0, r4
 800b638:	3b15      	subs	r3, #21
 800b63a:	f023 0303 	bic.w	r3, r3, #3
 800b63e:	3304      	adds	r3, #4
 800b640:	f104 0215 	add.w	r2, r4, #21
 800b644:	4290      	cmp	r0, r2
 800b646:	bf38      	it	cc
 800b648:	2304      	movcc	r3, #4
 800b64a:	f841 c003 	str.w	ip, [r1, r3]
 800b64e:	f1bc 0f00 	cmp.w	ip, #0
 800b652:	d001      	beq.n	800b658 <__lshift+0xac>
 800b654:	f108 0602 	add.w	r6, r8, #2
 800b658:	3e01      	subs	r6, #1
 800b65a:	4638      	mov	r0, r7
 800b65c:	612e      	str	r6, [r5, #16]
 800b65e:	4621      	mov	r1, r4
 800b660:	f7ff fdd2 	bl	800b208 <_Bfree>
 800b664:	4628      	mov	r0, r5
 800b666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b66a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b66e:	3301      	adds	r3, #1
 800b670:	e7c1      	b.n	800b5f6 <__lshift+0x4a>
 800b672:	3904      	subs	r1, #4
 800b674:	f853 2b04 	ldr.w	r2, [r3], #4
 800b678:	f841 2f04 	str.w	r2, [r1, #4]!
 800b67c:	4298      	cmp	r0, r3
 800b67e:	d8f9      	bhi.n	800b674 <__lshift+0xc8>
 800b680:	e7ea      	b.n	800b658 <__lshift+0xac>
 800b682:	bf00      	nop
 800b684:	0800cc03 	.word	0x0800cc03
 800b688:	0800cc14 	.word	0x0800cc14

0800b68c <__mcmp>:
 800b68c:	b530      	push	{r4, r5, lr}
 800b68e:	6902      	ldr	r2, [r0, #16]
 800b690:	690c      	ldr	r4, [r1, #16]
 800b692:	1b12      	subs	r2, r2, r4
 800b694:	d10e      	bne.n	800b6b4 <__mcmp+0x28>
 800b696:	f100 0314 	add.w	r3, r0, #20
 800b69a:	3114      	adds	r1, #20
 800b69c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b6a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b6a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b6a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b6ac:	42a5      	cmp	r5, r4
 800b6ae:	d003      	beq.n	800b6b8 <__mcmp+0x2c>
 800b6b0:	d305      	bcc.n	800b6be <__mcmp+0x32>
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	bd30      	pop	{r4, r5, pc}
 800b6b8:	4283      	cmp	r3, r0
 800b6ba:	d3f3      	bcc.n	800b6a4 <__mcmp+0x18>
 800b6bc:	e7fa      	b.n	800b6b4 <__mcmp+0x28>
 800b6be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6c2:	e7f7      	b.n	800b6b4 <__mcmp+0x28>

0800b6c4 <__mdiff>:
 800b6c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6c8:	460c      	mov	r4, r1
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	4611      	mov	r1, r2
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	4690      	mov	r8, r2
 800b6d2:	f7ff ffdb 	bl	800b68c <__mcmp>
 800b6d6:	1e05      	subs	r5, r0, #0
 800b6d8:	d110      	bne.n	800b6fc <__mdiff+0x38>
 800b6da:	4629      	mov	r1, r5
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f7ff fd53 	bl	800b188 <_Balloc>
 800b6e2:	b930      	cbnz	r0, 800b6f2 <__mdiff+0x2e>
 800b6e4:	4b3a      	ldr	r3, [pc, #232]	; (800b7d0 <__mdiff+0x10c>)
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	f240 2132 	movw	r1, #562	; 0x232
 800b6ec:	4839      	ldr	r0, [pc, #228]	; (800b7d4 <__mdiff+0x110>)
 800b6ee:	f000 fb31 	bl	800bd54 <__assert_func>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fc:	bfa4      	itt	ge
 800b6fe:	4643      	movge	r3, r8
 800b700:	46a0      	movge	r8, r4
 800b702:	4630      	mov	r0, r6
 800b704:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b708:	bfa6      	itte	ge
 800b70a:	461c      	movge	r4, r3
 800b70c:	2500      	movge	r5, #0
 800b70e:	2501      	movlt	r5, #1
 800b710:	f7ff fd3a 	bl	800b188 <_Balloc>
 800b714:	b920      	cbnz	r0, 800b720 <__mdiff+0x5c>
 800b716:	4b2e      	ldr	r3, [pc, #184]	; (800b7d0 <__mdiff+0x10c>)
 800b718:	4602      	mov	r2, r0
 800b71a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b71e:	e7e5      	b.n	800b6ec <__mdiff+0x28>
 800b720:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b724:	6926      	ldr	r6, [r4, #16]
 800b726:	60c5      	str	r5, [r0, #12]
 800b728:	f104 0914 	add.w	r9, r4, #20
 800b72c:	f108 0514 	add.w	r5, r8, #20
 800b730:	f100 0e14 	add.w	lr, r0, #20
 800b734:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b738:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b73c:	f108 0210 	add.w	r2, r8, #16
 800b740:	46f2      	mov	sl, lr
 800b742:	2100      	movs	r1, #0
 800b744:	f859 3b04 	ldr.w	r3, [r9], #4
 800b748:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b74c:	fa1f f883 	uxth.w	r8, r3
 800b750:	fa11 f18b 	uxtah	r1, r1, fp
 800b754:	0c1b      	lsrs	r3, r3, #16
 800b756:	eba1 0808 	sub.w	r8, r1, r8
 800b75a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b75e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b762:	fa1f f888 	uxth.w	r8, r8
 800b766:	1419      	asrs	r1, r3, #16
 800b768:	454e      	cmp	r6, r9
 800b76a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b76e:	f84a 3b04 	str.w	r3, [sl], #4
 800b772:	d8e7      	bhi.n	800b744 <__mdiff+0x80>
 800b774:	1b33      	subs	r3, r6, r4
 800b776:	3b15      	subs	r3, #21
 800b778:	f023 0303 	bic.w	r3, r3, #3
 800b77c:	3304      	adds	r3, #4
 800b77e:	3415      	adds	r4, #21
 800b780:	42a6      	cmp	r6, r4
 800b782:	bf38      	it	cc
 800b784:	2304      	movcc	r3, #4
 800b786:	441d      	add	r5, r3
 800b788:	4473      	add	r3, lr
 800b78a:	469e      	mov	lr, r3
 800b78c:	462e      	mov	r6, r5
 800b78e:	4566      	cmp	r6, ip
 800b790:	d30e      	bcc.n	800b7b0 <__mdiff+0xec>
 800b792:	f10c 0203 	add.w	r2, ip, #3
 800b796:	1b52      	subs	r2, r2, r5
 800b798:	f022 0203 	bic.w	r2, r2, #3
 800b79c:	3d03      	subs	r5, #3
 800b79e:	45ac      	cmp	ip, r5
 800b7a0:	bf38      	it	cc
 800b7a2:	2200      	movcc	r2, #0
 800b7a4:	441a      	add	r2, r3
 800b7a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b7aa:	b17b      	cbz	r3, 800b7cc <__mdiff+0x108>
 800b7ac:	6107      	str	r7, [r0, #16]
 800b7ae:	e7a3      	b.n	800b6f8 <__mdiff+0x34>
 800b7b0:	f856 8b04 	ldr.w	r8, [r6], #4
 800b7b4:	fa11 f288 	uxtah	r2, r1, r8
 800b7b8:	1414      	asrs	r4, r2, #16
 800b7ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b7be:	b292      	uxth	r2, r2
 800b7c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b7c4:	f84e 2b04 	str.w	r2, [lr], #4
 800b7c8:	1421      	asrs	r1, r4, #16
 800b7ca:	e7e0      	b.n	800b78e <__mdiff+0xca>
 800b7cc:	3f01      	subs	r7, #1
 800b7ce:	e7ea      	b.n	800b7a6 <__mdiff+0xe2>
 800b7d0:	0800cc03 	.word	0x0800cc03
 800b7d4:	0800cc14 	.word	0x0800cc14

0800b7d8 <__d2b>:
 800b7d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7dc:	4689      	mov	r9, r1
 800b7de:	2101      	movs	r1, #1
 800b7e0:	ec57 6b10 	vmov	r6, r7, d0
 800b7e4:	4690      	mov	r8, r2
 800b7e6:	f7ff fccf 	bl	800b188 <_Balloc>
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	b930      	cbnz	r0, 800b7fc <__d2b+0x24>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	4b25      	ldr	r3, [pc, #148]	; (800b888 <__d2b+0xb0>)
 800b7f2:	4826      	ldr	r0, [pc, #152]	; (800b88c <__d2b+0xb4>)
 800b7f4:	f240 310a 	movw	r1, #778	; 0x30a
 800b7f8:	f000 faac 	bl	800bd54 <__assert_func>
 800b7fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b800:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b804:	bb35      	cbnz	r5, 800b854 <__d2b+0x7c>
 800b806:	2e00      	cmp	r6, #0
 800b808:	9301      	str	r3, [sp, #4]
 800b80a:	d028      	beq.n	800b85e <__d2b+0x86>
 800b80c:	4668      	mov	r0, sp
 800b80e:	9600      	str	r6, [sp, #0]
 800b810:	f7ff fd82 	bl	800b318 <__lo0bits>
 800b814:	9900      	ldr	r1, [sp, #0]
 800b816:	b300      	cbz	r0, 800b85a <__d2b+0x82>
 800b818:	9a01      	ldr	r2, [sp, #4]
 800b81a:	f1c0 0320 	rsb	r3, r0, #32
 800b81e:	fa02 f303 	lsl.w	r3, r2, r3
 800b822:	430b      	orrs	r3, r1
 800b824:	40c2      	lsrs	r2, r0
 800b826:	6163      	str	r3, [r4, #20]
 800b828:	9201      	str	r2, [sp, #4]
 800b82a:	9b01      	ldr	r3, [sp, #4]
 800b82c:	61a3      	str	r3, [r4, #24]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	bf14      	ite	ne
 800b832:	2202      	movne	r2, #2
 800b834:	2201      	moveq	r2, #1
 800b836:	6122      	str	r2, [r4, #16]
 800b838:	b1d5      	cbz	r5, 800b870 <__d2b+0x98>
 800b83a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b83e:	4405      	add	r5, r0
 800b840:	f8c9 5000 	str.w	r5, [r9]
 800b844:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b848:	f8c8 0000 	str.w	r0, [r8]
 800b84c:	4620      	mov	r0, r4
 800b84e:	b003      	add	sp, #12
 800b850:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b858:	e7d5      	b.n	800b806 <__d2b+0x2e>
 800b85a:	6161      	str	r1, [r4, #20]
 800b85c:	e7e5      	b.n	800b82a <__d2b+0x52>
 800b85e:	a801      	add	r0, sp, #4
 800b860:	f7ff fd5a 	bl	800b318 <__lo0bits>
 800b864:	9b01      	ldr	r3, [sp, #4]
 800b866:	6163      	str	r3, [r4, #20]
 800b868:	2201      	movs	r2, #1
 800b86a:	6122      	str	r2, [r4, #16]
 800b86c:	3020      	adds	r0, #32
 800b86e:	e7e3      	b.n	800b838 <__d2b+0x60>
 800b870:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b874:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b878:	f8c9 0000 	str.w	r0, [r9]
 800b87c:	6918      	ldr	r0, [r3, #16]
 800b87e:	f7ff fd2b 	bl	800b2d8 <__hi0bits>
 800b882:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b886:	e7df      	b.n	800b848 <__d2b+0x70>
 800b888:	0800cc03 	.word	0x0800cc03
 800b88c:	0800cc14 	.word	0x0800cc14

0800b890 <_calloc_r>:
 800b890:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b892:	fba1 2402 	umull	r2, r4, r1, r2
 800b896:	b94c      	cbnz	r4, 800b8ac <_calloc_r+0x1c>
 800b898:	4611      	mov	r1, r2
 800b89a:	9201      	str	r2, [sp, #4]
 800b89c:	f000 f87a 	bl	800b994 <_malloc_r>
 800b8a0:	9a01      	ldr	r2, [sp, #4]
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	b930      	cbnz	r0, 800b8b4 <_calloc_r+0x24>
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	b003      	add	sp, #12
 800b8aa:	bd30      	pop	{r4, r5, pc}
 800b8ac:	220c      	movs	r2, #12
 800b8ae:	6002      	str	r2, [r0, #0]
 800b8b0:	2500      	movs	r5, #0
 800b8b2:	e7f8      	b.n	800b8a6 <_calloc_r+0x16>
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	f7fe f93f 	bl	8009b38 <memset>
 800b8ba:	e7f4      	b.n	800b8a6 <_calloc_r+0x16>

0800b8bc <_free_r>:
 800b8bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8be:	2900      	cmp	r1, #0
 800b8c0:	d044      	beq.n	800b94c <_free_r+0x90>
 800b8c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8c6:	9001      	str	r0, [sp, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f1a1 0404 	sub.w	r4, r1, #4
 800b8ce:	bfb8      	it	lt
 800b8d0:	18e4      	addlt	r4, r4, r3
 800b8d2:	f000 fa9b 	bl	800be0c <__malloc_lock>
 800b8d6:	4a1e      	ldr	r2, [pc, #120]	; (800b950 <_free_r+0x94>)
 800b8d8:	9801      	ldr	r0, [sp, #4]
 800b8da:	6813      	ldr	r3, [r2, #0]
 800b8dc:	b933      	cbnz	r3, 800b8ec <_free_r+0x30>
 800b8de:	6063      	str	r3, [r4, #4]
 800b8e0:	6014      	str	r4, [r2, #0]
 800b8e2:	b003      	add	sp, #12
 800b8e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8e8:	f000 ba96 	b.w	800be18 <__malloc_unlock>
 800b8ec:	42a3      	cmp	r3, r4
 800b8ee:	d908      	bls.n	800b902 <_free_r+0x46>
 800b8f0:	6825      	ldr	r5, [r4, #0]
 800b8f2:	1961      	adds	r1, r4, r5
 800b8f4:	428b      	cmp	r3, r1
 800b8f6:	bf01      	itttt	eq
 800b8f8:	6819      	ldreq	r1, [r3, #0]
 800b8fa:	685b      	ldreq	r3, [r3, #4]
 800b8fc:	1949      	addeq	r1, r1, r5
 800b8fe:	6021      	streq	r1, [r4, #0]
 800b900:	e7ed      	b.n	800b8de <_free_r+0x22>
 800b902:	461a      	mov	r2, r3
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	b10b      	cbz	r3, 800b90c <_free_r+0x50>
 800b908:	42a3      	cmp	r3, r4
 800b90a:	d9fa      	bls.n	800b902 <_free_r+0x46>
 800b90c:	6811      	ldr	r1, [r2, #0]
 800b90e:	1855      	adds	r5, r2, r1
 800b910:	42a5      	cmp	r5, r4
 800b912:	d10b      	bne.n	800b92c <_free_r+0x70>
 800b914:	6824      	ldr	r4, [r4, #0]
 800b916:	4421      	add	r1, r4
 800b918:	1854      	adds	r4, r2, r1
 800b91a:	42a3      	cmp	r3, r4
 800b91c:	6011      	str	r1, [r2, #0]
 800b91e:	d1e0      	bne.n	800b8e2 <_free_r+0x26>
 800b920:	681c      	ldr	r4, [r3, #0]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	6053      	str	r3, [r2, #4]
 800b926:	4421      	add	r1, r4
 800b928:	6011      	str	r1, [r2, #0]
 800b92a:	e7da      	b.n	800b8e2 <_free_r+0x26>
 800b92c:	d902      	bls.n	800b934 <_free_r+0x78>
 800b92e:	230c      	movs	r3, #12
 800b930:	6003      	str	r3, [r0, #0]
 800b932:	e7d6      	b.n	800b8e2 <_free_r+0x26>
 800b934:	6825      	ldr	r5, [r4, #0]
 800b936:	1961      	adds	r1, r4, r5
 800b938:	428b      	cmp	r3, r1
 800b93a:	bf04      	itt	eq
 800b93c:	6819      	ldreq	r1, [r3, #0]
 800b93e:	685b      	ldreq	r3, [r3, #4]
 800b940:	6063      	str	r3, [r4, #4]
 800b942:	bf04      	itt	eq
 800b944:	1949      	addeq	r1, r1, r5
 800b946:	6021      	streq	r1, [r4, #0]
 800b948:	6054      	str	r4, [r2, #4]
 800b94a:	e7ca      	b.n	800b8e2 <_free_r+0x26>
 800b94c:	b003      	add	sp, #12
 800b94e:	bd30      	pop	{r4, r5, pc}
 800b950:	20005b04 	.word	0x20005b04

0800b954 <sbrk_aligned>:
 800b954:	b570      	push	{r4, r5, r6, lr}
 800b956:	4e0e      	ldr	r6, [pc, #56]	; (800b990 <sbrk_aligned+0x3c>)
 800b958:	460c      	mov	r4, r1
 800b95a:	6831      	ldr	r1, [r6, #0]
 800b95c:	4605      	mov	r5, r0
 800b95e:	b911      	cbnz	r1, 800b966 <sbrk_aligned+0x12>
 800b960:	f000 f9e8 	bl	800bd34 <_sbrk_r>
 800b964:	6030      	str	r0, [r6, #0]
 800b966:	4621      	mov	r1, r4
 800b968:	4628      	mov	r0, r5
 800b96a:	f000 f9e3 	bl	800bd34 <_sbrk_r>
 800b96e:	1c43      	adds	r3, r0, #1
 800b970:	d00a      	beq.n	800b988 <sbrk_aligned+0x34>
 800b972:	1cc4      	adds	r4, r0, #3
 800b974:	f024 0403 	bic.w	r4, r4, #3
 800b978:	42a0      	cmp	r0, r4
 800b97a:	d007      	beq.n	800b98c <sbrk_aligned+0x38>
 800b97c:	1a21      	subs	r1, r4, r0
 800b97e:	4628      	mov	r0, r5
 800b980:	f000 f9d8 	bl	800bd34 <_sbrk_r>
 800b984:	3001      	adds	r0, #1
 800b986:	d101      	bne.n	800b98c <sbrk_aligned+0x38>
 800b988:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b98c:	4620      	mov	r0, r4
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	20005b08 	.word	0x20005b08

0800b994 <_malloc_r>:
 800b994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b998:	1ccd      	adds	r5, r1, #3
 800b99a:	f025 0503 	bic.w	r5, r5, #3
 800b99e:	3508      	adds	r5, #8
 800b9a0:	2d0c      	cmp	r5, #12
 800b9a2:	bf38      	it	cc
 800b9a4:	250c      	movcc	r5, #12
 800b9a6:	2d00      	cmp	r5, #0
 800b9a8:	4607      	mov	r7, r0
 800b9aa:	db01      	blt.n	800b9b0 <_malloc_r+0x1c>
 800b9ac:	42a9      	cmp	r1, r5
 800b9ae:	d905      	bls.n	800b9bc <_malloc_r+0x28>
 800b9b0:	230c      	movs	r3, #12
 800b9b2:	603b      	str	r3, [r7, #0]
 800b9b4:	2600      	movs	r6, #0
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9bc:	4e2e      	ldr	r6, [pc, #184]	; (800ba78 <_malloc_r+0xe4>)
 800b9be:	f000 fa25 	bl	800be0c <__malloc_lock>
 800b9c2:	6833      	ldr	r3, [r6, #0]
 800b9c4:	461c      	mov	r4, r3
 800b9c6:	bb34      	cbnz	r4, 800ba16 <_malloc_r+0x82>
 800b9c8:	4629      	mov	r1, r5
 800b9ca:	4638      	mov	r0, r7
 800b9cc:	f7ff ffc2 	bl	800b954 <sbrk_aligned>
 800b9d0:	1c43      	adds	r3, r0, #1
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	d14d      	bne.n	800ba72 <_malloc_r+0xde>
 800b9d6:	6834      	ldr	r4, [r6, #0]
 800b9d8:	4626      	mov	r6, r4
 800b9da:	2e00      	cmp	r6, #0
 800b9dc:	d140      	bne.n	800ba60 <_malloc_r+0xcc>
 800b9de:	6823      	ldr	r3, [r4, #0]
 800b9e0:	4631      	mov	r1, r6
 800b9e2:	4638      	mov	r0, r7
 800b9e4:	eb04 0803 	add.w	r8, r4, r3
 800b9e8:	f000 f9a4 	bl	800bd34 <_sbrk_r>
 800b9ec:	4580      	cmp	r8, r0
 800b9ee:	d13a      	bne.n	800ba66 <_malloc_r+0xd2>
 800b9f0:	6821      	ldr	r1, [r4, #0]
 800b9f2:	3503      	adds	r5, #3
 800b9f4:	1a6d      	subs	r5, r5, r1
 800b9f6:	f025 0503 	bic.w	r5, r5, #3
 800b9fa:	3508      	adds	r5, #8
 800b9fc:	2d0c      	cmp	r5, #12
 800b9fe:	bf38      	it	cc
 800ba00:	250c      	movcc	r5, #12
 800ba02:	4629      	mov	r1, r5
 800ba04:	4638      	mov	r0, r7
 800ba06:	f7ff ffa5 	bl	800b954 <sbrk_aligned>
 800ba0a:	3001      	adds	r0, #1
 800ba0c:	d02b      	beq.n	800ba66 <_malloc_r+0xd2>
 800ba0e:	6823      	ldr	r3, [r4, #0]
 800ba10:	442b      	add	r3, r5
 800ba12:	6023      	str	r3, [r4, #0]
 800ba14:	e00e      	b.n	800ba34 <_malloc_r+0xa0>
 800ba16:	6822      	ldr	r2, [r4, #0]
 800ba18:	1b52      	subs	r2, r2, r5
 800ba1a:	d41e      	bmi.n	800ba5a <_malloc_r+0xc6>
 800ba1c:	2a0b      	cmp	r2, #11
 800ba1e:	d916      	bls.n	800ba4e <_malloc_r+0xba>
 800ba20:	1961      	adds	r1, r4, r5
 800ba22:	42a3      	cmp	r3, r4
 800ba24:	6025      	str	r5, [r4, #0]
 800ba26:	bf18      	it	ne
 800ba28:	6059      	strne	r1, [r3, #4]
 800ba2a:	6863      	ldr	r3, [r4, #4]
 800ba2c:	bf08      	it	eq
 800ba2e:	6031      	streq	r1, [r6, #0]
 800ba30:	5162      	str	r2, [r4, r5]
 800ba32:	604b      	str	r3, [r1, #4]
 800ba34:	4638      	mov	r0, r7
 800ba36:	f104 060b 	add.w	r6, r4, #11
 800ba3a:	f000 f9ed 	bl	800be18 <__malloc_unlock>
 800ba3e:	f026 0607 	bic.w	r6, r6, #7
 800ba42:	1d23      	adds	r3, r4, #4
 800ba44:	1af2      	subs	r2, r6, r3
 800ba46:	d0b6      	beq.n	800b9b6 <_malloc_r+0x22>
 800ba48:	1b9b      	subs	r3, r3, r6
 800ba4a:	50a3      	str	r3, [r4, r2]
 800ba4c:	e7b3      	b.n	800b9b6 <_malloc_r+0x22>
 800ba4e:	6862      	ldr	r2, [r4, #4]
 800ba50:	42a3      	cmp	r3, r4
 800ba52:	bf0c      	ite	eq
 800ba54:	6032      	streq	r2, [r6, #0]
 800ba56:	605a      	strne	r2, [r3, #4]
 800ba58:	e7ec      	b.n	800ba34 <_malloc_r+0xa0>
 800ba5a:	4623      	mov	r3, r4
 800ba5c:	6864      	ldr	r4, [r4, #4]
 800ba5e:	e7b2      	b.n	800b9c6 <_malloc_r+0x32>
 800ba60:	4634      	mov	r4, r6
 800ba62:	6876      	ldr	r6, [r6, #4]
 800ba64:	e7b9      	b.n	800b9da <_malloc_r+0x46>
 800ba66:	230c      	movs	r3, #12
 800ba68:	603b      	str	r3, [r7, #0]
 800ba6a:	4638      	mov	r0, r7
 800ba6c:	f000 f9d4 	bl	800be18 <__malloc_unlock>
 800ba70:	e7a1      	b.n	800b9b6 <_malloc_r+0x22>
 800ba72:	6025      	str	r5, [r4, #0]
 800ba74:	e7de      	b.n	800ba34 <_malloc_r+0xa0>
 800ba76:	bf00      	nop
 800ba78:	20005b04 	.word	0x20005b04

0800ba7c <__ssputs_r>:
 800ba7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba80:	688e      	ldr	r6, [r1, #8]
 800ba82:	429e      	cmp	r6, r3
 800ba84:	4682      	mov	sl, r0
 800ba86:	460c      	mov	r4, r1
 800ba88:	4690      	mov	r8, r2
 800ba8a:	461f      	mov	r7, r3
 800ba8c:	d838      	bhi.n	800bb00 <__ssputs_r+0x84>
 800ba8e:	898a      	ldrh	r2, [r1, #12]
 800ba90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba94:	d032      	beq.n	800bafc <__ssputs_r+0x80>
 800ba96:	6825      	ldr	r5, [r4, #0]
 800ba98:	6909      	ldr	r1, [r1, #16]
 800ba9a:	eba5 0901 	sub.w	r9, r5, r1
 800ba9e:	6965      	ldr	r5, [r4, #20]
 800baa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800baa8:	3301      	adds	r3, #1
 800baaa:	444b      	add	r3, r9
 800baac:	106d      	asrs	r5, r5, #1
 800baae:	429d      	cmp	r5, r3
 800bab0:	bf38      	it	cc
 800bab2:	461d      	movcc	r5, r3
 800bab4:	0553      	lsls	r3, r2, #21
 800bab6:	d531      	bpl.n	800bb1c <__ssputs_r+0xa0>
 800bab8:	4629      	mov	r1, r5
 800baba:	f7ff ff6b 	bl	800b994 <_malloc_r>
 800babe:	4606      	mov	r6, r0
 800bac0:	b950      	cbnz	r0, 800bad8 <__ssputs_r+0x5c>
 800bac2:	230c      	movs	r3, #12
 800bac4:	f8ca 3000 	str.w	r3, [sl]
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bace:	81a3      	strh	r3, [r4, #12]
 800bad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bad8:	6921      	ldr	r1, [r4, #16]
 800bada:	464a      	mov	r2, r9
 800badc:	f7ff fb46 	bl	800b16c <memcpy>
 800bae0:	89a3      	ldrh	r3, [r4, #12]
 800bae2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baea:	81a3      	strh	r3, [r4, #12]
 800baec:	6126      	str	r6, [r4, #16]
 800baee:	6165      	str	r5, [r4, #20]
 800baf0:	444e      	add	r6, r9
 800baf2:	eba5 0509 	sub.w	r5, r5, r9
 800baf6:	6026      	str	r6, [r4, #0]
 800baf8:	60a5      	str	r5, [r4, #8]
 800bafa:	463e      	mov	r6, r7
 800bafc:	42be      	cmp	r6, r7
 800bafe:	d900      	bls.n	800bb02 <__ssputs_r+0x86>
 800bb00:	463e      	mov	r6, r7
 800bb02:	6820      	ldr	r0, [r4, #0]
 800bb04:	4632      	mov	r2, r6
 800bb06:	4641      	mov	r1, r8
 800bb08:	f000 f966 	bl	800bdd8 <memmove>
 800bb0c:	68a3      	ldr	r3, [r4, #8]
 800bb0e:	1b9b      	subs	r3, r3, r6
 800bb10:	60a3      	str	r3, [r4, #8]
 800bb12:	6823      	ldr	r3, [r4, #0]
 800bb14:	4433      	add	r3, r6
 800bb16:	6023      	str	r3, [r4, #0]
 800bb18:	2000      	movs	r0, #0
 800bb1a:	e7db      	b.n	800bad4 <__ssputs_r+0x58>
 800bb1c:	462a      	mov	r2, r5
 800bb1e:	f000 f981 	bl	800be24 <_realloc_r>
 800bb22:	4606      	mov	r6, r0
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d1e1      	bne.n	800baec <__ssputs_r+0x70>
 800bb28:	6921      	ldr	r1, [r4, #16]
 800bb2a:	4650      	mov	r0, sl
 800bb2c:	f7ff fec6 	bl	800b8bc <_free_r>
 800bb30:	e7c7      	b.n	800bac2 <__ssputs_r+0x46>
	...

0800bb34 <_svfiprintf_r>:
 800bb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb38:	4698      	mov	r8, r3
 800bb3a:	898b      	ldrh	r3, [r1, #12]
 800bb3c:	061b      	lsls	r3, r3, #24
 800bb3e:	b09d      	sub	sp, #116	; 0x74
 800bb40:	4607      	mov	r7, r0
 800bb42:	460d      	mov	r5, r1
 800bb44:	4614      	mov	r4, r2
 800bb46:	d50e      	bpl.n	800bb66 <_svfiprintf_r+0x32>
 800bb48:	690b      	ldr	r3, [r1, #16]
 800bb4a:	b963      	cbnz	r3, 800bb66 <_svfiprintf_r+0x32>
 800bb4c:	2140      	movs	r1, #64	; 0x40
 800bb4e:	f7ff ff21 	bl	800b994 <_malloc_r>
 800bb52:	6028      	str	r0, [r5, #0]
 800bb54:	6128      	str	r0, [r5, #16]
 800bb56:	b920      	cbnz	r0, 800bb62 <_svfiprintf_r+0x2e>
 800bb58:	230c      	movs	r3, #12
 800bb5a:	603b      	str	r3, [r7, #0]
 800bb5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb60:	e0d1      	b.n	800bd06 <_svfiprintf_r+0x1d2>
 800bb62:	2340      	movs	r3, #64	; 0x40
 800bb64:	616b      	str	r3, [r5, #20]
 800bb66:	2300      	movs	r3, #0
 800bb68:	9309      	str	r3, [sp, #36]	; 0x24
 800bb6a:	2320      	movs	r3, #32
 800bb6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb70:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb74:	2330      	movs	r3, #48	; 0x30
 800bb76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd20 <_svfiprintf_r+0x1ec>
 800bb7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb7e:	f04f 0901 	mov.w	r9, #1
 800bb82:	4623      	mov	r3, r4
 800bb84:	469a      	mov	sl, r3
 800bb86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb8a:	b10a      	cbz	r2, 800bb90 <_svfiprintf_r+0x5c>
 800bb8c:	2a25      	cmp	r2, #37	; 0x25
 800bb8e:	d1f9      	bne.n	800bb84 <_svfiprintf_r+0x50>
 800bb90:	ebba 0b04 	subs.w	fp, sl, r4
 800bb94:	d00b      	beq.n	800bbae <_svfiprintf_r+0x7a>
 800bb96:	465b      	mov	r3, fp
 800bb98:	4622      	mov	r2, r4
 800bb9a:	4629      	mov	r1, r5
 800bb9c:	4638      	mov	r0, r7
 800bb9e:	f7ff ff6d 	bl	800ba7c <__ssputs_r>
 800bba2:	3001      	adds	r0, #1
 800bba4:	f000 80aa 	beq.w	800bcfc <_svfiprintf_r+0x1c8>
 800bba8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbaa:	445a      	add	r2, fp
 800bbac:	9209      	str	r2, [sp, #36]	; 0x24
 800bbae:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 80a2 	beq.w	800bcfc <_svfiprintf_r+0x1c8>
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbc2:	f10a 0a01 	add.w	sl, sl, #1
 800bbc6:	9304      	str	r3, [sp, #16]
 800bbc8:	9307      	str	r3, [sp, #28]
 800bbca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbce:	931a      	str	r3, [sp, #104]	; 0x68
 800bbd0:	4654      	mov	r4, sl
 800bbd2:	2205      	movs	r2, #5
 800bbd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd8:	4851      	ldr	r0, [pc, #324]	; (800bd20 <_svfiprintf_r+0x1ec>)
 800bbda:	f7f4 fb01 	bl	80001e0 <memchr>
 800bbde:	9a04      	ldr	r2, [sp, #16]
 800bbe0:	b9d8      	cbnz	r0, 800bc1a <_svfiprintf_r+0xe6>
 800bbe2:	06d0      	lsls	r0, r2, #27
 800bbe4:	bf44      	itt	mi
 800bbe6:	2320      	movmi	r3, #32
 800bbe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbec:	0711      	lsls	r1, r2, #28
 800bbee:	bf44      	itt	mi
 800bbf0:	232b      	movmi	r3, #43	; 0x2b
 800bbf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbf6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbfa:	2b2a      	cmp	r3, #42	; 0x2a
 800bbfc:	d015      	beq.n	800bc2a <_svfiprintf_r+0xf6>
 800bbfe:	9a07      	ldr	r2, [sp, #28]
 800bc00:	4654      	mov	r4, sl
 800bc02:	2000      	movs	r0, #0
 800bc04:	f04f 0c0a 	mov.w	ip, #10
 800bc08:	4621      	mov	r1, r4
 800bc0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc0e:	3b30      	subs	r3, #48	; 0x30
 800bc10:	2b09      	cmp	r3, #9
 800bc12:	d94e      	bls.n	800bcb2 <_svfiprintf_r+0x17e>
 800bc14:	b1b0      	cbz	r0, 800bc44 <_svfiprintf_r+0x110>
 800bc16:	9207      	str	r2, [sp, #28]
 800bc18:	e014      	b.n	800bc44 <_svfiprintf_r+0x110>
 800bc1a:	eba0 0308 	sub.w	r3, r0, r8
 800bc1e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc22:	4313      	orrs	r3, r2
 800bc24:	9304      	str	r3, [sp, #16]
 800bc26:	46a2      	mov	sl, r4
 800bc28:	e7d2      	b.n	800bbd0 <_svfiprintf_r+0x9c>
 800bc2a:	9b03      	ldr	r3, [sp, #12]
 800bc2c:	1d19      	adds	r1, r3, #4
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	9103      	str	r1, [sp, #12]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	bfbb      	ittet	lt
 800bc36:	425b      	neglt	r3, r3
 800bc38:	f042 0202 	orrlt.w	r2, r2, #2
 800bc3c:	9307      	strge	r3, [sp, #28]
 800bc3e:	9307      	strlt	r3, [sp, #28]
 800bc40:	bfb8      	it	lt
 800bc42:	9204      	strlt	r2, [sp, #16]
 800bc44:	7823      	ldrb	r3, [r4, #0]
 800bc46:	2b2e      	cmp	r3, #46	; 0x2e
 800bc48:	d10c      	bne.n	800bc64 <_svfiprintf_r+0x130>
 800bc4a:	7863      	ldrb	r3, [r4, #1]
 800bc4c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc4e:	d135      	bne.n	800bcbc <_svfiprintf_r+0x188>
 800bc50:	9b03      	ldr	r3, [sp, #12]
 800bc52:	1d1a      	adds	r2, r3, #4
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	9203      	str	r2, [sp, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	bfb8      	it	lt
 800bc5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bc60:	3402      	adds	r4, #2
 800bc62:	9305      	str	r3, [sp, #20]
 800bc64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd30 <_svfiprintf_r+0x1fc>
 800bc68:	7821      	ldrb	r1, [r4, #0]
 800bc6a:	2203      	movs	r2, #3
 800bc6c:	4650      	mov	r0, sl
 800bc6e:	f7f4 fab7 	bl	80001e0 <memchr>
 800bc72:	b140      	cbz	r0, 800bc86 <_svfiprintf_r+0x152>
 800bc74:	2340      	movs	r3, #64	; 0x40
 800bc76:	eba0 000a 	sub.w	r0, r0, sl
 800bc7a:	fa03 f000 	lsl.w	r0, r3, r0
 800bc7e:	9b04      	ldr	r3, [sp, #16]
 800bc80:	4303      	orrs	r3, r0
 800bc82:	3401      	adds	r4, #1
 800bc84:	9304      	str	r3, [sp, #16]
 800bc86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc8a:	4826      	ldr	r0, [pc, #152]	; (800bd24 <_svfiprintf_r+0x1f0>)
 800bc8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc90:	2206      	movs	r2, #6
 800bc92:	f7f4 faa5 	bl	80001e0 <memchr>
 800bc96:	2800      	cmp	r0, #0
 800bc98:	d038      	beq.n	800bd0c <_svfiprintf_r+0x1d8>
 800bc9a:	4b23      	ldr	r3, [pc, #140]	; (800bd28 <_svfiprintf_r+0x1f4>)
 800bc9c:	bb1b      	cbnz	r3, 800bce6 <_svfiprintf_r+0x1b2>
 800bc9e:	9b03      	ldr	r3, [sp, #12]
 800bca0:	3307      	adds	r3, #7
 800bca2:	f023 0307 	bic.w	r3, r3, #7
 800bca6:	3308      	adds	r3, #8
 800bca8:	9303      	str	r3, [sp, #12]
 800bcaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcac:	4433      	add	r3, r6
 800bcae:	9309      	str	r3, [sp, #36]	; 0x24
 800bcb0:	e767      	b.n	800bb82 <_svfiprintf_r+0x4e>
 800bcb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	2001      	movs	r0, #1
 800bcba:	e7a5      	b.n	800bc08 <_svfiprintf_r+0xd4>
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	3401      	adds	r4, #1
 800bcc0:	9305      	str	r3, [sp, #20]
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	f04f 0c0a 	mov.w	ip, #10
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcce:	3a30      	subs	r2, #48	; 0x30
 800bcd0:	2a09      	cmp	r2, #9
 800bcd2:	d903      	bls.n	800bcdc <_svfiprintf_r+0x1a8>
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d0c5      	beq.n	800bc64 <_svfiprintf_r+0x130>
 800bcd8:	9105      	str	r1, [sp, #20]
 800bcda:	e7c3      	b.n	800bc64 <_svfiprintf_r+0x130>
 800bcdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bce0:	4604      	mov	r4, r0
 800bce2:	2301      	movs	r3, #1
 800bce4:	e7f0      	b.n	800bcc8 <_svfiprintf_r+0x194>
 800bce6:	ab03      	add	r3, sp, #12
 800bce8:	9300      	str	r3, [sp, #0]
 800bcea:	462a      	mov	r2, r5
 800bcec:	4b0f      	ldr	r3, [pc, #60]	; (800bd2c <_svfiprintf_r+0x1f8>)
 800bcee:	a904      	add	r1, sp, #16
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	f7fd ffc9 	bl	8009c88 <_printf_float>
 800bcf6:	1c42      	adds	r2, r0, #1
 800bcf8:	4606      	mov	r6, r0
 800bcfa:	d1d6      	bne.n	800bcaa <_svfiprintf_r+0x176>
 800bcfc:	89ab      	ldrh	r3, [r5, #12]
 800bcfe:	065b      	lsls	r3, r3, #25
 800bd00:	f53f af2c 	bmi.w	800bb5c <_svfiprintf_r+0x28>
 800bd04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd06:	b01d      	add	sp, #116	; 0x74
 800bd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0c:	ab03      	add	r3, sp, #12
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	462a      	mov	r2, r5
 800bd12:	4b06      	ldr	r3, [pc, #24]	; (800bd2c <_svfiprintf_r+0x1f8>)
 800bd14:	a904      	add	r1, sp, #16
 800bd16:	4638      	mov	r0, r7
 800bd18:	f7fe fa5a 	bl	800a1d0 <_printf_i>
 800bd1c:	e7eb      	b.n	800bcf6 <_svfiprintf_r+0x1c2>
 800bd1e:	bf00      	nop
 800bd20:	0800cd6c 	.word	0x0800cd6c
 800bd24:	0800cd76 	.word	0x0800cd76
 800bd28:	08009c89 	.word	0x08009c89
 800bd2c:	0800ba7d 	.word	0x0800ba7d
 800bd30:	0800cd72 	.word	0x0800cd72

0800bd34 <_sbrk_r>:
 800bd34:	b538      	push	{r3, r4, r5, lr}
 800bd36:	4d06      	ldr	r5, [pc, #24]	; (800bd50 <_sbrk_r+0x1c>)
 800bd38:	2300      	movs	r3, #0
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	4608      	mov	r0, r1
 800bd3e:	602b      	str	r3, [r5, #0]
 800bd40:	f7f7 fa80 	bl	8003244 <_sbrk>
 800bd44:	1c43      	adds	r3, r0, #1
 800bd46:	d102      	bne.n	800bd4e <_sbrk_r+0x1a>
 800bd48:	682b      	ldr	r3, [r5, #0]
 800bd4a:	b103      	cbz	r3, 800bd4e <_sbrk_r+0x1a>
 800bd4c:	6023      	str	r3, [r4, #0]
 800bd4e:	bd38      	pop	{r3, r4, r5, pc}
 800bd50:	20005b0c 	.word	0x20005b0c

0800bd54 <__assert_func>:
 800bd54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd56:	4614      	mov	r4, r2
 800bd58:	461a      	mov	r2, r3
 800bd5a:	4b09      	ldr	r3, [pc, #36]	; (800bd80 <__assert_func+0x2c>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4605      	mov	r5, r0
 800bd60:	68d8      	ldr	r0, [r3, #12]
 800bd62:	b14c      	cbz	r4, 800bd78 <__assert_func+0x24>
 800bd64:	4b07      	ldr	r3, [pc, #28]	; (800bd84 <__assert_func+0x30>)
 800bd66:	9100      	str	r1, [sp, #0]
 800bd68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bd6c:	4906      	ldr	r1, [pc, #24]	; (800bd88 <__assert_func+0x34>)
 800bd6e:	462b      	mov	r3, r5
 800bd70:	f000 f80e 	bl	800bd90 <fiprintf>
 800bd74:	f000 faac 	bl	800c2d0 <abort>
 800bd78:	4b04      	ldr	r3, [pc, #16]	; (800bd8c <__assert_func+0x38>)
 800bd7a:	461c      	mov	r4, r3
 800bd7c:	e7f3      	b.n	800bd66 <__assert_func+0x12>
 800bd7e:	bf00      	nop
 800bd80:	2000000c 	.word	0x2000000c
 800bd84:	0800cd7d 	.word	0x0800cd7d
 800bd88:	0800cd8a 	.word	0x0800cd8a
 800bd8c:	0800cdb8 	.word	0x0800cdb8

0800bd90 <fiprintf>:
 800bd90:	b40e      	push	{r1, r2, r3}
 800bd92:	b503      	push	{r0, r1, lr}
 800bd94:	4601      	mov	r1, r0
 800bd96:	ab03      	add	r3, sp, #12
 800bd98:	4805      	ldr	r0, [pc, #20]	; (800bdb0 <fiprintf+0x20>)
 800bd9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd9e:	6800      	ldr	r0, [r0, #0]
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	f000 f897 	bl	800bed4 <_vfiprintf_r>
 800bda6:	b002      	add	sp, #8
 800bda8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdac:	b003      	add	sp, #12
 800bdae:	4770      	bx	lr
 800bdb0:	2000000c 	.word	0x2000000c

0800bdb4 <__ascii_mbtowc>:
 800bdb4:	b082      	sub	sp, #8
 800bdb6:	b901      	cbnz	r1, 800bdba <__ascii_mbtowc+0x6>
 800bdb8:	a901      	add	r1, sp, #4
 800bdba:	b142      	cbz	r2, 800bdce <__ascii_mbtowc+0x1a>
 800bdbc:	b14b      	cbz	r3, 800bdd2 <__ascii_mbtowc+0x1e>
 800bdbe:	7813      	ldrb	r3, [r2, #0]
 800bdc0:	600b      	str	r3, [r1, #0]
 800bdc2:	7812      	ldrb	r2, [r2, #0]
 800bdc4:	1e10      	subs	r0, r2, #0
 800bdc6:	bf18      	it	ne
 800bdc8:	2001      	movne	r0, #1
 800bdca:	b002      	add	sp, #8
 800bdcc:	4770      	bx	lr
 800bdce:	4610      	mov	r0, r2
 800bdd0:	e7fb      	b.n	800bdca <__ascii_mbtowc+0x16>
 800bdd2:	f06f 0001 	mvn.w	r0, #1
 800bdd6:	e7f8      	b.n	800bdca <__ascii_mbtowc+0x16>

0800bdd8 <memmove>:
 800bdd8:	4288      	cmp	r0, r1
 800bdda:	b510      	push	{r4, lr}
 800bddc:	eb01 0402 	add.w	r4, r1, r2
 800bde0:	d902      	bls.n	800bde8 <memmove+0x10>
 800bde2:	4284      	cmp	r4, r0
 800bde4:	4623      	mov	r3, r4
 800bde6:	d807      	bhi.n	800bdf8 <memmove+0x20>
 800bde8:	1e43      	subs	r3, r0, #1
 800bdea:	42a1      	cmp	r1, r4
 800bdec:	d008      	beq.n	800be00 <memmove+0x28>
 800bdee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bdf6:	e7f8      	b.n	800bdea <memmove+0x12>
 800bdf8:	4402      	add	r2, r0
 800bdfa:	4601      	mov	r1, r0
 800bdfc:	428a      	cmp	r2, r1
 800bdfe:	d100      	bne.n	800be02 <memmove+0x2a>
 800be00:	bd10      	pop	{r4, pc}
 800be02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be0a:	e7f7      	b.n	800bdfc <memmove+0x24>

0800be0c <__malloc_lock>:
 800be0c:	4801      	ldr	r0, [pc, #4]	; (800be14 <__malloc_lock+0x8>)
 800be0e:	f000 bc1f 	b.w	800c650 <__retarget_lock_acquire_recursive>
 800be12:	bf00      	nop
 800be14:	20005b10 	.word	0x20005b10

0800be18 <__malloc_unlock>:
 800be18:	4801      	ldr	r0, [pc, #4]	; (800be20 <__malloc_unlock+0x8>)
 800be1a:	f000 bc1a 	b.w	800c652 <__retarget_lock_release_recursive>
 800be1e:	bf00      	nop
 800be20:	20005b10 	.word	0x20005b10

0800be24 <_realloc_r>:
 800be24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be28:	4680      	mov	r8, r0
 800be2a:	4614      	mov	r4, r2
 800be2c:	460e      	mov	r6, r1
 800be2e:	b921      	cbnz	r1, 800be3a <_realloc_r+0x16>
 800be30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be34:	4611      	mov	r1, r2
 800be36:	f7ff bdad 	b.w	800b994 <_malloc_r>
 800be3a:	b92a      	cbnz	r2, 800be48 <_realloc_r+0x24>
 800be3c:	f7ff fd3e 	bl	800b8bc <_free_r>
 800be40:	4625      	mov	r5, r4
 800be42:	4628      	mov	r0, r5
 800be44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be48:	f000 fc6a 	bl	800c720 <_malloc_usable_size_r>
 800be4c:	4284      	cmp	r4, r0
 800be4e:	4607      	mov	r7, r0
 800be50:	d802      	bhi.n	800be58 <_realloc_r+0x34>
 800be52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be56:	d812      	bhi.n	800be7e <_realloc_r+0x5a>
 800be58:	4621      	mov	r1, r4
 800be5a:	4640      	mov	r0, r8
 800be5c:	f7ff fd9a 	bl	800b994 <_malloc_r>
 800be60:	4605      	mov	r5, r0
 800be62:	2800      	cmp	r0, #0
 800be64:	d0ed      	beq.n	800be42 <_realloc_r+0x1e>
 800be66:	42bc      	cmp	r4, r7
 800be68:	4622      	mov	r2, r4
 800be6a:	4631      	mov	r1, r6
 800be6c:	bf28      	it	cs
 800be6e:	463a      	movcs	r2, r7
 800be70:	f7ff f97c 	bl	800b16c <memcpy>
 800be74:	4631      	mov	r1, r6
 800be76:	4640      	mov	r0, r8
 800be78:	f7ff fd20 	bl	800b8bc <_free_r>
 800be7c:	e7e1      	b.n	800be42 <_realloc_r+0x1e>
 800be7e:	4635      	mov	r5, r6
 800be80:	e7df      	b.n	800be42 <_realloc_r+0x1e>

0800be82 <__sfputc_r>:
 800be82:	6893      	ldr	r3, [r2, #8]
 800be84:	3b01      	subs	r3, #1
 800be86:	2b00      	cmp	r3, #0
 800be88:	b410      	push	{r4}
 800be8a:	6093      	str	r3, [r2, #8]
 800be8c:	da08      	bge.n	800bea0 <__sfputc_r+0x1e>
 800be8e:	6994      	ldr	r4, [r2, #24]
 800be90:	42a3      	cmp	r3, r4
 800be92:	db01      	blt.n	800be98 <__sfputc_r+0x16>
 800be94:	290a      	cmp	r1, #10
 800be96:	d103      	bne.n	800bea0 <__sfputc_r+0x1e>
 800be98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be9c:	f000 b94a 	b.w	800c134 <__swbuf_r>
 800bea0:	6813      	ldr	r3, [r2, #0]
 800bea2:	1c58      	adds	r0, r3, #1
 800bea4:	6010      	str	r0, [r2, #0]
 800bea6:	7019      	strb	r1, [r3, #0]
 800bea8:	4608      	mov	r0, r1
 800beaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <__sfputs_r>:
 800beb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb2:	4606      	mov	r6, r0
 800beb4:	460f      	mov	r7, r1
 800beb6:	4614      	mov	r4, r2
 800beb8:	18d5      	adds	r5, r2, r3
 800beba:	42ac      	cmp	r4, r5
 800bebc:	d101      	bne.n	800bec2 <__sfputs_r+0x12>
 800bebe:	2000      	movs	r0, #0
 800bec0:	e007      	b.n	800bed2 <__sfputs_r+0x22>
 800bec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bec6:	463a      	mov	r2, r7
 800bec8:	4630      	mov	r0, r6
 800beca:	f7ff ffda 	bl	800be82 <__sfputc_r>
 800bece:	1c43      	adds	r3, r0, #1
 800bed0:	d1f3      	bne.n	800beba <__sfputs_r+0xa>
 800bed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bed4 <_vfiprintf_r>:
 800bed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed8:	460d      	mov	r5, r1
 800beda:	b09d      	sub	sp, #116	; 0x74
 800bedc:	4614      	mov	r4, r2
 800bede:	4698      	mov	r8, r3
 800bee0:	4606      	mov	r6, r0
 800bee2:	b118      	cbz	r0, 800beec <_vfiprintf_r+0x18>
 800bee4:	6983      	ldr	r3, [r0, #24]
 800bee6:	b90b      	cbnz	r3, 800beec <_vfiprintf_r+0x18>
 800bee8:	f000 fb14 	bl	800c514 <__sinit>
 800beec:	4b89      	ldr	r3, [pc, #548]	; (800c114 <_vfiprintf_r+0x240>)
 800beee:	429d      	cmp	r5, r3
 800bef0:	d11b      	bne.n	800bf2a <_vfiprintf_r+0x56>
 800bef2:	6875      	ldr	r5, [r6, #4]
 800bef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bef6:	07d9      	lsls	r1, r3, #31
 800bef8:	d405      	bmi.n	800bf06 <_vfiprintf_r+0x32>
 800befa:	89ab      	ldrh	r3, [r5, #12]
 800befc:	059a      	lsls	r2, r3, #22
 800befe:	d402      	bmi.n	800bf06 <_vfiprintf_r+0x32>
 800bf00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf02:	f000 fba5 	bl	800c650 <__retarget_lock_acquire_recursive>
 800bf06:	89ab      	ldrh	r3, [r5, #12]
 800bf08:	071b      	lsls	r3, r3, #28
 800bf0a:	d501      	bpl.n	800bf10 <_vfiprintf_r+0x3c>
 800bf0c:	692b      	ldr	r3, [r5, #16]
 800bf0e:	b9eb      	cbnz	r3, 800bf4c <_vfiprintf_r+0x78>
 800bf10:	4629      	mov	r1, r5
 800bf12:	4630      	mov	r0, r6
 800bf14:	f000 f96e 	bl	800c1f4 <__swsetup_r>
 800bf18:	b1c0      	cbz	r0, 800bf4c <_vfiprintf_r+0x78>
 800bf1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf1c:	07dc      	lsls	r4, r3, #31
 800bf1e:	d50e      	bpl.n	800bf3e <_vfiprintf_r+0x6a>
 800bf20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf24:	b01d      	add	sp, #116	; 0x74
 800bf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf2a:	4b7b      	ldr	r3, [pc, #492]	; (800c118 <_vfiprintf_r+0x244>)
 800bf2c:	429d      	cmp	r5, r3
 800bf2e:	d101      	bne.n	800bf34 <_vfiprintf_r+0x60>
 800bf30:	68b5      	ldr	r5, [r6, #8]
 800bf32:	e7df      	b.n	800bef4 <_vfiprintf_r+0x20>
 800bf34:	4b79      	ldr	r3, [pc, #484]	; (800c11c <_vfiprintf_r+0x248>)
 800bf36:	429d      	cmp	r5, r3
 800bf38:	bf08      	it	eq
 800bf3a:	68f5      	ldreq	r5, [r6, #12]
 800bf3c:	e7da      	b.n	800bef4 <_vfiprintf_r+0x20>
 800bf3e:	89ab      	ldrh	r3, [r5, #12]
 800bf40:	0598      	lsls	r0, r3, #22
 800bf42:	d4ed      	bmi.n	800bf20 <_vfiprintf_r+0x4c>
 800bf44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf46:	f000 fb84 	bl	800c652 <__retarget_lock_release_recursive>
 800bf4a:	e7e9      	b.n	800bf20 <_vfiprintf_r+0x4c>
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf50:	2320      	movs	r3, #32
 800bf52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf56:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf5a:	2330      	movs	r3, #48	; 0x30
 800bf5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c120 <_vfiprintf_r+0x24c>
 800bf60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf64:	f04f 0901 	mov.w	r9, #1
 800bf68:	4623      	mov	r3, r4
 800bf6a:	469a      	mov	sl, r3
 800bf6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf70:	b10a      	cbz	r2, 800bf76 <_vfiprintf_r+0xa2>
 800bf72:	2a25      	cmp	r2, #37	; 0x25
 800bf74:	d1f9      	bne.n	800bf6a <_vfiprintf_r+0x96>
 800bf76:	ebba 0b04 	subs.w	fp, sl, r4
 800bf7a:	d00b      	beq.n	800bf94 <_vfiprintf_r+0xc0>
 800bf7c:	465b      	mov	r3, fp
 800bf7e:	4622      	mov	r2, r4
 800bf80:	4629      	mov	r1, r5
 800bf82:	4630      	mov	r0, r6
 800bf84:	f7ff ff94 	bl	800beb0 <__sfputs_r>
 800bf88:	3001      	adds	r0, #1
 800bf8a:	f000 80aa 	beq.w	800c0e2 <_vfiprintf_r+0x20e>
 800bf8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf90:	445a      	add	r2, fp
 800bf92:	9209      	str	r2, [sp, #36]	; 0x24
 800bf94:	f89a 3000 	ldrb.w	r3, [sl]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f000 80a2 	beq.w	800c0e2 <_vfiprintf_r+0x20e>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfa8:	f10a 0a01 	add.w	sl, sl, #1
 800bfac:	9304      	str	r3, [sp, #16]
 800bfae:	9307      	str	r3, [sp, #28]
 800bfb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfb4:	931a      	str	r3, [sp, #104]	; 0x68
 800bfb6:	4654      	mov	r4, sl
 800bfb8:	2205      	movs	r2, #5
 800bfba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfbe:	4858      	ldr	r0, [pc, #352]	; (800c120 <_vfiprintf_r+0x24c>)
 800bfc0:	f7f4 f90e 	bl	80001e0 <memchr>
 800bfc4:	9a04      	ldr	r2, [sp, #16]
 800bfc6:	b9d8      	cbnz	r0, 800c000 <_vfiprintf_r+0x12c>
 800bfc8:	06d1      	lsls	r1, r2, #27
 800bfca:	bf44      	itt	mi
 800bfcc:	2320      	movmi	r3, #32
 800bfce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfd2:	0713      	lsls	r3, r2, #28
 800bfd4:	bf44      	itt	mi
 800bfd6:	232b      	movmi	r3, #43	; 0x2b
 800bfd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfdc:	f89a 3000 	ldrb.w	r3, [sl]
 800bfe0:	2b2a      	cmp	r3, #42	; 0x2a
 800bfe2:	d015      	beq.n	800c010 <_vfiprintf_r+0x13c>
 800bfe4:	9a07      	ldr	r2, [sp, #28]
 800bfe6:	4654      	mov	r4, sl
 800bfe8:	2000      	movs	r0, #0
 800bfea:	f04f 0c0a 	mov.w	ip, #10
 800bfee:	4621      	mov	r1, r4
 800bff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bff4:	3b30      	subs	r3, #48	; 0x30
 800bff6:	2b09      	cmp	r3, #9
 800bff8:	d94e      	bls.n	800c098 <_vfiprintf_r+0x1c4>
 800bffa:	b1b0      	cbz	r0, 800c02a <_vfiprintf_r+0x156>
 800bffc:	9207      	str	r2, [sp, #28]
 800bffe:	e014      	b.n	800c02a <_vfiprintf_r+0x156>
 800c000:	eba0 0308 	sub.w	r3, r0, r8
 800c004:	fa09 f303 	lsl.w	r3, r9, r3
 800c008:	4313      	orrs	r3, r2
 800c00a:	9304      	str	r3, [sp, #16]
 800c00c:	46a2      	mov	sl, r4
 800c00e:	e7d2      	b.n	800bfb6 <_vfiprintf_r+0xe2>
 800c010:	9b03      	ldr	r3, [sp, #12]
 800c012:	1d19      	adds	r1, r3, #4
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	9103      	str	r1, [sp, #12]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	bfbb      	ittet	lt
 800c01c:	425b      	neglt	r3, r3
 800c01e:	f042 0202 	orrlt.w	r2, r2, #2
 800c022:	9307      	strge	r3, [sp, #28]
 800c024:	9307      	strlt	r3, [sp, #28]
 800c026:	bfb8      	it	lt
 800c028:	9204      	strlt	r2, [sp, #16]
 800c02a:	7823      	ldrb	r3, [r4, #0]
 800c02c:	2b2e      	cmp	r3, #46	; 0x2e
 800c02e:	d10c      	bne.n	800c04a <_vfiprintf_r+0x176>
 800c030:	7863      	ldrb	r3, [r4, #1]
 800c032:	2b2a      	cmp	r3, #42	; 0x2a
 800c034:	d135      	bne.n	800c0a2 <_vfiprintf_r+0x1ce>
 800c036:	9b03      	ldr	r3, [sp, #12]
 800c038:	1d1a      	adds	r2, r3, #4
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	9203      	str	r2, [sp, #12]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	bfb8      	it	lt
 800c042:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c046:	3402      	adds	r4, #2
 800c048:	9305      	str	r3, [sp, #20]
 800c04a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c130 <_vfiprintf_r+0x25c>
 800c04e:	7821      	ldrb	r1, [r4, #0]
 800c050:	2203      	movs	r2, #3
 800c052:	4650      	mov	r0, sl
 800c054:	f7f4 f8c4 	bl	80001e0 <memchr>
 800c058:	b140      	cbz	r0, 800c06c <_vfiprintf_r+0x198>
 800c05a:	2340      	movs	r3, #64	; 0x40
 800c05c:	eba0 000a 	sub.w	r0, r0, sl
 800c060:	fa03 f000 	lsl.w	r0, r3, r0
 800c064:	9b04      	ldr	r3, [sp, #16]
 800c066:	4303      	orrs	r3, r0
 800c068:	3401      	adds	r4, #1
 800c06a:	9304      	str	r3, [sp, #16]
 800c06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c070:	482c      	ldr	r0, [pc, #176]	; (800c124 <_vfiprintf_r+0x250>)
 800c072:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c076:	2206      	movs	r2, #6
 800c078:	f7f4 f8b2 	bl	80001e0 <memchr>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	d03f      	beq.n	800c100 <_vfiprintf_r+0x22c>
 800c080:	4b29      	ldr	r3, [pc, #164]	; (800c128 <_vfiprintf_r+0x254>)
 800c082:	bb1b      	cbnz	r3, 800c0cc <_vfiprintf_r+0x1f8>
 800c084:	9b03      	ldr	r3, [sp, #12]
 800c086:	3307      	adds	r3, #7
 800c088:	f023 0307 	bic.w	r3, r3, #7
 800c08c:	3308      	adds	r3, #8
 800c08e:	9303      	str	r3, [sp, #12]
 800c090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c092:	443b      	add	r3, r7
 800c094:	9309      	str	r3, [sp, #36]	; 0x24
 800c096:	e767      	b.n	800bf68 <_vfiprintf_r+0x94>
 800c098:	fb0c 3202 	mla	r2, ip, r2, r3
 800c09c:	460c      	mov	r4, r1
 800c09e:	2001      	movs	r0, #1
 800c0a0:	e7a5      	b.n	800bfee <_vfiprintf_r+0x11a>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	3401      	adds	r4, #1
 800c0a6:	9305      	str	r3, [sp, #20]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	f04f 0c0a 	mov.w	ip, #10
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0b4:	3a30      	subs	r2, #48	; 0x30
 800c0b6:	2a09      	cmp	r2, #9
 800c0b8:	d903      	bls.n	800c0c2 <_vfiprintf_r+0x1ee>
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d0c5      	beq.n	800c04a <_vfiprintf_r+0x176>
 800c0be:	9105      	str	r1, [sp, #20]
 800c0c0:	e7c3      	b.n	800c04a <_vfiprintf_r+0x176>
 800c0c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e7f0      	b.n	800c0ae <_vfiprintf_r+0x1da>
 800c0cc:	ab03      	add	r3, sp, #12
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	462a      	mov	r2, r5
 800c0d2:	4b16      	ldr	r3, [pc, #88]	; (800c12c <_vfiprintf_r+0x258>)
 800c0d4:	a904      	add	r1, sp, #16
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	f7fd fdd6 	bl	8009c88 <_printf_float>
 800c0dc:	4607      	mov	r7, r0
 800c0de:	1c78      	adds	r0, r7, #1
 800c0e0:	d1d6      	bne.n	800c090 <_vfiprintf_r+0x1bc>
 800c0e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0e4:	07d9      	lsls	r1, r3, #31
 800c0e6:	d405      	bmi.n	800c0f4 <_vfiprintf_r+0x220>
 800c0e8:	89ab      	ldrh	r3, [r5, #12]
 800c0ea:	059a      	lsls	r2, r3, #22
 800c0ec:	d402      	bmi.n	800c0f4 <_vfiprintf_r+0x220>
 800c0ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0f0:	f000 faaf 	bl	800c652 <__retarget_lock_release_recursive>
 800c0f4:	89ab      	ldrh	r3, [r5, #12]
 800c0f6:	065b      	lsls	r3, r3, #25
 800c0f8:	f53f af12 	bmi.w	800bf20 <_vfiprintf_r+0x4c>
 800c0fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0fe:	e711      	b.n	800bf24 <_vfiprintf_r+0x50>
 800c100:	ab03      	add	r3, sp, #12
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	462a      	mov	r2, r5
 800c106:	4b09      	ldr	r3, [pc, #36]	; (800c12c <_vfiprintf_r+0x258>)
 800c108:	a904      	add	r1, sp, #16
 800c10a:	4630      	mov	r0, r6
 800c10c:	f7fe f860 	bl	800a1d0 <_printf_i>
 800c110:	e7e4      	b.n	800c0dc <_vfiprintf_r+0x208>
 800c112:	bf00      	nop
 800c114:	0800cee4 	.word	0x0800cee4
 800c118:	0800cf04 	.word	0x0800cf04
 800c11c:	0800cec4 	.word	0x0800cec4
 800c120:	0800cd6c 	.word	0x0800cd6c
 800c124:	0800cd76 	.word	0x0800cd76
 800c128:	08009c89 	.word	0x08009c89
 800c12c:	0800beb1 	.word	0x0800beb1
 800c130:	0800cd72 	.word	0x0800cd72

0800c134 <__swbuf_r>:
 800c134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c136:	460e      	mov	r6, r1
 800c138:	4614      	mov	r4, r2
 800c13a:	4605      	mov	r5, r0
 800c13c:	b118      	cbz	r0, 800c146 <__swbuf_r+0x12>
 800c13e:	6983      	ldr	r3, [r0, #24]
 800c140:	b90b      	cbnz	r3, 800c146 <__swbuf_r+0x12>
 800c142:	f000 f9e7 	bl	800c514 <__sinit>
 800c146:	4b21      	ldr	r3, [pc, #132]	; (800c1cc <__swbuf_r+0x98>)
 800c148:	429c      	cmp	r4, r3
 800c14a:	d12b      	bne.n	800c1a4 <__swbuf_r+0x70>
 800c14c:	686c      	ldr	r4, [r5, #4]
 800c14e:	69a3      	ldr	r3, [r4, #24]
 800c150:	60a3      	str	r3, [r4, #8]
 800c152:	89a3      	ldrh	r3, [r4, #12]
 800c154:	071a      	lsls	r2, r3, #28
 800c156:	d52f      	bpl.n	800c1b8 <__swbuf_r+0x84>
 800c158:	6923      	ldr	r3, [r4, #16]
 800c15a:	b36b      	cbz	r3, 800c1b8 <__swbuf_r+0x84>
 800c15c:	6923      	ldr	r3, [r4, #16]
 800c15e:	6820      	ldr	r0, [r4, #0]
 800c160:	1ac0      	subs	r0, r0, r3
 800c162:	6963      	ldr	r3, [r4, #20]
 800c164:	b2f6      	uxtb	r6, r6
 800c166:	4283      	cmp	r3, r0
 800c168:	4637      	mov	r7, r6
 800c16a:	dc04      	bgt.n	800c176 <__swbuf_r+0x42>
 800c16c:	4621      	mov	r1, r4
 800c16e:	4628      	mov	r0, r5
 800c170:	f000 f93c 	bl	800c3ec <_fflush_r>
 800c174:	bb30      	cbnz	r0, 800c1c4 <__swbuf_r+0x90>
 800c176:	68a3      	ldr	r3, [r4, #8]
 800c178:	3b01      	subs	r3, #1
 800c17a:	60a3      	str	r3, [r4, #8]
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	1c5a      	adds	r2, r3, #1
 800c180:	6022      	str	r2, [r4, #0]
 800c182:	701e      	strb	r6, [r3, #0]
 800c184:	6963      	ldr	r3, [r4, #20]
 800c186:	3001      	adds	r0, #1
 800c188:	4283      	cmp	r3, r0
 800c18a:	d004      	beq.n	800c196 <__swbuf_r+0x62>
 800c18c:	89a3      	ldrh	r3, [r4, #12]
 800c18e:	07db      	lsls	r3, r3, #31
 800c190:	d506      	bpl.n	800c1a0 <__swbuf_r+0x6c>
 800c192:	2e0a      	cmp	r6, #10
 800c194:	d104      	bne.n	800c1a0 <__swbuf_r+0x6c>
 800c196:	4621      	mov	r1, r4
 800c198:	4628      	mov	r0, r5
 800c19a:	f000 f927 	bl	800c3ec <_fflush_r>
 800c19e:	b988      	cbnz	r0, 800c1c4 <__swbuf_r+0x90>
 800c1a0:	4638      	mov	r0, r7
 800c1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1a4:	4b0a      	ldr	r3, [pc, #40]	; (800c1d0 <__swbuf_r+0x9c>)
 800c1a6:	429c      	cmp	r4, r3
 800c1a8:	d101      	bne.n	800c1ae <__swbuf_r+0x7a>
 800c1aa:	68ac      	ldr	r4, [r5, #8]
 800c1ac:	e7cf      	b.n	800c14e <__swbuf_r+0x1a>
 800c1ae:	4b09      	ldr	r3, [pc, #36]	; (800c1d4 <__swbuf_r+0xa0>)
 800c1b0:	429c      	cmp	r4, r3
 800c1b2:	bf08      	it	eq
 800c1b4:	68ec      	ldreq	r4, [r5, #12]
 800c1b6:	e7ca      	b.n	800c14e <__swbuf_r+0x1a>
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f000 f81a 	bl	800c1f4 <__swsetup_r>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d0cb      	beq.n	800c15c <__swbuf_r+0x28>
 800c1c4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c1c8:	e7ea      	b.n	800c1a0 <__swbuf_r+0x6c>
 800c1ca:	bf00      	nop
 800c1cc:	0800cee4 	.word	0x0800cee4
 800c1d0:	0800cf04 	.word	0x0800cf04
 800c1d4:	0800cec4 	.word	0x0800cec4

0800c1d8 <__ascii_wctomb>:
 800c1d8:	b149      	cbz	r1, 800c1ee <__ascii_wctomb+0x16>
 800c1da:	2aff      	cmp	r2, #255	; 0xff
 800c1dc:	bf85      	ittet	hi
 800c1de:	238a      	movhi	r3, #138	; 0x8a
 800c1e0:	6003      	strhi	r3, [r0, #0]
 800c1e2:	700a      	strbls	r2, [r1, #0]
 800c1e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c1e8:	bf98      	it	ls
 800c1ea:	2001      	movls	r0, #1
 800c1ec:	4770      	bx	lr
 800c1ee:	4608      	mov	r0, r1
 800c1f0:	4770      	bx	lr
	...

0800c1f4 <__swsetup_r>:
 800c1f4:	4b32      	ldr	r3, [pc, #200]	; (800c2c0 <__swsetup_r+0xcc>)
 800c1f6:	b570      	push	{r4, r5, r6, lr}
 800c1f8:	681d      	ldr	r5, [r3, #0]
 800c1fa:	4606      	mov	r6, r0
 800c1fc:	460c      	mov	r4, r1
 800c1fe:	b125      	cbz	r5, 800c20a <__swsetup_r+0x16>
 800c200:	69ab      	ldr	r3, [r5, #24]
 800c202:	b913      	cbnz	r3, 800c20a <__swsetup_r+0x16>
 800c204:	4628      	mov	r0, r5
 800c206:	f000 f985 	bl	800c514 <__sinit>
 800c20a:	4b2e      	ldr	r3, [pc, #184]	; (800c2c4 <__swsetup_r+0xd0>)
 800c20c:	429c      	cmp	r4, r3
 800c20e:	d10f      	bne.n	800c230 <__swsetup_r+0x3c>
 800c210:	686c      	ldr	r4, [r5, #4]
 800c212:	89a3      	ldrh	r3, [r4, #12]
 800c214:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c218:	0719      	lsls	r1, r3, #28
 800c21a:	d42c      	bmi.n	800c276 <__swsetup_r+0x82>
 800c21c:	06dd      	lsls	r5, r3, #27
 800c21e:	d411      	bmi.n	800c244 <__swsetup_r+0x50>
 800c220:	2309      	movs	r3, #9
 800c222:	6033      	str	r3, [r6, #0]
 800c224:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c228:	81a3      	strh	r3, [r4, #12]
 800c22a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c22e:	e03e      	b.n	800c2ae <__swsetup_r+0xba>
 800c230:	4b25      	ldr	r3, [pc, #148]	; (800c2c8 <__swsetup_r+0xd4>)
 800c232:	429c      	cmp	r4, r3
 800c234:	d101      	bne.n	800c23a <__swsetup_r+0x46>
 800c236:	68ac      	ldr	r4, [r5, #8]
 800c238:	e7eb      	b.n	800c212 <__swsetup_r+0x1e>
 800c23a:	4b24      	ldr	r3, [pc, #144]	; (800c2cc <__swsetup_r+0xd8>)
 800c23c:	429c      	cmp	r4, r3
 800c23e:	bf08      	it	eq
 800c240:	68ec      	ldreq	r4, [r5, #12]
 800c242:	e7e6      	b.n	800c212 <__swsetup_r+0x1e>
 800c244:	0758      	lsls	r0, r3, #29
 800c246:	d512      	bpl.n	800c26e <__swsetup_r+0x7a>
 800c248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c24a:	b141      	cbz	r1, 800c25e <__swsetup_r+0x6a>
 800c24c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c250:	4299      	cmp	r1, r3
 800c252:	d002      	beq.n	800c25a <__swsetup_r+0x66>
 800c254:	4630      	mov	r0, r6
 800c256:	f7ff fb31 	bl	800b8bc <_free_r>
 800c25a:	2300      	movs	r3, #0
 800c25c:	6363      	str	r3, [r4, #52]	; 0x34
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c264:	81a3      	strh	r3, [r4, #12]
 800c266:	2300      	movs	r3, #0
 800c268:	6063      	str	r3, [r4, #4]
 800c26a:	6923      	ldr	r3, [r4, #16]
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	89a3      	ldrh	r3, [r4, #12]
 800c270:	f043 0308 	orr.w	r3, r3, #8
 800c274:	81a3      	strh	r3, [r4, #12]
 800c276:	6923      	ldr	r3, [r4, #16]
 800c278:	b94b      	cbnz	r3, 800c28e <__swsetup_r+0x9a>
 800c27a:	89a3      	ldrh	r3, [r4, #12]
 800c27c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c284:	d003      	beq.n	800c28e <__swsetup_r+0x9a>
 800c286:	4621      	mov	r1, r4
 800c288:	4630      	mov	r0, r6
 800c28a:	f000 fa09 	bl	800c6a0 <__smakebuf_r>
 800c28e:	89a0      	ldrh	r0, [r4, #12]
 800c290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c294:	f010 0301 	ands.w	r3, r0, #1
 800c298:	d00a      	beq.n	800c2b0 <__swsetup_r+0xbc>
 800c29a:	2300      	movs	r3, #0
 800c29c:	60a3      	str	r3, [r4, #8]
 800c29e:	6963      	ldr	r3, [r4, #20]
 800c2a0:	425b      	negs	r3, r3
 800c2a2:	61a3      	str	r3, [r4, #24]
 800c2a4:	6923      	ldr	r3, [r4, #16]
 800c2a6:	b943      	cbnz	r3, 800c2ba <__swsetup_r+0xc6>
 800c2a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c2ac:	d1ba      	bne.n	800c224 <__swsetup_r+0x30>
 800c2ae:	bd70      	pop	{r4, r5, r6, pc}
 800c2b0:	0781      	lsls	r1, r0, #30
 800c2b2:	bf58      	it	pl
 800c2b4:	6963      	ldrpl	r3, [r4, #20]
 800c2b6:	60a3      	str	r3, [r4, #8]
 800c2b8:	e7f4      	b.n	800c2a4 <__swsetup_r+0xb0>
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	e7f7      	b.n	800c2ae <__swsetup_r+0xba>
 800c2be:	bf00      	nop
 800c2c0:	2000000c 	.word	0x2000000c
 800c2c4:	0800cee4 	.word	0x0800cee4
 800c2c8:	0800cf04 	.word	0x0800cf04
 800c2cc:	0800cec4 	.word	0x0800cec4

0800c2d0 <abort>:
 800c2d0:	b508      	push	{r3, lr}
 800c2d2:	2006      	movs	r0, #6
 800c2d4:	f000 fa54 	bl	800c780 <raise>
 800c2d8:	2001      	movs	r0, #1
 800c2da:	f7f6 ff3b 	bl	8003154 <_exit>
	...

0800c2e0 <__sflush_r>:
 800c2e0:	898a      	ldrh	r2, [r1, #12]
 800c2e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	0710      	lsls	r0, r2, #28
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	d458      	bmi.n	800c3a0 <__sflush_r+0xc0>
 800c2ee:	684b      	ldr	r3, [r1, #4]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	dc05      	bgt.n	800c300 <__sflush_r+0x20>
 800c2f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	dc02      	bgt.n	800c300 <__sflush_r+0x20>
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c302:	2e00      	cmp	r6, #0
 800c304:	d0f9      	beq.n	800c2fa <__sflush_r+0x1a>
 800c306:	2300      	movs	r3, #0
 800c308:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c30c:	682f      	ldr	r7, [r5, #0]
 800c30e:	602b      	str	r3, [r5, #0]
 800c310:	d032      	beq.n	800c378 <__sflush_r+0x98>
 800c312:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c314:	89a3      	ldrh	r3, [r4, #12]
 800c316:	075a      	lsls	r2, r3, #29
 800c318:	d505      	bpl.n	800c326 <__sflush_r+0x46>
 800c31a:	6863      	ldr	r3, [r4, #4]
 800c31c:	1ac0      	subs	r0, r0, r3
 800c31e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c320:	b10b      	cbz	r3, 800c326 <__sflush_r+0x46>
 800c322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c324:	1ac0      	subs	r0, r0, r3
 800c326:	2300      	movs	r3, #0
 800c328:	4602      	mov	r2, r0
 800c32a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c32c:	6a21      	ldr	r1, [r4, #32]
 800c32e:	4628      	mov	r0, r5
 800c330:	47b0      	blx	r6
 800c332:	1c43      	adds	r3, r0, #1
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	d106      	bne.n	800c346 <__sflush_r+0x66>
 800c338:	6829      	ldr	r1, [r5, #0]
 800c33a:	291d      	cmp	r1, #29
 800c33c:	d82c      	bhi.n	800c398 <__sflush_r+0xb8>
 800c33e:	4a2a      	ldr	r2, [pc, #168]	; (800c3e8 <__sflush_r+0x108>)
 800c340:	40ca      	lsrs	r2, r1
 800c342:	07d6      	lsls	r6, r2, #31
 800c344:	d528      	bpl.n	800c398 <__sflush_r+0xb8>
 800c346:	2200      	movs	r2, #0
 800c348:	6062      	str	r2, [r4, #4]
 800c34a:	04d9      	lsls	r1, r3, #19
 800c34c:	6922      	ldr	r2, [r4, #16]
 800c34e:	6022      	str	r2, [r4, #0]
 800c350:	d504      	bpl.n	800c35c <__sflush_r+0x7c>
 800c352:	1c42      	adds	r2, r0, #1
 800c354:	d101      	bne.n	800c35a <__sflush_r+0x7a>
 800c356:	682b      	ldr	r3, [r5, #0]
 800c358:	b903      	cbnz	r3, 800c35c <__sflush_r+0x7c>
 800c35a:	6560      	str	r0, [r4, #84]	; 0x54
 800c35c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c35e:	602f      	str	r7, [r5, #0]
 800c360:	2900      	cmp	r1, #0
 800c362:	d0ca      	beq.n	800c2fa <__sflush_r+0x1a>
 800c364:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c368:	4299      	cmp	r1, r3
 800c36a:	d002      	beq.n	800c372 <__sflush_r+0x92>
 800c36c:	4628      	mov	r0, r5
 800c36e:	f7ff faa5 	bl	800b8bc <_free_r>
 800c372:	2000      	movs	r0, #0
 800c374:	6360      	str	r0, [r4, #52]	; 0x34
 800c376:	e7c1      	b.n	800c2fc <__sflush_r+0x1c>
 800c378:	6a21      	ldr	r1, [r4, #32]
 800c37a:	2301      	movs	r3, #1
 800c37c:	4628      	mov	r0, r5
 800c37e:	47b0      	blx	r6
 800c380:	1c41      	adds	r1, r0, #1
 800c382:	d1c7      	bne.n	800c314 <__sflush_r+0x34>
 800c384:	682b      	ldr	r3, [r5, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d0c4      	beq.n	800c314 <__sflush_r+0x34>
 800c38a:	2b1d      	cmp	r3, #29
 800c38c:	d001      	beq.n	800c392 <__sflush_r+0xb2>
 800c38e:	2b16      	cmp	r3, #22
 800c390:	d101      	bne.n	800c396 <__sflush_r+0xb6>
 800c392:	602f      	str	r7, [r5, #0]
 800c394:	e7b1      	b.n	800c2fa <__sflush_r+0x1a>
 800c396:	89a3      	ldrh	r3, [r4, #12]
 800c398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c39c:	81a3      	strh	r3, [r4, #12]
 800c39e:	e7ad      	b.n	800c2fc <__sflush_r+0x1c>
 800c3a0:	690f      	ldr	r7, [r1, #16]
 800c3a2:	2f00      	cmp	r7, #0
 800c3a4:	d0a9      	beq.n	800c2fa <__sflush_r+0x1a>
 800c3a6:	0793      	lsls	r3, r2, #30
 800c3a8:	680e      	ldr	r6, [r1, #0]
 800c3aa:	bf08      	it	eq
 800c3ac:	694b      	ldreq	r3, [r1, #20]
 800c3ae:	600f      	str	r7, [r1, #0]
 800c3b0:	bf18      	it	ne
 800c3b2:	2300      	movne	r3, #0
 800c3b4:	eba6 0807 	sub.w	r8, r6, r7
 800c3b8:	608b      	str	r3, [r1, #8]
 800c3ba:	f1b8 0f00 	cmp.w	r8, #0
 800c3be:	dd9c      	ble.n	800c2fa <__sflush_r+0x1a>
 800c3c0:	6a21      	ldr	r1, [r4, #32]
 800c3c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3c4:	4643      	mov	r3, r8
 800c3c6:	463a      	mov	r2, r7
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	47b0      	blx	r6
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	dc06      	bgt.n	800c3de <__sflush_r+0xfe>
 800c3d0:	89a3      	ldrh	r3, [r4, #12]
 800c3d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3d6:	81a3      	strh	r3, [r4, #12]
 800c3d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3dc:	e78e      	b.n	800c2fc <__sflush_r+0x1c>
 800c3de:	4407      	add	r7, r0
 800c3e0:	eba8 0800 	sub.w	r8, r8, r0
 800c3e4:	e7e9      	b.n	800c3ba <__sflush_r+0xda>
 800c3e6:	bf00      	nop
 800c3e8:	20400001 	.word	0x20400001

0800c3ec <_fflush_r>:
 800c3ec:	b538      	push	{r3, r4, r5, lr}
 800c3ee:	690b      	ldr	r3, [r1, #16]
 800c3f0:	4605      	mov	r5, r0
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	b913      	cbnz	r3, 800c3fc <_fflush_r+0x10>
 800c3f6:	2500      	movs	r5, #0
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	bd38      	pop	{r3, r4, r5, pc}
 800c3fc:	b118      	cbz	r0, 800c406 <_fflush_r+0x1a>
 800c3fe:	6983      	ldr	r3, [r0, #24]
 800c400:	b90b      	cbnz	r3, 800c406 <_fflush_r+0x1a>
 800c402:	f000 f887 	bl	800c514 <__sinit>
 800c406:	4b14      	ldr	r3, [pc, #80]	; (800c458 <_fflush_r+0x6c>)
 800c408:	429c      	cmp	r4, r3
 800c40a:	d11b      	bne.n	800c444 <_fflush_r+0x58>
 800c40c:	686c      	ldr	r4, [r5, #4]
 800c40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d0ef      	beq.n	800c3f6 <_fflush_r+0xa>
 800c416:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c418:	07d0      	lsls	r0, r2, #31
 800c41a:	d404      	bmi.n	800c426 <_fflush_r+0x3a>
 800c41c:	0599      	lsls	r1, r3, #22
 800c41e:	d402      	bmi.n	800c426 <_fflush_r+0x3a>
 800c420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c422:	f000 f915 	bl	800c650 <__retarget_lock_acquire_recursive>
 800c426:	4628      	mov	r0, r5
 800c428:	4621      	mov	r1, r4
 800c42a:	f7ff ff59 	bl	800c2e0 <__sflush_r>
 800c42e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c430:	07da      	lsls	r2, r3, #31
 800c432:	4605      	mov	r5, r0
 800c434:	d4e0      	bmi.n	800c3f8 <_fflush_r+0xc>
 800c436:	89a3      	ldrh	r3, [r4, #12]
 800c438:	059b      	lsls	r3, r3, #22
 800c43a:	d4dd      	bmi.n	800c3f8 <_fflush_r+0xc>
 800c43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c43e:	f000 f908 	bl	800c652 <__retarget_lock_release_recursive>
 800c442:	e7d9      	b.n	800c3f8 <_fflush_r+0xc>
 800c444:	4b05      	ldr	r3, [pc, #20]	; (800c45c <_fflush_r+0x70>)
 800c446:	429c      	cmp	r4, r3
 800c448:	d101      	bne.n	800c44e <_fflush_r+0x62>
 800c44a:	68ac      	ldr	r4, [r5, #8]
 800c44c:	e7df      	b.n	800c40e <_fflush_r+0x22>
 800c44e:	4b04      	ldr	r3, [pc, #16]	; (800c460 <_fflush_r+0x74>)
 800c450:	429c      	cmp	r4, r3
 800c452:	bf08      	it	eq
 800c454:	68ec      	ldreq	r4, [r5, #12]
 800c456:	e7da      	b.n	800c40e <_fflush_r+0x22>
 800c458:	0800cee4 	.word	0x0800cee4
 800c45c:	0800cf04 	.word	0x0800cf04
 800c460:	0800cec4 	.word	0x0800cec4

0800c464 <std>:
 800c464:	2300      	movs	r3, #0
 800c466:	b510      	push	{r4, lr}
 800c468:	4604      	mov	r4, r0
 800c46a:	e9c0 3300 	strd	r3, r3, [r0]
 800c46e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c472:	6083      	str	r3, [r0, #8]
 800c474:	8181      	strh	r1, [r0, #12]
 800c476:	6643      	str	r3, [r0, #100]	; 0x64
 800c478:	81c2      	strh	r2, [r0, #14]
 800c47a:	6183      	str	r3, [r0, #24]
 800c47c:	4619      	mov	r1, r3
 800c47e:	2208      	movs	r2, #8
 800c480:	305c      	adds	r0, #92	; 0x5c
 800c482:	f7fd fb59 	bl	8009b38 <memset>
 800c486:	4b05      	ldr	r3, [pc, #20]	; (800c49c <std+0x38>)
 800c488:	6263      	str	r3, [r4, #36]	; 0x24
 800c48a:	4b05      	ldr	r3, [pc, #20]	; (800c4a0 <std+0x3c>)
 800c48c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c48e:	4b05      	ldr	r3, [pc, #20]	; (800c4a4 <std+0x40>)
 800c490:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c492:	4b05      	ldr	r3, [pc, #20]	; (800c4a8 <std+0x44>)
 800c494:	6224      	str	r4, [r4, #32]
 800c496:	6323      	str	r3, [r4, #48]	; 0x30
 800c498:	bd10      	pop	{r4, pc}
 800c49a:	bf00      	nop
 800c49c:	0800c7b9 	.word	0x0800c7b9
 800c4a0:	0800c7db 	.word	0x0800c7db
 800c4a4:	0800c813 	.word	0x0800c813
 800c4a8:	0800c837 	.word	0x0800c837

0800c4ac <_cleanup_r>:
 800c4ac:	4901      	ldr	r1, [pc, #4]	; (800c4b4 <_cleanup_r+0x8>)
 800c4ae:	f000 b8af 	b.w	800c610 <_fwalk_reent>
 800c4b2:	bf00      	nop
 800c4b4:	0800c3ed 	.word	0x0800c3ed

0800c4b8 <__sfmoreglue>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	2268      	movs	r2, #104	; 0x68
 800c4bc:	1e4d      	subs	r5, r1, #1
 800c4be:	4355      	muls	r5, r2
 800c4c0:	460e      	mov	r6, r1
 800c4c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4c6:	f7ff fa65 	bl	800b994 <_malloc_r>
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	b140      	cbz	r0, 800c4e0 <__sfmoreglue+0x28>
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	e9c0 1600 	strd	r1, r6, [r0]
 800c4d4:	300c      	adds	r0, #12
 800c4d6:	60a0      	str	r0, [r4, #8]
 800c4d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4dc:	f7fd fb2c 	bl	8009b38 <memset>
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	bd70      	pop	{r4, r5, r6, pc}

0800c4e4 <__sfp_lock_acquire>:
 800c4e4:	4801      	ldr	r0, [pc, #4]	; (800c4ec <__sfp_lock_acquire+0x8>)
 800c4e6:	f000 b8b3 	b.w	800c650 <__retarget_lock_acquire_recursive>
 800c4ea:	bf00      	nop
 800c4ec:	20005b11 	.word	0x20005b11

0800c4f0 <__sfp_lock_release>:
 800c4f0:	4801      	ldr	r0, [pc, #4]	; (800c4f8 <__sfp_lock_release+0x8>)
 800c4f2:	f000 b8ae 	b.w	800c652 <__retarget_lock_release_recursive>
 800c4f6:	bf00      	nop
 800c4f8:	20005b11 	.word	0x20005b11

0800c4fc <__sinit_lock_acquire>:
 800c4fc:	4801      	ldr	r0, [pc, #4]	; (800c504 <__sinit_lock_acquire+0x8>)
 800c4fe:	f000 b8a7 	b.w	800c650 <__retarget_lock_acquire_recursive>
 800c502:	bf00      	nop
 800c504:	20005b12 	.word	0x20005b12

0800c508 <__sinit_lock_release>:
 800c508:	4801      	ldr	r0, [pc, #4]	; (800c510 <__sinit_lock_release+0x8>)
 800c50a:	f000 b8a2 	b.w	800c652 <__retarget_lock_release_recursive>
 800c50e:	bf00      	nop
 800c510:	20005b12 	.word	0x20005b12

0800c514 <__sinit>:
 800c514:	b510      	push	{r4, lr}
 800c516:	4604      	mov	r4, r0
 800c518:	f7ff fff0 	bl	800c4fc <__sinit_lock_acquire>
 800c51c:	69a3      	ldr	r3, [r4, #24]
 800c51e:	b11b      	cbz	r3, 800c528 <__sinit+0x14>
 800c520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c524:	f7ff bff0 	b.w	800c508 <__sinit_lock_release>
 800c528:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c52c:	6523      	str	r3, [r4, #80]	; 0x50
 800c52e:	4b13      	ldr	r3, [pc, #76]	; (800c57c <__sinit+0x68>)
 800c530:	4a13      	ldr	r2, [pc, #76]	; (800c580 <__sinit+0x6c>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	62a2      	str	r2, [r4, #40]	; 0x28
 800c536:	42a3      	cmp	r3, r4
 800c538:	bf04      	itt	eq
 800c53a:	2301      	moveq	r3, #1
 800c53c:	61a3      	streq	r3, [r4, #24]
 800c53e:	4620      	mov	r0, r4
 800c540:	f000 f820 	bl	800c584 <__sfp>
 800c544:	6060      	str	r0, [r4, #4]
 800c546:	4620      	mov	r0, r4
 800c548:	f000 f81c 	bl	800c584 <__sfp>
 800c54c:	60a0      	str	r0, [r4, #8]
 800c54e:	4620      	mov	r0, r4
 800c550:	f000 f818 	bl	800c584 <__sfp>
 800c554:	2200      	movs	r2, #0
 800c556:	60e0      	str	r0, [r4, #12]
 800c558:	2104      	movs	r1, #4
 800c55a:	6860      	ldr	r0, [r4, #4]
 800c55c:	f7ff ff82 	bl	800c464 <std>
 800c560:	68a0      	ldr	r0, [r4, #8]
 800c562:	2201      	movs	r2, #1
 800c564:	2109      	movs	r1, #9
 800c566:	f7ff ff7d 	bl	800c464 <std>
 800c56a:	68e0      	ldr	r0, [r4, #12]
 800c56c:	2202      	movs	r2, #2
 800c56e:	2112      	movs	r1, #18
 800c570:	f7ff ff78 	bl	800c464 <std>
 800c574:	2301      	movs	r3, #1
 800c576:	61a3      	str	r3, [r4, #24]
 800c578:	e7d2      	b.n	800c520 <__sinit+0xc>
 800c57a:	bf00      	nop
 800c57c:	0800cb4c 	.word	0x0800cb4c
 800c580:	0800c4ad 	.word	0x0800c4ad

0800c584 <__sfp>:
 800c584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c586:	4607      	mov	r7, r0
 800c588:	f7ff ffac 	bl	800c4e4 <__sfp_lock_acquire>
 800c58c:	4b1e      	ldr	r3, [pc, #120]	; (800c608 <__sfp+0x84>)
 800c58e:	681e      	ldr	r6, [r3, #0]
 800c590:	69b3      	ldr	r3, [r6, #24]
 800c592:	b913      	cbnz	r3, 800c59a <__sfp+0x16>
 800c594:	4630      	mov	r0, r6
 800c596:	f7ff ffbd 	bl	800c514 <__sinit>
 800c59a:	3648      	adds	r6, #72	; 0x48
 800c59c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	d503      	bpl.n	800c5ac <__sfp+0x28>
 800c5a4:	6833      	ldr	r3, [r6, #0]
 800c5a6:	b30b      	cbz	r3, 800c5ec <__sfp+0x68>
 800c5a8:	6836      	ldr	r6, [r6, #0]
 800c5aa:	e7f7      	b.n	800c59c <__sfp+0x18>
 800c5ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5b0:	b9d5      	cbnz	r5, 800c5e8 <__sfp+0x64>
 800c5b2:	4b16      	ldr	r3, [pc, #88]	; (800c60c <__sfp+0x88>)
 800c5b4:	60e3      	str	r3, [r4, #12]
 800c5b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5ba:	6665      	str	r5, [r4, #100]	; 0x64
 800c5bc:	f000 f847 	bl	800c64e <__retarget_lock_init_recursive>
 800c5c0:	f7ff ff96 	bl	800c4f0 <__sfp_lock_release>
 800c5c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c5c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c5cc:	6025      	str	r5, [r4, #0]
 800c5ce:	61a5      	str	r5, [r4, #24]
 800c5d0:	2208      	movs	r2, #8
 800c5d2:	4629      	mov	r1, r5
 800c5d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5d8:	f7fd faae 	bl	8009b38 <memset>
 800c5dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5e8:	3468      	adds	r4, #104	; 0x68
 800c5ea:	e7d9      	b.n	800c5a0 <__sfp+0x1c>
 800c5ec:	2104      	movs	r1, #4
 800c5ee:	4638      	mov	r0, r7
 800c5f0:	f7ff ff62 	bl	800c4b8 <__sfmoreglue>
 800c5f4:	4604      	mov	r4, r0
 800c5f6:	6030      	str	r0, [r6, #0]
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	d1d5      	bne.n	800c5a8 <__sfp+0x24>
 800c5fc:	f7ff ff78 	bl	800c4f0 <__sfp_lock_release>
 800c600:	230c      	movs	r3, #12
 800c602:	603b      	str	r3, [r7, #0]
 800c604:	e7ee      	b.n	800c5e4 <__sfp+0x60>
 800c606:	bf00      	nop
 800c608:	0800cb4c 	.word	0x0800cb4c
 800c60c:	ffff0001 	.word	0xffff0001

0800c610 <_fwalk_reent>:
 800c610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c614:	4606      	mov	r6, r0
 800c616:	4688      	mov	r8, r1
 800c618:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c61c:	2700      	movs	r7, #0
 800c61e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c622:	f1b9 0901 	subs.w	r9, r9, #1
 800c626:	d505      	bpl.n	800c634 <_fwalk_reent+0x24>
 800c628:	6824      	ldr	r4, [r4, #0]
 800c62a:	2c00      	cmp	r4, #0
 800c62c:	d1f7      	bne.n	800c61e <_fwalk_reent+0xe>
 800c62e:	4638      	mov	r0, r7
 800c630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c634:	89ab      	ldrh	r3, [r5, #12]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d907      	bls.n	800c64a <_fwalk_reent+0x3a>
 800c63a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c63e:	3301      	adds	r3, #1
 800c640:	d003      	beq.n	800c64a <_fwalk_reent+0x3a>
 800c642:	4629      	mov	r1, r5
 800c644:	4630      	mov	r0, r6
 800c646:	47c0      	blx	r8
 800c648:	4307      	orrs	r7, r0
 800c64a:	3568      	adds	r5, #104	; 0x68
 800c64c:	e7e9      	b.n	800c622 <_fwalk_reent+0x12>

0800c64e <__retarget_lock_init_recursive>:
 800c64e:	4770      	bx	lr

0800c650 <__retarget_lock_acquire_recursive>:
 800c650:	4770      	bx	lr

0800c652 <__retarget_lock_release_recursive>:
 800c652:	4770      	bx	lr

0800c654 <__swhatbuf_r>:
 800c654:	b570      	push	{r4, r5, r6, lr}
 800c656:	460e      	mov	r6, r1
 800c658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c65c:	2900      	cmp	r1, #0
 800c65e:	b096      	sub	sp, #88	; 0x58
 800c660:	4614      	mov	r4, r2
 800c662:	461d      	mov	r5, r3
 800c664:	da08      	bge.n	800c678 <__swhatbuf_r+0x24>
 800c666:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c66a:	2200      	movs	r2, #0
 800c66c:	602a      	str	r2, [r5, #0]
 800c66e:	061a      	lsls	r2, r3, #24
 800c670:	d410      	bmi.n	800c694 <__swhatbuf_r+0x40>
 800c672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c676:	e00e      	b.n	800c696 <__swhatbuf_r+0x42>
 800c678:	466a      	mov	r2, sp
 800c67a:	f000 f903 	bl	800c884 <_fstat_r>
 800c67e:	2800      	cmp	r0, #0
 800c680:	dbf1      	blt.n	800c666 <__swhatbuf_r+0x12>
 800c682:	9a01      	ldr	r2, [sp, #4]
 800c684:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c688:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c68c:	425a      	negs	r2, r3
 800c68e:	415a      	adcs	r2, r3
 800c690:	602a      	str	r2, [r5, #0]
 800c692:	e7ee      	b.n	800c672 <__swhatbuf_r+0x1e>
 800c694:	2340      	movs	r3, #64	; 0x40
 800c696:	2000      	movs	r0, #0
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	b016      	add	sp, #88	; 0x58
 800c69c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6a0 <__smakebuf_r>:
 800c6a0:	898b      	ldrh	r3, [r1, #12]
 800c6a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6a4:	079d      	lsls	r5, r3, #30
 800c6a6:	4606      	mov	r6, r0
 800c6a8:	460c      	mov	r4, r1
 800c6aa:	d507      	bpl.n	800c6bc <__smakebuf_r+0x1c>
 800c6ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6b0:	6023      	str	r3, [r4, #0]
 800c6b2:	6123      	str	r3, [r4, #16]
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	6163      	str	r3, [r4, #20]
 800c6b8:	b002      	add	sp, #8
 800c6ba:	bd70      	pop	{r4, r5, r6, pc}
 800c6bc:	ab01      	add	r3, sp, #4
 800c6be:	466a      	mov	r2, sp
 800c6c0:	f7ff ffc8 	bl	800c654 <__swhatbuf_r>
 800c6c4:	9900      	ldr	r1, [sp, #0]
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	4630      	mov	r0, r6
 800c6ca:	f7ff f963 	bl	800b994 <_malloc_r>
 800c6ce:	b948      	cbnz	r0, 800c6e4 <__smakebuf_r+0x44>
 800c6d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6d4:	059a      	lsls	r2, r3, #22
 800c6d6:	d4ef      	bmi.n	800c6b8 <__smakebuf_r+0x18>
 800c6d8:	f023 0303 	bic.w	r3, r3, #3
 800c6dc:	f043 0302 	orr.w	r3, r3, #2
 800c6e0:	81a3      	strh	r3, [r4, #12]
 800c6e2:	e7e3      	b.n	800c6ac <__smakebuf_r+0xc>
 800c6e4:	4b0d      	ldr	r3, [pc, #52]	; (800c71c <__smakebuf_r+0x7c>)
 800c6e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c6e8:	89a3      	ldrh	r3, [r4, #12]
 800c6ea:	6020      	str	r0, [r4, #0]
 800c6ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6f0:	81a3      	strh	r3, [r4, #12]
 800c6f2:	9b00      	ldr	r3, [sp, #0]
 800c6f4:	6163      	str	r3, [r4, #20]
 800c6f6:	9b01      	ldr	r3, [sp, #4]
 800c6f8:	6120      	str	r0, [r4, #16]
 800c6fa:	b15b      	cbz	r3, 800c714 <__smakebuf_r+0x74>
 800c6fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c700:	4630      	mov	r0, r6
 800c702:	f000 f8d1 	bl	800c8a8 <_isatty_r>
 800c706:	b128      	cbz	r0, 800c714 <__smakebuf_r+0x74>
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	f023 0303 	bic.w	r3, r3, #3
 800c70e:	f043 0301 	orr.w	r3, r3, #1
 800c712:	81a3      	strh	r3, [r4, #12]
 800c714:	89a0      	ldrh	r0, [r4, #12]
 800c716:	4305      	orrs	r5, r0
 800c718:	81a5      	strh	r5, [r4, #12]
 800c71a:	e7cd      	b.n	800c6b8 <__smakebuf_r+0x18>
 800c71c:	0800c4ad 	.word	0x0800c4ad

0800c720 <_malloc_usable_size_r>:
 800c720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c724:	1f18      	subs	r0, r3, #4
 800c726:	2b00      	cmp	r3, #0
 800c728:	bfbc      	itt	lt
 800c72a:	580b      	ldrlt	r3, [r1, r0]
 800c72c:	18c0      	addlt	r0, r0, r3
 800c72e:	4770      	bx	lr

0800c730 <_raise_r>:
 800c730:	291f      	cmp	r1, #31
 800c732:	b538      	push	{r3, r4, r5, lr}
 800c734:	4604      	mov	r4, r0
 800c736:	460d      	mov	r5, r1
 800c738:	d904      	bls.n	800c744 <_raise_r+0x14>
 800c73a:	2316      	movs	r3, #22
 800c73c:	6003      	str	r3, [r0, #0]
 800c73e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c742:	bd38      	pop	{r3, r4, r5, pc}
 800c744:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c746:	b112      	cbz	r2, 800c74e <_raise_r+0x1e>
 800c748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c74c:	b94b      	cbnz	r3, 800c762 <_raise_r+0x32>
 800c74e:	4620      	mov	r0, r4
 800c750:	f000 f830 	bl	800c7b4 <_getpid_r>
 800c754:	462a      	mov	r2, r5
 800c756:	4601      	mov	r1, r0
 800c758:	4620      	mov	r0, r4
 800c75a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c75e:	f000 b817 	b.w	800c790 <_kill_r>
 800c762:	2b01      	cmp	r3, #1
 800c764:	d00a      	beq.n	800c77c <_raise_r+0x4c>
 800c766:	1c59      	adds	r1, r3, #1
 800c768:	d103      	bne.n	800c772 <_raise_r+0x42>
 800c76a:	2316      	movs	r3, #22
 800c76c:	6003      	str	r3, [r0, #0]
 800c76e:	2001      	movs	r0, #1
 800c770:	e7e7      	b.n	800c742 <_raise_r+0x12>
 800c772:	2400      	movs	r4, #0
 800c774:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c778:	4628      	mov	r0, r5
 800c77a:	4798      	blx	r3
 800c77c:	2000      	movs	r0, #0
 800c77e:	e7e0      	b.n	800c742 <_raise_r+0x12>

0800c780 <raise>:
 800c780:	4b02      	ldr	r3, [pc, #8]	; (800c78c <raise+0xc>)
 800c782:	4601      	mov	r1, r0
 800c784:	6818      	ldr	r0, [r3, #0]
 800c786:	f7ff bfd3 	b.w	800c730 <_raise_r>
 800c78a:	bf00      	nop
 800c78c:	2000000c 	.word	0x2000000c

0800c790 <_kill_r>:
 800c790:	b538      	push	{r3, r4, r5, lr}
 800c792:	4d07      	ldr	r5, [pc, #28]	; (800c7b0 <_kill_r+0x20>)
 800c794:	2300      	movs	r3, #0
 800c796:	4604      	mov	r4, r0
 800c798:	4608      	mov	r0, r1
 800c79a:	4611      	mov	r1, r2
 800c79c:	602b      	str	r3, [r5, #0]
 800c79e:	f7f6 fcc9 	bl	8003134 <_kill>
 800c7a2:	1c43      	adds	r3, r0, #1
 800c7a4:	d102      	bne.n	800c7ac <_kill_r+0x1c>
 800c7a6:	682b      	ldr	r3, [r5, #0]
 800c7a8:	b103      	cbz	r3, 800c7ac <_kill_r+0x1c>
 800c7aa:	6023      	str	r3, [r4, #0]
 800c7ac:	bd38      	pop	{r3, r4, r5, pc}
 800c7ae:	bf00      	nop
 800c7b0:	20005b0c 	.word	0x20005b0c

0800c7b4 <_getpid_r>:
 800c7b4:	f7f6 bcb6 	b.w	8003124 <_getpid>

0800c7b8 <__sread>:
 800c7b8:	b510      	push	{r4, lr}
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7c0:	f000 f894 	bl	800c8ec <_read_r>
 800c7c4:	2800      	cmp	r0, #0
 800c7c6:	bfab      	itete	ge
 800c7c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7ca:	89a3      	ldrhlt	r3, [r4, #12]
 800c7cc:	181b      	addge	r3, r3, r0
 800c7ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c7d2:	bfac      	ite	ge
 800c7d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c7d6:	81a3      	strhlt	r3, [r4, #12]
 800c7d8:	bd10      	pop	{r4, pc}

0800c7da <__swrite>:
 800c7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7de:	461f      	mov	r7, r3
 800c7e0:	898b      	ldrh	r3, [r1, #12]
 800c7e2:	05db      	lsls	r3, r3, #23
 800c7e4:	4605      	mov	r5, r0
 800c7e6:	460c      	mov	r4, r1
 800c7e8:	4616      	mov	r6, r2
 800c7ea:	d505      	bpl.n	800c7f8 <__swrite+0x1e>
 800c7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f000 f868 	bl	800c8c8 <_lseek_r>
 800c7f8:	89a3      	ldrh	r3, [r4, #12]
 800c7fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c802:	81a3      	strh	r3, [r4, #12]
 800c804:	4632      	mov	r2, r6
 800c806:	463b      	mov	r3, r7
 800c808:	4628      	mov	r0, r5
 800c80a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c80e:	f000 b817 	b.w	800c840 <_write_r>

0800c812 <__sseek>:
 800c812:	b510      	push	{r4, lr}
 800c814:	460c      	mov	r4, r1
 800c816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c81a:	f000 f855 	bl	800c8c8 <_lseek_r>
 800c81e:	1c43      	adds	r3, r0, #1
 800c820:	89a3      	ldrh	r3, [r4, #12]
 800c822:	bf15      	itete	ne
 800c824:	6560      	strne	r0, [r4, #84]	; 0x54
 800c826:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c82a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c82e:	81a3      	strheq	r3, [r4, #12]
 800c830:	bf18      	it	ne
 800c832:	81a3      	strhne	r3, [r4, #12]
 800c834:	bd10      	pop	{r4, pc}

0800c836 <__sclose>:
 800c836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c83a:	f000 b813 	b.w	800c864 <_close_r>
	...

0800c840 <_write_r>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	4d07      	ldr	r5, [pc, #28]	; (800c860 <_write_r+0x20>)
 800c844:	4604      	mov	r4, r0
 800c846:	4608      	mov	r0, r1
 800c848:	4611      	mov	r1, r2
 800c84a:	2200      	movs	r2, #0
 800c84c:	602a      	str	r2, [r5, #0]
 800c84e:	461a      	mov	r2, r3
 800c850:	f7f6 fca7 	bl	80031a2 <_write>
 800c854:	1c43      	adds	r3, r0, #1
 800c856:	d102      	bne.n	800c85e <_write_r+0x1e>
 800c858:	682b      	ldr	r3, [r5, #0]
 800c85a:	b103      	cbz	r3, 800c85e <_write_r+0x1e>
 800c85c:	6023      	str	r3, [r4, #0]
 800c85e:	bd38      	pop	{r3, r4, r5, pc}
 800c860:	20005b0c 	.word	0x20005b0c

0800c864 <_close_r>:
 800c864:	b538      	push	{r3, r4, r5, lr}
 800c866:	4d06      	ldr	r5, [pc, #24]	; (800c880 <_close_r+0x1c>)
 800c868:	2300      	movs	r3, #0
 800c86a:	4604      	mov	r4, r0
 800c86c:	4608      	mov	r0, r1
 800c86e:	602b      	str	r3, [r5, #0]
 800c870:	f7f6 fcb3 	bl	80031da <_close>
 800c874:	1c43      	adds	r3, r0, #1
 800c876:	d102      	bne.n	800c87e <_close_r+0x1a>
 800c878:	682b      	ldr	r3, [r5, #0]
 800c87a:	b103      	cbz	r3, 800c87e <_close_r+0x1a>
 800c87c:	6023      	str	r3, [r4, #0]
 800c87e:	bd38      	pop	{r3, r4, r5, pc}
 800c880:	20005b0c 	.word	0x20005b0c

0800c884 <_fstat_r>:
 800c884:	b538      	push	{r3, r4, r5, lr}
 800c886:	4d07      	ldr	r5, [pc, #28]	; (800c8a4 <_fstat_r+0x20>)
 800c888:	2300      	movs	r3, #0
 800c88a:	4604      	mov	r4, r0
 800c88c:	4608      	mov	r0, r1
 800c88e:	4611      	mov	r1, r2
 800c890:	602b      	str	r3, [r5, #0]
 800c892:	f7f6 fcae 	bl	80031f2 <_fstat>
 800c896:	1c43      	adds	r3, r0, #1
 800c898:	d102      	bne.n	800c8a0 <_fstat_r+0x1c>
 800c89a:	682b      	ldr	r3, [r5, #0]
 800c89c:	b103      	cbz	r3, 800c8a0 <_fstat_r+0x1c>
 800c89e:	6023      	str	r3, [r4, #0]
 800c8a0:	bd38      	pop	{r3, r4, r5, pc}
 800c8a2:	bf00      	nop
 800c8a4:	20005b0c 	.word	0x20005b0c

0800c8a8 <_isatty_r>:
 800c8a8:	b538      	push	{r3, r4, r5, lr}
 800c8aa:	4d06      	ldr	r5, [pc, #24]	; (800c8c4 <_isatty_r+0x1c>)
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	4608      	mov	r0, r1
 800c8b2:	602b      	str	r3, [r5, #0]
 800c8b4:	f7f6 fcad 	bl	8003212 <_isatty>
 800c8b8:	1c43      	adds	r3, r0, #1
 800c8ba:	d102      	bne.n	800c8c2 <_isatty_r+0x1a>
 800c8bc:	682b      	ldr	r3, [r5, #0]
 800c8be:	b103      	cbz	r3, 800c8c2 <_isatty_r+0x1a>
 800c8c0:	6023      	str	r3, [r4, #0]
 800c8c2:	bd38      	pop	{r3, r4, r5, pc}
 800c8c4:	20005b0c 	.word	0x20005b0c

0800c8c8 <_lseek_r>:
 800c8c8:	b538      	push	{r3, r4, r5, lr}
 800c8ca:	4d07      	ldr	r5, [pc, #28]	; (800c8e8 <_lseek_r+0x20>)
 800c8cc:	4604      	mov	r4, r0
 800c8ce:	4608      	mov	r0, r1
 800c8d0:	4611      	mov	r1, r2
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	602a      	str	r2, [r5, #0]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	f7f6 fca6 	bl	8003228 <_lseek>
 800c8dc:	1c43      	adds	r3, r0, #1
 800c8de:	d102      	bne.n	800c8e6 <_lseek_r+0x1e>
 800c8e0:	682b      	ldr	r3, [r5, #0]
 800c8e2:	b103      	cbz	r3, 800c8e6 <_lseek_r+0x1e>
 800c8e4:	6023      	str	r3, [r4, #0]
 800c8e6:	bd38      	pop	{r3, r4, r5, pc}
 800c8e8:	20005b0c 	.word	0x20005b0c

0800c8ec <_read_r>:
 800c8ec:	b538      	push	{r3, r4, r5, lr}
 800c8ee:	4d07      	ldr	r5, [pc, #28]	; (800c90c <_read_r+0x20>)
 800c8f0:	4604      	mov	r4, r0
 800c8f2:	4608      	mov	r0, r1
 800c8f4:	4611      	mov	r1, r2
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	602a      	str	r2, [r5, #0]
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	f7f6 fc34 	bl	8003168 <_read>
 800c900:	1c43      	adds	r3, r0, #1
 800c902:	d102      	bne.n	800c90a <_read_r+0x1e>
 800c904:	682b      	ldr	r3, [r5, #0]
 800c906:	b103      	cbz	r3, 800c90a <_read_r+0x1e>
 800c908:	6023      	str	r3, [r4, #0]
 800c90a:	bd38      	pop	{r3, r4, r5, pc}
 800c90c:	20005b0c 	.word	0x20005b0c

0800c910 <sqrt>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	ed2d 8b02 	vpush	{d8}
 800c916:	ec55 4b10 	vmov	r4, r5, d0
 800c91a:	f000 f825 	bl	800c968 <__ieee754_sqrt>
 800c91e:	4622      	mov	r2, r4
 800c920:	462b      	mov	r3, r5
 800c922:	4620      	mov	r0, r4
 800c924:	4629      	mov	r1, r5
 800c926:	eeb0 8a40 	vmov.f32	s16, s0
 800c92a:	eef0 8a60 	vmov.f32	s17, s1
 800c92e:	f7f4 f8fd 	bl	8000b2c <__aeabi_dcmpun>
 800c932:	b990      	cbnz	r0, 800c95a <sqrt+0x4a>
 800c934:	2200      	movs	r2, #0
 800c936:	2300      	movs	r3, #0
 800c938:	4620      	mov	r0, r4
 800c93a:	4629      	mov	r1, r5
 800c93c:	f7f4 f8ce 	bl	8000adc <__aeabi_dcmplt>
 800c940:	b158      	cbz	r0, 800c95a <sqrt+0x4a>
 800c942:	f7fd f8cf 	bl	8009ae4 <__errno>
 800c946:	2321      	movs	r3, #33	; 0x21
 800c948:	6003      	str	r3, [r0, #0]
 800c94a:	2200      	movs	r2, #0
 800c94c:	2300      	movs	r3, #0
 800c94e:	4610      	mov	r0, r2
 800c950:	4619      	mov	r1, r3
 800c952:	f7f3 ff7b 	bl	800084c <__aeabi_ddiv>
 800c956:	ec41 0b18 	vmov	d8, r0, r1
 800c95a:	eeb0 0a48 	vmov.f32	s0, s16
 800c95e:	eef0 0a68 	vmov.f32	s1, s17
 800c962:	ecbd 8b02 	vpop	{d8}
 800c966:	bd38      	pop	{r3, r4, r5, pc}

0800c968 <__ieee754_sqrt>:
 800c968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c96c:	ec55 4b10 	vmov	r4, r5, d0
 800c970:	4e55      	ldr	r6, [pc, #340]	; (800cac8 <__ieee754_sqrt+0x160>)
 800c972:	43ae      	bics	r6, r5
 800c974:	ee10 0a10 	vmov	r0, s0
 800c978:	ee10 3a10 	vmov	r3, s0
 800c97c:	462a      	mov	r2, r5
 800c97e:	4629      	mov	r1, r5
 800c980:	d110      	bne.n	800c9a4 <__ieee754_sqrt+0x3c>
 800c982:	ee10 2a10 	vmov	r2, s0
 800c986:	462b      	mov	r3, r5
 800c988:	f7f3 fe36 	bl	80005f8 <__aeabi_dmul>
 800c98c:	4602      	mov	r2, r0
 800c98e:	460b      	mov	r3, r1
 800c990:	4620      	mov	r0, r4
 800c992:	4629      	mov	r1, r5
 800c994:	f7f3 fc7a 	bl	800028c <__adddf3>
 800c998:	4604      	mov	r4, r0
 800c99a:	460d      	mov	r5, r1
 800c99c:	ec45 4b10 	vmov	d0, r4, r5
 800c9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a4:	2d00      	cmp	r5, #0
 800c9a6:	dc10      	bgt.n	800c9ca <__ieee754_sqrt+0x62>
 800c9a8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c9ac:	4330      	orrs	r0, r6
 800c9ae:	d0f5      	beq.n	800c99c <__ieee754_sqrt+0x34>
 800c9b0:	b15d      	cbz	r5, 800c9ca <__ieee754_sqrt+0x62>
 800c9b2:	ee10 2a10 	vmov	r2, s0
 800c9b6:	462b      	mov	r3, r5
 800c9b8:	ee10 0a10 	vmov	r0, s0
 800c9bc:	f7f3 fc64 	bl	8000288 <__aeabi_dsub>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	f7f3 ff42 	bl	800084c <__aeabi_ddiv>
 800c9c8:	e7e6      	b.n	800c998 <__ieee754_sqrt+0x30>
 800c9ca:	1512      	asrs	r2, r2, #20
 800c9cc:	d074      	beq.n	800cab8 <__ieee754_sqrt+0x150>
 800c9ce:	07d4      	lsls	r4, r2, #31
 800c9d0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c9d4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c9d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c9dc:	bf5e      	ittt	pl
 800c9de:	0fda      	lsrpl	r2, r3, #31
 800c9e0:	005b      	lslpl	r3, r3, #1
 800c9e2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c9e6:	2400      	movs	r4, #0
 800c9e8:	0fda      	lsrs	r2, r3, #31
 800c9ea:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c9ee:	107f      	asrs	r7, r7, #1
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	2516      	movs	r5, #22
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c9fa:	1886      	adds	r6, r0, r2
 800c9fc:	428e      	cmp	r6, r1
 800c9fe:	bfde      	ittt	le
 800ca00:	1b89      	suble	r1, r1, r6
 800ca02:	18b0      	addle	r0, r6, r2
 800ca04:	18a4      	addle	r4, r4, r2
 800ca06:	0049      	lsls	r1, r1, #1
 800ca08:	3d01      	subs	r5, #1
 800ca0a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ca0e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ca12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca16:	d1f0      	bne.n	800c9fa <__ieee754_sqrt+0x92>
 800ca18:	462a      	mov	r2, r5
 800ca1a:	f04f 0e20 	mov.w	lr, #32
 800ca1e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ca22:	4281      	cmp	r1, r0
 800ca24:	eb06 0c05 	add.w	ip, r6, r5
 800ca28:	dc02      	bgt.n	800ca30 <__ieee754_sqrt+0xc8>
 800ca2a:	d113      	bne.n	800ca54 <__ieee754_sqrt+0xec>
 800ca2c:	459c      	cmp	ip, r3
 800ca2e:	d811      	bhi.n	800ca54 <__ieee754_sqrt+0xec>
 800ca30:	f1bc 0f00 	cmp.w	ip, #0
 800ca34:	eb0c 0506 	add.w	r5, ip, r6
 800ca38:	da43      	bge.n	800cac2 <__ieee754_sqrt+0x15a>
 800ca3a:	2d00      	cmp	r5, #0
 800ca3c:	db41      	blt.n	800cac2 <__ieee754_sqrt+0x15a>
 800ca3e:	f100 0801 	add.w	r8, r0, #1
 800ca42:	1a09      	subs	r1, r1, r0
 800ca44:	459c      	cmp	ip, r3
 800ca46:	bf88      	it	hi
 800ca48:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800ca4c:	eba3 030c 	sub.w	r3, r3, ip
 800ca50:	4432      	add	r2, r6
 800ca52:	4640      	mov	r0, r8
 800ca54:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ca58:	f1be 0e01 	subs.w	lr, lr, #1
 800ca5c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800ca60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca64:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ca68:	d1db      	bne.n	800ca22 <__ieee754_sqrt+0xba>
 800ca6a:	430b      	orrs	r3, r1
 800ca6c:	d006      	beq.n	800ca7c <__ieee754_sqrt+0x114>
 800ca6e:	1c50      	adds	r0, r2, #1
 800ca70:	bf13      	iteet	ne
 800ca72:	3201      	addne	r2, #1
 800ca74:	3401      	addeq	r4, #1
 800ca76:	4672      	moveq	r2, lr
 800ca78:	f022 0201 	bicne.w	r2, r2, #1
 800ca7c:	1063      	asrs	r3, r4, #1
 800ca7e:	0852      	lsrs	r2, r2, #1
 800ca80:	07e1      	lsls	r1, r4, #31
 800ca82:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ca86:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ca8a:	bf48      	it	mi
 800ca8c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ca90:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ca94:	4614      	mov	r4, r2
 800ca96:	e781      	b.n	800c99c <__ieee754_sqrt+0x34>
 800ca98:	0ad9      	lsrs	r1, r3, #11
 800ca9a:	3815      	subs	r0, #21
 800ca9c:	055b      	lsls	r3, r3, #21
 800ca9e:	2900      	cmp	r1, #0
 800caa0:	d0fa      	beq.n	800ca98 <__ieee754_sqrt+0x130>
 800caa2:	02cd      	lsls	r5, r1, #11
 800caa4:	d50a      	bpl.n	800cabc <__ieee754_sqrt+0x154>
 800caa6:	f1c2 0420 	rsb	r4, r2, #32
 800caaa:	fa23 f404 	lsr.w	r4, r3, r4
 800caae:	1e55      	subs	r5, r2, #1
 800cab0:	4093      	lsls	r3, r2
 800cab2:	4321      	orrs	r1, r4
 800cab4:	1b42      	subs	r2, r0, r5
 800cab6:	e78a      	b.n	800c9ce <__ieee754_sqrt+0x66>
 800cab8:	4610      	mov	r0, r2
 800caba:	e7f0      	b.n	800ca9e <__ieee754_sqrt+0x136>
 800cabc:	0049      	lsls	r1, r1, #1
 800cabe:	3201      	adds	r2, #1
 800cac0:	e7ef      	b.n	800caa2 <__ieee754_sqrt+0x13a>
 800cac2:	4680      	mov	r8, r0
 800cac4:	e7bd      	b.n	800ca42 <__ieee754_sqrt+0xda>
 800cac6:	bf00      	nop
 800cac8:	7ff00000 	.word	0x7ff00000

0800cacc <_init>:
 800cacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cace:	bf00      	nop
 800cad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cad2:	bc08      	pop	{r3}
 800cad4:	469e      	mov	lr, r3
 800cad6:	4770      	bx	lr

0800cad8 <_fini>:
 800cad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cada:	bf00      	nop
 800cadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cade:	bc08      	pop	{r3}
 800cae0:	469e      	mov	lr, r3
 800cae2:	4770      	bx	lr
