
thermal_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008140  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082e8  080082e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080082e8  080082e8  000182e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082f0  080082f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082f0  080082f0  000182f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082f4  080082f4  000182f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080082f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000015bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200015c8  200015c8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159e7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a66  00000000  00000000  00035a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  00038490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011a8  00000000  00000000  00039738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023a20  00000000  00000000  0003a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000166a9  00000000  00000000  0005e300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbc15  00000000  00000000  000749a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001505be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f24  00000000  00000000  00150610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080082b0 	.word	0x080082b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080082b0 	.word	0x080082b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <amg8833Init>:

#include "AMG8833.h"
#include "utils.h"
#include "stm32f4xx.h"

void amg8833Init(AMG8833 *inst,I2C_HandleTypeDef *hi2c,uint8_t ad_sel){
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	4613      	mov	r3, r2
 80004d8:	71fb      	strb	r3, [r7, #7]
	inst->adri2c= ad_sel ? ( AMG8833_I2C_BASE_ADR + 1 ) << 1 :
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <amg8833Init+0x18>
 80004e0:	22d2      	movs	r2, #210	; 0xd2
 80004e2:	e000      	b.n	80004e6 <amg8833Init+0x1a>
 80004e4:	22d0      	movs	r2, #208	; 0xd0
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	801a      	strh	r2, [r3, #0]
								AMG8833_I2C_BASE_ADR << 1;
	inst->hi2c=hi2c;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	68ba      	ldr	r2, [r7, #8]
 80004ee:	605a      	str	r2, [r3, #4]
}
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <amg8833IsReady>:

uint8_t amg8833IsReady(AMG8833 *inst){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status=HAL_I2C_IsDeviceReady(inst->hi2c,inst->adri2c,5,10);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6858      	ldr	r0, [r3, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	8819      	ldrh	r1, [r3, #0]
 800050c:	230a      	movs	r3, #10
 800050e:	2205      	movs	r2, #5
 8000510:	f003 fccc 	bl	8003eac <HAL_I2C_IsDeviceReady>
 8000514:	4603      	mov	r3, r0
 8000516:	73fb      	strb	r3, [r7, #15]
	return (uint8_t)(status==HAL_OK);
 8000518:	7bfb      	ldrb	r3, [r7, #15]
 800051a:	2b00      	cmp	r3, #0
 800051c:	bf0c      	ite	eq
 800051e:	2301      	moveq	r3, #1
 8000520:	2300      	movne	r3, #0
 8000522:	b2db      	uxtb	r3, r3
}
 8000524:	4618      	mov	r0, r3
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}

0800052c <amg8833ReadDMA>:
	return status;


}

HAL_StatusTypeDef amg8833ReadDMA(AMG8833 *inst,uint8_t *data){
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af02      	add	r7, sp, #8
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	status=HAL_I2C_Mem_Read_DMA(inst->hi2c,(uint16_t)inst->adri2c,AMG8833_T01L,
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	6858      	ldr	r0, [r3, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	8819      	ldrh	r1, [r3, #0]
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	9301      	str	r3, [sp, #4]
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2301      	movs	r3, #1
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	f003 fb1b 	bl	8003b84 <HAL_I2C_Mem_Read_DMA>
 800054e:	4603      	mov	r3, r0
 8000550:	73fb      	strb	r3, [r7, #15]
			1,data,AMG8833_DS);

	return status;
 8000552:	7bfb      	ldrb	r3, [r7, #15]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <jstickInit>:
#include "Jstick.h"
#include "stm32f4xx.h"
#include "utils.h"


void jstickInit(Jstick *inst,ADC_HandleTypeDef *hadc,uint16_t errpin,GPIO_TypeDef *errport){
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	60f8      	str	r0, [r7, #12]
 8000564:	60b9      	str	r1, [r7, #8]
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	4613      	mov	r3, r2
 800056a:	80fb      	strh	r3, [r7, #6]
	inst->hadc=hadc;
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	68ba      	ldr	r2, [r7, #8]
 8000570:	601a      	str	r2, [r3, #0]
	inst->errpin=errpin;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	88fa      	ldrh	r2, [r7, #6]
 8000576:	809a      	strh	r2, [r3, #4]
	inst->errport=errport;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	683a      	ldr	r2, [r7, #0]
 800057c:	609a      	str	r2, [r3, #8]

}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <jstickGetDirection>:


JstickDir jstickGetDirection(Jstick *inst){
 800058a:	b580      	push	{r7, lr}
 800058c:	b084      	sub	sp, #16
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
	uint16_t raw_val;
	HAL_StatusTypeDef status;

	status=HAL_ADC_PollForConversion(inst->hadc,50);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2132      	movs	r1, #50	; 0x32
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fc43 	bl	8001e24 <HAL_ADC_PollForConversion>
 800059e:	4603      	mov	r3, r0
 80005a0:	73fb      	strb	r3, [r7, #15]

	_FL_DEBUG(status,inst->errport,inst->errpin);
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00a      	beq.n	80005be <jstickGetDirection+0x34>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	889b      	ldrh	r3, [r3, #4]
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689b      	ldr	r3, [r3, #8]
 80005b8:	430a      	orrs	r2, r1
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	e00a      	b.n	80005d4 <jstickGetDirection+0x4a>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	695a      	ldr	r2, [r3, #20]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	889b      	ldrh	r3, [r3, #4]
 80005c8:	43db      	mvns	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	400a      	ands	r2, r1
 80005d2:	615a      	str	r2, [r3, #20]
	if(status==HAL_OK){
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d111      	bne.n	80005fe <jstickGetDirection+0x74>
		raw_val=HAL_ADC_GetValue(inst->hadc);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fdbc 	bl	800215c <HAL_ADC_GetValue>
 80005e4:	4603      	mov	r3, r0
 80005e6:	81bb      	strh	r3, [r7, #12]

		if(raw_val>4000) return LEFT;
 80005e8:	89bb      	ldrh	r3, [r7, #12]
 80005ea:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80005ee:	d901      	bls.n	80005f4 <jstickGetDirection+0x6a>
 80005f0:	2301      	movs	r3, #1
 80005f2:	e005      	b.n	8000600 <jstickGetDirection+0x76>
		if(raw_val<100) return RIGHT;
 80005f4:	89bb      	ldrh	r3, [r7, #12]
 80005f6:	2b63      	cmp	r3, #99	; 0x63
 80005f8:	d801      	bhi.n	80005fe <jstickGetDirection+0x74>
 80005fa:	2302      	movs	r3, #2
 80005fc:	e000      	b.n	8000600 <jstickGetDirection+0x76>
	}

	return CENTER;
 80005fe:	2300      	movs	r3, #0
}
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <initStep>:
 */
#include "Step.h"
#include "utils.h"
#include "stm32f4xx.h"

void initStep(Step *inst,uint16_t p0,uint16_t p1,uint16_t p2,uint16_t p3,GPIO_TypeDef *port){
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	4608      	mov	r0, r1
 8000612:	4611      	mov	r1, r2
 8000614:	461a      	mov	r2, r3
 8000616:	4603      	mov	r3, r0
 8000618:	817b      	strh	r3, [r7, #10]
 800061a:	460b      	mov	r3, r1
 800061c:	813b      	strh	r3, [r7, #8]
 800061e:	4613      	mov	r3, r2
 8000620:	80fb      	strh	r3, [r7, #6]
	inst->pins[0]=p0;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	897a      	ldrh	r2, [r7, #10]
 8000626:	801a      	strh	r2, [r3, #0]
	inst->pins[1]=p1;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	893a      	ldrh	r2, [r7, #8]
 800062c:	805a      	strh	r2, [r3, #2]
	inst->pins[2]=p2;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	88fa      	ldrh	r2, [r7, #6]
 8000632:	809a      	strh	r2, [r3, #4]
	inst->pins[3]=p3;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	8b3a      	ldrh	r2, [r7, #24]
 8000638:	80da      	strh	r2, [r3, #6]

	inst->port=port;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	69fa      	ldr	r2, [r7, #28]
 800063e:	609a      	str	r2, [r3, #8]
	inst->cur_step=0;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2200      	movs	r2, #0
 8000644:	731a      	strb	r2, [r3, #12]
	rstPins(inst);
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f000 f807 	bl	800065a <rstPins>
	rstAngle(inst);
 800064c:	68f8      	ldr	r0, [r7, #12]
 800064e:	f000 f825 	bl	800069c <rstAngle>
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <rstPins>:

void rstPins(Step *inst){
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
	inst->port->ODR&=~( inst->pins[0] | inst->pins[1] | inst->pins[2] | inst->pins[3] );
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	695a      	ldr	r2, [r3, #20]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	8819      	ldrh	r1, [r3, #0]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	885b      	ldrh	r3, [r3, #2]
 8000670:	430b      	orrs	r3, r1
 8000672:	b299      	uxth	r1, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	889b      	ldrh	r3, [r3, #4]
 8000678:	430b      	orrs	r3, r1
 800067a:	b299      	uxth	r1, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	88db      	ldrh	r3, [r3, #6]
 8000680:	430b      	orrs	r3, r1
 8000682:	b29b      	uxth	r3, r3
 8000684:	43db      	mvns	r3, r3
 8000686:	4619      	mov	r1, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	400a      	ands	r2, r1
 800068e:	615a      	str	r2, [r3, #20]
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <rstAngle>:

void rstAngle(Step *inst){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	inst->ang_idx=0;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2200      	movs	r2, #0
 80006a8:	735a      	strb	r2, [r3, #13]
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <waveStep>:

/*if dir activate pins backward[pin 4-0] else forward[pin 0-4] in wave step mode*/
void waveStep(Step *inst,uint8_t dir){
 80006b6:	b480      	push	{r7}
 80006b8:	b083      	sub	sp, #12
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	460b      	mov	r3, r1
 80006c0:	70fb      	strb	r3, [r7, #3]

	/*Reset current step pin*/
	inst->port->ODR&= ~(inst->pins[ inst->cur_step ]);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7b1b      	ldrb	r3, [r3, #12]
 80006cc:	4619      	mov	r1, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80006d4:	43db      	mvns	r3, r3
 80006d6:	4619      	mov	r1, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	400a      	ands	r2, r1
 80006de:	615a      	str	r2, [r3, #20]

	/*Update current step and angular index according to given direction*/
	if(dir){
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d00f      	beq.n	8000706 <waveStep+0x50>
		inst->cur_step=(inst->cur_step + 1) & 0x3;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	7b1b      	ldrb	r3, [r3, #12]
 80006ea:	3301      	adds	r3, #1
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f003 0303 	and.w	r3, r3, #3
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	731a      	strb	r2, [r3, #12]
		inst->ang_idx ++;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7b5b      	ldrb	r3, [r3, #13]
 80006fc:	3301      	adds	r3, #1
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	735a      	strb	r2, [r3, #13]
 8000704:	e00e      	b.n	8000724 <waveStep+0x6e>
	}
	else{
		inst->cur_step=(inst->cur_step - 1) & 0x3;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7b1b      	ldrb	r3, [r3, #12]
 800070a:	3b01      	subs	r3, #1
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f003 0303 	and.w	r3, r3, #3
 8000712:	b2da      	uxtb	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	731a      	strb	r2, [r3, #12]
		inst->ang_idx --;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7b5b      	ldrb	r3, [r3, #13]
 800071c:	3b01      	subs	r3, #1
 800071e:	b2da      	uxtb	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	735a      	strb	r2, [r3, #13]
	}

	/*Set updated current step pin*/
	inst->port->ODR|= inst->pins[ inst->cur_step ];
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	689b      	ldr	r3, [r3, #8]
 8000728:	695a      	ldr	r2, [r3, #20]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7b1b      	ldrb	r3, [r3, #12]
 800072e:	4619      	mov	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000736:	4619      	mov	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	430a      	orrs	r2, r1
 800073e:	615a      	str	r2, [r3, #20]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <HAL_I2C_MemRxCpltCallback>:

/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image reading is now complete
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a05      	ldr	r2, [pc, #20]	; (8000770 <HAL_I2C_MemRxCpltCallback+0x24>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d102      	bne.n	8000764 <HAL_I2C_MemRxCpltCallback+0x18>
		AMG_RD_CPLT=1;
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_I2C_MemRxCpltCallback+0x28>)
 8000760:	2201      	movs	r2, #1
 8000762:	601a      	str	r2, [r3, #0]
	}
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	40005400 	.word	0x40005400
 8000774:	22000018 	.word	0x22000018

08000778 <HAL_UART_TxCpltCallback>:

/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image output is now complete
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a05      	ldr	r2, [pc, #20]	; (800079c <HAL_UART_TxCpltCallback+0x24>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d102      	bne.n	8000790 <HAL_UART_TxCpltCallback+0x18>
		AMG_OUT_CPLT=1;
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_UART_TxCpltCallback+0x28>)
 800078c:	2201      	movs	r2, #1
 800078e:	601a      	str	r2, [r3, #0]
	}
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40004800 	.word	0x40004800
 80007a0:	22000014 	.word	0x22000014

080007a4 <HAL_ADC_ConvHalfCpltCallback>:
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_BUF_SZ sample were converted and put into audio_in_buf.
 * Main playback loop transfer from lower audio_in_buf to higher audio_out_buf
 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==ADC1){
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d105      	bne.n	80007c2 <HAL_ADC_ConvHalfCpltCallback+0x1e>
		audio_in_ptr1=&audio_in_buf1[0];
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <HAL_ADC_ConvHalfCpltCallback+0x48>)
 80007ba:	601a      	str	r2, [r3, #0]
		audio_out_ptr1=&audio_out_buf1[AUDIO_BUF_SZ];
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 80007be:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
	}

	if(hadc->Instance==ADC2){
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d105      	bne.n	80007d8 <HAL_ADC_ConvHalfCpltCallback+0x34>
		audio_in_ptr2=&audio_in_buf2[0];
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80007d0:	601a      	str	r2, [r3, #0]
		audio_out_ptr2=&audio_out_buf2[AUDIO_BUF_SZ];
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 80007d4:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80007d6:	601a      	str	r2, [r3, #0]
	}
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	40012000 	.word	0x40012000
 80007e8:	2000156c 	.word	0x2000156c
 80007ec:	2000056c 	.word	0x2000056c
 80007f0:	20001570 	.word	0x20001570
 80007f4:	20000b6c 	.word	0x20000b6c
 80007f8:	40012100 	.word	0x40012100
 80007fc:	20001574 	.word	0x20001574
 8000800:	20000d6c 	.word	0x20000d6c
 8000804:	20001578 	.word	0x20001578
 8000808:	2000136c 	.word	0x2000136c

0800080c <HAL_DAC_ConvCpltCallbackCh1>:
/*
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_TOT_BUF_SZ sample were taken from audio out buf and fed into DAC.
 * Main playback loop transfer from higher audio_in_buf to lower audio_out_buf
 */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	audio_in_ptr1=&audio_in_buf1[AUDIO_BUF_SZ];
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_DAC_ConvCpltCallbackCh1+0x20>)
 8000816:	4a06      	ldr	r2, [pc, #24]	; (8000830 <HAL_DAC_ConvCpltCallbackCh1+0x24>)
 8000818:	601a      	str	r2, [r3, #0]
	audio_out_ptr1=&audio_out_buf1[0];
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
 800081e:	601a      	str	r2, [r3, #0]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	2000156c 	.word	0x2000156c
 8000830:	2000076c 	.word	0x2000076c
 8000834:	20001570 	.word	0x20001570
 8000838:	2000096c 	.word	0x2000096c

0800083c <HAL_DACEx_ConvCpltCallbackCh2>:

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac){
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	audio_in_ptr2=&audio_in_buf2[AUDIO_BUF_SZ];
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_DACEx_ConvCpltCallbackCh2+0x20>)
 8000846:	4a06      	ldr	r2, [pc, #24]	; (8000860 <HAL_DACEx_ConvCpltCallbackCh2+0x24>)
 8000848:	601a      	str	r2, [r3, #0]
	audio_out_ptr2=&audio_out_buf2[0];
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_DACEx_ConvCpltCallbackCh2+0x28>)
 800084c:	4a06      	ldr	r2, [pc, #24]	; (8000868 <HAL_DACEx_ConvCpltCallbackCh2+0x2c>)
 800084e:	601a      	str	r2, [r3, #0]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	20001574 	.word	0x20001574
 8000860:	20000f6c 	.word	0x20000f6c
 8000864:	20001578 	.word	0x20001578
 8000868:	2000116c 	.word	0x2000116c

0800086c <audioPlayback>:
/*
 * Audio playback process.
 * Transfer audio sample from input buffer to output buffer using pointers set by ISR
 */

void audioPlayback(){
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
	for(int i=0;i<AUDIO_BUF_SZ;i++){
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	e01c      	b.n	80008b2 <audioPlayback+0x46>
		audio_out_ptr1[i]=audio_in_ptr1[i];
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <audioPlayback+0x5c>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	441a      	add	r2, r3
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <audioPlayback+0x60>)
 8000884:	6819      	ldr	r1, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	440b      	add	r3, r1
 800088c:	8812      	ldrh	r2, [r2, #0]
 800088e:	b292      	uxth	r2, r2
 8000890:	801a      	strh	r2, [r3, #0]
		audio_out_ptr2[i]=audio_in_ptr2[i];
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <audioPlayback+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	441a      	add	r2, r3
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <audioPlayback+0x68>)
 800089e:	6819      	ldr	r1, [r3, #0]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	440b      	add	r3, r1
 80008a6:	8812      	ldrh	r2, [r2, #0]
 80008a8:	b292      	uxth	r2, r2
 80008aa:	801a      	strh	r2, [r3, #0]
	for(int i=0;i<AUDIO_BUF_SZ;i++){
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3301      	adds	r3, #1
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2bff      	cmp	r3, #255	; 0xff
 80008b6:	dddf      	ble.n	8000878 <audioPlayback+0xc>
	}
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	2000156c 	.word	0x2000156c
 80008cc:	20001570 	.word	0x20001570
 80008d0:	20001574 	.word	0x20001574
 80008d4:	20001578 	.word	0x20001578

080008d8 <thermalImgFSM>:
 * Timer 6 ISR
 * DMA1 Stream 0 (Thermal image I2C Rx) Rx Cplt ISR
 * DMA1 Stream 6 (Thermal image USART2 Tx) Tx Cplt ISR
 * and subsequently manage Timer 6 reset and DMA transfer sequence
 */
void thermalImgFSM(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	  /*
	   * Thermal camera FSM
	   */
	  //If timer6 has expired
	  if(AMG_RD_START){
 80008dc:	4b21      	ldr	r3, [pc, #132]	; (8000964 <thermalImgFSM+0x8c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d01f      	beq.n	8000924 <thermalImgFSM+0x4c>

		  //Command DMA transfer from amg8833
		status=amg8833ReadDMA(&cam,img_buf);
 80008e4:	4920      	ldr	r1, [pc, #128]	; (8000968 <thermalImgFSM+0x90>)
 80008e6:	4821      	ldr	r0, [pc, #132]	; (800096c <thermalImgFSM+0x94>)
 80008e8:	f7ff fe20 	bl	800052c <amg8833ReadDMA>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <thermalImgFSM+0x98>)
 80008f2:	701a      	strb	r2, [r3, #0]
		_FL_DEBUG(status,GPIOD,GPIO_PIN_12);
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <thermalImgFSM+0x98>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d006      	beq.n	800090a <thermalImgFSM+0x32>
 80008fc:	4b1d      	ldr	r3, [pc, #116]	; (8000974 <thermalImgFSM+0x9c>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	4a1c      	ldr	r2, [pc, #112]	; (8000974 <thermalImgFSM+0x9c>)
 8000902:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000906:	6153      	str	r3, [r2, #20]
 8000908:	e005      	b.n	8000916 <thermalImgFSM+0x3e>
 800090a:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <thermalImgFSM+0x9c>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	4a19      	ldr	r2, [pc, #100]	; (8000974 <thermalImgFSM+0x9c>)
 8000910:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000914:	6153      	str	r3, [r2, #20]
		if(status==HAL_OK)
 8000916:	4b16      	ldr	r3, [pc, #88]	; (8000970 <thermalImgFSM+0x98>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d102      	bne.n	8000924 <thermalImgFSM+0x4c>
			  //Clear ctrl bit
			  AMG_RD_START=0;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <thermalImgFSM+0x8c>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
	   }

	  //If DMA image reading was successful
	  if(AMG_RD_CPLT){
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <thermalImgFSM+0xa0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d00f      	beq.n	800094c <thermalImgFSM+0x74>

		 //Command DMA transfer to uart2
		 status=HAL_UART_Transmit_DMA(&huart3,img_buf,AMG8833_DS);
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	490e      	ldr	r1, [pc, #56]	; (8000968 <thermalImgFSM+0x90>)
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <thermalImgFSM+0xa4>)
 8000932:	f006 fc7f 	bl	8007234 <HAL_UART_Transmit_DMA>
 8000936:	4603      	mov	r3, r0
 8000938:	461a      	mov	r2, r3
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <thermalImgFSM+0x98>)
 800093c:	701a      	strb	r2, [r3, #0]
		 //_FL_DEBUG(status,GPIOD,GPIO_PIN_13);
		 //_FL_EQ_DEBUG(status,HAL_BUSY,GPIOD,GPIO_PIN_15);
		 if(status==HAL_OK){
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <thermalImgFSM+0x98>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d102      	bne.n	800094c <thermalImgFSM+0x74>
			 AMG_RD_CPLT=0;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <thermalImgFSM+0xa0>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
		 }
	  }
	  //if latest data were consumed in output, restart timer6
	  if(AMG_OUT_CPLT){
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <thermalImgFSM+0xa8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d005      	beq.n	8000960 <thermalImgFSM+0x88>
		  AMG_OUT_CPLT=0;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <thermalImgFSM+0xa8>)
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 800095a:	480a      	ldr	r0, [pc, #40]	; (8000984 <thermalImgFSM+0xac>)
 800095c:	f005 ffea 	bl	8006934 <HAL_TIM_Base_Start_IT>
	  }
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2200001c 	.word	0x2200001c
 8000968:	200004e8 	.word	0x200004e8
 800096c:	200004c4 	.word	0x200004c4
 8000970:	20000568 	.word	0x20000568
 8000974:	40020c00 	.word	0x40020c00
 8000978:	22000018 	.word	0x22000018
 800097c:	20000420 	.word	0x20000420
 8000980:	22000014 	.word	0x22000014
 8000984:	20000390 	.word	0x20000390

08000988 <motorControl>:

/*Read joystick position and perform one motor step according to joystick direction*/
void motorControl(){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

	if(MOTOR_MV){
 800098c:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <motorControl+0x40>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d015      	beq.n	80009c0 <motorControl+0x38>
		MOTOR_MV=0;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <motorControl+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
		switch(jstickGetDirection(&js)){
 800099a:	480c      	ldr	r0, [pc, #48]	; (80009cc <motorControl+0x44>)
 800099c:	f7ff fdf5 	bl	800058a <jstickGetDirection>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d002      	beq.n	80009ac <motorControl+0x24>
 80009a6:	2b02      	cmp	r3, #2
 80009a8:	d005      	beq.n	80009b6 <motorControl+0x2e>
		}
		//sprintf(msg_buf,"%d\r\n",motor.cur_step);
		//HAL_UART_Transmit(&huart3,(uint8_t*)msg_buf,strlen(msg_buf),HAL_MAX_DELAY);
	}

}
 80009aa:	e00a      	b.n	80009c2 <motorControl+0x3a>
			waveStep(&motor,1);
 80009ac:	2101      	movs	r1, #1
 80009ae:	4808      	ldr	r0, [pc, #32]	; (80009d0 <motorControl+0x48>)
 80009b0:	f7ff fe81 	bl	80006b6 <waveStep>
			break;
 80009b4:	e005      	b.n	80009c2 <motorControl+0x3a>
			waveStep(&motor,0);
 80009b6:	2100      	movs	r1, #0
 80009b8:	4805      	ldr	r0, [pc, #20]	; (80009d0 <motorControl+0x48>)
 80009ba:	f7ff fe7c 	bl	80006b6 <waveStep>
			break;
 80009be:	e000      	b.n	80009c2 <motorControl+0x3a>
	}
 80009c0:	bf00      	nop
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2200003c 	.word	0x2200003c
 80009cc:	200004dc 	.word	0x200004dc
 80009d0:	200004cc 	.word	0x200004cc

080009d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009da:	f001 f8cb 	bl	8001b74 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009de:	f000 f89b 	bl	8000b18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e2:	f000 fb93 	bl	800110c <MX_GPIO_Init>
  MX_TIM6_Init();
 80009e6:	f000 faa5 	bl	8000f34 <MX_TIM6_Init>
  MX_DMA_Init();
 80009ea:	f000 fb39 	bl	8001060 <MX_DMA_Init>
  MX_I2C1_Init();
 80009ee:	f000 fa27 	bl	8000e40 <MX_I2C1_Init>
  MX_ADC3_Init();
 80009f2:	f000 f99f 	bl	8000d34 <MX_ADC3_Init>
  MX_ADC1_Init();
 80009f6:	f000 f8f9 	bl	8000bec <MX_ADC1_Init>
  MX_DAC_Init();
 80009fa:	f000 f9ed 	bl	8000dd8 <MX_DAC_Init>
  MX_TIM2_Init();
 80009fe:	f000 fa4d 	bl	8000e9c <MX_TIM2_Init>
  MX_ADC2_Init();
 8000a02:	f000 f945 	bl	8000c90 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000a06:	f000 fb01 	bl	800100c <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000a0a:	f000 fac9 	bl	8000fa0 <MX_TIM7_Init>


  /*
   * Init DMA handle data structures for thermal image in/out transfer
   */
  HAL_DMA_Init(&hdma_i2c1_rx);
 8000a0e:	4830      	ldr	r0, [pc, #192]	; (8000ad0 <main+0xfc>)
 8000a10:	f002 f98a 	bl	8002d28 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart3_tx);
 8000a14:	482f      	ldr	r0, [pc, #188]	; (8000ad4 <main+0x100>)
 8000a16:	f002 f987 	bl	8002d28 <HAL_DMA_Init>

  /*Init amg8833 sensor with ad select pin connected to the ground*/
  amg8833Init(&cam,&hi2c1,0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	492e      	ldr	r1, [pc, #184]	; (8000ad8 <main+0x104>)
 8000a1e:	482f      	ldr	r0, [pc, #188]	; (8000adc <main+0x108>)
 8000a20:	f7ff fd54 	bl	80004cc <amg8833Init>

  /*Wait until amg8833 is ready*/
  while(!amg8833IsReady(&cam)){
 8000a24:	e005      	b.n	8000a32 <main+0x5e>
	  GPIOD->ODR|=GPIO_PIN_14;
 8000a26:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <main+0x10c>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a2d      	ldr	r2, [pc, #180]	; (8000ae0 <main+0x10c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a30:	6153      	str	r3, [r2, #20]
  while(!amg8833IsReady(&cam)){
 8000a32:	482a      	ldr	r0, [pc, #168]	; (8000adc <main+0x108>)
 8000a34:	f7ff fd62 	bl	80004fc <amg8833IsReady>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0f3      	beq.n	8000a26 <main+0x52>
  }

  GPIOD->ODR&=~GPIO_PIN_14;
 8000a3e:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <main+0x10c>)
 8000a40:	695b      	ldr	r3, [r3, #20]
 8000a42:	4a27      	ldr	r2, [pc, #156]	; (8000ae0 <main+0x10c>)
 8000a44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a48:	6153      	str	r3, [r2, #20]
  /*Start Timer 6 - Update event every 1/20 s for thermal camera reading*/
  HAL_TIM_Base_Start_IT(&htim6);
 8000a4a:	4826      	ldr	r0, [pc, #152]	; (8000ae4 <main+0x110>)
 8000a4c:	f005 ff72 	bl	8006934 <HAL_TIM_Base_Start_IT>
  /*Start Timer 7 - Update event every 1/10 s for motor control*/
  HAL_TIM_Base_Start_IT(&htim7);
 8000a50:	4825      	ldr	r0, [pc, #148]	; (8000ae8 <main+0x114>)
 8000a52:	f005 ff6f 	bl	8006934 <HAL_TIM_Base_Start_IT>

  /*
   * Start audio clock
   */
  HAL_TIM_Base_Start_IT(&htim2);
 8000a56:	4825      	ldr	r0, [pc, #148]	; (8000aec <main+0x118>)
 8000a58:	f005 ff6c 	bl	8006934 <HAL_TIM_Base_Start_IT>
  /*
   * Start audio DMA continous reading
   * ADC1 and DAC both works with htim2 conversion clock
   */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)audio_in_buf1,AUDIO_TOT_BUF_SZ);
 8000a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a60:	4923      	ldr	r1, [pc, #140]	; (8000af0 <main+0x11c>)
 8000a62:	4824      	ldr	r0, [pc, #144]	; (8000af4 <main+0x120>)
 8000a64:	f001 fa6a 	bl	8001f3c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint32_t*)audio_in_buf2,AUDIO_TOT_BUF_SZ);
 8000a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a6c:	4922      	ldr	r1, [pc, #136]	; (8000af8 <main+0x124>)
 8000a6e:	4823      	ldr	r0, [pc, #140]	; (8000afc <main+0x128>)
 8000a70:	f001 fa64 	bl	8001f3c <HAL_ADC_Start_DMA>

  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_1,(uint32_t*)audio_out_buf1,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 8000a74:	2300      	movs	r3, #0
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a7c:	4a20      	ldr	r2, [pc, #128]	; (8000b00 <main+0x12c>)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4820      	ldr	r0, [pc, #128]	; (8000b04 <main+0x130>)
 8000a82:	f001 ff31 	bl	80028e8 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_2,(uint32_t*)audio_out_buf2,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 8000a86:	2300      	movs	r3, #0
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8e:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <main+0x134>)
 8000a90:	2110      	movs	r1, #16
 8000a92:	481c      	ldr	r0, [pc, #112]	; (8000b04 <main+0x130>)
 8000a94:	f001 ff28 	bl	80028e8 <HAL_DAC_Start_DMA>

  /*Init step motor data structure*/
  initStep(&motor,GPIO_PIN_1,GPIO_PIN_2,GPIO_PIN_3,GPIO_PIN_4,GPIOD);
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <main+0x10c>)
 8000a9a:	9301      	str	r3, [sp, #4]
 8000a9c:	2310      	movs	r3, #16
 8000a9e:	9300      	str	r3, [sp, #0]
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	2102      	movs	r1, #2
 8000aa6:	4819      	ldr	r0, [pc, #100]	; (8000b0c <main+0x138>)
 8000aa8:	f7ff fdae 	bl	8000608 <initStep>

  /*Init joystick img_buf structure with yellow error pin*/
  jstickInit(&js,&hadc3,GPIO_PIN_12,GPIOD);
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <main+0x10c>)
 8000aae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ab2:	4917      	ldr	r1, [pc, #92]	; (8000b10 <main+0x13c>)
 8000ab4:	4817      	ldr	r0, [pc, #92]	; (8000b14 <main+0x140>)
 8000ab6:	f7ff fd51 	bl	800055c <jstickInit>
  /*Start ADC3 associated with joystick*/
  HAL_ADC_Start(&hadc3);
 8000aba:	4815      	ldr	r0, [pc, #84]	; (8000b10 <main+0x13c>)
 8000abc:	f001 f8e0 	bl	8001c80 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  audioPlayback();
 8000ac0:	f7ff fed4 	bl	800086c <audioPlayback>
	  thermalImgFSM();
 8000ac4:	f7ff ff08 	bl	80008d8 <thermalImgFSM>
	  motorControl();
 8000ac8:	f7ff ff5e 	bl	8000988 <motorControl>
	  audioPlayback();
 8000acc:	e7f8      	b.n	8000ac0 <main+0xec>
 8000ace:	bf00      	nop
 8000ad0:	200002e8 	.word	0x200002e8
 8000ad4:	20000464 	.word	0x20000464
 8000ad8:	20000294 	.word	0x20000294
 8000adc:	200004c4 	.word	0x200004c4
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	20000390 	.word	0x20000390
 8000ae8:	200003d8 	.word	0x200003d8
 8000aec:	20000348 	.word	0x20000348
 8000af0:	2000056c 	.word	0x2000056c
 8000af4:	20000028 	.word	0x20000028
 8000af8:	20000d6c 	.word	0x20000d6c
 8000afc:	20000070 	.word	0x20000070
 8000b00:	2000096c 	.word	0x2000096c
 8000b04:	200001c0 	.word	0x200001c0
 8000b08:	2000116c 	.word	0x2000116c
 8000b0c:	200004cc 	.word	0x200004cc
 8000b10:	200000b8 	.word	0x200000b8
 8000b14:	200004dc 	.word	0x200004dc

08000b18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b094      	sub	sp, #80	; 0x50
 8000b1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1e:	f107 0320 	add.w	r3, r7, #32
 8000b22:	2230      	movs	r2, #48	; 0x30
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f007 fbba 	bl	80082a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	4b28      	ldr	r3, [pc, #160]	; (8000be4 <SystemClock_Config+0xcc>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b44:	4a27      	ldr	r2, [pc, #156]	; (8000be4 <SystemClock_Config+0xcc>)
 8000b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4c:	4b25      	ldr	r3, [pc, #148]	; (8000be4 <SystemClock_Config+0xcc>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <SystemClock_Config+0xd0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <SystemClock_Config+0xd0>)
 8000b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b66:	6013      	str	r3, [r2, #0]
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <SystemClock_Config+0xd0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b74:	2302      	movs	r3, #2
 8000b76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b80:	2302      	movs	r3, #2
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b84:	2300      	movs	r3, #0
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000b8c:	2332      	movs	r3, #50	; 0x32
 8000b8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b90:	2302      	movs	r3, #2
 8000b92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b94:	2307      	movs	r3, #7
 8000b96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b98:	f107 0320 	add.w	r3, r7, #32
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f005 f9af 	bl	8005f00 <HAL_RCC_OscConfig>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ba8:	f000 fb5a 	bl	8001260 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bac:	230f      	movs	r3, #15
 8000bae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f005 fc10 	bl	80063f0 <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bd6:	f000 fb43 	bl	8001260 <Error_Handler>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3750      	adds	r7, #80	; 0x50
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40007000 	.word	0x40007000

08000bec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c00:	4a22      	ldr	r2, [pc, #136]	; (8000c8c <MX_ADC1_Init+0xa0>)
 8000c02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c2e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c4e:	480e      	ldr	r0, [pc, #56]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c50:	f000 ffd2 	bl	8001bf8 <HAL_ADC_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000c5a:	f000 fb01 	bl	8001260 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c5e:	2306      	movs	r3, #6
 8000c60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <MX_ADC1_Init+0x9c>)
 8000c70:	f001 fa96 	bl	80021a0 <HAL_ADC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c7a:	f000 faf1 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000028 	.word	0x20000028
 8000c8c:	40012000 	.word	0x40012000

08000c90 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c96:	463b      	mov	r3, r7
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000ca2:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000ca4:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <MX_ADC2_Init+0xa0>)
 8000ca6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000cd2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000cf4:	f000 ff80 	bl	8001bf8 <HAL_ADC_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8000cfe:	f000 faaf 	bl	8001260 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d02:	2307      	movs	r3, #7
 8000d04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d0e:	463b      	mov	r3, r7
 8000d10:	4619      	mov	r1, r3
 8000d12:	4806      	ldr	r0, [pc, #24]	; (8000d2c <MX_ADC2_Init+0x9c>)
 8000d14:	f001 fa44 	bl	80021a0 <HAL_ADC_ConfigChannel>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8000d1e:	f000 fa9f 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000070 	.word	0x20000070
 8000d30:	40012100 	.word	0x40012100

08000d34 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <MX_ADC3_Init+0x9c>)
 8000d4a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000d74:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <MX_ADC3_Init+0xa0>)
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d92:	480e      	ldr	r0, [pc, #56]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000d94:	f000 ff30 	bl	8001bf8 <HAL_ADC_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000d9e:	f000 fa5f 	bl	8001260 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000da2:	2301      	movs	r3, #1
 8000da4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <MX_ADC3_Init+0x98>)
 8000db4:	f001 f9f4 	bl	80021a0 <HAL_ADC_ConfigChannel>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000dbe:	f000 fa4f 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000b8 	.word	0x200000b8
 8000dd0:	40012200 	.word	0x40012200
 8000dd4:	0f000001 	.word	0x0f000001

08000dd8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000dde:	463b      	mov	r3, r7
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <MX_DAC_Init+0x60>)
 8000de8:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <MX_DAC_Init+0x64>)
 8000dea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000dec:	4812      	ldr	r0, [pc, #72]	; (8000e38 <MX_DAC_Init+0x60>)
 8000dee:	f001 fd59 	bl	80028a4 <HAL_DAC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000df8:	f000 fa32 	bl	8001260 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000dfc:	2324      	movs	r3, #36	; 0x24
 8000dfe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	2200      	movs	r2, #0
 8000e08:	4619      	mov	r1, r3
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <MX_DAC_Init+0x60>)
 8000e0c:	f001 feb2 	bl	8002b74 <HAL_DAC_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e16:	f000 fa23 	bl	8001260 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2210      	movs	r2, #16
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_DAC_Init+0x60>)
 8000e22:	f001 fea7 	bl	8002b74 <HAL_DAC_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000e2c:	f000 fa18 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	200001c0 	.word	0x200001c0
 8000e3c:	40007400 	.word	0x40007400

08000e40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e46:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <MX_I2C1_Init+0x54>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e4c:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <MX_I2C1_Init+0x58>)
 8000e4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e7c:	4804      	ldr	r0, [pc, #16]	; (8000e90 <MX_I2C1_Init+0x50>)
 8000e7e:	f002 fd3d 	bl	80038fc <HAL_I2C_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e88:	f000 f9ea 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000294 	.word	0x20000294
 8000e94:	40005400 	.word	0x40005400
 8000e98:	00061a80 	.word	0x00061a80

08000e9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000eba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ebe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ece:	22ff      	movs	r2, #255	; 0xff
 8000ed0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ede:	4814      	ldr	r0, [pc, #80]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000ee0:	f005 fcd8 	bl	8006894 <HAL_TIM_Base_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000eea:	f000 f9b9 	bl	8001260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480d      	ldr	r0, [pc, #52]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000efc:	f005 fe92 	bl	8006c24 <HAL_TIM_ConfigClockSource>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000f06:	f000 f9ab 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f0a:	2320      	movs	r3, #32
 8000f0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f12:	463b      	mov	r3, r7
 8000f14:	4619      	mov	r1, r3
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <MX_TIM2_Init+0x94>)
 8000f18:	f006 f8ae 	bl	8007078 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000f22:	f000 f99d 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000348 	.word	0x20000348

08000f34 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f44:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f46:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f4a:	2209      	movs	r2, #9
 8000f4c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f54:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f5a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f62:	480d      	ldr	r0, [pc, #52]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f64:	f005 fc96 	bl	8006894 <HAL_TIM_Base_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000f6e:	f000 f977 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f80:	f006 f87a 	bl	8007078 <HAL_TIMEx_MasterConfigSynchronization>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000f8a:	f000 f969 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000390 	.word	0x20000390
 8000f9c:	40001000 	.word	0x40001000

08000fa0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fb0:	4a15      	ldr	r2, [pc, #84]	; (8001008 <MX_TIM7_Init+0x68>)
 8000fb2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 62499;
 8000fc0:	4b10      	ldr	r3, [pc, #64]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fc2:	f24f 4223 	movw	r2, #62499	; 0xf423
 8000fc6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fca:	2280      	movs	r2, #128	; 0x80
 8000fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fd0:	f005 fc60 	bl	8006894 <HAL_TIM_Base_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000fda:	f000 f941 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_TIM7_Init+0x64>)
 8000fec:	f006 f844 	bl	8007078 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000ff6:	f000 f933 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200003d8 	.word	0x200003d8
 8001008:	40001400 	.word	0x40001400

0800100c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_USART3_UART_Init+0x4c>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <MX_USART3_UART_Init+0x50>)
 8001014:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_USART3_UART_Init+0x4c>)
 8001018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800101c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_USART3_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_USART3_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_USART3_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_USART3_UART_Init+0x4c>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <MX_USART3_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_USART3_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_USART3_UART_Init+0x4c>)
 8001044:	f006 f8a8 	bl	8007198 <HAL_UART_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800104e:	f000 f907 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000420 	.word	0x20000420
 800105c:	40004800 	.word	0x40004800

08001060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4b27      	ldr	r3, [pc, #156]	; (8001108 <MX_DMA_Init+0xa8>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a26      	ldr	r2, [pc, #152]	; (8001108 <MX_DMA_Init+0xa8>)
 8001070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b24      	ldr	r3, [pc, #144]	; (8001108 <MX_DMA_Init+0xa8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <MX_DMA_Init+0xa8>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a1f      	ldr	r2, [pc, #124]	; (8001108 <MX_DMA_Init+0xa8>)
 800108c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <MX_DMA_Init+0xa8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	200b      	movs	r0, #11
 80010a4:	f001 fbd4 	bl	8002850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80010a8:	200b      	movs	r0, #11
 80010aa:	f001 fbed 	bl	8002888 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	200e      	movs	r0, #14
 80010b4:	f001 fbcc 	bl	8002850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010b8:	200e      	movs	r0, #14
 80010ba:	f001 fbe5 	bl	8002888 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	2010      	movs	r0, #16
 80010c4:	f001 fbc4 	bl	8002850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010c8:	2010      	movs	r0, #16
 80010ca:	f001 fbdd 	bl	8002888 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2011      	movs	r0, #17
 80010d4:	f001 fbbc 	bl	8002850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80010d8:	2011      	movs	r0, #17
 80010da:	f001 fbd5 	bl	8002888 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	2038      	movs	r0, #56	; 0x38
 80010e4:	f001 fbb4 	bl	8002850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010e8:	2038      	movs	r0, #56	; 0x38
 80010ea:	f001 fbcd 	bl	8002888 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80010ee:	2200      	movs	r2, #0
 80010f0:	2100      	movs	r1, #0
 80010f2:	203a      	movs	r0, #58	; 0x3a
 80010f4:	f001 fbac 	bl	8002850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80010f8:	203a      	movs	r0, #58	; 0x3a
 80010fa:	f001 fbc5 	bl	8002888 <HAL_NVIC_EnableIRQ>

}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800

0800110c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
 8001120:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b2b      	ldr	r3, [pc, #172]	; (80011d4 <MX_GPIO_Init+0xc8>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a2a      	ldr	r2, [pc, #168]	; (80011d4 <MX_GPIO_Init+0xc8>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <MX_GPIO_Init+0xc8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <MX_GPIO_Init+0xc8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a23      	ldr	r2, [pc, #140]	; (80011d4 <MX_GPIO_Init+0xc8>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <MX_GPIO_Init+0xc8>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <MX_GPIO_Init+0xc8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <MX_GPIO_Init+0xc8>)
 8001164:	f043 0308 	orr.w	r3, r3, #8
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <MX_GPIO_Init+0xc8>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001176:	2200      	movs	r2, #0
 8001178:	f24f 011e 	movw	r1, #61470	; 0xf01e
 800117c:	4816      	ldr	r0, [pc, #88]	; (80011d8 <MX_GPIO_Init+0xcc>)
 800117e:	f002 fb8b 	bl	8003898 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001182:	2301      	movs	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001186:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800118a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4619      	mov	r1, r3
 8001196:	4811      	ldr	r0, [pc, #68]	; (80011dc <MX_GPIO_Init+0xd0>)
 8001198:	f002 f9e2 	bl	8003560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800119c:	f24f 031e 	movw	r3, #61470	; 0xf01e
 80011a0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <MX_GPIO_Init+0xcc>)
 80011b6:	f002 f9d3 	bl	8003560 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2006      	movs	r0, #6
 80011c0:	f001 fb46 	bl	8002850 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011c4:	2006      	movs	r0, #6
 80011c6:	f001 fb5f 	bl	8002888 <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	3720      	adds	r7, #32
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020c00 	.word	0x40020c00
 80011dc:	40020000 	.word	0x40020000

080011e0 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */

/*
 * Callback function to manage the blue button pushed event
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN==GPIO_PIN_0){
 80011ea:	88fb      	ldrh	r3, [r7, #6]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d105      	bne.n	80011fc <HAL_GPIO_EXTI_Callback+0x1c>
		GPIOD->ODR^=GPIO_PIN_13;
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_GPIO_EXTI_Callback+0x28>)
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_GPIO_EXTI_Callback+0x28>)
 80011f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80011fa:	6153      	str	r3, [r2, #20]
	}
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40020c00 	.word	0x40020c00

0800120c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if(htim->Instance == TIM7){
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d102      	bne.n	8001224 <HAL_TIM_PeriodElapsedCallback+0x18>
		MOTOR_MV=1;
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM6){
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d102      	bne.n	8001234 <HAL_TIM_PeriodElapsedCallback+0x28>
		AMG_RD_START=1;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001230:	2201      	movs	r2, #1
 8001232:	601a      	str	r2, [r3, #0]
	 }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x36>
    HAL_IncTick();
 800123e:	f000 fcbb 	bl	8001bb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40001400 	.word	0x40001400
 8001250:	2200003c 	.word	0x2200003c
 8001254:	40001000 	.word	0x40001000
 8001258:	2200001c 	.word	0x2200001c
 800125c:	40010000 	.word	0x40010000

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>
	...

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	4a0f      	ldr	r2, [pc, #60]	; (80012b8 <HAL_MspInit+0x4c>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6453      	str	r3, [r2, #68]	; 0x44
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_MspInit+0x4c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a76      	ldr	r2, [pc, #472]	; (80014b4 <HAL_ADC_MspInit+0x1f8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d159      	bne.n	8001392 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
 80012e2:	4b75      	ldr	r3, [pc, #468]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a74      	ldr	r2, [pc, #464]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b72      	ldr	r3, [pc, #456]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	4b6e      	ldr	r3, [pc, #440]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a6d      	ldr	r2, [pc, #436]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b6b      	ldr	r3, [pc, #428]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001316:	2340      	movs	r3, #64	; 0x40
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131a:	2303      	movs	r3, #3
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	4619      	mov	r1, r3
 8001328:	4864      	ldr	r0, [pc, #400]	; (80014bc <HAL_ADC_MspInit+0x200>)
 800132a:	f002 f919 	bl	8003560 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800132e:	4b64      	ldr	r3, [pc, #400]	; (80014c0 <HAL_ADC_MspInit+0x204>)
 8001330:	4a64      	ldr	r2, [pc, #400]	; (80014c4 <HAL_ADC_MspInit+0x208>)
 8001332:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001334:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <HAL_ADC_MspInit+0x204>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800133a:	4b61      	ldr	r3, [pc, #388]	; (80014c0 <HAL_ADC_MspInit+0x204>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001340:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <HAL_ADC_MspInit+0x204>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001346:	4b5e      	ldr	r3, [pc, #376]	; (80014c0 <HAL_ADC_MspInit+0x204>)
 8001348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800134c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800134e:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <HAL_ADC_MspInit+0x204>)
 8001350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001354:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001356:	4b5a      	ldr	r3, [pc, #360]	; (80014c0 <HAL_ADC_MspInit+0x204>)
 8001358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800135c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800135e:	4b58      	ldr	r3, [pc, #352]	; (80014c0 <HAL_ADC_MspInit+0x204>)
 8001360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001364:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001366:	4b56      	ldr	r3, [pc, #344]	; (80014c0 <HAL_ADC_MspInit+0x204>)
 8001368:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800136c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800136e:	4b54      	ldr	r3, [pc, #336]	; (80014c0 <HAL_ADC_MspInit+0x204>)
 8001370:	2200      	movs	r2, #0
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001374:	4852      	ldr	r0, [pc, #328]	; (80014c0 <HAL_ADC_MspInit+0x204>)
 8001376:	f001 fcd7 	bl	8002d28 <HAL_DMA_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001380:	f7ff ff6e 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a4e      	ldr	r2, [pc, #312]	; (80014c0 <HAL_ADC_MspInit+0x204>)
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
 800138a:	4a4d      	ldr	r2, [pc, #308]	; (80014c0 <HAL_ADC_MspInit+0x204>)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001390:	e08b      	b.n	80014aa <HAL_ADC_MspInit+0x1ee>
  else if(hadc->Instance==ADC2)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a4c      	ldr	r2, [pc, #304]	; (80014c8 <HAL_ADC_MspInit+0x20c>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d159      	bne.n	8001450 <HAL_ADC_MspInit+0x194>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013aa:	6453      	str	r3, [r2, #68]	; 0x44
 80013ac:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	4b3e      	ldr	r3, [pc, #248]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	4a3d      	ldr	r2, [pc, #244]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6313      	str	r3, [r2, #48]	; 0x30
 80013c8:	4b3b      	ldr	r3, [pc, #236]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d8:	2303      	movs	r3, #3
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	4835      	ldr	r0, [pc, #212]	; (80014bc <HAL_ADC_MspInit+0x200>)
 80013e8:	f002 f8ba 	bl	8003560 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80013ec:	4b37      	ldr	r3, [pc, #220]	; (80014cc <HAL_ADC_MspInit+0x210>)
 80013ee:	4a38      	ldr	r2, [pc, #224]	; (80014d0 <HAL_ADC_MspInit+0x214>)
 80013f0:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <HAL_ADC_MspInit+0x210>)
 80013f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013f8:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <HAL_ADC_MspInit+0x210>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001400:	4b32      	ldr	r3, [pc, #200]	; (80014cc <HAL_ADC_MspInit+0x210>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001406:	4b31      	ldr	r3, [pc, #196]	; (80014cc <HAL_ADC_MspInit+0x210>)
 8001408:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800140c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800140e:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <HAL_ADC_MspInit+0x210>)
 8001410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001414:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <HAL_ADC_MspInit+0x210>)
 8001418:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800141c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800141e:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <HAL_ADC_MspInit+0x210>)
 8001420:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001424:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001426:	4b29      	ldr	r3, [pc, #164]	; (80014cc <HAL_ADC_MspInit+0x210>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <HAL_ADC_MspInit+0x210>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001432:	4826      	ldr	r0, [pc, #152]	; (80014cc <HAL_ADC_MspInit+0x210>)
 8001434:	f001 fc78 	bl	8002d28 <HAL_DMA_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_ADC_MspInit+0x186>
      Error_Handler();
 800143e:	f7ff ff0f 	bl	8001260 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a21      	ldr	r2, [pc, #132]	; (80014cc <HAL_ADC_MspInit+0x210>)
 8001446:	639a      	str	r2, [r3, #56]	; 0x38
 8001448:	4a20      	ldr	r2, [pc, #128]	; (80014cc <HAL_ADC_MspInit+0x210>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800144e:	e02c      	b.n	80014aa <HAL_ADC_MspInit+0x1ee>
  else if(hadc->Instance==ADC3)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1f      	ldr	r2, [pc, #124]	; (80014d4 <HAL_ADC_MspInit+0x218>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d127      	bne.n	80014aa <HAL_ADC_MspInit+0x1ee>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a15      	ldr	r2, [pc, #84]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 8001464:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_ADC_MspInit+0x1fc>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001492:	2302      	movs	r3, #2
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001496:	2303      	movs	r3, #3
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_ADC_MspInit+0x200>)
 80014a6:	f002 f85b 	bl	8003560 <HAL_GPIO_Init>
}
 80014aa:	bf00      	nop
 80014ac:	3738      	adds	r7, #56	; 0x38
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40012000 	.word	0x40012000
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	20000100 	.word	0x20000100
 80014c4:	40026410 	.word	0x40026410
 80014c8:	40012100 	.word	0x40012100
 80014cc:	20000160 	.word	0x20000160
 80014d0:	40026440 	.word	0x40026440
 80014d4:	40012200 	.word	0x40012200

080014d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a4c      	ldr	r2, [pc, #304]	; (8001628 <HAL_DAC_MspInit+0x150>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	f040 8092 	bne.w	8001620 <HAL_DAC_MspInit+0x148>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	4b4a      	ldr	r3, [pc, #296]	; (800162c <HAL_DAC_MspInit+0x154>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a49      	ldr	r2, [pc, #292]	; (800162c <HAL_DAC_MspInit+0x154>)
 8001506:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b47      	ldr	r3, [pc, #284]	; (800162c <HAL_DAC_MspInit+0x154>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4b43      	ldr	r3, [pc, #268]	; (800162c <HAL_DAC_MspInit+0x154>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001520:	4a42      	ldr	r2, [pc, #264]	; (800162c <HAL_DAC_MspInit+0x154>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6313      	str	r3, [r2, #48]	; 0x30
 8001528:	4b40      	ldr	r3, [pc, #256]	; (800162c <HAL_DAC_MspInit+0x154>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001534:	2330      	movs	r3, #48	; 0x30
 8001536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001538:	2303      	movs	r3, #3
 800153a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	483a      	ldr	r0, [pc, #232]	; (8001630 <HAL_DAC_MspInit+0x158>)
 8001548:	f002 f80a 	bl	8003560 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800154c:	4b39      	ldr	r3, [pc, #228]	; (8001634 <HAL_DAC_MspInit+0x15c>)
 800154e:	4a3a      	ldr	r2, [pc, #232]	; (8001638 <HAL_DAC_MspInit+0x160>)
 8001550:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <HAL_DAC_MspInit+0x15c>)
 8001554:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001558:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155a:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_DAC_MspInit+0x15c>)
 800155c:	2240      	movs	r2, #64	; 0x40
 800155e:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <HAL_DAC_MspInit+0x15c>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001566:	4b33      	ldr	r3, [pc, #204]	; (8001634 <HAL_DAC_MspInit+0x15c>)
 8001568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800156c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800156e:	4b31      	ldr	r3, [pc, #196]	; (8001634 <HAL_DAC_MspInit+0x15c>)
 8001570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001574:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001576:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_DAC_MspInit+0x15c>)
 8001578:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800157c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800157e:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_DAC_MspInit+0x15c>)
 8001580:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001584:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001586:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_DAC_MspInit+0x15c>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800158c:	4b29      	ldr	r3, [pc, #164]	; (8001634 <HAL_DAC_MspInit+0x15c>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001592:	4828      	ldr	r0, [pc, #160]	; (8001634 <HAL_DAC_MspInit+0x15c>)
 8001594:	f001 fbc8 	bl	8002d28 <HAL_DMA_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800159e:	f7ff fe5f 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a23      	ldr	r2, [pc, #140]	; (8001634 <HAL_DAC_MspInit+0x15c>)
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	4a22      	ldr	r2, [pc, #136]	; (8001634 <HAL_DAC_MspInit+0x15c>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80015ae:	4b23      	ldr	r3, [pc, #140]	; (800163c <HAL_DAC_MspInit+0x164>)
 80015b0:	4a23      	ldr	r2, [pc, #140]	; (8001640 <HAL_DAC_MspInit+0x168>)
 80015b2:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80015b4:	4b21      	ldr	r3, [pc, #132]	; (800163c <HAL_DAC_MspInit+0x164>)
 80015b6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80015ba:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015bc:	4b1f      	ldr	r3, [pc, #124]	; (800163c <HAL_DAC_MspInit+0x164>)
 80015be:	2240      	movs	r2, #64	; 0x40
 80015c0:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_DAC_MspInit+0x164>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80015c8:	4b1c      	ldr	r3, [pc, #112]	; (800163c <HAL_DAC_MspInit+0x164>)
 80015ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ce:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_DAC_MspInit+0x164>)
 80015d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015d6:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_DAC_MspInit+0x164>)
 80015da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015de:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80015e0:	4b16      	ldr	r3, [pc, #88]	; (800163c <HAL_DAC_MspInit+0x164>)
 80015e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015e6:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80015e8:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_DAC_MspInit+0x164>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <HAL_DAC_MspInit+0x164>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80015f4:	4811      	ldr	r0, [pc, #68]	; (800163c <HAL_DAC_MspInit+0x164>)
 80015f6:	f001 fb97 	bl	8002d28 <HAL_DMA_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8001600:	f7ff fe2e 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a0d      	ldr	r2, [pc, #52]	; (800163c <HAL_DAC_MspInit+0x164>)
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	4a0c      	ldr	r2, [pc, #48]	; (800163c <HAL_DAC_MspInit+0x164>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	2100      	movs	r1, #0
 8001614:	2036      	movs	r0, #54	; 0x36
 8001616:	f001 f91b 	bl	8002850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800161a:	2036      	movs	r0, #54	; 0x36
 800161c:	f001 f934 	bl	8002888 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40007400 	.word	0x40007400
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000
 8001634:	200001d4 	.word	0x200001d4
 8001638:	40026088 	.word	0x40026088
 800163c:	20000234 	.word	0x20000234
 8001640:	400260a0 	.word	0x400260a0

08001644 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08a      	sub	sp, #40	; 0x28
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a34      	ldr	r2, [pc, #208]	; (8001734 <HAL_I2C_MspInit+0xf0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d161      	bne.n	800172a <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b33      	ldr	r3, [pc, #204]	; (8001738 <HAL_I2C_MspInit+0xf4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a32      	ldr	r2, [pc, #200]	; (8001738 <HAL_I2C_MspInit+0xf4>)
 8001670:	f043 0302 	orr.w	r3, r3, #2
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b30      	ldr	r3, [pc, #192]	; (8001738 <HAL_I2C_MspInit+0xf4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001682:	23c0      	movs	r3, #192	; 0xc0
 8001684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001686:	2312      	movs	r3, #18
 8001688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001692:	2304      	movs	r3, #4
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4827      	ldr	r0, [pc, #156]	; (800173c <HAL_I2C_MspInit+0xf8>)
 800169e:	f001 ff5f 	bl	8003560 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_I2C_MspInit+0xf4>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	4a23      	ldr	r2, [pc, #140]	; (8001738 <HAL_I2C_MspInit+0xf4>)
 80016ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016b0:	6413      	str	r3, [r2, #64]	; 0x40
 80016b2:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HAL_I2C_MspInit+0xf4>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_I2C_MspInit+0xfc>)
 80016c0:	4a20      	ldr	r2, [pc, #128]	; (8001744 <HAL_I2C_MspInit+0x100>)
 80016c2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <HAL_I2C_MspInit+0xfc>)
 80016c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016ca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016cc:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <HAL_I2C_MspInit+0xfc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_I2C_MspInit+0xfc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_I2C_MspInit+0xfc>)
 80016da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016de:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <HAL_I2C_MspInit+0xfc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <HAL_I2C_MspInit+0xfc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <HAL_I2C_MspInit+0xfc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <HAL_I2C_MspInit+0xfc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_I2C_MspInit+0xfc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80016fe:	4810      	ldr	r0, [pc, #64]	; (8001740 <HAL_I2C_MspInit+0xfc>)
 8001700:	f001 fb12 	bl	8002d28 <HAL_DMA_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800170a:	f7ff fda9 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <HAL_I2C_MspInit+0xfc>)
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
 8001714:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <HAL_I2C_MspInit+0xfc>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2100      	movs	r1, #0
 800171e:	201f      	movs	r0, #31
 8001720:	f001 f896 	bl	8002850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001724:	201f      	movs	r0, #31
 8001726:	f001 f8af 	bl	8002888 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	; 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40005400 	.word	0x40005400
 8001738:	40023800 	.word	0x40023800
 800173c:	40020400 	.word	0x40020400
 8001740:	200002e8 	.word	0x200002e8
 8001744:	40026010 	.word	0x40026010

08001748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001758:	d10e      	bne.n	8001778 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_TIM_Base_MspInit+0xa8>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a23      	ldr	r2, [pc, #140]	; (80017f0 <HAL_TIM_Base_MspInit+0xa8>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_TIM_Base_MspInit+0xa8>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001776:	e036      	b.n	80017e6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_TIM_Base_MspInit+0xac>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d116      	bne.n	80017b0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_TIM_Base_MspInit+0xa8>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_TIM_Base_MspInit+0xa8>)
 800178c:	f043 0310 	orr.w	r3, r3, #16
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_TIM_Base_MspInit+0xa8>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	2036      	movs	r0, #54	; 0x36
 80017a4:	f001 f854 	bl	8002850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017a8:	2036      	movs	r0, #54	; 0x36
 80017aa:	f001 f86d 	bl	8002888 <HAL_NVIC_EnableIRQ>
}
 80017ae:	e01a      	b.n	80017e6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a10      	ldr	r2, [pc, #64]	; (80017f8 <HAL_TIM_Base_MspInit+0xb0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d115      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_TIM_Base_MspInit+0xa8>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_TIM_Base_MspInit+0xa8>)
 80017c4:	f043 0320 	orr.w	r3, r3, #32
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_TIM_Base_MspInit+0xa8>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2037      	movs	r0, #55	; 0x37
 80017dc:	f001 f838 	bl	8002850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80017e0:	2037      	movs	r0, #55	; 0x37
 80017e2:	f001 f851 	bl	8002888 <HAL_NVIC_EnableIRQ>
}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40001000 	.word	0x40001000
 80017f8:	40001400 	.word	0x40001400

080017fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a34      	ldr	r2, [pc, #208]	; (80018ec <HAL_UART_MspInit+0xf0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d162      	bne.n	80018e4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b33      	ldr	r3, [pc, #204]	; (80018f0 <HAL_UART_MspInit+0xf4>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a32      	ldr	r2, [pc, #200]	; (80018f0 <HAL_UART_MspInit+0xf4>)
 8001828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <HAL_UART_MspInit+0xf4>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b2c      	ldr	r3, [pc, #176]	; (80018f0 <HAL_UART_MspInit+0xf4>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a2b      	ldr	r2, [pc, #172]	; (80018f0 <HAL_UART_MspInit+0xf4>)
 8001844:	f043 0302 	orr.w	r3, r3, #2
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <HAL_UART_MspInit+0xf4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001856:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001868:	2307      	movs	r3, #7
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	4820      	ldr	r0, [pc, #128]	; (80018f4 <HAL_UART_MspInit+0xf8>)
 8001874:	f001 fe74 	bl	8003560 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001878:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <HAL_UART_MspInit+0xfc>)
 800187a:	4a20      	ldr	r2, [pc, #128]	; (80018fc <HAL_UART_MspInit+0x100>)
 800187c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <HAL_UART_MspInit+0xfc>)
 8001880:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001884:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_UART_MspInit+0xfc>)
 8001888:	2240      	movs	r2, #64	; 0x40
 800188a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <HAL_UART_MspInit+0xfc>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_UART_MspInit+0xfc>)
 8001894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001898:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_UART_MspInit+0xfc>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_UART_MspInit+0xfc>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <HAL_UART_MspInit+0xfc>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_UART_MspInit+0xfc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_UART_MspInit+0xfc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80018b8:	480f      	ldr	r0, [pc, #60]	; (80018f8 <HAL_UART_MspInit+0xfc>)
 80018ba:	f001 fa35 	bl	8002d28 <HAL_DMA_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80018c4:	f7ff fccc 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <HAL_UART_MspInit+0xfc>)
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_UART_MspInit+0xfc>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	2027      	movs	r0, #39	; 0x27
 80018da:	f000 ffb9 	bl	8002850 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018de:	2027      	movs	r0, #39	; 0x27
 80018e0:	f000 ffd2 	bl	8002888 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018e4:	bf00      	nop
 80018e6:	3728      	adds	r7, #40	; 0x28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40004800 	.word	0x40004800
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020400 	.word	0x40020400
 80018f8:	20000464 	.word	0x20000464
 80018fc:	40026058 	.word	0x40026058

08001900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	; 0x30
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	2019      	movs	r0, #25
 8001916:	f000 ff9b 	bl	8002850 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800191a:	2019      	movs	r0, #25
 800191c:	f000 ffb4 	bl	8002888 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <HAL_InitTick+0xa4>)
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <HAL_InitTick+0xa4>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6453      	str	r3, [r2, #68]	; 0x44
 8001930:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <HAL_InitTick+0xa4>)
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800193c:	f107 0210 	add.w	r2, r7, #16
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f004 ff72 	bl	8006830 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800194c:	f004 ff5c 	bl	8006808 <HAL_RCC_GetPCLK2Freq>
 8001950:	4603      	mov	r3, r0
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001958:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <HAL_InitTick+0xa8>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	0c9b      	lsrs	r3, r3, #18
 8001960:	3b01      	subs	r3, #1
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001964:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_InitTick+0xac>)
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <HAL_InitTick+0xb0>)
 8001968:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <HAL_InitTick+0xac>)
 800196c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001970:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_InitTick+0xac>)
 8001974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001976:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_InitTick+0xac>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_InitTick+0xac>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001984:	4809      	ldr	r0, [pc, #36]	; (80019ac <HAL_InitTick+0xac>)
 8001986:	f004 ff85 	bl	8006894 <HAL_TIM_Base_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d104      	bne.n	800199a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001990:	4806      	ldr	r0, [pc, #24]	; (80019ac <HAL_InitTick+0xac>)
 8001992:	f004 ffcf 	bl	8006934 <HAL_TIM_Base_Start_IT>
 8001996:	4603      	mov	r3, r0
 8001998:	e000      	b.n	800199c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
}
 800199c:	4618      	mov	r0, r3
 800199e:	3730      	adds	r7, #48	; 0x30
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	431bde83 	.word	0x431bde83
 80019ac:	2000157c 	.word	0x2000157c
 80019b0:	40010000 	.word	0x40010000

080019b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <NMI_Handler+0x4>

080019ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019be:	e7fe      	b.n	80019be <HardFault_Handler+0x4>

080019c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <MemManage_Handler+0x4>

080019c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <BusFault_Handler+0x4>

080019cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <UsageFault_Handler+0x4>

080019d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f001 ff5c 	bl	80038cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <DMA1_Stream0_IRQHandler+0x10>)
 8001a1e:	f001 fb1b 	bl	8003058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200002e8 	.word	0x200002e8

08001a2c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <DMA1_Stream3_IRQHandler+0x10>)
 8001a32:	f001 fb11 	bl	8003058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000464 	.word	0x20000464

08001a40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <DMA1_Stream5_IRQHandler+0x10>)
 8001a46:	f001 fb07 	bl	8003058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200001d4 	.word	0x200001d4

08001a54 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <DMA1_Stream6_IRQHandler+0x10>)
 8001a5a:	f001 fafd 	bl	8003058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000234 	.word	0x20000234

08001a68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a6c:	4802      	ldr	r0, [pc, #8]	; (8001a78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a6e:	f004 ffd1 	bl	8006a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000157c 	.word	0x2000157c

08001a7c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a80:	4802      	ldr	r0, [pc, #8]	; (8001a8c <I2C1_EV_IRQHandler+0x10>)
 8001a82:	f002 fb41 	bl	8004108 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	20000294 	.word	0x20000294

08001a90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a94:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <USART3_IRQHandler+0x10>)
 8001a96:	f005 fc4b 	bl	8007330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	20000420 	.word	0x20000420

08001aa4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001aa8:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <TIM6_DAC_IRQHandler+0x14>)
 8001aaa:	f000 ffeb 	bl	8002a84 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001aae:	4803      	ldr	r0, [pc, #12]	; (8001abc <TIM6_DAC_IRQHandler+0x18>)
 8001ab0:	f004 ffb0 	bl	8006a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200001c0 	.word	0x200001c0
 8001abc:	20000390 	.word	0x20000390

08001ac0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <TIM7_IRQHandler+0x10>)
 8001ac6:	f004 ffa5 	bl	8006a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200003d8 	.word	0x200003d8

08001ad4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <DMA2_Stream0_IRQHandler+0x10>)
 8001ada:	f001 fabd 	bl	8003058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000100 	.word	0x20000100

08001ae8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <DMA2_Stream2_IRQHandler+0x10>)
 8001aee:	f001 fab3 	bl	8003058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000160 	.word	0x20000160

08001afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <SystemInit+0x20>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <SystemInit+0x20>)
 8001b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b24:	480d      	ldr	r0, [pc, #52]	; (8001b5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b26:	490e      	ldr	r1, [pc, #56]	; (8001b60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b28:	4a0e      	ldr	r2, [pc, #56]	; (8001b64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b3c:	4c0b      	ldr	r4, [pc, #44]	; (8001b6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b4a:	f7ff ffd7 	bl	8001afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f006 fb83 	bl	8008258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b52:	f7fe ff3f 	bl	80009d4 <main>
  bx  lr    
 8001b56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b64:	080082f8 	.word	0x080082f8
  ldr r2, =_sbss
 8001b68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b6c:	200015c8 	.word	0x200015c8

08001b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC_IRQHandler>
	...

08001b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <HAL_Init+0x40>)
 8001b7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_Init+0x40>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <HAL_Init+0x40>)
 8001b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <HAL_Init+0x40>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a07      	ldr	r2, [pc, #28]	; (8001bb4 <HAL_Init+0x40>)
 8001b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b9c:	2003      	movs	r0, #3
 8001b9e:	f000 fe4c 	bl	800283a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff feac 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba8:	f7ff fb60 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	200015c4 	.word	0x200015c4

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	200015c4 	.word	0x200015c4

08001bf8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e033      	b.n	8001c76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fb50 	bl	80012bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d118      	bne.n	8001c68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c3e:	f023 0302 	bic.w	r3, r3, #2
 8001c42:	f043 0202 	orr.w	r2, r3, #2
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fbca 	bl	80023e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f023 0303 	bic.w	r3, r3, #3
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
 8001c66:	e001      	b.n	8001c6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_Start+0x1a>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e0b2      	b.n	8001e00 <HAL_ADC_Start+0x180>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d018      	beq.n	8001ce2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cc0:	4b52      	ldr	r3, [pc, #328]	; (8001e0c <HAL_ADC_Start+0x18c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <HAL_ADC_Start+0x190>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0c9a      	lsrs	r2, r3, #18
 8001ccc:	4613      	mov	r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cd4:	e002      	b.n	8001cdc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f9      	bne.n	8001cd6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d17a      	bne.n	8001de6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cf8:	f023 0301 	bic.w	r3, r3, #1
 8001cfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d2e:	d106      	bne.n	8001d3e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d34:	f023 0206 	bic.w	r2, r3, #6
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	645a      	str	r2, [r3, #68]	; 0x44
 8001d3c:	e002      	b.n	8001d44 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d4c:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <HAL_ADC_Start+0x194>)
 8001d4e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d58:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 031f 	and.w	r3, r3, #31
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d12a      	bne.n	8001dbc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a2b      	ldr	r2, [pc, #172]	; (8001e18 <HAL_ADC_Start+0x198>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d015      	beq.n	8001d9c <HAL_ADC_Start+0x11c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a29      	ldr	r2, [pc, #164]	; (8001e1c <HAL_ADC_Start+0x19c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d105      	bne.n	8001d86 <HAL_ADC_Start+0x106>
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_ADC_Start+0x194>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00a      	beq.n	8001d9c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a25      	ldr	r2, [pc, #148]	; (8001e20 <HAL_ADC_Start+0x1a0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d136      	bne.n	8001dfe <HAL_ADC_Start+0x17e>
 8001d90:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <HAL_ADC_Start+0x194>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d130      	bne.n	8001dfe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d129      	bne.n	8001dfe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	e020      	b.n	8001dfe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a15      	ldr	r2, [pc, #84]	; (8001e18 <HAL_ADC_Start+0x198>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d11b      	bne.n	8001dfe <HAL_ADC_Start+0x17e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d114      	bne.n	8001dfe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	e00b      	b.n	8001dfe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f043 0210 	orr.w	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	431bde83 	.word	0x431bde83
 8001e14:	40012300 	.word	0x40012300
 8001e18:	40012000 	.word	0x40012000
 8001e1c:	40012100 	.word	0x40012100
 8001e20:	40012200 	.word	0x40012200

08001e24 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e40:	d113      	bne.n	8001e6a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e50:	d10b      	bne.n	8001e6a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	f043 0220 	orr.w	r2, r3, #32
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e063      	b.n	8001f32 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001e6a:	f7ff feb9 	bl	8001be0 <HAL_GetTick>
 8001e6e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e70:	e021      	b.n	8001eb6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e78:	d01d      	beq.n	8001eb6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <HAL_ADC_PollForConversion+0x6c>
 8001e80:	f7ff feae 	bl	8001be0 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d212      	bcs.n	8001eb6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f043 0204 	orr.w	r2, r3, #4
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e03d      	b.n	8001f32 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d1d6      	bne.n	8001e72 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0212 	mvn.w	r2, #18
 8001ecc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d123      	bne.n	8001f30 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d11f      	bne.n	8001f30 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d006      	beq.n	8001f0c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d111      	bne.n	8001f30 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d105      	bne.n	8001f30 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_ADC_Start_DMA+0x1e>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e0e9      	b.n	800212e <HAL_ADC_Start_DMA+0x1f2>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d018      	beq.n	8001fa2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f80:	4b6d      	ldr	r3, [pc, #436]	; (8002138 <HAL_ADC_Start_DMA+0x1fc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a6d      	ldr	r2, [pc, #436]	; (800213c <HAL_ADC_Start_DMA+0x200>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	0c9a      	lsrs	r2, r3, #18
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fb0:	d107      	bne.n	8001fc2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	f040 80a1 	bne.w	8002114 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ffc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002010:	d106      	bne.n	8002020 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f023 0206 	bic.w	r2, r3, #6
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
 800201e:	e002      	b.n	8002026 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800202e:	4b44      	ldr	r3, [pc, #272]	; (8002140 <HAL_ADC_Start_DMA+0x204>)
 8002030:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002036:	4a43      	ldr	r2, [pc, #268]	; (8002144 <HAL_ADC_Start_DMA+0x208>)
 8002038:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203e:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_ADC_Start_DMA+0x20c>)
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002046:	4a41      	ldr	r2, [pc, #260]	; (800214c <HAL_ADC_Start_DMA+0x210>)
 8002048:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002052:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002062:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002072:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	334c      	adds	r3, #76	; 0x4c
 800207e:	4619      	mov	r1, r3
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f000 fefe 	bl	8002e84 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2b00      	cmp	r3, #0
 8002092:	d12a      	bne.n	80020ea <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a2d      	ldr	r2, [pc, #180]	; (8002150 <HAL_ADC_Start_DMA+0x214>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d015      	beq.n	80020ca <HAL_ADC_Start_DMA+0x18e>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a2c      	ldr	r2, [pc, #176]	; (8002154 <HAL_ADC_Start_DMA+0x218>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d105      	bne.n	80020b4 <HAL_ADC_Start_DMA+0x178>
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_ADC_Start_DMA+0x204>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <HAL_ADC_Start_DMA+0x21c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d136      	bne.n	800212c <HAL_ADC_Start_DMA+0x1f0>
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_ADC_Start_DMA+0x204>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d130      	bne.n	800212c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d129      	bne.n	800212c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	e020      	b.n	800212c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a18      	ldr	r2, [pc, #96]	; (8002150 <HAL_ADC_Start_DMA+0x214>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d11b      	bne.n	800212c <HAL_ADC_Start_DMA+0x1f0>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d114      	bne.n	800212c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	e00b      	b.n	800212c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f043 0210 	orr.w	r2, r3, #16
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	f043 0201 	orr.w	r2, r3, #1
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000000 	.word	0x20000000
 800213c:	431bde83 	.word	0x431bde83
 8002140:	40012300 	.word	0x40012300
 8002144:	080025dd 	.word	0x080025dd
 8002148:	08002697 	.word	0x08002697
 800214c:	080026b3 	.word	0x080026b3
 8002150:	40012000 	.word	0x40012000
 8002154:	40012100 	.word	0x40012100
 8002158:	40012200 	.word	0x40012200

0800215c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1c>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e105      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x228>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b09      	cmp	r3, #9
 80021ca:	d925      	bls.n	8002218 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68d9      	ldr	r1, [r3, #12]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	3b1e      	subs	r3, #30
 80021e2:	2207      	movs	r2, #7
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43da      	mvns	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	400a      	ands	r2, r1
 80021f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68d9      	ldr	r1, [r3, #12]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	4618      	mov	r0, r3
 8002204:	4603      	mov	r3, r0
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4403      	add	r3, r0
 800220a:	3b1e      	subs	r3, #30
 800220c:	409a      	lsls	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	e022      	b.n	800225e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6919      	ldr	r1, [r3, #16]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	2207      	movs	r2, #7
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	400a      	ands	r2, r1
 800223a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6919      	ldr	r1, [r3, #16]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	b29b      	uxth	r3, r3
 800224c:	4618      	mov	r0, r3
 800224e:	4603      	mov	r3, r0
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4403      	add	r3, r0
 8002254:	409a      	lsls	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b06      	cmp	r3, #6
 8002264:	d824      	bhi.n	80022b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b05      	subs	r3, #5
 8002278:	221f      	movs	r2, #31
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	400a      	ands	r2, r1
 8002286:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	4618      	mov	r0, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	3b05      	subs	r3, #5
 80022a2:	fa00 f203 	lsl.w	r2, r0, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	635a      	str	r2, [r3, #52]	; 0x34
 80022ae:	e04c      	b.n	800234a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b0c      	cmp	r3, #12
 80022b6:	d824      	bhi.n	8002302 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	3b23      	subs	r3, #35	; 0x23
 80022ca:	221f      	movs	r2, #31
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43da      	mvns	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	400a      	ands	r2, r1
 80022d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	3b23      	subs	r3, #35	; 0x23
 80022f4:	fa00 f203 	lsl.w	r2, r0, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002300:	e023      	b.n	800234a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	3b41      	subs	r3, #65	; 0x41
 8002314:	221f      	movs	r2, #31
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43da      	mvns	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	400a      	ands	r2, r1
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	4618      	mov	r0, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	3b41      	subs	r3, #65	; 0x41
 800233e:	fa00 f203 	lsl.w	r2, r0, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	430a      	orrs	r2, r1
 8002348:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800234a:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <HAL_ADC_ConfigChannel+0x234>)
 800234c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a21      	ldr	r2, [pc, #132]	; (80023d8 <HAL_ADC_ConfigChannel+0x238>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d109      	bne.n	800236c <HAL_ADC_ConfigChannel+0x1cc>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b12      	cmp	r3, #18
 800235e:	d105      	bne.n	800236c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a19      	ldr	r2, [pc, #100]	; (80023d8 <HAL_ADC_ConfigChannel+0x238>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d123      	bne.n	80023be <HAL_ADC_ConfigChannel+0x21e>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b10      	cmp	r3, #16
 800237c:	d003      	beq.n	8002386 <HAL_ADC_ConfigChannel+0x1e6>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b11      	cmp	r3, #17
 8002384:	d11b      	bne.n	80023be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b10      	cmp	r3, #16
 8002398:	d111      	bne.n	80023be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_ADC_ConfigChannel+0x23c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_ADC_ConfigChannel+0x240>)
 80023a0:	fba2 2303 	umull	r2, r3, r2, r3
 80023a4:	0c9a      	lsrs	r2, r3, #18
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023b0:	e002      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f9      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	40012300 	.word	0x40012300
 80023d8:	40012000 	.word	0x40012000
 80023dc:	20000000 	.word	0x20000000
 80023e0:	431bde83 	.word	0x431bde83

080023e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023ec:	4b79      	ldr	r3, [pc, #484]	; (80025d4 <ADC_Init+0x1f0>)
 80023ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	431a      	orrs	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002418:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	021a      	lsls	r2, r3, #8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800243c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6859      	ldr	r1, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800245e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6899      	ldr	r1, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	4a58      	ldr	r2, [pc, #352]	; (80025d8 <ADC_Init+0x1f4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d022      	beq.n	80024c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800248a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6899      	ldr	r1, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6899      	ldr	r1, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	e00f      	b.n	80024e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80024e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0202 	bic.w	r2, r2, #2
 80024f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6899      	ldr	r1, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	7e1b      	ldrb	r3, [r3, #24]
 80024fc:	005a      	lsls	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 3020 	ldrb.w	r3, [r3, #32]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01b      	beq.n	8002548 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800251e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800252e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	3b01      	subs	r3, #1
 800253c:	035a      	lsls	r2, r3, #13
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	e007      	b.n	8002558 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002556:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002566:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	3b01      	subs	r3, #1
 8002574:	051a      	lsls	r2, r3, #20
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800258c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800259a:	025a      	lsls	r2, r3, #9
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689a      	ldr	r2, [r3, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6899      	ldr	r1, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	029a      	lsls	r2, r3, #10
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	609a      	str	r2, [r3, #8]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	40012300 	.word	0x40012300
 80025d8:	0f000001 	.word	0x0f000001

080025dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d13c      	bne.n	8002670 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d12b      	bne.n	8002668 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002614:	2b00      	cmp	r3, #0
 8002616:	d127      	bne.n	8002668 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002622:	2b00      	cmp	r3, #0
 8002624:	d006      	beq.n	8002634 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002630:	2b00      	cmp	r3, #0
 8002632:	d119      	bne.n	8002668 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0220 	bic.w	r2, r2, #32
 8002642:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f7ff fd84 	bl	8002176 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800266e:	e00e      	b.n	800268e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f7ff fd84 	bl	800218a <HAL_ADC_ErrorCallback>
}
 8002682:	e004      	b.n	800268e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
}
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f7fe f87d 	bl	80007a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	; 0x40
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f043 0204 	orr.w	r2, r3, #4
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7ff fd59 	bl	800218a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800270c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002712:	4a04      	ldr	r2, [pc, #16]	; (8002724 <__NVIC_SetPriorityGrouping+0x44>)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	60d3      	str	r3, [r2, #12]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800272c:	4b04      	ldr	r3, [pc, #16]	; (8002740 <__NVIC_GetPriorityGrouping+0x18>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0307 	and.w	r3, r3, #7
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	db0b      	blt.n	800276e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	f003 021f 	and.w	r2, r3, #31
 800275c:	4907      	ldr	r1, [pc, #28]	; (800277c <__NVIC_EnableIRQ+0x38>)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	095b      	lsrs	r3, r3, #5
 8002764:	2001      	movs	r0, #1
 8002766:	fa00 f202 	lsl.w	r2, r0, r2
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	490c      	ldr	r1, [pc, #48]	; (80027cc <__NVIC_SetPriority+0x4c>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4908      	ldr	r1, [pc, #32]	; (80027d0 <__NVIC_SetPriority+0x50>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3b04      	subs	r3, #4
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	401a      	ands	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43d9      	mvns	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	4313      	orrs	r3, r2
         );
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	; 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff ff4c 	bl	80026e0 <__NVIC_SetPriorityGrouping>
}
 8002848:	bf00      	nop
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002862:	f7ff ff61 	bl	8002728 <__NVIC_GetPriorityGrouping>
 8002866:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	6978      	ldr	r0, [r7, #20]
 800286e:	f7ff ffb1 	bl	80027d4 <NVIC_EncodePriority>
 8002872:	4602      	mov	r2, r0
 8002874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ff80 	bl	8002780 <__NVIC_SetPriority>
}
 8002880:	bf00      	nop
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff ff54 	bl	8002744 <__NVIC_EnableIRQ>
}
 800289c:	bf00      	nop
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e014      	b.n	80028e0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	791b      	ldrb	r3, [r3, #4]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fe06 	bl	80014d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	795b      	ldrb	r3, [r3, #5]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_DAC_Start_DMA+0x22>
 8002906:	2302      	movs	r3, #2
 8002908:	e0ab      	b.n	8002a62 <HAL_DAC_Start_DMA+0x17a>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2202      	movs	r2, #2
 8002914:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d12f      	bne.n	800297c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a52      	ldr	r2, [pc, #328]	; (8002a6c <HAL_DAC_Start_DMA+0x184>)
 8002922:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	4a51      	ldr	r2, [pc, #324]	; (8002a70 <HAL_DAC_Start_DMA+0x188>)
 800292a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a50      	ldr	r2, [pc, #320]	; (8002a74 <HAL_DAC_Start_DMA+0x18c>)
 8002932:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002942:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d013      	beq.n	8002972 <HAL_DAC_Start_DMA+0x8a>
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	2b08      	cmp	r3, #8
 800294e:	d845      	bhi.n	80029dc <HAL_DAC_Start_DMA+0xf4>
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_DAC_Start_DMA+0x76>
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	2b04      	cmp	r3, #4
 800295a:	d005      	beq.n	8002968 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800295c:	e03e      	b.n	80029dc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	3308      	adds	r3, #8
 8002964:	613b      	str	r3, [r7, #16]
        break;
 8002966:	e03c      	b.n	80029e2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	330c      	adds	r3, #12
 800296e:	613b      	str	r3, [r7, #16]
        break;
 8002970:	e037      	b.n	80029e2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3310      	adds	r3, #16
 8002978:	613b      	str	r3, [r7, #16]
        break;
 800297a:	e032      	b.n	80029e2 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4a3d      	ldr	r2, [pc, #244]	; (8002a78 <HAL_DAC_Start_DMA+0x190>)
 8002982:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4a3c      	ldr	r2, [pc, #240]	; (8002a7c <HAL_DAC_Start_DMA+0x194>)
 800298a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4a3b      	ldr	r2, [pc, #236]	; (8002a80 <HAL_DAC_Start_DMA+0x198>)
 8002992:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029a2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d013      	beq.n	80029d2 <HAL_DAC_Start_DMA+0xea>
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d817      	bhi.n	80029e0 <HAL_DAC_Start_DMA+0xf8>
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_DAC_Start_DMA+0xd6>
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d005      	beq.n	80029c8 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80029bc:	e010      	b.n	80029e0 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3314      	adds	r3, #20
 80029c4:	613b      	str	r3, [r7, #16]
        break;
 80029c6:	e00c      	b.n	80029e2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3318      	adds	r3, #24
 80029ce:	613b      	str	r3, [r7, #16]
        break;
 80029d0:	e007      	b.n	80029e2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	331c      	adds	r3, #28
 80029d8:	613b      	str	r3, [r7, #16]
        break;
 80029da:	e002      	b.n	80029e2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80029dc:	bf00      	nop
 80029de:	e000      	b.n	80029e2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80029e0:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d111      	bne.n	8002a0c <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6898      	ldr	r0, [r3, #8]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	f000 fa3f 	bl	8002e84 <HAL_DMA_Start_IT>
 8002a06:	4603      	mov	r3, r0
 8002a08:	75fb      	strb	r3, [r7, #23]
 8002a0a:	e010      	b.n	8002a2e <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002a1a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	68d8      	ldr	r0, [r3, #12]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	f000 fa2d 	bl	8002e84 <HAL_DMA_Start_IT>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10c      	bne.n	8002a54 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6819      	ldr	r1, [r3, #0]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2201      	movs	r2, #1
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	e005      	b.n	8002a60 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f043 0204 	orr.w	r2, r3, #4
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	08002c13 	.word	0x08002c13
 8002a70:	08002c35 	.word	0x08002c35
 8002a74:	08002c51 	.word	0x08002c51
 8002a78:	08002cbb 	.word	0x08002cbb
 8002a7c:	08002cdd 	.word	0x08002cdd
 8002a80:	08002cf9 	.word	0x08002cf9

08002a84 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a9a:	d120      	bne.n	8002ade <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aaa:	d118      	bne.n	8002ade <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2204      	movs	r2, #4
 8002ab0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ac6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ad6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f841 	bl	8002b60 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aec:	d120      	bne.n	8002b30 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002afc:	d118      	bne.n	8002b30 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2204      	movs	r2, #4
 8002b02:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	f043 0202 	orr.w	r2, r3, #2
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002b28:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8bb 	bl	8002ca6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	795b      	ldrb	r3, [r3, #5]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_DAC_ConfigChannel+0x18>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e03c      	b.n	8002c06 <HAL_DAC_ConfigChannel+0x92>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2202      	movs	r2, #2
 8002b96:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6819      	ldr	r1, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	22c0      	movs	r2, #192	; 0xc0
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f7fd fdf3 	bl	800080c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	711a      	strb	r2, [r3, #4]
}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f7ff ff78 	bl	8002b38 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f043 0204 	orr.w	r2, r3, #4
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7ff ff6e 	bl	8002b4c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	711a      	strb	r2, [r3, #4]
}
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7fd fdb7 	bl	800083c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	711a      	strb	r2, [r3, #4]
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7ff ffc7 	bl	8002c7e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f043 0204 	orr.w	r2, r3, #4
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7ff ffbd 	bl	8002c92 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	711a      	strb	r2, [r3, #4]
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7fe ff54 	bl	8001be0 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e099      	b.n	8002e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d64:	e00f      	b.n	8002d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d66:	f7fe ff3b 	bl	8001be0 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d908      	bls.n	8002d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e078      	b.n	8002e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e8      	bne.n	8002d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <HAL_DMA_Init+0x158>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d107      	bne.n	8002df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	4313      	orrs	r3, r2
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f023 0307 	bic.w	r3, r3, #7
 8002e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d117      	bne.n	8002e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00e      	beq.n	8002e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fb1b 	bl	8003468 <DMA_CheckFifoParam>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2240      	movs	r2, #64	; 0x40
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e46:	2301      	movs	r3, #1
 8002e48:	e016      	b.n	8002e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fad2 	bl	80033fc <DMA_CalcBaseAndBitshift>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	223f      	movs	r2, #63	; 0x3f
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	f010803f 	.word	0xf010803f

08002e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_DMA_Start_IT+0x26>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e040      	b.n	8002f2c <HAL_DMA_Start_IT+0xa8>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d12f      	bne.n	8002f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 fa64 	bl	80033a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	223f      	movs	r2, #63	; 0x3f
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0216 	orr.w	r2, r2, #22
 8002ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0208 	orr.w	r2, r2, #8
 8002f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	e005      	b.n	8002f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
 8002f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f42:	f7fe fe4d 	bl	8001be0 <HAL_GetTick>
 8002f46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d008      	beq.n	8002f66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2280      	movs	r2, #128	; 0x80
 8002f58:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e052      	b.n	800300c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0216 	bic.w	r2, r2, #22
 8002f74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d103      	bne.n	8002f96 <HAL_DMA_Abort+0x62>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d007      	beq.n	8002fa6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0208 	bic.w	r2, r2, #8
 8002fa4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fb6:	e013      	b.n	8002fe0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fb8:	f7fe fe12 	bl	8001be0 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b05      	cmp	r3, #5
 8002fc4:	d90c      	bls.n	8002fe0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2203      	movs	r2, #3
 8002fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e015      	b.n	800300c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1e4      	bne.n	8002fb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff2:	223f      	movs	r2, #63	; 0x3f
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d004      	beq.n	8003032 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2280      	movs	r2, #128	; 0x80
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e00c      	b.n	800304c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2205      	movs	r2, #5
 8003036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0201 	bic.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003064:	4b8e      	ldr	r3, [pc, #568]	; (80032a0 <HAL_DMA_IRQHandler+0x248>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a8e      	ldr	r2, [pc, #568]	; (80032a4 <HAL_DMA_IRQHandler+0x24c>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0a9b      	lsrs	r3, r3, #10
 8003070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003082:	2208      	movs	r2, #8
 8003084:	409a      	lsls	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4013      	ands	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d01a      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f022 0204 	bic.w	r2, r2, #4
 80030aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b0:	2208      	movs	r2, #8
 80030b2:	409a      	lsls	r2, r3
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	f043 0201 	orr.w	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030c8:	2201      	movs	r2, #1
 80030ca:	409a      	lsls	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d012      	beq.n	80030fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e6:	2201      	movs	r2, #1
 80030e8:	409a      	lsls	r2, r3
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f043 0202 	orr.w	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fe:	2204      	movs	r2, #4
 8003100:	409a      	lsls	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4013      	ands	r3, r2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d012      	beq.n	8003130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800311c:	2204      	movs	r2, #4
 800311e:	409a      	lsls	r2, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003128:	f043 0204 	orr.w	r2, r3, #4
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	2210      	movs	r2, #16
 8003136:	409a      	lsls	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d043      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d03c      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003152:	2210      	movs	r2, #16
 8003154:	409a      	lsls	r2, r3
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d018      	beq.n	800319a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d108      	bne.n	8003188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d024      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	4798      	blx	r3
 8003186:	e01f      	b.n	80031c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01b      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4798      	blx	r3
 8003198:	e016      	b.n	80031c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d107      	bne.n	80031b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0208 	bic.w	r2, r2, #8
 80031b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	2220      	movs	r2, #32
 80031ce:	409a      	lsls	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 808f 	beq.w	80032f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0310 	and.w	r3, r3, #16
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 8087 	beq.w	80032f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ee:	2220      	movs	r2, #32
 80031f0:	409a      	lsls	r2, r3
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b05      	cmp	r3, #5
 8003200:	d136      	bne.n	8003270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0216 	bic.w	r2, r2, #22
 8003210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <HAL_DMA_IRQHandler+0x1da>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 0208 	bic.w	r2, r2, #8
 8003240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003246:	223f      	movs	r2, #63	; 0x3f
 8003248:	409a      	lsls	r2, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003262:	2b00      	cmp	r3, #0
 8003264:	d07e      	beq.n	8003364 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	4798      	blx	r3
        }
        return;
 800326e:	e079      	b.n	8003364 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01d      	beq.n	80032ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003290:	2b00      	cmp	r3, #0
 8003292:	d031      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
 800329c:	e02c      	b.n	80032f8 <HAL_DMA_IRQHandler+0x2a0>
 800329e:	bf00      	nop
 80032a0:	20000000 	.word	0x20000000
 80032a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d023      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4798      	blx	r3
 80032b8:	e01e      	b.n	80032f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10f      	bne.n	80032e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0210 	bic.w	r2, r2, #16
 80032d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d032      	beq.n	8003366 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d022      	beq.n	8003352 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2205      	movs	r2, #5
 8003310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	3301      	adds	r3, #1
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	429a      	cmp	r2, r3
 800332e:	d307      	bcc.n	8003340 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f2      	bne.n	8003324 <HAL_DMA_IRQHandler+0x2cc>
 800333e:	e000      	b.n	8003342 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003340:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d005      	beq.n	8003366 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	4798      	blx	r3
 8003362:	e000      	b.n	8003366 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003364:	bf00      	nop
    }
  }
}
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800337a:	b2db      	uxtb	r3, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003394:	4618      	mov	r0, r3
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80033bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b40      	cmp	r3, #64	; 0x40
 80033cc:	d108      	bne.n	80033e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80033de:	e007      	b.n	80033f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	60da      	str	r2, [r3, #12]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	3b10      	subs	r3, #16
 800340c:	4a14      	ldr	r2, [pc, #80]	; (8003460 <DMA_CalcBaseAndBitshift+0x64>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003416:	4a13      	ldr	r2, [pc, #76]	; (8003464 <DMA_CalcBaseAndBitshift+0x68>)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b03      	cmp	r3, #3
 8003428:	d909      	bls.n	800343e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003432:	f023 0303 	bic.w	r3, r3, #3
 8003436:	1d1a      	adds	r2, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	659a      	str	r2, [r3, #88]	; 0x58
 800343c:	e007      	b.n	800344e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003446:	f023 0303 	bic.w	r3, r3, #3
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	aaaaaaab 	.word	0xaaaaaaab
 8003464:	080082e0 	.word	0x080082e0

08003468 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003470:	2300      	movs	r3, #0
 8003472:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003478:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d11f      	bne.n	80034c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b03      	cmp	r3, #3
 8003486:	d856      	bhi.n	8003536 <DMA_CheckFifoParam+0xce>
 8003488:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <DMA_CheckFifoParam+0x28>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034a1 	.word	0x080034a1
 8003494:	080034b3 	.word	0x080034b3
 8003498:	080034a1 	.word	0x080034a1
 800349c:	08003537 	.word	0x08003537
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d046      	beq.n	800353a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034b0:	e043      	b.n	800353a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034ba:	d140      	bne.n	800353e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c0:	e03d      	b.n	800353e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ca:	d121      	bne.n	8003510 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b03      	cmp	r3, #3
 80034d0:	d837      	bhi.n	8003542 <DMA_CheckFifoParam+0xda>
 80034d2:	a201      	add	r2, pc, #4	; (adr r2, 80034d8 <DMA_CheckFifoParam+0x70>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	080034e9 	.word	0x080034e9
 80034dc:	080034ef 	.word	0x080034ef
 80034e0:	080034e9 	.word	0x080034e9
 80034e4:	08003501 	.word	0x08003501
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	73fb      	strb	r3, [r7, #15]
      break;
 80034ec:	e030      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d025      	beq.n	8003546 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fe:	e022      	b.n	8003546 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003508:	d11f      	bne.n	800354a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800350e:	e01c      	b.n	800354a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d903      	bls.n	800351e <DMA_CheckFifoParam+0xb6>
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d003      	beq.n	8003524 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800351c:	e018      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
      break;
 8003522:	e015      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00e      	beq.n	800354e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      break;
 8003534:	e00b      	b.n	800354e <DMA_CheckFifoParam+0xe6>
      break;
 8003536:	bf00      	nop
 8003538:	e00a      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 800353a:	bf00      	nop
 800353c:	e008      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 800353e:	bf00      	nop
 8003540:	e006      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 8003542:	bf00      	nop
 8003544:	e004      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 8003546:	bf00      	nop
 8003548:	e002      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;   
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <DMA_CheckFifoParam+0xe8>
      break;
 800354e:	bf00      	nop
    }
  } 
  
  return status; 
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop

08003560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003560:	b480      	push	{r7}
 8003562:	b089      	sub	sp, #36	; 0x24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800356a:	2300      	movs	r3, #0
 800356c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800356e:	2300      	movs	r3, #0
 8003570:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	e16b      	b.n	8003854 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800357c:	2201      	movs	r2, #1
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	4013      	ands	r3, r2
 800358e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	429a      	cmp	r2, r3
 8003596:	f040 815a 	bne.w	800384e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d005      	beq.n	80035b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d130      	bne.n	8003614 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	2203      	movs	r2, #3
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035e8:	2201      	movs	r2, #1
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	091b      	lsrs	r3, r3, #4
 80035fe:	f003 0201 	and.w	r2, r3, #1
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b03      	cmp	r3, #3
 800361e:	d017      	beq.n	8003650 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	2203      	movs	r2, #3
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	fa02 f303 	lsl.w	r3, r2, r3
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 0303 	and.w	r3, r3, #3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d123      	bne.n	80036a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	08da      	lsrs	r2, r3, #3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3208      	adds	r2, #8
 8003664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003668:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	220f      	movs	r2, #15
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	691a      	ldr	r2, [r3, #16]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	08da      	lsrs	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3208      	adds	r2, #8
 800369e:	69b9      	ldr	r1, [r7, #24]
 80036a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	2203      	movs	r2, #3
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4013      	ands	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 0203 	and.w	r2, r3, #3
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80b4 	beq.w	800384e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60fb      	str	r3, [r7, #12]
 80036ea:	4b60      	ldr	r3, [pc, #384]	; (800386c <HAL_GPIO_Init+0x30c>)
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	4a5f      	ldr	r2, [pc, #380]	; (800386c <HAL_GPIO_Init+0x30c>)
 80036f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f4:	6453      	str	r3, [r2, #68]	; 0x44
 80036f6:	4b5d      	ldr	r3, [pc, #372]	; (800386c <HAL_GPIO_Init+0x30c>)
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003702:	4a5b      	ldr	r2, [pc, #364]	; (8003870 <HAL_GPIO_Init+0x310>)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	089b      	lsrs	r3, r3, #2
 8003708:	3302      	adds	r3, #2
 800370a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	220f      	movs	r2, #15
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a52      	ldr	r2, [pc, #328]	; (8003874 <HAL_GPIO_Init+0x314>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02b      	beq.n	8003786 <HAL_GPIO_Init+0x226>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a51      	ldr	r2, [pc, #324]	; (8003878 <HAL_GPIO_Init+0x318>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d025      	beq.n	8003782 <HAL_GPIO_Init+0x222>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a50      	ldr	r2, [pc, #320]	; (800387c <HAL_GPIO_Init+0x31c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01f      	beq.n	800377e <HAL_GPIO_Init+0x21e>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a4f      	ldr	r2, [pc, #316]	; (8003880 <HAL_GPIO_Init+0x320>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d019      	beq.n	800377a <HAL_GPIO_Init+0x21a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a4e      	ldr	r2, [pc, #312]	; (8003884 <HAL_GPIO_Init+0x324>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_GPIO_Init+0x216>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a4d      	ldr	r2, [pc, #308]	; (8003888 <HAL_GPIO_Init+0x328>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d00d      	beq.n	8003772 <HAL_GPIO_Init+0x212>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a4c      	ldr	r2, [pc, #304]	; (800388c <HAL_GPIO_Init+0x32c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d007      	beq.n	800376e <HAL_GPIO_Init+0x20e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a4b      	ldr	r2, [pc, #300]	; (8003890 <HAL_GPIO_Init+0x330>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_GPIO_Init+0x20a>
 8003766:	2307      	movs	r3, #7
 8003768:	e00e      	b.n	8003788 <HAL_GPIO_Init+0x228>
 800376a:	2308      	movs	r3, #8
 800376c:	e00c      	b.n	8003788 <HAL_GPIO_Init+0x228>
 800376e:	2306      	movs	r3, #6
 8003770:	e00a      	b.n	8003788 <HAL_GPIO_Init+0x228>
 8003772:	2305      	movs	r3, #5
 8003774:	e008      	b.n	8003788 <HAL_GPIO_Init+0x228>
 8003776:	2304      	movs	r3, #4
 8003778:	e006      	b.n	8003788 <HAL_GPIO_Init+0x228>
 800377a:	2303      	movs	r3, #3
 800377c:	e004      	b.n	8003788 <HAL_GPIO_Init+0x228>
 800377e:	2302      	movs	r3, #2
 8003780:	e002      	b.n	8003788 <HAL_GPIO_Init+0x228>
 8003782:	2301      	movs	r3, #1
 8003784:	e000      	b.n	8003788 <HAL_GPIO_Init+0x228>
 8003786:	2300      	movs	r3, #0
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	f002 0203 	and.w	r2, r2, #3
 800378e:	0092      	lsls	r2, r2, #2
 8003790:	4093      	lsls	r3, r2
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003798:	4935      	ldr	r1, [pc, #212]	; (8003870 <HAL_GPIO_Init+0x310>)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	089b      	lsrs	r3, r3, #2
 800379e:	3302      	adds	r3, #2
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_GPIO_Init+0x334>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037ca:	4a32      	ldr	r2, [pc, #200]	; (8003894 <HAL_GPIO_Init+0x334>)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037d0:	4b30      	ldr	r3, [pc, #192]	; (8003894 <HAL_GPIO_Init+0x334>)
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037f4:	4a27      	ldr	r2, [pc, #156]	; (8003894 <HAL_GPIO_Init+0x334>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <HAL_GPIO_Init+0x334>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4313      	orrs	r3, r2
 800381c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800381e:	4a1d      	ldr	r2, [pc, #116]	; (8003894 <HAL_GPIO_Init+0x334>)
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003824:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_GPIO_Init+0x334>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003848:	4a12      	ldr	r2, [pc, #72]	; (8003894 <HAL_GPIO_Init+0x334>)
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3301      	adds	r3, #1
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b0f      	cmp	r3, #15
 8003858:	f67f ae90 	bls.w	800357c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	3724      	adds	r7, #36	; 0x24
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	40013800 	.word	0x40013800
 8003874:	40020000 	.word	0x40020000
 8003878:	40020400 	.word	0x40020400
 800387c:	40020800 	.word	0x40020800
 8003880:	40020c00 	.word	0x40020c00
 8003884:	40021000 	.word	0x40021000
 8003888:	40021400 	.word	0x40021400
 800388c:	40021800 	.word	0x40021800
 8003890:	40021c00 	.word	0x40021c00
 8003894:	40013c00 	.word	0x40013c00

08003898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	807b      	strh	r3, [r7, #2]
 80038a4:	4613      	mov	r3, r2
 80038a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038a8:	787b      	ldrb	r3, [r7, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038b4:	e003      	b.n	80038be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038b6:	887b      	ldrh	r3, [r7, #2]
 80038b8:	041a      	lsls	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	619a      	str	r2, [r3, #24]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038d6:	4b08      	ldr	r3, [pc, #32]	; (80038f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	4013      	ands	r3, r2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d006      	beq.n	80038f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038e2:	4a05      	ldr	r2, [pc, #20]	; (80038f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e4:	88fb      	ldrh	r3, [r7, #6]
 80038e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fd fc78 	bl	80011e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80038f0:	bf00      	nop
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40013c00 	.word	0x40013c00

080038fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e12b      	b.n	8003b66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fe8e 	bl	8001644 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800394e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800395e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003960:	f002 ff3e 	bl	80067e0 <HAL_RCC_GetPCLK1Freq>
 8003964:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4a81      	ldr	r2, [pc, #516]	; (8003b70 <HAL_I2C_Init+0x274>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d807      	bhi.n	8003980 <HAL_I2C_Init+0x84>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4a80      	ldr	r2, [pc, #512]	; (8003b74 <HAL_I2C_Init+0x278>)
 8003974:	4293      	cmp	r3, r2
 8003976:	bf94      	ite	ls
 8003978:	2301      	movls	r3, #1
 800397a:	2300      	movhi	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e006      	b.n	800398e <HAL_I2C_Init+0x92>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4a7d      	ldr	r2, [pc, #500]	; (8003b78 <HAL_I2C_Init+0x27c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	bf94      	ite	ls
 8003988:	2301      	movls	r3, #1
 800398a:	2300      	movhi	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e0e7      	b.n	8003b66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4a78      	ldr	r2, [pc, #480]	; (8003b7c <HAL_I2C_Init+0x280>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0c9b      	lsrs	r3, r3, #18
 80039a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a6a      	ldr	r2, [pc, #424]	; (8003b70 <HAL_I2C_Init+0x274>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d802      	bhi.n	80039d0 <HAL_I2C_Init+0xd4>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	3301      	adds	r3, #1
 80039ce:	e009      	b.n	80039e4 <HAL_I2C_Init+0xe8>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039d6:	fb02 f303 	mul.w	r3, r2, r3
 80039da:	4a69      	ldr	r2, [pc, #420]	; (8003b80 <HAL_I2C_Init+0x284>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	099b      	lsrs	r3, r3, #6
 80039e2:	3301      	adds	r3, #1
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	495c      	ldr	r1, [pc, #368]	; (8003b70 <HAL_I2C_Init+0x274>)
 8003a00:	428b      	cmp	r3, r1
 8003a02:	d819      	bhi.n	8003a38 <HAL_I2C_Init+0x13c>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e59      	subs	r1, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a12:	1c59      	adds	r1, r3, #1
 8003a14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a18:	400b      	ands	r3, r1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_I2C_Init+0x138>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1e59      	subs	r1, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a32:	e051      	b.n	8003ad8 <HAL_I2C_Init+0x1dc>
 8003a34:	2304      	movs	r3, #4
 8003a36:	e04f      	b.n	8003ad8 <HAL_I2C_Init+0x1dc>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d111      	bne.n	8003a64 <HAL_I2C_Init+0x168>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1e58      	subs	r0, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	440b      	add	r3, r1
 8003a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e012      	b.n	8003a8a <HAL_I2C_Init+0x18e>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1e58      	subs	r0, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	0099      	lsls	r1, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Init+0x196>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e022      	b.n	8003ad8 <HAL_I2C_Init+0x1dc>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10e      	bne.n	8003ab8 <HAL_I2C_Init+0x1bc>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1e58      	subs	r0, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	440b      	add	r3, r1
 8003aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aac:	3301      	adds	r3, #1
 8003aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab6:	e00f      	b.n	8003ad8 <HAL_I2C_Init+0x1dc>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1e58      	subs	r0, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6859      	ldr	r1, [r3, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	0099      	lsls	r1, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	6809      	ldr	r1, [r1, #0]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6911      	ldr	r1, [r2, #16]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68d2      	ldr	r2, [r2, #12]
 8003b12:	4311      	orrs	r1, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	000186a0 	.word	0x000186a0
 8003b74:	001e847f 	.word	0x001e847f
 8003b78:	003d08ff 	.word	0x003d08ff
 8003b7c:	431bde83 	.word	0x431bde83
 8003b80:	10624dd3 	.word	0x10624dd3

08003b84 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08c      	sub	sp, #48	; 0x30
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	4608      	mov	r0, r1
 8003b8e:	4611      	mov	r1, r2
 8003b90:	461a      	mov	r2, r3
 8003b92:	4603      	mov	r3, r0
 8003b94:	817b      	strh	r3, [r7, #10]
 8003b96:	460b      	mov	r3, r1
 8003b98:	813b      	strh	r3, [r7, #8]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b9e:	f7fe f81f 	bl	8001be0 <HAL_GetTick>
 8003ba2:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	f040 8176 	bne.w	8003ea2 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bb6:	4b95      	ldr	r3, [pc, #596]	; (8003e0c <HAL_I2C_Mem_Read_DMA+0x288>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	08db      	lsrs	r3, r3, #3
 8003bbc:	4a94      	ldr	r2, [pc, #592]	; (8003e10 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	0a1a      	lsrs	r2, r3, #8
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	009a      	lsls	r2, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d116      	bne.n	8003c0a <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e14c      	b.n	8003ea4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d0db      	beq.n	8003bd0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d101      	bne.n	8003c26 <HAL_I2C_Mem_Read_DMA+0xa2>
 8003c22:	2302      	movs	r3, #2
 8003c24:	e13e      	b.n	8003ea4 <HAL_I2C_Mem_Read_DMA+0x320>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d007      	beq.n	8003c4c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2222      	movs	r2, #34	; 0x22
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2240      	movs	r2, #64	; 0x40
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a62      	ldr	r2, [pc, #392]	; (8003e14 <HAL_I2C_Mem_Read_DMA+0x290>)
 8003c8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8003c8e:	897a      	ldrh	r2, [r7, #10]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8003c94:	893a      	ldrh	r2, [r7, #8]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80cc 	beq.w	8003e48 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d02d      	beq.n	8003d14 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	4a56      	ldr	r2, [pc, #344]	; (8003e18 <HAL_I2C_Mem_Read_DMA+0x294>)
 8003cbe:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	4a55      	ldr	r2, [pc, #340]	; (8003e1c <HAL_I2C_Mem_Read_DMA+0x298>)
 8003cc6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	2200      	movs	r2, #0
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cdc:	2200      	movs	r2, #0
 8003cde:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3310      	adds	r3, #16
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfe:	f7ff f8c1 	bl	8002e84 <HAL_DMA_Start_IT>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003d08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f040 8087 	bne.w	8003e20 <HAL_I2C_Mem_Read_DMA+0x29c>
 8003d12:	e013      	b.n	8003d3c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0b3      	b.n	8003ea4 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003d3c:	88f8      	ldrh	r0, [r7, #6]
 8003d3e:	893a      	ldrh	r2, [r7, #8]
 8003d40:	8979      	ldrh	r1, [r7, #10]
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	9301      	str	r3, [sp, #4]
 8003d46:	2323      	movs	r3, #35	; 0x23
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f001 fca1 	bl	8005694 <I2C_RequestMemoryRead>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d023      	beq.n	8003da0 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff f959 	bl	8003014 <HAL_DMA_Abort_IT>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d7e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e081      	b.n	8003ea4 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d108      	bne.n	8003dba <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	e007      	b.n	8003dca <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dc8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	61bb      	str	r3, [r7, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	61bb      	str	r3, [r7, #24]
 8003dde:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e06:	605a      	str	r2, [r3, #4]
 8003e08:	e049      	b.n	8003e9e <HAL_I2C_Mem_Read_DMA+0x31a>
 8003e0a:	bf00      	nop
 8003e0c:	20000000 	.word	0x20000000
 8003e10:	14f8b589 	.word	0x14f8b589
 8003e14:	ffff0000 	.word	0xffff0000
 8003e18:	08005865 	.word	0x08005865
 8003e1c:	08005a0f 	.word	0x08005a0f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f043 0210 	orr.w	r2, r3, #16
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e02d      	b.n	8003ea4 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8003e48:	88f8      	ldrh	r0, [r7, #6]
 8003e4a:	893a      	ldrh	r2, [r7, #8]
 8003e4c:	8979      	ldrh	r1, [r7, #10]
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	2323      	movs	r3, #35	; 0x23
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	4603      	mov	r3, r0
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f001 fc1b 	bl	8005694 <I2C_RequestMemoryRead>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e01d      	b.n	8003ea4 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e000      	b.n	8003ea4 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
  }
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	; 0x28
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ebc:	f7fd fe90 	bl	8001be0 <HAL_GetTick>
 8003ec0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	f040 8111 	bne.w	80040f6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2319      	movs	r3, #25
 8003eda:	2201      	movs	r2, #1
 8003edc:	4988      	ldr	r1, [pc, #544]	; (8004100 <HAL_I2C_IsDeviceReady+0x254>)
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f001 fe7a 	bl	8005bd8 <I2C_WaitOnFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
 8003eec:	e104      	b.n	80040f8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_I2C_IsDeviceReady+0x50>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e0fd      	b.n	80040f8 <HAL_I2C_IsDeviceReady+0x24c>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d007      	beq.n	8003f22 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f30:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2224      	movs	r2, #36	; 0x24
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4a70      	ldr	r2, [pc, #448]	; (8004104 <HAL_I2C_IsDeviceReady+0x258>)
 8003f44:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f54:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f001 fe38 	bl	8005bd8 <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00d      	beq.n	8003f8a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f7c:	d103      	bne.n	8003f86 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e0b6      	b.n	80040f8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f8a:	897b      	ldrh	r3, [r7, #10]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f98:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f9a:	f7fd fe21 	bl	8001be0 <HAL_GetTick>
 8003f9e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	bf0c      	ite	eq
 8003fae:	2301      	moveq	r3, #1
 8003fb0:	2300      	movne	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc4:	bf0c      	ite	eq
 8003fc6:	2301      	moveq	r3, #1
 8003fc8:	2300      	movne	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fce:	e025      	b.n	800401c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fd0:	f7fd fe06 	bl	8001be0 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d302      	bcc.n	8003fe6 <HAL_I2C_IsDeviceReady+0x13a>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d103      	bne.n	8003fee <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	22a0      	movs	r2, #160	; 0xa0
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2ba0      	cmp	r3, #160	; 0xa0
 8004026:	d005      	beq.n	8004034 <HAL_I2C_IsDeviceReady+0x188>
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <HAL_I2C_IsDeviceReady+0x188>
 800402e:	7dbb      	ldrb	r3, [r7, #22]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0cd      	beq.n	8003fd0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2220      	movs	r2, #32
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b02      	cmp	r3, #2
 8004048:	d129      	bne.n	800409e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004058:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	613b      	str	r3, [r7, #16]
 800406e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	2319      	movs	r3, #25
 8004076:	2201      	movs	r2, #1
 8004078:	4921      	ldr	r1, [pc, #132]	; (8004100 <HAL_I2C_IsDeviceReady+0x254>)
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f001 fdac 	bl	8005bd8 <I2C_WaitOnFlagUntilTimeout>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e036      	b.n	80040f8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	e02c      	b.n	80040f8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ac:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040b6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	2319      	movs	r3, #25
 80040be:	2201      	movs	r2, #1
 80040c0:	490f      	ldr	r1, [pc, #60]	; (8004100 <HAL_I2C_IsDeviceReady+0x254>)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f001 fd88 	bl	8005bd8 <I2C_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e012      	b.n	80040f8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	3301      	adds	r3, #1
 80040d6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	f4ff af32 	bcc.w	8003f46 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
  }
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3720      	adds	r7, #32
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	00100002 	.word	0x00100002
 8004104:	ffff0000 	.word	0xffff0000

08004108 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004128:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004130:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	2b10      	cmp	r3, #16
 8004136:	d003      	beq.n	8004140 <HAL_I2C_EV_IRQHandler+0x38>
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b40      	cmp	r3, #64	; 0x40
 800413c:	f040 80c1 	bne.w	80042c2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10d      	bne.n	8004176 <HAL_I2C_EV_IRQHandler+0x6e>
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004160:	d003      	beq.n	800416a <HAL_I2C_EV_IRQHandler+0x62>
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004168:	d101      	bne.n	800416e <HAL_I2C_EV_IRQHandler+0x66>
 800416a:	2301      	movs	r3, #1
 800416c:	e000      	b.n	8004170 <HAL_I2C_EV_IRQHandler+0x68>
 800416e:	2300      	movs	r3, #0
 8004170:	2b01      	cmp	r3, #1
 8004172:	f000 8132 	beq.w	80043da <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00c      	beq.n	800419a <HAL_I2C_EV_IRQHandler+0x92>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	0a5b      	lsrs	r3, r3, #9
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d006      	beq.n	800419a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f001 fe9c 	bl	8005eca <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fcd2 	bl	8004b3c <I2C_Master_SB>
 8004198:	e092      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	08db      	lsrs	r3, r3, #3
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <HAL_I2C_EV_IRQHandler+0xb2>
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	0a5b      	lsrs	r3, r3, #9
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fd48 	bl	8004c48 <I2C_Master_ADD10>
 80041b8:	e082      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	085b      	lsrs	r3, r3, #1
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_I2C_EV_IRQHandler+0xd2>
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	0a5b      	lsrs	r3, r3, #9
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fd62 	bl	8004c9c <I2C_Master_ADDR>
 80041d8:	e072      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d03b      	beq.n	800425e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f4:	f000 80f3 	beq.w	80043de <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	09db      	lsrs	r3, r3, #7
 80041fc:	f003 0301 	and.w	r3, r3, #1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00f      	beq.n	8004224 <HAL_I2C_EV_IRQHandler+0x11c>
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	0a9b      	lsrs	r3, r3, #10
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d009      	beq.n	8004224 <HAL_I2C_EV_IRQHandler+0x11c>
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	089b      	lsrs	r3, r3, #2
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f942 	bl	80044a6 <I2C_MasterTransmit_TXE>
 8004222:	e04d      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	089b      	lsrs	r3, r3, #2
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 80d6 	beq.w	80043de <HAL_I2C_EV_IRQHandler+0x2d6>
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	0a5b      	lsrs	r3, r3, #9
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 80cf 	beq.w	80043de <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004240:	7bbb      	ldrb	r3, [r7, #14]
 8004242:	2b21      	cmp	r3, #33	; 0x21
 8004244:	d103      	bne.n	800424e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f9c9 	bl	80045de <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800424c:	e0c7      	b.n	80043de <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	f040 80c4 	bne.w	80043de <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fa37 	bl	80046ca <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800425c:	e0bf      	b.n	80043de <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426c:	f000 80b7 	beq.w	80043de <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	099b      	lsrs	r3, r3, #6
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00f      	beq.n	800429c <HAL_I2C_EV_IRQHandler+0x194>
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	0a9b      	lsrs	r3, r3, #10
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d009      	beq.n	800429c <HAL_I2C_EV_IRQHandler+0x194>
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	089b      	lsrs	r3, r3, #2
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 faac 	bl	80047f2 <I2C_MasterReceive_RXNE>
 800429a:	e011      	b.n	80042c0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	089b      	lsrs	r3, r3, #2
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 809a 	beq.w	80043de <HAL_I2C_EV_IRQHandler+0x2d6>
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	0a5b      	lsrs	r3, r3, #9
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8093 	beq.w	80043de <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 fb55 	bl	8004968 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042be:	e08e      	b.n	80043de <HAL_I2C_EV_IRQHandler+0x2d6>
 80042c0:	e08d      	b.n	80043de <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d004      	beq.n	80042d4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	61fb      	str	r3, [r7, #28]
 80042d2:	e007      	b.n	80042e4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d012      	beq.n	8004316 <HAL_I2C_EV_IRQHandler+0x20e>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	0a5b      	lsrs	r3, r3, #9
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00c      	beq.n	8004316 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800430c:	69b9      	ldr	r1, [r7, #24]
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 ff13 	bl	800513a <I2C_Slave_ADDR>
 8004314:	e066      	b.n	80043e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	091b      	lsrs	r3, r3, #4
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_I2C_EV_IRQHandler+0x22e>
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	0a5b      	lsrs	r3, r3, #9
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 ff4e 	bl	80051d0 <I2C_Slave_STOPF>
 8004334:	e056      	b.n	80043e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004336:	7bbb      	ldrb	r3, [r7, #14]
 8004338:	2b21      	cmp	r3, #33	; 0x21
 800433a:	d002      	beq.n	8004342 <HAL_I2C_EV_IRQHandler+0x23a>
 800433c:	7bbb      	ldrb	r3, [r7, #14]
 800433e:	2b29      	cmp	r3, #41	; 0x29
 8004340:	d125      	bne.n	800438e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	09db      	lsrs	r3, r3, #7
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00f      	beq.n	800436e <HAL_I2C_EV_IRQHandler+0x266>
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	0a9b      	lsrs	r3, r3, #10
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d009      	beq.n	800436e <HAL_I2C_EV_IRQHandler+0x266>
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	089b      	lsrs	r3, r3, #2
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d103      	bne.n	800436e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fe29 	bl	8004fbe <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800436c:	e039      	b.n	80043e2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	089b      	lsrs	r3, r3, #2
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b00      	cmp	r3, #0
 8004378:	d033      	beq.n	80043e2 <HAL_I2C_EV_IRQHandler+0x2da>
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	0a5b      	lsrs	r3, r3, #9
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d02d      	beq.n	80043e2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fe56 	bl	8005038 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800438c:	e029      	b.n	80043e2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	099b      	lsrs	r3, r3, #6
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00f      	beq.n	80043ba <HAL_I2C_EV_IRQHandler+0x2b2>
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	0a9b      	lsrs	r3, r3, #10
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_I2C_EV_IRQHandler+0x2b2>
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	089b      	lsrs	r3, r3, #2
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fe61 	bl	800507a <I2C_SlaveReceive_RXNE>
 80043b8:	e014      	b.n	80043e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	089b      	lsrs	r3, r3, #2
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00e      	beq.n	80043e4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	0a5b      	lsrs	r3, r3, #9
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 fe8f 	bl	80050f6 <I2C_SlaveReceive_BTF>
 80043d8:	e004      	b.n	80043e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80043da:	bf00      	nop
 80043dc:	e002      	b.n	80043e4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043de:	bf00      	nop
 80043e0:	e000      	b.n	80043e4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043e2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80043e4:	3720      	adds	r7, #32
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b083      	sub	sp, #12
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800443a:	b480      	push	{r7}
 800443c:	b083      	sub	sp, #12
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	70fb      	strb	r3, [r7, #3]
 8004446:	4613      	mov	r3, r2
 8004448:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004492:	b480      	push	{r7}
 8004494:	b083      	sub	sp, #12
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044bc:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d150      	bne.n	800456e <I2C_MasterTransmit_TXE+0xc8>
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	2b21      	cmp	r3, #33	; 0x21
 80044d0:	d14d      	bne.n	800456e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d01d      	beq.n	8004514 <I2C_MasterTransmit_TXE+0x6e>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d01a      	beq.n	8004514 <I2C_MasterTransmit_TXE+0x6e>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044e4:	d016      	beq.n	8004514 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80044f4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2211      	movs	r2, #17
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2220      	movs	r2, #32
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ff6c 	bl	80043ea <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004512:	e060      	b.n	80045d6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004522:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004532:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b40      	cmp	r3, #64	; 0x40
 800454c:	d107      	bne.n	800455e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff ff87 	bl	800446a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800455c:	e03b      	b.n	80045d6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff ff3f 	bl	80043ea <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800456c:	e033      	b.n	80045d6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	2b21      	cmp	r3, #33	; 0x21
 8004572:	d005      	beq.n	8004580 <I2C_MasterTransmit_TXE+0xda>
 8004574:	7bbb      	ldrb	r3, [r7, #14]
 8004576:	2b40      	cmp	r3, #64	; 0x40
 8004578:	d12d      	bne.n	80045d6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b22      	cmp	r3, #34	; 0x22
 800457e:	d12a      	bne.n	80045d6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d108      	bne.n	800459c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004598:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800459a:	e01c      	b.n	80045d6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d103      	bne.n	80045b0 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f88e 	bl	80046ca <I2C_MemoryTransmit_TXE_BTF>
}
 80045ae:	e012      	b.n	80045d6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	781a      	ldrb	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045d4:	e7ff      	b.n	80045d6 <I2C_MasterTransmit_TXE+0x130>
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b21      	cmp	r3, #33	; 0x21
 80045f6:	d164      	bne.n	80046c2 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d012      	beq.n	8004628 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004626:	e04c      	b.n	80046c2 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2b08      	cmp	r3, #8
 800462c:	d01d      	beq.n	800466a <I2C_MasterTransmit_BTF+0x8c>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2b20      	cmp	r3, #32
 8004632:	d01a      	beq.n	800466a <I2C_MasterTransmit_BTF+0x8c>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800463a:	d016      	beq.n	800466a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800464a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2211      	movs	r2, #17
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff fec1 	bl	80043ea <HAL_I2C_MasterTxCpltCallback>
}
 8004668:	e02b      	b.n	80046c2 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004678:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004688:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d107      	bne.n	80046b4 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff fedc 	bl	800446a <HAL_I2C_MemTxCpltCallback>
}
 80046b2:	e006      	b.n	80046c2 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff fe94 	bl	80043ea <HAL_I2C_MasterTxCpltCallback>
}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b084      	sub	sp, #16
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d11d      	bne.n	800471e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d10b      	bne.n	8004702 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fa:	1c9a      	adds	r2, r3, #2
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004700:	e073      	b.n	80047ea <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004706:	b29b      	uxth	r3, r3
 8004708:	121b      	asrs	r3, r3, #8
 800470a:	b2da      	uxtb	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800471c:	e065      	b.n	80047ea <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004722:	2b01      	cmp	r3, #1
 8004724:	d10b      	bne.n	800473e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472a:	b2da      	uxtb	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800473c:	e055      	b.n	80047ea <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004742:	2b02      	cmp	r3, #2
 8004744:	d151      	bne.n	80047ea <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b22      	cmp	r3, #34	; 0x22
 800474a:	d10d      	bne.n	8004768 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800475a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004766:	e040      	b.n	80047ea <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d015      	beq.n	800479e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	2b21      	cmp	r3, #33	; 0x21
 8004776:	d112      	bne.n	800479e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	781a      	ldrb	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800479c:	e025      	b.n	80047ea <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d120      	bne.n	80047ea <I2C_MemoryTransmit_TXE_BTF+0x120>
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b21      	cmp	r3, #33	; 0x21
 80047ac:	d11d      	bne.n	80047ea <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047bc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047cc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fe40 	bl	800446a <HAL_I2C_MemTxCpltCallback>
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b22      	cmp	r3, #34	; 0x22
 8004804:	f040 80ac 	bne.w	8004960 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800480c:	b29b      	uxth	r3, r3
 800480e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2b03      	cmp	r3, #3
 8004814:	d921      	bls.n	800485a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b03      	cmp	r3, #3
 8004844:	f040 808c 	bne.w	8004960 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004856:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004858:	e082      	b.n	8004960 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485e:	2b02      	cmp	r3, #2
 8004860:	d075      	beq.n	800494e <I2C_MasterReceive_RXNE+0x15c>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d002      	beq.n	800486e <I2C_MasterReceive_RXNE+0x7c>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d16f      	bne.n	800494e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f001 faca 	bl	8005e08 <I2C_WaitOnSTOPRequestThroughIT>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d142      	bne.n	8004900 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004888:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004898:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	691a      	ldr	r2, [r3, #16]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b40      	cmp	r3, #64	; 0x40
 80048d2:	d10a      	bne.n	80048ea <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fb ff32 	bl	800074c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048e8:	e03a      	b.n	8004960 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2212      	movs	r2, #18
 80048f6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff fd80 	bl	80043fe <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80048fe:	e02f      	b.n	8004960 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800490e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	691a      	ldr	r2, [r3, #16]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492c:	b29b      	uxth	r3, r3
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff fd99 	bl	800447e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800494c:	e008      	b.n	8004960 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495c:	605a      	str	r2, [r3, #4]
}
 800495e:	e7ff      	b.n	8004960 <I2C_MasterReceive_RXNE+0x16e>
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b04      	cmp	r3, #4
 800497e:	d11b      	bne.n	80049b8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80049b6:	e0bd      	b.n	8004b34 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049bc:	b29b      	uxth	r3, r3
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d129      	bne.n	8004a16 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d00a      	beq.n	80049ee <I2C_MasterReceive_BTF+0x86>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d007      	beq.n	80049ee <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ec:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a14:	e08e      	b.n	8004b34 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d176      	bne.n	8004b0e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d002      	beq.n	8004a2c <I2C_MasterReceive_BTF+0xc4>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b10      	cmp	r3, #16
 8004a2a:	d108      	bne.n	8004a3e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a3a:	601a      	str	r2, [r3, #0]
 8004a3c:	e019      	b.n	8004a72 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d002      	beq.n	8004a4a <I2C_MasterReceive_BTF+0xe2>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d108      	bne.n	8004a5c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a58:	601a      	str	r2, [r3, #0]
 8004a5a:	e00a      	b.n	8004a72 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d007      	beq.n	8004a72 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a70:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691a      	ldr	r2, [r3, #16]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004acc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	d10a      	bne.n	8004af8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f7fb fe2b 	bl	800074c <HAL_I2C_MemRxCpltCallback>
}
 8004af6:	e01d      	b.n	8004b34 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2212      	movs	r2, #18
 8004b04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff fc79 	bl	80043fe <HAL_I2C_MasterRxCpltCallback>
}
 8004b0c:	e012      	b.n	8004b34 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b34:	bf00      	nop
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d117      	bne.n	8004b80 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b68:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b6a:	e067      	b.n	8004c3c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	611a      	str	r2, [r3, #16]
}
 8004b7e:	e05d      	b.n	8004c3c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b88:	d133      	bne.n	8004bf2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b21      	cmp	r3, #33	; 0x21
 8004b94:	d109      	bne.n	8004baa <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ba6:	611a      	str	r2, [r3, #16]
 8004ba8:	e008      	b.n	8004bbc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d004      	beq.n	8004bce <I2C_Master_SB+0x92>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d108      	bne.n	8004be0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d032      	beq.n	8004c3c <I2C_Master_SB+0x100>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02d      	beq.n	8004c3c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bee:	605a      	str	r2, [r3, #4]
}
 8004bf0:	e024      	b.n	8004c3c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10e      	bne.n	8004c18 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	11db      	asrs	r3, r3, #7
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f003 0306 	and.w	r3, r3, #6
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	f063 030f 	orn	r3, r3, #15
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	611a      	str	r2, [r3, #16]
}
 8004c16:	e011      	b.n	8004c3c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10d      	bne.n	8004c3c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	11db      	asrs	r3, r3, #7
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f003 0306 	and.w	r3, r3, #6
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f063 030e 	orn	r3, r3, #14
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	611a      	str	r2, [r3, #16]
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d004      	beq.n	8004c6e <I2C_Master_ADD10+0x26>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d108      	bne.n	8004c80 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00c      	beq.n	8004c90 <I2C_Master_ADD10+0x48>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c8e:	605a      	str	r2, [r3, #4]
  }
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b091      	sub	sp, #68	; 0x44
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004caa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b22      	cmp	r3, #34	; 0x22
 8004cc4:	f040 8169 	bne.w	8004f9a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10f      	bne.n	8004cf0 <I2C_Master_ADDR+0x54>
 8004cd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	d10b      	bne.n	8004cf0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd8:	2300      	movs	r3, #0
 8004cda:	633b      	str	r3, [r7, #48]	; 0x30
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	633b      	str	r3, [r7, #48]	; 0x30
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	e160      	b.n	8004fb2 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d11d      	bne.n	8004d34 <I2C_Master_ADDR+0x98>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d00:	d118      	bne.n	8004d34 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d02:	2300      	movs	r3, #0
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	695b      	ldr	r3, [r3, #20]
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d26:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	651a      	str	r2, [r3, #80]	; 0x50
 8004d32:	e13e      	b.n	8004fb2 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d113      	bne.n	8004d66 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d3e:	2300      	movs	r3, #0
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	e115      	b.n	8004f92 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	f040 808a 	bne.w	8004e86 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d78:	d137      	bne.n	8004dea <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d88:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d98:	d113      	bne.n	8004dc2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004daa:	2300      	movs	r3, #0
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	e0e7      	b.n	8004f92 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	623b      	str	r3, [r7, #32]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	623b      	str	r3, [r7, #32]
 8004dd6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e0d3      	b.n	8004f92 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d02e      	beq.n	8004e4e <I2C_Master_ADDR+0x1b2>
 8004df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d02b      	beq.n	8004e4e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df8:	2b12      	cmp	r3, #18
 8004dfa:	d102      	bne.n	8004e02 <I2C_Master_ADDR+0x166>
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d125      	bne.n	8004e4e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d00e      	beq.n	8004e26 <I2C_Master_ADDR+0x18a>
 8004e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d00b      	beq.n	8004e26 <I2C_Master_ADDR+0x18a>
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d008      	beq.n	8004e26 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e007      	b.n	8004e36 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e34:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	61fb      	str	r3, [r7, #28]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	e0a1      	b.n	8004f92 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e085      	b.n	8004f92 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d14d      	bne.n	8004f2c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d016      	beq.n	8004ec4 <I2C_Master_ADDR+0x228>
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d013      	beq.n	8004ec4 <I2C_Master_ADDR+0x228>
 8004e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e9e:	2b10      	cmp	r3, #16
 8004ea0:	d010      	beq.n	8004ec4 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb0:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e007      	b.n	8004ed4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ed2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ee2:	d117      	bne.n	8004f14 <I2C_Master_ADDR+0x278>
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004eea:	d00b      	beq.n	8004f04 <I2C_Master_ADDR+0x268>
 8004eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d008      	beq.n	8004f04 <I2C_Master_ADDR+0x268>
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d005      	beq.n	8004f04 <I2C_Master_ADDR+0x268>
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d002      	beq.n	8004f04 <I2C_Master_ADDR+0x268>
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b20      	cmp	r3, #32
 8004f02:	d107      	bne.n	8004f14 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f12:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	617b      	str	r3, [r7, #20]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	e032      	b.n	8004f92 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f3a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f4a:	d117      	bne.n	8004f7c <I2C_Master_ADDR+0x2e0>
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f52:	d00b      	beq.n	8004f6c <I2C_Master_ADDR+0x2d0>
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d008      	beq.n	8004f6c <I2C_Master_ADDR+0x2d0>
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d005      	beq.n	8004f6c <I2C_Master_ADDR+0x2d0>
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	2b10      	cmp	r3, #16
 8004f64:	d002      	beq.n	8004f6c <I2C_Master_ADDR+0x2d0>
 8004f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d107      	bne.n	8004f7c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f7a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	613b      	str	r3, [r7, #16]
 8004f90:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004f98:	e00b      	b.n	8004fb2 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	60fb      	str	r3, [r7, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	68fb      	ldr	r3, [r7, #12]
}
 8004fb0:	e7ff      	b.n	8004fb2 <I2C_Master_ADDR+0x316>
 8004fb2:	bf00      	nop
 8004fb4:	3744      	adds	r7, #68	; 0x44
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fcc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d02b      	beq.n	8005030 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	781a      	ldrb	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	1c5a      	adds	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d114      	bne.n	8005030 <I2C_SlaveTransmit_TXE+0x72>
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	2b29      	cmp	r3, #41	; 0x29
 800500a:	d111      	bne.n	8005030 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2221      	movs	r2, #33	; 0x21
 8005020:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2228      	movs	r2, #40	; 0x28
 8005026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7ff f9f1 	bl	8004412 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005030:	bf00      	nop
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d011      	beq.n	800506e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	781a      	ldrb	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005064:	b29b      	uxth	r3, r3
 8005066:	3b01      	subs	r3, #1
 8005068:	b29a      	uxth	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005088:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508e:	b29b      	uxth	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d02c      	beq.n	80050ee <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	1c5a      	adds	r2, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d114      	bne.n	80050ee <I2C_SlaveReceive_RXNE+0x74>
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b2a      	cmp	r3, #42	; 0x2a
 80050c8:	d111      	bne.n	80050ee <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2222      	movs	r2, #34	; 0x22
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2228      	movs	r2, #40	; 0x28
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff f99c 	bl	8004426 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d012      	beq.n	800512e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b084      	sub	sp, #16
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005144:	2300      	movs	r3, #0
 8005146:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005154:	2b28      	cmp	r3, #40	; 0x28
 8005156:	d127      	bne.n	80051a8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005166:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	089b      	lsrs	r3, r3, #2
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	09db      	lsrs	r3, r3, #7
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d103      	bne.n	800518c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	81bb      	strh	r3, [r7, #12]
 800518a:	e002      	b.n	8005192 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800519a:	89ba      	ldrh	r2, [r7, #12]
 800519c:	7bfb      	ldrb	r3, [r7, #15]
 800519e:	4619      	mov	r1, r3
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff f94a 	bl	800443a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051a6:	e00e      	b.n	80051c6 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051a8:	2300      	movs	r3, #0
 80051aa:	60bb      	str	r3, [r7, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	60bb      	str	r3, [r7, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	60bb      	str	r3, [r7, #8]
 80051bc:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80051c6:	bf00      	nop
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051de:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80051f0:	2300      	movs	r3, #0
 80051f2:	60bb      	str	r3, [r7, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	60bb      	str	r3, [r7, #8]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800522c:	d172      	bne.n	8005314 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	2b22      	cmp	r3, #34	; 0x22
 8005232:	d002      	beq.n	800523a <I2C_Slave_STOPF+0x6a>
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2b2a      	cmp	r3, #42	; 0x2a
 8005238:	d135      	bne.n	80052a6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	b29a      	uxth	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f043 0204 	orr.w	r2, r3, #4
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800526c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	4618      	mov	r0, r3
 8005274:	f7fe f87a 	bl	800336c <HAL_DMA_GetState>
 8005278:	4603      	mov	r3, r0
 800527a:	2b01      	cmp	r3, #1
 800527c:	d049      	beq.n	8005312 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	4a69      	ldr	r2, [pc, #420]	; (8005428 <I2C_Slave_STOPF+0x258>)
 8005284:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	4618      	mov	r0, r3
 800528c:	f7fd fec2 	bl	8003014 <HAL_DMA_Abort_IT>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d03d      	beq.n	8005312 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052a0:	4610      	mov	r0, r2
 80052a2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052a4:	e035      	b.n	8005312 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d005      	beq.n	80052ca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f043 0204 	orr.w	r2, r3, #4
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fe f844 	bl	800336c <HAL_DMA_GetState>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d014      	beq.n	8005314 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ee:	4a4e      	ldr	r2, [pc, #312]	; (8005428 <I2C_Slave_STOPF+0x258>)
 80052f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fd fe8c 	bl	8003014 <HAL_DMA_Abort_IT>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d008      	beq.n	8005314 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800530c:	4610      	mov	r0, r2
 800530e:	4798      	blx	r3
 8005310:	e000      	b.n	8005314 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005312:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d03e      	beq.n	800539c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b04      	cmp	r3, #4
 800532a:	d112      	bne.n	8005352 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	1c5a      	adds	r2, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535c:	2b40      	cmp	r3, #64	; 0x40
 800535e:	d112      	bne.n	8005386 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f043 0204 	orr.w	r2, r3, #4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f843 	bl	8005430 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80053aa:	e039      	b.n	8005420 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	2b2a      	cmp	r3, #42	; 0x2a
 80053b0:	d109      	bne.n	80053c6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2228      	movs	r2, #40	; 0x28
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7ff f830 	bl	8004426 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b28      	cmp	r3, #40	; 0x28
 80053d0:	d111      	bne.n	80053f6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a15      	ldr	r2, [pc, #84]	; (800542c <I2C_Slave_STOPF+0x25c>)
 80053d6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7ff f831 	bl	8004456 <HAL_I2C_ListenCpltCallback>
}
 80053f4:	e014      	b.n	8005420 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	2b22      	cmp	r3, #34	; 0x22
 80053fc:	d002      	beq.n	8005404 <I2C_Slave_STOPF+0x234>
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	2b22      	cmp	r3, #34	; 0x22
 8005402:	d10d      	bne.n	8005420 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7ff f803 	bl	8004426 <HAL_I2C_SlaveRxCpltCallback>
}
 8005420:	bf00      	nop
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	08005a89 	.word	0x08005a89
 800542c:	ffff0000 	.word	0xffff0000

08005430 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005446:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005448:	7bbb      	ldrb	r3, [r7, #14]
 800544a:	2b10      	cmp	r3, #16
 800544c:	d002      	beq.n	8005454 <I2C_ITError+0x24>
 800544e:	7bbb      	ldrb	r3, [r7, #14]
 8005450:	2b40      	cmp	r3, #64	; 0x40
 8005452:	d10a      	bne.n	800546a <I2C_ITError+0x3a>
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b22      	cmp	r3, #34	; 0x22
 8005458:	d107      	bne.n	800546a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005468:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005470:	2b28      	cmp	r3, #40	; 0x28
 8005472:	d107      	bne.n	8005484 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2228      	movs	r2, #40	; 0x28
 800547e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005482:	e015      	b.n	80054b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005492:	d00a      	beq.n	80054aa <I2C_ITError+0x7a>
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b60      	cmp	r3, #96	; 0x60
 8005498:	d007      	beq.n	80054aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054be:	d162      	bne.n	8005586 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d020      	beq.n	8005520 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	4a6a      	ldr	r2, [pc, #424]	; (800568c <I2C_ITError+0x25c>)
 80054e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fd fd92 	bl	8003014 <HAL_DMA_Abort_IT>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 8089 	beq.w	800560a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0201 	bic.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800551a:	4610      	mov	r0, r2
 800551c:	4798      	blx	r3
 800551e:	e074      	b.n	800560a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005524:	4a59      	ldr	r2, [pc, #356]	; (800568c <I2C_ITError+0x25c>)
 8005526:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	4618      	mov	r0, r3
 800552e:	f7fd fd71 	bl	8003014 <HAL_DMA_Abort_IT>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d068      	beq.n	800560a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b40      	cmp	r3, #64	; 0x40
 8005544:	d10b      	bne.n	800555e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	1c5a      	adds	r2, r3, #1
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
 8005584:	e041      	b.n	800560a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b60      	cmp	r3, #96	; 0x60
 8005590:	d125      	bne.n	80055de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055aa:	2b40      	cmp	r3, #64	; 0x40
 80055ac:	d10b      	bne.n	80055c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	b2d2      	uxtb	r2, r2
 80055ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0201 	bic.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fe ff5b 	bl	8004492 <HAL_I2C_AbortCpltCallback>
 80055dc:	e015      	b.n	800560a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b40      	cmp	r3, #64	; 0x40
 80055ea:	d10b      	bne.n	8005604 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	1c5a      	adds	r2, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7fe ff3a 	bl	800447e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10e      	bne.n	8005638 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005620:	2b00      	cmp	r3, #0
 8005622:	d109      	bne.n	8005638 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005634:	2b00      	cmp	r3, #0
 8005636:	d007      	beq.n	8005648 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005646:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b04      	cmp	r3, #4
 800565a:	d113      	bne.n	8005684 <I2C_ITError+0x254>
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	2b28      	cmp	r3, #40	; 0x28
 8005660:	d110      	bne.n	8005684 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a0a      	ldr	r2, [pc, #40]	; (8005690 <I2C_ITError+0x260>)
 8005666:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f7fe fee9 	bl	8004456 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	08005a89 	.word	0x08005a89
 8005690:	ffff0000 	.word	0xffff0000

08005694 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af02      	add	r7, sp, #8
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	4608      	mov	r0, r1
 800569e:	4611      	mov	r1, r2
 80056a0:	461a      	mov	r2, r3
 80056a2:	4603      	mov	r3, r0
 80056a4:	817b      	strh	r3, [r7, #10]
 80056a6:	460b      	mov	r3, r1
 80056a8:	813b      	strh	r3, [r7, #8]
 80056aa:	4613      	mov	r3, r2
 80056ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 fa7c 	bl	8005bd8 <I2C_WaitOnFlagUntilTimeout>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00d      	beq.n	8005702 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056f4:	d103      	bne.n	80056fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e0aa      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005702:	897b      	ldrh	r3, [r7, #10]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005710:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	6a3a      	ldr	r2, [r7, #32]
 8005716:	4952      	ldr	r1, [pc, #328]	; (8005860 <I2C_RequestMemoryRead+0x1cc>)
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fab4 	bl	8005c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e097      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699b      	ldr	r3, [r3, #24]
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800573e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005740:	6a39      	ldr	r1, [r7, #32]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 fb1e 	bl	8005d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00d      	beq.n	800576a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	2b04      	cmp	r3, #4
 8005754:	d107      	bne.n	8005766 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005764:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e076      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d105      	bne.n	800577c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005770:	893b      	ldrh	r3, [r7, #8]
 8005772:	b2da      	uxtb	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	611a      	str	r2, [r3, #16]
 800577a:	e021      	b.n	80057c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800577c:	893b      	ldrh	r3, [r7, #8]
 800577e:	0a1b      	lsrs	r3, r3, #8
 8005780:	b29b      	uxth	r3, r3
 8005782:	b2da      	uxtb	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800578a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578c:	6a39      	ldr	r1, [r7, #32]
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 faf8 	bl	8005d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00d      	beq.n	80057b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d107      	bne.n	80057b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e050      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057b6:	893b      	ldrh	r3, [r7, #8]
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c2:	6a39      	ldr	r1, [r7, #32]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 fadd 	bl	8005d84 <I2C_WaitOnTXEFlagUntilTimeout>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00d      	beq.n	80057ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d107      	bne.n	80057e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e035      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	2200      	movs	r2, #0
 8005804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	f000 f9e5 	bl	8005bd8 <I2C_WaitOnFlagUntilTimeout>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00d      	beq.n	8005830 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800581e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005822:	d103      	bne.n	800582c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800582a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e013      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005830:	897b      	ldrh	r3, [r7, #10]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f043 0301 	orr.w	r3, r3, #1
 8005838:	b2da      	uxtb	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	6a3a      	ldr	r2, [r7, #32]
 8005844:	4906      	ldr	r1, [pc, #24]	; (8005860 <I2C_RequestMemoryRead+0x1cc>)
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 fa1d 	bl	8005c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	00010002 	.word	0x00010002

08005864 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005878:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005880:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005896:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a4:	2200      	movs	r2, #0
 80058a6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	2200      	movs	r2, #0
 80058b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80058be:	2b21      	cmp	r3, #33	; 0x21
 80058c0:	d007      	beq.n	80058d2 <I2C_DMAXferCplt+0x6e>
 80058c2:	7cfb      	ldrb	r3, [r7, #19]
 80058c4:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80058c8:	2b22      	cmp	r3, #34	; 0x22
 80058ca:	d131      	bne.n	8005930 <I2C_DMAXferCplt+0xcc>
 80058cc:	7cbb      	ldrb	r3, [r7, #18]
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	d12e      	bne.n	8005930 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685a      	ldr	r2, [r3, #4]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058e0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2200      	movs	r2, #0
 80058e6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80058e8:	7cfb      	ldrb	r3, [r7, #19]
 80058ea:	2b29      	cmp	r3, #41	; 0x29
 80058ec:	d10a      	bne.n	8005904 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2221      	movs	r2, #33	; 0x21
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	2228      	movs	r2, #40	; 0x28
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80058fc:	6978      	ldr	r0, [r7, #20]
 80058fe:	f7fe fd88 	bl	8004412 <HAL_I2C_SlaveTxCpltCallback>
 8005902:	e00c      	b.n	800591e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005904:	7cfb      	ldrb	r3, [r7, #19]
 8005906:	2b2a      	cmp	r3, #42	; 0x2a
 8005908:	d109      	bne.n	800591e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2222      	movs	r2, #34	; 0x22
 800590e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2228      	movs	r2, #40	; 0x28
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005918:	6978      	ldr	r0, [r7, #20]
 800591a:	f7fe fd84 	bl	8004426 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800592c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800592e:	e06a      	b.n	8005a06 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d064      	beq.n	8005a06 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	2b01      	cmp	r3, #1
 8005944:	d107      	bne.n	8005956 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005954:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005964:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800596c:	d009      	beq.n	8005982 <I2C_DMAXferCplt+0x11e>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b08      	cmp	r3, #8
 8005972:	d006      	beq.n	8005982 <I2C_DMAXferCplt+0x11e>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800597a:	d002      	beq.n	8005982 <I2C_DMAXferCplt+0x11e>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b20      	cmp	r3, #32
 8005980:	d107      	bne.n	8005992 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005990:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059a0:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059b0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2200      	movs	r2, #0
 80059b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80059c0:	6978      	ldr	r0, [r7, #20]
 80059c2:	f7fe fd5c 	bl	800447e <HAL_I2C_ErrorCallback>
}
 80059c6:	e01e      	b.n	8005a06 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b40      	cmp	r3, #64	; 0x40
 80059da:	d10a      	bne.n	80059f2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	2200      	movs	r2, #0
 80059e8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80059ea:	6978      	ldr	r0, [r7, #20]
 80059ec:	f7fa feae 	bl	800074c <HAL_I2C_MemRxCpltCallback>
}
 80059f0:	e009      	b.n	8005a06 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2212      	movs	r2, #18
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a00:	6978      	ldr	r0, [r7, #20]
 8005a02:	f7fe fcfc 	bl	80043fe <HAL_I2C_MasterRxCpltCallback>
}
 8005a06:	bf00      	nop
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d003      	beq.n	8005a2c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a28:	2200      	movs	r2, #0
 8005a2a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	2200      	movs	r2, #0
 8005a3a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f7fd fca3 	bl	8003388 <HAL_DMA_GetError>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d01b      	beq.n	8005a80 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a56:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	f043 0210 	orr.w	r2, r3, #16
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f7fe fcff 	bl	800447e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a80:	bf00      	nop
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005aa2:	4b4b      	ldr	r3, [pc, #300]	; (8005bd0 <I2C_DMAAbort+0x148>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	08db      	lsrs	r3, r3, #3
 8005aa8:	4a4a      	ldr	r2, [pc, #296]	; (8005bd4 <I2C_DMAAbort+0x14c>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	0a1a      	lsrs	r2, r3, #8
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	00da      	lsls	r2, r3, #3
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	f043 0220 	orr.w	r2, r3, #32
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005ace:	e00a      	b.n	8005ae6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae4:	d0ea      	beq.n	8005abc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af2:	2200      	movs	r2, #0
 8005af4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	2200      	movs	r2, #0
 8005b04:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b14:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b28:	2200      	movs	r2, #0
 8005b2a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	2200      	movs	r2, #0
 8005b3a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b60      	cmp	r3, #96	; 0x60
 8005b56:	d10e      	bne.n	8005b76 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b6e:	6978      	ldr	r0, [r7, #20]
 8005b70:	f7fe fc8f 	bl	8004492 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b74:	e027      	b.n	8005bc6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005b76:	7cfb      	ldrb	r3, [r7, #19]
 8005b78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005b7c:	2b28      	cmp	r3, #40	; 0x28
 8005b7e:	d117      	bne.n	8005bb0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0201 	orr.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b9e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2228      	movs	r2, #40	; 0x28
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bae:	e007      	b.n	8005bc0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005bc0:	6978      	ldr	r0, [r7, #20]
 8005bc2:	f7fe fc5c 	bl	800447e <HAL_I2C_ErrorCallback>
}
 8005bc6:	bf00      	nop
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20000000 	.word	0x20000000
 8005bd4:	14f8b589 	.word	0x14f8b589

08005bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	4613      	mov	r3, r2
 8005be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005be8:	e025      	b.n	8005c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bf0:	d021      	beq.n	8005c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bf2:	f7fb fff5 	bl	8001be0 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d302      	bcc.n	8005c08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d116      	bne.n	8005c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2220      	movs	r2, #32
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	f043 0220 	orr.w	r2, r3, #32
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e023      	b.n	8005c7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	0c1b      	lsrs	r3, r3, #16
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d10d      	bne.n	8005c5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	43da      	mvns	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bf0c      	ite	eq
 8005c52:	2301      	moveq	r3, #1
 8005c54:	2300      	movne	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	e00c      	b.n	8005c76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	43da      	mvns	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4013      	ands	r3, r2
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bf0c      	ite	eq
 8005c6e:	2301      	moveq	r3, #1
 8005c70:	2300      	movne	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	79fb      	ldrb	r3, [r7, #7]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d0b6      	beq.n	8005bea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c94:	e051      	b.n	8005d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca4:	d123      	bne.n	8005cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005cbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f043 0204 	orr.w	r2, r3, #4
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e046      	b.n	8005d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cf4:	d021      	beq.n	8005d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf6:	f7fb ff73 	bl	8001be0 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d302      	bcc.n	8005d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d116      	bne.n	8005d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2220      	movs	r2, #32
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f043 0220 	orr.w	r2, r3, #32
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e020      	b.n	8005d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d10c      	bne.n	8005d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	43da      	mvns	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	bf14      	ite	ne
 8005d56:	2301      	movne	r3, #1
 8005d58:	2300      	moveq	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	e00b      	b.n	8005d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	43da      	mvns	r2, r3
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	bf14      	ite	ne
 8005d70:	2301      	movne	r3, #1
 8005d72:	2300      	moveq	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d18d      	bne.n	8005c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d90:	e02d      	b.n	8005dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d92:	68f8      	ldr	r0, [r7, #12]
 8005d94:	f000 f86a 	bl	8005e6c <I2C_IsAcknowledgeFailed>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e02d      	b.n	8005dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005da8:	d021      	beq.n	8005dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005daa:	f7fb ff19 	bl	8001be0 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d302      	bcc.n	8005dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d116      	bne.n	8005dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f043 0220 	orr.w	r2, r3, #32
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e007      	b.n	8005dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df8:	2b80      	cmp	r3, #128	; 0x80
 8005dfa:	d1ca      	bne.n	8005d92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e14:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	08db      	lsrs	r3, r3, #3
 8005e1a:	4a13      	ldr	r2, [pc, #76]	; (8005e68 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e20:	0a1a      	lsrs	r2, r3, #8
 8005e22:	4613      	mov	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d107      	bne.n	8005e46 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	f043 0220 	orr.w	r2, r3, #32
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e008      	b.n	8005e58 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e54:	d0e9      	beq.n	8005e2a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3714      	adds	r7, #20
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr
 8005e64:	20000000 	.word	0x20000000
 8005e68:	14f8b589 	.word	0x14f8b589

08005e6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e82:	d11b      	bne.n	8005ebc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	f043 0204 	orr.w	r2, r3, #4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005eda:	d103      	bne.n	8005ee4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ee2:	e007      	b.n	8005ef4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005eec:	d102      	bne.n	8005ef4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2208      	movs	r2, #8
 8005ef2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e267      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d075      	beq.n	800600a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f1e:	4b88      	ldr	r3, [pc, #544]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 030c 	and.w	r3, r3, #12
 8005f26:	2b04      	cmp	r3, #4
 8005f28:	d00c      	beq.n	8005f44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f2a:	4b85      	ldr	r3, [pc, #532]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d112      	bne.n	8005f5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f36:	4b82      	ldr	r3, [pc, #520]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f42:	d10b      	bne.n	8005f5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f44:	4b7e      	ldr	r3, [pc, #504]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d05b      	beq.n	8006008 <HAL_RCC_OscConfig+0x108>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d157      	bne.n	8006008 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e242      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f64:	d106      	bne.n	8005f74 <HAL_RCC_OscConfig+0x74>
 8005f66:	4b76      	ldr	r3, [pc, #472]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a75      	ldr	r2, [pc, #468]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f70:	6013      	str	r3, [r2, #0]
 8005f72:	e01d      	b.n	8005fb0 <HAL_RCC_OscConfig+0xb0>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f7c:	d10c      	bne.n	8005f98 <HAL_RCC_OscConfig+0x98>
 8005f7e:	4b70      	ldr	r3, [pc, #448]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a6f      	ldr	r2, [pc, #444]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	4b6d      	ldr	r3, [pc, #436]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a6c      	ldr	r2, [pc, #432]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f94:	6013      	str	r3, [r2, #0]
 8005f96:	e00b      	b.n	8005fb0 <HAL_RCC_OscConfig+0xb0>
 8005f98:	4b69      	ldr	r3, [pc, #420]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a68      	ldr	r2, [pc, #416]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	4b66      	ldr	r3, [pc, #408]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a65      	ldr	r2, [pc, #404]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d013      	beq.n	8005fe0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fb8:	f7fb fe12 	bl	8001be0 <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fc0:	f7fb fe0e 	bl	8001be0 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b64      	cmp	r3, #100	; 0x64
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e207      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fd2:	4b5b      	ldr	r3, [pc, #364]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0f0      	beq.n	8005fc0 <HAL_RCC_OscConfig+0xc0>
 8005fde:	e014      	b.n	800600a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe0:	f7fb fdfe 	bl	8001be0 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fe8:	f7fb fdfa 	bl	8001be0 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b64      	cmp	r3, #100	; 0x64
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e1f3      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ffa:	4b51      	ldr	r3, [pc, #324]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f0      	bne.n	8005fe8 <HAL_RCC_OscConfig+0xe8>
 8006006:	e000      	b.n	800600a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d063      	beq.n	80060de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006016:	4b4a      	ldr	r3, [pc, #296]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f003 030c 	and.w	r3, r3, #12
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00b      	beq.n	800603a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006022:	4b47      	ldr	r3, [pc, #284]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800602a:	2b08      	cmp	r3, #8
 800602c:	d11c      	bne.n	8006068 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800602e:	4b44      	ldr	r3, [pc, #272]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d116      	bne.n	8006068 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800603a:	4b41      	ldr	r3, [pc, #260]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d005      	beq.n	8006052 <HAL_RCC_OscConfig+0x152>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d001      	beq.n	8006052 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e1c7      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006052:	4b3b      	ldr	r3, [pc, #236]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	691b      	ldr	r3, [r3, #16]
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	4937      	ldr	r1, [pc, #220]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8006062:	4313      	orrs	r3, r2
 8006064:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006066:	e03a      	b.n	80060de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d020      	beq.n	80060b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006070:	4b34      	ldr	r3, [pc, #208]	; (8006144 <HAL_RCC_OscConfig+0x244>)
 8006072:	2201      	movs	r2, #1
 8006074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006076:	f7fb fdb3 	bl	8001be0 <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800607c:	e008      	b.n	8006090 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800607e:	f7fb fdaf 	bl	8001be0 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e1a8      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006090:	4b2b      	ldr	r3, [pc, #172]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0f0      	beq.n	800607e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800609c:	4b28      	ldr	r3, [pc, #160]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	4925      	ldr	r1, [pc, #148]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	600b      	str	r3, [r1, #0]
 80060b0:	e015      	b.n	80060de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060b2:	4b24      	ldr	r3, [pc, #144]	; (8006144 <HAL_RCC_OscConfig+0x244>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b8:	f7fb fd92 	bl	8001be0 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060c0:	f7fb fd8e 	bl	8001be0 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e187      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d2:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d036      	beq.n	8006158 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d016      	beq.n	8006120 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f2:	4b15      	ldr	r3, [pc, #84]	; (8006148 <HAL_RCC_OscConfig+0x248>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f8:	f7fb fd72 	bl	8001be0 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006100:	f7fb fd6e 	bl	8001be0 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b02      	cmp	r3, #2
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e167      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006112:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <HAL_RCC_OscConfig+0x240>)
 8006114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0x200>
 800611e:	e01b      	b.n	8006158 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006120:	4b09      	ldr	r3, [pc, #36]	; (8006148 <HAL_RCC_OscConfig+0x248>)
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006126:	f7fb fd5b 	bl	8001be0 <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800612c:	e00e      	b.n	800614c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800612e:	f7fb fd57 	bl	8001be0 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d907      	bls.n	800614c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e150      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
 8006140:	40023800 	.word	0x40023800
 8006144:	42470000 	.word	0x42470000
 8006148:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800614c:	4b88      	ldr	r3, [pc, #544]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 800614e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1ea      	bne.n	800612e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 8097 	beq.w	8006294 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006166:	2300      	movs	r3, #0
 8006168:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800616a:	4b81      	ldr	r3, [pc, #516]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10f      	bne.n	8006196 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	4b7d      	ldr	r3, [pc, #500]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	4a7c      	ldr	r2, [pc, #496]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 8006180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006184:	6413      	str	r3, [r2, #64]	; 0x40
 8006186:	4b7a      	ldr	r3, [pc, #488]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800618e:	60bb      	str	r3, [r7, #8]
 8006190:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006192:	2301      	movs	r3, #1
 8006194:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006196:	4b77      	ldr	r3, [pc, #476]	; (8006374 <HAL_RCC_OscConfig+0x474>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d118      	bne.n	80061d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061a2:	4b74      	ldr	r3, [pc, #464]	; (8006374 <HAL_RCC_OscConfig+0x474>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a73      	ldr	r2, [pc, #460]	; (8006374 <HAL_RCC_OscConfig+0x474>)
 80061a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ae:	f7fb fd17 	bl	8001be0 <HAL_GetTick>
 80061b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b4:	e008      	b.n	80061c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b6:	f7fb fd13 	bl	8001be0 <HAL_GetTick>
 80061ba:	4602      	mov	r2, r0
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e10c      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c8:	4b6a      	ldr	r3, [pc, #424]	; (8006374 <HAL_RCC_OscConfig+0x474>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0f0      	beq.n	80061b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d106      	bne.n	80061ea <HAL_RCC_OscConfig+0x2ea>
 80061dc:	4b64      	ldr	r3, [pc, #400]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 80061de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e0:	4a63      	ldr	r2, [pc, #396]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	6713      	str	r3, [r2, #112]	; 0x70
 80061e8:	e01c      	b.n	8006224 <HAL_RCC_OscConfig+0x324>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	2b05      	cmp	r3, #5
 80061f0:	d10c      	bne.n	800620c <HAL_RCC_OscConfig+0x30c>
 80061f2:	4b5f      	ldr	r3, [pc, #380]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 80061f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f6:	4a5e      	ldr	r2, [pc, #376]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 80061f8:	f043 0304 	orr.w	r3, r3, #4
 80061fc:	6713      	str	r3, [r2, #112]	; 0x70
 80061fe:	4b5c      	ldr	r3, [pc, #368]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 8006200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006202:	4a5b      	ldr	r2, [pc, #364]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 8006204:	f043 0301 	orr.w	r3, r3, #1
 8006208:	6713      	str	r3, [r2, #112]	; 0x70
 800620a:	e00b      	b.n	8006224 <HAL_RCC_OscConfig+0x324>
 800620c:	4b58      	ldr	r3, [pc, #352]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 800620e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006210:	4a57      	ldr	r2, [pc, #348]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 8006212:	f023 0301 	bic.w	r3, r3, #1
 8006216:	6713      	str	r3, [r2, #112]	; 0x70
 8006218:	4b55      	ldr	r3, [pc, #340]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 800621a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621c:	4a54      	ldr	r2, [pc, #336]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 800621e:	f023 0304 	bic.w	r3, r3, #4
 8006222:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d015      	beq.n	8006258 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800622c:	f7fb fcd8 	bl	8001be0 <HAL_GetTick>
 8006230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006232:	e00a      	b.n	800624a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006234:	f7fb fcd4 	bl	8001be0 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006242:	4293      	cmp	r3, r2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e0cb      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800624a:	4b49      	ldr	r3, [pc, #292]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 800624c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0ee      	beq.n	8006234 <HAL_RCC_OscConfig+0x334>
 8006256:	e014      	b.n	8006282 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006258:	f7fb fcc2 	bl	8001be0 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800625e:	e00a      	b.n	8006276 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006260:	f7fb fcbe 	bl	8001be0 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	f241 3288 	movw	r2, #5000	; 0x1388
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e0b5      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006276:	4b3e      	ldr	r3, [pc, #248]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d1ee      	bne.n	8006260 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006282:	7dfb      	ldrb	r3, [r7, #23]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d105      	bne.n	8006294 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006288:	4b39      	ldr	r3, [pc, #228]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	4a38      	ldr	r2, [pc, #224]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 800628e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006292:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 80a1 	beq.w	80063e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800629e:	4b34      	ldr	r3, [pc, #208]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 030c 	and.w	r3, r3, #12
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d05c      	beq.n	8006364 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d141      	bne.n	8006336 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b2:	4b31      	ldr	r3, [pc, #196]	; (8006378 <HAL_RCC_OscConfig+0x478>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b8:	f7fb fc92 	bl	8001be0 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062c0:	f7fb fc8e 	bl	8001be0 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e087      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d2:	4b27      	ldr	r3, [pc, #156]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69da      	ldr	r2, [r3, #28]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ec:	019b      	lsls	r3, r3, #6
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f4:	085b      	lsrs	r3, r3, #1
 80062f6:	3b01      	subs	r3, #1
 80062f8:	041b      	lsls	r3, r3, #16
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006300:	061b      	lsls	r3, r3, #24
 8006302:	491b      	ldr	r1, [pc, #108]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 8006304:	4313      	orrs	r3, r2
 8006306:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006308:	4b1b      	ldr	r3, [pc, #108]	; (8006378 <HAL_RCC_OscConfig+0x478>)
 800630a:	2201      	movs	r2, #1
 800630c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800630e:	f7fb fc67 	bl	8001be0 <HAL_GetTick>
 8006312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006314:	e008      	b.n	8006328 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006316:	f7fb fc63 	bl	8001be0 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e05c      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006328:	4b11      	ldr	r3, [pc, #68]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0f0      	beq.n	8006316 <HAL_RCC_OscConfig+0x416>
 8006334:	e054      	b.n	80063e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006336:	4b10      	ldr	r3, [pc, #64]	; (8006378 <HAL_RCC_OscConfig+0x478>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800633c:	f7fb fc50 	bl	8001be0 <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006344:	f7fb fc4c 	bl	8001be0 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e045      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006356:	4b06      	ldr	r3, [pc, #24]	; (8006370 <HAL_RCC_OscConfig+0x470>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f0      	bne.n	8006344 <HAL_RCC_OscConfig+0x444>
 8006362:	e03d      	b.n	80063e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d107      	bne.n	800637c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e038      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
 8006370:	40023800 	.word	0x40023800
 8006374:	40007000 	.word	0x40007000
 8006378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800637c:	4b1b      	ldr	r3, [pc, #108]	; (80063ec <HAL_RCC_OscConfig+0x4ec>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d028      	beq.n	80063dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006394:	429a      	cmp	r2, r3
 8006396:	d121      	bne.n	80063dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d11a      	bne.n	80063dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063ac:	4013      	ands	r3, r2
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d111      	bne.n	80063dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	085b      	lsrs	r3, r3, #1
 80063c4:	3b01      	subs	r3, #1
 80063c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d107      	bne.n	80063dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063d8:	429a      	cmp	r2, r3
 80063da:	d001      	beq.n	80063e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	40023800 	.word	0x40023800

080063f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e0cc      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006404:	4b68      	ldr	r3, [pc, #416]	; (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d90c      	bls.n	800642c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006412:	4b65      	ldr	r3, [pc, #404]	; (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800641a:	4b63      	ldr	r3, [pc, #396]	; (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d001      	beq.n	800642c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e0b8      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d020      	beq.n	800647a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d005      	beq.n	8006450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006444:	4b59      	ldr	r3, [pc, #356]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	4a58      	ldr	r2, [pc, #352]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800644e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0308 	and.w	r3, r3, #8
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800645c:	4b53      	ldr	r3, [pc, #332]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	4a52      	ldr	r2, [pc, #328]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006468:	4b50      	ldr	r3, [pc, #320]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	494d      	ldr	r1, [pc, #308]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	4313      	orrs	r3, r2
 8006478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d044      	beq.n	8006510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d107      	bne.n	800649e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800648e:	4b47      	ldr	r3, [pc, #284]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d119      	bne.n	80064ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e07f      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d003      	beq.n	80064ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d107      	bne.n	80064be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064ae:	4b3f      	ldr	r3, [pc, #252]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d109      	bne.n	80064ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e06f      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064be:	4b3b      	ldr	r3, [pc, #236]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d101      	bne.n	80064ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e067      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064ce:	4b37      	ldr	r3, [pc, #220]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f023 0203 	bic.w	r2, r3, #3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	4934      	ldr	r1, [pc, #208]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064e0:	f7fb fb7e 	bl	8001be0 <HAL_GetTick>
 80064e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064e6:	e00a      	b.n	80064fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064e8:	f7fb fb7a 	bl	8001be0 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d901      	bls.n	80064fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	e04f      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064fe:	4b2b      	ldr	r3, [pc, #172]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 020c 	and.w	r2, r3, #12
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	429a      	cmp	r2, r3
 800650e:	d1eb      	bne.n	80064e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006510:	4b25      	ldr	r3, [pc, #148]	; (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d20c      	bcs.n	8006538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651e:	4b22      	ldr	r3, [pc, #136]	; (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006526:	4b20      	ldr	r3, [pc, #128]	; (80065a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0307 	and.w	r3, r3, #7
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d001      	beq.n	8006538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e032      	b.n	800659e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d008      	beq.n	8006556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006544:	4b19      	ldr	r3, [pc, #100]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	4916      	ldr	r1, [pc, #88]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	4313      	orrs	r3, r2
 8006554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0308 	and.w	r3, r3, #8
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	490e      	ldr	r1, [pc, #56]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 8006572:	4313      	orrs	r3, r2
 8006574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006576:	f000 f821 	bl	80065bc <HAL_RCC_GetSysClockFreq>
 800657a:	4602      	mov	r2, r0
 800657c:	4b0b      	ldr	r3, [pc, #44]	; (80065ac <HAL_RCC_ClockConfig+0x1bc>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	091b      	lsrs	r3, r3, #4
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	490a      	ldr	r1, [pc, #40]	; (80065b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006588:	5ccb      	ldrb	r3, [r1, r3]
 800658a:	fa22 f303 	lsr.w	r3, r2, r3
 800658e:	4a09      	ldr	r2, [pc, #36]	; (80065b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006592:	4b09      	ldr	r3, [pc, #36]	; (80065b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f7fb f9b2 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	40023c00 	.word	0x40023c00
 80065ac:	40023800 	.word	0x40023800
 80065b0:	080082c8 	.word	0x080082c8
 80065b4:	20000000 	.word	0x20000000
 80065b8:	20000004 	.word	0x20000004

080065bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c0:	b094      	sub	sp, #80	; 0x50
 80065c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	647b      	str	r3, [r7, #68]	; 0x44
 80065c8:	2300      	movs	r3, #0
 80065ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065cc:	2300      	movs	r3, #0
 80065ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80065d4:	4b79      	ldr	r3, [pc, #484]	; (80067bc <HAL_RCC_GetSysClockFreq+0x200>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f003 030c 	and.w	r3, r3, #12
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d00d      	beq.n	80065fc <HAL_RCC_GetSysClockFreq+0x40>
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	f200 80e1 	bhi.w	80067a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <HAL_RCC_GetSysClockFreq+0x34>
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d003      	beq.n	80065f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80065ee:	e0db      	b.n	80067a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065f0:	4b73      	ldr	r3, [pc, #460]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80065f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80065f4:	e0db      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065f6:	4b73      	ldr	r3, [pc, #460]	; (80067c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80065f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065fa:	e0d8      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065fc:	4b6f      	ldr	r3, [pc, #444]	; (80067bc <HAL_RCC_GetSysClockFreq+0x200>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006604:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006606:	4b6d      	ldr	r3, [pc, #436]	; (80067bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d063      	beq.n	80066da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006612:	4b6a      	ldr	r3, [pc, #424]	; (80067bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	099b      	lsrs	r3, r3, #6
 8006618:	2200      	movs	r2, #0
 800661a:	63bb      	str	r3, [r7, #56]	; 0x38
 800661c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006624:	633b      	str	r3, [r7, #48]	; 0x30
 8006626:	2300      	movs	r3, #0
 8006628:	637b      	str	r3, [r7, #52]	; 0x34
 800662a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800662e:	4622      	mov	r2, r4
 8006630:	462b      	mov	r3, r5
 8006632:	f04f 0000 	mov.w	r0, #0
 8006636:	f04f 0100 	mov.w	r1, #0
 800663a:	0159      	lsls	r1, r3, #5
 800663c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006640:	0150      	lsls	r0, r2, #5
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4621      	mov	r1, r4
 8006648:	1a51      	subs	r1, r2, r1
 800664a:	6139      	str	r1, [r7, #16]
 800664c:	4629      	mov	r1, r5
 800664e:	eb63 0301 	sbc.w	r3, r3, r1
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	f04f 0300 	mov.w	r3, #0
 800665c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006660:	4659      	mov	r1, fp
 8006662:	018b      	lsls	r3, r1, #6
 8006664:	4651      	mov	r1, sl
 8006666:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800666a:	4651      	mov	r1, sl
 800666c:	018a      	lsls	r2, r1, #6
 800666e:	4651      	mov	r1, sl
 8006670:	ebb2 0801 	subs.w	r8, r2, r1
 8006674:	4659      	mov	r1, fp
 8006676:	eb63 0901 	sbc.w	r9, r3, r1
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	f04f 0300 	mov.w	r3, #0
 8006682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800668a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800668e:	4690      	mov	r8, r2
 8006690:	4699      	mov	r9, r3
 8006692:	4623      	mov	r3, r4
 8006694:	eb18 0303 	adds.w	r3, r8, r3
 8006698:	60bb      	str	r3, [r7, #8]
 800669a:	462b      	mov	r3, r5
 800669c:	eb49 0303 	adc.w	r3, r9, r3
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	f04f 0300 	mov.w	r3, #0
 80066aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80066ae:	4629      	mov	r1, r5
 80066b0:	024b      	lsls	r3, r1, #9
 80066b2:	4621      	mov	r1, r4
 80066b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80066b8:	4621      	mov	r1, r4
 80066ba:	024a      	lsls	r2, r1, #9
 80066bc:	4610      	mov	r0, r2
 80066be:	4619      	mov	r1, r3
 80066c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c2:	2200      	movs	r2, #0
 80066c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80066cc:	f7f9 fd7c 	bl	80001c8 <__aeabi_uldivmod>
 80066d0:	4602      	mov	r2, r0
 80066d2:	460b      	mov	r3, r1
 80066d4:	4613      	mov	r3, r2
 80066d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d8:	e058      	b.n	800678c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066da:	4b38      	ldr	r3, [pc, #224]	; (80067bc <HAL_RCC_GetSysClockFreq+0x200>)
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	099b      	lsrs	r3, r3, #6
 80066e0:	2200      	movs	r2, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	4611      	mov	r1, r2
 80066e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80066ea:	623b      	str	r3, [r7, #32]
 80066ec:	2300      	movs	r3, #0
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
 80066f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80066f4:	4642      	mov	r2, r8
 80066f6:	464b      	mov	r3, r9
 80066f8:	f04f 0000 	mov.w	r0, #0
 80066fc:	f04f 0100 	mov.w	r1, #0
 8006700:	0159      	lsls	r1, r3, #5
 8006702:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006706:	0150      	lsls	r0, r2, #5
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4641      	mov	r1, r8
 800670e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006712:	4649      	mov	r1, r9
 8006714:	eb63 0b01 	sbc.w	fp, r3, r1
 8006718:	f04f 0200 	mov.w	r2, #0
 800671c:	f04f 0300 	mov.w	r3, #0
 8006720:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006724:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006728:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800672c:	ebb2 040a 	subs.w	r4, r2, sl
 8006730:	eb63 050b 	sbc.w	r5, r3, fp
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	f04f 0300 	mov.w	r3, #0
 800673c:	00eb      	lsls	r3, r5, #3
 800673e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006742:	00e2      	lsls	r2, r4, #3
 8006744:	4614      	mov	r4, r2
 8006746:	461d      	mov	r5, r3
 8006748:	4643      	mov	r3, r8
 800674a:	18e3      	adds	r3, r4, r3
 800674c:	603b      	str	r3, [r7, #0]
 800674e:	464b      	mov	r3, r9
 8006750:	eb45 0303 	adc.w	r3, r5, r3
 8006754:	607b      	str	r3, [r7, #4]
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	f04f 0300 	mov.w	r3, #0
 800675e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006762:	4629      	mov	r1, r5
 8006764:	028b      	lsls	r3, r1, #10
 8006766:	4621      	mov	r1, r4
 8006768:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800676c:	4621      	mov	r1, r4
 800676e:	028a      	lsls	r2, r1, #10
 8006770:	4610      	mov	r0, r2
 8006772:	4619      	mov	r1, r3
 8006774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006776:	2200      	movs	r2, #0
 8006778:	61bb      	str	r3, [r7, #24]
 800677a:	61fa      	str	r2, [r7, #28]
 800677c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006780:	f7f9 fd22 	bl	80001c8 <__aeabi_uldivmod>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4613      	mov	r3, r2
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800678c:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <HAL_RCC_GetSysClockFreq+0x200>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	0c1b      	lsrs	r3, r3, #16
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	3301      	adds	r3, #1
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800679c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800679e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067a6:	e002      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067a8:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80067aa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3750      	adds	r7, #80	; 0x50
 80067b4:	46bd      	mov	sp, r7
 80067b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ba:	bf00      	nop
 80067bc:	40023800 	.word	0x40023800
 80067c0:	00f42400 	.word	0x00f42400
 80067c4:	007a1200 	.word	0x007a1200

080067c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067c8:	b480      	push	{r7}
 80067ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067cc:	4b03      	ldr	r3, [pc, #12]	; (80067dc <HAL_RCC_GetHCLKFreq+0x14>)
 80067ce:	681b      	ldr	r3, [r3, #0]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	20000000 	.word	0x20000000

080067e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067e4:	f7ff fff0 	bl	80067c8 <HAL_RCC_GetHCLKFreq>
 80067e8:	4602      	mov	r2, r0
 80067ea:	4b05      	ldr	r3, [pc, #20]	; (8006800 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	0a9b      	lsrs	r3, r3, #10
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	4903      	ldr	r1, [pc, #12]	; (8006804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067f6:	5ccb      	ldrb	r3, [r1, r3]
 80067f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	40023800 	.word	0x40023800
 8006804:	080082d8 	.word	0x080082d8

08006808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800680c:	f7ff ffdc 	bl	80067c8 <HAL_RCC_GetHCLKFreq>
 8006810:	4602      	mov	r2, r0
 8006812:	4b05      	ldr	r3, [pc, #20]	; (8006828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	0b5b      	lsrs	r3, r3, #13
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	4903      	ldr	r1, [pc, #12]	; (800682c <HAL_RCC_GetPCLK2Freq+0x24>)
 800681e:	5ccb      	ldrb	r3, [r1, r3]
 8006820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006824:	4618      	mov	r0, r3
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40023800 	.word	0x40023800
 800682c:	080082d8 	.word	0x080082d8

08006830 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	220f      	movs	r2, #15
 800683e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006840:	4b12      	ldr	r3, [pc, #72]	; (800688c <HAL_RCC_GetClockConfig+0x5c>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 0203 	and.w	r2, r3, #3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800684c:	4b0f      	ldr	r3, [pc, #60]	; (800688c <HAL_RCC_GetClockConfig+0x5c>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006858:	4b0c      	ldr	r3, [pc, #48]	; (800688c <HAL_RCC_GetClockConfig+0x5c>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006864:	4b09      	ldr	r3, [pc, #36]	; (800688c <HAL_RCC_GetClockConfig+0x5c>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	08db      	lsrs	r3, r3, #3
 800686a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006872:	4b07      	ldr	r3, [pc, #28]	; (8006890 <HAL_RCC_GetClockConfig+0x60>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0207 	and.w	r2, r3, #7
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	601a      	str	r2, [r3, #0]
}
 800687e:	bf00      	nop
 8006880:	370c      	adds	r7, #12
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	40023800 	.word	0x40023800
 8006890:	40023c00 	.word	0x40023c00

08006894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e041      	b.n	800692a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fa ff44 	bl	8001748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3304      	adds	r3, #4
 80068d0:	4619      	mov	r1, r3
 80068d2:	4610      	mov	r0, r2
 80068d4:	f000 fa96 	bl	8006e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b01      	cmp	r3, #1
 8006946:	d001      	beq.n	800694c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e04e      	b.n	80069ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2202      	movs	r2, #2
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f042 0201 	orr.w	r2, r2, #1
 8006962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a23      	ldr	r2, [pc, #140]	; (80069f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d022      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006976:	d01d      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a1f      	ldr	r2, [pc, #124]	; (80069fc <HAL_TIM_Base_Start_IT+0xc8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d018      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a1e      	ldr	r2, [pc, #120]	; (8006a00 <HAL_TIM_Base_Start_IT+0xcc>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d013      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a1c      	ldr	r2, [pc, #112]	; (8006a04 <HAL_TIM_Base_Start_IT+0xd0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00e      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1b      	ldr	r2, [pc, #108]	; (8006a08 <HAL_TIM_Base_Start_IT+0xd4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d009      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a19      	ldr	r2, [pc, #100]	; (8006a0c <HAL_TIM_Base_Start_IT+0xd8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d004      	beq.n	80069b4 <HAL_TIM_Base_Start_IT+0x80>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a18      	ldr	r2, [pc, #96]	; (8006a10 <HAL_TIM_Base_Start_IT+0xdc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d111      	bne.n	80069d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 0307 	and.w	r3, r3, #7
 80069be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2b06      	cmp	r3, #6
 80069c4:	d010      	beq.n	80069e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f042 0201 	orr.w	r2, r2, #1
 80069d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d6:	e007      	b.n	80069e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	40010000 	.word	0x40010000
 80069fc:	40000400 	.word	0x40000400
 8006a00:	40000800 	.word	0x40000800
 8006a04:	40000c00 	.word	0x40000c00
 8006a08:	40010400 	.word	0x40010400
 8006a0c:	40014000 	.word	0x40014000
 8006a10:	40001800 	.word	0x40001800

08006a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d122      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d11b      	bne.n	8006a70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0202 	mvn.w	r2, #2
 8006a40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f9b5 	bl	8006dc6 <HAL_TIM_IC_CaptureCallback>
 8006a5c:	e005      	b.n	8006a6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 f9a7 	bl	8006db2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f9b8 	bl	8006dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d122      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d11b      	bne.n	8006ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f06f 0204 	mvn.w	r2, #4
 8006a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f98b 	bl	8006dc6 <HAL_TIM_IC_CaptureCallback>
 8006ab0:	e005      	b.n	8006abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f97d 	bl	8006db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f98e 	bl	8006dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d122      	bne.n	8006b18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d11b      	bne.n	8006b18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0208 	mvn.w	r2, #8
 8006ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2204      	movs	r2, #4
 8006aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	f003 0303 	and.w	r3, r3, #3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f961 	bl	8006dc6 <HAL_TIM_IC_CaptureCallback>
 8006b04:	e005      	b.n	8006b12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 f953 	bl	8006db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f964 	bl	8006dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	f003 0310 	and.w	r3, r3, #16
 8006b22:	2b10      	cmp	r3, #16
 8006b24:	d122      	bne.n	8006b6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f003 0310 	and.w	r3, r3, #16
 8006b30:	2b10      	cmp	r3, #16
 8006b32:	d11b      	bne.n	8006b6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f06f 0210 	mvn.w	r2, #16
 8006b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2208      	movs	r2, #8
 8006b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f937 	bl	8006dc6 <HAL_TIM_IC_CaptureCallback>
 8006b58:	e005      	b.n	8006b66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f929 	bl	8006db2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f93a 	bl	8006dda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d10e      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d107      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f06f 0201 	mvn.w	r2, #1
 8006b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7fa fb3a 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba2:	2b80      	cmp	r3, #128	; 0x80
 8006ba4:	d10e      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb0:	2b80      	cmp	r3, #128	; 0x80
 8006bb2:	d107      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fae0 	bl	8007184 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bce:	2b40      	cmp	r3, #64	; 0x40
 8006bd0:	d10e      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bdc:	2b40      	cmp	r3, #64	; 0x40
 8006bde:	d107      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f8ff 	bl	8006dee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b20      	cmp	r3, #32
 8006bfc:	d10e      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d107      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0220 	mvn.w	r2, #32
 8006c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 faaa 	bl	8007170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c1c:	bf00      	nop
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_TIM_ConfigClockSource+0x1c>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e0b4      	b.n	8006daa <HAL_TIM_ConfigClockSource+0x186>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c78:	d03e      	beq.n	8006cf8 <HAL_TIM_ConfigClockSource+0xd4>
 8006c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c7e:	f200 8087 	bhi.w	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c86:	f000 8086 	beq.w	8006d96 <HAL_TIM_ConfigClockSource+0x172>
 8006c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8e:	d87f      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006c90:	2b70      	cmp	r3, #112	; 0x70
 8006c92:	d01a      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0xa6>
 8006c94:	2b70      	cmp	r3, #112	; 0x70
 8006c96:	d87b      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006c98:	2b60      	cmp	r3, #96	; 0x60
 8006c9a:	d050      	beq.n	8006d3e <HAL_TIM_ConfigClockSource+0x11a>
 8006c9c:	2b60      	cmp	r3, #96	; 0x60
 8006c9e:	d877      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ca0:	2b50      	cmp	r3, #80	; 0x50
 8006ca2:	d03c      	beq.n	8006d1e <HAL_TIM_ConfigClockSource+0xfa>
 8006ca4:	2b50      	cmp	r3, #80	; 0x50
 8006ca6:	d873      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ca8:	2b40      	cmp	r3, #64	; 0x40
 8006caa:	d058      	beq.n	8006d5e <HAL_TIM_ConfigClockSource+0x13a>
 8006cac:	2b40      	cmp	r3, #64	; 0x40
 8006cae:	d86f      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006cb0:	2b30      	cmp	r3, #48	; 0x30
 8006cb2:	d064      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x15a>
 8006cb4:	2b30      	cmp	r3, #48	; 0x30
 8006cb6:	d86b      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006cb8:	2b20      	cmp	r3, #32
 8006cba:	d060      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x15a>
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	d867      	bhi.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d05c      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x15a>
 8006cc4:	2b10      	cmp	r3, #16
 8006cc6:	d05a      	beq.n	8006d7e <HAL_TIM_ConfigClockSource+0x15a>
 8006cc8:	e062      	b.n	8006d90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6818      	ldr	r0, [r3, #0]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	6899      	ldr	r1, [r3, #8]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f000 f9ad 	bl	8007038 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	609a      	str	r2, [r3, #8]
      break;
 8006cf6:	e04f      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6818      	ldr	r0, [r3, #0]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	6899      	ldr	r1, [r3, #8]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f000 f996 	bl	8007038 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d1a:	609a      	str	r2, [r3, #8]
      break;
 8006d1c:	e03c      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	6859      	ldr	r1, [r3, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f000 f90a 	bl	8006f44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2150      	movs	r1, #80	; 0x50
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 f963 	bl	8007002 <TIM_ITRx_SetConfig>
      break;
 8006d3c:	e02c      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	6859      	ldr	r1, [r3, #4]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	f000 f929 	bl	8006fa2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2160      	movs	r1, #96	; 0x60
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 f953 	bl	8007002 <TIM_ITRx_SetConfig>
      break;
 8006d5c:	e01c      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	6859      	ldr	r1, [r3, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	f000 f8ea 	bl	8006f44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2140      	movs	r1, #64	; 0x40
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 f943 	bl	8007002 <TIM_ITRx_SetConfig>
      break;
 8006d7c:	e00c      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f000 f93a 	bl	8007002 <TIM_ITRx_SetConfig>
      break;
 8006d8e:	e003      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	73fb      	strb	r3, [r7, #15]
      break;
 8006d94:	e000      	b.n	8006d98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006d96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dba:	bf00      	nop
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b083      	sub	sp, #12
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006de2:	bf00      	nop
 8006de4:	370c      	adds	r7, #12
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
	...

08006e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a40      	ldr	r2, [pc, #256]	; (8006f18 <TIM_Base_SetConfig+0x114>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d013      	beq.n	8006e44 <TIM_Base_SetConfig+0x40>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e22:	d00f      	beq.n	8006e44 <TIM_Base_SetConfig+0x40>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a3d      	ldr	r2, [pc, #244]	; (8006f1c <TIM_Base_SetConfig+0x118>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00b      	beq.n	8006e44 <TIM_Base_SetConfig+0x40>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a3c      	ldr	r2, [pc, #240]	; (8006f20 <TIM_Base_SetConfig+0x11c>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d007      	beq.n	8006e44 <TIM_Base_SetConfig+0x40>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a3b      	ldr	r2, [pc, #236]	; (8006f24 <TIM_Base_SetConfig+0x120>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d003      	beq.n	8006e44 <TIM_Base_SetConfig+0x40>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a3a      	ldr	r2, [pc, #232]	; (8006f28 <TIM_Base_SetConfig+0x124>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d108      	bne.n	8006e56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a2f      	ldr	r2, [pc, #188]	; (8006f18 <TIM_Base_SetConfig+0x114>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d02b      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e64:	d027      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a2c      	ldr	r2, [pc, #176]	; (8006f1c <TIM_Base_SetConfig+0x118>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d023      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a2b      	ldr	r2, [pc, #172]	; (8006f20 <TIM_Base_SetConfig+0x11c>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d01f      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a2a      	ldr	r2, [pc, #168]	; (8006f24 <TIM_Base_SetConfig+0x120>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d01b      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a29      	ldr	r2, [pc, #164]	; (8006f28 <TIM_Base_SetConfig+0x124>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d017      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a28      	ldr	r2, [pc, #160]	; (8006f2c <TIM_Base_SetConfig+0x128>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d013      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a27      	ldr	r2, [pc, #156]	; (8006f30 <TIM_Base_SetConfig+0x12c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00f      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a26      	ldr	r2, [pc, #152]	; (8006f34 <TIM_Base_SetConfig+0x130>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00b      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a25      	ldr	r2, [pc, #148]	; (8006f38 <TIM_Base_SetConfig+0x134>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d007      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a24      	ldr	r2, [pc, #144]	; (8006f3c <TIM_Base_SetConfig+0x138>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_Base_SetConfig+0xb2>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a23      	ldr	r2, [pc, #140]	; (8006f40 <TIM_Base_SetConfig+0x13c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d108      	bne.n	8006ec8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a0a      	ldr	r2, [pc, #40]	; (8006f18 <TIM_Base_SetConfig+0x114>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d003      	beq.n	8006efc <TIM_Base_SetConfig+0xf8>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a0c      	ldr	r2, [pc, #48]	; (8006f28 <TIM_Base_SetConfig+0x124>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d103      	bne.n	8006f04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	691a      	ldr	r2, [r3, #16]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	615a      	str	r2, [r3, #20]
}
 8006f0a:	bf00      	nop
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40010000 	.word	0x40010000
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40000c00 	.word	0x40000c00
 8006f28:	40010400 	.word	0x40010400
 8006f2c:	40014000 	.word	0x40014000
 8006f30:	40014400 	.word	0x40014400
 8006f34:	40014800 	.word	0x40014800
 8006f38:	40001800 	.word	0x40001800
 8006f3c:	40001c00 	.word	0x40001c00
 8006f40:	40002000 	.word	0x40002000

08006f44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	f023 0201 	bic.w	r2, r3, #1
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	699b      	ldr	r3, [r3, #24]
 8006f66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	011b      	lsls	r3, r3, #4
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f023 030a 	bic.w	r3, r3, #10
 8006f80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	621a      	str	r2, [r3, #32]
}
 8006f96:	bf00      	nop
 8006f98:	371c      	adds	r7, #28
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fa2:	b480      	push	{r7}
 8006fa4:	b087      	sub	sp, #28
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	f023 0210 	bic.w	r2, r3, #16
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	031b      	lsls	r3, r3, #12
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	011b      	lsls	r3, r3, #4
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007002:	b480      	push	{r7}
 8007004:	b085      	sub	sp, #20
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4313      	orrs	r3, r2
 8007020:	f043 0307 	orr.w	r3, r3, #7
 8007024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	609a      	str	r2, [r3, #8]
}
 800702c:	bf00      	nop
 800702e:	3714      	adds	r7, #20
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr

08007038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007038:	b480      	push	{r7}
 800703a:	b087      	sub	sp, #28
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	021a      	lsls	r2, r3, #8
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	431a      	orrs	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4313      	orrs	r3, r2
 8007060:	697a      	ldr	r2, [r7, #20]
 8007062:	4313      	orrs	r3, r2
 8007064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	609a      	str	r2, [r3, #8]
}
 800706c:	bf00      	nop
 800706e:	371c      	adds	r7, #28
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800708c:	2302      	movs	r3, #2
 800708e:	e05a      	b.n	8007146 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a21      	ldr	r2, [pc, #132]	; (8007154 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d022      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070dc:	d01d      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1d      	ldr	r2, [pc, #116]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d018      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a1b      	ldr	r2, [pc, #108]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d013      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a1a      	ldr	r2, [pc, #104]	; (8007160 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00e      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a18      	ldr	r2, [pc, #96]	; (8007164 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d009      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a17      	ldr	r2, [pc, #92]	; (8007168 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d004      	beq.n	800711a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a15      	ldr	r2, [pc, #84]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d10c      	bne.n	8007134 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007120:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	4313      	orrs	r3, r2
 800712a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68ba      	ldr	r2, [r7, #8]
 8007132:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	40010000 	.word	0x40010000
 8007158:	40000400 	.word	0x40000400
 800715c:	40000800 	.word	0x40000800
 8007160:	40000c00 	.word	0x40000c00
 8007164:	40010400 	.word	0x40010400
 8007168:	40014000 	.word	0x40014000
 800716c:	40001800 	.word	0x40001800

08007170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e03f      	b.n	800722a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d106      	bne.n	80071c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fa fb1c 	bl	80017fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2224      	movs	r2, #36	; 0x24
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fdc7 	bl	8007d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	695a      	ldr	r2, [r3, #20]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007200:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007210:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2220      	movs	r2, #32
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08c      	sub	sp, #48	; 0x30
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	4613      	mov	r3, r2
 8007240:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b20      	cmp	r3, #32
 800724c:	d165      	bne.n	800731a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <HAL_UART_Transmit_DMA+0x26>
 8007254:	88fb      	ldrh	r3, [r7, #6]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e05e      	b.n	800731c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_UART_Transmit_DMA+0x38>
 8007268:	2302      	movs	r3, #2
 800726a:	e057      	b.n	800731c <HAL_UART_Transmit_DMA+0xe8>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	88fa      	ldrh	r2, [r7, #6]
 800727e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	88fa      	ldrh	r2, [r7, #6]
 8007284:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2221      	movs	r2, #33	; 0x21
 8007290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007298:	4a22      	ldr	r2, [pc, #136]	; (8007324 <HAL_UART_Transmit_DMA+0xf0>)
 800729a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a0:	4a21      	ldr	r2, [pc, #132]	; (8007328 <HAL_UART_Transmit_DMA+0xf4>)
 80072a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a8:	4a20      	ldr	r2, [pc, #128]	; (800732c <HAL_UART_Transmit_DMA+0xf8>)
 80072aa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072b0:	2200      	movs	r2, #0
 80072b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80072b4:	f107 0308 	add.w	r3, r7, #8
 80072b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80072be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c0:	6819      	ldr	r1, [r3, #0]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3304      	adds	r3, #4
 80072c8:	461a      	mov	r2, r3
 80072ca:	88fb      	ldrh	r3, [r7, #6]
 80072cc:	f7fb fdda 	bl	8002e84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072d8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3314      	adds	r3, #20
 80072e8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	617b      	str	r3, [r7, #20]
   return(result);
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3314      	adds	r3, #20
 8007300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007302:	627a      	str	r2, [r7, #36]	; 0x24
 8007304:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6a39      	ldr	r1, [r7, #32]
 8007308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e5      	bne.n	80072e2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007316:	2300      	movs	r3, #0
 8007318:	e000      	b.n	800731c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800731a:	2302      	movs	r3, #2
  }
}
 800731c:	4618      	mov	r0, r3
 800731e:	3730      	adds	r7, #48	; 0x30
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	080078a1 	.word	0x080078a1
 8007328:	0800793b 	.word	0x0800793b
 800732c:	08007957 	.word	0x08007957

08007330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b0ba      	sub	sp, #232	; 0xe8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007356:	2300      	movs	r3, #0
 8007358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800735c:	2300      	movs	r3, #0
 800735e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800736e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10f      	bne.n	8007396 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	d009      	beq.n	8007396 <HAL_UART_IRQHandler+0x66>
 8007382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fc32 	bl	8007bf8 <UART_Receive_IT>
      return;
 8007394:	e256      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80de 	beq.w	800755c <HAL_UART_IRQHandler+0x22c>
 80073a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d106      	bne.n	80073ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80073ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80d1 	beq.w	800755c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80073ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00b      	beq.n	80073de <HAL_UART_IRQHandler+0xae>
 80073c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f043 0201 	orr.w	r2, r3, #1
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00b      	beq.n	8007402 <HAL_UART_IRQHandler+0xd2>
 80073ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	f043 0202 	orr.w	r2, r3, #2
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <HAL_UART_IRQHandler+0xf6>
 800740e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d005      	beq.n	8007426 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f043 0204 	orr.w	r2, r3, #4
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800742a:	f003 0308 	and.w	r3, r3, #8
 800742e:	2b00      	cmp	r3, #0
 8007430:	d011      	beq.n	8007456 <HAL_UART_IRQHandler+0x126>
 8007432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007436:	f003 0320 	and.w	r3, r3, #32
 800743a:	2b00      	cmp	r3, #0
 800743c:	d105      	bne.n	800744a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800743e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f043 0208 	orr.w	r2, r3, #8
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 81ed 	beq.w	800783a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <HAL_UART_IRQHandler+0x14e>
 800746c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007470:	f003 0320 	and.w	r3, r3, #32
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fbbd 	bl	8007bf8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007488:	2b40      	cmp	r3, #64	; 0x40
 800748a:	bf0c      	ite	eq
 800748c:	2301      	moveq	r3, #1
 800748e:	2300      	movne	r3, #0
 8007490:	b2db      	uxtb	r3, r3
 8007492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	f003 0308 	and.w	r3, r3, #8
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d103      	bne.n	80074aa <HAL_UART_IRQHandler+0x17a>
 80074a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d04f      	beq.n	800754a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 fac5 	bl	8007a3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d141      	bne.n	8007542 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3314      	adds	r3, #20
 80074c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3314      	adds	r3, #20
 80074e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1d9      	bne.n	80074be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750e:	2b00      	cmp	r3, #0
 8007510:	d013      	beq.n	800753a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007516:	4a7d      	ldr	r2, [pc, #500]	; (800770c <HAL_UART_IRQHandler+0x3dc>)
 8007518:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	4618      	mov	r0, r3
 8007520:	f7fb fd78 	bl	8003014 <HAL_DMA_Abort_IT>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d016      	beq.n	8007558 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007534:	4610      	mov	r0, r2
 8007536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007538:	e00e      	b.n	8007558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 f99a 	bl	8007874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007540:	e00a      	b.n	8007558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f996 	bl	8007874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007548:	e006      	b.n	8007558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f992 	bl	8007874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007556:	e170      	b.n	800783a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007558:	bf00      	nop
    return;
 800755a:	e16e      	b.n	800783a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	2b01      	cmp	r3, #1
 8007562:	f040 814a 	bne.w	80077fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756a:	f003 0310 	and.w	r3, r3, #16
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 8143 	beq.w	80077fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 813c 	beq.w	80077fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007582:	2300      	movs	r3, #0
 8007584:	60bb      	str	r3, [r7, #8]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	60bb      	str	r3, [r7, #8]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	60bb      	str	r3, [r7, #8]
 8007596:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a2:	2b40      	cmp	r3, #64	; 0x40
 80075a4:	f040 80b4 	bne.w	8007710 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8140 	beq.w	800783e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075c6:	429a      	cmp	r2, r3
 80075c8:	f080 8139 	bcs.w	800783e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075de:	f000 8088 	beq.w	80076f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	330c      	adds	r3, #12
 80075e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	330c      	adds	r3, #12
 800760a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800760e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800761a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1d9      	bne.n	80075e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3314      	adds	r3, #20
 8007634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800763e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007640:	f023 0301 	bic.w	r3, r3, #1
 8007644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3314      	adds	r3, #20
 800764e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007652:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007656:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800765a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e1      	bne.n	800762e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3314      	adds	r3, #20
 8007670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800767a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800767c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3314      	adds	r3, #20
 800768a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800768e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800769c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e3      	bne.n	800766a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	330c      	adds	r3, #12
 80076b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c2:	f023 0310 	bic.w	r3, r3, #16
 80076c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	330c      	adds	r3, #12
 80076d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80076d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80076d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e3      	bne.n	80076b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fb fc21 	bl	8002f34 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	1ad3      	subs	r3, r2, r3
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f8c0 	bl	8007888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007708:	e099      	b.n	800783e <HAL_UART_IRQHandler+0x50e>
 800770a:	bf00      	nop
 800770c:	08007b01 	.word	0x08007b01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007718:	b29b      	uxth	r3, r3
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	f000 808b 	beq.w	8007842 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800772c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 8086 	beq.w	8007842 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800774c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800775a:	647a      	str	r2, [r7, #68]	; 0x44
 800775c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e3      	bne.n	8007736 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	3314      	adds	r3, #20
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	623b      	str	r3, [r7, #32]
   return(result);
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	f023 0301 	bic.w	r3, r3, #1
 8007784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3314      	adds	r3, #20
 800778e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007792:	633a      	str	r2, [r7, #48]	; 0x30
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779a:	e841 2300 	strex	r3, r2, [r1]
 800779e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1e3      	bne.n	800776e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2220      	movs	r2, #32
 80077aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	330c      	adds	r3, #12
 80077ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	e853 3f00 	ldrex	r3, [r3]
 80077c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0310 	bic.w	r3, r3, #16
 80077ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	330c      	adds	r3, #12
 80077d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80077d8:	61fa      	str	r2, [r7, #28]
 80077da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	69b9      	ldr	r1, [r7, #24]
 80077de:	69fa      	ldr	r2, [r7, #28]
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	617b      	str	r3, [r7, #20]
   return(result);
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e3      	bne.n	80077b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f848 	bl	8007888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077f8:	e023      	b.n	8007842 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80077fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007802:	2b00      	cmp	r3, #0
 8007804:	d009      	beq.n	800781a <HAL_UART_IRQHandler+0x4ea>
 8007806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800780a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f988 	bl	8007b28 <UART_Transmit_IT>
    return;
 8007818:	e014      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800781a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00e      	beq.n	8007844 <HAL_UART_IRQHandler+0x514>
 8007826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d008      	beq.n	8007844 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f9c8 	bl	8007bc8 <UART_EndTransmit_IT>
    return;
 8007838:	e004      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
    return;
 800783a:	bf00      	nop
 800783c:	e002      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
      return;
 800783e:	bf00      	nop
 8007840:	e000      	b.n	8007844 <HAL_UART_IRQHandler+0x514>
      return;
 8007842:	bf00      	nop
  }
}
 8007844:	37e8      	adds	r7, #232	; 0xe8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop

0800784c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007868:	bf00      	nop
 800786a:	370c      	adds	r7, #12
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	460b      	mov	r3, r1
 8007892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b090      	sub	sp, #64	; 0x40
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d137      	bne.n	800792c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80078bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078be:	2200      	movs	r2, #0
 80078c0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3314      	adds	r3, #20
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	623b      	str	r3, [r7, #32]
   return(result);
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80078da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3314      	adds	r3, #20
 80078e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078e2:	633a      	str	r2, [r7, #48]	; 0x30
 80078e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e5      	bne.n	80078c2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	330c      	adds	r3, #12
 80078fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	60fb      	str	r3, [r7, #12]
   return(result);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800790c:	637b      	str	r3, [r7, #52]	; 0x34
 800790e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	330c      	adds	r3, #12
 8007914:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007916:	61fa      	str	r2, [r7, #28]
 8007918:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	69b9      	ldr	r1, [r7, #24]
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	617b      	str	r3, [r7, #20]
   return(result);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e5      	bne.n	80078f6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800792a:	e002      	b.n	8007932 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800792c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800792e:	f7f8 ff23 	bl	8000778 <HAL_UART_TxCpltCallback>
}
 8007932:	bf00      	nop
 8007934:	3740      	adds	r7, #64	; 0x40
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007946:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f7ff ff7f 	bl	800784c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800794e:	bf00      	nop
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800795e:	2300      	movs	r3, #0
 8007960:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007966:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007972:	2b80      	cmp	r3, #128	; 0x80
 8007974:	bf0c      	ite	eq
 8007976:	2301      	moveq	r3, #1
 8007978:	2300      	movne	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007984:	b2db      	uxtb	r3, r3
 8007986:	2b21      	cmp	r3, #33	; 0x21
 8007988:	d108      	bne.n	800799c <UART_DMAError+0x46>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d005      	beq.n	800799c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2200      	movs	r2, #0
 8007994:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007996:	68b8      	ldr	r0, [r7, #8]
 8007998:	f000 f827 	bl	80079ea <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a6:	2b40      	cmp	r3, #64	; 0x40
 80079a8:	bf0c      	ite	eq
 80079aa:	2301      	moveq	r3, #1
 80079ac:	2300      	movne	r3, #0
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b22      	cmp	r3, #34	; 0x22
 80079bc:	d108      	bne.n	80079d0 <UART_DMAError+0x7a>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2200      	movs	r2, #0
 80079c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80079ca:	68b8      	ldr	r0, [r7, #8]
 80079cc:	f000 f835 	bl	8007a3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d4:	f043 0210 	orr.w	r2, r3, #16
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079dc:	68b8      	ldr	r0, [r7, #8]
 80079de:	f7ff ff49 	bl	8007874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079e2:	bf00      	nop
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b089      	sub	sp, #36	; 0x24
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	e853 3f00 	ldrex	r3, [r3]
 8007a00:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a08:	61fb      	str	r3, [r7, #28]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	330c      	adds	r3, #12
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	61ba      	str	r2, [r7, #24]
 8007a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	6979      	ldr	r1, [r7, #20]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	e841 2300 	strex	r3, r2, [r1]
 8007a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1e5      	bne.n	80079f2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2220      	movs	r2, #32
 8007a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007a2e:	bf00      	nop
 8007a30:	3724      	adds	r7, #36	; 0x24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b095      	sub	sp, #84	; 0x54
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	330c      	adds	r3, #12
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	330c      	adds	r3, #12
 8007a60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a62:	643a      	str	r2, [r7, #64]	; 0x40
 8007a64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e5      	bne.n	8007a42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3314      	adds	r3, #20
 8007a7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	f023 0301 	bic.w	r3, r3, #1
 8007a8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3314      	adds	r3, #20
 8007a94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e5      	bne.n	8007a76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d119      	bne.n	8007ae6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	330c      	adds	r3, #12
 8007ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	f023 0310 	bic.w	r3, r3, #16
 8007ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	330c      	adds	r3, #12
 8007ad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ad2:	61ba      	str	r2, [r7, #24]
 8007ad4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad6:	6979      	ldr	r1, [r7, #20]
 8007ad8:	69ba      	ldr	r2, [r7, #24]
 8007ada:	e841 2300 	strex	r3, r2, [r1]
 8007ade:	613b      	str	r3, [r7, #16]
   return(result);
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d1e5      	bne.n	8007ab2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2220      	movs	r2, #32
 8007aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007af4:	bf00      	nop
 8007af6:	3754      	adds	r7, #84	; 0x54
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2200      	movs	r2, #0
 8007b18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f7ff feaa 	bl	8007874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b20:	bf00      	nop
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b21      	cmp	r3, #33	; 0x21
 8007b3a:	d13e      	bne.n	8007bba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b44:	d114      	bne.n	8007b70 <UART_Transmit_IT+0x48>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d110      	bne.n	8007b70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	1c9a      	adds	r2, r3, #2
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	621a      	str	r2, [r3, #32]
 8007b6e:	e008      	b.n	8007b82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	1c59      	adds	r1, r3, #1
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	6211      	str	r1, [r2, #32]
 8007b7a:	781a      	ldrb	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	4619      	mov	r1, r3
 8007b90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10f      	bne.n	8007bb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	68da      	ldr	r2, [r3, #12]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ba4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	e000      	b.n	8007bbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bba:	2302      	movs	r3, #2
  }
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68da      	ldr	r2, [r3, #12]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bde:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7f8 fdc5 	bl	8000778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08c      	sub	sp, #48	; 0x30
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b22      	cmp	r3, #34	; 0x22
 8007c0a:	f040 80ab 	bne.w	8007d64 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c16:	d117      	bne.n	8007c48 <UART_Receive_IT+0x50>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d113      	bne.n	8007c48 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c28:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c40:	1c9a      	adds	r2, r3, #2
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	629a      	str	r2, [r3, #40]	; 0x28
 8007c46:	e026      	b.n	8007c96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c5a:	d007      	beq.n	8007c6c <UART_Receive_IT+0x74>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10a      	bne.n	8007c7a <UART_Receive_IT+0x82>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d106      	bne.n	8007c7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	e008      	b.n	8007c8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	3b01      	subs	r3, #1
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d15a      	bne.n	8007d60 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f022 0220 	bic.w	r2, r2, #32
 8007cb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	695a      	ldr	r2, [r3, #20]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0201 	bic.w	r2, r2, #1
 8007cd8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d135      	bne.n	8007d56 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	330c      	adds	r3, #12
 8007cf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	e853 3f00 	ldrex	r3, [r3]
 8007cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f023 0310 	bic.w	r3, r3, #16
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	330c      	adds	r3, #12
 8007d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d10:	623a      	str	r2, [r7, #32]
 8007d12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	69f9      	ldr	r1, [r7, #28]
 8007d16:	6a3a      	ldr	r2, [r7, #32]
 8007d18:	e841 2300 	strex	r3, r2, [r1]
 8007d1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e5      	bne.n	8007cf0 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0310 	and.w	r3, r3, #16
 8007d2e:	2b10      	cmp	r3, #16
 8007d30:	d10a      	bne.n	8007d48 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7ff fd9a 	bl	8007888 <HAL_UARTEx_RxEventCallback>
 8007d54:	e002      	b.n	8007d5c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff fd82 	bl	8007860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e002      	b.n	8007d66 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	e000      	b.n	8007d66 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007d64:	2302      	movs	r3, #2
  }
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3730      	adds	r7, #48	; 0x30
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d74:	b0c0      	sub	sp, #256	; 0x100
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d8c:	68d9      	ldr	r1, [r3, #12]
 8007d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	ea40 0301 	orr.w	r3, r0, r1
 8007d98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	431a      	orrs	r2, r3
 8007da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	431a      	orrs	r2, r3
 8007db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007dc8:	f021 010c 	bic.w	r1, r1, #12
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dd6:	430b      	orrs	r3, r1
 8007dd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dea:	6999      	ldr	r1, [r3, #24]
 8007dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	ea40 0301 	orr.w	r3, r0, r1
 8007df6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	4b8f      	ldr	r3, [pc, #572]	; (800803c <UART_SetConfig+0x2cc>)
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d005      	beq.n	8007e10 <UART_SetConfig+0xa0>
 8007e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b8d      	ldr	r3, [pc, #564]	; (8008040 <UART_SetConfig+0x2d0>)
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d104      	bne.n	8007e1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e10:	f7fe fcfa 	bl	8006808 <HAL_RCC_GetPCLK2Freq>
 8007e14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007e18:	e003      	b.n	8007e22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e1a:	f7fe fce1 	bl	80067e0 <HAL_RCC_GetPCLK1Freq>
 8007e1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e2c:	f040 810c 	bne.w	8008048 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e42:	4622      	mov	r2, r4
 8007e44:	462b      	mov	r3, r5
 8007e46:	1891      	adds	r1, r2, r2
 8007e48:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e4a:	415b      	adcs	r3, r3
 8007e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e52:	4621      	mov	r1, r4
 8007e54:	eb12 0801 	adds.w	r8, r2, r1
 8007e58:	4629      	mov	r1, r5
 8007e5a:	eb43 0901 	adc.w	r9, r3, r1
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e72:	4690      	mov	r8, r2
 8007e74:	4699      	mov	r9, r3
 8007e76:	4623      	mov	r3, r4
 8007e78:	eb18 0303 	adds.w	r3, r8, r3
 8007e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e80:	462b      	mov	r3, r5
 8007e82:	eb49 0303 	adc.w	r3, r9, r3
 8007e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	18db      	adds	r3, r3, r3
 8007ea2:	653b      	str	r3, [r7, #80]	; 0x50
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	eb42 0303 	adc.w	r3, r2, r3
 8007eaa:	657b      	str	r3, [r7, #84]	; 0x54
 8007eac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007eb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007eb4:	f7f8 f988 	bl	80001c8 <__aeabi_uldivmod>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4b61      	ldr	r3, [pc, #388]	; (8008044 <UART_SetConfig+0x2d4>)
 8007ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8007ec2:	095b      	lsrs	r3, r3, #5
 8007ec4:	011c      	lsls	r4, r3, #4
 8007ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ed0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ed4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ed8:	4642      	mov	r2, r8
 8007eda:	464b      	mov	r3, r9
 8007edc:	1891      	adds	r1, r2, r2
 8007ede:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ee0:	415b      	adcs	r3, r3
 8007ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ee4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ee8:	4641      	mov	r1, r8
 8007eea:	eb12 0a01 	adds.w	sl, r2, r1
 8007eee:	4649      	mov	r1, r9
 8007ef0:	eb43 0b01 	adc.w	fp, r3, r1
 8007ef4:	f04f 0200 	mov.w	r2, #0
 8007ef8:	f04f 0300 	mov.w	r3, #0
 8007efc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f08:	4692      	mov	sl, r2
 8007f0a:	469b      	mov	fp, r3
 8007f0c:	4643      	mov	r3, r8
 8007f0e:	eb1a 0303 	adds.w	r3, sl, r3
 8007f12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f16:	464b      	mov	r3, r9
 8007f18:	eb4b 0303 	adc.w	r3, fp, r3
 8007f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f2c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f34:	460b      	mov	r3, r1
 8007f36:	18db      	adds	r3, r3, r3
 8007f38:	643b      	str	r3, [r7, #64]	; 0x40
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	eb42 0303 	adc.w	r3, r2, r3
 8007f40:	647b      	str	r3, [r7, #68]	; 0x44
 8007f42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f4a:	f7f8 f93d 	bl	80001c8 <__aeabi_uldivmod>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	4611      	mov	r1, r2
 8007f54:	4b3b      	ldr	r3, [pc, #236]	; (8008044 <UART_SetConfig+0x2d4>)
 8007f56:	fba3 2301 	umull	r2, r3, r3, r1
 8007f5a:	095b      	lsrs	r3, r3, #5
 8007f5c:	2264      	movs	r2, #100	; 0x64
 8007f5e:	fb02 f303 	mul.w	r3, r2, r3
 8007f62:	1acb      	subs	r3, r1, r3
 8007f64:	00db      	lsls	r3, r3, #3
 8007f66:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f6a:	4b36      	ldr	r3, [pc, #216]	; (8008044 <UART_SetConfig+0x2d4>)
 8007f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8007f70:	095b      	lsrs	r3, r3, #5
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f78:	441c      	add	r4, r3
 8007f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f84:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f8c:	4642      	mov	r2, r8
 8007f8e:	464b      	mov	r3, r9
 8007f90:	1891      	adds	r1, r2, r2
 8007f92:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f94:	415b      	adcs	r3, r3
 8007f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f9c:	4641      	mov	r1, r8
 8007f9e:	1851      	adds	r1, r2, r1
 8007fa0:	6339      	str	r1, [r7, #48]	; 0x30
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	414b      	adcs	r3, r1
 8007fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007fb4:	4659      	mov	r1, fp
 8007fb6:	00cb      	lsls	r3, r1, #3
 8007fb8:	4651      	mov	r1, sl
 8007fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fbe:	4651      	mov	r1, sl
 8007fc0:	00ca      	lsls	r2, r1, #3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4642      	mov	r2, r8
 8007fca:	189b      	adds	r3, r3, r2
 8007fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	460a      	mov	r2, r1
 8007fd4:	eb42 0303 	adc.w	r3, r2, r3
 8007fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007fe8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007fec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	18db      	adds	r3, r3, r3
 8007ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	eb42 0303 	adc.w	r3, r2, r3
 8007ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ffe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008002:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008006:	f7f8 f8df 	bl	80001c8 <__aeabi_uldivmod>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <UART_SetConfig+0x2d4>)
 8008010:	fba3 1302 	umull	r1, r3, r3, r2
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	2164      	movs	r1, #100	; 0x64
 8008018:	fb01 f303 	mul.w	r3, r1, r3
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	3332      	adds	r3, #50	; 0x32
 8008022:	4a08      	ldr	r2, [pc, #32]	; (8008044 <UART_SetConfig+0x2d4>)
 8008024:	fba2 2303 	umull	r2, r3, r2, r3
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	f003 0207 	and.w	r2, r3, #7
 800802e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4422      	add	r2, r4
 8008036:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008038:	e105      	b.n	8008246 <UART_SetConfig+0x4d6>
 800803a:	bf00      	nop
 800803c:	40011000 	.word	0x40011000
 8008040:	40011400 	.word	0x40011400
 8008044:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800804c:	2200      	movs	r2, #0
 800804e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008052:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008056:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800805a:	4642      	mov	r2, r8
 800805c:	464b      	mov	r3, r9
 800805e:	1891      	adds	r1, r2, r2
 8008060:	6239      	str	r1, [r7, #32]
 8008062:	415b      	adcs	r3, r3
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
 8008066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800806a:	4641      	mov	r1, r8
 800806c:	1854      	adds	r4, r2, r1
 800806e:	4649      	mov	r1, r9
 8008070:	eb43 0501 	adc.w	r5, r3, r1
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	f04f 0300 	mov.w	r3, #0
 800807c:	00eb      	lsls	r3, r5, #3
 800807e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008082:	00e2      	lsls	r2, r4, #3
 8008084:	4614      	mov	r4, r2
 8008086:	461d      	mov	r5, r3
 8008088:	4643      	mov	r3, r8
 800808a:	18e3      	adds	r3, r4, r3
 800808c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008090:	464b      	mov	r3, r9
 8008092:	eb45 0303 	adc.w	r3, r5, r3
 8008096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800809a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080aa:	f04f 0200 	mov.w	r2, #0
 80080ae:	f04f 0300 	mov.w	r3, #0
 80080b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80080b6:	4629      	mov	r1, r5
 80080b8:	008b      	lsls	r3, r1, #2
 80080ba:	4621      	mov	r1, r4
 80080bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080c0:	4621      	mov	r1, r4
 80080c2:	008a      	lsls	r2, r1, #2
 80080c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80080c8:	f7f8 f87e 	bl	80001c8 <__aeabi_uldivmod>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4b60      	ldr	r3, [pc, #384]	; (8008254 <UART_SetConfig+0x4e4>)
 80080d2:	fba3 2302 	umull	r2, r3, r3, r2
 80080d6:	095b      	lsrs	r3, r3, #5
 80080d8:	011c      	lsls	r4, r3, #4
 80080da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080de:	2200      	movs	r2, #0
 80080e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80080e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80080ec:	4642      	mov	r2, r8
 80080ee:	464b      	mov	r3, r9
 80080f0:	1891      	adds	r1, r2, r2
 80080f2:	61b9      	str	r1, [r7, #24]
 80080f4:	415b      	adcs	r3, r3
 80080f6:	61fb      	str	r3, [r7, #28]
 80080f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080fc:	4641      	mov	r1, r8
 80080fe:	1851      	adds	r1, r2, r1
 8008100:	6139      	str	r1, [r7, #16]
 8008102:	4649      	mov	r1, r9
 8008104:	414b      	adcs	r3, r1
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	f04f 0300 	mov.w	r3, #0
 8008110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008114:	4659      	mov	r1, fp
 8008116:	00cb      	lsls	r3, r1, #3
 8008118:	4651      	mov	r1, sl
 800811a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800811e:	4651      	mov	r1, sl
 8008120:	00ca      	lsls	r2, r1, #3
 8008122:	4610      	mov	r0, r2
 8008124:	4619      	mov	r1, r3
 8008126:	4603      	mov	r3, r0
 8008128:	4642      	mov	r2, r8
 800812a:	189b      	adds	r3, r3, r2
 800812c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008130:	464b      	mov	r3, r9
 8008132:	460a      	mov	r2, r1
 8008134:	eb42 0303 	adc.w	r3, r2, r3
 8008138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	67bb      	str	r3, [r7, #120]	; 0x78
 8008146:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008154:	4649      	mov	r1, r9
 8008156:	008b      	lsls	r3, r1, #2
 8008158:	4641      	mov	r1, r8
 800815a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800815e:	4641      	mov	r1, r8
 8008160:	008a      	lsls	r2, r1, #2
 8008162:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008166:	f7f8 f82f 	bl	80001c8 <__aeabi_uldivmod>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4b39      	ldr	r3, [pc, #228]	; (8008254 <UART_SetConfig+0x4e4>)
 8008170:	fba3 1302 	umull	r1, r3, r3, r2
 8008174:	095b      	lsrs	r3, r3, #5
 8008176:	2164      	movs	r1, #100	; 0x64
 8008178:	fb01 f303 	mul.w	r3, r1, r3
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	011b      	lsls	r3, r3, #4
 8008180:	3332      	adds	r3, #50	; 0x32
 8008182:	4a34      	ldr	r2, [pc, #208]	; (8008254 <UART_SetConfig+0x4e4>)
 8008184:	fba2 2303 	umull	r2, r3, r2, r3
 8008188:	095b      	lsrs	r3, r3, #5
 800818a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800818e:	441c      	add	r4, r3
 8008190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008194:	2200      	movs	r2, #0
 8008196:	673b      	str	r3, [r7, #112]	; 0x70
 8008198:	677a      	str	r2, [r7, #116]	; 0x74
 800819a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800819e:	4642      	mov	r2, r8
 80081a0:	464b      	mov	r3, r9
 80081a2:	1891      	adds	r1, r2, r2
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	415b      	adcs	r3, r3
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081ae:	4641      	mov	r1, r8
 80081b0:	1851      	adds	r1, r2, r1
 80081b2:	6039      	str	r1, [r7, #0]
 80081b4:	4649      	mov	r1, r9
 80081b6:	414b      	adcs	r3, r1
 80081b8:	607b      	str	r3, [r7, #4]
 80081ba:	f04f 0200 	mov.w	r2, #0
 80081be:	f04f 0300 	mov.w	r3, #0
 80081c2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081c6:	4659      	mov	r1, fp
 80081c8:	00cb      	lsls	r3, r1, #3
 80081ca:	4651      	mov	r1, sl
 80081cc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081d0:	4651      	mov	r1, sl
 80081d2:	00ca      	lsls	r2, r1, #3
 80081d4:	4610      	mov	r0, r2
 80081d6:	4619      	mov	r1, r3
 80081d8:	4603      	mov	r3, r0
 80081da:	4642      	mov	r2, r8
 80081dc:	189b      	adds	r3, r3, r2
 80081de:	66bb      	str	r3, [r7, #104]	; 0x68
 80081e0:	464b      	mov	r3, r9
 80081e2:	460a      	mov	r2, r1
 80081e4:	eb42 0303 	adc.w	r3, r2, r3
 80081e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	663b      	str	r3, [r7, #96]	; 0x60
 80081f4:	667a      	str	r2, [r7, #100]	; 0x64
 80081f6:	f04f 0200 	mov.w	r2, #0
 80081fa:	f04f 0300 	mov.w	r3, #0
 80081fe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008202:	4649      	mov	r1, r9
 8008204:	008b      	lsls	r3, r1, #2
 8008206:	4641      	mov	r1, r8
 8008208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800820c:	4641      	mov	r1, r8
 800820e:	008a      	lsls	r2, r1, #2
 8008210:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008214:	f7f7 ffd8 	bl	80001c8 <__aeabi_uldivmod>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4b0d      	ldr	r3, [pc, #52]	; (8008254 <UART_SetConfig+0x4e4>)
 800821e:	fba3 1302 	umull	r1, r3, r3, r2
 8008222:	095b      	lsrs	r3, r3, #5
 8008224:	2164      	movs	r1, #100	; 0x64
 8008226:	fb01 f303 	mul.w	r3, r1, r3
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	011b      	lsls	r3, r3, #4
 800822e:	3332      	adds	r3, #50	; 0x32
 8008230:	4a08      	ldr	r2, [pc, #32]	; (8008254 <UART_SetConfig+0x4e4>)
 8008232:	fba2 2303 	umull	r2, r3, r2, r3
 8008236:	095b      	lsrs	r3, r3, #5
 8008238:	f003 020f 	and.w	r2, r3, #15
 800823c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4422      	add	r2, r4
 8008244:	609a      	str	r2, [r3, #8]
}
 8008246:	bf00      	nop
 8008248:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800824c:	46bd      	mov	sp, r7
 800824e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008252:	bf00      	nop
 8008254:	51eb851f 	.word	0x51eb851f

08008258 <__libc_init_array>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	4d0d      	ldr	r5, [pc, #52]	; (8008290 <__libc_init_array+0x38>)
 800825c:	4c0d      	ldr	r4, [pc, #52]	; (8008294 <__libc_init_array+0x3c>)
 800825e:	1b64      	subs	r4, r4, r5
 8008260:	10a4      	asrs	r4, r4, #2
 8008262:	2600      	movs	r6, #0
 8008264:	42a6      	cmp	r6, r4
 8008266:	d109      	bne.n	800827c <__libc_init_array+0x24>
 8008268:	4d0b      	ldr	r5, [pc, #44]	; (8008298 <__libc_init_array+0x40>)
 800826a:	4c0c      	ldr	r4, [pc, #48]	; (800829c <__libc_init_array+0x44>)
 800826c:	f000 f820 	bl	80082b0 <_init>
 8008270:	1b64      	subs	r4, r4, r5
 8008272:	10a4      	asrs	r4, r4, #2
 8008274:	2600      	movs	r6, #0
 8008276:	42a6      	cmp	r6, r4
 8008278:	d105      	bne.n	8008286 <__libc_init_array+0x2e>
 800827a:	bd70      	pop	{r4, r5, r6, pc}
 800827c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008280:	4798      	blx	r3
 8008282:	3601      	adds	r6, #1
 8008284:	e7ee      	b.n	8008264 <__libc_init_array+0xc>
 8008286:	f855 3b04 	ldr.w	r3, [r5], #4
 800828a:	4798      	blx	r3
 800828c:	3601      	adds	r6, #1
 800828e:	e7f2      	b.n	8008276 <__libc_init_array+0x1e>
 8008290:	080082f0 	.word	0x080082f0
 8008294:	080082f0 	.word	0x080082f0
 8008298:	080082f0 	.word	0x080082f0
 800829c:	080082f4 	.word	0x080082f4

080082a0 <memset>:
 80082a0:	4402      	add	r2, r0
 80082a2:	4603      	mov	r3, r0
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d100      	bne.n	80082aa <memset+0xa>
 80082a8:	4770      	bx	lr
 80082aa:	f803 1b01 	strb.w	r1, [r3], #1
 80082ae:	e7f9      	b.n	80082a4 <memset+0x4>

080082b0 <_init>:
 80082b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b2:	bf00      	nop
 80082b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b6:	bc08      	pop	{r3}
 80082b8:	469e      	mov	lr, r3
 80082ba:	4770      	bx	lr

080082bc <_fini>:
 80082bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082be:	bf00      	nop
 80082c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082c2:	bc08      	pop	{r3}
 80082c4:	469e      	mov	lr, r3
 80082c6:	4770      	bx	lr
