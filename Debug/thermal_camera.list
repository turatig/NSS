
thermal_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800c348  0800c348  0001c348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c764  0800c764  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c764  0800c764  0001c764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c76c  0800c76c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c76c  0800c76c  0001c76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c770  0800c770  0001c770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000016e0  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200018bc  200018bc  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016679  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d74  00000000  00000000  00036885  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e0  00000000  00000000  00039600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012c0  00000000  00000000  0003a9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000247c7  00000000  00000000  0003bca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001775b  00000000  00000000  00060467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd6e9  00000000  00000000  00077bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001552ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065ac  00000000  00000000  001552fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c330 	.word	0x0800c330

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800c330 	.word	0x0800c330

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <amg8833Init>:

#include "AMG8833.h"
#include "utils.h"
#include "stm32f4xx.h"

void amg8833Init(AMG8833 *inst,I2C_HandleTypeDef *hi2c,uint8_t ad_sel){
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	71fb      	strb	r3, [r7, #7]
	inst->adri2c= ad_sel ? ( AMG8833_I2C_BASE_ADR + 1 ) << 1 :
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <amg8833Init+0x18>
 8000ec0:	22d2      	movs	r2, #210	; 0xd2
 8000ec2:	e000      	b.n	8000ec6 <amg8833Init+0x1a>
 8000ec4:	22d0      	movs	r2, #208	; 0xd0
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	801a      	strh	r2, [r3, #0]
								AMG8833_I2C_BASE_ADR << 1;
	inst->hi2c=hi2c;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	605a      	str	r2, [r3, #4]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <amg8833IsReady>:

uint8_t amg8833IsReady(AMG8833 *inst){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status=HAL_I2C_IsDeviceReady(inst->hi2c,inst->adri2c,5,10);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6858      	ldr	r0, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	8819      	ldrh	r1, [r3, #0]
 8000eec:	230a      	movs	r3, #10
 8000eee:	2205      	movs	r2, #5
 8000ef0:	f004 f934 	bl	800515c <HAL_I2C_IsDeviceReady>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	73fb      	strb	r3, [r7, #15]
	return (uint8_t)(status==HAL_OK);
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf0c      	ite	eq
 8000efe:	2301      	moveq	r3, #1
 8000f00:	2300      	movne	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <amg8833ReadDMA>:
	return status;


}

HAL_StatusTypeDef amg8833ReadDMA(AMG8833 *inst,uint8_t *data){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	status=HAL_I2C_Mem_Read_DMA(inst->hi2c,(uint16_t)inst->adri2c,AMG8833_T01L,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6858      	ldr	r0, [r3, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	8819      	ldrh	r1, [r3, #0]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	f003 ff83 	bl	8004e34 <HAL_I2C_Mem_Read_DMA>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]
			1,data,AMG8833_DS);

	return status;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <initJstick>:
#include "Jstick.h"
#include "stm32f4xx.h"
#include "utils.h"


void initJstick(Jstick *inst,ADC_HandleTypeDef *hadc,uint16_t errpin,GPIO_TypeDef *errport){
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	80fb      	strh	r3, [r7, #6]
	inst->hadc=hadc;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	601a      	str	r2, [r3, #0]
	inst->errpin=errpin;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	88fa      	ldrh	r2, [r7, #6]
 8000f56:	809a      	strh	r2, [r3, #4]
	inst->errport=errport;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	609a      	str	r2, [r3, #8]

}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <jstickGetDirPoll>:


JstickDir jstickGetDirPoll(Jstick *inst){
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
	uint16_t raw_val;
	HAL_StatusTypeDef status;

	status=HAL_ADC_PollForConversion(inst->hadc,50);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2132      	movs	r1, #50	; 0x32
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 f863 	bl	8003044 <HAL_ADC_PollForConversion>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]

	if(status==HAL_OK){
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d111      	bne.n	8000fac <jstickGetDirPoll+0x42>
		raw_val=HAL_ADC_GetValue(inst->hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 f9f5 	bl	800337c <HAL_ADC_GetValue>
 8000f92:	4603      	mov	r3, r0
 8000f94:	81bb      	strh	r3, [r7, #12]

		if(raw_val>4000) return LEFT;
 8000f96:	89bb      	ldrh	r3, [r7, #12]
 8000f98:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f9c:	d901      	bls.n	8000fa2 <jstickGetDirPoll+0x38>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e005      	b.n	8000fae <jstickGetDirPoll+0x44>
		if(raw_val<100) return RIGHT;
 8000fa2:	89bb      	ldrh	r3, [r7, #12]
 8000fa4:	2b63      	cmp	r3, #99	; 0x63
 8000fa6:	d801      	bhi.n	8000fac <jstickGetDirPoll+0x42>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e000      	b.n	8000fae <jstickGetDirPoll+0x44>
	}

	return CENTER;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <initStep>:
 */
#include "Step.h"
#include "utils.h"
#include "stm32f4xx.h"

void initStep(Step *inst,uint16_t p0,uint16_t p1,uint16_t p2,uint16_t p3,GPIO_TypeDef *port,StepMode mode){
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	817b      	strh	r3, [r7, #10]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	813b      	strh	r3, [r7, #8]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	80fb      	strh	r3, [r7, #6]
	inst->pins[0]=p0;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	897a      	ldrh	r2, [r7, #10]
 8000fd4:	801a      	strh	r2, [r3, #0]
	inst->pins[1]=p1;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	893a      	ldrh	r2, [r7, #8]
 8000fda:	805a      	strh	r2, [r3, #2]
	inst->pins[2]=p2;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	88fa      	ldrh	r2, [r7, #6]
 8000fe0:	809a      	strh	r2, [r3, #4]
	inst->pins[3]=p3;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8b3a      	ldrh	r2, [r7, #24]
 8000fe6:	80da      	strh	r2, [r3, #6]

	inst->port=port;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	609a      	str	r2, [r3, #8]

	initMode(inst,mode);
 8000fee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f807 	bl	8001008 <initMode>
	rstAngle(inst);
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 f843 	bl	8001086 <rstAngle>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <initMode>:

void initMode(Step *inst,StepMode mode){
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
	inst->mode=mode;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	78fa      	ldrb	r2, [r7, #3]
 8001018:	731a      	strb	r2, [r3, #12]
	inst->cur_step=0;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	735a      	strb	r2, [r3, #13]
	rstPins(inst);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f80f 	bl	8001044 <rstPins>

	/*BYJ-24 shaft (considering also torque factor) performs a complete rotation in 2038 steps*/
	if(mode==WAVE || mode==FULL)
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <initMode+0x2a>
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d102      	bne.n	8001038 <initMode+0x30>
		inst->res=360.0/2038.0;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a02      	ldr	r2, [pc, #8]	; (8001040 <initMode+0x38>)
 8001036:	615a      	str	r2, [r3, #20]
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	3e34e21b 	.word	0x3e34e21b

08001044 <rstPins>:
void rstPins(Step *inst){
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	inst->port->ODR&=~( inst->pins[0] | inst->pins[1] | inst->pins[2] | inst->pins[3] );
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	695a      	ldr	r2, [r3, #20]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	8819      	ldrh	r1, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	885b      	ldrh	r3, [r3, #2]
 800105a:	430b      	orrs	r3, r1
 800105c:	b299      	uxth	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	889b      	ldrh	r3, [r3, #4]
 8001062:	430b      	orrs	r3, r1
 8001064:	b299      	uxth	r1, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	88db      	ldrh	r3, [r3, #6]
 800106a:	430b      	orrs	r3, r1
 800106c:	b29b      	uxth	r3, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	4619      	mov	r1, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	400a      	ands	r2, r1
 8001078:	615a      	str	r2, [r3, #20]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <rstAngle>:

void rstAngle(Step *inst){
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
	inst->ang_idx=0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <waveStep>:
    |1  0  0  0|
    |0  1  0  0|
    |0  0  1  0|
    |0  0  0  1|
 */
void waveStep(Step *inst,uint8_t dir){
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]

	/*Reset current step pin*/
	inst->port->ODR&= ~(inst->pins[ inst->cur_step ]);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7b5b      	ldrb	r3, [r3, #13]
 80010b6:	4619      	mov	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80010be:	43db      	mvns	r3, r3
 80010c0:	4619      	mov	r1, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	400a      	ands	r2, r1
 80010c8:	615a      	str	r2, [r3, #20]

	/*Update current step and angular index according to given direction*/
	if(dir){
 80010ca:	78fb      	ldrb	r3, [r7, #3]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <waveStep+0x4e>
		inst->cur_step=(inst->cur_step + 1) & 0x3;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7b5b      	ldrb	r3, [r3, #13]
 80010d4:	3301      	adds	r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	735a      	strb	r2, [r3, #13]
		inst->ang_idx ++;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	611a      	str	r2, [r3, #16]
 80010ec:	e010      	b.n	8001110 <waveStep+0x70>
	}
	else{
		inst->cur_step= inst->cur_step ? (inst->cur_step - 1) : 0x3;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7b5b      	ldrb	r3, [r3, #13]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <waveStep+0x60>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	7b5b      	ldrb	r3, [r3, #13]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	e000      	b.n	8001102 <waveStep+0x62>
 8001100:	2203      	movs	r2, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	735a      	strb	r2, [r3, #13]
		inst->ang_idx --;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	611a      	str	r2, [r3, #16]
	}

	/*Set updated current step pin*/
	inst->port->ODR|= inst->pins[ inst->cur_step ];
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	695a      	ldr	r2, [r3, #20]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	7b5b      	ldrb	r3, [r3, #13]
 800111a:	4619      	mov	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001122:	4619      	mov	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	430a      	orrs	r2, r1
 800112a:	615a      	str	r2, [r3, #20]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <fullStep>:
    |1  1  0  0|
    |0  1  1  0|
    |0  0  1  1|
    |1  0  0  1|
 */
void fullStep(Step *inst,uint8_t dir){
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	70fb      	strb	r3, [r7, #3]

	/*Update current step and angular index according to given direction*/
	if(dir){
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d01d      	beq.n	8001186 <fullStep+0x4e>
		/*Reset current step pin*/
		inst->port->ODR&= ~(inst->pins[ inst->cur_step ]);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	695a      	ldr	r2, [r3, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7b5b      	ldrb	r3, [r3, #13]
 8001154:	4619      	mov	r1, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800115c:	43db      	mvns	r3, r3
 800115e:	4619      	mov	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	400a      	ands	r2, r1
 8001166:	615a      	str	r2, [r3, #20]

		inst->cur_step=(inst->cur_step + 1) & 0x3;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7b5b      	ldrb	r3, [r3, #13]
 800116c:	3301      	adds	r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	b2da      	uxtb	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	735a      	strb	r2, [r3, #13]
		inst->ang_idx ++;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	e021      	b.n	80011ca <fullStep+0x92>


	}
	else{
		/*Reset current step pin*/
		inst->port->ODR&= ~(inst->pins[ (inst->cur_step + 1) & 0x3 ]);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	695a      	ldr	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7b5b      	ldrb	r3, [r3, #13]
 8001190:	3301      	adds	r3, #1
 8001192:	f003 0103 	and.w	r1, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800119c:	43db      	mvns	r3, r3
 800119e:	4619      	mov	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	400a      	ands	r2, r1
 80011a6:	615a      	str	r2, [r3, #20]
		inst->cur_step= inst->cur_step ? (inst->cur_step - 1) : 0x3;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	7b5b      	ldrb	r3, [r3, #13]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <fullStep+0x82>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7b5b      	ldrb	r3, [r3, #13]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	e000      	b.n	80011bc <fullStep+0x84>
 80011ba:	2203      	movs	r2, #3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	735a      	strb	r2, [r3, #13]
		inst->ang_idx --;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	611a      	str	r2, [r3, #16]
	}

	/*Set updated current step pin*/
	inst->port->ODR|= ( inst->pins[ inst->cur_step ] | inst->pins[ (inst->cur_step + 1) & 0x3] );
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	695a      	ldr	r2, [r3, #20]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7b5b      	ldrb	r3, [r3, #13]
 80011d4:	4619      	mov	r1, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7b5b      	ldrb	r3, [r3, #13]
 80011e0:	3301      	adds	r3, #1
 80011e2:	f003 0003 	and.w	r0, r3, #3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80011ec:	430b      	orrs	r3, r1
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4619      	mov	r1, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	615a      	str	r2, [r3, #20]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <step>:
void halfStep(Step *inst,uint8_t dir){
	__NOP();
}

/*Perform one step according to drive mode*/
void step(Step *inst,uint8_t dir){
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	460b      	mov	r3, r1
 8001210:	70fb      	strb	r3, [r7, #3]
	switch(inst->mode){
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7b1b      	ldrb	r3, [r3, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <step+0x1a>
 800121a:	2b01      	cmp	r3, #1
 800121c:	d005      	beq.n	800122a <step+0x24>
	case WAVE:
		waveStep(inst,dir);
	case FULL:
		fullStep(inst,dir);
	}
}
 800121e:	e009      	b.n	8001234 <step+0x2e>
		waveStep(inst,dir);
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	4619      	mov	r1, r3
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff3b 	bl	80010a0 <waveStep>
		fullStep(inst,dir);
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	4619      	mov	r1, r3
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff ff82 	bl	8001138 <fullStep>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <moveToPoll>:

/*Move motor from a starting position to a destination expressed in angle (degree)*/
void moveToPoll(Step *inst,float angle){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	ed87 0a00 	vstr	s0, [r7]

	if( angle > inst->ang_idx * inst->res ){
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	ee07 3a90 	vmov	s15, r3
 8001250:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	edd3 7a05 	vldr	s15, [r3, #20]
 800125a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125e:	ed97 7a00 	vldr	s14, [r7]
 8001262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126a:	dd1b      	ble.n	80012a4 <moveToPoll+0x68>
		while( angle > ( inst->ang_idx + 1 ) * inst->res ){
 800126c:	e006      	b.n	800127c <moveToPoll+0x40>
			step(inst,1);
 800126e:	2101      	movs	r1, #1
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ffc8 	bl	8001206 <step>
			HAL_Delay(1);
 8001276:	2001      	movs	r0, #1
 8001278:	f001 fdaa 	bl	8002dd0 <HAL_Delay>
		while( angle > ( inst->ang_idx + 1 ) * inst->res ){
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	3301      	adds	r3, #1
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001294:	ed97 7a00 	vldr	s14, [r7]
 8001298:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a0:	dce5      	bgt.n	800126e <moveToPoll+0x32>
		while( angle < ( inst->ang_idx - 1 ) * inst->res ){
			step(inst,0);
			HAL_Delay(1);
		}
	}
}
 80012a2:	e01a      	b.n	80012da <moveToPoll+0x9e>
		while( angle < ( inst->ang_idx - 1 ) * inst->res ){
 80012a4:	e006      	b.n	80012b4 <moveToPoll+0x78>
			step(inst,0);
 80012a6:	2100      	movs	r1, #0
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ffac 	bl	8001206 <step>
			HAL_Delay(1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f001 fd8e 	bl	8002dd0 <HAL_Delay>
		while( angle < ( inst->ang_idx - 1 ) * inst->res ){
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80012c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012cc:	ed97 7a00 	vldr	s14, [r7]
 80012d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d8:	d4e5      	bmi.n	80012a6 <moveToPoll+0x6a>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

/*
 * Callback function to manage external interrupt push buttons pushed
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
	if( !EXTI_BUT_PUSH ){
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <HAL_GPIO_EXTI_Callback+0x28>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d105      	bne.n	8001302 <HAL_GPIO_EXTI_Callback+0x1e>
		EXTI_BUT_PUSH=1;
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_GPIO_EXTI_Callback+0x28>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
		//Start debounce timer: interrupt after 50 ms
		HAL_TIM_Base_Start_IT(&htim10);
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <HAL_GPIO_EXTI_Callback+0x2c>)
 80012fe:	f006 fc71 	bl	8007be4 <HAL_TIM_Base_Start_IT>
	}
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2200007c 	.word	0x2200007c
 8001310:	200005f0 	.word	0x200005f0

08001314 <HAL_I2C_MemRxCpltCallback>:
/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image reading is now complete
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a05      	ldr	r2, [pc, #20]	; (8001338 <HAL_I2C_MemRxCpltCallback+0x24>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d102      	bne.n	800132c <HAL_I2C_MemRxCpltCallback+0x18>
		AMG_RD_CPLT=1;
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_I2C_MemRxCpltCallback+0x28>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]
	}
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	40005400 	.word	0x40005400
 800133c:	22000018 	.word	0x22000018

08001340 <HAL_UART_TxCpltCallback>:

/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image output is now complete
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a05      	ldr	r2, [pc, #20]	; (8001364 <HAL_UART_TxCpltCallback+0x24>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d102      	bne.n	8001358 <HAL_UART_TxCpltCallback+0x18>
		AMG_OUT_CPLT=1;
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <HAL_UART_TxCpltCallback+0x28>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]
	}
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40004800 	.word	0x40004800
 8001368:	22000014 	.word	0x22000014

0800136c <HAL_ADC_ConvHalfCpltCallback>:
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_BUF_SZ sample were converted and put into audio_in_buf.
 * Main playback loop transfer from lower audio_in_buf to higher audio_out_buf
 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==ADC1){
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d108      	bne.n	8001390 <HAL_ADC_ConvHalfCpltCallback+0x24>
		audio_in_ptr1=&audio_in_buf1[0];
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8001380:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8001382:	601a      	str	r2, [r3, #0]
		audio_out_ptr1=&audio_out_buf1[AUDIO_BUF_SZ];
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001386:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001388:	601a      	str	r2, [r3, #0]
		BUF1_CPLT=1;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <HAL_ADC_ConvHalfCpltCallback+0x60>)
 800138c:	2201      	movs	r2, #1
 800138e:	601a      	str	r2, [r3, #0]
	}

	if(hadc->Instance==ADC2){
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d108      	bne.n	80013ac <HAL_ADC_ConvHalfCpltCallback+0x40>
		audio_in_ptr2=&audio_in_buf2[0];
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 800139c:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 800139e:	601a      	str	r2, [r3, #0]
		audio_out_ptr2=&audio_out_buf2[AUDIO_BUF_SZ];
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_ADC_ConvHalfCpltCallback+0x70>)
 80013a2:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80013a4:	601a      	str	r2, [r3, #0]
		BUF2_CPLT=1;
 80013a6:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
	}
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40012000 	.word	0x40012000
 80013bc:	20001848 	.word	0x20001848
 80013c0:	20000848 	.word	0x20000848
 80013c4:	2000184c 	.word	0x2000184c
 80013c8:	20000e48 	.word	0x20000e48
 80013cc:	2200005c 	.word	0x2200005c
 80013d0:	40012100 	.word	0x40012100
 80013d4:	20001850 	.word	0x20001850
 80013d8:	20001048 	.word	0x20001048
 80013dc:	20001854 	.word	0x20001854
 80013e0:	20001648 	.word	0x20001648
 80013e4:	22000058 	.word	0x22000058

080013e8 <HAL_DAC_ConvCpltCallbackCh1>:
/*
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_TOT_BUF_SZ sample were taken from audio out buf and fed into DAC.
 * Main playback loop transfer from higher audio_in_buf to lower audio_out_buf
 */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	audio_in_ptr1=&audio_in_buf1[AUDIO_BUF_SZ];
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
 80013f4:	601a      	str	r2, [r3, #0]
	audio_out_ptr1=&audio_out_buf1[0];
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_DAC_ConvCpltCallbackCh1+0x30>)
 80013f8:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 80013fa:	601a      	str	r2, [r3, #0]
	BUF1_CPLT=1;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_DAC_ConvCpltCallbackCh1+0x38>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20001848 	.word	0x20001848
 8001414:	20000a48 	.word	0x20000a48
 8001418:	2000184c 	.word	0x2000184c
 800141c:	20000c48 	.word	0x20000c48
 8001420:	2200005c 	.word	0x2200005c

08001424 <HAL_DACEx_ConvCpltCallbackCh2>:

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac){
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	audio_in_ptr2=&audio_in_buf2[AUDIO_BUF_SZ];
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_DACEx_ConvCpltCallbackCh2+0x28>)
 800142e:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_DACEx_ConvCpltCallbackCh2+0x2c>)
 8001430:	601a      	str	r2, [r3, #0]
	audio_out_ptr2=&audio_out_buf2[0];
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_DACEx_ConvCpltCallbackCh2+0x30>)
 8001434:	4a08      	ldr	r2, [pc, #32]	; (8001458 <HAL_DACEx_ConvCpltCallbackCh2+0x34>)
 8001436:	601a      	str	r2, [r3, #0]
	BUF2_CPLT=1;
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_DACEx_ConvCpltCallbackCh2+0x38>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20001850 	.word	0x20001850
 8001450:	20001248 	.word	0x20001248
 8001454:	20001854 	.word	0x20001854
 8001458:	20001448 	.word	0x20001448
 800145c:	22000058 	.word	0x22000058

08001460 <audioPlayback>:
/*
 * Audio playback process.
 * Transfer audio sample from input buffer to output buffer using pointers set by ISR
 */

void audioPlayback(){
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
	uint32_t mean_ch1=0;
	uint32_t mean_ch2=0;
#endif

	/*If channel 1 and 2 conversion was completed*/
	if(BUF1_CPLT && BUF2_CPLT){
 8001466:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <audioPlayback+0x74>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d02c      	beq.n	80014c8 <audioPlayback+0x68>
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <audioPlayback+0x78>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d028      	beq.n	80014c8 <audioPlayback+0x68>
		BUF1_CPLT=0;
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <audioPlayback+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
		BUF2_CPLT=0;
 800147c:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <audioPlayback+0x78>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]

		/*Transfer samples from input to output buffers*/
		for(int i=0;i<AUDIO_BUF_SZ;i++){
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	e01c      	b.n	80014c2 <audioPlayback+0x62>
			audio_out_ptr1[i]=audio_in_ptr1[i];
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <audioPlayback+0x7c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	441a      	add	r2, r3
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <audioPlayback+0x80>)
 8001494:	6819      	ldr	r1, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	440b      	add	r3, r1
 800149c:	8812      	ldrh	r2, [r2, #0]
 800149e:	b292      	uxth	r2, r2
 80014a0:	801a      	strh	r2, [r3, #0]
			audio_out_ptr2[i]=audio_in_ptr2[i];
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <audioPlayback+0x84>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	441a      	add	r2, r3
 80014ac:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <audioPlayback+0x88>)
 80014ae:	6819      	ldr	r1, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	440b      	add	r3, r1
 80014b6:	8812      	ldrh	r2, [r2, #0]
 80014b8:	b292      	uxth	r2, r2
 80014ba:	801a      	strh	r2, [r3, #0]
		for(int i=0;i<AUDIO_BUF_SZ;i++){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3301      	adds	r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2bff      	cmp	r3, #255	; 0xff
 80014c6:	dddf      	ble.n	8001488 <audioPlayback+0x28>
		sprintf(msg_buf,"Channel 1 mean: %hu\r\nChannel 2 mean:%hu\r\n\r\n\r\n",mean_ch1,mean_ch2);
		HAL_UART_Transmit_DMA(&huart6,(uint8_t*)msg_buf,strlen(msg_buf));

#endif
	}
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	2200005c 	.word	0x2200005c
 80014d8:	22000058 	.word	0x22000058
 80014dc:	20001848 	.word	0x20001848
 80014e0:	2000184c 	.word	0x2000184c
 80014e4:	20001850 	.word	0x20001850
 80014e8:	20001854 	.word	0x20001854

080014ec <thermalImgFSM>:
 * Timer 6 ISR
 * DMA1 Stream 0 (Thermal image I2C Rx) Rx Cplt ISR
 * DMA1 Stream 6 (Thermal image USART2 Tx) Tx Cplt ISR
 * and subsequently manage Timer 6 reset and DMA transfer sequence
 */
void thermalImgFSM(){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
	  /*
	   * Thermal camera FSM
	   */
	  //If timer6 has expired
	  if(AMG_RD_START){
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <thermalImgFSM+0x6c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00e      	beq.n	8001516 <thermalImgFSM+0x2a>

		  //Command DMA transfer from amg8833
		status=amg8833ReadDMA(&cam,img_buf);
 80014f8:	4918      	ldr	r1, [pc, #96]	; (800155c <thermalImgFSM+0x70>)
 80014fa:	4819      	ldr	r0, [pc, #100]	; (8001560 <thermalImgFSM+0x74>)
 80014fc:	f7ff fd06 	bl	8000f0c <amg8833ReadDMA>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <thermalImgFSM+0x78>)
 8001506:	701a      	strb	r2, [r3, #0]
		if(status==HAL_OK)
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <thermalImgFSM+0x78>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <thermalImgFSM+0x2a>
			  //Clear ctrl bit
			  AMG_RD_START=0;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <thermalImgFSM+0x6c>)
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
	   }

	  //If DMA image reading was successful
	  if(AMG_RD_CPLT){
 8001516:	4b14      	ldr	r3, [pc, #80]	; (8001568 <thermalImgFSM+0x7c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00f      	beq.n	800153e <thermalImgFSM+0x52>

		 //Command DMA transfer to uart2
		 status=HAL_UART_Transmit_DMA(&huart3,img_buf,AMG8833_DS);
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	490e      	ldr	r1, [pc, #56]	; (800155c <thermalImgFSM+0x70>)
 8001522:	4812      	ldr	r0, [pc, #72]	; (800156c <thermalImgFSM+0x80>)
 8001524:	f006 ffde 	bl	80084e4 <HAL_UART_Transmit_DMA>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <thermalImgFSM+0x78>)
 800152e:	701a      	strb	r2, [r3, #0]
		 if(status==HAL_OK){
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <thermalImgFSM+0x78>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d102      	bne.n	800153e <thermalImgFSM+0x52>
			 AMG_RD_CPLT=0;
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <thermalImgFSM+0x7c>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
		 }
	  }
	  //if latest data were consumed in output, restart timer6
	  if(AMG_OUT_CPLT){
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <thermalImgFSM+0x84>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <thermalImgFSM+0x66>
		  AMG_OUT_CPLT=0;
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <thermalImgFSM+0x84>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 800154c:	4809      	ldr	r0, [pc, #36]	; (8001574 <thermalImgFSM+0x88>)
 800154e:	f006 fb49 	bl	8007be4 <HAL_TIM_Base_Start_IT>
	  }
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2200001c 	.word	0x2200001c
 800155c:	200007ac 	.word	0x200007ac
 8001560:	20000780 	.word	0x20000780
 8001564:	20000845 	.word	0x20000845
 8001568:	22000018 	.word	0x22000018
 800156c:	20000638 	.word	0x20000638
 8001570:	22000014 	.word	0x22000014
 8001574:	20000560 	.word	0x20000560

08001578 <logMotor>:

void logMotor(){
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af04      	add	r7, sp, #16

	sprintf(msg_buf,"Motor position: %f %f %d \r\n\r\n\r\n",
								motor.ang_idx*motor.res,motor.res,motor.ang_idx);
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <logMotor+0x68>)
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	ee07 3a90 	vmov	s15, r3
 8001586:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800158a:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <logMotor+0x68>)
 800158c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001590:	ee67 7a27 	vmul.f32	s15, s14, s15
	sprintf(msg_buf,"Motor position: %f %f %d \r\n\r\n\r\n",
 8001594:	ee17 0a90 	vmov	r0, s15
 8001598:	f7fe ffd6 	bl	8000548 <__aeabi_f2d>
 800159c:	4604      	mov	r4, r0
 800159e:	460d      	mov	r5, r1
								motor.ang_idx*motor.res,motor.res,motor.ang_idx);
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <logMotor+0x68>)
 80015a2:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buf,"Motor position: %f %f %d \r\n\r\n\r\n",
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffcf 	bl	8000548 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	490c      	ldr	r1, [pc, #48]	; (80015e0 <logMotor+0x68>)
 80015b0:	6909      	ldr	r1, [r1, #16]
 80015b2:	9102      	str	r1, [sp, #8]
 80015b4:	e9cd 2300 	strd	r2, r3, [sp]
 80015b8:	4622      	mov	r2, r4
 80015ba:	462b      	mov	r3, r5
 80015bc:	4909      	ldr	r1, [pc, #36]	; (80015e4 <logMotor+0x6c>)
 80015be:	480a      	ldr	r0, [pc, #40]	; (80015e8 <logMotor+0x70>)
 80015c0:	f008 fc3e 	bl	8009e40 <siprintf>
	HAL_UART_Transmit_DMA(&huart6,(uint8_t*)msg_buf,strlen(msg_buf));
 80015c4:	4808      	ldr	r0, [pc, #32]	; (80015e8 <logMotor+0x70>)
 80015c6:	f7fe fe03 	bl	80001d0 <strlen>
 80015ca:	4603      	mov	r3, r0
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	4905      	ldr	r1, [pc, #20]	; (80015e8 <logMotor+0x70>)
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <logMotor+0x74>)
 80015d4:	f006 ff86 	bl	80084e4 <HAL_UART_Transmit_DMA>
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bdb0      	pop	{r4, r5, r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000788 	.word	0x20000788
 80015e4:	0800c348 	.word	0x0800c348
 80015e8:	2000082c 	.word	0x2000082c
 80015ec:	2000067c 	.word	0x2000067c

080015f0 <motorControl>:

/*Read joystick's position and EXTI buttons and perform one motor step according to joystick direction*/
void motorControl(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0

	JstickDir dir;

	if(MOTOR_MV){
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <motorControl+0x68>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d028      	beq.n	8001650 <motorControl+0x60>
		MOTOR_MV=0;
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <motorControl+0x68>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

		dir=jstickGetDirPoll(&js);
 8001604:	4815      	ldr	r0, [pc, #84]	; (800165c <motorControl+0x6c>)
 8001606:	f7ff fcb0 	bl	8000f6a <jstickGetDirPoll>
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
		if(dir==LEFT || LEFT_BUT_PUSH){
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d003      	beq.n	800161c <motorControl+0x2c>
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <motorControl+0x70>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d009      	beq.n	8001630 <motorControl+0x40>
			LEFT_BUT_PUSH=0;
 800161c:	4b10      	ldr	r3, [pc, #64]	; (8001660 <motorControl+0x70>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
			step(&motor,0);
 8001622:	2100      	movs	r1, #0
 8001624:	480f      	ldr	r0, [pc, #60]	; (8001664 <motorControl+0x74>)
 8001626:	f7ff fdee 	bl	8001206 <step>

			logMotor();
 800162a:	f7ff ffa5 	bl	8001578 <logMotor>

			logMotor();
		}
	}

}
 800162e:	e00f      	b.n	8001650 <motorControl+0x60>
		else if(dir==RIGHT || RIGHT_BUT_PUSH){
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d003      	beq.n	800163e <motorControl+0x4e>
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <motorControl+0x78>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d008      	beq.n	8001650 <motorControl+0x60>
			RIGHT_BUT_PUSH=0;
 800163e:	4b0a      	ldr	r3, [pc, #40]	; (8001668 <motorControl+0x78>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
			step(&motor,1);
 8001644:	2101      	movs	r1, #1
 8001646:	4807      	ldr	r0, [pc, #28]	; (8001664 <motorControl+0x74>)
 8001648:	f7ff fddd 	bl	8001206 <step>
			logMotor();
 800164c:	f7ff ff94 	bl	8001578 <logMotor>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2200003c 	.word	0x2200003c
 800165c:	200007a0 	.word	0x200007a0
 8001660:	22000074 	.word	0x22000074
 8001664:	20000788 	.word	0x20000788
 8001668:	22000070 	.word	0x22000070

0800166c <initCalibration>:

/*Functions to init calibration/sound source localization mode*/
void initCalibration(){
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af02      	add	r7, sp, #8
	  /*Start DMA request to playback audio through DAC channels 1 and 2*/
	  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_1,(uint32_t*)audio_out_buf1,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 8001672:	2300      	movs	r3, #0
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	f44f 7300 	mov.w	r3, #512	; 0x200
 800167a:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <initCalibration+0x3c>)
 800167c:	2100      	movs	r1, #0
 800167e:	480b      	ldr	r0, [pc, #44]	; (80016ac <initCalibration+0x40>)
 8001680:	f002 fa42 	bl	8003b08 <HAL_DAC_Start_DMA>
	  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_2,(uint32_t*)audio_out_buf2,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 8001684:	2300      	movs	r3, #0
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800168c:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <initCalibration+0x44>)
 800168e:	2110      	movs	r1, #16
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <initCalibration+0x40>)
 8001692:	f002 fa39 	bl	8003b08 <HAL_DAC_Start_DMA>

	  GPIOD->ODR&=~GPIO_PIN_15;
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <initCalibration+0x48>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <initCalibration+0x48>)
 800169c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016a0:	6153      	str	r3, [r2, #20]
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000c48 	.word	0x20000c48
 80016ac:	20000390 	.word	0x20000390
 80016b0:	20001448 	.word	0x20001448
 80016b4:	40020c00 	.word	0x40020c00

080016b8 <initSSL>:

void initSSL(){
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	  /*Stop playback loop*/
	  HAL_DAC_Stop_DMA(&hdac,DAC_CHANNEL_1);
 80016bc:	2100      	movs	r1, #0
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <initSSL+0x34>)
 80016c0:	f002 faf0 	bl	8003ca4 <HAL_DAC_Stop_DMA>
	  HAL_DAC_Stop_DMA(&hdac,DAC_CHANNEL_2);
 80016c4:	2110      	movs	r1, #16
 80016c6:	4809      	ldr	r0, [pc, #36]	; (80016ec <initSSL+0x34>)
 80016c8:	f002 faec 	bl	8003ca4 <HAL_DAC_Stop_DMA>

	  /*Reset motor angle idx to set initial camera offset*/
	  rstAngle(&motor);
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <initSSL+0x38>)
 80016ce:	f7ff fcda 	bl	8001086 <rstAngle>
	  logMotor();
 80016d2:	f7ff ff51 	bl	8001578 <logMotor>
	  mode=1;
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <initSSL+0x3c>)
 80016d8:	2201      	movs	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]
	  GPIOD->ODR|=GPIO_PIN_15;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <initSSL+0x40>)
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <initSSL+0x40>)
 80016e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016e6:	6153      	str	r3, [r2, #20]
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000390 	.word	0x20000390
 80016f0:	20000788 	.word	0x20000788
 80016f4:	20001858 	.word	0x20001858
 80016f8:	40020c00 	.word	0x40020c00

080016fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001702:	f001 fb23 	bl	8002d4c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001706:	f000 f8cb 	bl	80018a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800170a:	f000 fc19 	bl	8001f40 <MX_GPIO_Init>
  MX_TIM6_Init();
 800170e:	f000 fad5 	bl	8001cbc <MX_TIM6_Init>
  MX_DMA_Init();
 8001712:	f000 fbb7 	bl	8001e84 <MX_DMA_Init>
  MX_I2C1_Init();
 8001716:	f000 fa57 	bl	8001bc8 <MX_I2C1_Init>
  MX_ADC3_Init();
 800171a:	f000 f9cf 	bl	8001abc <MX_ADC3_Init>
  MX_ADC1_Init();
 800171e:	f000 f929 	bl	8001974 <MX_ADC1_Init>
  MX_DAC_Init();
 8001722:	f000 fa1d 	bl	8001b60 <MX_DAC_Init>
  MX_TIM2_Init();
 8001726:	f000 fa7d 	bl	8001c24 <MX_TIM2_Init>
  MX_ADC2_Init();
 800172a:	f000 f975 	bl	8001a18 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 800172e:	f000 fb55 	bl	8001ddc <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001732:	f000 faf9 	bl	8001d28 <MX_TIM7_Init>
  MX_USART6_UART_Init();
 8001736:	f000 fb7b 	bl	8001e30 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 800173a:	f000 fb2b 	bl	8001d94 <MX_TIM10_Init>
#endif

  /*
   * Init DMA handle data structures for thermal image in/out transfer
   */
  HAL_DMA_Init(&hdma_i2c1_rx);
 800173e:	4843      	ldr	r0, [pc, #268]	; (800184c <main+0x150>)
 8001740:	f002 fc4a 	bl	8003fd8 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart3_tx);
 8001744:	4842      	ldr	r0, [pc, #264]	; (8001850 <main+0x154>)
 8001746:	f002 fc47 	bl	8003fd8 <HAL_DMA_Init>

  /*Init amg8833 sensor with ad select pin connected to the ground*/
  amg8833Init(&cam,&hi2c1,0);
 800174a:	2200      	movs	r2, #0
 800174c:	4941      	ldr	r1, [pc, #260]	; (8001854 <main+0x158>)
 800174e:	4842      	ldr	r0, [pc, #264]	; (8001858 <main+0x15c>)
 8001750:	f7ff fbac 	bl	8000eac <amg8833Init>

  /*Wait until amg8833 is ready*/
  while(!amg8833IsReady(&cam)){
 8001754:	e005      	b.n	8001762 <main+0x66>
	  GPIOD->ODR|=GPIO_PIN_14;
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <main+0x160>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	4a40      	ldr	r2, [pc, #256]	; (800185c <main+0x160>)
 800175c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001760:	6153      	str	r3, [r2, #20]
  while(!amg8833IsReady(&cam)){
 8001762:	483d      	ldr	r0, [pc, #244]	; (8001858 <main+0x15c>)
 8001764:	f7ff fbba 	bl	8000edc <amg8833IsReady>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f3      	beq.n	8001756 <main+0x5a>
  }

  GPIOD->ODR&=~GPIO_PIN_14;
 800176e:	4b3b      	ldr	r3, [pc, #236]	; (800185c <main+0x160>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	4a3a      	ldr	r2, [pc, #232]	; (800185c <main+0x160>)
 8001774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001778:	6153      	str	r3, [r2, #20]

  /*Start Timer 6 - Update event every 1/20 s for thermal camera reading*/
  HAL_TIM_Base_Start_IT(&htim6);
 800177a:	4839      	ldr	r0, [pc, #228]	; (8001860 <main+0x164>)
 800177c:	f006 fa32 	bl	8007be4 <HAL_TIM_Base_Start_IT>
  /*Start Timer 7 - Update event every 1/10 s for motor control*/
  HAL_TIM_Base_Start_IT(&htim7);
 8001780:	4838      	ldr	r0, [pc, #224]	; (8001864 <main+0x168>)
 8001782:	f006 fa2f 	bl	8007be4 <HAL_TIM_Base_Start_IT>

  /*
   * Start audio clock
   */
  HAL_TIM_Base_Start_IT(&htim2);
 8001786:	4838      	ldr	r0, [pc, #224]	; (8001868 <main+0x16c>)
 8001788:	f006 fa2c 	bl	8007be4 <HAL_TIM_Base_Start_IT>
  /*
   * Start audio DMA continous reading
   * ADC1 and DAC both works with htim2 conversion clock
   */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)audio_in_buf1,AUDIO_TOT_BUF_SZ);
 800178c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001790:	4936      	ldr	r1, [pc, #216]	; (800186c <main+0x170>)
 8001792:	4837      	ldr	r0, [pc, #220]	; (8001870 <main+0x174>)
 8001794:	f001 fce2 	bl	800315c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint32_t*)audio_in_buf2,AUDIO_TOT_BUF_SZ);
 8001798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800179c:	4935      	ldr	r1, [pc, #212]	; (8001874 <main+0x178>)
 800179e:	4836      	ldr	r0, [pc, #216]	; (8001878 <main+0x17c>)
 80017a0:	f001 fcdc 	bl	800315c <HAL_ADC_Start_DMA>

  /*Init step motor data structure*/
  initStep(&motor,GPIO_PIN_1,GPIO_PIN_2,GPIO_PIN_3,GPIO_PIN_4,GPIOD,FULL);
 80017a4:	2301      	movs	r3, #1
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	4b2c      	ldr	r3, [pc, #176]	; (800185c <main+0x160>)
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	2310      	movs	r3, #16
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	2308      	movs	r3, #8
 80017b2:	2204      	movs	r2, #4
 80017b4:	2102      	movs	r1, #2
 80017b6:	4831      	ldr	r0, [pc, #196]	; (800187c <main+0x180>)
 80017b8:	f7ff fbfd 	bl	8000fb6 <initStep>

  /*Init joystick img_buf structure with yellow error pin*/
  initJstick(&js,&hadc3,GPIO_PIN_12,GPIOD);
 80017bc:	4b27      	ldr	r3, [pc, #156]	; (800185c <main+0x160>)
 80017be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017c2:	492f      	ldr	r1, [pc, #188]	; (8001880 <main+0x184>)
 80017c4:	482f      	ldr	r0, [pc, #188]	; (8001884 <main+0x188>)
 80017c6:	f7ff fbb9 	bl	8000f3c <initJstick>
  /*Start ADC3 associated with joystick*/
  HAL_ADC_Start(&hadc3);
 80017ca:	482d      	ldr	r0, [pc, #180]	; (8001880 <main+0x184>)
 80017cc:	f001 fb68 	bl	8002ea0 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MODE_TOGGLE=0;
 80017d0:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <main+0x18c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
  mode=1;
 80017d6:	4b2d      	ldr	r3, [pc, #180]	; (800188c <main+0x190>)
 80017d8:	2201      	movs	r2, #1
 80017da:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  thermalImgFSM();
 80017dc:	f7ff fe86 	bl	80014ec <thermalImgFSM>

	  /*MODE_TOGGLE bit is set by the EXTI4 button line debounce timer TIM10*/
	  if( !MODE_TOGGLE ){
 80017e0:	4b29      	ldr	r3, [pc, #164]	; (8001888 <main+0x18c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10d      	bne.n	8001804 <main+0x108>
		  /*
		   * Calibration mode:
		   * -microphones AD conversion can be tested connecting an oscilloscope or an amplifier to DAC channels 1/2
		   * -camera can be moved manually using joystick and buttons to set angular offset
		   */
		  if(mode){
 80017e8:	4b28      	ldr	r3, [pc, #160]	; (800188c <main+0x190>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <main+0xfe>
			  initCalibration();
 80017f0:	f7ff ff3c 	bl	800166c <initCalibration>
			  mode=0;
 80017f4:	4b25      	ldr	r3, [pc, #148]	; (800188c <main+0x190>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
		  }

		  audioPlayback();
 80017fa:	f7ff fe31 	bl	8001460 <audioPlayback>
		  motorControl();
 80017fe:	f7ff fef7 	bl	80015f0 <motorControl>
 8001802:	e7eb      	b.n	80017dc <main+0xe0>
	  }
	  else{
		  if(!mode){
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <main+0x190>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d104      	bne.n	8001816 <main+0x11a>
			  /*
			   * Sound Source Localization mode:
			   * motor movement tests
			   */
			  initSSL();
 800180c:	f7ff ff54 	bl	80016b8 <initSSL>
			  mode=1;
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <main+0x190>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
		  }

		  if(LEFT_BUT_PUSH){
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <main+0x194>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d008      	beq.n	8001830 <main+0x134>

			  LEFT_BUT_PUSH=0;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <main+0x194>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
			  moveToPoll(&motor,90.0);
 8001824:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001894 <main+0x198>
 8001828:	4814      	ldr	r0, [pc, #80]	; (800187c <main+0x180>)
 800182a:	f7ff fd07 	bl	800123c <moveToPoll>
 800182e:	e7d5      	b.n	80017dc <main+0xe0>
		  }
		  else if(RIGHT_BUT_PUSH){
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <main+0x19c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0d1      	beq.n	80017dc <main+0xe0>

			  RIGHT_BUT_PUSH=0;
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <main+0x19c>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
			  moveToPoll(&motor,-90.0);
 800183e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800189c <main+0x1a0>
 8001842:	480e      	ldr	r0, [pc, #56]	; (800187c <main+0x180>)
 8001844:	f7ff fcfa 	bl	800123c <moveToPoll>
	  thermalImgFSM();
 8001848:	e7c8      	b.n	80017dc <main+0xe0>
 800184a:	bf00      	nop
 800184c:	200004b8 	.word	0x200004b8
 8001850:	200006c0 	.word	0x200006c0
 8001854:	20000464 	.word	0x20000464
 8001858:	20000780 	.word	0x20000780
 800185c:	40020c00 	.word	0x40020c00
 8001860:	20000560 	.word	0x20000560
 8001864:	200005a8 	.word	0x200005a8
 8001868:	20000518 	.word	0x20000518
 800186c:	20000848 	.word	0x20000848
 8001870:	200001f8 	.word	0x200001f8
 8001874:	20001048 	.word	0x20001048
 8001878:	20000240 	.word	0x20000240
 800187c:	20000788 	.word	0x20000788
 8001880:	20000288 	.word	0x20000288
 8001884:	200007a0 	.word	0x200007a0
 8001888:	22000078 	.word	0x22000078
 800188c:	20001858 	.word	0x20001858
 8001890:	22000074 	.word	0x22000074
 8001894:	42b40000 	.word	0x42b40000
 8001898:	22000070 	.word	0x22000070
 800189c:	c2b40000 	.word	0xc2b40000

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b094      	sub	sp, #80	; 0x50
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0320 	add.w	r3, r7, #32
 80018aa:	2230      	movs	r2, #48	; 0x30
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f007 fe54 	bl	800955c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <SystemClock_Config+0xcc>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	4a27      	ldr	r2, [pc, #156]	; (800196c <SystemClock_Config+0xcc>)
 80018ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d2:	6413      	str	r3, [r2, #64]	; 0x40
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <SystemClock_Config+0xcc>)
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <SystemClock_Config+0xd0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a21      	ldr	r2, [pc, #132]	; (8001970 <SystemClock_Config+0xd0>)
 80018ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b1f      	ldr	r3, [pc, #124]	; (8001970 <SystemClock_Config+0xd0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001900:	2301      	movs	r3, #1
 8001902:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001904:	2310      	movs	r3, #16
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001908:	2302      	movs	r3, #2
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001910:	2308      	movs	r3, #8
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001914:	2332      	movs	r3, #50	; 0x32
 8001916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001918:	2302      	movs	r3, #2
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800191c:	2307      	movs	r3, #7
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001920:	f107 0320 	add.w	r3, r7, #32
 8001924:	4618      	mov	r0, r3
 8001926:	f005 fc43 	bl	80071b0 <HAL_RCC_OscConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001930:	f000 fc08 	bl	8002144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001934:	230f      	movs	r3, #15
 8001936:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001938:	2302      	movs	r3, #2
 800193a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001940:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	2101      	movs	r1, #1
 8001952:	4618      	mov	r0, r3
 8001954:	f005 fea4 	bl	80076a0 <HAL_RCC_ClockConfig>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800195e:	f000 fbf1 	bl	8002144 <Error_Handler>
  }
}
 8001962:	bf00      	nop
 8001964:	3750      	adds	r7, #80	; 0x50
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40007000 	.word	0x40007000

08001974 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800197a:	463b      	mov	r3, r7
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <MX_ADC1_Init+0x9c>)
 8001988:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <MX_ADC1_Init+0xa0>)
 800198a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <MX_ADC1_Init+0x9c>)
 800198e:	2200      	movs	r2, #0
 8001990:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <MX_ADC1_Init+0x9c>)
 8001994:	2200      	movs	r2, #0
 8001996:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <MX_ADC1_Init+0x9c>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800199e:	4b1c      	ldr	r3, [pc, #112]	; (8001a10 <MX_ADC1_Init+0x9c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019a4:	4b1a      	ldr	r3, [pc, #104]	; (8001a10 <MX_ADC1_Init+0x9c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80019ac:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_ADC1_Init+0x9c>)
 80019ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_ADC1_Init+0x9c>)
 80019b6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019bc:	4b14      	ldr	r3, [pc, #80]	; (8001a10 <MX_ADC1_Init+0x9c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_ADC1_Init+0x9c>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019c8:	4b11      	ldr	r3, [pc, #68]	; (8001a10 <MX_ADC1_Init+0x9c>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_ADC1_Init+0x9c>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019d6:	480e      	ldr	r0, [pc, #56]	; (8001a10 <MX_ADC1_Init+0x9c>)
 80019d8:	f001 fa1e 	bl	8002e18 <HAL_ADC_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80019e2:	f000 fbaf 	bl	8002144 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80019e6:	2308      	movs	r3, #8
 80019e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f2:	463b      	mov	r3, r7
 80019f4:	4619      	mov	r1, r3
 80019f6:	4806      	ldr	r0, [pc, #24]	; (8001a10 <MX_ADC1_Init+0x9c>)
 80019f8:	f001 fce2 	bl	80033c0 <HAL_ADC_ConfigChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001a02:	f000 fb9f 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200001f8 	.word	0x200001f8
 8001a14:	40012000 	.word	0x40012000

08001a18 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a1e:	463b      	mov	r3, r7
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a2c:	4a22      	ldr	r2, [pc, #136]	; (8001ab8 <MX_ADC2_Init+0xa0>)
 8001a2e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a30:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a36:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a48:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a5a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001a5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a7a:	480e      	ldr	r0, [pc, #56]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a7c:	f001 f9cc 	bl	8002e18 <HAL_ADC_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001a86:	f000 fb5d 	bl	8002144 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a96:	463b      	mov	r3, r7
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <MX_ADC2_Init+0x9c>)
 8001a9c:	f001 fc90 	bl	80033c0 <HAL_ADC_ConfigChannel>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001aa6:	f000 fb4d 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000240 	.word	0x20000240
 8001ab8:	40012100 	.word	0x40012100

08001abc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001ad0:	4a21      	ldr	r2, [pc, #132]	; (8001b58 <MX_ADC3_Init+0x9c>)
 8001ad2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001aec:	4b19      	ldr	r3, [pc, #100]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001af4:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001afc:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <MX_ADC3_Init+0xa0>)
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b1a:	480e      	ldr	r0, [pc, #56]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001b1c:	f001 f97c 	bl	8002e18 <HAL_ADC_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001b26:	f000 fb0d 	bl	8002144 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b36:	463b      	mov	r3, r7
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4806      	ldr	r0, [pc, #24]	; (8001b54 <MX_ADC3_Init+0x98>)
 8001b3c:	f001 fc40 	bl	80033c0 <HAL_ADC_ConfigChannel>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001b46:	f000 fafd 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000288 	.word	0x20000288
 8001b58:	40012200 	.word	0x40012200
 8001b5c:	0f000001 	.word	0x0f000001

08001b60 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001b66:	463b      	mov	r3, r7
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001b6e:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <MX_DAC_Init+0x60>)
 8001b70:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <MX_DAC_Init+0x64>)
 8001b72:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001b74:	4812      	ldr	r0, [pc, #72]	; (8001bc0 <MX_DAC_Init+0x60>)
 8001b76:	f001 ffa5 	bl	8003ac4 <HAL_DAC_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001b80:	f000 fae0 	bl	8002144 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001b84:	2324      	movs	r3, #36	; 0x24
 8001b86:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4619      	mov	r1, r3
 8001b92:	480b      	ldr	r0, [pc, #44]	; (8001bc0 <MX_DAC_Init+0x60>)
 8001b94:	f002 f946 	bl	8003e24 <HAL_DAC_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001b9e:	f000 fad1 	bl	8002144 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001ba2:	463b      	mov	r3, r7
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_DAC_Init+0x60>)
 8001baa:	f002 f93b 	bl	8003e24 <HAL_DAC_ConfigChannel>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001bb4:	f000 fac6 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000390 	.word	0x20000390
 8001bc4:	40007400 	.word	0x40007400

08001bc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bce:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <MX_I2C1_Init+0x54>)
 8001bd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bd4:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <MX_I2C1_Init+0x58>)
 8001bd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001be6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c04:	4804      	ldr	r0, [pc, #16]	; (8001c18 <MX_I2C1_Init+0x50>)
 8001c06:	f002 ffd1 	bl	8004bac <HAL_I2C_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c10:	f000 fa98 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000464 	.word	0x20000464
 8001c1c:	40005400 	.word	0x40005400
 8001c20:	00061a80 	.word	0x00061a80

08001c24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2a:	f107 0308 	add.w	r3, r7, #8
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c38:	463b      	mov	r3, r7
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c40:	4b1d      	ldr	r3, [pc, #116]	; (8001cb8 <MX_TIM2_Init+0x94>)
 8001c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <MX_TIM2_Init+0x94>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <MX_TIM2_Init+0x94>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <MX_TIM2_Init+0x94>)
 8001c56:	22ff      	movs	r2, #255	; 0xff
 8001c58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <MX_TIM2_Init+0x94>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <MX_TIM2_Init+0x94>)
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c66:	4814      	ldr	r0, [pc, #80]	; (8001cb8 <MX_TIM2_Init+0x94>)
 8001c68:	f005 ff6c 	bl	8007b44 <HAL_TIM_Base_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001c72:	f000 fa67 	bl	8002144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	4619      	mov	r1, r3
 8001c82:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <MX_TIM2_Init+0x94>)
 8001c84:	f006 f926 	bl	8007ed4 <HAL_TIM_ConfigClockSource>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001c8e:	f000 fa59 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c92:	2320      	movs	r3, #32
 8001c94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4806      	ldr	r0, [pc, #24]	; (8001cb8 <MX_TIM2_Init+0x94>)
 8001ca0:	f006 fb42 	bl	8008328 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001caa:	f000 fa4b 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000518 	.word	0x20000518

08001cbc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cca:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <MX_TIM6_Init+0x64>)
 8001ccc:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <MX_TIM6_Init+0x68>)
 8001cce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <MX_TIM6_Init+0x64>)
 8001cd2:	2209      	movs	r2, #9
 8001cd4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <MX_TIM6_Init+0x64>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001cdc:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <MX_TIM6_Init+0x64>)
 8001cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ce2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_TIM6_Init+0x64>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cea:	480d      	ldr	r0, [pc, #52]	; (8001d20 <MX_TIM6_Init+0x64>)
 8001cec:	f005 ff2a 	bl	8007b44 <HAL_TIM_Base_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001cf6:	f000 fa25 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d02:	463b      	mov	r3, r7
 8001d04:	4619      	mov	r1, r3
 8001d06:	4806      	ldr	r0, [pc, #24]	; (8001d20 <MX_TIM6_Init+0x64>)
 8001d08:	f006 fb0e 	bl	8008328 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001d12:	f000 fa17 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000560 	.word	0x20000560
 8001d24:	40001000 	.word	0x40001000

08001d28 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d2e:	463b      	mov	r3, r7
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <MX_TIM7_Init+0x64>)
 8001d38:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <MX_TIM7_Init+0x68>)
 8001d3a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <MX_TIM7_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_TIM7_Init+0x64>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 62499;
 8001d48:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_TIM7_Init+0x64>)
 8001d4a:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001d4e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_TIM7_Init+0x64>)
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d56:	480d      	ldr	r0, [pc, #52]	; (8001d8c <MX_TIM7_Init+0x64>)
 8001d58:	f005 fef4 	bl	8007b44 <HAL_TIM_Base_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001d62:	f000 f9ef 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d66:	2300      	movs	r3, #0
 8001d68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d6e:	463b      	mov	r3, r7
 8001d70:	4619      	mov	r1, r3
 8001d72:	4806      	ldr	r0, [pc, #24]	; (8001d8c <MX_TIM7_Init+0x64>)
 8001d74:	f006 fad8 	bl	8008328 <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001d7e:	f000 f9e1 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200005a8 	.word	0x200005a8
 8001d90:	40001400 	.word	0x40001400

08001d94 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001d98:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <MX_TIM10_Init+0x40>)
 8001d9a:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <MX_TIM10_Init+0x44>)
 8001d9c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <MX_TIM10_Init+0x40>)
 8001da0:	2263      	movs	r2, #99	; 0x63
 8001da2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <MX_TIM10_Init+0x40>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2499;
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <MX_TIM10_Init+0x40>)
 8001dac:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001db0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <MX_TIM10_Init+0x40>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <MX_TIM10_Init+0x40>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <MX_TIM10_Init+0x40>)
 8001dc0:	f005 fec0 	bl	8007b44 <HAL_TIM_Base_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001dca:	f000 f9bb 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200005f0 	.word	0x200005f0
 8001dd8:	40014400 	.word	0x40014400

08001ddc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <MX_USART3_UART_Init+0x50>)
 8001de4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001de8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001e02:	220c      	movs	r2, #12
 8001e04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e0c:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e12:	4805      	ldr	r0, [pc, #20]	; (8001e28 <MX_USART3_UART_Init+0x4c>)
 8001e14:	f006 fb18 	bl	8008448 <HAL_UART_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001e1e:	f000 f991 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000638 	.word	0x20000638
 8001e2c:	40004800 	.word	0x40004800

08001e30 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <MX_USART6_UART_Init+0x4c>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <MX_USART6_UART_Init+0x50>)
 8001e38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <MX_USART6_UART_Init+0x4c>)
 8001e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MX_USART6_UART_Init+0x4c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <MX_USART6_UART_Init+0x4c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001e4e:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <MX_USART6_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001e54:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <MX_USART6_UART_Init+0x4c>)
 8001e56:	220c      	movs	r2, #12
 8001e58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <MX_USART6_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <MX_USART6_UART_Init+0x4c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <MX_USART6_UART_Init+0x4c>)
 8001e68:	f006 faee 	bl	8008448 <HAL_UART_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001e72:	f000 f967 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000067c 	.word	0x2000067c
 8001e80:	40011400 	.word	0x40011400

08001e84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <MX_DMA_Init+0xb8>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a2a      	ldr	r2, [pc, #168]	; (8001f3c <MX_DMA_Init+0xb8>)
 8001e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <MX_DMA_Init+0xb8>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <MX_DMA_Init+0xb8>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a23      	ldr	r2, [pc, #140]	; (8001f3c <MX_DMA_Init+0xb8>)
 8001eb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <MX_DMA_Init+0xb8>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	200b      	movs	r0, #11
 8001ec8:	f001 fdd2 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ecc:	200b      	movs	r0, #11
 8001ece:	f001 fdeb 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	200e      	movs	r0, #14
 8001ed8:	f001 fdca 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001edc:	200e      	movs	r0, #14
 8001ede:	f001 fde3 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2010      	movs	r0, #16
 8001ee8:	f001 fdc2 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001eec:	2010      	movs	r0, #16
 8001eee:	f001 fddb 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2011      	movs	r0, #17
 8001ef8:	f001 fdba 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001efc:	2011      	movs	r0, #17
 8001efe:	f001 fdd3 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	2038      	movs	r0, #56	; 0x38
 8001f08:	f001 fdb2 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f0c:	2038      	movs	r0, #56	; 0x38
 8001f0e:	f001 fdcb 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	203a      	movs	r0, #58	; 0x3a
 8001f18:	f001 fdaa 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001f1c:	203a      	movs	r0, #58	; 0x3a
 8001f1e:	f001 fdc3 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	2045      	movs	r0, #69	; 0x45
 8001f28:	f001 fda2 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001f2c:	2045      	movs	r0, #69	; 0x45
 8001f2e:	f001 fdbb 	bl	8003aa8 <HAL_NVIC_EnableIRQ>

}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800

08001f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <MX_GPIO_Init+0x120>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	4a40      	ldr	r2, [pc, #256]	; (8002060 <MX_GPIO_Init+0x120>)
 8001f60:	f043 0310 	orr.w	r3, r3, #16
 8001f64:	6313      	str	r3, [r2, #48]	; 0x30
 8001f66:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <MX_GPIO_Init+0x120>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <MX_GPIO_Init+0x120>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a39      	ldr	r2, [pc, #228]	; (8002060 <MX_GPIO_Init+0x120>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b37      	ldr	r3, [pc, #220]	; (8002060 <MX_GPIO_Init+0x120>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b33      	ldr	r3, [pc, #204]	; (8002060 <MX_GPIO_Init+0x120>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a32      	ldr	r2, [pc, #200]	; (8002060 <MX_GPIO_Init+0x120>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b30      	ldr	r3, [pc, #192]	; (8002060 <MX_GPIO_Init+0x120>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <MX_GPIO_Init+0x120>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a2b      	ldr	r2, [pc, #172]	; (8002060 <MX_GPIO_Init+0x120>)
 8001fb4:	f043 0308 	orr.w	r3, r3, #8
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b29      	ldr	r3, [pc, #164]	; (8002060 <MX_GPIO_Init+0x120>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	4b25      	ldr	r3, [pc, #148]	; (8002060 <MX_GPIO_Init+0x120>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	4a24      	ldr	r2, [pc, #144]	; (8002060 <MX_GPIO_Init+0x120>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd6:	4b22      	ldr	r3, [pc, #136]	; (8002060 <MX_GPIO_Init+0x120>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f24f 011e 	movw	r1, #61470	; 0xf01e
 8001fe8:	481e      	ldr	r0, [pc, #120]	; (8002064 <MX_GPIO_Init+0x124>)
 8001fea:	f002 fdad 	bl	8004b48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001fee:	231c      	movs	r3, #28
 8001ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	4619      	mov	r1, r3
 8002002:	4819      	ldr	r0, [pc, #100]	; (8002068 <MX_GPIO_Init+0x128>)
 8002004:	f002 fc04 	bl	8004810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002008:	f24f 031e 	movw	r3, #61470	; 0xf01e
 800200c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200e:	2301      	movs	r3, #1
 8002010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	4810      	ldr	r0, [pc, #64]	; (8002064 <MX_GPIO_Init+0x124>)
 8002022:	f002 fbf5 	bl	8004810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	2008      	movs	r0, #8
 800202c:	f001 fd20 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002030:	2008      	movs	r0, #8
 8002032:	f001 fd39 	bl	8003aa8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2009      	movs	r0, #9
 800203c:	f001 fd18 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002040:	2009      	movs	r0, #9
 8002042:	f001 fd31 	bl	8003aa8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	200a      	movs	r0, #10
 800204c:	f001 fd10 	bl	8003a70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002050:	200a      	movs	r0, #10
 8002052:	f001 fd29 	bl	8003aa8 <HAL_NVIC_EnableIRQ>

}
 8002056:	bf00      	nop
 8002058:	3728      	adds	r7, #40	; 0x28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40020c00 	.word	0x40020c00
 8002068:	40021000 	.word	0x40021000

0800206c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a27      	ldr	r2, [pc, #156]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d102      	bne.n	8002084 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800207e:	f000 fe87 	bl	8002d90 <HAL_IncTick>

		EXTI_BUT_PUSH=0;
	}

  /* USER CODE END Callback 1 */
}
 8002082:	e045      	b.n	8002110 <HAL_TIM_PeriodElapsedCallback+0xa4>
	else if( htim->Instance == TIM7 ){
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a24      	ldr	r2, [pc, #144]	; (800211c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d103      	bne.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x2a>
		MOTOR_MV=1;
 800208e:	4b24      	ldr	r3, [pc, #144]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	e03c      	b.n	8002110 <HAL_TIM_PeriodElapsedCallback+0xa4>
	else if( htim->Instance == TIM6 ){
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a22      	ldr	r2, [pc, #136]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d103      	bne.n	80020a8 <HAL_TIM_PeriodElapsedCallback+0x3c>
		AMG_RD_START=1;
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
}
 80020a6:	e033      	b.n	8002110 <HAL_TIM_PeriodElapsedCallback+0xa4>
	else if( htim->Instance == TIM10 ){
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a1f      	ldr	r2, [pc, #124]	; (800212c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d12e      	bne.n	8002110 <HAL_TIM_PeriodElapsedCallback+0xa4>
		if( GPIOE->IDR & GPIO_PIN_2 && EXTI_BUT_PUSH  )
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d007      	beq.n	80020ce <HAL_TIM_PeriodElapsedCallback+0x62>
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_PeriodElapsedCallback+0x62>
			RIGHT_BUT_PUSH=1;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e01d      	b.n	800210a <HAL_TIM_PeriodElapsedCallback+0x9e>
		else if( GPIOE->IDR & GPIO_PIN_3  && EXTI_BUT_PUSH )
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <HAL_TIM_PeriodElapsedCallback+0x7e>
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_PeriodElapsedCallback+0x7e>
			LEFT_BUT_PUSH=1;
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e00f      	b.n	800210a <HAL_TIM_PeriodElapsedCallback+0x9e>
		else if( GPIOE->IDR & GPIO_PIN_4 && EXTI_BUT_PUSH )
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_TIM_PeriodElapsedCallback+0x9e>
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d005      	beq.n	800210a <HAL_TIM_PeriodElapsedCallback+0x9e>
			MODE_TOGGLE^=1;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a0f      	ldr	r2, [pc, #60]	; (8002140 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002104:	f083 0301 	eor.w	r3, r3, #1
 8002108:	6013      	str	r3, [r2, #0]
		EXTI_BUT_PUSH=0;
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40010000 	.word	0x40010000
 800211c:	40001400 	.word	0x40001400
 8002120:	2200003c 	.word	0x2200003c
 8002124:	40001000 	.word	0x40001000
 8002128:	2200001c 	.word	0x2200001c
 800212c:	40014400 	.word	0x40014400
 8002130:	40021000 	.word	0x40021000
 8002134:	2200007c 	.word	0x2200007c
 8002138:	22000070 	.word	0x22000070
 800213c:	22000074 	.word	0x22000074
 8002140:	22000078 	.word	0x22000078

08002144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002148:	b672      	cpsid	i
}
 800214a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800214c:	e7fe      	b.n	800214c <Error_Handler+0x8>
	...

08002150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_MspInit+0x4c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a0f      	ldr	r2, [pc, #60]	; (800219c <HAL_MspInit+0x4c>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_MspInit+0x4c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_MspInit+0x4c>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a08      	ldr	r2, [pc, #32]	; (800219c <HAL_MspInit+0x4c>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_MspInit+0x4c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800

080021a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	; 0x38
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a75      	ldr	r2, [pc, #468]	; (8002394 <HAL_ADC_MspInit+0x1f4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d158      	bne.n	8002274 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
 80021c6:	4b74      	ldr	r3, [pc, #464]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a73      	ldr	r2, [pc, #460]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 80021cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b71      	ldr	r3, [pc, #452]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021da:	623b      	str	r3, [r7, #32]
 80021dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	61fb      	str	r3, [r7, #28]
 80021e2:	4b6d      	ldr	r3, [pc, #436]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a6c      	ldr	r2, [pc, #432]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b6a      	ldr	r3, [pc, #424]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021fa:	2301      	movs	r3, #1
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021fe:	2303      	movs	r3, #3
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220a:	4619      	mov	r1, r3
 800220c:	4863      	ldr	r0, [pc, #396]	; (800239c <HAL_ADC_MspInit+0x1fc>)
 800220e:	f002 faff 	bl	8004810 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002212:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <HAL_ADC_MspInit+0x200>)
 8002214:	4a63      	ldr	r2, [pc, #396]	; (80023a4 <HAL_ADC_MspInit+0x204>)
 8002216:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002218:	4b61      	ldr	r3, [pc, #388]	; (80023a0 <HAL_ADC_MspInit+0x200>)
 800221a:	2200      	movs	r2, #0
 800221c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800221e:	4b60      	ldr	r3, [pc, #384]	; (80023a0 <HAL_ADC_MspInit+0x200>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002224:	4b5e      	ldr	r3, [pc, #376]	; (80023a0 <HAL_ADC_MspInit+0x200>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800222a:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <HAL_ADC_MspInit+0x200>)
 800222c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002230:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002232:	4b5b      	ldr	r3, [pc, #364]	; (80023a0 <HAL_ADC_MspInit+0x200>)
 8002234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002238:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800223a:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <HAL_ADC_MspInit+0x200>)
 800223c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002240:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002242:	4b57      	ldr	r3, [pc, #348]	; (80023a0 <HAL_ADC_MspInit+0x200>)
 8002244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002248:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800224a:	4b55      	ldr	r3, [pc, #340]	; (80023a0 <HAL_ADC_MspInit+0x200>)
 800224c:	2200      	movs	r2, #0
 800224e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002250:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <HAL_ADC_MspInit+0x200>)
 8002252:	2200      	movs	r2, #0
 8002254:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002256:	4852      	ldr	r0, [pc, #328]	; (80023a0 <HAL_ADC_MspInit+0x200>)
 8002258:	f001 febe 	bl	8003fd8 <HAL_DMA_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002262:	f7ff ff6f 	bl	8002144 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4d      	ldr	r2, [pc, #308]	; (80023a0 <HAL_ADC_MspInit+0x200>)
 800226a:	639a      	str	r2, [r3, #56]	; 0x38
 800226c:	4a4c      	ldr	r2, [pc, #304]	; (80023a0 <HAL_ADC_MspInit+0x200>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002272:	e08b      	b.n	800238c <HAL_ADC_MspInit+0x1ec>
  else if(hadc->Instance==ADC2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a4b      	ldr	r2, [pc, #300]	; (80023a8 <HAL_ADC_MspInit+0x208>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d159      	bne.n	8002332 <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	4b45      	ldr	r3, [pc, #276]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	4a44      	ldr	r2, [pc, #272]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 8002288:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228c:	6453      	str	r3, [r2, #68]	; 0x44
 800228e:	4b42      	ldr	r3, [pc, #264]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002296:	61bb      	str	r3, [r7, #24]
 8002298:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	4b3e      	ldr	r3, [pc, #248]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a3d      	ldr	r2, [pc, #244]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b3b      	ldr	r3, [pc, #236]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ba:	2303      	movs	r3, #3
 80022bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c6:	4619      	mov	r1, r3
 80022c8:	4838      	ldr	r0, [pc, #224]	; (80023ac <HAL_ADC_MspInit+0x20c>)
 80022ca:	f002 faa1 	bl	8004810 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80022ce:	4b38      	ldr	r3, [pc, #224]	; (80023b0 <HAL_ADC_MspInit+0x210>)
 80022d0:	4a38      	ldr	r2, [pc, #224]	; (80023b4 <HAL_ADC_MspInit+0x214>)
 80022d2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80022d4:	4b36      	ldr	r3, [pc, #216]	; (80023b0 <HAL_ADC_MspInit+0x210>)
 80022d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022da:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022dc:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <HAL_ADC_MspInit+0x210>)
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e2:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <HAL_ADC_MspInit+0x210>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80022e8:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_ADC_MspInit+0x210>)
 80022ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ee:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022f0:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <HAL_ADC_MspInit+0x210>)
 80022f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022f8:	4b2d      	ldr	r3, [pc, #180]	; (80023b0 <HAL_ADC_MspInit+0x210>)
 80022fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022fe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002300:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_ADC_MspInit+0x210>)
 8002302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002306:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002308:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <HAL_ADC_MspInit+0x210>)
 800230a:	2200      	movs	r2, #0
 800230c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <HAL_ADC_MspInit+0x210>)
 8002310:	2200      	movs	r2, #0
 8002312:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002314:	4826      	ldr	r0, [pc, #152]	; (80023b0 <HAL_ADC_MspInit+0x210>)
 8002316:	f001 fe5f 	bl	8003fd8 <HAL_DMA_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8002320:	f7ff ff10 	bl	8002144 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a22      	ldr	r2, [pc, #136]	; (80023b0 <HAL_ADC_MspInit+0x210>)
 8002328:	639a      	str	r2, [r3, #56]	; 0x38
 800232a:	4a21      	ldr	r2, [pc, #132]	; (80023b0 <HAL_ADC_MspInit+0x210>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002330:	e02c      	b.n	800238c <HAL_ADC_MspInit+0x1ec>
  else if(hadc->Instance==ADC3)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a20      	ldr	r2, [pc, #128]	; (80023b8 <HAL_ADC_MspInit+0x218>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d127      	bne.n	800238c <HAL_ADC_MspInit+0x1ec>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800233c:	2300      	movs	r3, #0
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	4a14      	ldr	r2, [pc, #80]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 8002346:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800234a:	6453      	str	r3, [r2, #68]	; 0x44
 800234c:	4b12      	ldr	r3, [pc, #72]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	4a0d      	ldr	r2, [pc, #52]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6313      	str	r3, [r2, #48]	; 0x30
 8002368:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_ADC_MspInit+0x1f8>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002374:	2302      	movs	r3, #2
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002378:	2303      	movs	r3, #3
 800237a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002384:	4619      	mov	r1, r3
 8002386:	4809      	ldr	r0, [pc, #36]	; (80023ac <HAL_ADC_MspInit+0x20c>)
 8002388:	f002 fa42 	bl	8004810 <HAL_GPIO_Init>
}
 800238c:	bf00      	nop
 800238e:	3738      	adds	r7, #56	; 0x38
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40012000 	.word	0x40012000
 8002398:	40023800 	.word	0x40023800
 800239c:	40020400 	.word	0x40020400
 80023a0:	200002d0 	.word	0x200002d0
 80023a4:	40026410 	.word	0x40026410
 80023a8:	40012100 	.word	0x40012100
 80023ac:	40020000 	.word	0x40020000
 80023b0:	20000330 	.word	0x20000330
 80023b4:	40026440 	.word	0x40026440
 80023b8:	40012200 	.word	0x40012200

080023bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a4c      	ldr	r2, [pc, #304]	; (800250c <HAL_DAC_MspInit+0x150>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	f040 8092 	bne.w	8002504 <HAL_DAC_MspInit+0x148>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	4b4a      	ldr	r3, [pc, #296]	; (8002510 <HAL_DAC_MspInit+0x154>)
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	4a49      	ldr	r2, [pc, #292]	; (8002510 <HAL_DAC_MspInit+0x154>)
 80023ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80023ee:	6413      	str	r3, [r2, #64]	; 0x40
 80023f0:	4b47      	ldr	r3, [pc, #284]	; (8002510 <HAL_DAC_MspInit+0x154>)
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	4b43      	ldr	r3, [pc, #268]	; (8002510 <HAL_DAC_MspInit+0x154>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	4a42      	ldr	r2, [pc, #264]	; (8002510 <HAL_DAC_MspInit+0x154>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	6313      	str	r3, [r2, #48]	; 0x30
 800240c:	4b40      	ldr	r3, [pc, #256]	; (8002510 <HAL_DAC_MspInit+0x154>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002418:	2330      	movs	r3, #48	; 0x30
 800241a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800241c:	2303      	movs	r3, #3
 800241e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4619      	mov	r1, r3
 800242a:	483a      	ldr	r0, [pc, #232]	; (8002514 <HAL_DAC_MspInit+0x158>)
 800242c:	f002 f9f0 	bl	8004810 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002430:	4b39      	ldr	r3, [pc, #228]	; (8002518 <HAL_DAC_MspInit+0x15c>)
 8002432:	4a3a      	ldr	r2, [pc, #232]	; (800251c <HAL_DAC_MspInit+0x160>)
 8002434:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002436:	4b38      	ldr	r3, [pc, #224]	; (8002518 <HAL_DAC_MspInit+0x15c>)
 8002438:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800243c:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800243e:	4b36      	ldr	r3, [pc, #216]	; (8002518 <HAL_DAC_MspInit+0x15c>)
 8002440:	2240      	movs	r2, #64	; 0x40
 8002442:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002444:	4b34      	ldr	r3, [pc, #208]	; (8002518 <HAL_DAC_MspInit+0x15c>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800244a:	4b33      	ldr	r3, [pc, #204]	; (8002518 <HAL_DAC_MspInit+0x15c>)
 800244c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002450:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002452:	4b31      	ldr	r3, [pc, #196]	; (8002518 <HAL_DAC_MspInit+0x15c>)
 8002454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002458:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800245a:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <HAL_DAC_MspInit+0x15c>)
 800245c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002460:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8002462:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_DAC_MspInit+0x15c>)
 8002464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002468:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800246a:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <HAL_DAC_MspInit+0x15c>)
 800246c:	2200      	movs	r2, #0
 800246e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002470:	4b29      	ldr	r3, [pc, #164]	; (8002518 <HAL_DAC_MspInit+0x15c>)
 8002472:	2200      	movs	r2, #0
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002476:	4828      	ldr	r0, [pc, #160]	; (8002518 <HAL_DAC_MspInit+0x15c>)
 8002478:	f001 fdae 	bl	8003fd8 <HAL_DMA_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002482:	f7ff fe5f 	bl	8002144 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a23      	ldr	r2, [pc, #140]	; (8002518 <HAL_DAC_MspInit+0x15c>)
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	4a22      	ldr	r2, [pc, #136]	; (8002518 <HAL_DAC_MspInit+0x15c>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8002492:	4b23      	ldr	r3, [pc, #140]	; (8002520 <HAL_DAC_MspInit+0x164>)
 8002494:	4a23      	ldr	r2, [pc, #140]	; (8002524 <HAL_DAC_MspInit+0x168>)
 8002496:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8002498:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HAL_DAC_MspInit+0x164>)
 800249a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800249e:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <HAL_DAC_MspInit+0x164>)
 80024a2:	2240      	movs	r2, #64	; 0x40
 80024a4:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HAL_DAC_MspInit+0x164>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_DAC_MspInit+0x164>)
 80024ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b2:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <HAL_DAC_MspInit+0x164>)
 80024b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024ba:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024bc:	4b18      	ldr	r3, [pc, #96]	; (8002520 <HAL_DAC_MspInit+0x164>)
 80024be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c2:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_DAC_MspInit+0x164>)
 80024c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ca:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HAL_DAC_MspInit+0x164>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_DAC_MspInit+0x164>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80024d8:	4811      	ldr	r0, [pc, #68]	; (8002520 <HAL_DAC_MspInit+0x164>)
 80024da:	f001 fd7d 	bl	8003fd8 <HAL_DMA_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80024e4:	f7ff fe2e 	bl	8002144 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <HAL_DAC_MspInit+0x164>)
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <HAL_DAC_MspInit+0x164>)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2100      	movs	r1, #0
 80024f8:	2036      	movs	r0, #54	; 0x36
 80024fa:	f001 fab9 	bl	8003a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024fe:	2036      	movs	r0, #54	; 0x36
 8002500:	f001 fad2 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002504:	bf00      	nop
 8002506:	3728      	adds	r7, #40	; 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40007400 	.word	0x40007400
 8002510:	40023800 	.word	0x40023800
 8002514:	40020000 	.word	0x40020000
 8002518:	200003a4 	.word	0x200003a4
 800251c:	40026088 	.word	0x40026088
 8002520:	20000404 	.word	0x20000404
 8002524:	400260a0 	.word	0x400260a0

08002528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a34      	ldr	r2, [pc, #208]	; (8002618 <HAL_I2C_MspInit+0xf0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d161      	bne.n	800260e <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	4b33      	ldr	r3, [pc, #204]	; (800261c <HAL_I2C_MspInit+0xf4>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	4a32      	ldr	r2, [pc, #200]	; (800261c <HAL_I2C_MspInit+0xf4>)
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	6313      	str	r3, [r2, #48]	; 0x30
 800255a:	4b30      	ldr	r3, [pc, #192]	; (800261c <HAL_I2C_MspInit+0xf4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002566:	23c0      	movs	r3, #192	; 0xc0
 8002568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800256a:	2312      	movs	r3, #18
 800256c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002572:	2303      	movs	r3, #3
 8002574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002576:	2304      	movs	r3, #4
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	4827      	ldr	r0, [pc, #156]	; (8002620 <HAL_I2C_MspInit+0xf8>)
 8002582:	f002 f945 	bl	8004810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_I2C_MspInit+0xf4>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a23      	ldr	r2, [pc, #140]	; (800261c <HAL_I2C_MspInit+0xf4>)
 8002590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b21      	ldr	r3, [pc, #132]	; (800261c <HAL_I2C_MspInit+0xf4>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HAL_I2C_MspInit+0xfc>)
 80025a4:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_I2C_MspInit+0x100>)
 80025a6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80025a8:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <HAL_I2C_MspInit+0xfc>)
 80025aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ae:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <HAL_I2C_MspInit+0xfc>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_I2C_MspInit+0xfc>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025bc:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_I2C_MspInit+0xfc>)
 80025be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c4:	4b17      	ldr	r3, [pc, #92]	; (8002624 <HAL_I2C_MspInit+0xfc>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <HAL_I2C_MspInit+0xfc>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80025d0:	4b14      	ldr	r3, [pc, #80]	; (8002624 <HAL_I2C_MspInit+0xfc>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_I2C_MspInit+0xfc>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <HAL_I2C_MspInit+0xfc>)
 80025de:	2200      	movs	r2, #0
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80025e2:	4810      	ldr	r0, [pc, #64]	; (8002624 <HAL_I2C_MspInit+0xfc>)
 80025e4:	f001 fcf8 	bl	8003fd8 <HAL_DMA_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80025ee:	f7ff fda9 	bl	8002144 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a0b      	ldr	r2, [pc, #44]	; (8002624 <HAL_I2C_MspInit+0xfc>)
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38
 80025f8:	4a0a      	ldr	r2, [pc, #40]	; (8002624 <HAL_I2C_MspInit+0xfc>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	201f      	movs	r0, #31
 8002604:	f001 fa34 	bl	8003a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002608:	201f      	movs	r0, #31
 800260a:	f001 fa4d 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800260e:	bf00      	nop
 8002610:	3728      	adds	r7, #40	; 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40005400 	.word	0x40005400
 800261c:	40023800 	.word	0x40023800
 8002620:	40020400 	.word	0x40020400
 8002624:	200004b8 	.word	0x200004b8
 8002628:	40026010 	.word	0x40026010

0800262c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263c:	d10e      	bne.n	800265c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	4b32      	ldr	r3, [pc, #200]	; (800270c <HAL_TIM_Base_MspInit+0xe0>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a31      	ldr	r2, [pc, #196]	; (800270c <HAL_TIM_Base_MspInit+0xe0>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b2f      	ldr	r3, [pc, #188]	; (800270c <HAL_TIM_Base_MspInit+0xe0>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800265a:	e052      	b.n	8002702 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM6)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a2b      	ldr	r2, [pc, #172]	; (8002710 <HAL_TIM_Base_MspInit+0xe4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d116      	bne.n	8002694 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	4b28      	ldr	r3, [pc, #160]	; (800270c <HAL_TIM_Base_MspInit+0xe0>)
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	4a27      	ldr	r2, [pc, #156]	; (800270c <HAL_TIM_Base_MspInit+0xe0>)
 8002670:	f043 0310 	orr.w	r3, r3, #16
 8002674:	6413      	str	r3, [r2, #64]	; 0x40
 8002676:	4b25      	ldr	r3, [pc, #148]	; (800270c <HAL_TIM_Base_MspInit+0xe0>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002682:	2200      	movs	r2, #0
 8002684:	2100      	movs	r1, #0
 8002686:	2036      	movs	r0, #54	; 0x36
 8002688:	f001 f9f2 	bl	8003a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800268c:	2036      	movs	r0, #54	; 0x36
 800268e:	f001 fa0b 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
}
 8002692:	e036      	b.n	8002702 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM7)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a1e      	ldr	r2, [pc, #120]	; (8002714 <HAL_TIM_Base_MspInit+0xe8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d116      	bne.n	80026cc <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b1a      	ldr	r3, [pc, #104]	; (800270c <HAL_TIM_Base_MspInit+0xe0>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a19      	ldr	r2, [pc, #100]	; (800270c <HAL_TIM_Base_MspInit+0xe0>)
 80026a8:	f043 0320 	orr.w	r3, r3, #32
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <HAL_TIM_Base_MspInit+0xe0>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2100      	movs	r1, #0
 80026be:	2037      	movs	r0, #55	; 0x37
 80026c0:	f001 f9d6 	bl	8003a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80026c4:	2037      	movs	r0, #55	; 0x37
 80026c6:	f001 f9ef 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
}
 80026ca:	e01a      	b.n	8002702 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM10)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a11      	ldr	r2, [pc, #68]	; (8002718 <HAL_TIM_Base_MspInit+0xec>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d115      	bne.n	8002702 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	4b0c      	ldr	r3, [pc, #48]	; (800270c <HAL_TIM_Base_MspInit+0xe0>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a0b      	ldr	r2, [pc, #44]	; (800270c <HAL_TIM_Base_MspInit+0xe0>)
 80026e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b09      	ldr	r3, [pc, #36]	; (800270c <HAL_TIM_Base_MspInit+0xe0>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2100      	movs	r1, #0
 80026f6:	2019      	movs	r0, #25
 80026f8:	f001 f9ba 	bl	8003a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026fc:	2019      	movs	r0, #25
 80026fe:	f001 f9d3 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
}
 8002702:	bf00      	nop
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40023800 	.word	0x40023800
 8002710:	40001000 	.word	0x40001000
 8002714:	40001400 	.word	0x40001400
 8002718:	40014400 	.word	0x40014400

0800271c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	; 0x30
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 031c 	add.w	r3, r7, #28
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a68      	ldr	r2, [pc, #416]	; (80028dc <HAL_UART_MspInit+0x1c0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d163      	bne.n	8002806 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <HAL_UART_MspInit+0x1c4>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a66      	ldr	r2, [pc, #408]	; (80028e0 <HAL_UART_MspInit+0x1c4>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b64      	ldr	r3, [pc, #400]	; (80028e0 <HAL_UART_MspInit+0x1c4>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002756:	61bb      	str	r3, [r7, #24]
 8002758:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	4b60      	ldr	r3, [pc, #384]	; (80028e0 <HAL_UART_MspInit+0x1c4>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a5f      	ldr	r2, [pc, #380]	; (80028e0 <HAL_UART_MspInit+0x1c4>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b5d      	ldr	r3, [pc, #372]	; (80028e0 <HAL_UART_MspInit+0x1c4>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002776:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800277a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002784:	2303      	movs	r3, #3
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002788:	2307      	movs	r3, #7
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278c:	f107 031c 	add.w	r3, r7, #28
 8002790:	4619      	mov	r1, r3
 8002792:	4854      	ldr	r0, [pc, #336]	; (80028e4 <HAL_UART_MspInit+0x1c8>)
 8002794:	f002 f83c 	bl	8004810 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002798:	4b53      	ldr	r3, [pc, #332]	; (80028e8 <HAL_UART_MspInit+0x1cc>)
 800279a:	4a54      	ldr	r2, [pc, #336]	; (80028ec <HAL_UART_MspInit+0x1d0>)
 800279c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800279e:	4b52      	ldr	r3, [pc, #328]	; (80028e8 <HAL_UART_MspInit+0x1cc>)
 80027a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027a6:	4b50      	ldr	r3, [pc, #320]	; (80028e8 <HAL_UART_MspInit+0x1cc>)
 80027a8:	2240      	movs	r2, #64	; 0x40
 80027aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027ac:	4b4e      	ldr	r3, [pc, #312]	; (80028e8 <HAL_UART_MspInit+0x1cc>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027b2:	4b4d      	ldr	r3, [pc, #308]	; (80028e8 <HAL_UART_MspInit+0x1cc>)
 80027b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027b8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027ba:	4b4b      	ldr	r3, [pc, #300]	; (80028e8 <HAL_UART_MspInit+0x1cc>)
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027c0:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <HAL_UART_MspInit+0x1cc>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80027c6:	4b48      	ldr	r3, [pc, #288]	; (80028e8 <HAL_UART_MspInit+0x1cc>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027cc:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <HAL_UART_MspInit+0x1cc>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027d2:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <HAL_UART_MspInit+0x1cc>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80027d8:	4843      	ldr	r0, [pc, #268]	; (80028e8 <HAL_UART_MspInit+0x1cc>)
 80027da:	f001 fbfd 	bl	8003fd8 <HAL_DMA_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80027e4:	f7ff fcae 	bl	8002144 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a3f      	ldr	r2, [pc, #252]	; (80028e8 <HAL_UART_MspInit+0x1cc>)
 80027ec:	635a      	str	r2, [r3, #52]	; 0x34
 80027ee:	4a3e      	ldr	r2, [pc, #248]	; (80028e8 <HAL_UART_MspInit+0x1cc>)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	2027      	movs	r0, #39	; 0x27
 80027fa:	f001 f939 	bl	8003a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027fe:	2027      	movs	r0, #39	; 0x27
 8002800:	f001 f952 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002804:	e066      	b.n	80028d4 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a39      	ldr	r2, [pc, #228]	; (80028f0 <HAL_UART_MspInit+0x1d4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d161      	bne.n	80028d4 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002810:	2300      	movs	r3, #0
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <HAL_UART_MspInit+0x1c4>)
 8002816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002818:	4a31      	ldr	r2, [pc, #196]	; (80028e0 <HAL_UART_MspInit+0x1c4>)
 800281a:	f043 0320 	orr.w	r3, r3, #32
 800281e:	6453      	str	r3, [r2, #68]	; 0x44
 8002820:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <HAL_UART_MspInit+0x1c4>)
 8002822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800282c:	2300      	movs	r3, #0
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_UART_MspInit+0x1c4>)
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	4a2a      	ldr	r2, [pc, #168]	; (80028e0 <HAL_UART_MspInit+0x1c4>)
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	6313      	str	r3, [r2, #48]	; 0x30
 800283c:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <HAL_UART_MspInit+0x1c4>)
 800283e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002848:	23c0      	movs	r3, #192	; 0xc0
 800284a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002854:	2303      	movs	r3, #3
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002858:	2308      	movs	r3, #8
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	4619      	mov	r1, r3
 8002862:	4824      	ldr	r0, [pc, #144]	; (80028f4 <HAL_UART_MspInit+0x1d8>)
 8002864:	f001 ffd4 	bl	8004810 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002868:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <HAL_UART_MspInit+0x1dc>)
 800286a:	4a24      	ldr	r2, [pc, #144]	; (80028fc <HAL_UART_MspInit+0x1e0>)
 800286c:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800286e:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <HAL_UART_MspInit+0x1dc>)
 8002870:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002874:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_UART_MspInit+0x1dc>)
 8002878:	2240      	movs	r2, #64	; 0x40
 800287a:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800287c:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <HAL_UART_MspInit+0x1dc>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_UART_MspInit+0x1dc>)
 8002884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002888:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800288a:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_UART_MspInit+0x1dc>)
 800288c:	2200      	movs	r2, #0
 800288e:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_UART_MspInit+0x1dc>)
 8002892:	2200      	movs	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002896:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <HAL_UART_MspInit+0x1dc>)
 8002898:	2200      	movs	r2, #0
 800289a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <HAL_UART_MspInit+0x1dc>)
 800289e:	2200      	movs	r2, #0
 80028a0:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028a2:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_UART_MspInit+0x1dc>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80028a8:	4813      	ldr	r0, [pc, #76]	; (80028f8 <HAL_UART_MspInit+0x1dc>)
 80028aa:	f001 fb95 	bl	8003fd8 <HAL_DMA_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80028b4:	f7ff fc46 	bl	8002144 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <HAL_UART_MspInit+0x1dc>)
 80028bc:	635a      	str	r2, [r3, #52]	; 0x34
 80028be:	4a0e      	ldr	r2, [pc, #56]	; (80028f8 <HAL_UART_MspInit+0x1dc>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2100      	movs	r1, #0
 80028c8:	2047      	movs	r0, #71	; 0x47
 80028ca:	f001 f8d1 	bl	8003a70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80028ce:	2047      	movs	r0, #71	; 0x47
 80028d0:	f001 f8ea 	bl	8003aa8 <HAL_NVIC_EnableIRQ>
}
 80028d4:	bf00      	nop
 80028d6:	3730      	adds	r7, #48	; 0x30
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40004800 	.word	0x40004800
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40020400 	.word	0x40020400
 80028e8:	200006c0 	.word	0x200006c0
 80028ec:	40026058 	.word	0x40026058
 80028f0:	40011400 	.word	0x40011400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	20000720 	.word	0x20000720
 80028fc:	400264a0 	.word	0x400264a0

08002900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	; 0x30
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002910:	2200      	movs	r2, #0
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	2019      	movs	r0, #25
 8002916:	f001 f8ab 	bl	8003a70 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800291a:	2019      	movs	r0, #25
 800291c:	f001 f8c4 	bl	8003aa8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <HAL_InitTick+0xa4>)
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	4a1e      	ldr	r2, [pc, #120]	; (80029a4 <HAL_InitTick+0xa4>)
 800292a:	f043 0301 	orr.w	r3, r3, #1
 800292e:	6453      	str	r3, [r2, #68]	; 0x44
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <HAL_InitTick+0xa4>)
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800293c:	f107 0210 	add.w	r2, r7, #16
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f005 f8ca 	bl	8007ae0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800294c:	f005 f8b4 	bl	8007ab8 <HAL_RCC_GetPCLK2Freq>
 8002950:	4603      	mov	r3, r0
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	4a13      	ldr	r2, [pc, #76]	; (80029a8 <HAL_InitTick+0xa8>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0c9b      	lsrs	r3, r3, #18
 8002960:	3b01      	subs	r3, #1
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_InitTick+0xac>)
 8002966:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <HAL_InitTick+0xb0>)
 8002968:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_InitTick+0xac>)
 800296c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002970:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002972:	4a0e      	ldr	r2, [pc, #56]	; (80029ac <HAL_InitTick+0xac>)
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <HAL_InitTick+0xac>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_InitTick+0xac>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002984:	4809      	ldr	r0, [pc, #36]	; (80029ac <HAL_InitTick+0xac>)
 8002986:	f005 f8dd 	bl	8007b44 <HAL_TIM_Base_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d104      	bne.n	800299a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002990:	4806      	ldr	r0, [pc, #24]	; (80029ac <HAL_InitTick+0xac>)
 8002992:	f005 f927 	bl	8007be4 <HAL_TIM_Base_Start_IT>
 8002996:	4603      	mov	r3, r0
 8002998:	e000      	b.n	800299c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
}
 800299c:	4618      	mov	r0, r3
 800299e:	3730      	adds	r7, #48	; 0x30
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	431bde83 	.word	0x431bde83
 80029ac:	2000185c 	.word	0x2000185c
 80029b0:	40010000 	.word	0x40010000

080029b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029b8:	e7fe      	b.n	80029b8 <NMI_Handler+0x4>

080029ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029be:	e7fe      	b.n	80029be <HardFault_Handler+0x4>

080029c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <MemManage_Handler+0x4>

080029c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ca:	e7fe      	b.n	80029ca <BusFault_Handler+0x4>

080029cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <UsageFault_Handler+0x4>

080029d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002a0e:	2004      	movs	r0, #4
 8002a10:	f002 f8b4 	bl	8004b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002a1c:	2008      	movs	r0, #8
 8002a1e:	f002 f8ad 	bl	8004b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002a2a:	2010      	movs	r0, #16
 8002a2c:	f002 f8a6 	bl	8004b7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <DMA1_Stream0_IRQHandler+0x10>)
 8002a3a:	f001 fc65 	bl	8004308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200004b8 	.word	0x200004b8

08002a48 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <DMA1_Stream3_IRQHandler+0x10>)
 8002a4e:	f001 fc5b 	bl	8004308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200006c0 	.word	0x200006c0

08002a5c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <DMA1_Stream5_IRQHandler+0x10>)
 8002a62:	f001 fc51 	bl	8004308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200003a4 	.word	0x200003a4

08002a70 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <DMA1_Stream6_IRQHandler+0x10>)
 8002a76:	f001 fc47 	bl	8004308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	20000404 	.word	0x20000404

08002a84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a88:	4803      	ldr	r0, [pc, #12]	; (8002a98 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002a8a:	f005 f91b 	bl	8007cc4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002a8e:	4803      	ldr	r0, [pc, #12]	; (8002a9c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002a90:	f005 f918 	bl	8007cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	2000185c 	.word	0x2000185c
 8002a9c:	200005f0 	.word	0x200005f0

08002aa0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002aa4:	4802      	ldr	r0, [pc, #8]	; (8002ab0 <I2C1_EV_IRQHandler+0x10>)
 8002aa6:	f002 fc87 	bl	80053b8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000464 	.word	0x20000464

08002ab4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ab8:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <USART3_IRQHandler+0x10>)
 8002aba:	f005 fd91 	bl	80085e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20000638 	.word	0x20000638

08002ac8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002acc:	4803      	ldr	r0, [pc, #12]	; (8002adc <TIM6_DAC_IRQHandler+0x14>)
 8002ace:	f001 f931 	bl	8003d34 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002ad2:	4803      	ldr	r0, [pc, #12]	; (8002ae0 <TIM6_DAC_IRQHandler+0x18>)
 8002ad4:	f005 f8f6 	bl	8007cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000390 	.word	0x20000390
 8002ae0:	20000560 	.word	0x20000560

08002ae4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002ae8:	4802      	ldr	r0, [pc, #8]	; (8002af4 <TIM7_IRQHandler+0x10>)
 8002aea:	f005 f8eb 	bl	8007cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	200005a8 	.word	0x200005a8

08002af8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002afc:	4802      	ldr	r0, [pc, #8]	; (8002b08 <DMA2_Stream0_IRQHandler+0x10>)
 8002afe:	f001 fc03 	bl	8004308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	200002d0 	.word	0x200002d0

08002b0c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002b10:	4802      	ldr	r0, [pc, #8]	; (8002b1c <DMA2_Stream2_IRQHandler+0x10>)
 8002b12:	f001 fbf9 	bl	8004308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	20000330 	.word	0x20000330

08002b20 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <DMA2_Stream6_IRQHandler+0x10>)
 8002b26:	f001 fbef 	bl	8004308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000720 	.word	0x20000720

08002b34 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <USART6_IRQHandler+0x10>)
 8002b3a:	f005 fd51 	bl	80085e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	2000067c 	.word	0x2000067c

08002b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
	return 1;
 8002b4c:	2301      	movs	r3, #1
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <_kill>:

int _kill(int pid, int sig)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b62:	f006 fcd1 	bl	8009508 <__errno>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2216      	movs	r2, #22
 8002b6a:	601a      	str	r2, [r3, #0]
	return -1;
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <_exit>:

void _exit (int status)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ffe7 	bl	8002b58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b8a:	e7fe      	b.n	8002b8a <_exit+0x12>

08002b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	e00a      	b.n	8002bb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b9e:	f3af 8000 	nop.w
 8002ba2:	4601      	mov	r1, r0
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	60ba      	str	r2, [r7, #8]
 8002baa:	b2ca      	uxtb	r2, r1
 8002bac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	dbf0      	blt.n	8002b9e <_read+0x12>
	}

return len;
 8002bbc:	687b      	ldr	r3, [r7, #4]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	e009      	b.n	8002bec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	1c5a      	adds	r2, r3, #1
 8002bdc:	60ba      	str	r2, [r7, #8]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	3301      	adds	r3, #1
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	dbf1      	blt.n	8002bd8 <_write+0x12>
	}
	return len;
 8002bf4:	687b      	ldr	r3, [r7, #4]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <_close>:

int _close(int file)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
	return -1;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c26:	605a      	str	r2, [r3, #4]
	return 0;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <_isatty>:

int _isatty(int file)
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
	return 1;
 8002c3e:	2301      	movs	r3, #1
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
	return 0;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c70:	4a14      	ldr	r2, [pc, #80]	; (8002cc4 <_sbrk+0x5c>)
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <_sbrk+0x60>)
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c7c:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <_sbrk+0x64>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <_sbrk+0x64>)
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <_sbrk+0x68>)
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <_sbrk+0x64>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d207      	bcs.n	8002ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c98:	f006 fc36 	bl	8009508 <__errno>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ca6:	e009      	b.n	8002cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <_sbrk+0x64>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <_sbrk+0x64>)
 8002cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cba:	68fb      	ldr	r3, [r7, #12]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20020000 	.word	0x20020000
 8002cc8:	00000400 	.word	0x00000400
 8002ccc:	200018a4 	.word	0x200018a4
 8002cd0:	200018c0 	.word	0x200018c0

08002cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <SystemInit+0x20>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <SystemInit+0x20>)
 8002ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cfc:	480d      	ldr	r0, [pc, #52]	; (8002d34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cfe:	490e      	ldr	r1, [pc, #56]	; (8002d38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d00:	4a0e      	ldr	r2, [pc, #56]	; (8002d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d04:	e002      	b.n	8002d0c <LoopCopyDataInit>

08002d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d0a:	3304      	adds	r3, #4

08002d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d10:	d3f9      	bcc.n	8002d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d12:	4a0b      	ldr	r2, [pc, #44]	; (8002d40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d14:	4c0b      	ldr	r4, [pc, #44]	; (8002d44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d18:	e001      	b.n	8002d1e <LoopFillZerobss>

08002d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d1c:	3204      	adds	r2, #4

08002d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d20:	d3fb      	bcc.n	8002d1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d22:	f7ff ffd7 	bl	8002cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d26:	f006 fbf5 	bl	8009514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d2a:	f7fe fce7 	bl	80016fc <main>
  bx  lr    
 8002d2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d38:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002d3c:	0800c774 	.word	0x0800c774
  ldr r2, =_sbss
 8002d40:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002d44:	200018bc 	.word	0x200018bc

08002d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d48:	e7fe      	b.n	8002d48 <ADC_IRQHandler>
	...

08002d4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <HAL_Init+0x40>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <HAL_Init+0x40>)
 8002d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_Init+0x40>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HAL_Init+0x40>)
 8002d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d68:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <HAL_Init+0x40>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a07      	ldr	r2, [pc, #28]	; (8002d8c <HAL_Init+0x40>)
 8002d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d74:	2003      	movs	r0, #3
 8002d76:	f000 fe70 	bl	8003a5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7ff fdc0 	bl	8002900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d80:	f7ff f9e6 	bl	8002150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023c00 	.word	0x40023c00

08002d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <HAL_IncTick+0x20>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_IncTick+0x24>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4413      	add	r3, r2
 8002da0:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <HAL_IncTick+0x24>)
 8002da2:	6013      	str	r3, [r2, #0]
}
 8002da4:	bf00      	nop
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000008 	.word	0x20000008
 8002db4:	200018a8 	.word	0x200018a8

08002db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return uwTick;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	; (8002dcc <HAL_GetTick+0x14>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	200018a8 	.word	0x200018a8

08002dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff ffee 	bl	8002db8 <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de8:	d005      	beq.n	8002df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dea:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <HAL_Delay+0x44>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	4413      	add	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002df6:	bf00      	nop
 8002df8:	f7ff ffde 	bl	8002db8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d8f7      	bhi.n	8002df8 <HAL_Delay+0x28>
  {
  }
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000008 	.word	0x20000008

08002e18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e033      	b.n	8002e96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff f9b2 	bl	80021a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d118      	bne.n	8002e88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e5e:	f023 0302 	bic.w	r3, r3, #2
 8002e62:	f043 0202 	orr.w	r2, r3, #2
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fbca 	bl	8003604 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	f043 0201 	orr.w	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
 8002e86:	e001      	b.n	8002e8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_ADC_Start+0x1a>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e0b2      	b.n	8003020 <HAL_ADC_Start+0x180>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d018      	beq.n	8002f02 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f042 0201 	orr.w	r2, r2, #1
 8002ede:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ee0:	4b52      	ldr	r3, [pc, #328]	; (800302c <HAL_ADC_Start+0x18c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a52      	ldr	r2, [pc, #328]	; (8003030 <HAL_ADC_Start+0x190>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0c9a      	lsrs	r2, r3, #18
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002ef4:	e002      	b.n	8002efc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f9      	bne.n	8002ef6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d17a      	bne.n	8003006 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f18:	f023 0301 	bic.w	r3, r3, #1
 8002f1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4e:	d106      	bne.n	8002f5e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f54:	f023 0206 	bic.w	r2, r3, #6
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44
 8002f5c:	e002      	b.n	8002f64 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f6c:	4b31      	ldr	r3, [pc, #196]	; (8003034 <HAL_ADC_Start+0x194>)
 8002f6e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f78:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d12a      	bne.n	8002fdc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2b      	ldr	r2, [pc, #172]	; (8003038 <HAL_ADC_Start+0x198>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d015      	beq.n	8002fbc <HAL_ADC_Start+0x11c>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a29      	ldr	r2, [pc, #164]	; (800303c <HAL_ADC_Start+0x19c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d105      	bne.n	8002fa6 <HAL_ADC_Start+0x106>
 8002f9a:	4b26      	ldr	r3, [pc, #152]	; (8003034 <HAL_ADC_Start+0x194>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 031f 	and.w	r3, r3, #31
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a25      	ldr	r2, [pc, #148]	; (8003040 <HAL_ADC_Start+0x1a0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d136      	bne.n	800301e <HAL_ADC_Start+0x17e>
 8002fb0:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_ADC_Start+0x194>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d130      	bne.n	800301e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d129      	bne.n	800301e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	e020      	b.n	800301e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a15      	ldr	r2, [pc, #84]	; (8003038 <HAL_ADC_Start+0x198>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d11b      	bne.n	800301e <HAL_ADC_Start+0x17e>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d114      	bne.n	800301e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	e00b      	b.n	800301e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f043 0210 	orr.w	r2, r3, #16
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	f043 0201 	orr.w	r2, r3, #1
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	20000000 	.word	0x20000000
 8003030:	431bde83 	.word	0x431bde83
 8003034:	40012300 	.word	0x40012300
 8003038:	40012000 	.word	0x40012000
 800303c:	40012100 	.word	0x40012100
 8003040:	40012200 	.word	0x40012200

08003044 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003060:	d113      	bne.n	800308a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800306c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003070:	d10b      	bne.n	800308a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0220 	orr.w	r2, r3, #32
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e063      	b.n	8003152 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800308a:	f7ff fe95 	bl	8002db8 <HAL_GetTick>
 800308e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003090:	e021      	b.n	80030d6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003098:	d01d      	beq.n	80030d6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <HAL_ADC_PollForConversion+0x6c>
 80030a0:	f7ff fe8a 	bl	8002db8 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d212      	bcs.n	80030d6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d00b      	beq.n	80030d6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f043 0204 	orr.w	r2, r3, #4
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e03d      	b.n	8003152 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d1d6      	bne.n	8003092 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0212 	mvn.w	r2, #18
 80030ec:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d123      	bne.n	8003150 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800310c:	2b00      	cmp	r3, #0
 800310e:	d11f      	bne.n	8003150 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003128:	2b00      	cmp	r3, #0
 800312a:	d111      	bne.n	8003150 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d105      	bne.n	8003150 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	f043 0201 	orr.w	r2, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_ADC_Start_DMA+0x1e>
 8003176:	2302      	movs	r3, #2
 8003178:	e0e9      	b.n	800334e <HAL_ADC_Start_DMA+0x1f2>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d018      	beq.n	80031c2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031a0:	4b6d      	ldr	r3, [pc, #436]	; (8003358 <HAL_ADC_Start_DMA+0x1fc>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a6d      	ldr	r2, [pc, #436]	; (800335c <HAL_ADC_Start_DMA+0x200>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	0c9a      	lsrs	r2, r3, #18
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031b4:	e002      	b.n	80031bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f9      	bne.n	80031b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d0:	d107      	bne.n	80031e2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	f040 80a1 	bne.w	8003334 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003210:	2b00      	cmp	r3, #0
 8003212:	d007      	beq.n	8003224 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800321c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800322c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003230:	d106      	bne.n	8003240 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003236:	f023 0206 	bic.w	r2, r3, #6
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	645a      	str	r2, [r3, #68]	; 0x44
 800323e:	e002      	b.n	8003246 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800324e:	4b44      	ldr	r3, [pc, #272]	; (8003360 <HAL_ADC_Start_DMA+0x204>)
 8003250:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003256:	4a43      	ldr	r2, [pc, #268]	; (8003364 <HAL_ADC_Start_DMA+0x208>)
 8003258:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	4a42      	ldr	r2, [pc, #264]	; (8003368 <HAL_ADC_Start_DMA+0x20c>)
 8003260:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	4a41      	ldr	r2, [pc, #260]	; (800336c <HAL_ADC_Start_DMA+0x210>)
 8003268:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003272:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003282:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003292:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	334c      	adds	r3, #76	; 0x4c
 800329e:	4619      	mov	r1, r3
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f000 ff46 	bl	8004134 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d12a      	bne.n	800330a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2d      	ldr	r2, [pc, #180]	; (8003370 <HAL_ADC_Start_DMA+0x214>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d015      	beq.n	80032ea <HAL_ADC_Start_DMA+0x18e>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a2c      	ldr	r2, [pc, #176]	; (8003374 <HAL_ADC_Start_DMA+0x218>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d105      	bne.n	80032d4 <HAL_ADC_Start_DMA+0x178>
 80032c8:	4b25      	ldr	r3, [pc, #148]	; (8003360 <HAL_ADC_Start_DMA+0x204>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 031f 	and.w	r3, r3, #31
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a27      	ldr	r2, [pc, #156]	; (8003378 <HAL_ADC_Start_DMA+0x21c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d136      	bne.n	800334c <HAL_ADC_Start_DMA+0x1f0>
 80032de:	4b20      	ldr	r3, [pc, #128]	; (8003360 <HAL_ADC_Start_DMA+0x204>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d130      	bne.n	800334c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d129      	bne.n	800334c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	e020      	b.n	800334c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a18      	ldr	r2, [pc, #96]	; (8003370 <HAL_ADC_Start_DMA+0x214>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d11b      	bne.n	800334c <HAL_ADC_Start_DMA+0x1f0>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d114      	bne.n	800334c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003330:	609a      	str	r2, [r3, #8]
 8003332:	e00b      	b.n	800334c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f043 0210 	orr.w	r2, r3, #16
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	f043 0201 	orr.w	r2, r3, #1
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20000000 	.word	0x20000000
 800335c:	431bde83 	.word	0x431bde83
 8003360:	40012300 	.word	0x40012300
 8003364:	080037fd 	.word	0x080037fd
 8003368:	080038b7 	.word	0x080038b7
 800336c:	080038d3 	.word	0x080038d3
 8003370:	40012000 	.word	0x40012000
 8003374:	40012100 	.word	0x40012100
 8003378:	40012200 	.word	0x40012200

0800337c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800338a:	4618      	mov	r0, r3
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d101      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x1c>
 80033d8:	2302      	movs	r3, #2
 80033da:	e105      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x228>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b09      	cmp	r3, #9
 80033ea:	d925      	bls.n	8003438 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68d9      	ldr	r1, [r3, #12]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	4613      	mov	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	4413      	add	r3, r2
 8003400:	3b1e      	subs	r3, #30
 8003402:	2207      	movs	r2, #7
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43da      	mvns	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	400a      	ands	r2, r1
 8003410:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68d9      	ldr	r1, [r3, #12]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	b29b      	uxth	r3, r3
 8003422:	4618      	mov	r0, r3
 8003424:	4603      	mov	r3, r0
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4403      	add	r3, r0
 800342a:	3b1e      	subs	r3, #30
 800342c:	409a      	lsls	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	e022      	b.n	800347e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6919      	ldr	r1, [r3, #16]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	461a      	mov	r2, r3
 8003446:	4613      	mov	r3, r2
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	4413      	add	r3, r2
 800344c:	2207      	movs	r2, #7
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43da      	mvns	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	400a      	ands	r2, r1
 800345a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6919      	ldr	r1, [r3, #16]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	4618      	mov	r0, r3
 800346e:	4603      	mov	r3, r0
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4403      	add	r3, r0
 8003474:	409a      	lsls	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b06      	cmp	r3, #6
 8003484:	d824      	bhi.n	80034d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	3b05      	subs	r3, #5
 8003498:	221f      	movs	r2, #31
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43da      	mvns	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	400a      	ands	r2, r1
 80034a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	4618      	mov	r0, r3
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4413      	add	r3, r2
 80034c0:	3b05      	subs	r3, #5
 80034c2:	fa00 f203 	lsl.w	r2, r0, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	635a      	str	r2, [r3, #52]	; 0x34
 80034ce:	e04c      	b.n	800356a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	d824      	bhi.n	8003522 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	3b23      	subs	r3, #35	; 0x23
 80034ea:	221f      	movs	r2, #31
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	43da      	mvns	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	400a      	ands	r2, r1
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	4618      	mov	r0, r3
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	3b23      	subs	r3, #35	; 0x23
 8003514:	fa00 f203 	lsl.w	r2, r0, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	631a      	str	r2, [r3, #48]	; 0x30
 8003520:	e023      	b.n	800356a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	3b41      	subs	r3, #65	; 0x41
 8003534:	221f      	movs	r2, #31
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43da      	mvns	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	400a      	ands	r2, r1
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	4618      	mov	r0, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	3b41      	subs	r3, #65	; 0x41
 800355e:	fa00 f203 	lsl.w	r2, r0, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <HAL_ADC_ConfigChannel+0x234>)
 800356c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a21      	ldr	r2, [pc, #132]	; (80035f8 <HAL_ADC_ConfigChannel+0x238>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d109      	bne.n	800358c <HAL_ADC_ConfigChannel+0x1cc>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b12      	cmp	r3, #18
 800357e:	d105      	bne.n	800358c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <HAL_ADC_ConfigChannel+0x238>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d123      	bne.n	80035de <HAL_ADC_ConfigChannel+0x21e>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b10      	cmp	r3, #16
 800359c:	d003      	beq.n	80035a6 <HAL_ADC_ConfigChannel+0x1e6>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b11      	cmp	r3, #17
 80035a4:	d11b      	bne.n	80035de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d111      	bne.n	80035de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_ADC_ConfigChannel+0x23c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a10      	ldr	r2, [pc, #64]	; (8003600 <HAL_ADC_ConfigChannel+0x240>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	0c9a      	lsrs	r2, r3, #18
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035d0:	e002      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f9      	bne.n	80035d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	40012300 	.word	0x40012300
 80035f8:	40012000 	.word	0x40012000
 80035fc:	20000000 	.word	0x20000000
 8003600:	431bde83 	.word	0x431bde83

08003604 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800360c:	4b79      	ldr	r3, [pc, #484]	; (80037f4 <ADC_Init+0x1f0>)
 800360e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	431a      	orrs	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003638:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	021a      	lsls	r2, r3, #8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800365c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800367e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6899      	ldr	r1, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	4a58      	ldr	r2, [pc, #352]	; (80037f8 <ADC_Init+0x1f4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d022      	beq.n	80036e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6899      	ldr	r1, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	e00f      	b.n	8003702 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003700:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0202 	bic.w	r2, r2, #2
 8003710:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6899      	ldr	r1, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	7e1b      	ldrb	r3, [r3, #24]
 800371c:	005a      	lsls	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3020 	ldrb.w	r3, [r3, #32]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01b      	beq.n	8003768 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800373e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800374e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6859      	ldr	r1, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	3b01      	subs	r3, #1
 800375c:	035a      	lsls	r2, r3, #13
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	e007      	b.n	8003778 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003776:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003786:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	3b01      	subs	r3, #1
 8003794:	051a      	lsls	r2, r3, #20
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6899      	ldr	r1, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037ba:	025a      	lsls	r2, r3, #9
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6899      	ldr	r1, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	029a      	lsls	r2, r3, #10
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	40012300 	.word	0x40012300
 80037f8:	0f000001 	.word	0x0f000001

080037fc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003812:	2b00      	cmp	r3, #0
 8003814:	d13c      	bne.n	8003890 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d12b      	bne.n	8003888 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003834:	2b00      	cmp	r3, #0
 8003836:	d127      	bne.n	8003888 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003842:	2b00      	cmp	r3, #0
 8003844:	d006      	beq.n	8003854 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003850:	2b00      	cmp	r3, #0
 8003852:	d119      	bne.n	8003888 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0220 	bic.w	r2, r2, #32
 8003862:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f043 0201 	orr.w	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff fd84 	bl	8003396 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800388e:	e00e      	b.n	80038ae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f7ff fd84 	bl	80033aa <HAL_ADC_ErrorCallback>
}
 80038a2:	e004      	b.n	80038ae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
}
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7fd fd51 	bl	800136c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2240      	movs	r2, #64	; 0x40
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	f043 0204 	orr.w	r2, r3, #4
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7ff fd59 	bl	80033aa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <__NVIC_SetPriorityGrouping+0x44>)
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800391c:	4013      	ands	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800392c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003932:	4a04      	ldr	r2, [pc, #16]	; (8003944 <__NVIC_SetPriorityGrouping+0x44>)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	60d3      	str	r3, [r2, #12]
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	e000ed00 	.word	0xe000ed00

08003948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800394c:	4b04      	ldr	r3, [pc, #16]	; (8003960 <__NVIC_GetPriorityGrouping+0x18>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	0a1b      	lsrs	r3, r3, #8
 8003952:	f003 0307 	and.w	r3, r3, #7
}
 8003956:	4618      	mov	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	2b00      	cmp	r3, #0
 8003974:	db0b      	blt.n	800398e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	f003 021f 	and.w	r2, r3, #31
 800397c:	4907      	ldr	r1, [pc, #28]	; (800399c <__NVIC_EnableIRQ+0x38>)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	2001      	movs	r0, #1
 8003986:	fa00 f202 	lsl.w	r2, r0, r2
 800398a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	e000e100 	.word	0xe000e100

080039a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	6039      	str	r1, [r7, #0]
 80039aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	db0a      	blt.n	80039ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	490c      	ldr	r1, [pc, #48]	; (80039ec <__NVIC_SetPriority+0x4c>)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	0112      	lsls	r2, r2, #4
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	440b      	add	r3, r1
 80039c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039c8:	e00a      	b.n	80039e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	4908      	ldr	r1, [pc, #32]	; (80039f0 <__NVIC_SetPriority+0x50>)
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	3b04      	subs	r3, #4
 80039d8:	0112      	lsls	r2, r2, #4
 80039da:	b2d2      	uxtb	r2, r2
 80039dc:	440b      	add	r3, r1
 80039de:	761a      	strb	r2, [r3, #24]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	e000e100 	.word	0xe000e100
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b089      	sub	sp, #36	; 0x24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f1c3 0307 	rsb	r3, r3, #7
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	bf28      	it	cs
 8003a12:	2304      	movcs	r3, #4
 8003a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	2b06      	cmp	r3, #6
 8003a1c:	d902      	bls.n	8003a24 <NVIC_EncodePriority+0x30>
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3b03      	subs	r3, #3
 8003a22:	e000      	b.n	8003a26 <NVIC_EncodePriority+0x32>
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43da      	mvns	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	401a      	ands	r2, r3
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	fa01 f303 	lsl.w	r3, r1, r3
 8003a46:	43d9      	mvns	r1, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a4c:	4313      	orrs	r3, r2
         );
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3724      	adds	r7, #36	; 0x24
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff ff4c 	bl	8003900 <__NVIC_SetPriorityGrouping>
}
 8003a68:	bf00      	nop
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a82:	f7ff ff61 	bl	8003948 <__NVIC_GetPriorityGrouping>
 8003a86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	6978      	ldr	r0, [r7, #20]
 8003a8e:	f7ff ffb1 	bl	80039f4 <NVIC_EncodePriority>
 8003a92:	4602      	mov	r2, r0
 8003a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff ff80 	bl	80039a0 <__NVIC_SetPriority>
}
 8003aa0:	bf00      	nop
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff54 	bl	8003964 <__NVIC_EnableIRQ>
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e014      	b.n	8003b00 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	791b      	ldrb	r3, [r3, #4]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fe fc68 	bl	80023bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	795b      	ldrb	r3, [r3, #5]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_DAC_Start_DMA+0x22>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e0ab      	b.n	8003c82 <HAL_DAC_Start_DMA+0x17a>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2202      	movs	r2, #2
 8003b34:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d12f      	bne.n	8003b9c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4a52      	ldr	r2, [pc, #328]	; (8003c8c <HAL_DAC_Start_DMA+0x184>)
 8003b42:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4a51      	ldr	r2, [pc, #324]	; (8003c90 <HAL_DAC_Start_DMA+0x188>)
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4a50      	ldr	r2, [pc, #320]	; (8003c94 <HAL_DAC_Start_DMA+0x18c>)
 8003b52:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b62:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003b64:	6a3b      	ldr	r3, [r7, #32]
 8003b66:	2b08      	cmp	r3, #8
 8003b68:	d013      	beq.n	8003b92 <HAL_DAC_Start_DMA+0x8a>
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d845      	bhi.n	8003bfc <HAL_DAC_Start_DMA+0xf4>
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_DAC_Start_DMA+0x76>
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d005      	beq.n	8003b88 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003b7c:	e03e      	b.n	8003bfc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3308      	adds	r3, #8
 8003b84:	613b      	str	r3, [r7, #16]
        break;
 8003b86:	e03c      	b.n	8003c02 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	613b      	str	r3, [r7, #16]
        break;
 8003b90:	e037      	b.n	8003c02 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3310      	adds	r3, #16
 8003b98:	613b      	str	r3, [r7, #16]
        break;
 8003b9a:	e032      	b.n	8003c02 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4a3d      	ldr	r2, [pc, #244]	; (8003c98 <HAL_DAC_Start_DMA+0x190>)
 8003ba2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4a3c      	ldr	r2, [pc, #240]	; (8003c9c <HAL_DAC_Start_DMA+0x194>)
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	4a3b      	ldr	r2, [pc, #236]	; (8003ca0 <HAL_DAC_Start_DMA+0x198>)
 8003bb2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bc2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d013      	beq.n	8003bf2 <HAL_DAC_Start_DMA+0xea>
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d817      	bhi.n	8003c00 <HAL_DAC_Start_DMA+0xf8>
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_DAC_Start_DMA+0xd6>
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d005      	beq.n	8003be8 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003bdc:	e010      	b.n	8003c00 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3314      	adds	r3, #20
 8003be4:	613b      	str	r3, [r7, #16]
        break;
 8003be6:	e00c      	b.n	8003c02 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3318      	adds	r3, #24
 8003bee:	613b      	str	r3, [r7, #16]
        break;
 8003bf0:	e007      	b.n	8003c02 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	331c      	adds	r3, #28
 8003bf8:	613b      	str	r3, [r7, #16]
        break;
 8003bfa:	e002      	b.n	8003c02 <HAL_DAC_Start_DMA+0xfa>
        break;
 8003bfc:	bf00      	nop
 8003bfe:	e000      	b.n	8003c02 <HAL_DAC_Start_DMA+0xfa>
        break;
 8003c00:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d111      	bne.n	8003c2c <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c16:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6898      	ldr	r0, [r3, #8]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	f000 fa87 	bl	8004134 <HAL_DMA_Start_IT>
 8003c26:	4603      	mov	r3, r0
 8003c28:	75fb      	strb	r3, [r7, #23]
 8003c2a:	e010      	b.n	8003c4e <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003c3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	68d8      	ldr	r0, [r3, #12]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	f000 fa75 	bl	8004134 <HAL_DMA_Start_IT>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10c      	bne.n	8003c74 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6819      	ldr	r1, [r3, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2201      	movs	r2, #1
 8003c68:	409a      	lsls	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	e005      	b.n	8003c80 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	f043 0204 	orr.w	r2, r3, #4
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	08003ec3 	.word	0x08003ec3
 8003c90:	08003ee5 	.word	0x08003ee5
 8003c94:	08003f01 	.word	0x08003f01
 8003c98:	08003f6b 	.word	0x08003f6b
 8003c9c:	08003f8d 	.word	0x08003f8d
 8003ca0:	08003fa9 	.word	0x08003fa9

08003ca4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	400a      	ands	r2, r1
 8003cca:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6819      	ldr	r1, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2201      	movs	r2, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	400a      	ands	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10d      	bne.n	8003d0a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fa76 	bl	80041e4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	e00c      	b.n	8003d24 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 fa68 	bl	80041e4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003d22:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4a:	d120      	bne.n	8003d8e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5a:	d118      	bne.n	8003d8e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2204      	movs	r2, #4
 8003d60:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d86:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f841 	bl	8003e10 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d9c:	d120      	bne.n	8003de0 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dac:	d118      	bne.n	8003de0 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2204      	movs	r2, #4
 8003db2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	f043 0202 	orr.w	r2, r3, #2
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003dc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003dd8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f8bb 	bl	8003f56 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b087      	sub	sp, #28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	795b      	ldrb	r3, [r3, #5]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_DAC_ConfigChannel+0x18>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e03c      	b.n	8003eb6 <HAL_DAC_ConfigChannel+0x92>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2202      	movs	r2, #2
 8003e46:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4013      	ands	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6819      	ldr	r1, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	22c0      	movs	r2, #192	; 0xc0
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7fd fa89 	bl	80013e8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	711a      	strb	r2, [r3, #4]
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7ff ff78 	bl	8003de8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f043 0204 	orr.w	r2, r3, #4
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff ff6e 	bl	8003dfc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	711a      	strb	r2, [r3, #4]
}
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003f5e:	bf00      	nop
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f7fd fa53 	bl	8001424 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2201      	movs	r2, #1
 8003f82:	711a      	strb	r2, [r3, #4]
}
 8003f84:	bf00      	nop
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f7ff ffc7 	bl	8003f2e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003fa0:	bf00      	nop
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	f043 0204 	orr.w	r2, r3, #4
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f7ff ffbd 	bl	8003f42 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	711a      	strb	r2, [r3, #4]
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fe4:	f7fe fee8 	bl	8002db8 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e099      	b.n	8004128 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004014:	e00f      	b.n	8004036 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004016:	f7fe fecf 	bl	8002db8 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b05      	cmp	r3, #5
 8004022:	d908      	bls.n	8004036 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2203      	movs	r2, #3
 800402e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e078      	b.n	8004128 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e8      	bne.n	8004016 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4b38      	ldr	r3, [pc, #224]	; (8004130 <HAL_DMA_Init+0x158>)
 8004050:	4013      	ands	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004062:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	2b04      	cmp	r3, #4
 800408e:	d107      	bne.n	80040a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	4313      	orrs	r3, r2
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 0307 	bic.w	r3, r3, #7
 80040b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d117      	bne.n	80040fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00e      	beq.n	80040fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fb1b 	bl	8004718 <DMA_CheckFifoParam>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2240      	movs	r2, #64	; 0x40
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040f6:	2301      	movs	r3, #1
 80040f8:	e016      	b.n	8004128 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fad2 	bl	80046ac <DMA_CalcBaseAndBitshift>
 8004108:	4603      	mov	r3, r0
 800410a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	223f      	movs	r2, #63	; 0x3f
 8004112:	409a      	lsls	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	f010803f 	.word	0xf010803f

08004134 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_DMA_Start_IT+0x26>
 8004156:	2302      	movs	r3, #2
 8004158:	e040      	b.n	80041dc <HAL_DMA_Start_IT+0xa8>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d12f      	bne.n	80041ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fa64 	bl	8004650 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418c:	223f      	movs	r2, #63	; 0x3f
 800418e:	409a      	lsls	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0216 	orr.w	r2, r2, #22
 80041a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0208 	orr.w	r2, r2, #8
 80041ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e005      	b.n	80041da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041d6:	2302      	movs	r3, #2
 80041d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041da:	7dfb      	ldrb	r3, [r7, #23]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041f2:	f7fe fde1 	bl	8002db8 <HAL_GetTick>
 80041f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b02      	cmp	r3, #2
 8004202:	d008      	beq.n	8004216 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2280      	movs	r2, #128	; 0x80
 8004208:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e052      	b.n	80042bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0216 	bic.w	r2, r2, #22
 8004224:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695a      	ldr	r2, [r3, #20]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004234:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d103      	bne.n	8004246 <HAL_DMA_Abort+0x62>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0208 	bic.w	r2, r2, #8
 8004254:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0201 	bic.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004266:	e013      	b.n	8004290 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004268:	f7fe fda6 	bl	8002db8 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b05      	cmp	r3, #5
 8004274:	d90c      	bls.n	8004290 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2203      	movs	r2, #3
 8004280:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e015      	b.n	80042bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e4      	bne.n	8004268 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a2:	223f      	movs	r2, #63	; 0x3f
 80042a4:	409a      	lsls	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d004      	beq.n	80042e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2280      	movs	r2, #128	; 0x80
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e00c      	b.n	80042fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2205      	movs	r2, #5
 80042e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004314:	4b8e      	ldr	r3, [pc, #568]	; (8004550 <HAL_DMA_IRQHandler+0x248>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a8e      	ldr	r2, [pc, #568]	; (8004554 <HAL_DMA_IRQHandler+0x24c>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	0a9b      	lsrs	r3, r3, #10
 8004320:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004326:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004332:	2208      	movs	r2, #8
 8004334:	409a      	lsls	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4013      	ands	r3, r2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01a      	beq.n	8004374 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d013      	beq.n	8004374 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0204 	bic.w	r2, r2, #4
 800435a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	2208      	movs	r2, #8
 8004362:	409a      	lsls	r2, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	f043 0201 	orr.w	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	2201      	movs	r2, #1
 800437a:	409a      	lsls	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d012      	beq.n	80043aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	2201      	movs	r2, #1
 8004398:	409a      	lsls	r2, r3
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f043 0202 	orr.w	r2, r3, #2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ae:	2204      	movs	r2, #4
 80043b0:	409a      	lsls	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d012      	beq.n	80043e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00b      	beq.n	80043e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	2204      	movs	r2, #4
 80043ce:	409a      	lsls	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	f043 0204 	orr.w	r2, r3, #4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e4:	2210      	movs	r2, #16
 80043e6:	409a      	lsls	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d043      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d03c      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004402:	2210      	movs	r2, #16
 8004404:	409a      	lsls	r2, r3
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d018      	beq.n	800444a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d108      	bne.n	8004438 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d024      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
 8004436:	e01f      	b.n	8004478 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01b      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
 8004448:	e016      	b.n	8004478 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d107      	bne.n	8004468 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0208 	bic.w	r2, r2, #8
 8004466:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447c:	2220      	movs	r2, #32
 800447e:	409a      	lsls	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 808f 	beq.w	80045a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8087 	beq.w	80045a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449e:	2220      	movs	r2, #32
 80044a0:	409a      	lsls	r2, r3
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d136      	bne.n	8004520 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0216 	bic.w	r2, r2, #22
 80044c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d103      	bne.n	80044e2 <HAL_DMA_IRQHandler+0x1da>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0208 	bic.w	r2, r2, #8
 80044f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f6:	223f      	movs	r2, #63	; 0x3f
 80044f8:	409a      	lsls	r2, r3
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004512:	2b00      	cmp	r3, #0
 8004514:	d07e      	beq.n	8004614 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
        }
        return;
 800451e:	e079      	b.n	8004614 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01d      	beq.n	800456a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10d      	bne.n	8004558 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	2b00      	cmp	r3, #0
 8004542:	d031      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	4798      	blx	r3
 800454c:	e02c      	b.n	80045a8 <HAL_DMA_IRQHandler+0x2a0>
 800454e:	bf00      	nop
 8004550:	20000000 	.word	0x20000000
 8004554:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	2b00      	cmp	r3, #0
 800455e:	d023      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4798      	blx	r3
 8004568:	e01e      	b.n	80045a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10f      	bne.n	8004598 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0210 	bic.w	r2, r2, #16
 8004586:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d032      	beq.n	8004616 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d022      	beq.n	8004602 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2205      	movs	r2, #5
 80045c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	3301      	adds	r3, #1
 80045d8:	60bb      	str	r3, [r7, #8]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d307      	bcc.n	80045f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f2      	bne.n	80045d4 <HAL_DMA_IRQHandler+0x2cc>
 80045ee:	e000      	b.n	80045f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80045f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4798      	blx	r3
 8004612:	e000      	b.n	8004616 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004614:	bf00      	nop
    }
  }
}
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800462a:	b2db      	uxtb	r3, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800466c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b40      	cmp	r3, #64	; 0x40
 800467c:	d108      	bne.n	8004690 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800468e:	e007      	b.n	80046a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]
}
 80046a0:	bf00      	nop
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	3b10      	subs	r3, #16
 80046bc:	4a14      	ldr	r2, [pc, #80]	; (8004710 <DMA_CalcBaseAndBitshift+0x64>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	091b      	lsrs	r3, r3, #4
 80046c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046c6:	4a13      	ldr	r2, [pc, #76]	; (8004714 <DMA_CalcBaseAndBitshift+0x68>)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	4413      	add	r3, r2
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	d909      	bls.n	80046ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	1d1a      	adds	r2, r3, #4
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	659a      	str	r2, [r3, #88]	; 0x58
 80046ec:	e007      	b.n	80046fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046f6:	f023 0303 	bic.w	r3, r3, #3
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	aaaaaaab 	.word	0xaaaaaaab
 8004714:	0800c380 	.word	0x0800c380

08004718 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d11f      	bne.n	8004772 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b03      	cmp	r3, #3
 8004736:	d856      	bhi.n	80047e6 <DMA_CheckFifoParam+0xce>
 8004738:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <DMA_CheckFifoParam+0x28>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004751 	.word	0x08004751
 8004744:	08004763 	.word	0x08004763
 8004748:	08004751 	.word	0x08004751
 800474c:	080047e7 	.word	0x080047e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d046      	beq.n	80047ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004760:	e043      	b.n	80047ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800476a:	d140      	bne.n	80047ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004770:	e03d      	b.n	80047ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800477a:	d121      	bne.n	80047c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b03      	cmp	r3, #3
 8004780:	d837      	bhi.n	80047f2 <DMA_CheckFifoParam+0xda>
 8004782:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <DMA_CheckFifoParam+0x70>)
 8004784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004788:	08004799 	.word	0x08004799
 800478c:	0800479f 	.word	0x0800479f
 8004790:	08004799 	.word	0x08004799
 8004794:	080047b1 	.word	0x080047b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	e030      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d025      	beq.n	80047f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ae:	e022      	b.n	80047f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047b8:	d11f      	bne.n	80047fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047be:	e01c      	b.n	80047fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d903      	bls.n	80047ce <DMA_CheckFifoParam+0xb6>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b03      	cmp	r3, #3
 80047ca:	d003      	beq.n	80047d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047cc:	e018      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
      break;
 80047d2:	e015      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00e      	beq.n	80047fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      break;
 80047e4:	e00b      	b.n	80047fe <DMA_CheckFifoParam+0xe6>
      break;
 80047e6:	bf00      	nop
 80047e8:	e00a      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      break;
 80047ea:	bf00      	nop
 80047ec:	e008      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      break;
 80047ee:	bf00      	nop
 80047f0:	e006      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      break;
 80047f2:	bf00      	nop
 80047f4:	e004      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      break;
 80047f6:	bf00      	nop
 80047f8:	e002      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      break;   
 80047fa:	bf00      	nop
 80047fc:	e000      	b.n	8004800 <DMA_CheckFifoParam+0xe8>
      break;
 80047fe:	bf00      	nop
    }
  } 
  
  return status; 
 8004800:	7bfb      	ldrb	r3, [r7, #15]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop

08004810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	; 0x24
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800481a:	2300      	movs	r3, #0
 800481c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800481e:	2300      	movs	r3, #0
 8004820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e16b      	b.n	8004b04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800482c:	2201      	movs	r2, #1
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4013      	ands	r3, r2
 800483e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	429a      	cmp	r2, r3
 8004846:	f040 815a 	bne.w	8004afe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b01      	cmp	r3, #1
 8004854:	d005      	beq.n	8004862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800485e:	2b02      	cmp	r3, #2
 8004860:	d130      	bne.n	80048c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	2203      	movs	r2, #3
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43db      	mvns	r3, r3
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4013      	ands	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	68da      	ldr	r2, [r3, #12]
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4313      	orrs	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004898:	2201      	movs	r2, #1
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	091b      	lsrs	r3, r3, #4
 80048ae:	f003 0201 	and.w	r2, r3, #1
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	2b03      	cmp	r3, #3
 80048ce:	d017      	beq.n	8004900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	2203      	movs	r2, #3
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4013      	ands	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f003 0303 	and.w	r3, r3, #3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d123      	bne.n	8004954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	08da      	lsrs	r2, r3, #3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3208      	adds	r2, #8
 8004914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	220f      	movs	r2, #15
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4313      	orrs	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	08da      	lsrs	r2, r3, #3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3208      	adds	r2, #8
 800494e:	69b9      	ldr	r1, [r7, #24]
 8004950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	2203      	movs	r2, #3
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 0203 	and.w	r2, r3, #3
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80b4 	beq.w	8004afe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	4b60      	ldr	r3, [pc, #384]	; (8004b1c <HAL_GPIO_Init+0x30c>)
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	4a5f      	ldr	r2, [pc, #380]	; (8004b1c <HAL_GPIO_Init+0x30c>)
 80049a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049a4:	6453      	str	r3, [r2, #68]	; 0x44
 80049a6:	4b5d      	ldr	r3, [pc, #372]	; (8004b1c <HAL_GPIO_Init+0x30c>)
 80049a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049b2:	4a5b      	ldr	r2, [pc, #364]	; (8004b20 <HAL_GPIO_Init+0x310>)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	089b      	lsrs	r3, r3, #2
 80049b8:	3302      	adds	r3, #2
 80049ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	220f      	movs	r2, #15
 80049ca:	fa02 f303 	lsl.w	r3, r2, r3
 80049ce:	43db      	mvns	r3, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a52      	ldr	r2, [pc, #328]	; (8004b24 <HAL_GPIO_Init+0x314>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d02b      	beq.n	8004a36 <HAL_GPIO_Init+0x226>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a51      	ldr	r2, [pc, #324]	; (8004b28 <HAL_GPIO_Init+0x318>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d025      	beq.n	8004a32 <HAL_GPIO_Init+0x222>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a50      	ldr	r2, [pc, #320]	; (8004b2c <HAL_GPIO_Init+0x31c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d01f      	beq.n	8004a2e <HAL_GPIO_Init+0x21e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a4f      	ldr	r2, [pc, #316]	; (8004b30 <HAL_GPIO_Init+0x320>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d019      	beq.n	8004a2a <HAL_GPIO_Init+0x21a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a4e      	ldr	r2, [pc, #312]	; (8004b34 <HAL_GPIO_Init+0x324>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <HAL_GPIO_Init+0x216>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a4d      	ldr	r2, [pc, #308]	; (8004b38 <HAL_GPIO_Init+0x328>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00d      	beq.n	8004a22 <HAL_GPIO_Init+0x212>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a4c      	ldr	r2, [pc, #304]	; (8004b3c <HAL_GPIO_Init+0x32c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d007      	beq.n	8004a1e <HAL_GPIO_Init+0x20e>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a4b      	ldr	r2, [pc, #300]	; (8004b40 <HAL_GPIO_Init+0x330>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d101      	bne.n	8004a1a <HAL_GPIO_Init+0x20a>
 8004a16:	2307      	movs	r3, #7
 8004a18:	e00e      	b.n	8004a38 <HAL_GPIO_Init+0x228>
 8004a1a:	2308      	movs	r3, #8
 8004a1c:	e00c      	b.n	8004a38 <HAL_GPIO_Init+0x228>
 8004a1e:	2306      	movs	r3, #6
 8004a20:	e00a      	b.n	8004a38 <HAL_GPIO_Init+0x228>
 8004a22:	2305      	movs	r3, #5
 8004a24:	e008      	b.n	8004a38 <HAL_GPIO_Init+0x228>
 8004a26:	2304      	movs	r3, #4
 8004a28:	e006      	b.n	8004a38 <HAL_GPIO_Init+0x228>
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e004      	b.n	8004a38 <HAL_GPIO_Init+0x228>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e002      	b.n	8004a38 <HAL_GPIO_Init+0x228>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <HAL_GPIO_Init+0x228>
 8004a36:	2300      	movs	r3, #0
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	f002 0203 	and.w	r2, r2, #3
 8004a3e:	0092      	lsls	r2, r2, #2
 8004a40:	4093      	lsls	r3, r2
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a48:	4935      	ldr	r1, [pc, #212]	; (8004b20 <HAL_GPIO_Init+0x310>)
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	089b      	lsrs	r3, r3, #2
 8004a4e:	3302      	adds	r3, #2
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a56:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <HAL_GPIO_Init+0x334>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4013      	ands	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a7a:	4a32      	ldr	r2, [pc, #200]	; (8004b44 <HAL_GPIO_Init+0x334>)
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a80:	4b30      	ldr	r3, [pc, #192]	; (8004b44 <HAL_GPIO_Init+0x334>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004aa4:	4a27      	ldr	r2, [pc, #156]	; (8004b44 <HAL_GPIO_Init+0x334>)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004aaa:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <HAL_GPIO_Init+0x334>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	43db      	mvns	r3, r3
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ace:	4a1d      	ldr	r2, [pc, #116]	; (8004b44 <HAL_GPIO_Init+0x334>)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ad4:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <HAL_GPIO_Init+0x334>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	43db      	mvns	r3, r3
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004af8:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <HAL_GPIO_Init+0x334>)
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	3301      	adds	r3, #1
 8004b02:	61fb      	str	r3, [r7, #28]
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	2b0f      	cmp	r3, #15
 8004b08:	f67f ae90 	bls.w	800482c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	3724      	adds	r7, #36	; 0x24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	40013800 	.word	0x40013800
 8004b24:	40020000 	.word	0x40020000
 8004b28:	40020400 	.word	0x40020400
 8004b2c:	40020800 	.word	0x40020800
 8004b30:	40020c00 	.word	0x40020c00
 8004b34:	40021000 	.word	0x40021000
 8004b38:	40021400 	.word	0x40021400
 8004b3c:	40021800 	.word	0x40021800
 8004b40:	40021c00 	.word	0x40021c00
 8004b44:	40013c00 	.word	0x40013c00

08004b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	807b      	strh	r3, [r7, #2]
 8004b54:	4613      	mov	r3, r2
 8004b56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b58:	787b      	ldrb	r3, [r7, #1]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b5e:	887a      	ldrh	r2, [r7, #2]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b64:	e003      	b.n	8004b6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b66:	887b      	ldrh	r3, [r7, #2]
 8004b68:	041a      	lsls	r2, r3, #16
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	619a      	str	r2, [r3, #24]
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b86:	4b08      	ldr	r3, [pc, #32]	; (8004ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b88:	695a      	ldr	r2, [r3, #20]
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d006      	beq.n	8004ba0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b92:	4a05      	ldr	r2, [pc, #20]	; (8004ba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b94:	88fb      	ldrh	r3, [r7, #6]
 8004b96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b98:	88fb      	ldrh	r3, [r7, #6]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fc fba2 	bl	80012e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ba0:	bf00      	nop
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40013c00 	.word	0x40013c00

08004bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e12b      	b.n	8004e16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fd fca8 	bl	8002528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2224      	movs	r2, #36	; 0x24
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c10:	f002 ff3e 	bl	8007a90 <HAL_RCC_GetPCLK1Freq>
 8004c14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4a81      	ldr	r2, [pc, #516]	; (8004e20 <HAL_I2C_Init+0x274>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d807      	bhi.n	8004c30 <HAL_I2C_Init+0x84>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a80      	ldr	r2, [pc, #512]	; (8004e24 <HAL_I2C_Init+0x278>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	bf94      	ite	ls
 8004c28:	2301      	movls	r3, #1
 8004c2a:	2300      	movhi	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	e006      	b.n	8004c3e <HAL_I2C_Init+0x92>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a7d      	ldr	r2, [pc, #500]	; (8004e28 <HAL_I2C_Init+0x27c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	bf94      	ite	ls
 8004c38:	2301      	movls	r3, #1
 8004c3a:	2300      	movhi	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e0e7      	b.n	8004e16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a78      	ldr	r2, [pc, #480]	; (8004e2c <HAL_I2C_Init+0x280>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	0c9b      	lsrs	r3, r3, #18
 8004c50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	4a6a      	ldr	r2, [pc, #424]	; (8004e20 <HAL_I2C_Init+0x274>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d802      	bhi.n	8004c80 <HAL_I2C_Init+0xd4>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	e009      	b.n	8004c94 <HAL_I2C_Init+0xe8>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c86:	fb02 f303 	mul.w	r3, r2, r3
 8004c8a:	4a69      	ldr	r2, [pc, #420]	; (8004e30 <HAL_I2C_Init+0x284>)
 8004c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	3301      	adds	r3, #1
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004ca6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	495c      	ldr	r1, [pc, #368]	; (8004e20 <HAL_I2C_Init+0x274>)
 8004cb0:	428b      	cmp	r3, r1
 8004cb2:	d819      	bhi.n	8004ce8 <HAL_I2C_Init+0x13c>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	1e59      	subs	r1, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cc2:	1c59      	adds	r1, r3, #1
 8004cc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004cc8:	400b      	ands	r3, r1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <HAL_I2C_Init+0x138>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1e59      	subs	r1, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cdc:	3301      	adds	r3, #1
 8004cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce2:	e051      	b.n	8004d88 <HAL_I2C_Init+0x1dc>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	e04f      	b.n	8004d88 <HAL_I2C_Init+0x1dc>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d111      	bne.n	8004d14 <HAL_I2C_Init+0x168>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	1e58      	subs	r0, r3, #1
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6859      	ldr	r1, [r3, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	440b      	add	r3, r1
 8004cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d02:	3301      	adds	r3, #1
 8004d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2301      	moveq	r3, #1
 8004d0e:	2300      	movne	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e012      	b.n	8004d3a <HAL_I2C_Init+0x18e>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1e58      	subs	r0, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6859      	ldr	r1, [r3, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	0099      	lsls	r1, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <HAL_I2C_Init+0x196>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e022      	b.n	8004d88 <HAL_I2C_Init+0x1dc>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10e      	bne.n	8004d68 <HAL_I2C_Init+0x1bc>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	1e58      	subs	r0, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6859      	ldr	r1, [r3, #4]
 8004d52:	460b      	mov	r3, r1
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	440b      	add	r3, r1
 8004d58:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d66:	e00f      	b.n	8004d88 <HAL_I2C_Init+0x1dc>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	1e58      	subs	r0, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6859      	ldr	r1, [r3, #4]
 8004d70:	460b      	mov	r3, r1
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	440b      	add	r3, r1
 8004d76:	0099      	lsls	r1, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	6809      	ldr	r1, [r1, #0]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69da      	ldr	r2, [r3, #28]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004db6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6911      	ldr	r1, [r2, #16]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	68d2      	ldr	r2, [r2, #12]
 8004dc2:	4311      	orrs	r1, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6812      	ldr	r2, [r2, #0]
 8004dc8:	430b      	orrs	r3, r1
 8004dca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695a      	ldr	r2, [r3, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	000186a0 	.word	0x000186a0
 8004e24:	001e847f 	.word	0x001e847f
 8004e28:	003d08ff 	.word	0x003d08ff
 8004e2c:	431bde83 	.word	0x431bde83
 8004e30:	10624dd3 	.word	0x10624dd3

08004e34 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b08c      	sub	sp, #48	; 0x30
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	4611      	mov	r1, r2
 8004e40:	461a      	mov	r2, r3
 8004e42:	4603      	mov	r3, r0
 8004e44:	817b      	strh	r3, [r7, #10]
 8004e46:	460b      	mov	r3, r1
 8004e48:	813b      	strh	r3, [r7, #8]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e4e:	f7fd ffb3 	bl	8002db8 <HAL_GetTick>
 8004e52:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b20      	cmp	r3, #32
 8004e62:	f040 8176 	bne.w	8005152 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e66:	4b95      	ldr	r3, [pc, #596]	; (80050bc <HAL_I2C_Mem_Read_DMA+0x288>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	08db      	lsrs	r3, r3, #3
 8004e6c:	4a94      	ldr	r2, [pc, #592]	; (80050c0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e72:	0a1a      	lsrs	r2, r3, #8
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	009a      	lsls	r2, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d116      	bne.n	8004eba <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	f043 0220 	orr.w	r2, r3, #32
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e14c      	b.n	8005154 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d0db      	beq.n	8004e80 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_I2C_Mem_Read_DMA+0xa2>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e13e      	b.n	8005154 <HAL_I2C_Mem_Read_DMA+0x320>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d007      	beq.n	8004efc <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2222      	movs	r2, #34	; 0x22
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2240      	movs	r2, #64	; 0x40
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4a62      	ldr	r2, [pc, #392]	; (80050c4 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004f3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004f3e:	897a      	ldrh	r2, [r7, #10]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004f44:	893a      	ldrh	r2, [r7, #8]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004f4a:	88fa      	ldrh	r2, [r7, #6]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	f000 80cc 	beq.w	80050f8 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d02d      	beq.n	8004fc4 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	4a56      	ldr	r2, [pc, #344]	; (80050c8 <HAL_I2C_Mem_Read_DMA+0x294>)
 8004f6e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f74:	4a55      	ldr	r2, [pc, #340]	; (80050cc <HAL_I2C_Mem_Read_DMA+0x298>)
 8004f76:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	2200      	movs	r2, #0
 8004f86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	2200      	movs	r2, #0
 8004f96:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3310      	adds	r3, #16
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	461a      	mov	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fae:	f7ff f8c1 	bl	8004134 <HAL_DMA_Start_IT>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f040 8087 	bne.w	80050d0 <HAL_I2C_Mem_Read_DMA+0x29c>
 8004fc2:	e013      	b.n	8004fec <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e0b3      	b.n	8005154 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004fec:	88f8      	ldrh	r0, [r7, #6]
 8004fee:	893a      	ldrh	r2, [r7, #8]
 8004ff0:	8979      	ldrh	r1, [r7, #10]
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	9301      	str	r3, [sp, #4]
 8004ff6:	2323      	movs	r3, #35	; 0x23
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f001 fca1 	bl	8006944 <I2C_RequestMemoryRead>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d023      	beq.n	8005050 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff f959 	bl	80042c4 <HAL_DMA_Abort_IT>
 8005012:	4603      	mov	r3, r0
 8005014:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501c:	2200      	movs	r2, #0
 800501e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800502e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0201 	bic.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e081      	b.n	8005154 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	2b01      	cmp	r3, #1
 8005056:	d108      	bne.n	800506a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e007      	b.n	800507a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005078:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800507a:	2300      	movs	r3, #0
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	61bb      	str	r3, [r7, #24]
 800508e:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b6:	605a      	str	r2, [r3, #4]
 80050b8:	e049      	b.n	800514e <HAL_I2C_Mem_Read_DMA+0x31a>
 80050ba:	bf00      	nop
 80050bc:	20000000 	.word	0x20000000
 80050c0:	14f8b589 	.word	0x14f8b589
 80050c4:	ffff0000 	.word	0xffff0000
 80050c8:	08006b15 	.word	0x08006b15
 80050cc:	08006cbf 	.word	0x08006cbf
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e4:	f043 0210 	orr.w	r2, r3, #16
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e02d      	b.n	8005154 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80050f8:	88f8      	ldrh	r0, [r7, #6]
 80050fa:	893a      	ldrh	r2, [r7, #8]
 80050fc:	8979      	ldrh	r1, [r7, #10]
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	2323      	movs	r3, #35	; 0x23
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	4603      	mov	r3, r0
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f001 fc1b 	bl	8006944 <I2C_RequestMemoryRead>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e01d      	b.n	8005154 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800513c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2220      	movs	r2, #32
 8005142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	e000      	b.n	8005154 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8005152:	2302      	movs	r3, #2
  }
}
 8005154:	4618      	mov	r0, r3
 8005156:	3728      	adds	r7, #40	; 0x28
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b08a      	sub	sp, #40	; 0x28
 8005160:	af02      	add	r7, sp, #8
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	607a      	str	r2, [r7, #4]
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	460b      	mov	r3, r1
 800516a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800516c:	f7fd fe24 	bl	8002db8 <HAL_GetTick>
 8005170:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b20      	cmp	r3, #32
 8005180:	f040 8111 	bne.w	80053a6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	2319      	movs	r3, #25
 800518a:	2201      	movs	r2, #1
 800518c:	4988      	ldr	r1, [pc, #544]	; (80053b0 <HAL_I2C_IsDeviceReady+0x254>)
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f001 fe7a 	bl	8006e88 <I2C_WaitOnFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800519a:	2302      	movs	r3, #2
 800519c:	e104      	b.n	80053a8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d101      	bne.n	80051ac <HAL_I2C_IsDeviceReady+0x50>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e0fd      	b.n	80053a8 <HAL_I2C_IsDeviceReady+0x24c>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d007      	beq.n	80051d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2224      	movs	r2, #36	; 0x24
 80051e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4a70      	ldr	r2, [pc, #448]	; (80053b4 <HAL_I2C_IsDeviceReady+0x258>)
 80051f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005204:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2200      	movs	r2, #0
 800520e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005212:	68f8      	ldr	r0, [r7, #12]
 8005214:	f001 fe38 	bl	8006e88 <I2C_WaitOnFlagUntilTimeout>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00d      	beq.n	800523a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522c:	d103      	bne.n	8005236 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005234:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e0b6      	b.n	80053a8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800523a:	897b      	ldrh	r3, [r7, #10]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005248:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800524a:	f7fd fdb5 	bl	8002db8 <HAL_GetTick>
 800524e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b02      	cmp	r3, #2
 800525c:	bf0c      	ite	eq
 800525e:	2301      	moveq	r3, #1
 8005260:	2300      	movne	r3, #0
 8005262:	b2db      	uxtb	r3, r3
 8005264:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005274:	bf0c      	ite	eq
 8005276:	2301      	moveq	r3, #1
 8005278:	2300      	movne	r3, #0
 800527a:	b2db      	uxtb	r3, r3
 800527c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800527e:	e025      	b.n	80052cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005280:	f7fd fd9a 	bl	8002db8 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	429a      	cmp	r2, r3
 800528e:	d302      	bcc.n	8005296 <HAL_I2C_IsDeviceReady+0x13a>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	22a0      	movs	r2, #160	; 0xa0
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f003 0302 	and.w	r3, r3, #2
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	bf0c      	ite	eq
 80052ac:	2301      	moveq	r3, #1
 80052ae:	2300      	movne	r3, #0
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2ba0      	cmp	r3, #160	; 0xa0
 80052d6:	d005      	beq.n	80052e4 <HAL_I2C_IsDeviceReady+0x188>
 80052d8:	7dfb      	ldrb	r3, [r7, #23]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <HAL_I2C_IsDeviceReady+0x188>
 80052de:	7dbb      	ldrb	r3, [r7, #22]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0cd      	beq.n	8005280 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d129      	bne.n	800534e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005308:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530a:	2300      	movs	r3, #0
 800530c:	613b      	str	r3, [r7, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	613b      	str	r3, [r7, #16]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	2319      	movs	r3, #25
 8005326:	2201      	movs	r2, #1
 8005328:	4921      	ldr	r1, [pc, #132]	; (80053b0 <HAL_I2C_IsDeviceReady+0x254>)
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f001 fdac 	bl	8006e88 <I2C_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e036      	b.n	80053a8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	e02c      	b.n	80053a8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800535c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005366:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	2319      	movs	r3, #25
 800536e:	2201      	movs	r2, #1
 8005370:	490f      	ldr	r1, [pc, #60]	; (80053b0 <HAL_I2C_IsDeviceReady+0x254>)
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f001 fd88 	bl	8006e88 <I2C_WaitOnFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e012      	b.n	80053a8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	3301      	adds	r3, #1
 8005386:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	f4ff af32 	bcc.w	80051f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80053a6:	2302      	movs	r3, #2
  }
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	00100002 	.word	0x00100002
 80053b4:	ffff0000 	.word	0xffff0000

080053b8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d003      	beq.n	80053f0 <HAL_I2C_EV_IRQHandler+0x38>
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	f040 80c1 	bne.w	8005572 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10d      	bne.n	8005426 <HAL_I2C_EV_IRQHandler+0x6e>
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005410:	d003      	beq.n	800541a <HAL_I2C_EV_IRQHandler+0x62>
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005418:	d101      	bne.n	800541e <HAL_I2C_EV_IRQHandler+0x66>
 800541a:	2301      	movs	r3, #1
 800541c:	e000      	b.n	8005420 <HAL_I2C_EV_IRQHandler+0x68>
 800541e:	2300      	movs	r3, #0
 8005420:	2b01      	cmp	r3, #1
 8005422:	f000 8132 	beq.w	800568a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00c      	beq.n	800544a <HAL_I2C_EV_IRQHandler+0x92>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	0a5b      	lsrs	r3, r3, #9
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b00      	cmp	r3, #0
 800543a:	d006      	beq.n	800544a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f001 fe9c 	bl	800717a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fcd2 	bl	8005dec <I2C_Master_SB>
 8005448:	e092      	b.n	8005570 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	08db      	lsrs	r3, r3, #3
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d009      	beq.n	800546a <HAL_I2C_EV_IRQHandler+0xb2>
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	0a5b      	lsrs	r3, r3, #9
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 fd48 	bl	8005ef8 <I2C_Master_ADD10>
 8005468:	e082      	b.n	8005570 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <HAL_I2C_EV_IRQHandler+0xd2>
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	0a5b      	lsrs	r3, r3, #9
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fd62 	bl	8005f4c <I2C_Master_ADDR>
 8005488:	e072      	b.n	8005570 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	089b      	lsrs	r3, r3, #2
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d03b      	beq.n	800550e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054a4:	f000 80f3 	beq.w	800568e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	09db      	lsrs	r3, r3, #7
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00f      	beq.n	80054d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	0a9b      	lsrs	r3, r3, #10
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d009      	beq.n	80054d4 <HAL_I2C_EV_IRQHandler+0x11c>
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	089b      	lsrs	r3, r3, #2
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d103      	bne.n	80054d4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f942 	bl	8005756 <I2C_MasterTransmit_TXE>
 80054d2:	e04d      	b.n	8005570 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	089b      	lsrs	r3, r3, #2
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 80d6 	beq.w	800568e <HAL_I2C_EV_IRQHandler+0x2d6>
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	0a5b      	lsrs	r3, r3, #9
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 80cf 	beq.w	800568e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054f0:	7bbb      	ldrb	r3, [r7, #14]
 80054f2:	2b21      	cmp	r3, #33	; 0x21
 80054f4:	d103      	bne.n	80054fe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f9c9 	bl	800588e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054fc:	e0c7      	b.n	800568e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	2b40      	cmp	r3, #64	; 0x40
 8005502:	f040 80c4 	bne.w	800568e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fa37 	bl	800597a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800550c:	e0bf      	b.n	800568e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800551c:	f000 80b7 	beq.w	800568e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	099b      	lsrs	r3, r3, #6
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00f      	beq.n	800554c <HAL_I2C_EV_IRQHandler+0x194>
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	0a9b      	lsrs	r3, r3, #10
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d009      	beq.n	800554c <HAL_I2C_EV_IRQHandler+0x194>
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d103      	bne.n	800554c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 faac 	bl	8005aa2 <I2C_MasterReceive_RXNE>
 800554a:	e011      	b.n	8005570 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	089b      	lsrs	r3, r3, #2
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 809a 	beq.w	800568e <HAL_I2C_EV_IRQHandler+0x2d6>
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	0a5b      	lsrs	r3, r3, #9
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8093 	beq.w	800568e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fb55 	bl	8005c18 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800556e:	e08e      	b.n	800568e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005570:	e08d      	b.n	800568e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	2b00      	cmp	r3, #0
 8005578:	d004      	beq.n	8005584 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	e007      	b.n	8005594 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	085b      	lsrs	r3, r3, #1
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d012      	beq.n	80055c6 <HAL_I2C_EV_IRQHandler+0x20e>
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	0a5b      	lsrs	r3, r3, #9
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00c      	beq.n	80055c6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80055bc:	69b9      	ldr	r1, [r7, #24]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 ff13 	bl	80063ea <I2C_Slave_ADDR>
 80055c4:	e066      	b.n	8005694 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <HAL_I2C_EV_IRQHandler+0x22e>
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	0a5b      	lsrs	r3, r3, #9
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 ff4e 	bl	8006480 <I2C_Slave_STOPF>
 80055e4:	e056      	b.n	8005694 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055e6:	7bbb      	ldrb	r3, [r7, #14]
 80055e8:	2b21      	cmp	r3, #33	; 0x21
 80055ea:	d002      	beq.n	80055f2 <HAL_I2C_EV_IRQHandler+0x23a>
 80055ec:	7bbb      	ldrb	r3, [r7, #14]
 80055ee:	2b29      	cmp	r3, #41	; 0x29
 80055f0:	d125      	bne.n	800563e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	09db      	lsrs	r3, r3, #7
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00f      	beq.n	800561e <HAL_I2C_EV_IRQHandler+0x266>
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	0a9b      	lsrs	r3, r3, #10
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <HAL_I2C_EV_IRQHandler+0x266>
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	089b      	lsrs	r3, r3, #2
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d103      	bne.n	800561e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fe29 	bl	800626e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800561c:	e039      	b.n	8005692 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	089b      	lsrs	r3, r3, #2
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b00      	cmp	r3, #0
 8005628:	d033      	beq.n	8005692 <HAL_I2C_EV_IRQHandler+0x2da>
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	0a5b      	lsrs	r3, r3, #9
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d02d      	beq.n	8005692 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 fe56 	bl	80062e8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800563c:	e029      	b.n	8005692 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	099b      	lsrs	r3, r3, #6
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00f      	beq.n	800566a <HAL_I2C_EV_IRQHandler+0x2b2>
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	0a9b      	lsrs	r3, r3, #10
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d009      	beq.n	800566a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	089b      	lsrs	r3, r3, #2
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d103      	bne.n	800566a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fe61 	bl	800632a <I2C_SlaveReceive_RXNE>
 8005668:	e014      	b.n	8005694 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	089b      	lsrs	r3, r3, #2
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00e      	beq.n	8005694 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	0a5b      	lsrs	r3, r3, #9
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d008      	beq.n	8005694 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fe8f 	bl	80063a6 <I2C_SlaveReceive_BTF>
 8005688:	e004      	b.n	8005694 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800568a:	bf00      	nop
 800568c:	e002      	b.n	8005694 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005692:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005694:	3720      	adds	r7, #32
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80056ca:	bf00      	nop
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b083      	sub	sp, #12
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	460b      	mov	r3, r1
 80056f4:	70fb      	strb	r3, [r7, #3]
 80056f6:	4613      	mov	r3, r2
 80056f8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005764:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800576c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005772:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005778:	2b00      	cmp	r3, #0
 800577a:	d150      	bne.n	800581e <I2C_MasterTransmit_TXE+0xc8>
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	2b21      	cmp	r3, #33	; 0x21
 8005780:	d14d      	bne.n	800581e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b08      	cmp	r3, #8
 8005786:	d01d      	beq.n	80057c4 <I2C_MasterTransmit_TXE+0x6e>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b20      	cmp	r3, #32
 800578c:	d01a      	beq.n	80057c4 <I2C_MasterTransmit_TXE+0x6e>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005794:	d016      	beq.n	80057c4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057a4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2211      	movs	r2, #17
 80057aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff ff6c 	bl	800569a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057c2:	e060      	b.n	8005886 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057d2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b40      	cmp	r3, #64	; 0x40
 80057fc:	d107      	bne.n	800580e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7ff ff87 	bl	800571a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800580c:	e03b      	b.n	8005886 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff ff3f 	bl	800569a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800581c:	e033      	b.n	8005886 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b21      	cmp	r3, #33	; 0x21
 8005822:	d005      	beq.n	8005830 <I2C_MasterTransmit_TXE+0xda>
 8005824:	7bbb      	ldrb	r3, [r7, #14]
 8005826:	2b40      	cmp	r3, #64	; 0x40
 8005828:	d12d      	bne.n	8005886 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b22      	cmp	r3, #34	; 0x22
 800582e:	d12a      	bne.n	8005886 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d108      	bne.n	800584c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005848:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800584a:	e01c      	b.n	8005886 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b40      	cmp	r3, #64	; 0x40
 8005856:	d103      	bne.n	8005860 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f88e 	bl	800597a <I2C_MemoryTransmit_TXE_BTF>
}
 800585e:	e012      	b.n	8005886 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	781a      	ldrb	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	b29a      	uxth	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005884:	e7ff      	b.n	8005886 <I2C_MasterTransmit_TXE+0x130>
 8005886:	bf00      	nop
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b21      	cmp	r3, #33	; 0x21
 80058a6:	d164      	bne.n	8005972 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d012      	beq.n	80058d8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	781a      	ldrb	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	1c5a      	adds	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80058d6:	e04c      	b.n	8005972 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b08      	cmp	r3, #8
 80058dc:	d01d      	beq.n	800591a <I2C_MasterTransmit_BTF+0x8c>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b20      	cmp	r3, #32
 80058e2:	d01a      	beq.n	800591a <I2C_MasterTransmit_BTF+0x8c>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058ea:	d016      	beq.n	800591a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058fa:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2211      	movs	r2, #17
 8005900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff fec1 	bl	800569a <HAL_I2C_MasterTxCpltCallback>
}
 8005918:	e02b      	b.n	8005972 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005928:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005938:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b40      	cmp	r3, #64	; 0x40
 8005952:	d107      	bne.n	8005964 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff fedc 	bl	800571a <HAL_I2C_MemTxCpltCallback>
}
 8005962:	e006      	b.n	8005972 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff fe94 	bl	800569a <HAL_I2C_MasterTxCpltCallback>
}
 8005972:	bf00      	nop
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598e:	2b00      	cmp	r3, #0
 8005990:	d11d      	bne.n	80059ce <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005996:	2b01      	cmp	r3, #1
 8005998:	d10b      	bne.n	80059b2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059aa:	1c9a      	adds	r2, r3, #2
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80059b0:	e073      	b.n	8005a9a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	121b      	asrs	r3, r3, #8
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	651a      	str	r2, [r3, #80]	; 0x50
}
 80059cc:	e065      	b.n	8005a9a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d10b      	bne.n	80059ee <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	651a      	str	r2, [r3, #80]	; 0x50
}
 80059ec:	e055      	b.n	8005a9a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d151      	bne.n	8005a9a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	2b22      	cmp	r3, #34	; 0x22
 80059fa:	d10d      	bne.n	8005a18 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a0a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a16:	e040      	b.n	8005a9a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d015      	beq.n	8005a4e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
 8005a24:	2b21      	cmp	r3, #33	; 0x21
 8005a26:	d112      	bne.n	8005a4e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	781a      	ldrb	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005a4c:	e025      	b.n	8005a9a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d120      	bne.n	8005a9a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	2b21      	cmp	r3, #33	; 0x21
 8005a5c:	d11d      	bne.n	8005a9a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a6c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a7c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff fe40 	bl	800571a <HAL_I2C_MemTxCpltCallback>
}
 8005a9a:	bf00      	nop
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b22      	cmp	r3, #34	; 0x22
 8005ab4:	f040 80ac 	bne.w	8005c10 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d921      	bls.n	8005b0a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	f040 808c 	bne.w	8005c10 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b06:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005b08:	e082      	b.n	8005c10 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d075      	beq.n	8005bfe <I2C_MasterReceive_RXNE+0x15c>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d002      	beq.n	8005b1e <I2C_MasterReceive_RXNE+0x7c>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d16f      	bne.n	8005bfe <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f001 faca 	bl	80070b8 <I2C_WaitOnSTOPRequestThroughIT>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d142      	bne.n	8005bb0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b38:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b48:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b40      	cmp	r3, #64	; 0x40
 8005b82:	d10a      	bne.n	8005b9a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7fb fbbe 	bl	8001314 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b98:	e03a      	b.n	8005c10 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2212      	movs	r2, #18
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff fd80 	bl	80056ae <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005bae:	e02f      	b.n	8005c10 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005bbe:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691a      	ldr	r2, [r3, #16]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bca:	b2d2      	uxtb	r2, r2
 8005bcc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2220      	movs	r2, #32
 8005bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7ff fd99 	bl	800572e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005bfc:	e008      	b.n	8005c10 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c0c:	605a      	str	r2, [r3, #4]
}
 8005c0e:	e7ff      	b.n	8005c10 <I2C_MasterReceive_RXNE+0x16e>
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c24:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d11b      	bne.n	8005c68 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c3e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	b2d2      	uxtb	r2, r2
 8005c4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005c66:	e0bd      	b.n	8005de4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d129      	bne.n	8005cc6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c80:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	d00a      	beq.n	8005c9e <I2C_MasterReceive_BTF+0x86>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d007      	beq.n	8005c9e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c9c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005cc4:	e08e      	b.n	8005de4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d176      	bne.n	8005dbe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d002      	beq.n	8005cdc <I2C_MasterReceive_BTF+0xc4>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b10      	cmp	r3, #16
 8005cda:	d108      	bne.n	8005cee <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	e019      	b.n	8005d22 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b04      	cmp	r3, #4
 8005cf2:	d002      	beq.n	8005cfa <I2C_MasterReceive_BTF+0xe2>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d108      	bne.n	8005d0c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	e00a      	b.n	8005d22 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b10      	cmp	r3, #16
 8005d10:	d007      	beq.n	8005d22 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d20:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691a      	ldr	r2, [r3, #16]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	1c5a      	adds	r2, r3, #1
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d7c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b40      	cmp	r3, #64	; 0x40
 8005d90:	d10a      	bne.n	8005da8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7fb fab7 	bl	8001314 <HAL_I2C_MemRxCpltCallback>
}
 8005da6:	e01d      	b.n	8005de4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2212      	movs	r2, #18
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff fc79 	bl	80056ae <HAL_I2C_MasterRxCpltCallback>
}
 8005dbc:	e012      	b.n	8005de4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005de4:	bf00      	nop
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b40      	cmp	r3, #64	; 0x40
 8005dfe:	d117      	bne.n	8005e30 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d109      	bne.n	8005e1c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	461a      	mov	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e18:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005e1a:	e067      	b.n	8005eec <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	f043 0301 	orr.w	r3, r3, #1
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	611a      	str	r2, [r3, #16]
}
 8005e2e:	e05d      	b.n	8005eec <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e38:	d133      	bne.n	8005ea2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b21      	cmp	r3, #33	; 0x21
 8005e44:	d109      	bne.n	8005e5a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e56:	611a      	str	r2, [r3, #16]
 8005e58:	e008      	b.n	8005e6c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	f043 0301 	orr.w	r3, r3, #1
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d004      	beq.n	8005e7e <I2C_Master_SB+0x92>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d108      	bne.n	8005e90 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d032      	beq.n	8005eec <I2C_Master_SB+0x100>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d02d      	beq.n	8005eec <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e9e:	605a      	str	r2, [r3, #4]
}
 8005ea0:	e024      	b.n	8005eec <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10e      	bne.n	8005ec8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	11db      	asrs	r3, r3, #7
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f003 0306 	and.w	r3, r3, #6
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f063 030f 	orn	r3, r3, #15
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	611a      	str	r2, [r3, #16]
}
 8005ec6:	e011      	b.n	8005eec <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d10d      	bne.n	8005eec <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	11db      	asrs	r3, r3, #7
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	f003 0306 	and.w	r3, r3, #6
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	f063 030e 	orn	r3, r3, #14
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	611a      	str	r2, [r3, #16]
}
 8005eec:	bf00      	nop
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d004      	beq.n	8005f1e <I2C_Master_ADD10+0x26>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d108      	bne.n	8005f30 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00c      	beq.n	8005f40 <I2C_Master_ADD10+0x48>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f3e:	605a      	str	r2, [r3, #4]
  }
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b091      	sub	sp, #68	; 0x44
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f62:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b22      	cmp	r3, #34	; 0x22
 8005f74:	f040 8169 	bne.w	800624a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10f      	bne.n	8005fa0 <I2C_Master_ADDR+0x54>
 8005f80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f84:	2b40      	cmp	r3, #64	; 0x40
 8005f86:	d10b      	bne.n	8005fa0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f88:	2300      	movs	r3, #0
 8005f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	633b      	str	r3, [r7, #48]	; 0x30
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	e160      	b.n	8006262 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d11d      	bne.n	8005fe4 <I2C_Master_ADDR+0x98>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005fb0:	d118      	bne.n	8005fe4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fd6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	651a      	str	r2, [r3, #80]	; 0x50
 8005fe2:	e13e      	b.n	8006262 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d113      	bne.n	8006016 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28
 8006002:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	e115      	b.n	8006242 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	f040 808a 	bne.w	8006136 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006024:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006028:	d137      	bne.n	800609a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006038:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006048:	d113      	bne.n	8006072 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006058:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800605a:	2300      	movs	r3, #0
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	e0e7      	b.n	8006242 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006072:	2300      	movs	r3, #0
 8006074:	623b      	str	r3, [r7, #32]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	623b      	str	r3, [r7, #32]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	623b      	str	r3, [r7, #32]
 8006086:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	e0d3      	b.n	8006242 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2b08      	cmp	r3, #8
 800609e:	d02e      	beq.n	80060fe <I2C_Master_ADDR+0x1b2>
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	2b20      	cmp	r3, #32
 80060a4:	d02b      	beq.n	80060fe <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80060a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a8:	2b12      	cmp	r3, #18
 80060aa:	d102      	bne.n	80060b2 <I2C_Master_ADDR+0x166>
 80060ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d125      	bne.n	80060fe <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d00e      	beq.n	80060d6 <I2C_Master_ADDR+0x18a>
 80060b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d00b      	beq.n	80060d6 <I2C_Master_ADDR+0x18a>
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	2b10      	cmp	r3, #16
 80060c2:	d008      	beq.n	80060d6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e007      	b.n	80060e6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060e6:	2300      	movs	r3, #0
 80060e8:	61fb      	str	r3, [r7, #28]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	61fb      	str	r3, [r7, #28]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	61fb      	str	r3, [r7, #28]
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	e0a1      	b.n	8006242 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800610c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800610e:	2300      	movs	r3, #0
 8006110:	61bb      	str	r3, [r7, #24]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	e085      	b.n	8006242 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d14d      	bne.n	80061dc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006142:	2b04      	cmp	r3, #4
 8006144:	d016      	beq.n	8006174 <I2C_Master_ADDR+0x228>
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	2b02      	cmp	r3, #2
 800614a:	d013      	beq.n	8006174 <I2C_Master_ADDR+0x228>
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	2b10      	cmp	r3, #16
 8006150:	d010      	beq.n	8006174 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006160:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	e007      	b.n	8006184 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006182:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800618e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006192:	d117      	bne.n	80061c4 <I2C_Master_ADDR+0x278>
 8006194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006196:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800619a:	d00b      	beq.n	80061b4 <I2C_Master_ADDR+0x268>
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d008      	beq.n	80061b4 <I2C_Master_ADDR+0x268>
 80061a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d005      	beq.n	80061b4 <I2C_Master_ADDR+0x268>
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	d002      	beq.n	80061b4 <I2C_Master_ADDR+0x268>
 80061ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d107      	bne.n	80061c4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685a      	ldr	r2, [r3, #4]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061c2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c4:	2300      	movs	r3, #0
 80061c6:	617b      	str	r3, [r7, #20]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699b      	ldr	r3, [r3, #24]
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	e032      	b.n	8006242 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061ea:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fa:	d117      	bne.n	800622c <I2C_Master_ADDR+0x2e0>
 80061fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006202:	d00b      	beq.n	800621c <I2C_Master_ADDR+0x2d0>
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	2b01      	cmp	r3, #1
 8006208:	d008      	beq.n	800621c <I2C_Master_ADDR+0x2d0>
 800620a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620c:	2b08      	cmp	r3, #8
 800620e:	d005      	beq.n	800621c <I2C_Master_ADDR+0x2d0>
 8006210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006212:	2b10      	cmp	r3, #16
 8006214:	d002      	beq.n	800621c <I2C_Master_ADDR+0x2d0>
 8006216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006218:	2b20      	cmp	r3, #32
 800621a:	d107      	bne.n	800622c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800622a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800622c:	2300      	movs	r3, #0
 800622e:	613b      	str	r3, [r7, #16]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006248:	e00b      	b.n	8006262 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	68fb      	ldr	r3, [r7, #12]
}
 8006260:	e7ff      	b.n	8006262 <I2C_Master_ADDR+0x316>
 8006262:	bf00      	nop
 8006264:	3744      	adds	r7, #68	; 0x44
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006282:	b29b      	uxth	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d02b      	beq.n	80062e0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	781a      	ldrb	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	3b01      	subs	r3, #1
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d114      	bne.n	80062e0 <I2C_SlaveTransmit_TXE+0x72>
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	2b29      	cmp	r3, #41	; 0x29
 80062ba:	d111      	bne.n	80062e0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2221      	movs	r2, #33	; 0x21
 80062d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2228      	movs	r2, #40	; 0x28
 80062d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff f9f1 	bl	80056c2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d011      	beq.n	800631e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fe:	781a      	ldrb	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	1c5a      	adds	r2, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006314:	b29b      	uxth	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	b29a      	uxth	r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006338:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633e:	b29b      	uxth	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d02c      	beq.n	800639e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691a      	ldr	r2, [r3, #16]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d114      	bne.n	800639e <I2C_SlaveReceive_RXNE+0x74>
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2b2a      	cmp	r3, #42	; 0x2a
 8006378:	d111      	bne.n	800639e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006388:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2222      	movs	r2, #34	; 0x22
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2228      	movs	r2, #40	; 0x28
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff f99c 	bl	80056d6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800639e:	bf00      	nop
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d012      	beq.n	80063de <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691a      	ldr	r2, [r3, #16]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006404:	2b28      	cmp	r3, #40	; 0x28
 8006406:	d127      	bne.n	8006458 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006416:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	089b      	lsrs	r3, r3, #2
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006424:	2301      	movs	r3, #1
 8006426:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	09db      	lsrs	r3, r3, #7
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d103      	bne.n	800643c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	81bb      	strh	r3, [r7, #12]
 800643a:	e002      	b.n	8006442 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800644a:	89ba      	ldrh	r2, [r7, #12]
 800644c:	7bfb      	ldrb	r3, [r7, #15]
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff f94a 	bl	80056ea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006456:	e00e      	b.n	8006476 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006458:	2300      	movs	r3, #0
 800645a:	60bb      	str	r3, [r7, #8]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	60bb      	str	r3, [r7, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	60bb      	str	r3, [r7, #8]
 800646c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006476:	bf00      	nop
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800649e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80064a0:	2300      	movs	r3, #0
 80064a2:	60bb      	str	r3, [r7, #8]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	60bb      	str	r3, [r7, #8]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0201 	orr.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064dc:	d172      	bne.n	80065c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	2b22      	cmp	r3, #34	; 0x22
 80064e2:	d002      	beq.n	80064ea <I2C_Slave_STOPF+0x6a>
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	2b2a      	cmp	r3, #42	; 0x2a
 80064e8:	d135      	bne.n	8006556 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	f043 0204 	orr.w	r2, r3, #4
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800651c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	4618      	mov	r0, r3
 8006524:	f7fe f87a 	bl	800461c <HAL_DMA_GetState>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d049      	beq.n	80065c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	4a69      	ldr	r2, [pc, #420]	; (80066d8 <I2C_Slave_STOPF+0x258>)
 8006534:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	4618      	mov	r0, r3
 800653c:	f7fd fec2 	bl	80042c4 <HAL_DMA_Abort_IT>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d03d      	beq.n	80065c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006550:	4610      	mov	r0, r2
 8006552:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006554:	e035      	b.n	80065c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	b29a      	uxth	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f043 0204 	orr.w	r2, r3, #4
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006588:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe f844 	bl	800461c <HAL_DMA_GetState>
 8006594:	4603      	mov	r3, r0
 8006596:	2b01      	cmp	r3, #1
 8006598:	d014      	beq.n	80065c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659e:	4a4e      	ldr	r2, [pc, #312]	; (80066d8 <I2C_Slave_STOPF+0x258>)
 80065a0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fd fe8c 	bl	80042c4 <HAL_DMA_Abort_IT>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d008      	beq.n	80065c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80065bc:	4610      	mov	r0, r2
 80065be:	4798      	blx	r3
 80065c0:	e000      	b.n	80065c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d03e      	beq.n	800664c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d112      	bne.n	8006602 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d112      	bne.n	8006636 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691a      	ldr	r2, [r3, #16]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662c:	b29b      	uxth	r3, r3
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663a:	b29b      	uxth	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	f043 0204 	orr.w	r2, r3, #4
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f843 	bl	80066e0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800665a:	e039      	b.n	80066d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	2b2a      	cmp	r3, #42	; 0x2a
 8006660:	d109      	bne.n	8006676 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2228      	movs	r2, #40	; 0x28
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff f830 	bl	80056d6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b28      	cmp	r3, #40	; 0x28
 8006680:	d111      	bne.n	80066a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a15      	ldr	r2, [pc, #84]	; (80066dc <I2C_Slave_STOPF+0x25c>)
 8006686:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff f831 	bl	8005706 <HAL_I2C_ListenCpltCallback>
}
 80066a4:	e014      	b.n	80066d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066aa:	2b22      	cmp	r3, #34	; 0x22
 80066ac:	d002      	beq.n	80066b4 <I2C_Slave_STOPF+0x234>
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	2b22      	cmp	r3, #34	; 0x22
 80066b2:	d10d      	bne.n	80066d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff f803 	bl	80056d6 <HAL_I2C_SlaveRxCpltCallback>
}
 80066d0:	bf00      	nop
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	08006d39 	.word	0x08006d39
 80066dc:	ffff0000 	.word	0xffff0000

080066e0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	2b10      	cmp	r3, #16
 80066fc:	d002      	beq.n	8006704 <I2C_ITError+0x24>
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d10a      	bne.n	800671a <I2C_ITError+0x3a>
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	2b22      	cmp	r3, #34	; 0x22
 8006708:	d107      	bne.n	800671a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006718:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006720:	2b28      	cmp	r3, #40	; 0x28
 8006722:	d107      	bne.n	8006734 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2228      	movs	r2, #40	; 0x28
 800672e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006732:	e015      	b.n	8006760 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800673e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006742:	d00a      	beq.n	800675a <I2C_ITError+0x7a>
 8006744:	7bfb      	ldrb	r3, [r7, #15]
 8006746:	2b60      	cmp	r3, #96	; 0x60
 8006748:	d007      	beq.n	800675a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800676a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800676e:	d162      	bne.n	8006836 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800677e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b01      	cmp	r3, #1
 800678c:	d020      	beq.n	80067d0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006792:	4a6a      	ldr	r2, [pc, #424]	; (800693c <I2C_ITError+0x25c>)
 8006794:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679a:	4618      	mov	r0, r3
 800679c:	f7fd fd92 	bl	80042c4 <HAL_DMA_Abort_IT>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 8089 	beq.w	80068ba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0201 	bic.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80067ca:	4610      	mov	r0, r2
 80067cc:	4798      	blx	r3
 80067ce:	e074      	b.n	80068ba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d4:	4a59      	ldr	r2, [pc, #356]	; (800693c <I2C_ITError+0x25c>)
 80067d6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fd fd71 	bl	80042c4 <HAL_DMA_Abort_IT>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d068      	beq.n	80068ba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f2:	2b40      	cmp	r3, #64	; 0x40
 80067f4:	d10b      	bne.n	800680e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	1c5a      	adds	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f022 0201 	bic.w	r2, r2, #1
 800681c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006830:	4610      	mov	r0, r2
 8006832:	4798      	blx	r3
 8006834:	e041      	b.n	80068ba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b60      	cmp	r3, #96	; 0x60
 8006840:	d125      	bne.n	800688e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2220      	movs	r2, #32
 8006846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685a:	2b40      	cmp	r3, #64	; 0x40
 800685c:	d10b      	bne.n	8006876 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0201 	bic.w	r2, r2, #1
 8006884:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fe ff5b 	bl	8005742 <HAL_I2C_AbortCpltCallback>
 800688c:	e015      	b.n	80068ba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695b      	ldr	r3, [r3, #20]
 8006894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006898:	2b40      	cmp	r3, #64	; 0x40
 800689a:	d10b      	bne.n	80068b4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7fe ff3a 	bl	800572e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068be:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f003 0301 	and.w	r3, r3, #1
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10e      	bne.n	80068e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d109      	bne.n	80068e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d104      	bne.n	80068e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80068f6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068fe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006904:	f003 0304 	and.w	r3, r3, #4
 8006908:	2b04      	cmp	r3, #4
 800690a:	d113      	bne.n	8006934 <I2C_ITError+0x254>
 800690c:	7bfb      	ldrb	r3, [r7, #15]
 800690e:	2b28      	cmp	r3, #40	; 0x28
 8006910:	d110      	bne.n	8006934 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a0a      	ldr	r2, [pc, #40]	; (8006940 <I2C_ITError+0x260>)
 8006916:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fe fee9 	bl	8005706 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006934:	bf00      	nop
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	08006d39 	.word	0x08006d39
 8006940:	ffff0000 	.word	0xffff0000

08006944 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af02      	add	r7, sp, #8
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	4608      	mov	r0, r1
 800694e:	4611      	mov	r1, r2
 8006950:	461a      	mov	r2, r3
 8006952:	4603      	mov	r3, r0
 8006954:	817b      	strh	r3, [r7, #10]
 8006956:	460b      	mov	r3, r1
 8006958:	813b      	strh	r3, [r7, #8]
 800695a:	4613      	mov	r3, r2
 800695c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800696c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800697c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	2200      	movs	r2, #0
 8006986:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	f000 fa7c 	bl	8006e88 <I2C_WaitOnFlagUntilTimeout>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00d      	beq.n	80069b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a4:	d103      	bne.n	80069ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069ae:	2303      	movs	r3, #3
 80069b0:	e0aa      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80069b2:	897b      	ldrh	r3, [r7, #10]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	461a      	mov	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80069c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	6a3a      	ldr	r2, [r7, #32]
 80069c6:	4952      	ldr	r1, [pc, #328]	; (8006b10 <I2C_RequestMemoryRead+0x1cc>)
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 fab4 	bl	8006f36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e097      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069d8:	2300      	movs	r3, #0
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	617b      	str	r3, [r7, #20]
 80069ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f0:	6a39      	ldr	r1, [r7, #32]
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f000 fb1e 	bl	8007034 <I2C_WaitOnTXEFlagUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00d      	beq.n	8006a1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d107      	bne.n	8006a16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e076      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a1a:	88fb      	ldrh	r3, [r7, #6]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d105      	bne.n	8006a2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a20:	893b      	ldrh	r3, [r7, #8]
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	611a      	str	r2, [r3, #16]
 8006a2a:	e021      	b.n	8006a70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006a2c:	893b      	ldrh	r3, [r7, #8]
 8006a2e:	0a1b      	lsrs	r3, r3, #8
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	b2da      	uxtb	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a3c:	6a39      	ldr	r1, [r7, #32]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 faf8 	bl	8007034 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00d      	beq.n	8006a66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d107      	bne.n	8006a62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e050      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a66:	893b      	ldrh	r3, [r7, #8]
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a72:	6a39      	ldr	r1, [r7, #32]
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 fadd 	bl	8007034 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00d      	beq.n	8006a9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d107      	bne.n	8006a98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e035      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006aaa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f9e5 	bl	8006e88 <I2C_WaitOnFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00d      	beq.n	8006ae0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad2:	d103      	bne.n	8006adc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ada:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e013      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006ae0:	897b      	ldrh	r3, [r7, #10]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	6a3a      	ldr	r2, [r7, #32]
 8006af4:	4906      	ldr	r1, [pc, #24]	; (8006b10 <I2C_RequestMemoryRead+0x1cc>)
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	f000 fa1d 	bl	8006f36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	00010002 	.word	0x00010002

08006b14 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b28:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b30:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006b46:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b54:	2200      	movs	r2, #0
 8006b56:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	2200      	movs	r2, #0
 8006b66:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006b68:	7cfb      	ldrb	r3, [r7, #19]
 8006b6a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006b6e:	2b21      	cmp	r3, #33	; 0x21
 8006b70:	d007      	beq.n	8006b82 <I2C_DMAXferCplt+0x6e>
 8006b72:	7cfb      	ldrb	r3, [r7, #19]
 8006b74:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006b78:	2b22      	cmp	r3, #34	; 0x22
 8006b7a:	d131      	bne.n	8006be0 <I2C_DMAXferCplt+0xcc>
 8006b7c:	7cbb      	ldrb	r3, [r7, #18]
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	d12e      	bne.n	8006be0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b90:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2200      	movs	r2, #0
 8006b96:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006b98:	7cfb      	ldrb	r3, [r7, #19]
 8006b9a:	2b29      	cmp	r3, #41	; 0x29
 8006b9c:	d10a      	bne.n	8006bb4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2221      	movs	r2, #33	; 0x21
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	2228      	movs	r2, #40	; 0x28
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006bac:	6978      	ldr	r0, [r7, #20]
 8006bae:	f7fe fd88 	bl	80056c2 <HAL_I2C_SlaveTxCpltCallback>
 8006bb2:	e00c      	b.n	8006bce <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006bb4:	7cfb      	ldrb	r3, [r7, #19]
 8006bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb8:	d109      	bne.n	8006bce <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2222      	movs	r2, #34	; 0x22
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2228      	movs	r2, #40	; 0x28
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bc8:	6978      	ldr	r0, [r7, #20]
 8006bca:	f7fe fd84 	bl	80056d6 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006bdc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006bde:	e06a      	b.n	8006cb6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d064      	beq.n	8006cb6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d107      	bne.n	8006c06 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c04:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006c14:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c1c:	d009      	beq.n	8006c32 <I2C_DMAXferCplt+0x11e>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d006      	beq.n	8006c32 <I2C_DMAXferCplt+0x11e>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006c2a:	d002      	beq.n	8006c32 <I2C_DMAXferCplt+0x11e>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	d107      	bne.n	8006c42 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c40:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	685a      	ldr	r2, [r3, #4]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c50:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c60:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2200      	movs	r2, #0
 8006c66:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006c70:	6978      	ldr	r0, [r7, #20]
 8006c72:	f7fe fd5c 	bl	800572e <HAL_I2C_ErrorCallback>
}
 8006c76:	e01e      	b.n	8006cb6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b40      	cmp	r3, #64	; 0x40
 8006c8a:	d10a      	bne.n	8006ca2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2200      	movs	r2, #0
 8006c98:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006c9a:	6978      	ldr	r0, [r7, #20]
 8006c9c:	f7fa fb3a 	bl	8001314 <HAL_I2C_MemRxCpltCallback>
}
 8006ca0:	e009      	b.n	8006cb6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2212      	movs	r2, #18
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006cb0:	6978      	ldr	r0, [r7, #20]
 8006cb2:	f7fe fcfc 	bl	80056ae <HAL_I2C_MasterRxCpltCallback>
}
 8006cb6:	bf00      	nop
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b084      	sub	sp, #16
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cd8:	2200      	movs	r2, #0
 8006cda:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce8:	2200      	movs	r2, #0
 8006cea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f7fd fca3 	bl	8004638 <HAL_DMA_GetError>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d01b      	beq.n	8006d30 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d06:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2220      	movs	r2, #32
 8006d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d22:	f043 0210 	orr.w	r2, r3, #16
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7fe fcff 	bl	800572e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d30:	bf00      	nop
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b086      	sub	sp, #24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d50:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d52:	4b4b      	ldr	r3, [pc, #300]	; (8006e80 <I2C_DMAAbort+0x148>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	08db      	lsrs	r3, r3, #3
 8006d58:	4a4a      	ldr	r2, [pc, #296]	; (8006e84 <I2C_DMAAbort+0x14c>)
 8006d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5e:	0a1a      	lsrs	r2, r3, #8
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	00da      	lsls	r2, r3, #3
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d76:	f043 0220 	orr.w	r2, r3, #32
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006d7e:	e00a      	b.n	8006d96 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d94:	d0ea      	beq.n	8006d6c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da2:	2200      	movs	r2, #0
 8006da4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	2200      	movs	r2, #0
 8006db4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd8:	2200      	movs	r2, #0
 8006dda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d003      	beq.n	8006dec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de8:	2200      	movs	r2, #0
 8006dea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0201 	bic.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b60      	cmp	r3, #96	; 0x60
 8006e06:	d10e      	bne.n	8006e26 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e1e:	6978      	ldr	r0, [r7, #20]
 8006e20:	f7fe fc8f 	bl	8005742 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e24:	e027      	b.n	8006e76 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e26:	7cfb      	ldrb	r3, [r7, #19]
 8006e28:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e2c:	2b28      	cmp	r3, #40	; 0x28
 8006e2e:	d117      	bne.n	8006e60 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	2200      	movs	r2, #0
 8006e54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2228      	movs	r2, #40	; 0x28
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006e5e:	e007      	b.n	8006e70 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006e70:	6978      	ldr	r0, [r7, #20]
 8006e72:	f7fe fc5c 	bl	800572e <HAL_I2C_ErrorCallback>
}
 8006e76:	bf00      	nop
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000000 	.word	0x20000000
 8006e84:	14f8b589 	.word	0x14f8b589

08006e88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	4613      	mov	r3, r2
 8006e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e98:	e025      	b.n	8006ee6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea0:	d021      	beq.n	8006ee6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea2:	f7fb ff89 	bl	8002db8 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d302      	bcc.n	8006eb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d116      	bne.n	8006ee6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed2:	f043 0220 	orr.w	r2, r3, #32
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e023      	b.n	8006f2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	0c1b      	lsrs	r3, r3, #16
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d10d      	bne.n	8006f0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	695b      	ldr	r3, [r3, #20]
 8006ef6:	43da      	mvns	r2, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4013      	ands	r3, r2
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bf0c      	ite	eq
 8006f02:	2301      	moveq	r3, #1
 8006f04:	2300      	movne	r3, #0
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	e00c      	b.n	8006f26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	43da      	mvns	r2, r3
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	4013      	ands	r3, r2
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	bf0c      	ite	eq
 8006f1e:	2301      	moveq	r3, #1
 8006f20:	2300      	movne	r3, #0
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d0b6      	beq.n	8006e9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	60f8      	str	r0, [r7, #12]
 8006f3e:	60b9      	str	r1, [r7, #8]
 8006f40:	607a      	str	r2, [r7, #4]
 8006f42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f44:	e051      	b.n	8006fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f54:	d123      	bne.n	8006f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006f6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	f043 0204 	orr.w	r2, r3, #4
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e046      	b.n	800702c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fa4:	d021      	beq.n	8006fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa6:	f7fb ff07 	bl	8002db8 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d302      	bcc.n	8006fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d116      	bne.n	8006fea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd6:	f043 0220 	orr.w	r2, r3, #32
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e020      	b.n	800702c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	0c1b      	lsrs	r3, r3, #16
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d10c      	bne.n	800700e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	43da      	mvns	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4013      	ands	r3, r2
 8007000:	b29b      	uxth	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	bf14      	ite	ne
 8007006:	2301      	movne	r3, #1
 8007008:	2300      	moveq	r3, #0
 800700a:	b2db      	uxtb	r3, r3
 800700c:	e00b      	b.n	8007026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	43da      	mvns	r2, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	4013      	ands	r3, r2
 800701a:	b29b      	uxth	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	bf14      	ite	ne
 8007020:	2301      	movne	r3, #1
 8007022:	2300      	moveq	r3, #0
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d18d      	bne.n	8006f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007040:	e02d      	b.n	800709e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 f86a 	bl	800711c <I2C_IsAcknowledgeFailed>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e02d      	b.n	80070ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007058:	d021      	beq.n	800709e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800705a:	f7fb fead 	bl	8002db8 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	429a      	cmp	r2, r3
 8007068:	d302      	bcc.n	8007070 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d116      	bne.n	800709e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2220      	movs	r2, #32
 800707a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	f043 0220 	orr.w	r2, r3, #32
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e007      	b.n	80070ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070a8:	2b80      	cmp	r3, #128	; 0x80
 80070aa:	d1ca      	bne.n	8007042 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3710      	adds	r7, #16
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
	...

080070b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80070c4:	4b13      	ldr	r3, [pc, #76]	; (8007114 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	08db      	lsrs	r3, r3, #3
 80070ca:	4a13      	ldr	r2, [pc, #76]	; (8007118 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80070cc:	fba2 2303 	umull	r2, r3, r2, r3
 80070d0:	0a1a      	lsrs	r2, r3, #8
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3b01      	subs	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d107      	bne.n	80070f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	f043 0220 	orr.w	r2, r3, #32
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e008      	b.n	8007108 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007104:	d0e9      	beq.n	80070da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	20000000 	.word	0x20000000
 8007118:	14f8b589 	.word	0x14f8b589

0800711c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	695b      	ldr	r3, [r3, #20]
 800712a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800712e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007132:	d11b      	bne.n	800716c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800713c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007158:	f043 0204 	orr.w	r2, r3, #4
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007186:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800718a:	d103      	bne.n	8007194 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007192:	e007      	b.n	80071a4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007198:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800719c:	d102      	bne.n	80071a4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2208      	movs	r2, #8
 80071a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e267      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d075      	beq.n	80072ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071ce:	4b88      	ldr	r3, [pc, #544]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 030c 	and.w	r3, r3, #12
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d00c      	beq.n	80071f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071da:	4b85      	ldr	r3, [pc, #532]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80071e2:	2b08      	cmp	r3, #8
 80071e4:	d112      	bne.n	800720c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071e6:	4b82      	ldr	r3, [pc, #520]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071f2:	d10b      	bne.n	800720c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f4:	4b7e      	ldr	r3, [pc, #504]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d05b      	beq.n	80072b8 <HAL_RCC_OscConfig+0x108>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d157      	bne.n	80072b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e242      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007214:	d106      	bne.n	8007224 <HAL_RCC_OscConfig+0x74>
 8007216:	4b76      	ldr	r3, [pc, #472]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a75      	ldr	r2, [pc, #468]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 800721c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007220:	6013      	str	r3, [r2, #0]
 8007222:	e01d      	b.n	8007260 <HAL_RCC_OscConfig+0xb0>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800722c:	d10c      	bne.n	8007248 <HAL_RCC_OscConfig+0x98>
 800722e:	4b70      	ldr	r3, [pc, #448]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a6f      	ldr	r2, [pc, #444]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007234:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	4b6d      	ldr	r3, [pc, #436]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a6c      	ldr	r2, [pc, #432]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	e00b      	b.n	8007260 <HAL_RCC_OscConfig+0xb0>
 8007248:	4b69      	ldr	r3, [pc, #420]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a68      	ldr	r2, [pc, #416]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 800724e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	4b66      	ldr	r3, [pc, #408]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a65      	ldr	r2, [pc, #404]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 800725a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800725e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d013      	beq.n	8007290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007268:	f7fb fda6 	bl	8002db8 <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007270:	f7fb fda2 	bl	8002db8 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b64      	cmp	r3, #100	; 0x64
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e207      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007282:	4b5b      	ldr	r3, [pc, #364]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f0      	beq.n	8007270 <HAL_RCC_OscConfig+0xc0>
 800728e:	e014      	b.n	80072ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007290:	f7fb fd92 	bl	8002db8 <HAL_GetTick>
 8007294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007298:	f7fb fd8e 	bl	8002db8 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b64      	cmp	r3, #100	; 0x64
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e1f3      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072aa:	4b51      	ldr	r3, [pc, #324]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1f0      	bne.n	8007298 <HAL_RCC_OscConfig+0xe8>
 80072b6:	e000      	b.n	80072ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d063      	beq.n	800738e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072c6:	4b4a      	ldr	r3, [pc, #296]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 030c 	and.w	r3, r3, #12
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00b      	beq.n	80072ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072d2:	4b47      	ldr	r3, [pc, #284]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d11c      	bne.n	8007318 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072de:	4b44      	ldr	r3, [pc, #272]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d116      	bne.n	8007318 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072ea:	4b41      	ldr	r3, [pc, #260]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <HAL_RCC_OscConfig+0x152>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d001      	beq.n	8007302 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e1c7      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007302:	4b3b      	ldr	r3, [pc, #236]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	4937      	ldr	r1, [pc, #220]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007312:	4313      	orrs	r3, r2
 8007314:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007316:	e03a      	b.n	800738e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d020      	beq.n	8007362 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007320:	4b34      	ldr	r3, [pc, #208]	; (80073f4 <HAL_RCC_OscConfig+0x244>)
 8007322:	2201      	movs	r2, #1
 8007324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007326:	f7fb fd47 	bl	8002db8 <HAL_GetTick>
 800732a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800732c:	e008      	b.n	8007340 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800732e:	f7fb fd43 	bl	8002db8 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e1a8      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007340:	4b2b      	ldr	r3, [pc, #172]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d0f0      	beq.n	800732e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800734c:	4b28      	ldr	r3, [pc, #160]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	00db      	lsls	r3, r3, #3
 800735a:	4925      	ldr	r1, [pc, #148]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 800735c:	4313      	orrs	r3, r2
 800735e:	600b      	str	r3, [r1, #0]
 8007360:	e015      	b.n	800738e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007362:	4b24      	ldr	r3, [pc, #144]	; (80073f4 <HAL_RCC_OscConfig+0x244>)
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007368:	f7fb fd26 	bl	8002db8 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007370:	f7fb fd22 	bl	8002db8 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e187      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007382:	4b1b      	ldr	r3, [pc, #108]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1f0      	bne.n	8007370 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d036      	beq.n	8007408 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d016      	beq.n	80073d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073a2:	4b15      	ldr	r3, [pc, #84]	; (80073f8 <HAL_RCC_OscConfig+0x248>)
 80073a4:	2201      	movs	r2, #1
 80073a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a8:	f7fb fd06 	bl	8002db8 <HAL_GetTick>
 80073ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073b0:	f7fb fd02 	bl	8002db8 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e167      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073c2:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <HAL_RCC_OscConfig+0x240>)
 80073c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0f0      	beq.n	80073b0 <HAL_RCC_OscConfig+0x200>
 80073ce:	e01b      	b.n	8007408 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073d0:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <HAL_RCC_OscConfig+0x248>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073d6:	f7fb fcef 	bl	8002db8 <HAL_GetTick>
 80073da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073dc:	e00e      	b.n	80073fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80073de:	f7fb fceb 	bl	8002db8 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d907      	bls.n	80073fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e150      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
 80073f0:	40023800 	.word	0x40023800
 80073f4:	42470000 	.word	0x42470000
 80073f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073fc:	4b88      	ldr	r3, [pc, #544]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 80073fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1ea      	bne.n	80073de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8097 	beq.w	8007544 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007416:	2300      	movs	r3, #0
 8007418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800741a:	4b81      	ldr	r3, [pc, #516]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10f      	bne.n	8007446 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007426:	2300      	movs	r3, #0
 8007428:	60bb      	str	r3, [r7, #8]
 800742a:	4b7d      	ldr	r3, [pc, #500]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 800742c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742e:	4a7c      	ldr	r2, [pc, #496]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 8007430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007434:	6413      	str	r3, [r2, #64]	; 0x40
 8007436:	4b7a      	ldr	r3, [pc, #488]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743e:	60bb      	str	r3, [r7, #8]
 8007440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007442:	2301      	movs	r3, #1
 8007444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007446:	4b77      	ldr	r3, [pc, #476]	; (8007624 <HAL_RCC_OscConfig+0x474>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744e:	2b00      	cmp	r3, #0
 8007450:	d118      	bne.n	8007484 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007452:	4b74      	ldr	r3, [pc, #464]	; (8007624 <HAL_RCC_OscConfig+0x474>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a73      	ldr	r2, [pc, #460]	; (8007624 <HAL_RCC_OscConfig+0x474>)
 8007458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800745c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800745e:	f7fb fcab 	bl	8002db8 <HAL_GetTick>
 8007462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007464:	e008      	b.n	8007478 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007466:	f7fb fca7 	bl	8002db8 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e10c      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007478:	4b6a      	ldr	r3, [pc, #424]	; (8007624 <HAL_RCC_OscConfig+0x474>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0f0      	beq.n	8007466 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d106      	bne.n	800749a <HAL_RCC_OscConfig+0x2ea>
 800748c:	4b64      	ldr	r3, [pc, #400]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 800748e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007490:	4a63      	ldr	r2, [pc, #396]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 8007492:	f043 0301 	orr.w	r3, r3, #1
 8007496:	6713      	str	r3, [r2, #112]	; 0x70
 8007498:	e01c      	b.n	80074d4 <HAL_RCC_OscConfig+0x324>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b05      	cmp	r3, #5
 80074a0:	d10c      	bne.n	80074bc <HAL_RCC_OscConfig+0x30c>
 80074a2:	4b5f      	ldr	r3, [pc, #380]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 80074a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a6:	4a5e      	ldr	r2, [pc, #376]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 80074a8:	f043 0304 	orr.w	r3, r3, #4
 80074ac:	6713      	str	r3, [r2, #112]	; 0x70
 80074ae:	4b5c      	ldr	r3, [pc, #368]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 80074b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b2:	4a5b      	ldr	r2, [pc, #364]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 80074b4:	f043 0301 	orr.w	r3, r3, #1
 80074b8:	6713      	str	r3, [r2, #112]	; 0x70
 80074ba:	e00b      	b.n	80074d4 <HAL_RCC_OscConfig+0x324>
 80074bc:	4b58      	ldr	r3, [pc, #352]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 80074be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c0:	4a57      	ldr	r2, [pc, #348]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 80074c2:	f023 0301 	bic.w	r3, r3, #1
 80074c6:	6713      	str	r3, [r2, #112]	; 0x70
 80074c8:	4b55      	ldr	r3, [pc, #340]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 80074ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074cc:	4a54      	ldr	r2, [pc, #336]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 80074ce:	f023 0304 	bic.w	r3, r3, #4
 80074d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d015      	beq.n	8007508 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074dc:	f7fb fc6c 	bl	8002db8 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074e2:	e00a      	b.n	80074fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074e4:	f7fb fc68 	bl	8002db8 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e0cb      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074fa:	4b49      	ldr	r3, [pc, #292]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 80074fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0ee      	beq.n	80074e4 <HAL_RCC_OscConfig+0x334>
 8007506:	e014      	b.n	8007532 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007508:	f7fb fc56 	bl	8002db8 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800750e:	e00a      	b.n	8007526 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007510:	f7fb fc52 	bl	8002db8 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	f241 3288 	movw	r2, #5000	; 0x1388
 800751e:	4293      	cmp	r3, r2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e0b5      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007526:	4b3e      	ldr	r3, [pc, #248]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 8007528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1ee      	bne.n	8007510 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d105      	bne.n	8007544 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007538:	4b39      	ldr	r3, [pc, #228]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	4a38      	ldr	r2, [pc, #224]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 800753e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007542:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 80a1 	beq.w	8007690 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800754e:	4b34      	ldr	r3, [pc, #208]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f003 030c 	and.w	r3, r3, #12
 8007556:	2b08      	cmp	r3, #8
 8007558:	d05c      	beq.n	8007614 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d141      	bne.n	80075e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007562:	4b31      	ldr	r3, [pc, #196]	; (8007628 <HAL_RCC_OscConfig+0x478>)
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007568:	f7fb fc26 	bl	8002db8 <HAL_GetTick>
 800756c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800756e:	e008      	b.n	8007582 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007570:	f7fb fc22 	bl	8002db8 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b02      	cmp	r3, #2
 800757c:	d901      	bls.n	8007582 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e087      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007582:	4b27      	ldr	r3, [pc, #156]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1f0      	bne.n	8007570 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69da      	ldr	r2, [r3, #28]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759c:	019b      	lsls	r3, r3, #6
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a4:	085b      	lsrs	r3, r3, #1
 80075a6:	3b01      	subs	r3, #1
 80075a8:	041b      	lsls	r3, r3, #16
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	061b      	lsls	r3, r3, #24
 80075b2:	491b      	ldr	r1, [pc, #108]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075b8:	4b1b      	ldr	r3, [pc, #108]	; (8007628 <HAL_RCC_OscConfig+0x478>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075be:	f7fb fbfb 	bl	8002db8 <HAL_GetTick>
 80075c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075c4:	e008      	b.n	80075d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075c6:	f7fb fbf7 	bl	8002db8 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d901      	bls.n	80075d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e05c      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075d8:	4b11      	ldr	r3, [pc, #68]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0f0      	beq.n	80075c6 <HAL_RCC_OscConfig+0x416>
 80075e4:	e054      	b.n	8007690 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075e6:	4b10      	ldr	r3, [pc, #64]	; (8007628 <HAL_RCC_OscConfig+0x478>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ec:	f7fb fbe4 	bl	8002db8 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075f4:	f7fb fbe0 	bl	8002db8 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e045      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007606:	4b06      	ldr	r3, [pc, #24]	; (8007620 <HAL_RCC_OscConfig+0x470>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f0      	bne.n	80075f4 <HAL_RCC_OscConfig+0x444>
 8007612:	e03d      	b.n	8007690 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d107      	bne.n	800762c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e038      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
 8007620:	40023800 	.word	0x40023800
 8007624:	40007000 	.word	0x40007000
 8007628:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800762c:	4b1b      	ldr	r3, [pc, #108]	; (800769c <HAL_RCC_OscConfig+0x4ec>)
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d028      	beq.n	800768c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007644:	429a      	cmp	r2, r3
 8007646:	d121      	bne.n	800768c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007652:	429a      	cmp	r2, r3
 8007654:	d11a      	bne.n	800768c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800765c:	4013      	ands	r3, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007662:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007664:	4293      	cmp	r3, r2
 8007666:	d111      	bne.n	800768c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007672:	085b      	lsrs	r3, r3, #1
 8007674:	3b01      	subs	r3, #1
 8007676:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007678:	429a      	cmp	r2, r3
 800767a:	d107      	bne.n	800768c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007686:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007688:	429a      	cmp	r2, r3
 800768a:	d001      	beq.n	8007690 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e000      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	40023800 	.word	0x40023800

080076a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e0cc      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076b4:	4b68      	ldr	r3, [pc, #416]	; (8007858 <HAL_RCC_ClockConfig+0x1b8>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0307 	and.w	r3, r3, #7
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d90c      	bls.n	80076dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076c2:	4b65      	ldr	r3, [pc, #404]	; (8007858 <HAL_RCC_ClockConfig+0x1b8>)
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ca:	4b63      	ldr	r3, [pc, #396]	; (8007858 <HAL_RCC_ClockConfig+0x1b8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d001      	beq.n	80076dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e0b8      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d020      	beq.n	800772a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d005      	beq.n	8007700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076f4:	4b59      	ldr	r3, [pc, #356]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	4a58      	ldr	r2, [pc, #352]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80076fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80076fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800770c:	4b53      	ldr	r3, [pc, #332]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	4a52      	ldr	r2, [pc, #328]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007718:	4b50      	ldr	r3, [pc, #320]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	494d      	ldr	r1, [pc, #308]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007726:	4313      	orrs	r3, r2
 8007728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d044      	beq.n	80077c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d107      	bne.n	800774e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800773e:	4b47      	ldr	r3, [pc, #284]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d119      	bne.n	800777e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e07f      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b02      	cmp	r3, #2
 8007754:	d003      	beq.n	800775e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800775a:	2b03      	cmp	r3, #3
 800775c:	d107      	bne.n	800776e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800775e:	4b3f      	ldr	r3, [pc, #252]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d109      	bne.n	800777e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e06f      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800776e:	4b3b      	ldr	r3, [pc, #236]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e067      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800777e:	4b37      	ldr	r3, [pc, #220]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f023 0203 	bic.w	r2, r3, #3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	4934      	ldr	r1, [pc, #208]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 800778c:	4313      	orrs	r3, r2
 800778e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007790:	f7fb fb12 	bl	8002db8 <HAL_GetTick>
 8007794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007796:	e00a      	b.n	80077ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007798:	f7fb fb0e 	bl	8002db8 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e04f      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ae:	4b2b      	ldr	r3, [pc, #172]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 020c 	and.w	r2, r3, #12
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	429a      	cmp	r2, r3
 80077be:	d1eb      	bne.n	8007798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077c0:	4b25      	ldr	r3, [pc, #148]	; (8007858 <HAL_RCC_ClockConfig+0x1b8>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d20c      	bcs.n	80077e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ce:	4b22      	ldr	r3, [pc, #136]	; (8007858 <HAL_RCC_ClockConfig+0x1b8>)
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077d6:	4b20      	ldr	r3, [pc, #128]	; (8007858 <HAL_RCC_ClockConfig+0x1b8>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0307 	and.w	r3, r3, #7
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d001      	beq.n	80077e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e032      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d008      	beq.n	8007806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077f4:	4b19      	ldr	r3, [pc, #100]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	4916      	ldr	r1, [pc, #88]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007802:	4313      	orrs	r3, r2
 8007804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	2b00      	cmp	r3, #0
 8007810:	d009      	beq.n	8007826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007812:	4b12      	ldr	r3, [pc, #72]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	490e      	ldr	r1, [pc, #56]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007822:	4313      	orrs	r3, r2
 8007824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007826:	f000 f821 	bl	800786c <HAL_RCC_GetSysClockFreq>
 800782a:	4602      	mov	r2, r0
 800782c:	4b0b      	ldr	r3, [pc, #44]	; (800785c <HAL_RCC_ClockConfig+0x1bc>)
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	091b      	lsrs	r3, r3, #4
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	490a      	ldr	r1, [pc, #40]	; (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 8007838:	5ccb      	ldrb	r3, [r1, r3]
 800783a:	fa22 f303 	lsr.w	r3, r2, r3
 800783e:	4a09      	ldr	r2, [pc, #36]	; (8007864 <HAL_RCC_ClockConfig+0x1c4>)
 8007840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007842:	4b09      	ldr	r3, [pc, #36]	; (8007868 <HAL_RCC_ClockConfig+0x1c8>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4618      	mov	r0, r3
 8007848:	f7fb f85a 	bl	8002900 <HAL_InitTick>

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40023c00 	.word	0x40023c00
 800785c:	40023800 	.word	0x40023800
 8007860:	0800c368 	.word	0x0800c368
 8007864:	20000000 	.word	0x20000000
 8007868:	20000004 	.word	0x20000004

0800786c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800786c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007870:	b094      	sub	sp, #80	; 0x50
 8007872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	647b      	str	r3, [r7, #68]	; 0x44
 8007878:	2300      	movs	r3, #0
 800787a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800787c:	2300      	movs	r3, #0
 800787e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007884:	4b79      	ldr	r3, [pc, #484]	; (8007a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 030c 	and.w	r3, r3, #12
 800788c:	2b08      	cmp	r3, #8
 800788e:	d00d      	beq.n	80078ac <HAL_RCC_GetSysClockFreq+0x40>
 8007890:	2b08      	cmp	r3, #8
 8007892:	f200 80e1 	bhi.w	8007a58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <HAL_RCC_GetSysClockFreq+0x34>
 800789a:	2b04      	cmp	r3, #4
 800789c:	d003      	beq.n	80078a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800789e:	e0db      	b.n	8007a58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078a0:	4b73      	ldr	r3, [pc, #460]	; (8007a70 <HAL_RCC_GetSysClockFreq+0x204>)
 80078a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80078a4:	e0db      	b.n	8007a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078a6:	4b73      	ldr	r3, [pc, #460]	; (8007a74 <HAL_RCC_GetSysClockFreq+0x208>)
 80078a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80078aa:	e0d8      	b.n	8007a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078ac:	4b6f      	ldr	r3, [pc, #444]	; (8007a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078b6:	4b6d      	ldr	r3, [pc, #436]	; (8007a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d063      	beq.n	800798a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078c2:	4b6a      	ldr	r3, [pc, #424]	; (8007a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	099b      	lsrs	r3, r3, #6
 80078c8:	2200      	movs	r2, #0
 80078ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80078cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d4:	633b      	str	r3, [r7, #48]	; 0x30
 80078d6:	2300      	movs	r3, #0
 80078d8:	637b      	str	r3, [r7, #52]	; 0x34
 80078da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80078de:	4622      	mov	r2, r4
 80078e0:	462b      	mov	r3, r5
 80078e2:	f04f 0000 	mov.w	r0, #0
 80078e6:	f04f 0100 	mov.w	r1, #0
 80078ea:	0159      	lsls	r1, r3, #5
 80078ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078f0:	0150      	lsls	r0, r2, #5
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4621      	mov	r1, r4
 80078f8:	1a51      	subs	r1, r2, r1
 80078fa:	6139      	str	r1, [r7, #16]
 80078fc:	4629      	mov	r1, r5
 80078fe:	eb63 0301 	sbc.w	r3, r3, r1
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	f04f 0200 	mov.w	r2, #0
 8007908:	f04f 0300 	mov.w	r3, #0
 800790c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007910:	4659      	mov	r1, fp
 8007912:	018b      	lsls	r3, r1, #6
 8007914:	4651      	mov	r1, sl
 8007916:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800791a:	4651      	mov	r1, sl
 800791c:	018a      	lsls	r2, r1, #6
 800791e:	4651      	mov	r1, sl
 8007920:	ebb2 0801 	subs.w	r8, r2, r1
 8007924:	4659      	mov	r1, fp
 8007926:	eb63 0901 	sbc.w	r9, r3, r1
 800792a:	f04f 0200 	mov.w	r2, #0
 800792e:	f04f 0300 	mov.w	r3, #0
 8007932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800793a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800793e:	4690      	mov	r8, r2
 8007940:	4699      	mov	r9, r3
 8007942:	4623      	mov	r3, r4
 8007944:	eb18 0303 	adds.w	r3, r8, r3
 8007948:	60bb      	str	r3, [r7, #8]
 800794a:	462b      	mov	r3, r5
 800794c:	eb49 0303 	adc.w	r3, r9, r3
 8007950:	60fb      	str	r3, [r7, #12]
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	f04f 0300 	mov.w	r3, #0
 800795a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800795e:	4629      	mov	r1, r5
 8007960:	024b      	lsls	r3, r1, #9
 8007962:	4621      	mov	r1, r4
 8007964:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007968:	4621      	mov	r1, r4
 800796a:	024a      	lsls	r2, r1, #9
 800796c:	4610      	mov	r0, r2
 800796e:	4619      	mov	r1, r3
 8007970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007972:	2200      	movs	r2, #0
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28
 8007976:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007978:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800797c:	f7f9 f914 	bl	8000ba8 <__aeabi_uldivmod>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4613      	mov	r3, r2
 8007986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007988:	e058      	b.n	8007a3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800798a:	4b38      	ldr	r3, [pc, #224]	; (8007a6c <HAL_RCC_GetSysClockFreq+0x200>)
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	099b      	lsrs	r3, r3, #6
 8007990:	2200      	movs	r2, #0
 8007992:	4618      	mov	r0, r3
 8007994:	4611      	mov	r1, r2
 8007996:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800799a:	623b      	str	r3, [r7, #32]
 800799c:	2300      	movs	r3, #0
 800799e:	627b      	str	r3, [r7, #36]	; 0x24
 80079a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80079a4:	4642      	mov	r2, r8
 80079a6:	464b      	mov	r3, r9
 80079a8:	f04f 0000 	mov.w	r0, #0
 80079ac:	f04f 0100 	mov.w	r1, #0
 80079b0:	0159      	lsls	r1, r3, #5
 80079b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079b6:	0150      	lsls	r0, r2, #5
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	4641      	mov	r1, r8
 80079be:	ebb2 0a01 	subs.w	sl, r2, r1
 80079c2:	4649      	mov	r1, r9
 80079c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80079c8:	f04f 0200 	mov.w	r2, #0
 80079cc:	f04f 0300 	mov.w	r3, #0
 80079d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80079d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80079d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80079dc:	ebb2 040a 	subs.w	r4, r2, sl
 80079e0:	eb63 050b 	sbc.w	r5, r3, fp
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	00eb      	lsls	r3, r5, #3
 80079ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079f2:	00e2      	lsls	r2, r4, #3
 80079f4:	4614      	mov	r4, r2
 80079f6:	461d      	mov	r5, r3
 80079f8:	4643      	mov	r3, r8
 80079fa:	18e3      	adds	r3, r4, r3
 80079fc:	603b      	str	r3, [r7, #0]
 80079fe:	464b      	mov	r3, r9
 8007a00:	eb45 0303 	adc.w	r3, r5, r3
 8007a04:	607b      	str	r3, [r7, #4]
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	f04f 0300 	mov.w	r3, #0
 8007a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a12:	4629      	mov	r1, r5
 8007a14:	028b      	lsls	r3, r1, #10
 8007a16:	4621      	mov	r1, r4
 8007a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a1c:	4621      	mov	r1, r4
 8007a1e:	028a      	lsls	r2, r1, #10
 8007a20:	4610      	mov	r0, r2
 8007a22:	4619      	mov	r1, r3
 8007a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a26:	2200      	movs	r2, #0
 8007a28:	61bb      	str	r3, [r7, #24]
 8007a2a:	61fa      	str	r2, [r7, #28]
 8007a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a30:	f7f9 f8ba 	bl	8000ba8 <__aeabi_uldivmod>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4613      	mov	r3, r2
 8007a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007a3c:	4b0b      	ldr	r3, [pc, #44]	; (8007a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	0c1b      	lsrs	r3, r3, #16
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	3301      	adds	r3, #1
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007a4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a56:	e002      	b.n	8007a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a58:	4b05      	ldr	r3, [pc, #20]	; (8007a70 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3750      	adds	r7, #80	; 0x50
 8007a64:	46bd      	mov	sp, r7
 8007a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a6a:	bf00      	nop
 8007a6c:	40023800 	.word	0x40023800
 8007a70:	00f42400 	.word	0x00f42400
 8007a74:	007a1200 	.word	0x007a1200

08007a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a7c:	4b03      	ldr	r3, [pc, #12]	; (8007a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	20000000 	.word	0x20000000

08007a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007a94:	f7ff fff0 	bl	8007a78 <HAL_RCC_GetHCLKFreq>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	4b05      	ldr	r3, [pc, #20]	; (8007ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	0a9b      	lsrs	r3, r3, #10
 8007aa0:	f003 0307 	and.w	r3, r3, #7
 8007aa4:	4903      	ldr	r1, [pc, #12]	; (8007ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007aa6:	5ccb      	ldrb	r3, [r1, r3]
 8007aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	40023800 	.word	0x40023800
 8007ab4:	0800c378 	.word	0x0800c378

08007ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007abc:	f7ff ffdc 	bl	8007a78 <HAL_RCC_GetHCLKFreq>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	0b5b      	lsrs	r3, r3, #13
 8007ac8:	f003 0307 	and.w	r3, r3, #7
 8007acc:	4903      	ldr	r1, [pc, #12]	; (8007adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ace:	5ccb      	ldrb	r3, [r1, r3]
 8007ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	40023800 	.word	0x40023800
 8007adc:	0800c378 	.word	0x0800c378

08007ae0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	220f      	movs	r2, #15
 8007aee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007af0:	4b12      	ldr	r3, [pc, #72]	; (8007b3c <HAL_RCC_GetClockConfig+0x5c>)
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f003 0203 	and.w	r2, r3, #3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007afc:	4b0f      	ldr	r3, [pc, #60]	; (8007b3c <HAL_RCC_GetClockConfig+0x5c>)
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007b08:	4b0c      	ldr	r3, [pc, #48]	; (8007b3c <HAL_RCC_GetClockConfig+0x5c>)
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007b14:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <HAL_RCC_GetClockConfig+0x5c>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	08db      	lsrs	r3, r3, #3
 8007b1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007b22:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <HAL_RCC_GetClockConfig+0x60>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0207 	and.w	r2, r3, #7
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	601a      	str	r2, [r3, #0]
}
 8007b2e:	bf00      	nop
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	40023c00 	.word	0x40023c00

08007b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e041      	b.n	8007bda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d106      	bne.n	8007b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7fa fd5e 	bl	800262c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	4619      	mov	r1, r3
 8007b82:	4610      	mov	r0, r2
 8007b84:	f000 fa96 	bl	80080b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b085      	sub	sp, #20
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d001      	beq.n	8007bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e04e      	b.n	8007c9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68da      	ldr	r2, [r3, #12]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f042 0201 	orr.w	r2, r2, #1
 8007c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a23      	ldr	r2, [pc, #140]	; (8007ca8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d022      	beq.n	8007c64 <HAL_TIM_Base_Start_IT+0x80>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c26:	d01d      	beq.n	8007c64 <HAL_TIM_Base_Start_IT+0x80>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a1f      	ldr	r2, [pc, #124]	; (8007cac <HAL_TIM_Base_Start_IT+0xc8>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d018      	beq.n	8007c64 <HAL_TIM_Base_Start_IT+0x80>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a1e      	ldr	r2, [pc, #120]	; (8007cb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d013      	beq.n	8007c64 <HAL_TIM_Base_Start_IT+0x80>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a1c      	ldr	r2, [pc, #112]	; (8007cb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d00e      	beq.n	8007c64 <HAL_TIM_Base_Start_IT+0x80>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a1b      	ldr	r2, [pc, #108]	; (8007cb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d009      	beq.n	8007c64 <HAL_TIM_Base_Start_IT+0x80>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a19      	ldr	r2, [pc, #100]	; (8007cbc <HAL_TIM_Base_Start_IT+0xd8>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d004      	beq.n	8007c64 <HAL_TIM_Base_Start_IT+0x80>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a18      	ldr	r2, [pc, #96]	; (8007cc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d111      	bne.n	8007c88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f003 0307 	and.w	r3, r3, #7
 8007c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b06      	cmp	r3, #6
 8007c74:	d010      	beq.n	8007c98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f042 0201 	orr.w	r2, r2, #1
 8007c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c86:	e007      	b.n	8007c98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f042 0201 	orr.w	r2, r2, #1
 8007c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	40010000 	.word	0x40010000
 8007cac:	40000400 	.word	0x40000400
 8007cb0:	40000800 	.word	0x40000800
 8007cb4:	40000c00 	.word	0x40000c00
 8007cb8:	40010400 	.word	0x40010400
 8007cbc:	40014000 	.word	0x40014000
 8007cc0:	40001800 	.word	0x40001800

08007cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d122      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d11b      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f06f 0202 	mvn.w	r2, #2
 8007cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f9b5 	bl	8008076 <HAL_TIM_IC_CaptureCallback>
 8007d0c:	e005      	b.n	8007d1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f9a7 	bl	8008062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f9b8 	bl	800808a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	f003 0304 	and.w	r3, r3, #4
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d122      	bne.n	8007d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b04      	cmp	r3, #4
 8007d3a:	d11b      	bne.n	8007d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f06f 0204 	mvn.w	r2, #4
 8007d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f98b 	bl	8008076 <HAL_TIM_IC_CaptureCallback>
 8007d60:	e005      	b.n	8007d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f97d 	bl	8008062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 f98e 	bl	800808a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	f003 0308 	and.w	r3, r3, #8
 8007d7e:	2b08      	cmp	r3, #8
 8007d80:	d122      	bne.n	8007dc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f003 0308 	and.w	r3, r3, #8
 8007d8c:	2b08      	cmp	r3, #8
 8007d8e:	d11b      	bne.n	8007dc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f06f 0208 	mvn.w	r2, #8
 8007d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2204      	movs	r2, #4
 8007d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	69db      	ldr	r3, [r3, #28]
 8007da6:	f003 0303 	and.w	r3, r3, #3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 f961 	bl	8008076 <HAL_TIM_IC_CaptureCallback>
 8007db4:	e005      	b.n	8007dc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f953 	bl	8008062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f964 	bl	800808a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	f003 0310 	and.w	r3, r3, #16
 8007dd2:	2b10      	cmp	r3, #16
 8007dd4:	d122      	bne.n	8007e1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f003 0310 	and.w	r3, r3, #16
 8007de0:	2b10      	cmp	r3, #16
 8007de2:	d11b      	bne.n	8007e1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f06f 0210 	mvn.w	r2, #16
 8007dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2208      	movs	r2, #8
 8007df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f937 	bl	8008076 <HAL_TIM_IC_CaptureCallback>
 8007e08:	e005      	b.n	8007e16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f929 	bl	8008062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f93a 	bl	800808a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d10e      	bne.n	8007e48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d107      	bne.n	8007e48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f06f 0201 	mvn.w	r2, #1
 8007e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7fa f912 	bl	800206c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e52:	2b80      	cmp	r3, #128	; 0x80
 8007e54:	d10e      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e60:	2b80      	cmp	r3, #128	; 0x80
 8007e62:	d107      	bne.n	8007e74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fae0 	bl	8008434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7e:	2b40      	cmp	r3, #64	; 0x40
 8007e80:	d10e      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e8c:	2b40      	cmp	r3, #64	; 0x40
 8007e8e:	d107      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f8ff 	bl	800809e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b20      	cmp	r3, #32
 8007eac:	d10e      	bne.n	8007ecc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f003 0320 	and.w	r3, r3, #32
 8007eb8:	2b20      	cmp	r3, #32
 8007eba:	d107      	bne.n	8007ecc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f06f 0220 	mvn.w	r2, #32
 8007ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 faaa 	bl	8008420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ecc:	bf00      	nop
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <HAL_TIM_ConfigClockSource+0x1c>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e0b4      	b.n	800805a <HAL_TIM_ConfigClockSource+0x186>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f28:	d03e      	beq.n	8007fa8 <HAL_TIM_ConfigClockSource+0xd4>
 8007f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f2e:	f200 8087 	bhi.w	8008040 <HAL_TIM_ConfigClockSource+0x16c>
 8007f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f36:	f000 8086 	beq.w	8008046 <HAL_TIM_ConfigClockSource+0x172>
 8007f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f3e:	d87f      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x16c>
 8007f40:	2b70      	cmp	r3, #112	; 0x70
 8007f42:	d01a      	beq.n	8007f7a <HAL_TIM_ConfigClockSource+0xa6>
 8007f44:	2b70      	cmp	r3, #112	; 0x70
 8007f46:	d87b      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x16c>
 8007f48:	2b60      	cmp	r3, #96	; 0x60
 8007f4a:	d050      	beq.n	8007fee <HAL_TIM_ConfigClockSource+0x11a>
 8007f4c:	2b60      	cmp	r3, #96	; 0x60
 8007f4e:	d877      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x16c>
 8007f50:	2b50      	cmp	r3, #80	; 0x50
 8007f52:	d03c      	beq.n	8007fce <HAL_TIM_ConfigClockSource+0xfa>
 8007f54:	2b50      	cmp	r3, #80	; 0x50
 8007f56:	d873      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x16c>
 8007f58:	2b40      	cmp	r3, #64	; 0x40
 8007f5a:	d058      	beq.n	800800e <HAL_TIM_ConfigClockSource+0x13a>
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	d86f      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x16c>
 8007f60:	2b30      	cmp	r3, #48	; 0x30
 8007f62:	d064      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x15a>
 8007f64:	2b30      	cmp	r3, #48	; 0x30
 8007f66:	d86b      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x16c>
 8007f68:	2b20      	cmp	r3, #32
 8007f6a:	d060      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x15a>
 8007f6c:	2b20      	cmp	r3, #32
 8007f6e:	d867      	bhi.n	8008040 <HAL_TIM_ConfigClockSource+0x16c>
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d05c      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x15a>
 8007f74:	2b10      	cmp	r3, #16
 8007f76:	d05a      	beq.n	800802e <HAL_TIM_ConfigClockSource+0x15a>
 8007f78:	e062      	b.n	8008040 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6818      	ldr	r0, [r3, #0]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6899      	ldr	r1, [r3, #8]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685a      	ldr	r2, [r3, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	f000 f9ad 	bl	80082e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	609a      	str	r2, [r3, #8]
      break;
 8007fa6:	e04f      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	6899      	ldr	r1, [r3, #8]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f000 f996 	bl	80082e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fca:	609a      	str	r2, [r3, #8]
      break;
 8007fcc:	e03c      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6818      	ldr	r0, [r3, #0]
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	6859      	ldr	r1, [r3, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	f000 f90a 	bl	80081f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2150      	movs	r1, #80	; 0x50
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f963 	bl	80082b2 <TIM_ITRx_SetConfig>
      break;
 8007fec:	e02c      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	6859      	ldr	r1, [r3, #4]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	f000 f929 	bl	8008252 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2160      	movs	r1, #96	; 0x60
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f953 	bl	80082b2 <TIM_ITRx_SetConfig>
      break;
 800800c:	e01c      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6818      	ldr	r0, [r3, #0]
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	6859      	ldr	r1, [r3, #4]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	461a      	mov	r2, r3
 800801c:	f000 f8ea 	bl	80081f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2140      	movs	r1, #64	; 0x40
 8008026:	4618      	mov	r0, r3
 8008028:	f000 f943 	bl	80082b2 <TIM_ITRx_SetConfig>
      break;
 800802c:	e00c      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4619      	mov	r1, r3
 8008038:	4610      	mov	r0, r2
 800803a:	f000 f93a 	bl	80082b2 <TIM_ITRx_SetConfig>
      break;
 800803e:	e003      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	73fb      	strb	r3, [r7, #15]
      break;
 8008044:	e000      	b.n	8008048 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008062:	b480      	push	{r7}
 8008064:	b083      	sub	sp, #12
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800806a:	bf00      	nop
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008076:	b480      	push	{r7}
 8008078:	b083      	sub	sp, #12
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800807e:	bf00      	nop
 8008080:	370c      	adds	r7, #12
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800808a:	b480      	push	{r7}
 800808c:	b083      	sub	sp, #12
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
	...

080080b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a40      	ldr	r2, [pc, #256]	; (80081c8 <TIM_Base_SetConfig+0x114>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d013      	beq.n	80080f4 <TIM_Base_SetConfig+0x40>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d2:	d00f      	beq.n	80080f4 <TIM_Base_SetConfig+0x40>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a3d      	ldr	r2, [pc, #244]	; (80081cc <TIM_Base_SetConfig+0x118>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d00b      	beq.n	80080f4 <TIM_Base_SetConfig+0x40>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a3c      	ldr	r2, [pc, #240]	; (80081d0 <TIM_Base_SetConfig+0x11c>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d007      	beq.n	80080f4 <TIM_Base_SetConfig+0x40>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a3b      	ldr	r2, [pc, #236]	; (80081d4 <TIM_Base_SetConfig+0x120>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d003      	beq.n	80080f4 <TIM_Base_SetConfig+0x40>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a3a      	ldr	r2, [pc, #232]	; (80081d8 <TIM_Base_SetConfig+0x124>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d108      	bne.n	8008106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a2f      	ldr	r2, [pc, #188]	; (80081c8 <TIM_Base_SetConfig+0x114>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d02b      	beq.n	8008166 <TIM_Base_SetConfig+0xb2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008114:	d027      	beq.n	8008166 <TIM_Base_SetConfig+0xb2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a2c      	ldr	r2, [pc, #176]	; (80081cc <TIM_Base_SetConfig+0x118>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d023      	beq.n	8008166 <TIM_Base_SetConfig+0xb2>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a2b      	ldr	r2, [pc, #172]	; (80081d0 <TIM_Base_SetConfig+0x11c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d01f      	beq.n	8008166 <TIM_Base_SetConfig+0xb2>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a2a      	ldr	r2, [pc, #168]	; (80081d4 <TIM_Base_SetConfig+0x120>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d01b      	beq.n	8008166 <TIM_Base_SetConfig+0xb2>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a29      	ldr	r2, [pc, #164]	; (80081d8 <TIM_Base_SetConfig+0x124>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d017      	beq.n	8008166 <TIM_Base_SetConfig+0xb2>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a28      	ldr	r2, [pc, #160]	; (80081dc <TIM_Base_SetConfig+0x128>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d013      	beq.n	8008166 <TIM_Base_SetConfig+0xb2>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a27      	ldr	r2, [pc, #156]	; (80081e0 <TIM_Base_SetConfig+0x12c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d00f      	beq.n	8008166 <TIM_Base_SetConfig+0xb2>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a26      	ldr	r2, [pc, #152]	; (80081e4 <TIM_Base_SetConfig+0x130>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00b      	beq.n	8008166 <TIM_Base_SetConfig+0xb2>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a25      	ldr	r2, [pc, #148]	; (80081e8 <TIM_Base_SetConfig+0x134>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d007      	beq.n	8008166 <TIM_Base_SetConfig+0xb2>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a24      	ldr	r2, [pc, #144]	; (80081ec <TIM_Base_SetConfig+0x138>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d003      	beq.n	8008166 <TIM_Base_SetConfig+0xb2>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a23      	ldr	r2, [pc, #140]	; (80081f0 <TIM_Base_SetConfig+0x13c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d108      	bne.n	8008178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800816c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	4313      	orrs	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a0a      	ldr	r2, [pc, #40]	; (80081c8 <TIM_Base_SetConfig+0x114>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d003      	beq.n	80081ac <TIM_Base_SetConfig+0xf8>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a0c      	ldr	r2, [pc, #48]	; (80081d8 <TIM_Base_SetConfig+0x124>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d103      	bne.n	80081b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	691a      	ldr	r2, [r3, #16]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	615a      	str	r2, [r3, #20]
}
 80081ba:	bf00      	nop
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop
 80081c8:	40010000 	.word	0x40010000
 80081cc:	40000400 	.word	0x40000400
 80081d0:	40000800 	.word	0x40000800
 80081d4:	40000c00 	.word	0x40000c00
 80081d8:	40010400 	.word	0x40010400
 80081dc:	40014000 	.word	0x40014000
 80081e0:	40014400 	.word	0x40014400
 80081e4:	40014800 	.word	0x40014800
 80081e8:	40001800 	.word	0x40001800
 80081ec:	40001c00 	.word	0x40001c00
 80081f0:	40002000 	.word	0x40002000

080081f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	f023 0201 	bic.w	r2, r3, #1
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800821e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	4313      	orrs	r3, r2
 8008228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f023 030a 	bic.w	r3, r3, #10
 8008230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	4313      	orrs	r3, r2
 8008238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	621a      	str	r2, [r3, #32]
}
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008252:	b480      	push	{r7}
 8008254:	b087      	sub	sp, #28
 8008256:	af00      	add	r7, sp, #0
 8008258:	60f8      	str	r0, [r7, #12]
 800825a:	60b9      	str	r1, [r7, #8]
 800825c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	f023 0210 	bic.w	r2, r3, #16
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800827c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	031b      	lsls	r3, r3, #12
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800828e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	011b      	lsls	r3, r3, #4
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	621a      	str	r2, [r3, #32]
}
 80082a6:	bf00      	nop
 80082a8:	371c      	adds	r7, #28
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr

080082b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082b2:	b480      	push	{r7}
 80082b4:	b085      	sub	sp, #20
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	f043 0307 	orr.w	r3, r3, #7
 80082d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	609a      	str	r2, [r3, #8]
}
 80082dc:	bf00      	nop
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b087      	sub	sp, #28
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	021a      	lsls	r2, r3, #8
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	431a      	orrs	r2, r3
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	4313      	orrs	r3, r2
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	4313      	orrs	r3, r2
 8008314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	609a      	str	r2, [r3, #8]
}
 800831c:	bf00      	nop
 800831e:	371c      	adds	r7, #28
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008338:	2b01      	cmp	r3, #1
 800833a:	d101      	bne.n	8008340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800833c:	2302      	movs	r3, #2
 800833e:	e05a      	b.n	80083f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2202      	movs	r2, #2
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a21      	ldr	r2, [pc, #132]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d022      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800838c:	d01d      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a1d      	ldr	r2, [pc, #116]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d018      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a1b      	ldr	r2, [pc, #108]	; (800840c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d013      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a1a      	ldr	r2, [pc, #104]	; (8008410 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d00e      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a18      	ldr	r2, [pc, #96]	; (8008414 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d009      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a17      	ldr	r2, [pc, #92]	; (8008418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d004      	beq.n	80083ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a15      	ldr	r2, [pc, #84]	; (800841c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d10c      	bne.n	80083e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	40010000 	.word	0x40010000
 8008408:	40000400 	.word	0x40000400
 800840c:	40000800 	.word	0x40000800
 8008410:	40000c00 	.word	0x40000c00
 8008414:	40010400 	.word	0x40010400
 8008418:	40014000 	.word	0x40014000
 800841c:	40001800 	.word	0x40001800

08008420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e03f      	b.n	80084da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d106      	bne.n	8008474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7fa f954 	bl	800271c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2224      	movs	r2, #36	; 0x24
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68da      	ldr	r2, [r3, #12]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800848a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fdc7 	bl	8009020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691a      	ldr	r2, [r3, #16]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	695a      	ldr	r2, [r3, #20]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68da      	ldr	r2, [r3, #12]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2220      	movs	r2, #32
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2220      	movs	r2, #32
 80084d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08c      	sub	sp, #48	; 0x30
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084f8:	b2db      	uxtb	r3, r3
 80084fa:	2b20      	cmp	r3, #32
 80084fc:	d165      	bne.n	80085ca <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <HAL_UART_Transmit_DMA+0x26>
 8008504:	88fb      	ldrh	r3, [r7, #6]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e05e      	b.n	80085cc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_UART_Transmit_DMA+0x38>
 8008518:	2302      	movs	r3, #2
 800851a:	e057      	b.n	80085cc <HAL_UART_Transmit_DMA+0xe8>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	88fa      	ldrh	r2, [r7, #6]
 800852e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	88fa      	ldrh	r2, [r7, #6]
 8008534:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2221      	movs	r2, #33	; 0x21
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008548:	4a22      	ldr	r2, [pc, #136]	; (80085d4 <HAL_UART_Transmit_DMA+0xf0>)
 800854a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008550:	4a21      	ldr	r2, [pc, #132]	; (80085d8 <HAL_UART_Transmit_DMA+0xf4>)
 8008552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008558:	4a20      	ldr	r2, [pc, #128]	; (80085dc <HAL_UART_Transmit_DMA+0xf8>)
 800855a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008560:	2200      	movs	r2, #0
 8008562:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008564:	f107 0308 	add.w	r3, r7, #8
 8008568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	6819      	ldr	r1, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	3304      	adds	r3, #4
 8008578:	461a      	mov	r2, r3
 800857a:	88fb      	ldrh	r3, [r7, #6]
 800857c:	f7fb fdda 	bl	8004134 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008588:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3314      	adds	r3, #20
 8008598:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	617b      	str	r3, [r7, #20]
   return(result);
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3314      	adds	r3, #20
 80085b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085b2:	627a      	str	r2, [r7, #36]	; 0x24
 80085b4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	6a39      	ldr	r1, [r7, #32]
 80085b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	61fb      	str	r3, [r7, #28]
   return(result);
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e5      	bne.n	8008592 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e000      	b.n	80085cc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80085ca:	2302      	movs	r3, #2
  }
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3730      	adds	r7, #48	; 0x30
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	08008b51 	.word	0x08008b51
 80085d8:	08008beb 	.word	0x08008beb
 80085dc:	08008c07 	.word	0x08008c07

080085e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b0ba      	sub	sp, #232	; 0xe8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008606:	2300      	movs	r3, #0
 8008608:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800860c:	2300      	movs	r3, #0
 800860e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008616:	f003 030f 	and.w	r3, r3, #15
 800861a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800861e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10f      	bne.n	8008646 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d009      	beq.n	8008646 <HAL_UART_IRQHandler+0x66>
 8008632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008636:	f003 0320 	and.w	r3, r3, #32
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fc32 	bl	8008ea8 <UART_Receive_IT>
      return;
 8008644:	e256      	b.n	8008af4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008646:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800864a:	2b00      	cmp	r3, #0
 800864c:	f000 80de 	beq.w	800880c <HAL_UART_IRQHandler+0x22c>
 8008650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	d106      	bne.n	800866a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800865c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008660:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 80d1 	beq.w	800880c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800866a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00b      	beq.n	800868e <HAL_UART_IRQHandler+0xae>
 8008676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800867a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800867e:	2b00      	cmp	r3, #0
 8008680:	d005      	beq.n	800868e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008686:	f043 0201 	orr.w	r2, r3, #1
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800868e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008692:	f003 0304 	and.w	r3, r3, #4
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00b      	beq.n	80086b2 <HAL_UART_IRQHandler+0xd2>
 800869a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d005      	beq.n	80086b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086aa:	f043 0202 	orr.w	r2, r3, #2
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b6:	f003 0302 	and.w	r3, r3, #2
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00b      	beq.n	80086d6 <HAL_UART_IRQHandler+0xf6>
 80086be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086c2:	f003 0301 	and.w	r3, r3, #1
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	f043 0204 	orr.w	r2, r3, #4
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80086d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086da:	f003 0308 	and.w	r3, r3, #8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d011      	beq.n	8008706 <HAL_UART_IRQHandler+0x126>
 80086e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086e6:	f003 0320 	and.w	r3, r3, #32
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d105      	bne.n	80086fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80086ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d005      	beq.n	8008706 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	f043 0208 	orr.w	r2, r3, #8
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 81ed 	beq.w	8008aea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008714:	f003 0320 	and.w	r3, r3, #32
 8008718:	2b00      	cmp	r3, #0
 800871a:	d008      	beq.n	800872e <HAL_UART_IRQHandler+0x14e>
 800871c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fbbd 	bl	8008ea8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008738:	2b40      	cmp	r3, #64	; 0x40
 800873a:	bf0c      	ite	eq
 800873c:	2301      	moveq	r3, #1
 800873e:	2300      	movne	r3, #0
 8008740:	b2db      	uxtb	r3, r3
 8008742:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	f003 0308 	and.w	r3, r3, #8
 800874e:	2b00      	cmp	r3, #0
 8008750:	d103      	bne.n	800875a <HAL_UART_IRQHandler+0x17a>
 8008752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008756:	2b00      	cmp	r3, #0
 8008758:	d04f      	beq.n	80087fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fac5 	bl	8008cea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876a:	2b40      	cmp	r3, #64	; 0x40
 800876c:	d141      	bne.n	80087f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3314      	adds	r3, #20
 8008774:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800878c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3314      	adds	r3, #20
 8008796:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800879a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800879e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80087a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80087b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1d9      	bne.n	800876e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d013      	beq.n	80087ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	4a7d      	ldr	r2, [pc, #500]	; (80089bc <HAL_UART_IRQHandler+0x3dc>)
 80087c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fb fd78 	bl	80042c4 <HAL_DMA_Abort_IT>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d016      	beq.n	8008808 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087e4:	4610      	mov	r0, r2
 80087e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e8:	e00e      	b.n	8008808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f99a 	bl	8008b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f0:	e00a      	b.n	8008808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f996 	bl	8008b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f8:	e006      	b.n	8008808 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f992 	bl	8008b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008806:	e170      	b.n	8008aea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008808:	bf00      	nop
    return;
 800880a:	e16e      	b.n	8008aea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008810:	2b01      	cmp	r3, #1
 8008812:	f040 814a 	bne.w	8008aaa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800881a:	f003 0310 	and.w	r3, r3, #16
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 8143 	beq.w	8008aaa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008828:	f003 0310 	and.w	r3, r3, #16
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 813c 	beq.w	8008aaa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008832:	2300      	movs	r3, #0
 8008834:	60bb      	str	r3, [r7, #8]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	60bb      	str	r3, [r7, #8]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	60bb      	str	r3, [r7, #8]
 8008846:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008852:	2b40      	cmp	r3, #64	; 0x40
 8008854:	f040 80b4 	bne.w	80089c0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008864:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008868:	2b00      	cmp	r3, #0
 800886a:	f000 8140 	beq.w	8008aee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008872:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008876:	429a      	cmp	r2, r3
 8008878:	f080 8139 	bcs.w	8008aee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008882:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	69db      	ldr	r3, [r3, #28]
 800888a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800888e:	f000 8088 	beq.w	80089a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	330c      	adds	r3, #12
 8008898:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800889c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088a0:	e853 3f00 	ldrex	r3, [r3]
 80088a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80088a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	330c      	adds	r3, #12
 80088ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80088be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80088c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80088ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088ce:	e841 2300 	strex	r3, r2, [r1]
 80088d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1d9      	bne.n	8008892 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3314      	adds	r3, #20
 80088e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088f0:	f023 0301 	bic.w	r3, r3, #1
 80088f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3314      	adds	r3, #20
 80088fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008902:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008906:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800890a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800890e:	e841 2300 	strex	r3, r2, [r1]
 8008912:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1e1      	bne.n	80088de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	3314      	adds	r3, #20
 8008920:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008922:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008924:	e853 3f00 	ldrex	r3, [r3]
 8008928:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800892a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800892c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3314      	adds	r3, #20
 800893a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800893e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008940:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008942:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008944:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800894c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e3      	bne.n	800891a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2220      	movs	r2, #32
 8008956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	330c      	adds	r3, #12
 8008966:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008972:	f023 0310 	bic.w	r3, r3, #16
 8008976:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	330c      	adds	r3, #12
 8008980:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008984:	65ba      	str	r2, [r7, #88]	; 0x58
 8008986:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800898a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800898c:	e841 2300 	strex	r3, r2, [r1]
 8008990:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e3      	bne.n	8008960 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899c:	4618      	mov	r0, r3
 800899e:	f7fb fc21 	bl	80041e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f8c0 	bl	8008b38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80089b8:	e099      	b.n	8008aee <HAL_UART_IRQHandler+0x50e>
 80089ba:	bf00      	nop
 80089bc:	08008db1 	.word	0x08008db1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f000 808b 	beq.w	8008af2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80089dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	f000 8086 	beq.w	8008af2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	330c      	adds	r3, #12
 80089ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f0:	e853 3f00 	ldrex	r3, [r3]
 80089f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80089f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	330c      	adds	r3, #12
 8008a06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a0a:	647a      	str	r2, [r7, #68]	; 0x44
 8008a0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a12:	e841 2300 	strex	r3, r2, [r1]
 8008a16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1e3      	bne.n	80089e6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	3314      	adds	r3, #20
 8008a24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008a2e:	6a3b      	ldr	r3, [r7, #32]
 8008a30:	f023 0301 	bic.w	r3, r3, #1
 8008a34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3314      	adds	r3, #20
 8008a3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a42:	633a      	str	r2, [r7, #48]	; 0x30
 8008a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e3      	bne.n	8008a1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	330c      	adds	r3, #12
 8008a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	e853 3f00 	ldrex	r3, [r3]
 8008a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f023 0310 	bic.w	r3, r3, #16
 8008a7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	330c      	adds	r3, #12
 8008a84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a88:	61fa      	str	r2, [r7, #28]
 8008a8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8c:	69b9      	ldr	r1, [r7, #24]
 8008a8e:	69fa      	ldr	r2, [r7, #28]
 8008a90:	e841 2300 	strex	r3, r2, [r1]
 8008a94:	617b      	str	r3, [r7, #20]
   return(result);
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1e3      	bne.n	8008a64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008a9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f848 	bl	8008b38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008aa8:	e023      	b.n	8008af2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d009      	beq.n	8008aca <HAL_UART_IRQHandler+0x4ea>
 8008ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f988 	bl	8008dd8 <UART_Transmit_IT>
    return;
 8008ac8:	e014      	b.n	8008af4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00e      	beq.n	8008af4 <HAL_UART_IRQHandler+0x514>
 8008ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d008      	beq.n	8008af4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f9c8 	bl	8008e78 <UART_EndTransmit_IT>
    return;
 8008ae8:	e004      	b.n	8008af4 <HAL_UART_IRQHandler+0x514>
    return;
 8008aea:	bf00      	nop
 8008aec:	e002      	b.n	8008af4 <HAL_UART_IRQHandler+0x514>
      return;
 8008aee:	bf00      	nop
 8008af0:	e000      	b.n	8008af4 <HAL_UART_IRQHandler+0x514>
      return;
 8008af2:	bf00      	nop
  }
}
 8008af4:	37e8      	adds	r7, #232	; 0xe8
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
 8008afa:	bf00      	nop

08008afc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008b04:	bf00      	nop
 8008b06:	370c      	adds	r7, #12
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b44:	bf00      	nop
 8008b46:	370c      	adds	r7, #12
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b090      	sub	sp, #64	; 0x40
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d137      	bne.n	8008bdc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6e:	2200      	movs	r2, #0
 8008b70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3314      	adds	r3, #20
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	623b      	str	r3, [r7, #32]
   return(result);
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b88:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3314      	adds	r3, #20
 8008b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b92:	633a      	str	r2, [r7, #48]	; 0x30
 8008b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e5      	bne.n	8008b72 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	330c      	adds	r3, #12
 8008bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	e853 3f00 	ldrex	r3, [r3]
 8008bb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8008bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	330c      	adds	r3, #12
 8008bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bc6:	61fa      	str	r2, [r7, #28]
 8008bc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	69b9      	ldr	r1, [r7, #24]
 8008bcc:	69fa      	ldr	r2, [r7, #28]
 8008bce:	e841 2300 	strex	r3, r2, [r1]
 8008bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e5      	bne.n	8008ba6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bda:	e002      	b.n	8008be2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008bdc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008bde:	f7f8 fbaf 	bl	8001340 <HAL_UART_TxCpltCallback>
}
 8008be2:	bf00      	nop
 8008be4:	3740      	adds	r7, #64	; 0x40
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7ff ff7f 	bl	8008afc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bfe:	bf00      	nop
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c16:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	695b      	ldr	r3, [r3, #20]
 8008c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c22:	2b80      	cmp	r3, #128	; 0x80
 8008c24:	bf0c      	ite	eq
 8008c26:	2301      	moveq	r3, #1
 8008c28:	2300      	movne	r3, #0
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b21      	cmp	r3, #33	; 0x21
 8008c38:	d108      	bne.n	8008c4c <UART_DMAError+0x46>
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d005      	beq.n	8008c4c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2200      	movs	r2, #0
 8008c44:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008c46:	68b8      	ldr	r0, [r7, #8]
 8008c48:	f000 f827 	bl	8008c9a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c56:	2b40      	cmp	r3, #64	; 0x40
 8008c58:	bf0c      	ite	eq
 8008c5a:	2301      	moveq	r3, #1
 8008c5c:	2300      	movne	r3, #0
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b22      	cmp	r3, #34	; 0x22
 8008c6c:	d108      	bne.n	8008c80 <UART_DMAError+0x7a>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d005      	beq.n	8008c80 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2200      	movs	r2, #0
 8008c78:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008c7a:	68b8      	ldr	r0, [r7, #8]
 8008c7c:	f000 f835 	bl	8008cea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c84:	f043 0210 	orr.w	r2, r3, #16
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c8c:	68b8      	ldr	r0, [r7, #8]
 8008c8e:	f7ff ff49 	bl	8008b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c92:	bf00      	nop
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b089      	sub	sp, #36	; 0x24
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	330c      	adds	r3, #12
 8008ca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	e853 3f00 	ldrex	r3, [r3]
 8008cb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008cb8:	61fb      	str	r3, [r7, #28]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	330c      	adds	r3, #12
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	61ba      	str	r2, [r7, #24]
 8008cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	6979      	ldr	r1, [r7, #20]
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e5      	bne.n	8008ca2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2220      	movs	r2, #32
 8008cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008cde:	bf00      	nop
 8008ce0:	3724      	adds	r7, #36	; 0x24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr

08008cea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b095      	sub	sp, #84	; 0x54
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	330c      	adds	r3, #12
 8008cf8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfc:	e853 3f00 	ldrex	r3, [r3]
 8008d00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	330c      	adds	r3, #12
 8008d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d12:	643a      	str	r2, [r7, #64]	; 0x40
 8008d14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d1a:	e841 2300 	strex	r3, r2, [r1]
 8008d1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d1e5      	bne.n	8008cf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	3314      	adds	r3, #20
 8008d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	e853 3f00 	ldrex	r3, [r3]
 8008d34:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	f023 0301 	bic.w	r3, r3, #1
 8008d3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3314      	adds	r3, #20
 8008d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d4e:	e841 2300 	strex	r3, r2, [r1]
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1e5      	bne.n	8008d26 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d119      	bne.n	8008d96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	330c      	adds	r3, #12
 8008d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	f023 0310 	bic.w	r3, r3, #16
 8008d78:	647b      	str	r3, [r7, #68]	; 0x44
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	330c      	adds	r3, #12
 8008d80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d82:	61ba      	str	r2, [r7, #24]
 8008d84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d86:	6979      	ldr	r1, [r7, #20]
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	e841 2300 	strex	r3, r2, [r1]
 8008d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1e5      	bne.n	8008d62 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008da4:	bf00      	nop
 8008da6:	3754      	adds	r7, #84	; 0x54
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f7ff feaa 	bl	8008b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dd0:	bf00      	nop
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b085      	sub	sp, #20
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	2b21      	cmp	r3, #33	; 0x21
 8008dea:	d13e      	bne.n	8008e6a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008df4:	d114      	bne.n	8008e20 <UART_Transmit_IT+0x48>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d110      	bne.n	8008e20 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e12:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6a1b      	ldr	r3, [r3, #32]
 8008e18:	1c9a      	adds	r2, r3, #2
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	621a      	str	r2, [r3, #32]
 8008e1e:	e008      	b.n	8008e32 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	1c59      	adds	r1, r3, #1
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	6211      	str	r1, [r2, #32]
 8008e2a:	781a      	ldrb	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	4619      	mov	r1, r3
 8008e40:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10f      	bne.n	8008e66 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68da      	ldr	r2, [r3, #12]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e54:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68da      	ldr	r2, [r3, #12]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e64:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e66:	2300      	movs	r3, #0
 8008e68:	e000      	b.n	8008e6c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e6a:	2302      	movs	r3, #2
  }
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68da      	ldr	r2, [r3, #12]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e8e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7f8 fa51 	bl	8001340 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b08c      	sub	sp, #48	; 0x30
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b22      	cmp	r3, #34	; 0x22
 8008eba:	f040 80ab 	bne.w	8009014 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ec6:	d117      	bne.n	8008ef8 <UART_Receive_IT+0x50>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d113      	bne.n	8008ef8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef0:	1c9a      	adds	r2, r3, #2
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	629a      	str	r2, [r3, #40]	; 0x28
 8008ef6:	e026      	b.n	8008f46 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	689b      	ldr	r3, [r3, #8]
 8008f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f0a:	d007      	beq.n	8008f1c <UART_Receive_IT+0x74>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10a      	bne.n	8008f2a <UART_Receive_IT+0x82>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d106      	bne.n	8008f2a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	b2da      	uxtb	r2, r3
 8008f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f26:	701a      	strb	r2, [r3, #0]
 8008f28:	e008      	b.n	8008f3c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	687a      	ldr	r2, [r7, #4]
 8008f52:	4619      	mov	r1, r3
 8008f54:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d15a      	bne.n	8009010 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68da      	ldr	r2, [r3, #12]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0220 	bic.w	r2, r2, #32
 8008f68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	695a      	ldr	r2, [r3, #20]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f022 0201 	bic.w	r2, r2, #1
 8008f88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d135      	bne.n	8009006 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	330c      	adds	r3, #12
 8008fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	e853 3f00 	ldrex	r3, [r3]
 8008fae:	613b      	str	r3, [r7, #16]
   return(result);
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	f023 0310 	bic.w	r3, r3, #16
 8008fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	330c      	adds	r3, #12
 8008fbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc0:	623a      	str	r2, [r7, #32]
 8008fc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	69f9      	ldr	r1, [r7, #28]
 8008fc6:	6a3a      	ldr	r2, [r7, #32]
 8008fc8:	e841 2300 	strex	r3, r2, [r1]
 8008fcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1e5      	bne.n	8008fa0 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0310 	and.w	r3, r3, #16
 8008fde:	2b10      	cmp	r3, #16
 8008fe0:	d10a      	bne.n	8008ff8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	60fb      	str	r3, [r7, #12]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	60fb      	str	r3, [r7, #12]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff fd9a 	bl	8008b38 <HAL_UARTEx_RxEventCallback>
 8009004:	e002      	b.n	800900c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7ff fd82 	bl	8008b10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	e002      	b.n	8009016 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	e000      	b.n	8009016 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009014:	2302      	movs	r3, #2
  }
}
 8009016:	4618      	mov	r0, r3
 8009018:	3730      	adds	r7, #48	; 0x30
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009024:	b0c0      	sub	sp, #256	; 0x100
 8009026:	af00      	add	r7, sp, #0
 8009028:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800902c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800903c:	68d9      	ldr	r1, [r3, #12]
 800903e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	ea40 0301 	orr.w	r3, r0, r1
 8009048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800904a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	431a      	orrs	r2, r3
 8009058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	431a      	orrs	r2, r3
 8009060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009064:	69db      	ldr	r3, [r3, #28]
 8009066:	4313      	orrs	r3, r2
 8009068:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800906c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009078:	f021 010c 	bic.w	r1, r1, #12
 800907c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009086:	430b      	orrs	r3, r1
 8009088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800908a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	695b      	ldr	r3, [r3, #20]
 8009092:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800909a:	6999      	ldr	r1, [r3, #24]
 800909c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	ea40 0301 	orr.w	r3, r0, r1
 80090a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	4b8f      	ldr	r3, [pc, #572]	; (80092ec <UART_SetConfig+0x2cc>)
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d005      	beq.n	80090c0 <UART_SetConfig+0xa0>
 80090b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	4b8d      	ldr	r3, [pc, #564]	; (80092f0 <UART_SetConfig+0x2d0>)
 80090bc:	429a      	cmp	r2, r3
 80090be:	d104      	bne.n	80090ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090c0:	f7fe fcfa 	bl	8007ab8 <HAL_RCC_GetPCLK2Freq>
 80090c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80090c8:	e003      	b.n	80090d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090ca:	f7fe fce1 	bl	8007a90 <HAL_RCC_GetPCLK1Freq>
 80090ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d6:	69db      	ldr	r3, [r3, #28]
 80090d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090dc:	f040 810c 	bne.w	80092f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090e4:	2200      	movs	r2, #0
 80090e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80090ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80090f2:	4622      	mov	r2, r4
 80090f4:	462b      	mov	r3, r5
 80090f6:	1891      	adds	r1, r2, r2
 80090f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80090fa:	415b      	adcs	r3, r3
 80090fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009102:	4621      	mov	r1, r4
 8009104:	eb12 0801 	adds.w	r8, r2, r1
 8009108:	4629      	mov	r1, r5
 800910a:	eb43 0901 	adc.w	r9, r3, r1
 800910e:	f04f 0200 	mov.w	r2, #0
 8009112:	f04f 0300 	mov.w	r3, #0
 8009116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800911a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800911e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009122:	4690      	mov	r8, r2
 8009124:	4699      	mov	r9, r3
 8009126:	4623      	mov	r3, r4
 8009128:	eb18 0303 	adds.w	r3, r8, r3
 800912c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009130:	462b      	mov	r3, r5
 8009132:	eb49 0303 	adc.w	r3, r9, r3
 8009136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800913a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009146:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800914a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800914e:	460b      	mov	r3, r1
 8009150:	18db      	adds	r3, r3, r3
 8009152:	653b      	str	r3, [r7, #80]	; 0x50
 8009154:	4613      	mov	r3, r2
 8009156:	eb42 0303 	adc.w	r3, r2, r3
 800915a:	657b      	str	r3, [r7, #84]	; 0x54
 800915c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009164:	f7f7 fd20 	bl	8000ba8 <__aeabi_uldivmod>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4b61      	ldr	r3, [pc, #388]	; (80092f4 <UART_SetConfig+0x2d4>)
 800916e:	fba3 2302 	umull	r2, r3, r3, r2
 8009172:	095b      	lsrs	r3, r3, #5
 8009174:	011c      	lsls	r4, r3, #4
 8009176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800917a:	2200      	movs	r2, #0
 800917c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009180:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009184:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009188:	4642      	mov	r2, r8
 800918a:	464b      	mov	r3, r9
 800918c:	1891      	adds	r1, r2, r2
 800918e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009190:	415b      	adcs	r3, r3
 8009192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009194:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009198:	4641      	mov	r1, r8
 800919a:	eb12 0a01 	adds.w	sl, r2, r1
 800919e:	4649      	mov	r1, r9
 80091a0:	eb43 0b01 	adc.w	fp, r3, r1
 80091a4:	f04f 0200 	mov.w	r2, #0
 80091a8:	f04f 0300 	mov.w	r3, #0
 80091ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091b8:	4692      	mov	sl, r2
 80091ba:	469b      	mov	fp, r3
 80091bc:	4643      	mov	r3, r8
 80091be:	eb1a 0303 	adds.w	r3, sl, r3
 80091c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091c6:	464b      	mov	r3, r9
 80091c8:	eb4b 0303 	adc.w	r3, fp, r3
 80091cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80091d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80091e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80091e4:	460b      	mov	r3, r1
 80091e6:	18db      	adds	r3, r3, r3
 80091e8:	643b      	str	r3, [r7, #64]	; 0x40
 80091ea:	4613      	mov	r3, r2
 80091ec:	eb42 0303 	adc.w	r3, r2, r3
 80091f0:	647b      	str	r3, [r7, #68]	; 0x44
 80091f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80091f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80091fa:	f7f7 fcd5 	bl	8000ba8 <__aeabi_uldivmod>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	4611      	mov	r1, r2
 8009204:	4b3b      	ldr	r3, [pc, #236]	; (80092f4 <UART_SetConfig+0x2d4>)
 8009206:	fba3 2301 	umull	r2, r3, r3, r1
 800920a:	095b      	lsrs	r3, r3, #5
 800920c:	2264      	movs	r2, #100	; 0x64
 800920e:	fb02 f303 	mul.w	r3, r2, r3
 8009212:	1acb      	subs	r3, r1, r3
 8009214:	00db      	lsls	r3, r3, #3
 8009216:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800921a:	4b36      	ldr	r3, [pc, #216]	; (80092f4 <UART_SetConfig+0x2d4>)
 800921c:	fba3 2302 	umull	r2, r3, r3, r2
 8009220:	095b      	lsrs	r3, r3, #5
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009228:	441c      	add	r4, r3
 800922a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800922e:	2200      	movs	r2, #0
 8009230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009234:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009238:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800923c:	4642      	mov	r2, r8
 800923e:	464b      	mov	r3, r9
 8009240:	1891      	adds	r1, r2, r2
 8009242:	63b9      	str	r1, [r7, #56]	; 0x38
 8009244:	415b      	adcs	r3, r3
 8009246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800924c:	4641      	mov	r1, r8
 800924e:	1851      	adds	r1, r2, r1
 8009250:	6339      	str	r1, [r7, #48]	; 0x30
 8009252:	4649      	mov	r1, r9
 8009254:	414b      	adcs	r3, r1
 8009256:	637b      	str	r3, [r7, #52]	; 0x34
 8009258:	f04f 0200 	mov.w	r2, #0
 800925c:	f04f 0300 	mov.w	r3, #0
 8009260:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009264:	4659      	mov	r1, fp
 8009266:	00cb      	lsls	r3, r1, #3
 8009268:	4651      	mov	r1, sl
 800926a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800926e:	4651      	mov	r1, sl
 8009270:	00ca      	lsls	r2, r1, #3
 8009272:	4610      	mov	r0, r2
 8009274:	4619      	mov	r1, r3
 8009276:	4603      	mov	r3, r0
 8009278:	4642      	mov	r2, r8
 800927a:	189b      	adds	r3, r3, r2
 800927c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009280:	464b      	mov	r3, r9
 8009282:	460a      	mov	r2, r1
 8009284:	eb42 0303 	adc.w	r3, r2, r3
 8009288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800928c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009298:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800929c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80092a0:	460b      	mov	r3, r1
 80092a2:	18db      	adds	r3, r3, r3
 80092a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80092a6:	4613      	mov	r3, r2
 80092a8:	eb42 0303 	adc.w	r3, r2, r3
 80092ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80092b6:	f7f7 fc77 	bl	8000ba8 <__aeabi_uldivmod>
 80092ba:	4602      	mov	r2, r0
 80092bc:	460b      	mov	r3, r1
 80092be:	4b0d      	ldr	r3, [pc, #52]	; (80092f4 <UART_SetConfig+0x2d4>)
 80092c0:	fba3 1302 	umull	r1, r3, r3, r2
 80092c4:	095b      	lsrs	r3, r3, #5
 80092c6:	2164      	movs	r1, #100	; 0x64
 80092c8:	fb01 f303 	mul.w	r3, r1, r3
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	00db      	lsls	r3, r3, #3
 80092d0:	3332      	adds	r3, #50	; 0x32
 80092d2:	4a08      	ldr	r2, [pc, #32]	; (80092f4 <UART_SetConfig+0x2d4>)
 80092d4:	fba2 2303 	umull	r2, r3, r2, r3
 80092d8:	095b      	lsrs	r3, r3, #5
 80092da:	f003 0207 	and.w	r2, r3, #7
 80092de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4422      	add	r2, r4
 80092e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092e8:	e105      	b.n	80094f6 <UART_SetConfig+0x4d6>
 80092ea:	bf00      	nop
 80092ec:	40011000 	.word	0x40011000
 80092f0:	40011400 	.word	0x40011400
 80092f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092fc:	2200      	movs	r2, #0
 80092fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009302:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009306:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800930a:	4642      	mov	r2, r8
 800930c:	464b      	mov	r3, r9
 800930e:	1891      	adds	r1, r2, r2
 8009310:	6239      	str	r1, [r7, #32]
 8009312:	415b      	adcs	r3, r3
 8009314:	627b      	str	r3, [r7, #36]	; 0x24
 8009316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800931a:	4641      	mov	r1, r8
 800931c:	1854      	adds	r4, r2, r1
 800931e:	4649      	mov	r1, r9
 8009320:	eb43 0501 	adc.w	r5, r3, r1
 8009324:	f04f 0200 	mov.w	r2, #0
 8009328:	f04f 0300 	mov.w	r3, #0
 800932c:	00eb      	lsls	r3, r5, #3
 800932e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009332:	00e2      	lsls	r2, r4, #3
 8009334:	4614      	mov	r4, r2
 8009336:	461d      	mov	r5, r3
 8009338:	4643      	mov	r3, r8
 800933a:	18e3      	adds	r3, r4, r3
 800933c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009340:	464b      	mov	r3, r9
 8009342:	eb45 0303 	adc.w	r3, r5, r3
 8009346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800934a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009356:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800935a:	f04f 0200 	mov.w	r2, #0
 800935e:	f04f 0300 	mov.w	r3, #0
 8009362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009366:	4629      	mov	r1, r5
 8009368:	008b      	lsls	r3, r1, #2
 800936a:	4621      	mov	r1, r4
 800936c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009370:	4621      	mov	r1, r4
 8009372:	008a      	lsls	r2, r1, #2
 8009374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009378:	f7f7 fc16 	bl	8000ba8 <__aeabi_uldivmod>
 800937c:	4602      	mov	r2, r0
 800937e:	460b      	mov	r3, r1
 8009380:	4b60      	ldr	r3, [pc, #384]	; (8009504 <UART_SetConfig+0x4e4>)
 8009382:	fba3 2302 	umull	r2, r3, r3, r2
 8009386:	095b      	lsrs	r3, r3, #5
 8009388:	011c      	lsls	r4, r3, #4
 800938a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800938e:	2200      	movs	r2, #0
 8009390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009394:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009398:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800939c:	4642      	mov	r2, r8
 800939e:	464b      	mov	r3, r9
 80093a0:	1891      	adds	r1, r2, r2
 80093a2:	61b9      	str	r1, [r7, #24]
 80093a4:	415b      	adcs	r3, r3
 80093a6:	61fb      	str	r3, [r7, #28]
 80093a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093ac:	4641      	mov	r1, r8
 80093ae:	1851      	adds	r1, r2, r1
 80093b0:	6139      	str	r1, [r7, #16]
 80093b2:	4649      	mov	r1, r9
 80093b4:	414b      	adcs	r3, r1
 80093b6:	617b      	str	r3, [r7, #20]
 80093b8:	f04f 0200 	mov.w	r2, #0
 80093bc:	f04f 0300 	mov.w	r3, #0
 80093c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093c4:	4659      	mov	r1, fp
 80093c6:	00cb      	lsls	r3, r1, #3
 80093c8:	4651      	mov	r1, sl
 80093ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093ce:	4651      	mov	r1, sl
 80093d0:	00ca      	lsls	r2, r1, #3
 80093d2:	4610      	mov	r0, r2
 80093d4:	4619      	mov	r1, r3
 80093d6:	4603      	mov	r3, r0
 80093d8:	4642      	mov	r2, r8
 80093da:	189b      	adds	r3, r3, r2
 80093dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093e0:	464b      	mov	r3, r9
 80093e2:	460a      	mov	r2, r1
 80093e4:	eb42 0303 	adc.w	r3, r2, r3
 80093e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80093f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80093f8:	f04f 0200 	mov.w	r2, #0
 80093fc:	f04f 0300 	mov.w	r3, #0
 8009400:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009404:	4649      	mov	r1, r9
 8009406:	008b      	lsls	r3, r1, #2
 8009408:	4641      	mov	r1, r8
 800940a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800940e:	4641      	mov	r1, r8
 8009410:	008a      	lsls	r2, r1, #2
 8009412:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009416:	f7f7 fbc7 	bl	8000ba8 <__aeabi_uldivmod>
 800941a:	4602      	mov	r2, r0
 800941c:	460b      	mov	r3, r1
 800941e:	4b39      	ldr	r3, [pc, #228]	; (8009504 <UART_SetConfig+0x4e4>)
 8009420:	fba3 1302 	umull	r1, r3, r3, r2
 8009424:	095b      	lsrs	r3, r3, #5
 8009426:	2164      	movs	r1, #100	; 0x64
 8009428:	fb01 f303 	mul.w	r3, r1, r3
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	011b      	lsls	r3, r3, #4
 8009430:	3332      	adds	r3, #50	; 0x32
 8009432:	4a34      	ldr	r2, [pc, #208]	; (8009504 <UART_SetConfig+0x4e4>)
 8009434:	fba2 2303 	umull	r2, r3, r2, r3
 8009438:	095b      	lsrs	r3, r3, #5
 800943a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800943e:	441c      	add	r4, r3
 8009440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009444:	2200      	movs	r2, #0
 8009446:	673b      	str	r3, [r7, #112]	; 0x70
 8009448:	677a      	str	r2, [r7, #116]	; 0x74
 800944a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800944e:	4642      	mov	r2, r8
 8009450:	464b      	mov	r3, r9
 8009452:	1891      	adds	r1, r2, r2
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	415b      	adcs	r3, r3
 8009458:	60fb      	str	r3, [r7, #12]
 800945a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800945e:	4641      	mov	r1, r8
 8009460:	1851      	adds	r1, r2, r1
 8009462:	6039      	str	r1, [r7, #0]
 8009464:	4649      	mov	r1, r9
 8009466:	414b      	adcs	r3, r1
 8009468:	607b      	str	r3, [r7, #4]
 800946a:	f04f 0200 	mov.w	r2, #0
 800946e:	f04f 0300 	mov.w	r3, #0
 8009472:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009476:	4659      	mov	r1, fp
 8009478:	00cb      	lsls	r3, r1, #3
 800947a:	4651      	mov	r1, sl
 800947c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009480:	4651      	mov	r1, sl
 8009482:	00ca      	lsls	r2, r1, #3
 8009484:	4610      	mov	r0, r2
 8009486:	4619      	mov	r1, r3
 8009488:	4603      	mov	r3, r0
 800948a:	4642      	mov	r2, r8
 800948c:	189b      	adds	r3, r3, r2
 800948e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009490:	464b      	mov	r3, r9
 8009492:	460a      	mov	r2, r1
 8009494:	eb42 0303 	adc.w	r3, r2, r3
 8009498:	66fb      	str	r3, [r7, #108]	; 0x6c
 800949a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	663b      	str	r3, [r7, #96]	; 0x60
 80094a4:	667a      	str	r2, [r7, #100]	; 0x64
 80094a6:	f04f 0200 	mov.w	r2, #0
 80094aa:	f04f 0300 	mov.w	r3, #0
 80094ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80094b2:	4649      	mov	r1, r9
 80094b4:	008b      	lsls	r3, r1, #2
 80094b6:	4641      	mov	r1, r8
 80094b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094bc:	4641      	mov	r1, r8
 80094be:	008a      	lsls	r2, r1, #2
 80094c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80094c4:	f7f7 fb70 	bl	8000ba8 <__aeabi_uldivmod>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	4b0d      	ldr	r3, [pc, #52]	; (8009504 <UART_SetConfig+0x4e4>)
 80094ce:	fba3 1302 	umull	r1, r3, r3, r2
 80094d2:	095b      	lsrs	r3, r3, #5
 80094d4:	2164      	movs	r1, #100	; 0x64
 80094d6:	fb01 f303 	mul.w	r3, r1, r3
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	011b      	lsls	r3, r3, #4
 80094de:	3332      	adds	r3, #50	; 0x32
 80094e0:	4a08      	ldr	r2, [pc, #32]	; (8009504 <UART_SetConfig+0x4e4>)
 80094e2:	fba2 2303 	umull	r2, r3, r2, r3
 80094e6:	095b      	lsrs	r3, r3, #5
 80094e8:	f003 020f 	and.w	r2, r3, #15
 80094ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4422      	add	r2, r4
 80094f4:	609a      	str	r2, [r3, #8]
}
 80094f6:	bf00      	nop
 80094f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80094fc:	46bd      	mov	sp, r7
 80094fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009502:	bf00      	nop
 8009504:	51eb851f 	.word	0x51eb851f

08009508 <__errno>:
 8009508:	4b01      	ldr	r3, [pc, #4]	; (8009510 <__errno+0x8>)
 800950a:	6818      	ldr	r0, [r3, #0]
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	2000000c 	.word	0x2000000c

08009514 <__libc_init_array>:
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	4d0d      	ldr	r5, [pc, #52]	; (800954c <__libc_init_array+0x38>)
 8009518:	4c0d      	ldr	r4, [pc, #52]	; (8009550 <__libc_init_array+0x3c>)
 800951a:	1b64      	subs	r4, r4, r5
 800951c:	10a4      	asrs	r4, r4, #2
 800951e:	2600      	movs	r6, #0
 8009520:	42a6      	cmp	r6, r4
 8009522:	d109      	bne.n	8009538 <__libc_init_array+0x24>
 8009524:	4d0b      	ldr	r5, [pc, #44]	; (8009554 <__libc_init_array+0x40>)
 8009526:	4c0c      	ldr	r4, [pc, #48]	; (8009558 <__libc_init_array+0x44>)
 8009528:	f002 ff02 	bl	800c330 <_init>
 800952c:	1b64      	subs	r4, r4, r5
 800952e:	10a4      	asrs	r4, r4, #2
 8009530:	2600      	movs	r6, #0
 8009532:	42a6      	cmp	r6, r4
 8009534:	d105      	bne.n	8009542 <__libc_init_array+0x2e>
 8009536:	bd70      	pop	{r4, r5, r6, pc}
 8009538:	f855 3b04 	ldr.w	r3, [r5], #4
 800953c:	4798      	blx	r3
 800953e:	3601      	adds	r6, #1
 8009540:	e7ee      	b.n	8009520 <__libc_init_array+0xc>
 8009542:	f855 3b04 	ldr.w	r3, [r5], #4
 8009546:	4798      	blx	r3
 8009548:	3601      	adds	r6, #1
 800954a:	e7f2      	b.n	8009532 <__libc_init_array+0x1e>
 800954c:	0800c76c 	.word	0x0800c76c
 8009550:	0800c76c 	.word	0x0800c76c
 8009554:	0800c76c 	.word	0x0800c76c
 8009558:	0800c770 	.word	0x0800c770

0800955c <memset>:
 800955c:	4402      	add	r2, r0
 800955e:	4603      	mov	r3, r0
 8009560:	4293      	cmp	r3, r2
 8009562:	d100      	bne.n	8009566 <memset+0xa>
 8009564:	4770      	bx	lr
 8009566:	f803 1b01 	strb.w	r1, [r3], #1
 800956a:	e7f9      	b.n	8009560 <memset+0x4>

0800956c <__cvt>:
 800956c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009570:	ec55 4b10 	vmov	r4, r5, d0
 8009574:	2d00      	cmp	r5, #0
 8009576:	460e      	mov	r6, r1
 8009578:	4619      	mov	r1, r3
 800957a:	462b      	mov	r3, r5
 800957c:	bfbb      	ittet	lt
 800957e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009582:	461d      	movlt	r5, r3
 8009584:	2300      	movge	r3, #0
 8009586:	232d      	movlt	r3, #45	; 0x2d
 8009588:	700b      	strb	r3, [r1, #0]
 800958a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800958c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009590:	4691      	mov	r9, r2
 8009592:	f023 0820 	bic.w	r8, r3, #32
 8009596:	bfbc      	itt	lt
 8009598:	4622      	movlt	r2, r4
 800959a:	4614      	movlt	r4, r2
 800959c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095a0:	d005      	beq.n	80095ae <__cvt+0x42>
 80095a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80095a6:	d100      	bne.n	80095aa <__cvt+0x3e>
 80095a8:	3601      	adds	r6, #1
 80095aa:	2102      	movs	r1, #2
 80095ac:	e000      	b.n	80095b0 <__cvt+0x44>
 80095ae:	2103      	movs	r1, #3
 80095b0:	ab03      	add	r3, sp, #12
 80095b2:	9301      	str	r3, [sp, #4]
 80095b4:	ab02      	add	r3, sp, #8
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	ec45 4b10 	vmov	d0, r4, r5
 80095bc:	4653      	mov	r3, sl
 80095be:	4632      	mov	r2, r6
 80095c0:	f000 fcea 	bl	8009f98 <_dtoa_r>
 80095c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80095c8:	4607      	mov	r7, r0
 80095ca:	d102      	bne.n	80095d2 <__cvt+0x66>
 80095cc:	f019 0f01 	tst.w	r9, #1
 80095d0:	d022      	beq.n	8009618 <__cvt+0xac>
 80095d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80095d6:	eb07 0906 	add.w	r9, r7, r6
 80095da:	d110      	bne.n	80095fe <__cvt+0x92>
 80095dc:	783b      	ldrb	r3, [r7, #0]
 80095de:	2b30      	cmp	r3, #48	; 0x30
 80095e0:	d10a      	bne.n	80095f8 <__cvt+0x8c>
 80095e2:	2200      	movs	r2, #0
 80095e4:	2300      	movs	r3, #0
 80095e6:	4620      	mov	r0, r4
 80095e8:	4629      	mov	r1, r5
 80095ea:	f7f7 fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80095ee:	b918      	cbnz	r0, 80095f8 <__cvt+0x8c>
 80095f0:	f1c6 0601 	rsb	r6, r6, #1
 80095f4:	f8ca 6000 	str.w	r6, [sl]
 80095f8:	f8da 3000 	ldr.w	r3, [sl]
 80095fc:	4499      	add	r9, r3
 80095fe:	2200      	movs	r2, #0
 8009600:	2300      	movs	r3, #0
 8009602:	4620      	mov	r0, r4
 8009604:	4629      	mov	r1, r5
 8009606:	f7f7 fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800960a:	b108      	cbz	r0, 8009610 <__cvt+0xa4>
 800960c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009610:	2230      	movs	r2, #48	; 0x30
 8009612:	9b03      	ldr	r3, [sp, #12]
 8009614:	454b      	cmp	r3, r9
 8009616:	d307      	bcc.n	8009628 <__cvt+0xbc>
 8009618:	9b03      	ldr	r3, [sp, #12]
 800961a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800961c:	1bdb      	subs	r3, r3, r7
 800961e:	4638      	mov	r0, r7
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	b004      	add	sp, #16
 8009624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009628:	1c59      	adds	r1, r3, #1
 800962a:	9103      	str	r1, [sp, #12]
 800962c:	701a      	strb	r2, [r3, #0]
 800962e:	e7f0      	b.n	8009612 <__cvt+0xa6>

08009630 <__exponent>:
 8009630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009632:	4603      	mov	r3, r0
 8009634:	2900      	cmp	r1, #0
 8009636:	bfb8      	it	lt
 8009638:	4249      	neglt	r1, r1
 800963a:	f803 2b02 	strb.w	r2, [r3], #2
 800963e:	bfb4      	ite	lt
 8009640:	222d      	movlt	r2, #45	; 0x2d
 8009642:	222b      	movge	r2, #43	; 0x2b
 8009644:	2909      	cmp	r1, #9
 8009646:	7042      	strb	r2, [r0, #1]
 8009648:	dd2a      	ble.n	80096a0 <__exponent+0x70>
 800964a:	f10d 0407 	add.w	r4, sp, #7
 800964e:	46a4      	mov	ip, r4
 8009650:	270a      	movs	r7, #10
 8009652:	46a6      	mov	lr, r4
 8009654:	460a      	mov	r2, r1
 8009656:	fb91 f6f7 	sdiv	r6, r1, r7
 800965a:	fb07 1516 	mls	r5, r7, r6, r1
 800965e:	3530      	adds	r5, #48	; 0x30
 8009660:	2a63      	cmp	r2, #99	; 0x63
 8009662:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009666:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800966a:	4631      	mov	r1, r6
 800966c:	dcf1      	bgt.n	8009652 <__exponent+0x22>
 800966e:	3130      	adds	r1, #48	; 0x30
 8009670:	f1ae 0502 	sub.w	r5, lr, #2
 8009674:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009678:	1c44      	adds	r4, r0, #1
 800967a:	4629      	mov	r1, r5
 800967c:	4561      	cmp	r1, ip
 800967e:	d30a      	bcc.n	8009696 <__exponent+0x66>
 8009680:	f10d 0209 	add.w	r2, sp, #9
 8009684:	eba2 020e 	sub.w	r2, r2, lr
 8009688:	4565      	cmp	r5, ip
 800968a:	bf88      	it	hi
 800968c:	2200      	movhi	r2, #0
 800968e:	4413      	add	r3, r2
 8009690:	1a18      	subs	r0, r3, r0
 8009692:	b003      	add	sp, #12
 8009694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800969a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800969e:	e7ed      	b.n	800967c <__exponent+0x4c>
 80096a0:	2330      	movs	r3, #48	; 0x30
 80096a2:	3130      	adds	r1, #48	; 0x30
 80096a4:	7083      	strb	r3, [r0, #2]
 80096a6:	70c1      	strb	r1, [r0, #3]
 80096a8:	1d03      	adds	r3, r0, #4
 80096aa:	e7f1      	b.n	8009690 <__exponent+0x60>

080096ac <_printf_float>:
 80096ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	ed2d 8b02 	vpush	{d8}
 80096b4:	b08d      	sub	sp, #52	; 0x34
 80096b6:	460c      	mov	r4, r1
 80096b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80096bc:	4616      	mov	r6, r2
 80096be:	461f      	mov	r7, r3
 80096c0:	4605      	mov	r5, r0
 80096c2:	f001 fa57 	bl	800ab74 <_localeconv_r>
 80096c6:	f8d0 a000 	ldr.w	sl, [r0]
 80096ca:	4650      	mov	r0, sl
 80096cc:	f7f6 fd80 	bl	80001d0 <strlen>
 80096d0:	2300      	movs	r3, #0
 80096d2:	930a      	str	r3, [sp, #40]	; 0x28
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	9305      	str	r3, [sp, #20]
 80096d8:	f8d8 3000 	ldr.w	r3, [r8]
 80096dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80096e0:	3307      	adds	r3, #7
 80096e2:	f023 0307 	bic.w	r3, r3, #7
 80096e6:	f103 0208 	add.w	r2, r3, #8
 80096ea:	f8c8 2000 	str.w	r2, [r8]
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80096f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80096fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096fe:	9307      	str	r3, [sp, #28]
 8009700:	f8cd 8018 	str.w	r8, [sp, #24]
 8009704:	ee08 0a10 	vmov	s16, r0
 8009708:	4b9f      	ldr	r3, [pc, #636]	; (8009988 <_printf_float+0x2dc>)
 800970a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800970e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009712:	f7f7 fa0b 	bl	8000b2c <__aeabi_dcmpun>
 8009716:	bb88      	cbnz	r0, 800977c <_printf_float+0xd0>
 8009718:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800971c:	4b9a      	ldr	r3, [pc, #616]	; (8009988 <_printf_float+0x2dc>)
 800971e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009722:	f7f7 f9e5 	bl	8000af0 <__aeabi_dcmple>
 8009726:	bb48      	cbnz	r0, 800977c <_printf_float+0xd0>
 8009728:	2200      	movs	r2, #0
 800972a:	2300      	movs	r3, #0
 800972c:	4640      	mov	r0, r8
 800972e:	4649      	mov	r1, r9
 8009730:	f7f7 f9d4 	bl	8000adc <__aeabi_dcmplt>
 8009734:	b110      	cbz	r0, 800973c <_printf_float+0x90>
 8009736:	232d      	movs	r3, #45	; 0x2d
 8009738:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800973c:	4b93      	ldr	r3, [pc, #588]	; (800998c <_printf_float+0x2e0>)
 800973e:	4894      	ldr	r0, [pc, #592]	; (8009990 <_printf_float+0x2e4>)
 8009740:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009744:	bf94      	ite	ls
 8009746:	4698      	movls	r8, r3
 8009748:	4680      	movhi	r8, r0
 800974a:	2303      	movs	r3, #3
 800974c:	6123      	str	r3, [r4, #16]
 800974e:	9b05      	ldr	r3, [sp, #20]
 8009750:	f023 0204 	bic.w	r2, r3, #4
 8009754:	6022      	str	r2, [r4, #0]
 8009756:	f04f 0900 	mov.w	r9, #0
 800975a:	9700      	str	r7, [sp, #0]
 800975c:	4633      	mov	r3, r6
 800975e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009760:	4621      	mov	r1, r4
 8009762:	4628      	mov	r0, r5
 8009764:	f000 f9d8 	bl	8009b18 <_printf_common>
 8009768:	3001      	adds	r0, #1
 800976a:	f040 8090 	bne.w	800988e <_printf_float+0x1e2>
 800976e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009772:	b00d      	add	sp, #52	; 0x34
 8009774:	ecbd 8b02 	vpop	{d8}
 8009778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977c:	4642      	mov	r2, r8
 800977e:	464b      	mov	r3, r9
 8009780:	4640      	mov	r0, r8
 8009782:	4649      	mov	r1, r9
 8009784:	f7f7 f9d2 	bl	8000b2c <__aeabi_dcmpun>
 8009788:	b140      	cbz	r0, 800979c <_printf_float+0xf0>
 800978a:	464b      	mov	r3, r9
 800978c:	2b00      	cmp	r3, #0
 800978e:	bfbc      	itt	lt
 8009790:	232d      	movlt	r3, #45	; 0x2d
 8009792:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009796:	487f      	ldr	r0, [pc, #508]	; (8009994 <_printf_float+0x2e8>)
 8009798:	4b7f      	ldr	r3, [pc, #508]	; (8009998 <_printf_float+0x2ec>)
 800979a:	e7d1      	b.n	8009740 <_printf_float+0x94>
 800979c:	6863      	ldr	r3, [r4, #4]
 800979e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80097a2:	9206      	str	r2, [sp, #24]
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	d13f      	bne.n	8009828 <_printf_float+0x17c>
 80097a8:	2306      	movs	r3, #6
 80097aa:	6063      	str	r3, [r4, #4]
 80097ac:	9b05      	ldr	r3, [sp, #20]
 80097ae:	6861      	ldr	r1, [r4, #4]
 80097b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80097b4:	2300      	movs	r3, #0
 80097b6:	9303      	str	r3, [sp, #12]
 80097b8:	ab0a      	add	r3, sp, #40	; 0x28
 80097ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80097be:	ab09      	add	r3, sp, #36	; 0x24
 80097c0:	ec49 8b10 	vmov	d0, r8, r9
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	6022      	str	r2, [r4, #0]
 80097c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80097cc:	4628      	mov	r0, r5
 80097ce:	f7ff fecd 	bl	800956c <__cvt>
 80097d2:	9b06      	ldr	r3, [sp, #24]
 80097d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097d6:	2b47      	cmp	r3, #71	; 0x47
 80097d8:	4680      	mov	r8, r0
 80097da:	d108      	bne.n	80097ee <_printf_float+0x142>
 80097dc:	1cc8      	adds	r0, r1, #3
 80097de:	db02      	blt.n	80097e6 <_printf_float+0x13a>
 80097e0:	6863      	ldr	r3, [r4, #4]
 80097e2:	4299      	cmp	r1, r3
 80097e4:	dd41      	ble.n	800986a <_printf_float+0x1be>
 80097e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80097ea:	fa5f fb8b 	uxtb.w	fp, fp
 80097ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097f2:	d820      	bhi.n	8009836 <_printf_float+0x18a>
 80097f4:	3901      	subs	r1, #1
 80097f6:	465a      	mov	r2, fp
 80097f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80097fc:	9109      	str	r1, [sp, #36]	; 0x24
 80097fe:	f7ff ff17 	bl	8009630 <__exponent>
 8009802:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009804:	1813      	adds	r3, r2, r0
 8009806:	2a01      	cmp	r2, #1
 8009808:	4681      	mov	r9, r0
 800980a:	6123      	str	r3, [r4, #16]
 800980c:	dc02      	bgt.n	8009814 <_printf_float+0x168>
 800980e:	6822      	ldr	r2, [r4, #0]
 8009810:	07d2      	lsls	r2, r2, #31
 8009812:	d501      	bpl.n	8009818 <_printf_float+0x16c>
 8009814:	3301      	adds	r3, #1
 8009816:	6123      	str	r3, [r4, #16]
 8009818:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800981c:	2b00      	cmp	r3, #0
 800981e:	d09c      	beq.n	800975a <_printf_float+0xae>
 8009820:	232d      	movs	r3, #45	; 0x2d
 8009822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009826:	e798      	b.n	800975a <_printf_float+0xae>
 8009828:	9a06      	ldr	r2, [sp, #24]
 800982a:	2a47      	cmp	r2, #71	; 0x47
 800982c:	d1be      	bne.n	80097ac <_printf_float+0x100>
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1bc      	bne.n	80097ac <_printf_float+0x100>
 8009832:	2301      	movs	r3, #1
 8009834:	e7b9      	b.n	80097aa <_printf_float+0xfe>
 8009836:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800983a:	d118      	bne.n	800986e <_printf_float+0x1c2>
 800983c:	2900      	cmp	r1, #0
 800983e:	6863      	ldr	r3, [r4, #4]
 8009840:	dd0b      	ble.n	800985a <_printf_float+0x1ae>
 8009842:	6121      	str	r1, [r4, #16]
 8009844:	b913      	cbnz	r3, 800984c <_printf_float+0x1a0>
 8009846:	6822      	ldr	r2, [r4, #0]
 8009848:	07d0      	lsls	r0, r2, #31
 800984a:	d502      	bpl.n	8009852 <_printf_float+0x1a6>
 800984c:	3301      	adds	r3, #1
 800984e:	440b      	add	r3, r1
 8009850:	6123      	str	r3, [r4, #16]
 8009852:	65a1      	str	r1, [r4, #88]	; 0x58
 8009854:	f04f 0900 	mov.w	r9, #0
 8009858:	e7de      	b.n	8009818 <_printf_float+0x16c>
 800985a:	b913      	cbnz	r3, 8009862 <_printf_float+0x1b6>
 800985c:	6822      	ldr	r2, [r4, #0]
 800985e:	07d2      	lsls	r2, r2, #31
 8009860:	d501      	bpl.n	8009866 <_printf_float+0x1ba>
 8009862:	3302      	adds	r3, #2
 8009864:	e7f4      	b.n	8009850 <_printf_float+0x1a4>
 8009866:	2301      	movs	r3, #1
 8009868:	e7f2      	b.n	8009850 <_printf_float+0x1a4>
 800986a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800986e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009870:	4299      	cmp	r1, r3
 8009872:	db05      	blt.n	8009880 <_printf_float+0x1d4>
 8009874:	6823      	ldr	r3, [r4, #0]
 8009876:	6121      	str	r1, [r4, #16]
 8009878:	07d8      	lsls	r0, r3, #31
 800987a:	d5ea      	bpl.n	8009852 <_printf_float+0x1a6>
 800987c:	1c4b      	adds	r3, r1, #1
 800987e:	e7e7      	b.n	8009850 <_printf_float+0x1a4>
 8009880:	2900      	cmp	r1, #0
 8009882:	bfd4      	ite	le
 8009884:	f1c1 0202 	rsble	r2, r1, #2
 8009888:	2201      	movgt	r2, #1
 800988a:	4413      	add	r3, r2
 800988c:	e7e0      	b.n	8009850 <_printf_float+0x1a4>
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	055a      	lsls	r2, r3, #21
 8009892:	d407      	bmi.n	80098a4 <_printf_float+0x1f8>
 8009894:	6923      	ldr	r3, [r4, #16]
 8009896:	4642      	mov	r2, r8
 8009898:	4631      	mov	r1, r6
 800989a:	4628      	mov	r0, r5
 800989c:	47b8      	blx	r7
 800989e:	3001      	adds	r0, #1
 80098a0:	d12c      	bne.n	80098fc <_printf_float+0x250>
 80098a2:	e764      	b.n	800976e <_printf_float+0xc2>
 80098a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80098a8:	f240 80e0 	bls.w	8009a6c <_printf_float+0x3c0>
 80098ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098b0:	2200      	movs	r2, #0
 80098b2:	2300      	movs	r3, #0
 80098b4:	f7f7 f908 	bl	8000ac8 <__aeabi_dcmpeq>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	d034      	beq.n	8009926 <_printf_float+0x27a>
 80098bc:	4a37      	ldr	r2, [pc, #220]	; (800999c <_printf_float+0x2f0>)
 80098be:	2301      	movs	r3, #1
 80098c0:	4631      	mov	r1, r6
 80098c2:	4628      	mov	r0, r5
 80098c4:	47b8      	blx	r7
 80098c6:	3001      	adds	r0, #1
 80098c8:	f43f af51 	beq.w	800976e <_printf_float+0xc2>
 80098cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098d0:	429a      	cmp	r2, r3
 80098d2:	db02      	blt.n	80098da <_printf_float+0x22e>
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	07d8      	lsls	r0, r3, #31
 80098d8:	d510      	bpl.n	80098fc <_printf_float+0x250>
 80098da:	ee18 3a10 	vmov	r3, s16
 80098de:	4652      	mov	r2, sl
 80098e0:	4631      	mov	r1, r6
 80098e2:	4628      	mov	r0, r5
 80098e4:	47b8      	blx	r7
 80098e6:	3001      	adds	r0, #1
 80098e8:	f43f af41 	beq.w	800976e <_printf_float+0xc2>
 80098ec:	f04f 0800 	mov.w	r8, #0
 80098f0:	f104 091a 	add.w	r9, r4, #26
 80098f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f6:	3b01      	subs	r3, #1
 80098f8:	4543      	cmp	r3, r8
 80098fa:	dc09      	bgt.n	8009910 <_printf_float+0x264>
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	079b      	lsls	r3, r3, #30
 8009900:	f100 8105 	bmi.w	8009b0e <_printf_float+0x462>
 8009904:	68e0      	ldr	r0, [r4, #12]
 8009906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009908:	4298      	cmp	r0, r3
 800990a:	bfb8      	it	lt
 800990c:	4618      	movlt	r0, r3
 800990e:	e730      	b.n	8009772 <_printf_float+0xc6>
 8009910:	2301      	movs	r3, #1
 8009912:	464a      	mov	r2, r9
 8009914:	4631      	mov	r1, r6
 8009916:	4628      	mov	r0, r5
 8009918:	47b8      	blx	r7
 800991a:	3001      	adds	r0, #1
 800991c:	f43f af27 	beq.w	800976e <_printf_float+0xc2>
 8009920:	f108 0801 	add.w	r8, r8, #1
 8009924:	e7e6      	b.n	80098f4 <_printf_float+0x248>
 8009926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009928:	2b00      	cmp	r3, #0
 800992a:	dc39      	bgt.n	80099a0 <_printf_float+0x2f4>
 800992c:	4a1b      	ldr	r2, [pc, #108]	; (800999c <_printf_float+0x2f0>)
 800992e:	2301      	movs	r3, #1
 8009930:	4631      	mov	r1, r6
 8009932:	4628      	mov	r0, r5
 8009934:	47b8      	blx	r7
 8009936:	3001      	adds	r0, #1
 8009938:	f43f af19 	beq.w	800976e <_printf_float+0xc2>
 800993c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009940:	4313      	orrs	r3, r2
 8009942:	d102      	bne.n	800994a <_printf_float+0x29e>
 8009944:	6823      	ldr	r3, [r4, #0]
 8009946:	07d9      	lsls	r1, r3, #31
 8009948:	d5d8      	bpl.n	80098fc <_printf_float+0x250>
 800994a:	ee18 3a10 	vmov	r3, s16
 800994e:	4652      	mov	r2, sl
 8009950:	4631      	mov	r1, r6
 8009952:	4628      	mov	r0, r5
 8009954:	47b8      	blx	r7
 8009956:	3001      	adds	r0, #1
 8009958:	f43f af09 	beq.w	800976e <_printf_float+0xc2>
 800995c:	f04f 0900 	mov.w	r9, #0
 8009960:	f104 0a1a 	add.w	sl, r4, #26
 8009964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009966:	425b      	negs	r3, r3
 8009968:	454b      	cmp	r3, r9
 800996a:	dc01      	bgt.n	8009970 <_printf_float+0x2c4>
 800996c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800996e:	e792      	b.n	8009896 <_printf_float+0x1ea>
 8009970:	2301      	movs	r3, #1
 8009972:	4652      	mov	r2, sl
 8009974:	4631      	mov	r1, r6
 8009976:	4628      	mov	r0, r5
 8009978:	47b8      	blx	r7
 800997a:	3001      	adds	r0, #1
 800997c:	f43f aef7 	beq.w	800976e <_printf_float+0xc2>
 8009980:	f109 0901 	add.w	r9, r9, #1
 8009984:	e7ee      	b.n	8009964 <_printf_float+0x2b8>
 8009986:	bf00      	nop
 8009988:	7fefffff 	.word	0x7fefffff
 800998c:	0800c38c 	.word	0x0800c38c
 8009990:	0800c390 	.word	0x0800c390
 8009994:	0800c398 	.word	0x0800c398
 8009998:	0800c394 	.word	0x0800c394
 800999c:	0800c39c 	.word	0x0800c39c
 80099a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099a4:	429a      	cmp	r2, r3
 80099a6:	bfa8      	it	ge
 80099a8:	461a      	movge	r2, r3
 80099aa:	2a00      	cmp	r2, #0
 80099ac:	4691      	mov	r9, r2
 80099ae:	dc37      	bgt.n	8009a20 <_printf_float+0x374>
 80099b0:	f04f 0b00 	mov.w	fp, #0
 80099b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099b8:	f104 021a 	add.w	r2, r4, #26
 80099bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80099be:	9305      	str	r3, [sp, #20]
 80099c0:	eba3 0309 	sub.w	r3, r3, r9
 80099c4:	455b      	cmp	r3, fp
 80099c6:	dc33      	bgt.n	8009a30 <_printf_float+0x384>
 80099c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099cc:	429a      	cmp	r2, r3
 80099ce:	db3b      	blt.n	8009a48 <_printf_float+0x39c>
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	07da      	lsls	r2, r3, #31
 80099d4:	d438      	bmi.n	8009a48 <_printf_float+0x39c>
 80099d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d8:	9a05      	ldr	r2, [sp, #20]
 80099da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099dc:	1a9a      	subs	r2, r3, r2
 80099de:	eba3 0901 	sub.w	r9, r3, r1
 80099e2:	4591      	cmp	r9, r2
 80099e4:	bfa8      	it	ge
 80099e6:	4691      	movge	r9, r2
 80099e8:	f1b9 0f00 	cmp.w	r9, #0
 80099ec:	dc35      	bgt.n	8009a5a <_printf_float+0x3ae>
 80099ee:	f04f 0800 	mov.w	r8, #0
 80099f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099f6:	f104 0a1a 	add.w	sl, r4, #26
 80099fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099fe:	1a9b      	subs	r3, r3, r2
 8009a00:	eba3 0309 	sub.w	r3, r3, r9
 8009a04:	4543      	cmp	r3, r8
 8009a06:	f77f af79 	ble.w	80098fc <_printf_float+0x250>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	4652      	mov	r2, sl
 8009a0e:	4631      	mov	r1, r6
 8009a10:	4628      	mov	r0, r5
 8009a12:	47b8      	blx	r7
 8009a14:	3001      	adds	r0, #1
 8009a16:	f43f aeaa 	beq.w	800976e <_printf_float+0xc2>
 8009a1a:	f108 0801 	add.w	r8, r8, #1
 8009a1e:	e7ec      	b.n	80099fa <_printf_float+0x34e>
 8009a20:	4613      	mov	r3, r2
 8009a22:	4631      	mov	r1, r6
 8009a24:	4642      	mov	r2, r8
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b8      	blx	r7
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	d1c0      	bne.n	80099b0 <_printf_float+0x304>
 8009a2e:	e69e      	b.n	800976e <_printf_float+0xc2>
 8009a30:	2301      	movs	r3, #1
 8009a32:	4631      	mov	r1, r6
 8009a34:	4628      	mov	r0, r5
 8009a36:	9205      	str	r2, [sp, #20]
 8009a38:	47b8      	blx	r7
 8009a3a:	3001      	adds	r0, #1
 8009a3c:	f43f ae97 	beq.w	800976e <_printf_float+0xc2>
 8009a40:	9a05      	ldr	r2, [sp, #20]
 8009a42:	f10b 0b01 	add.w	fp, fp, #1
 8009a46:	e7b9      	b.n	80099bc <_printf_float+0x310>
 8009a48:	ee18 3a10 	vmov	r3, s16
 8009a4c:	4652      	mov	r2, sl
 8009a4e:	4631      	mov	r1, r6
 8009a50:	4628      	mov	r0, r5
 8009a52:	47b8      	blx	r7
 8009a54:	3001      	adds	r0, #1
 8009a56:	d1be      	bne.n	80099d6 <_printf_float+0x32a>
 8009a58:	e689      	b.n	800976e <_printf_float+0xc2>
 8009a5a:	9a05      	ldr	r2, [sp, #20]
 8009a5c:	464b      	mov	r3, r9
 8009a5e:	4442      	add	r2, r8
 8009a60:	4631      	mov	r1, r6
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b8      	blx	r7
 8009a66:	3001      	adds	r0, #1
 8009a68:	d1c1      	bne.n	80099ee <_printf_float+0x342>
 8009a6a:	e680      	b.n	800976e <_printf_float+0xc2>
 8009a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a6e:	2a01      	cmp	r2, #1
 8009a70:	dc01      	bgt.n	8009a76 <_printf_float+0x3ca>
 8009a72:	07db      	lsls	r3, r3, #31
 8009a74:	d538      	bpl.n	8009ae8 <_printf_float+0x43c>
 8009a76:	2301      	movs	r3, #1
 8009a78:	4642      	mov	r2, r8
 8009a7a:	4631      	mov	r1, r6
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	47b8      	blx	r7
 8009a80:	3001      	adds	r0, #1
 8009a82:	f43f ae74 	beq.w	800976e <_printf_float+0xc2>
 8009a86:	ee18 3a10 	vmov	r3, s16
 8009a8a:	4652      	mov	r2, sl
 8009a8c:	4631      	mov	r1, r6
 8009a8e:	4628      	mov	r0, r5
 8009a90:	47b8      	blx	r7
 8009a92:	3001      	adds	r0, #1
 8009a94:	f43f ae6b 	beq.w	800976e <_printf_float+0xc2>
 8009a98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f7f7 f812 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aa4:	b9d8      	cbnz	r0, 8009ade <_printf_float+0x432>
 8009aa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aa8:	f108 0201 	add.w	r2, r8, #1
 8009aac:	3b01      	subs	r3, #1
 8009aae:	4631      	mov	r1, r6
 8009ab0:	4628      	mov	r0, r5
 8009ab2:	47b8      	blx	r7
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d10e      	bne.n	8009ad6 <_printf_float+0x42a>
 8009ab8:	e659      	b.n	800976e <_printf_float+0xc2>
 8009aba:	2301      	movs	r3, #1
 8009abc:	4652      	mov	r2, sl
 8009abe:	4631      	mov	r1, r6
 8009ac0:	4628      	mov	r0, r5
 8009ac2:	47b8      	blx	r7
 8009ac4:	3001      	adds	r0, #1
 8009ac6:	f43f ae52 	beq.w	800976e <_printf_float+0xc2>
 8009aca:	f108 0801 	add.w	r8, r8, #1
 8009ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	4543      	cmp	r3, r8
 8009ad4:	dcf1      	bgt.n	8009aba <_printf_float+0x40e>
 8009ad6:	464b      	mov	r3, r9
 8009ad8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009adc:	e6dc      	b.n	8009898 <_printf_float+0x1ec>
 8009ade:	f04f 0800 	mov.w	r8, #0
 8009ae2:	f104 0a1a 	add.w	sl, r4, #26
 8009ae6:	e7f2      	b.n	8009ace <_printf_float+0x422>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	4642      	mov	r2, r8
 8009aec:	e7df      	b.n	8009aae <_printf_float+0x402>
 8009aee:	2301      	movs	r3, #1
 8009af0:	464a      	mov	r2, r9
 8009af2:	4631      	mov	r1, r6
 8009af4:	4628      	mov	r0, r5
 8009af6:	47b8      	blx	r7
 8009af8:	3001      	adds	r0, #1
 8009afa:	f43f ae38 	beq.w	800976e <_printf_float+0xc2>
 8009afe:	f108 0801 	add.w	r8, r8, #1
 8009b02:	68e3      	ldr	r3, [r4, #12]
 8009b04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009b06:	1a5b      	subs	r3, r3, r1
 8009b08:	4543      	cmp	r3, r8
 8009b0a:	dcf0      	bgt.n	8009aee <_printf_float+0x442>
 8009b0c:	e6fa      	b.n	8009904 <_printf_float+0x258>
 8009b0e:	f04f 0800 	mov.w	r8, #0
 8009b12:	f104 0919 	add.w	r9, r4, #25
 8009b16:	e7f4      	b.n	8009b02 <_printf_float+0x456>

08009b18 <_printf_common>:
 8009b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b1c:	4616      	mov	r6, r2
 8009b1e:	4699      	mov	r9, r3
 8009b20:	688a      	ldr	r2, [r1, #8]
 8009b22:	690b      	ldr	r3, [r1, #16]
 8009b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	bfb8      	it	lt
 8009b2c:	4613      	movlt	r3, r2
 8009b2e:	6033      	str	r3, [r6, #0]
 8009b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b34:	4607      	mov	r7, r0
 8009b36:	460c      	mov	r4, r1
 8009b38:	b10a      	cbz	r2, 8009b3e <_printf_common+0x26>
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	6033      	str	r3, [r6, #0]
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	0699      	lsls	r1, r3, #26
 8009b42:	bf42      	ittt	mi
 8009b44:	6833      	ldrmi	r3, [r6, #0]
 8009b46:	3302      	addmi	r3, #2
 8009b48:	6033      	strmi	r3, [r6, #0]
 8009b4a:	6825      	ldr	r5, [r4, #0]
 8009b4c:	f015 0506 	ands.w	r5, r5, #6
 8009b50:	d106      	bne.n	8009b60 <_printf_common+0x48>
 8009b52:	f104 0a19 	add.w	sl, r4, #25
 8009b56:	68e3      	ldr	r3, [r4, #12]
 8009b58:	6832      	ldr	r2, [r6, #0]
 8009b5a:	1a9b      	subs	r3, r3, r2
 8009b5c:	42ab      	cmp	r3, r5
 8009b5e:	dc26      	bgt.n	8009bae <_printf_common+0x96>
 8009b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b64:	1e13      	subs	r3, r2, #0
 8009b66:	6822      	ldr	r2, [r4, #0]
 8009b68:	bf18      	it	ne
 8009b6a:	2301      	movne	r3, #1
 8009b6c:	0692      	lsls	r2, r2, #26
 8009b6e:	d42b      	bmi.n	8009bc8 <_printf_common+0xb0>
 8009b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b74:	4649      	mov	r1, r9
 8009b76:	4638      	mov	r0, r7
 8009b78:	47c0      	blx	r8
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	d01e      	beq.n	8009bbc <_printf_common+0xa4>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	68e5      	ldr	r5, [r4, #12]
 8009b82:	6832      	ldr	r2, [r6, #0]
 8009b84:	f003 0306 	and.w	r3, r3, #6
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	bf08      	it	eq
 8009b8c:	1aad      	subeq	r5, r5, r2
 8009b8e:	68a3      	ldr	r3, [r4, #8]
 8009b90:	6922      	ldr	r2, [r4, #16]
 8009b92:	bf0c      	ite	eq
 8009b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b98:	2500      	movne	r5, #0
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	bfc4      	itt	gt
 8009b9e:	1a9b      	subgt	r3, r3, r2
 8009ba0:	18ed      	addgt	r5, r5, r3
 8009ba2:	2600      	movs	r6, #0
 8009ba4:	341a      	adds	r4, #26
 8009ba6:	42b5      	cmp	r5, r6
 8009ba8:	d11a      	bne.n	8009be0 <_printf_common+0xc8>
 8009baa:	2000      	movs	r0, #0
 8009bac:	e008      	b.n	8009bc0 <_printf_common+0xa8>
 8009bae:	2301      	movs	r3, #1
 8009bb0:	4652      	mov	r2, sl
 8009bb2:	4649      	mov	r1, r9
 8009bb4:	4638      	mov	r0, r7
 8009bb6:	47c0      	blx	r8
 8009bb8:	3001      	adds	r0, #1
 8009bba:	d103      	bne.n	8009bc4 <_printf_common+0xac>
 8009bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc4:	3501      	adds	r5, #1
 8009bc6:	e7c6      	b.n	8009b56 <_printf_common+0x3e>
 8009bc8:	18e1      	adds	r1, r4, r3
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	2030      	movs	r0, #48	; 0x30
 8009bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bd2:	4422      	add	r2, r4
 8009bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009bdc:	3302      	adds	r3, #2
 8009bde:	e7c7      	b.n	8009b70 <_printf_common+0x58>
 8009be0:	2301      	movs	r3, #1
 8009be2:	4622      	mov	r2, r4
 8009be4:	4649      	mov	r1, r9
 8009be6:	4638      	mov	r0, r7
 8009be8:	47c0      	blx	r8
 8009bea:	3001      	adds	r0, #1
 8009bec:	d0e6      	beq.n	8009bbc <_printf_common+0xa4>
 8009bee:	3601      	adds	r6, #1
 8009bf0:	e7d9      	b.n	8009ba6 <_printf_common+0x8e>
	...

08009bf4 <_printf_i>:
 8009bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf8:	7e0f      	ldrb	r7, [r1, #24]
 8009bfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bfc:	2f78      	cmp	r7, #120	; 0x78
 8009bfe:	4691      	mov	r9, r2
 8009c00:	4680      	mov	r8, r0
 8009c02:	460c      	mov	r4, r1
 8009c04:	469a      	mov	sl, r3
 8009c06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c0a:	d807      	bhi.n	8009c1c <_printf_i+0x28>
 8009c0c:	2f62      	cmp	r7, #98	; 0x62
 8009c0e:	d80a      	bhi.n	8009c26 <_printf_i+0x32>
 8009c10:	2f00      	cmp	r7, #0
 8009c12:	f000 80d8 	beq.w	8009dc6 <_printf_i+0x1d2>
 8009c16:	2f58      	cmp	r7, #88	; 0x58
 8009c18:	f000 80a3 	beq.w	8009d62 <_printf_i+0x16e>
 8009c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c24:	e03a      	b.n	8009c9c <_printf_i+0xa8>
 8009c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c2a:	2b15      	cmp	r3, #21
 8009c2c:	d8f6      	bhi.n	8009c1c <_printf_i+0x28>
 8009c2e:	a101      	add	r1, pc, #4	; (adr r1, 8009c34 <_printf_i+0x40>)
 8009c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c34:	08009c8d 	.word	0x08009c8d
 8009c38:	08009ca1 	.word	0x08009ca1
 8009c3c:	08009c1d 	.word	0x08009c1d
 8009c40:	08009c1d 	.word	0x08009c1d
 8009c44:	08009c1d 	.word	0x08009c1d
 8009c48:	08009c1d 	.word	0x08009c1d
 8009c4c:	08009ca1 	.word	0x08009ca1
 8009c50:	08009c1d 	.word	0x08009c1d
 8009c54:	08009c1d 	.word	0x08009c1d
 8009c58:	08009c1d 	.word	0x08009c1d
 8009c5c:	08009c1d 	.word	0x08009c1d
 8009c60:	08009dad 	.word	0x08009dad
 8009c64:	08009cd1 	.word	0x08009cd1
 8009c68:	08009d8f 	.word	0x08009d8f
 8009c6c:	08009c1d 	.word	0x08009c1d
 8009c70:	08009c1d 	.word	0x08009c1d
 8009c74:	08009dcf 	.word	0x08009dcf
 8009c78:	08009c1d 	.word	0x08009c1d
 8009c7c:	08009cd1 	.word	0x08009cd1
 8009c80:	08009c1d 	.word	0x08009c1d
 8009c84:	08009c1d 	.word	0x08009c1d
 8009c88:	08009d97 	.word	0x08009d97
 8009c8c:	682b      	ldr	r3, [r5, #0]
 8009c8e:	1d1a      	adds	r2, r3, #4
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	602a      	str	r2, [r5, #0]
 8009c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e0a3      	b.n	8009de8 <_printf_i+0x1f4>
 8009ca0:	6820      	ldr	r0, [r4, #0]
 8009ca2:	6829      	ldr	r1, [r5, #0]
 8009ca4:	0606      	lsls	r6, r0, #24
 8009ca6:	f101 0304 	add.w	r3, r1, #4
 8009caa:	d50a      	bpl.n	8009cc2 <_printf_i+0xce>
 8009cac:	680e      	ldr	r6, [r1, #0]
 8009cae:	602b      	str	r3, [r5, #0]
 8009cb0:	2e00      	cmp	r6, #0
 8009cb2:	da03      	bge.n	8009cbc <_printf_i+0xc8>
 8009cb4:	232d      	movs	r3, #45	; 0x2d
 8009cb6:	4276      	negs	r6, r6
 8009cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cbc:	485e      	ldr	r0, [pc, #376]	; (8009e38 <_printf_i+0x244>)
 8009cbe:	230a      	movs	r3, #10
 8009cc0:	e019      	b.n	8009cf6 <_printf_i+0x102>
 8009cc2:	680e      	ldr	r6, [r1, #0]
 8009cc4:	602b      	str	r3, [r5, #0]
 8009cc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009cca:	bf18      	it	ne
 8009ccc:	b236      	sxthne	r6, r6
 8009cce:	e7ef      	b.n	8009cb0 <_printf_i+0xbc>
 8009cd0:	682b      	ldr	r3, [r5, #0]
 8009cd2:	6820      	ldr	r0, [r4, #0]
 8009cd4:	1d19      	adds	r1, r3, #4
 8009cd6:	6029      	str	r1, [r5, #0]
 8009cd8:	0601      	lsls	r1, r0, #24
 8009cda:	d501      	bpl.n	8009ce0 <_printf_i+0xec>
 8009cdc:	681e      	ldr	r6, [r3, #0]
 8009cde:	e002      	b.n	8009ce6 <_printf_i+0xf2>
 8009ce0:	0646      	lsls	r6, r0, #25
 8009ce2:	d5fb      	bpl.n	8009cdc <_printf_i+0xe8>
 8009ce4:	881e      	ldrh	r6, [r3, #0]
 8009ce6:	4854      	ldr	r0, [pc, #336]	; (8009e38 <_printf_i+0x244>)
 8009ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8009cea:	bf0c      	ite	eq
 8009cec:	2308      	moveq	r3, #8
 8009cee:	230a      	movne	r3, #10
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cf6:	6865      	ldr	r5, [r4, #4]
 8009cf8:	60a5      	str	r5, [r4, #8]
 8009cfa:	2d00      	cmp	r5, #0
 8009cfc:	bfa2      	ittt	ge
 8009cfe:	6821      	ldrge	r1, [r4, #0]
 8009d00:	f021 0104 	bicge.w	r1, r1, #4
 8009d04:	6021      	strge	r1, [r4, #0]
 8009d06:	b90e      	cbnz	r6, 8009d0c <_printf_i+0x118>
 8009d08:	2d00      	cmp	r5, #0
 8009d0a:	d04d      	beq.n	8009da8 <_printf_i+0x1b4>
 8009d0c:	4615      	mov	r5, r2
 8009d0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d12:	fb03 6711 	mls	r7, r3, r1, r6
 8009d16:	5dc7      	ldrb	r7, [r0, r7]
 8009d18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d1c:	4637      	mov	r7, r6
 8009d1e:	42bb      	cmp	r3, r7
 8009d20:	460e      	mov	r6, r1
 8009d22:	d9f4      	bls.n	8009d0e <_printf_i+0x11a>
 8009d24:	2b08      	cmp	r3, #8
 8009d26:	d10b      	bne.n	8009d40 <_printf_i+0x14c>
 8009d28:	6823      	ldr	r3, [r4, #0]
 8009d2a:	07de      	lsls	r6, r3, #31
 8009d2c:	d508      	bpl.n	8009d40 <_printf_i+0x14c>
 8009d2e:	6923      	ldr	r3, [r4, #16]
 8009d30:	6861      	ldr	r1, [r4, #4]
 8009d32:	4299      	cmp	r1, r3
 8009d34:	bfde      	ittt	le
 8009d36:	2330      	movle	r3, #48	; 0x30
 8009d38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009d40:	1b52      	subs	r2, r2, r5
 8009d42:	6122      	str	r2, [r4, #16]
 8009d44:	f8cd a000 	str.w	sl, [sp]
 8009d48:	464b      	mov	r3, r9
 8009d4a:	aa03      	add	r2, sp, #12
 8009d4c:	4621      	mov	r1, r4
 8009d4e:	4640      	mov	r0, r8
 8009d50:	f7ff fee2 	bl	8009b18 <_printf_common>
 8009d54:	3001      	adds	r0, #1
 8009d56:	d14c      	bne.n	8009df2 <_printf_i+0x1fe>
 8009d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d5c:	b004      	add	sp, #16
 8009d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d62:	4835      	ldr	r0, [pc, #212]	; (8009e38 <_printf_i+0x244>)
 8009d64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d68:	6829      	ldr	r1, [r5, #0]
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d70:	6029      	str	r1, [r5, #0]
 8009d72:	061d      	lsls	r5, r3, #24
 8009d74:	d514      	bpl.n	8009da0 <_printf_i+0x1ac>
 8009d76:	07df      	lsls	r7, r3, #31
 8009d78:	bf44      	itt	mi
 8009d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8009d7e:	6023      	strmi	r3, [r4, #0]
 8009d80:	b91e      	cbnz	r6, 8009d8a <_printf_i+0x196>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	f023 0320 	bic.w	r3, r3, #32
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	2310      	movs	r3, #16
 8009d8c:	e7b0      	b.n	8009cf0 <_printf_i+0xfc>
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	f043 0320 	orr.w	r3, r3, #32
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	2378      	movs	r3, #120	; 0x78
 8009d98:	4828      	ldr	r0, [pc, #160]	; (8009e3c <_printf_i+0x248>)
 8009d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d9e:	e7e3      	b.n	8009d68 <_printf_i+0x174>
 8009da0:	0659      	lsls	r1, r3, #25
 8009da2:	bf48      	it	mi
 8009da4:	b2b6      	uxthmi	r6, r6
 8009da6:	e7e6      	b.n	8009d76 <_printf_i+0x182>
 8009da8:	4615      	mov	r5, r2
 8009daa:	e7bb      	b.n	8009d24 <_printf_i+0x130>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	6826      	ldr	r6, [r4, #0]
 8009db0:	6961      	ldr	r1, [r4, #20]
 8009db2:	1d18      	adds	r0, r3, #4
 8009db4:	6028      	str	r0, [r5, #0]
 8009db6:	0635      	lsls	r5, r6, #24
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	d501      	bpl.n	8009dc0 <_printf_i+0x1cc>
 8009dbc:	6019      	str	r1, [r3, #0]
 8009dbe:	e002      	b.n	8009dc6 <_printf_i+0x1d2>
 8009dc0:	0670      	lsls	r0, r6, #25
 8009dc2:	d5fb      	bpl.n	8009dbc <_printf_i+0x1c8>
 8009dc4:	8019      	strh	r1, [r3, #0]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	6123      	str	r3, [r4, #16]
 8009dca:	4615      	mov	r5, r2
 8009dcc:	e7ba      	b.n	8009d44 <_printf_i+0x150>
 8009dce:	682b      	ldr	r3, [r5, #0]
 8009dd0:	1d1a      	adds	r2, r3, #4
 8009dd2:	602a      	str	r2, [r5, #0]
 8009dd4:	681d      	ldr	r5, [r3, #0]
 8009dd6:	6862      	ldr	r2, [r4, #4]
 8009dd8:	2100      	movs	r1, #0
 8009dda:	4628      	mov	r0, r5
 8009ddc:	f7f6 fa00 	bl	80001e0 <memchr>
 8009de0:	b108      	cbz	r0, 8009de6 <_printf_i+0x1f2>
 8009de2:	1b40      	subs	r0, r0, r5
 8009de4:	6060      	str	r0, [r4, #4]
 8009de6:	6863      	ldr	r3, [r4, #4]
 8009de8:	6123      	str	r3, [r4, #16]
 8009dea:	2300      	movs	r3, #0
 8009dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009df0:	e7a8      	b.n	8009d44 <_printf_i+0x150>
 8009df2:	6923      	ldr	r3, [r4, #16]
 8009df4:	462a      	mov	r2, r5
 8009df6:	4649      	mov	r1, r9
 8009df8:	4640      	mov	r0, r8
 8009dfa:	47d0      	blx	sl
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d0ab      	beq.n	8009d58 <_printf_i+0x164>
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	079b      	lsls	r3, r3, #30
 8009e04:	d413      	bmi.n	8009e2e <_printf_i+0x23a>
 8009e06:	68e0      	ldr	r0, [r4, #12]
 8009e08:	9b03      	ldr	r3, [sp, #12]
 8009e0a:	4298      	cmp	r0, r3
 8009e0c:	bfb8      	it	lt
 8009e0e:	4618      	movlt	r0, r3
 8009e10:	e7a4      	b.n	8009d5c <_printf_i+0x168>
 8009e12:	2301      	movs	r3, #1
 8009e14:	4632      	mov	r2, r6
 8009e16:	4649      	mov	r1, r9
 8009e18:	4640      	mov	r0, r8
 8009e1a:	47d0      	blx	sl
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	d09b      	beq.n	8009d58 <_printf_i+0x164>
 8009e20:	3501      	adds	r5, #1
 8009e22:	68e3      	ldr	r3, [r4, #12]
 8009e24:	9903      	ldr	r1, [sp, #12]
 8009e26:	1a5b      	subs	r3, r3, r1
 8009e28:	42ab      	cmp	r3, r5
 8009e2a:	dcf2      	bgt.n	8009e12 <_printf_i+0x21e>
 8009e2c:	e7eb      	b.n	8009e06 <_printf_i+0x212>
 8009e2e:	2500      	movs	r5, #0
 8009e30:	f104 0619 	add.w	r6, r4, #25
 8009e34:	e7f5      	b.n	8009e22 <_printf_i+0x22e>
 8009e36:	bf00      	nop
 8009e38:	0800c39e 	.word	0x0800c39e
 8009e3c:	0800c3af 	.word	0x0800c3af

08009e40 <siprintf>:
 8009e40:	b40e      	push	{r1, r2, r3}
 8009e42:	b500      	push	{lr}
 8009e44:	b09c      	sub	sp, #112	; 0x70
 8009e46:	ab1d      	add	r3, sp, #116	; 0x74
 8009e48:	9002      	str	r0, [sp, #8]
 8009e4a:	9006      	str	r0, [sp, #24]
 8009e4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e50:	4809      	ldr	r0, [pc, #36]	; (8009e78 <siprintf+0x38>)
 8009e52:	9107      	str	r1, [sp, #28]
 8009e54:	9104      	str	r1, [sp, #16]
 8009e56:	4909      	ldr	r1, [pc, #36]	; (8009e7c <siprintf+0x3c>)
 8009e58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e5c:	9105      	str	r1, [sp, #20]
 8009e5e:	6800      	ldr	r0, [r0, #0]
 8009e60:	9301      	str	r3, [sp, #4]
 8009e62:	a902      	add	r1, sp, #8
 8009e64:	f001 fb76 	bl	800b554 <_svfiprintf_r>
 8009e68:	9b02      	ldr	r3, [sp, #8]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	701a      	strb	r2, [r3, #0]
 8009e6e:	b01c      	add	sp, #112	; 0x70
 8009e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e74:	b003      	add	sp, #12
 8009e76:	4770      	bx	lr
 8009e78:	2000000c 	.word	0x2000000c
 8009e7c:	ffff0208 	.word	0xffff0208

08009e80 <quorem>:
 8009e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e84:	6903      	ldr	r3, [r0, #16]
 8009e86:	690c      	ldr	r4, [r1, #16]
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	4607      	mov	r7, r0
 8009e8c:	f2c0 8081 	blt.w	8009f92 <quorem+0x112>
 8009e90:	3c01      	subs	r4, #1
 8009e92:	f101 0814 	add.w	r8, r1, #20
 8009e96:	f100 0514 	add.w	r5, r0, #20
 8009e9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009eb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009eb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8009eb8:	d331      	bcc.n	8009f1e <quorem+0x9e>
 8009eba:	f04f 0e00 	mov.w	lr, #0
 8009ebe:	4640      	mov	r0, r8
 8009ec0:	46ac      	mov	ip, r5
 8009ec2:	46f2      	mov	sl, lr
 8009ec4:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ec8:	b293      	uxth	r3, r2
 8009eca:	fb06 e303 	mla	r3, r6, r3, lr
 8009ece:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	ebaa 0303 	sub.w	r3, sl, r3
 8009ed8:	f8dc a000 	ldr.w	sl, [ip]
 8009edc:	0c12      	lsrs	r2, r2, #16
 8009ede:	fa13 f38a 	uxtah	r3, r3, sl
 8009ee2:	fb06 e202 	mla	r2, r6, r2, lr
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	9b00      	ldr	r3, [sp, #0]
 8009eea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009eee:	b292      	uxth	r2, r2
 8009ef0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ef4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ef8:	f8bd 3000 	ldrh.w	r3, [sp]
 8009efc:	4581      	cmp	r9, r0
 8009efe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f02:	f84c 3b04 	str.w	r3, [ip], #4
 8009f06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f0a:	d2db      	bcs.n	8009ec4 <quorem+0x44>
 8009f0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f10:	b92b      	cbnz	r3, 8009f1e <quorem+0x9e>
 8009f12:	9b01      	ldr	r3, [sp, #4]
 8009f14:	3b04      	subs	r3, #4
 8009f16:	429d      	cmp	r5, r3
 8009f18:	461a      	mov	r2, r3
 8009f1a:	d32e      	bcc.n	8009f7a <quorem+0xfa>
 8009f1c:	613c      	str	r4, [r7, #16]
 8009f1e:	4638      	mov	r0, r7
 8009f20:	f001 f8c4 	bl	800b0ac <__mcmp>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	db24      	blt.n	8009f72 <quorem+0xf2>
 8009f28:	3601      	adds	r6, #1
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	f04f 0c00 	mov.w	ip, #0
 8009f30:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f34:	f8d0 e000 	ldr.w	lr, [r0]
 8009f38:	b293      	uxth	r3, r2
 8009f3a:	ebac 0303 	sub.w	r3, ip, r3
 8009f3e:	0c12      	lsrs	r2, r2, #16
 8009f40:	fa13 f38e 	uxtah	r3, r3, lr
 8009f44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f52:	45c1      	cmp	r9, r8
 8009f54:	f840 3b04 	str.w	r3, [r0], #4
 8009f58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f5c:	d2e8      	bcs.n	8009f30 <quorem+0xb0>
 8009f5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f66:	b922      	cbnz	r2, 8009f72 <quorem+0xf2>
 8009f68:	3b04      	subs	r3, #4
 8009f6a:	429d      	cmp	r5, r3
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	d30a      	bcc.n	8009f86 <quorem+0x106>
 8009f70:	613c      	str	r4, [r7, #16]
 8009f72:	4630      	mov	r0, r6
 8009f74:	b003      	add	sp, #12
 8009f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7a:	6812      	ldr	r2, [r2, #0]
 8009f7c:	3b04      	subs	r3, #4
 8009f7e:	2a00      	cmp	r2, #0
 8009f80:	d1cc      	bne.n	8009f1c <quorem+0x9c>
 8009f82:	3c01      	subs	r4, #1
 8009f84:	e7c7      	b.n	8009f16 <quorem+0x96>
 8009f86:	6812      	ldr	r2, [r2, #0]
 8009f88:	3b04      	subs	r3, #4
 8009f8a:	2a00      	cmp	r2, #0
 8009f8c:	d1f0      	bne.n	8009f70 <quorem+0xf0>
 8009f8e:	3c01      	subs	r4, #1
 8009f90:	e7eb      	b.n	8009f6a <quorem+0xea>
 8009f92:	2000      	movs	r0, #0
 8009f94:	e7ee      	b.n	8009f74 <quorem+0xf4>
	...

08009f98 <_dtoa_r>:
 8009f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f9c:	ed2d 8b04 	vpush	{d8-d9}
 8009fa0:	ec57 6b10 	vmov	r6, r7, d0
 8009fa4:	b093      	sub	sp, #76	; 0x4c
 8009fa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009fa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009fac:	9106      	str	r1, [sp, #24]
 8009fae:	ee10 aa10 	vmov	sl, s0
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8009fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8009fb8:	46bb      	mov	fp, r7
 8009fba:	b975      	cbnz	r5, 8009fda <_dtoa_r+0x42>
 8009fbc:	2010      	movs	r0, #16
 8009fbe:	f000 fddd 	bl	800ab7c <malloc>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	6260      	str	r0, [r4, #36]	; 0x24
 8009fc6:	b920      	cbnz	r0, 8009fd2 <_dtoa_r+0x3a>
 8009fc8:	4ba7      	ldr	r3, [pc, #668]	; (800a268 <_dtoa_r+0x2d0>)
 8009fca:	21ea      	movs	r1, #234	; 0xea
 8009fcc:	48a7      	ldr	r0, [pc, #668]	; (800a26c <_dtoa_r+0x2d4>)
 8009fce:	f001 fbd1 	bl	800b774 <__assert_func>
 8009fd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009fd6:	6005      	str	r5, [r0, #0]
 8009fd8:	60c5      	str	r5, [r0, #12]
 8009fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fdc:	6819      	ldr	r1, [r3, #0]
 8009fde:	b151      	cbz	r1, 8009ff6 <_dtoa_r+0x5e>
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	604a      	str	r2, [r1, #4]
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	4093      	lsls	r3, r2
 8009fe8:	608b      	str	r3, [r1, #8]
 8009fea:	4620      	mov	r0, r4
 8009fec:	f000 fe1c 	bl	800ac28 <_Bfree>
 8009ff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
 8009ff6:	1e3b      	subs	r3, r7, #0
 8009ff8:	bfaa      	itet	ge
 8009ffa:	2300      	movge	r3, #0
 8009ffc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a000:	f8c8 3000 	strge.w	r3, [r8]
 800a004:	4b9a      	ldr	r3, [pc, #616]	; (800a270 <_dtoa_r+0x2d8>)
 800a006:	bfbc      	itt	lt
 800a008:	2201      	movlt	r2, #1
 800a00a:	f8c8 2000 	strlt.w	r2, [r8]
 800a00e:	ea33 030b 	bics.w	r3, r3, fp
 800a012:	d11b      	bne.n	800a04c <_dtoa_r+0xb4>
 800a014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a016:	f242 730f 	movw	r3, #9999	; 0x270f
 800a01a:	6013      	str	r3, [r2, #0]
 800a01c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a020:	4333      	orrs	r3, r6
 800a022:	f000 8592 	beq.w	800ab4a <_dtoa_r+0xbb2>
 800a026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a028:	b963      	cbnz	r3, 800a044 <_dtoa_r+0xac>
 800a02a:	4b92      	ldr	r3, [pc, #584]	; (800a274 <_dtoa_r+0x2dc>)
 800a02c:	e022      	b.n	800a074 <_dtoa_r+0xdc>
 800a02e:	4b92      	ldr	r3, [pc, #584]	; (800a278 <_dtoa_r+0x2e0>)
 800a030:	9301      	str	r3, [sp, #4]
 800a032:	3308      	adds	r3, #8
 800a034:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	9801      	ldr	r0, [sp, #4]
 800a03a:	b013      	add	sp, #76	; 0x4c
 800a03c:	ecbd 8b04 	vpop	{d8-d9}
 800a040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a044:	4b8b      	ldr	r3, [pc, #556]	; (800a274 <_dtoa_r+0x2dc>)
 800a046:	9301      	str	r3, [sp, #4]
 800a048:	3303      	adds	r3, #3
 800a04a:	e7f3      	b.n	800a034 <_dtoa_r+0x9c>
 800a04c:	2200      	movs	r2, #0
 800a04e:	2300      	movs	r3, #0
 800a050:	4650      	mov	r0, sl
 800a052:	4659      	mov	r1, fp
 800a054:	f7f6 fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 800a058:	ec4b ab19 	vmov	d9, sl, fp
 800a05c:	4680      	mov	r8, r0
 800a05e:	b158      	cbz	r0, 800a078 <_dtoa_r+0xe0>
 800a060:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a062:	2301      	movs	r3, #1
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 856b 	beq.w	800ab44 <_dtoa_r+0xbac>
 800a06e:	4883      	ldr	r0, [pc, #524]	; (800a27c <_dtoa_r+0x2e4>)
 800a070:	6018      	str	r0, [r3, #0]
 800a072:	1e43      	subs	r3, r0, #1
 800a074:	9301      	str	r3, [sp, #4]
 800a076:	e7df      	b.n	800a038 <_dtoa_r+0xa0>
 800a078:	ec4b ab10 	vmov	d0, sl, fp
 800a07c:	aa10      	add	r2, sp, #64	; 0x40
 800a07e:	a911      	add	r1, sp, #68	; 0x44
 800a080:	4620      	mov	r0, r4
 800a082:	f001 f8b9 	bl	800b1f8 <__d2b>
 800a086:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a08a:	ee08 0a10 	vmov	s16, r0
 800a08e:	2d00      	cmp	r5, #0
 800a090:	f000 8084 	beq.w	800a19c <_dtoa_r+0x204>
 800a094:	ee19 3a90 	vmov	r3, s19
 800a098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a09c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a0a0:	4656      	mov	r6, sl
 800a0a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a0a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a0aa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a0ae:	4b74      	ldr	r3, [pc, #464]	; (800a280 <_dtoa_r+0x2e8>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	f7f6 f8e7 	bl	8000288 <__aeabi_dsub>
 800a0ba:	a365      	add	r3, pc, #404	; (adr r3, 800a250 <_dtoa_r+0x2b8>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f7f6 fa9a 	bl	80005f8 <__aeabi_dmul>
 800a0c4:	a364      	add	r3, pc, #400	; (adr r3, 800a258 <_dtoa_r+0x2c0>)
 800a0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ca:	f7f6 f8df 	bl	800028c <__adddf3>
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	460f      	mov	r7, r1
 800a0d4:	f7f6 fa26 	bl	8000524 <__aeabi_i2d>
 800a0d8:	a361      	add	r3, pc, #388	; (adr r3, 800a260 <_dtoa_r+0x2c8>)
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	f7f6 fa8b 	bl	80005f8 <__aeabi_dmul>
 800a0e2:	4602      	mov	r2, r0
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	f7f6 f8cf 	bl	800028c <__adddf3>
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	460f      	mov	r7, r1
 800a0f2:	f7f6 fd31 	bl	8000b58 <__aeabi_d2iz>
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	9000      	str	r0, [sp, #0]
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	4639      	mov	r1, r7
 800a100:	f7f6 fcec 	bl	8000adc <__aeabi_dcmplt>
 800a104:	b150      	cbz	r0, 800a11c <_dtoa_r+0x184>
 800a106:	9800      	ldr	r0, [sp, #0]
 800a108:	f7f6 fa0c 	bl	8000524 <__aeabi_i2d>
 800a10c:	4632      	mov	r2, r6
 800a10e:	463b      	mov	r3, r7
 800a110:	f7f6 fcda 	bl	8000ac8 <__aeabi_dcmpeq>
 800a114:	b910      	cbnz	r0, 800a11c <_dtoa_r+0x184>
 800a116:	9b00      	ldr	r3, [sp, #0]
 800a118:	3b01      	subs	r3, #1
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	9b00      	ldr	r3, [sp, #0]
 800a11e:	2b16      	cmp	r3, #22
 800a120:	d85a      	bhi.n	800a1d8 <_dtoa_r+0x240>
 800a122:	9a00      	ldr	r2, [sp, #0]
 800a124:	4b57      	ldr	r3, [pc, #348]	; (800a284 <_dtoa_r+0x2ec>)
 800a126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12e:	ec51 0b19 	vmov	r0, r1, d9
 800a132:	f7f6 fcd3 	bl	8000adc <__aeabi_dcmplt>
 800a136:	2800      	cmp	r0, #0
 800a138:	d050      	beq.n	800a1dc <_dtoa_r+0x244>
 800a13a:	9b00      	ldr	r3, [sp, #0]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	2300      	movs	r3, #0
 800a142:	930b      	str	r3, [sp, #44]	; 0x2c
 800a144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a146:	1b5d      	subs	r5, r3, r5
 800a148:	1e6b      	subs	r3, r5, #1
 800a14a:	9305      	str	r3, [sp, #20]
 800a14c:	bf45      	ittet	mi
 800a14e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a152:	9304      	strmi	r3, [sp, #16]
 800a154:	2300      	movpl	r3, #0
 800a156:	2300      	movmi	r3, #0
 800a158:	bf4c      	ite	mi
 800a15a:	9305      	strmi	r3, [sp, #20]
 800a15c:	9304      	strpl	r3, [sp, #16]
 800a15e:	9b00      	ldr	r3, [sp, #0]
 800a160:	2b00      	cmp	r3, #0
 800a162:	db3d      	blt.n	800a1e0 <_dtoa_r+0x248>
 800a164:	9b05      	ldr	r3, [sp, #20]
 800a166:	9a00      	ldr	r2, [sp, #0]
 800a168:	920a      	str	r2, [sp, #40]	; 0x28
 800a16a:	4413      	add	r3, r2
 800a16c:	9305      	str	r3, [sp, #20]
 800a16e:	2300      	movs	r3, #0
 800a170:	9307      	str	r3, [sp, #28]
 800a172:	9b06      	ldr	r3, [sp, #24]
 800a174:	2b09      	cmp	r3, #9
 800a176:	f200 8089 	bhi.w	800a28c <_dtoa_r+0x2f4>
 800a17a:	2b05      	cmp	r3, #5
 800a17c:	bfc4      	itt	gt
 800a17e:	3b04      	subgt	r3, #4
 800a180:	9306      	strgt	r3, [sp, #24]
 800a182:	9b06      	ldr	r3, [sp, #24]
 800a184:	f1a3 0302 	sub.w	r3, r3, #2
 800a188:	bfcc      	ite	gt
 800a18a:	2500      	movgt	r5, #0
 800a18c:	2501      	movle	r5, #1
 800a18e:	2b03      	cmp	r3, #3
 800a190:	f200 8087 	bhi.w	800a2a2 <_dtoa_r+0x30a>
 800a194:	e8df f003 	tbb	[pc, r3]
 800a198:	59383a2d 	.word	0x59383a2d
 800a19c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a1a0:	441d      	add	r5, r3
 800a1a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	bfc1      	itttt	gt
 800a1aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a1b2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a1b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a1ba:	bfda      	itte	le
 800a1bc:	f1c3 0320 	rsble	r3, r3, #32
 800a1c0:	fa06 f003 	lslle.w	r0, r6, r3
 800a1c4:	4318      	orrgt	r0, r3
 800a1c6:	f7f6 f99d 	bl	8000504 <__aeabi_ui2d>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a1d2:	3d01      	subs	r5, #1
 800a1d4:	930e      	str	r3, [sp, #56]	; 0x38
 800a1d6:	e76a      	b.n	800a0ae <_dtoa_r+0x116>
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e7b2      	b.n	800a142 <_dtoa_r+0x1aa>
 800a1dc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a1de:	e7b1      	b.n	800a144 <_dtoa_r+0x1ac>
 800a1e0:	9b04      	ldr	r3, [sp, #16]
 800a1e2:	9a00      	ldr	r2, [sp, #0]
 800a1e4:	1a9b      	subs	r3, r3, r2
 800a1e6:	9304      	str	r3, [sp, #16]
 800a1e8:	4253      	negs	r3, r2
 800a1ea:	9307      	str	r3, [sp, #28]
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a1f0:	e7bf      	b.n	800a172 <_dtoa_r+0x1da>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	9308      	str	r3, [sp, #32]
 800a1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	dc55      	bgt.n	800a2a8 <_dtoa_r+0x310>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a202:	461a      	mov	r2, r3
 800a204:	9209      	str	r2, [sp, #36]	; 0x24
 800a206:	e00c      	b.n	800a222 <_dtoa_r+0x28a>
 800a208:	2301      	movs	r3, #1
 800a20a:	e7f3      	b.n	800a1f4 <_dtoa_r+0x25c>
 800a20c:	2300      	movs	r3, #0
 800a20e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a210:	9308      	str	r3, [sp, #32]
 800a212:	9b00      	ldr	r3, [sp, #0]
 800a214:	4413      	add	r3, r2
 800a216:	9302      	str	r3, [sp, #8]
 800a218:	3301      	adds	r3, #1
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	9303      	str	r3, [sp, #12]
 800a21e:	bfb8      	it	lt
 800a220:	2301      	movlt	r3, #1
 800a222:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a224:	2200      	movs	r2, #0
 800a226:	6042      	str	r2, [r0, #4]
 800a228:	2204      	movs	r2, #4
 800a22a:	f102 0614 	add.w	r6, r2, #20
 800a22e:	429e      	cmp	r6, r3
 800a230:	6841      	ldr	r1, [r0, #4]
 800a232:	d93d      	bls.n	800a2b0 <_dtoa_r+0x318>
 800a234:	4620      	mov	r0, r4
 800a236:	f000 fcb7 	bl	800aba8 <_Balloc>
 800a23a:	9001      	str	r0, [sp, #4]
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d13b      	bne.n	800a2b8 <_dtoa_r+0x320>
 800a240:	4b11      	ldr	r3, [pc, #68]	; (800a288 <_dtoa_r+0x2f0>)
 800a242:	4602      	mov	r2, r0
 800a244:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a248:	e6c0      	b.n	8009fcc <_dtoa_r+0x34>
 800a24a:	2301      	movs	r3, #1
 800a24c:	e7df      	b.n	800a20e <_dtoa_r+0x276>
 800a24e:	bf00      	nop
 800a250:	636f4361 	.word	0x636f4361
 800a254:	3fd287a7 	.word	0x3fd287a7
 800a258:	8b60c8b3 	.word	0x8b60c8b3
 800a25c:	3fc68a28 	.word	0x3fc68a28
 800a260:	509f79fb 	.word	0x509f79fb
 800a264:	3fd34413 	.word	0x3fd34413
 800a268:	0800c3cd 	.word	0x0800c3cd
 800a26c:	0800c3e4 	.word	0x0800c3e4
 800a270:	7ff00000 	.word	0x7ff00000
 800a274:	0800c3c9 	.word	0x0800c3c9
 800a278:	0800c3c0 	.word	0x0800c3c0
 800a27c:	0800c39d 	.word	0x0800c39d
 800a280:	3ff80000 	.word	0x3ff80000
 800a284:	0800c4d8 	.word	0x0800c4d8
 800a288:	0800c43f 	.word	0x0800c43f
 800a28c:	2501      	movs	r5, #1
 800a28e:	2300      	movs	r3, #0
 800a290:	9306      	str	r3, [sp, #24]
 800a292:	9508      	str	r5, [sp, #32]
 800a294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a298:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a29c:	2200      	movs	r2, #0
 800a29e:	2312      	movs	r3, #18
 800a2a0:	e7b0      	b.n	800a204 <_dtoa_r+0x26c>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	9308      	str	r3, [sp, #32]
 800a2a6:	e7f5      	b.n	800a294 <_dtoa_r+0x2fc>
 800a2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a2ae:	e7b8      	b.n	800a222 <_dtoa_r+0x28a>
 800a2b0:	3101      	adds	r1, #1
 800a2b2:	6041      	str	r1, [r0, #4]
 800a2b4:	0052      	lsls	r2, r2, #1
 800a2b6:	e7b8      	b.n	800a22a <_dtoa_r+0x292>
 800a2b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2ba:	9a01      	ldr	r2, [sp, #4]
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	9b03      	ldr	r3, [sp, #12]
 800a2c0:	2b0e      	cmp	r3, #14
 800a2c2:	f200 809d 	bhi.w	800a400 <_dtoa_r+0x468>
 800a2c6:	2d00      	cmp	r5, #0
 800a2c8:	f000 809a 	beq.w	800a400 <_dtoa_r+0x468>
 800a2cc:	9b00      	ldr	r3, [sp, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	dd32      	ble.n	800a338 <_dtoa_r+0x3a0>
 800a2d2:	4ab7      	ldr	r2, [pc, #732]	; (800a5b0 <_dtoa_r+0x618>)
 800a2d4:	f003 030f 	and.w	r3, r3, #15
 800a2d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2e0:	9b00      	ldr	r3, [sp, #0]
 800a2e2:	05d8      	lsls	r0, r3, #23
 800a2e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a2e8:	d516      	bpl.n	800a318 <_dtoa_r+0x380>
 800a2ea:	4bb2      	ldr	r3, [pc, #712]	; (800a5b4 <_dtoa_r+0x61c>)
 800a2ec:	ec51 0b19 	vmov	r0, r1, d9
 800a2f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2f4:	f7f6 faaa 	bl	800084c <__aeabi_ddiv>
 800a2f8:	f007 070f 	and.w	r7, r7, #15
 800a2fc:	4682      	mov	sl, r0
 800a2fe:	468b      	mov	fp, r1
 800a300:	2503      	movs	r5, #3
 800a302:	4eac      	ldr	r6, [pc, #688]	; (800a5b4 <_dtoa_r+0x61c>)
 800a304:	b957      	cbnz	r7, 800a31c <_dtoa_r+0x384>
 800a306:	4642      	mov	r2, r8
 800a308:	464b      	mov	r3, r9
 800a30a:	4650      	mov	r0, sl
 800a30c:	4659      	mov	r1, fp
 800a30e:	f7f6 fa9d 	bl	800084c <__aeabi_ddiv>
 800a312:	4682      	mov	sl, r0
 800a314:	468b      	mov	fp, r1
 800a316:	e028      	b.n	800a36a <_dtoa_r+0x3d2>
 800a318:	2502      	movs	r5, #2
 800a31a:	e7f2      	b.n	800a302 <_dtoa_r+0x36a>
 800a31c:	07f9      	lsls	r1, r7, #31
 800a31e:	d508      	bpl.n	800a332 <_dtoa_r+0x39a>
 800a320:	4640      	mov	r0, r8
 800a322:	4649      	mov	r1, r9
 800a324:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a328:	f7f6 f966 	bl	80005f8 <__aeabi_dmul>
 800a32c:	3501      	adds	r5, #1
 800a32e:	4680      	mov	r8, r0
 800a330:	4689      	mov	r9, r1
 800a332:	107f      	asrs	r7, r7, #1
 800a334:	3608      	adds	r6, #8
 800a336:	e7e5      	b.n	800a304 <_dtoa_r+0x36c>
 800a338:	f000 809b 	beq.w	800a472 <_dtoa_r+0x4da>
 800a33c:	9b00      	ldr	r3, [sp, #0]
 800a33e:	4f9d      	ldr	r7, [pc, #628]	; (800a5b4 <_dtoa_r+0x61c>)
 800a340:	425e      	negs	r6, r3
 800a342:	4b9b      	ldr	r3, [pc, #620]	; (800a5b0 <_dtoa_r+0x618>)
 800a344:	f006 020f 	and.w	r2, r6, #15
 800a348:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a350:	ec51 0b19 	vmov	r0, r1, d9
 800a354:	f7f6 f950 	bl	80005f8 <__aeabi_dmul>
 800a358:	1136      	asrs	r6, r6, #4
 800a35a:	4682      	mov	sl, r0
 800a35c:	468b      	mov	fp, r1
 800a35e:	2300      	movs	r3, #0
 800a360:	2502      	movs	r5, #2
 800a362:	2e00      	cmp	r6, #0
 800a364:	d17a      	bne.n	800a45c <_dtoa_r+0x4c4>
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1d3      	bne.n	800a312 <_dtoa_r+0x37a>
 800a36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	f000 8082 	beq.w	800a476 <_dtoa_r+0x4de>
 800a372:	4b91      	ldr	r3, [pc, #580]	; (800a5b8 <_dtoa_r+0x620>)
 800a374:	2200      	movs	r2, #0
 800a376:	4650      	mov	r0, sl
 800a378:	4659      	mov	r1, fp
 800a37a:	f7f6 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800a37e:	2800      	cmp	r0, #0
 800a380:	d079      	beq.n	800a476 <_dtoa_r+0x4de>
 800a382:	9b03      	ldr	r3, [sp, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d076      	beq.n	800a476 <_dtoa_r+0x4de>
 800a388:	9b02      	ldr	r3, [sp, #8]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	dd36      	ble.n	800a3fc <_dtoa_r+0x464>
 800a38e:	9b00      	ldr	r3, [sp, #0]
 800a390:	4650      	mov	r0, sl
 800a392:	4659      	mov	r1, fp
 800a394:	1e5f      	subs	r7, r3, #1
 800a396:	2200      	movs	r2, #0
 800a398:	4b88      	ldr	r3, [pc, #544]	; (800a5bc <_dtoa_r+0x624>)
 800a39a:	f7f6 f92d 	bl	80005f8 <__aeabi_dmul>
 800a39e:	9e02      	ldr	r6, [sp, #8]
 800a3a0:	4682      	mov	sl, r0
 800a3a2:	468b      	mov	fp, r1
 800a3a4:	3501      	adds	r5, #1
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f7f6 f8bc 	bl	8000524 <__aeabi_i2d>
 800a3ac:	4652      	mov	r2, sl
 800a3ae:	465b      	mov	r3, fp
 800a3b0:	f7f6 f922 	bl	80005f8 <__aeabi_dmul>
 800a3b4:	4b82      	ldr	r3, [pc, #520]	; (800a5c0 <_dtoa_r+0x628>)
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f7f5 ff68 	bl	800028c <__adddf3>
 800a3bc:	46d0      	mov	r8, sl
 800a3be:	46d9      	mov	r9, fp
 800a3c0:	4682      	mov	sl, r0
 800a3c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a3c6:	2e00      	cmp	r6, #0
 800a3c8:	d158      	bne.n	800a47c <_dtoa_r+0x4e4>
 800a3ca:	4b7e      	ldr	r3, [pc, #504]	; (800a5c4 <_dtoa_r+0x62c>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	f7f5 ff59 	bl	8000288 <__aeabi_dsub>
 800a3d6:	4652      	mov	r2, sl
 800a3d8:	465b      	mov	r3, fp
 800a3da:	4680      	mov	r8, r0
 800a3dc:	4689      	mov	r9, r1
 800a3de:	f7f6 fb9b 	bl	8000b18 <__aeabi_dcmpgt>
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	f040 8295 	bne.w	800a912 <_dtoa_r+0x97a>
 800a3e8:	4652      	mov	r2, sl
 800a3ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a3ee:	4640      	mov	r0, r8
 800a3f0:	4649      	mov	r1, r9
 800a3f2:	f7f6 fb73 	bl	8000adc <__aeabi_dcmplt>
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f040 8289 	bne.w	800a90e <_dtoa_r+0x976>
 800a3fc:	ec5b ab19 	vmov	sl, fp, d9
 800a400:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a402:	2b00      	cmp	r3, #0
 800a404:	f2c0 8148 	blt.w	800a698 <_dtoa_r+0x700>
 800a408:	9a00      	ldr	r2, [sp, #0]
 800a40a:	2a0e      	cmp	r2, #14
 800a40c:	f300 8144 	bgt.w	800a698 <_dtoa_r+0x700>
 800a410:	4b67      	ldr	r3, [pc, #412]	; (800a5b0 <_dtoa_r+0x618>)
 800a412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a416:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f280 80d5 	bge.w	800a5cc <_dtoa_r+0x634>
 800a422:	9b03      	ldr	r3, [sp, #12]
 800a424:	2b00      	cmp	r3, #0
 800a426:	f300 80d1 	bgt.w	800a5cc <_dtoa_r+0x634>
 800a42a:	f040 826f 	bne.w	800a90c <_dtoa_r+0x974>
 800a42e:	4b65      	ldr	r3, [pc, #404]	; (800a5c4 <_dtoa_r+0x62c>)
 800a430:	2200      	movs	r2, #0
 800a432:	4640      	mov	r0, r8
 800a434:	4649      	mov	r1, r9
 800a436:	f7f6 f8df 	bl	80005f8 <__aeabi_dmul>
 800a43a:	4652      	mov	r2, sl
 800a43c:	465b      	mov	r3, fp
 800a43e:	f7f6 fb61 	bl	8000b04 <__aeabi_dcmpge>
 800a442:	9e03      	ldr	r6, [sp, #12]
 800a444:	4637      	mov	r7, r6
 800a446:	2800      	cmp	r0, #0
 800a448:	f040 8245 	bne.w	800a8d6 <_dtoa_r+0x93e>
 800a44c:	9d01      	ldr	r5, [sp, #4]
 800a44e:	2331      	movs	r3, #49	; 0x31
 800a450:	f805 3b01 	strb.w	r3, [r5], #1
 800a454:	9b00      	ldr	r3, [sp, #0]
 800a456:	3301      	adds	r3, #1
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	e240      	b.n	800a8de <_dtoa_r+0x946>
 800a45c:	07f2      	lsls	r2, r6, #31
 800a45e:	d505      	bpl.n	800a46c <_dtoa_r+0x4d4>
 800a460:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a464:	f7f6 f8c8 	bl	80005f8 <__aeabi_dmul>
 800a468:	3501      	adds	r5, #1
 800a46a:	2301      	movs	r3, #1
 800a46c:	1076      	asrs	r6, r6, #1
 800a46e:	3708      	adds	r7, #8
 800a470:	e777      	b.n	800a362 <_dtoa_r+0x3ca>
 800a472:	2502      	movs	r5, #2
 800a474:	e779      	b.n	800a36a <_dtoa_r+0x3d2>
 800a476:	9f00      	ldr	r7, [sp, #0]
 800a478:	9e03      	ldr	r6, [sp, #12]
 800a47a:	e794      	b.n	800a3a6 <_dtoa_r+0x40e>
 800a47c:	9901      	ldr	r1, [sp, #4]
 800a47e:	4b4c      	ldr	r3, [pc, #304]	; (800a5b0 <_dtoa_r+0x618>)
 800a480:	4431      	add	r1, r6
 800a482:	910d      	str	r1, [sp, #52]	; 0x34
 800a484:	9908      	ldr	r1, [sp, #32]
 800a486:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a48a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a48e:	2900      	cmp	r1, #0
 800a490:	d043      	beq.n	800a51a <_dtoa_r+0x582>
 800a492:	494d      	ldr	r1, [pc, #308]	; (800a5c8 <_dtoa_r+0x630>)
 800a494:	2000      	movs	r0, #0
 800a496:	f7f6 f9d9 	bl	800084c <__aeabi_ddiv>
 800a49a:	4652      	mov	r2, sl
 800a49c:	465b      	mov	r3, fp
 800a49e:	f7f5 fef3 	bl	8000288 <__aeabi_dsub>
 800a4a2:	9d01      	ldr	r5, [sp, #4]
 800a4a4:	4682      	mov	sl, r0
 800a4a6:	468b      	mov	fp, r1
 800a4a8:	4649      	mov	r1, r9
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	f7f6 fb54 	bl	8000b58 <__aeabi_d2iz>
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	f7f6 f837 	bl	8000524 <__aeabi_i2d>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4640      	mov	r0, r8
 800a4bc:	4649      	mov	r1, r9
 800a4be:	f7f5 fee3 	bl	8000288 <__aeabi_dsub>
 800a4c2:	3630      	adds	r6, #48	; 0x30
 800a4c4:	f805 6b01 	strb.w	r6, [r5], #1
 800a4c8:	4652      	mov	r2, sl
 800a4ca:	465b      	mov	r3, fp
 800a4cc:	4680      	mov	r8, r0
 800a4ce:	4689      	mov	r9, r1
 800a4d0:	f7f6 fb04 	bl	8000adc <__aeabi_dcmplt>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	d163      	bne.n	800a5a0 <_dtoa_r+0x608>
 800a4d8:	4642      	mov	r2, r8
 800a4da:	464b      	mov	r3, r9
 800a4dc:	4936      	ldr	r1, [pc, #216]	; (800a5b8 <_dtoa_r+0x620>)
 800a4de:	2000      	movs	r0, #0
 800a4e0:	f7f5 fed2 	bl	8000288 <__aeabi_dsub>
 800a4e4:	4652      	mov	r2, sl
 800a4e6:	465b      	mov	r3, fp
 800a4e8:	f7f6 faf8 	bl	8000adc <__aeabi_dcmplt>
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	f040 80b5 	bne.w	800a65c <_dtoa_r+0x6c4>
 800a4f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4f4:	429d      	cmp	r5, r3
 800a4f6:	d081      	beq.n	800a3fc <_dtoa_r+0x464>
 800a4f8:	4b30      	ldr	r3, [pc, #192]	; (800a5bc <_dtoa_r+0x624>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	4650      	mov	r0, sl
 800a4fe:	4659      	mov	r1, fp
 800a500:	f7f6 f87a 	bl	80005f8 <__aeabi_dmul>
 800a504:	4b2d      	ldr	r3, [pc, #180]	; (800a5bc <_dtoa_r+0x624>)
 800a506:	4682      	mov	sl, r0
 800a508:	468b      	mov	fp, r1
 800a50a:	4640      	mov	r0, r8
 800a50c:	4649      	mov	r1, r9
 800a50e:	2200      	movs	r2, #0
 800a510:	f7f6 f872 	bl	80005f8 <__aeabi_dmul>
 800a514:	4680      	mov	r8, r0
 800a516:	4689      	mov	r9, r1
 800a518:	e7c6      	b.n	800a4a8 <_dtoa_r+0x510>
 800a51a:	4650      	mov	r0, sl
 800a51c:	4659      	mov	r1, fp
 800a51e:	f7f6 f86b 	bl	80005f8 <__aeabi_dmul>
 800a522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a524:	9d01      	ldr	r5, [sp, #4]
 800a526:	930f      	str	r3, [sp, #60]	; 0x3c
 800a528:	4682      	mov	sl, r0
 800a52a:	468b      	mov	fp, r1
 800a52c:	4649      	mov	r1, r9
 800a52e:	4640      	mov	r0, r8
 800a530:	f7f6 fb12 	bl	8000b58 <__aeabi_d2iz>
 800a534:	4606      	mov	r6, r0
 800a536:	f7f5 fff5 	bl	8000524 <__aeabi_i2d>
 800a53a:	3630      	adds	r6, #48	; 0x30
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	4640      	mov	r0, r8
 800a542:	4649      	mov	r1, r9
 800a544:	f7f5 fea0 	bl	8000288 <__aeabi_dsub>
 800a548:	f805 6b01 	strb.w	r6, [r5], #1
 800a54c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a54e:	429d      	cmp	r5, r3
 800a550:	4680      	mov	r8, r0
 800a552:	4689      	mov	r9, r1
 800a554:	f04f 0200 	mov.w	r2, #0
 800a558:	d124      	bne.n	800a5a4 <_dtoa_r+0x60c>
 800a55a:	4b1b      	ldr	r3, [pc, #108]	; (800a5c8 <_dtoa_r+0x630>)
 800a55c:	4650      	mov	r0, sl
 800a55e:	4659      	mov	r1, fp
 800a560:	f7f5 fe94 	bl	800028c <__adddf3>
 800a564:	4602      	mov	r2, r0
 800a566:	460b      	mov	r3, r1
 800a568:	4640      	mov	r0, r8
 800a56a:	4649      	mov	r1, r9
 800a56c:	f7f6 fad4 	bl	8000b18 <__aeabi_dcmpgt>
 800a570:	2800      	cmp	r0, #0
 800a572:	d173      	bne.n	800a65c <_dtoa_r+0x6c4>
 800a574:	4652      	mov	r2, sl
 800a576:	465b      	mov	r3, fp
 800a578:	4913      	ldr	r1, [pc, #76]	; (800a5c8 <_dtoa_r+0x630>)
 800a57a:	2000      	movs	r0, #0
 800a57c:	f7f5 fe84 	bl	8000288 <__aeabi_dsub>
 800a580:	4602      	mov	r2, r0
 800a582:	460b      	mov	r3, r1
 800a584:	4640      	mov	r0, r8
 800a586:	4649      	mov	r1, r9
 800a588:	f7f6 faa8 	bl	8000adc <__aeabi_dcmplt>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	f43f af35 	beq.w	800a3fc <_dtoa_r+0x464>
 800a592:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a594:	1e6b      	subs	r3, r5, #1
 800a596:	930f      	str	r3, [sp, #60]	; 0x3c
 800a598:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a59c:	2b30      	cmp	r3, #48	; 0x30
 800a59e:	d0f8      	beq.n	800a592 <_dtoa_r+0x5fa>
 800a5a0:	9700      	str	r7, [sp, #0]
 800a5a2:	e049      	b.n	800a638 <_dtoa_r+0x6a0>
 800a5a4:	4b05      	ldr	r3, [pc, #20]	; (800a5bc <_dtoa_r+0x624>)
 800a5a6:	f7f6 f827 	bl	80005f8 <__aeabi_dmul>
 800a5aa:	4680      	mov	r8, r0
 800a5ac:	4689      	mov	r9, r1
 800a5ae:	e7bd      	b.n	800a52c <_dtoa_r+0x594>
 800a5b0:	0800c4d8 	.word	0x0800c4d8
 800a5b4:	0800c4b0 	.word	0x0800c4b0
 800a5b8:	3ff00000 	.word	0x3ff00000
 800a5bc:	40240000 	.word	0x40240000
 800a5c0:	401c0000 	.word	0x401c0000
 800a5c4:	40140000 	.word	0x40140000
 800a5c8:	3fe00000 	.word	0x3fe00000
 800a5cc:	9d01      	ldr	r5, [sp, #4]
 800a5ce:	4656      	mov	r6, sl
 800a5d0:	465f      	mov	r7, fp
 800a5d2:	4642      	mov	r2, r8
 800a5d4:	464b      	mov	r3, r9
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	4639      	mov	r1, r7
 800a5da:	f7f6 f937 	bl	800084c <__aeabi_ddiv>
 800a5de:	f7f6 fabb 	bl	8000b58 <__aeabi_d2iz>
 800a5e2:	4682      	mov	sl, r0
 800a5e4:	f7f5 ff9e 	bl	8000524 <__aeabi_i2d>
 800a5e8:	4642      	mov	r2, r8
 800a5ea:	464b      	mov	r3, r9
 800a5ec:	f7f6 f804 	bl	80005f8 <__aeabi_dmul>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	4639      	mov	r1, r7
 800a5f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a5fc:	f7f5 fe44 	bl	8000288 <__aeabi_dsub>
 800a600:	f805 6b01 	strb.w	r6, [r5], #1
 800a604:	9e01      	ldr	r6, [sp, #4]
 800a606:	9f03      	ldr	r7, [sp, #12]
 800a608:	1bae      	subs	r6, r5, r6
 800a60a:	42b7      	cmp	r7, r6
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	d135      	bne.n	800a67e <_dtoa_r+0x6e6>
 800a612:	f7f5 fe3b 	bl	800028c <__adddf3>
 800a616:	4642      	mov	r2, r8
 800a618:	464b      	mov	r3, r9
 800a61a:	4606      	mov	r6, r0
 800a61c:	460f      	mov	r7, r1
 800a61e:	f7f6 fa7b 	bl	8000b18 <__aeabi_dcmpgt>
 800a622:	b9d0      	cbnz	r0, 800a65a <_dtoa_r+0x6c2>
 800a624:	4642      	mov	r2, r8
 800a626:	464b      	mov	r3, r9
 800a628:	4630      	mov	r0, r6
 800a62a:	4639      	mov	r1, r7
 800a62c:	f7f6 fa4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a630:	b110      	cbz	r0, 800a638 <_dtoa_r+0x6a0>
 800a632:	f01a 0f01 	tst.w	sl, #1
 800a636:	d110      	bne.n	800a65a <_dtoa_r+0x6c2>
 800a638:	4620      	mov	r0, r4
 800a63a:	ee18 1a10 	vmov	r1, s16
 800a63e:	f000 faf3 	bl	800ac28 <_Bfree>
 800a642:	2300      	movs	r3, #0
 800a644:	9800      	ldr	r0, [sp, #0]
 800a646:	702b      	strb	r3, [r5, #0]
 800a648:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a64a:	3001      	adds	r0, #1
 800a64c:	6018      	str	r0, [r3, #0]
 800a64e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a650:	2b00      	cmp	r3, #0
 800a652:	f43f acf1 	beq.w	800a038 <_dtoa_r+0xa0>
 800a656:	601d      	str	r5, [r3, #0]
 800a658:	e4ee      	b.n	800a038 <_dtoa_r+0xa0>
 800a65a:	9f00      	ldr	r7, [sp, #0]
 800a65c:	462b      	mov	r3, r5
 800a65e:	461d      	mov	r5, r3
 800a660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a664:	2a39      	cmp	r2, #57	; 0x39
 800a666:	d106      	bne.n	800a676 <_dtoa_r+0x6de>
 800a668:	9a01      	ldr	r2, [sp, #4]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d1f7      	bne.n	800a65e <_dtoa_r+0x6c6>
 800a66e:	9901      	ldr	r1, [sp, #4]
 800a670:	2230      	movs	r2, #48	; 0x30
 800a672:	3701      	adds	r7, #1
 800a674:	700a      	strb	r2, [r1, #0]
 800a676:	781a      	ldrb	r2, [r3, #0]
 800a678:	3201      	adds	r2, #1
 800a67a:	701a      	strb	r2, [r3, #0]
 800a67c:	e790      	b.n	800a5a0 <_dtoa_r+0x608>
 800a67e:	4ba6      	ldr	r3, [pc, #664]	; (800a918 <_dtoa_r+0x980>)
 800a680:	2200      	movs	r2, #0
 800a682:	f7f5 ffb9 	bl	80005f8 <__aeabi_dmul>
 800a686:	2200      	movs	r2, #0
 800a688:	2300      	movs	r3, #0
 800a68a:	4606      	mov	r6, r0
 800a68c:	460f      	mov	r7, r1
 800a68e:	f7f6 fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a692:	2800      	cmp	r0, #0
 800a694:	d09d      	beq.n	800a5d2 <_dtoa_r+0x63a>
 800a696:	e7cf      	b.n	800a638 <_dtoa_r+0x6a0>
 800a698:	9a08      	ldr	r2, [sp, #32]
 800a69a:	2a00      	cmp	r2, #0
 800a69c:	f000 80d7 	beq.w	800a84e <_dtoa_r+0x8b6>
 800a6a0:	9a06      	ldr	r2, [sp, #24]
 800a6a2:	2a01      	cmp	r2, #1
 800a6a4:	f300 80ba 	bgt.w	800a81c <_dtoa_r+0x884>
 800a6a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	f000 80b2 	beq.w	800a814 <_dtoa_r+0x87c>
 800a6b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6b4:	9e07      	ldr	r6, [sp, #28]
 800a6b6:	9d04      	ldr	r5, [sp, #16]
 800a6b8:	9a04      	ldr	r2, [sp, #16]
 800a6ba:	441a      	add	r2, r3
 800a6bc:	9204      	str	r2, [sp, #16]
 800a6be:	9a05      	ldr	r2, [sp, #20]
 800a6c0:	2101      	movs	r1, #1
 800a6c2:	441a      	add	r2, r3
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	9205      	str	r2, [sp, #20]
 800a6c8:	f000 fb66 	bl	800ad98 <__i2b>
 800a6cc:	4607      	mov	r7, r0
 800a6ce:	2d00      	cmp	r5, #0
 800a6d0:	dd0c      	ble.n	800a6ec <_dtoa_r+0x754>
 800a6d2:	9b05      	ldr	r3, [sp, #20]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dd09      	ble.n	800a6ec <_dtoa_r+0x754>
 800a6d8:	42ab      	cmp	r3, r5
 800a6da:	9a04      	ldr	r2, [sp, #16]
 800a6dc:	bfa8      	it	ge
 800a6de:	462b      	movge	r3, r5
 800a6e0:	1ad2      	subs	r2, r2, r3
 800a6e2:	9204      	str	r2, [sp, #16]
 800a6e4:	9a05      	ldr	r2, [sp, #20]
 800a6e6:	1aed      	subs	r5, r5, r3
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	9305      	str	r3, [sp, #20]
 800a6ec:	9b07      	ldr	r3, [sp, #28]
 800a6ee:	b31b      	cbz	r3, 800a738 <_dtoa_r+0x7a0>
 800a6f0:	9b08      	ldr	r3, [sp, #32]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	f000 80af 	beq.w	800a856 <_dtoa_r+0x8be>
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	dd13      	ble.n	800a724 <_dtoa_r+0x78c>
 800a6fc:	4639      	mov	r1, r7
 800a6fe:	4632      	mov	r2, r6
 800a700:	4620      	mov	r0, r4
 800a702:	f000 fc09 	bl	800af18 <__pow5mult>
 800a706:	ee18 2a10 	vmov	r2, s16
 800a70a:	4601      	mov	r1, r0
 800a70c:	4607      	mov	r7, r0
 800a70e:	4620      	mov	r0, r4
 800a710:	f000 fb58 	bl	800adc4 <__multiply>
 800a714:	ee18 1a10 	vmov	r1, s16
 800a718:	4680      	mov	r8, r0
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 fa84 	bl	800ac28 <_Bfree>
 800a720:	ee08 8a10 	vmov	s16, r8
 800a724:	9b07      	ldr	r3, [sp, #28]
 800a726:	1b9a      	subs	r2, r3, r6
 800a728:	d006      	beq.n	800a738 <_dtoa_r+0x7a0>
 800a72a:	ee18 1a10 	vmov	r1, s16
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 fbf2 	bl	800af18 <__pow5mult>
 800a734:	ee08 0a10 	vmov	s16, r0
 800a738:	2101      	movs	r1, #1
 800a73a:	4620      	mov	r0, r4
 800a73c:	f000 fb2c 	bl	800ad98 <__i2b>
 800a740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a742:	2b00      	cmp	r3, #0
 800a744:	4606      	mov	r6, r0
 800a746:	f340 8088 	ble.w	800a85a <_dtoa_r+0x8c2>
 800a74a:	461a      	mov	r2, r3
 800a74c:	4601      	mov	r1, r0
 800a74e:	4620      	mov	r0, r4
 800a750:	f000 fbe2 	bl	800af18 <__pow5mult>
 800a754:	9b06      	ldr	r3, [sp, #24]
 800a756:	2b01      	cmp	r3, #1
 800a758:	4606      	mov	r6, r0
 800a75a:	f340 8081 	ble.w	800a860 <_dtoa_r+0x8c8>
 800a75e:	f04f 0800 	mov.w	r8, #0
 800a762:	6933      	ldr	r3, [r6, #16]
 800a764:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a768:	6918      	ldr	r0, [r3, #16]
 800a76a:	f000 fac5 	bl	800acf8 <__hi0bits>
 800a76e:	f1c0 0020 	rsb	r0, r0, #32
 800a772:	9b05      	ldr	r3, [sp, #20]
 800a774:	4418      	add	r0, r3
 800a776:	f010 001f 	ands.w	r0, r0, #31
 800a77a:	f000 8092 	beq.w	800a8a2 <_dtoa_r+0x90a>
 800a77e:	f1c0 0320 	rsb	r3, r0, #32
 800a782:	2b04      	cmp	r3, #4
 800a784:	f340 808a 	ble.w	800a89c <_dtoa_r+0x904>
 800a788:	f1c0 001c 	rsb	r0, r0, #28
 800a78c:	9b04      	ldr	r3, [sp, #16]
 800a78e:	4403      	add	r3, r0
 800a790:	9304      	str	r3, [sp, #16]
 800a792:	9b05      	ldr	r3, [sp, #20]
 800a794:	4403      	add	r3, r0
 800a796:	4405      	add	r5, r0
 800a798:	9305      	str	r3, [sp, #20]
 800a79a:	9b04      	ldr	r3, [sp, #16]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	dd07      	ble.n	800a7b0 <_dtoa_r+0x818>
 800a7a0:	ee18 1a10 	vmov	r1, s16
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f000 fc10 	bl	800afcc <__lshift>
 800a7ac:	ee08 0a10 	vmov	s16, r0
 800a7b0:	9b05      	ldr	r3, [sp, #20]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	dd05      	ble.n	800a7c2 <_dtoa_r+0x82a>
 800a7b6:	4631      	mov	r1, r6
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f000 fc06 	bl	800afcc <__lshift>
 800a7c0:	4606      	mov	r6, r0
 800a7c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d06e      	beq.n	800a8a6 <_dtoa_r+0x90e>
 800a7c8:	ee18 0a10 	vmov	r0, s16
 800a7cc:	4631      	mov	r1, r6
 800a7ce:	f000 fc6d 	bl	800b0ac <__mcmp>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	da67      	bge.n	800a8a6 <_dtoa_r+0x90e>
 800a7d6:	9b00      	ldr	r3, [sp, #0]
 800a7d8:	3b01      	subs	r3, #1
 800a7da:	ee18 1a10 	vmov	r1, s16
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	220a      	movs	r2, #10
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f000 fa41 	bl	800ac6c <__multadd>
 800a7ea:	9b08      	ldr	r3, [sp, #32]
 800a7ec:	ee08 0a10 	vmov	s16, r0
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 81b1 	beq.w	800ab58 <_dtoa_r+0xbc0>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	4639      	mov	r1, r7
 800a7fa:	220a      	movs	r2, #10
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	f000 fa35 	bl	800ac6c <__multadd>
 800a802:	9b02      	ldr	r3, [sp, #8]
 800a804:	2b00      	cmp	r3, #0
 800a806:	4607      	mov	r7, r0
 800a808:	f300 808e 	bgt.w	800a928 <_dtoa_r+0x990>
 800a80c:	9b06      	ldr	r3, [sp, #24]
 800a80e:	2b02      	cmp	r3, #2
 800a810:	dc51      	bgt.n	800a8b6 <_dtoa_r+0x91e>
 800a812:	e089      	b.n	800a928 <_dtoa_r+0x990>
 800a814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a81a:	e74b      	b.n	800a6b4 <_dtoa_r+0x71c>
 800a81c:	9b03      	ldr	r3, [sp, #12]
 800a81e:	1e5e      	subs	r6, r3, #1
 800a820:	9b07      	ldr	r3, [sp, #28]
 800a822:	42b3      	cmp	r3, r6
 800a824:	bfbf      	itttt	lt
 800a826:	9b07      	ldrlt	r3, [sp, #28]
 800a828:	9607      	strlt	r6, [sp, #28]
 800a82a:	1af2      	sublt	r2, r6, r3
 800a82c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a82e:	bfb6      	itet	lt
 800a830:	189b      	addlt	r3, r3, r2
 800a832:	1b9e      	subge	r6, r3, r6
 800a834:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a836:	9b03      	ldr	r3, [sp, #12]
 800a838:	bfb8      	it	lt
 800a83a:	2600      	movlt	r6, #0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	bfb7      	itett	lt
 800a840:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a844:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a848:	1a9d      	sublt	r5, r3, r2
 800a84a:	2300      	movlt	r3, #0
 800a84c:	e734      	b.n	800a6b8 <_dtoa_r+0x720>
 800a84e:	9e07      	ldr	r6, [sp, #28]
 800a850:	9d04      	ldr	r5, [sp, #16]
 800a852:	9f08      	ldr	r7, [sp, #32]
 800a854:	e73b      	b.n	800a6ce <_dtoa_r+0x736>
 800a856:	9a07      	ldr	r2, [sp, #28]
 800a858:	e767      	b.n	800a72a <_dtoa_r+0x792>
 800a85a:	9b06      	ldr	r3, [sp, #24]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	dc18      	bgt.n	800a892 <_dtoa_r+0x8fa>
 800a860:	f1ba 0f00 	cmp.w	sl, #0
 800a864:	d115      	bne.n	800a892 <_dtoa_r+0x8fa>
 800a866:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a86a:	b993      	cbnz	r3, 800a892 <_dtoa_r+0x8fa>
 800a86c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a870:	0d1b      	lsrs	r3, r3, #20
 800a872:	051b      	lsls	r3, r3, #20
 800a874:	b183      	cbz	r3, 800a898 <_dtoa_r+0x900>
 800a876:	9b04      	ldr	r3, [sp, #16]
 800a878:	3301      	adds	r3, #1
 800a87a:	9304      	str	r3, [sp, #16]
 800a87c:	9b05      	ldr	r3, [sp, #20]
 800a87e:	3301      	adds	r3, #1
 800a880:	9305      	str	r3, [sp, #20]
 800a882:	f04f 0801 	mov.w	r8, #1
 800a886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f47f af6a 	bne.w	800a762 <_dtoa_r+0x7ca>
 800a88e:	2001      	movs	r0, #1
 800a890:	e76f      	b.n	800a772 <_dtoa_r+0x7da>
 800a892:	f04f 0800 	mov.w	r8, #0
 800a896:	e7f6      	b.n	800a886 <_dtoa_r+0x8ee>
 800a898:	4698      	mov	r8, r3
 800a89a:	e7f4      	b.n	800a886 <_dtoa_r+0x8ee>
 800a89c:	f43f af7d 	beq.w	800a79a <_dtoa_r+0x802>
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	301c      	adds	r0, #28
 800a8a4:	e772      	b.n	800a78c <_dtoa_r+0x7f4>
 800a8a6:	9b03      	ldr	r3, [sp, #12]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	dc37      	bgt.n	800a91c <_dtoa_r+0x984>
 800a8ac:	9b06      	ldr	r3, [sp, #24]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	dd34      	ble.n	800a91c <_dtoa_r+0x984>
 800a8b2:	9b03      	ldr	r3, [sp, #12]
 800a8b4:	9302      	str	r3, [sp, #8]
 800a8b6:	9b02      	ldr	r3, [sp, #8]
 800a8b8:	b96b      	cbnz	r3, 800a8d6 <_dtoa_r+0x93e>
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	2205      	movs	r2, #5
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 f9d4 	bl	800ac6c <__multadd>
 800a8c4:	4601      	mov	r1, r0
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	ee18 0a10 	vmov	r0, s16
 800a8cc:	f000 fbee 	bl	800b0ac <__mcmp>
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	f73f adbb 	bgt.w	800a44c <_dtoa_r+0x4b4>
 800a8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d8:	9d01      	ldr	r5, [sp, #4]
 800a8da:	43db      	mvns	r3, r3
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	f04f 0800 	mov.w	r8, #0
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 f99f 	bl	800ac28 <_Bfree>
 800a8ea:	2f00      	cmp	r7, #0
 800a8ec:	f43f aea4 	beq.w	800a638 <_dtoa_r+0x6a0>
 800a8f0:	f1b8 0f00 	cmp.w	r8, #0
 800a8f4:	d005      	beq.n	800a902 <_dtoa_r+0x96a>
 800a8f6:	45b8      	cmp	r8, r7
 800a8f8:	d003      	beq.n	800a902 <_dtoa_r+0x96a>
 800a8fa:	4641      	mov	r1, r8
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f000 f993 	bl	800ac28 <_Bfree>
 800a902:	4639      	mov	r1, r7
 800a904:	4620      	mov	r0, r4
 800a906:	f000 f98f 	bl	800ac28 <_Bfree>
 800a90a:	e695      	b.n	800a638 <_dtoa_r+0x6a0>
 800a90c:	2600      	movs	r6, #0
 800a90e:	4637      	mov	r7, r6
 800a910:	e7e1      	b.n	800a8d6 <_dtoa_r+0x93e>
 800a912:	9700      	str	r7, [sp, #0]
 800a914:	4637      	mov	r7, r6
 800a916:	e599      	b.n	800a44c <_dtoa_r+0x4b4>
 800a918:	40240000 	.word	0x40240000
 800a91c:	9b08      	ldr	r3, [sp, #32]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f000 80ca 	beq.w	800aab8 <_dtoa_r+0xb20>
 800a924:	9b03      	ldr	r3, [sp, #12]
 800a926:	9302      	str	r3, [sp, #8]
 800a928:	2d00      	cmp	r5, #0
 800a92a:	dd05      	ble.n	800a938 <_dtoa_r+0x9a0>
 800a92c:	4639      	mov	r1, r7
 800a92e:	462a      	mov	r2, r5
 800a930:	4620      	mov	r0, r4
 800a932:	f000 fb4b 	bl	800afcc <__lshift>
 800a936:	4607      	mov	r7, r0
 800a938:	f1b8 0f00 	cmp.w	r8, #0
 800a93c:	d05b      	beq.n	800a9f6 <_dtoa_r+0xa5e>
 800a93e:	6879      	ldr	r1, [r7, #4]
 800a940:	4620      	mov	r0, r4
 800a942:	f000 f931 	bl	800aba8 <_Balloc>
 800a946:	4605      	mov	r5, r0
 800a948:	b928      	cbnz	r0, 800a956 <_dtoa_r+0x9be>
 800a94a:	4b87      	ldr	r3, [pc, #540]	; (800ab68 <_dtoa_r+0xbd0>)
 800a94c:	4602      	mov	r2, r0
 800a94e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a952:	f7ff bb3b 	b.w	8009fcc <_dtoa_r+0x34>
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	3202      	adds	r2, #2
 800a95a:	0092      	lsls	r2, r2, #2
 800a95c:	f107 010c 	add.w	r1, r7, #12
 800a960:	300c      	adds	r0, #12
 800a962:	f000 f913 	bl	800ab8c <memcpy>
 800a966:	2201      	movs	r2, #1
 800a968:	4629      	mov	r1, r5
 800a96a:	4620      	mov	r0, r4
 800a96c:	f000 fb2e 	bl	800afcc <__lshift>
 800a970:	9b01      	ldr	r3, [sp, #4]
 800a972:	f103 0901 	add.w	r9, r3, #1
 800a976:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a97a:	4413      	add	r3, r2
 800a97c:	9305      	str	r3, [sp, #20]
 800a97e:	f00a 0301 	and.w	r3, sl, #1
 800a982:	46b8      	mov	r8, r7
 800a984:	9304      	str	r3, [sp, #16]
 800a986:	4607      	mov	r7, r0
 800a988:	4631      	mov	r1, r6
 800a98a:	ee18 0a10 	vmov	r0, s16
 800a98e:	f7ff fa77 	bl	8009e80 <quorem>
 800a992:	4641      	mov	r1, r8
 800a994:	9002      	str	r0, [sp, #8]
 800a996:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a99a:	ee18 0a10 	vmov	r0, s16
 800a99e:	f000 fb85 	bl	800b0ac <__mcmp>
 800a9a2:	463a      	mov	r2, r7
 800a9a4:	9003      	str	r0, [sp, #12]
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f000 fb9b 	bl	800b0e4 <__mdiff>
 800a9ae:	68c2      	ldr	r2, [r0, #12]
 800a9b0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	bb02      	cbnz	r2, 800a9fa <_dtoa_r+0xa62>
 800a9b8:	4601      	mov	r1, r0
 800a9ba:	ee18 0a10 	vmov	r0, s16
 800a9be:	f000 fb75 	bl	800b0ac <__mcmp>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	9207      	str	r2, [sp, #28]
 800a9ca:	f000 f92d 	bl	800ac28 <_Bfree>
 800a9ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a9d2:	ea43 0102 	orr.w	r1, r3, r2
 800a9d6:	9b04      	ldr	r3, [sp, #16]
 800a9d8:	430b      	orrs	r3, r1
 800a9da:	464d      	mov	r5, r9
 800a9dc:	d10f      	bne.n	800a9fe <_dtoa_r+0xa66>
 800a9de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9e2:	d02a      	beq.n	800aa3a <_dtoa_r+0xaa2>
 800a9e4:	9b03      	ldr	r3, [sp, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	dd02      	ble.n	800a9f0 <_dtoa_r+0xa58>
 800a9ea:	9b02      	ldr	r3, [sp, #8]
 800a9ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a9f0:	f88b a000 	strb.w	sl, [fp]
 800a9f4:	e775      	b.n	800a8e2 <_dtoa_r+0x94a>
 800a9f6:	4638      	mov	r0, r7
 800a9f8:	e7ba      	b.n	800a970 <_dtoa_r+0x9d8>
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	e7e2      	b.n	800a9c4 <_dtoa_r+0xa2c>
 800a9fe:	9b03      	ldr	r3, [sp, #12]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	db04      	blt.n	800aa0e <_dtoa_r+0xa76>
 800aa04:	9906      	ldr	r1, [sp, #24]
 800aa06:	430b      	orrs	r3, r1
 800aa08:	9904      	ldr	r1, [sp, #16]
 800aa0a:	430b      	orrs	r3, r1
 800aa0c:	d122      	bne.n	800aa54 <_dtoa_r+0xabc>
 800aa0e:	2a00      	cmp	r2, #0
 800aa10:	ddee      	ble.n	800a9f0 <_dtoa_r+0xa58>
 800aa12:	ee18 1a10 	vmov	r1, s16
 800aa16:	2201      	movs	r2, #1
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f000 fad7 	bl	800afcc <__lshift>
 800aa1e:	4631      	mov	r1, r6
 800aa20:	ee08 0a10 	vmov	s16, r0
 800aa24:	f000 fb42 	bl	800b0ac <__mcmp>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	dc03      	bgt.n	800aa34 <_dtoa_r+0xa9c>
 800aa2c:	d1e0      	bne.n	800a9f0 <_dtoa_r+0xa58>
 800aa2e:	f01a 0f01 	tst.w	sl, #1
 800aa32:	d0dd      	beq.n	800a9f0 <_dtoa_r+0xa58>
 800aa34:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa38:	d1d7      	bne.n	800a9ea <_dtoa_r+0xa52>
 800aa3a:	2339      	movs	r3, #57	; 0x39
 800aa3c:	f88b 3000 	strb.w	r3, [fp]
 800aa40:	462b      	mov	r3, r5
 800aa42:	461d      	mov	r5, r3
 800aa44:	3b01      	subs	r3, #1
 800aa46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa4a:	2a39      	cmp	r2, #57	; 0x39
 800aa4c:	d071      	beq.n	800ab32 <_dtoa_r+0xb9a>
 800aa4e:	3201      	adds	r2, #1
 800aa50:	701a      	strb	r2, [r3, #0]
 800aa52:	e746      	b.n	800a8e2 <_dtoa_r+0x94a>
 800aa54:	2a00      	cmp	r2, #0
 800aa56:	dd07      	ble.n	800aa68 <_dtoa_r+0xad0>
 800aa58:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa5c:	d0ed      	beq.n	800aa3a <_dtoa_r+0xaa2>
 800aa5e:	f10a 0301 	add.w	r3, sl, #1
 800aa62:	f88b 3000 	strb.w	r3, [fp]
 800aa66:	e73c      	b.n	800a8e2 <_dtoa_r+0x94a>
 800aa68:	9b05      	ldr	r3, [sp, #20]
 800aa6a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aa6e:	4599      	cmp	r9, r3
 800aa70:	d047      	beq.n	800ab02 <_dtoa_r+0xb6a>
 800aa72:	ee18 1a10 	vmov	r1, s16
 800aa76:	2300      	movs	r3, #0
 800aa78:	220a      	movs	r2, #10
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 f8f6 	bl	800ac6c <__multadd>
 800aa80:	45b8      	cmp	r8, r7
 800aa82:	ee08 0a10 	vmov	s16, r0
 800aa86:	f04f 0300 	mov.w	r3, #0
 800aa8a:	f04f 020a 	mov.w	r2, #10
 800aa8e:	4641      	mov	r1, r8
 800aa90:	4620      	mov	r0, r4
 800aa92:	d106      	bne.n	800aaa2 <_dtoa_r+0xb0a>
 800aa94:	f000 f8ea 	bl	800ac6c <__multadd>
 800aa98:	4680      	mov	r8, r0
 800aa9a:	4607      	mov	r7, r0
 800aa9c:	f109 0901 	add.w	r9, r9, #1
 800aaa0:	e772      	b.n	800a988 <_dtoa_r+0x9f0>
 800aaa2:	f000 f8e3 	bl	800ac6c <__multadd>
 800aaa6:	4639      	mov	r1, r7
 800aaa8:	4680      	mov	r8, r0
 800aaaa:	2300      	movs	r3, #0
 800aaac:	220a      	movs	r2, #10
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 f8dc 	bl	800ac6c <__multadd>
 800aab4:	4607      	mov	r7, r0
 800aab6:	e7f1      	b.n	800aa9c <_dtoa_r+0xb04>
 800aab8:	9b03      	ldr	r3, [sp, #12]
 800aaba:	9302      	str	r3, [sp, #8]
 800aabc:	9d01      	ldr	r5, [sp, #4]
 800aabe:	ee18 0a10 	vmov	r0, s16
 800aac2:	4631      	mov	r1, r6
 800aac4:	f7ff f9dc 	bl	8009e80 <quorem>
 800aac8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aacc:	9b01      	ldr	r3, [sp, #4]
 800aace:	f805 ab01 	strb.w	sl, [r5], #1
 800aad2:	1aea      	subs	r2, r5, r3
 800aad4:	9b02      	ldr	r3, [sp, #8]
 800aad6:	4293      	cmp	r3, r2
 800aad8:	dd09      	ble.n	800aaee <_dtoa_r+0xb56>
 800aada:	ee18 1a10 	vmov	r1, s16
 800aade:	2300      	movs	r3, #0
 800aae0:	220a      	movs	r2, #10
 800aae2:	4620      	mov	r0, r4
 800aae4:	f000 f8c2 	bl	800ac6c <__multadd>
 800aae8:	ee08 0a10 	vmov	s16, r0
 800aaec:	e7e7      	b.n	800aabe <_dtoa_r+0xb26>
 800aaee:	9b02      	ldr	r3, [sp, #8]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	bfc8      	it	gt
 800aaf4:	461d      	movgt	r5, r3
 800aaf6:	9b01      	ldr	r3, [sp, #4]
 800aaf8:	bfd8      	it	le
 800aafa:	2501      	movle	r5, #1
 800aafc:	441d      	add	r5, r3
 800aafe:	f04f 0800 	mov.w	r8, #0
 800ab02:	ee18 1a10 	vmov	r1, s16
 800ab06:	2201      	movs	r2, #1
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f000 fa5f 	bl	800afcc <__lshift>
 800ab0e:	4631      	mov	r1, r6
 800ab10:	ee08 0a10 	vmov	s16, r0
 800ab14:	f000 faca 	bl	800b0ac <__mcmp>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	dc91      	bgt.n	800aa40 <_dtoa_r+0xaa8>
 800ab1c:	d102      	bne.n	800ab24 <_dtoa_r+0xb8c>
 800ab1e:	f01a 0f01 	tst.w	sl, #1
 800ab22:	d18d      	bne.n	800aa40 <_dtoa_r+0xaa8>
 800ab24:	462b      	mov	r3, r5
 800ab26:	461d      	mov	r5, r3
 800ab28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab2c:	2a30      	cmp	r2, #48	; 0x30
 800ab2e:	d0fa      	beq.n	800ab26 <_dtoa_r+0xb8e>
 800ab30:	e6d7      	b.n	800a8e2 <_dtoa_r+0x94a>
 800ab32:	9a01      	ldr	r2, [sp, #4]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d184      	bne.n	800aa42 <_dtoa_r+0xaaa>
 800ab38:	9b00      	ldr	r3, [sp, #0]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	2331      	movs	r3, #49	; 0x31
 800ab40:	7013      	strb	r3, [r2, #0]
 800ab42:	e6ce      	b.n	800a8e2 <_dtoa_r+0x94a>
 800ab44:	4b09      	ldr	r3, [pc, #36]	; (800ab6c <_dtoa_r+0xbd4>)
 800ab46:	f7ff ba95 	b.w	800a074 <_dtoa_r+0xdc>
 800ab4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f47f aa6e 	bne.w	800a02e <_dtoa_r+0x96>
 800ab52:	4b07      	ldr	r3, [pc, #28]	; (800ab70 <_dtoa_r+0xbd8>)
 800ab54:	f7ff ba8e 	b.w	800a074 <_dtoa_r+0xdc>
 800ab58:	9b02      	ldr	r3, [sp, #8]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	dcae      	bgt.n	800aabc <_dtoa_r+0xb24>
 800ab5e:	9b06      	ldr	r3, [sp, #24]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	f73f aea8 	bgt.w	800a8b6 <_dtoa_r+0x91e>
 800ab66:	e7a9      	b.n	800aabc <_dtoa_r+0xb24>
 800ab68:	0800c43f 	.word	0x0800c43f
 800ab6c:	0800c39c 	.word	0x0800c39c
 800ab70:	0800c3c0 	.word	0x0800c3c0

0800ab74 <_localeconv_r>:
 800ab74:	4800      	ldr	r0, [pc, #0]	; (800ab78 <_localeconv_r+0x4>)
 800ab76:	4770      	bx	lr
 800ab78:	20000160 	.word	0x20000160

0800ab7c <malloc>:
 800ab7c:	4b02      	ldr	r3, [pc, #8]	; (800ab88 <malloc+0xc>)
 800ab7e:	4601      	mov	r1, r0
 800ab80:	6818      	ldr	r0, [r3, #0]
 800ab82:	f000 bc17 	b.w	800b3b4 <_malloc_r>
 800ab86:	bf00      	nop
 800ab88:	2000000c 	.word	0x2000000c

0800ab8c <memcpy>:
 800ab8c:	440a      	add	r2, r1
 800ab8e:	4291      	cmp	r1, r2
 800ab90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ab94:	d100      	bne.n	800ab98 <memcpy+0xc>
 800ab96:	4770      	bx	lr
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aba2:	4291      	cmp	r1, r2
 800aba4:	d1f9      	bne.n	800ab9a <memcpy+0xe>
 800aba6:	bd10      	pop	{r4, pc}

0800aba8 <_Balloc>:
 800aba8:	b570      	push	{r4, r5, r6, lr}
 800abaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800abac:	4604      	mov	r4, r0
 800abae:	460d      	mov	r5, r1
 800abb0:	b976      	cbnz	r6, 800abd0 <_Balloc+0x28>
 800abb2:	2010      	movs	r0, #16
 800abb4:	f7ff ffe2 	bl	800ab7c <malloc>
 800abb8:	4602      	mov	r2, r0
 800abba:	6260      	str	r0, [r4, #36]	; 0x24
 800abbc:	b920      	cbnz	r0, 800abc8 <_Balloc+0x20>
 800abbe:	4b18      	ldr	r3, [pc, #96]	; (800ac20 <_Balloc+0x78>)
 800abc0:	4818      	ldr	r0, [pc, #96]	; (800ac24 <_Balloc+0x7c>)
 800abc2:	2166      	movs	r1, #102	; 0x66
 800abc4:	f000 fdd6 	bl	800b774 <__assert_func>
 800abc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abcc:	6006      	str	r6, [r0, #0]
 800abce:	60c6      	str	r6, [r0, #12]
 800abd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800abd2:	68f3      	ldr	r3, [r6, #12]
 800abd4:	b183      	cbz	r3, 800abf8 <_Balloc+0x50>
 800abd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abd8:	68db      	ldr	r3, [r3, #12]
 800abda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abde:	b9b8      	cbnz	r0, 800ac10 <_Balloc+0x68>
 800abe0:	2101      	movs	r1, #1
 800abe2:	fa01 f605 	lsl.w	r6, r1, r5
 800abe6:	1d72      	adds	r2, r6, #5
 800abe8:	0092      	lsls	r2, r2, #2
 800abea:	4620      	mov	r0, r4
 800abec:	f000 fb60 	bl	800b2b0 <_calloc_r>
 800abf0:	b160      	cbz	r0, 800ac0c <_Balloc+0x64>
 800abf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abf6:	e00e      	b.n	800ac16 <_Balloc+0x6e>
 800abf8:	2221      	movs	r2, #33	; 0x21
 800abfa:	2104      	movs	r1, #4
 800abfc:	4620      	mov	r0, r4
 800abfe:	f000 fb57 	bl	800b2b0 <_calloc_r>
 800ac02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac04:	60f0      	str	r0, [r6, #12]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e4      	bne.n	800abd6 <_Balloc+0x2e>
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	bd70      	pop	{r4, r5, r6, pc}
 800ac10:	6802      	ldr	r2, [r0, #0]
 800ac12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ac16:	2300      	movs	r3, #0
 800ac18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac1c:	e7f7      	b.n	800ac0e <_Balloc+0x66>
 800ac1e:	bf00      	nop
 800ac20:	0800c3cd 	.word	0x0800c3cd
 800ac24:	0800c450 	.word	0x0800c450

0800ac28 <_Bfree>:
 800ac28:	b570      	push	{r4, r5, r6, lr}
 800ac2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	460c      	mov	r4, r1
 800ac30:	b976      	cbnz	r6, 800ac50 <_Bfree+0x28>
 800ac32:	2010      	movs	r0, #16
 800ac34:	f7ff ffa2 	bl	800ab7c <malloc>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	6268      	str	r0, [r5, #36]	; 0x24
 800ac3c:	b920      	cbnz	r0, 800ac48 <_Bfree+0x20>
 800ac3e:	4b09      	ldr	r3, [pc, #36]	; (800ac64 <_Bfree+0x3c>)
 800ac40:	4809      	ldr	r0, [pc, #36]	; (800ac68 <_Bfree+0x40>)
 800ac42:	218a      	movs	r1, #138	; 0x8a
 800ac44:	f000 fd96 	bl	800b774 <__assert_func>
 800ac48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac4c:	6006      	str	r6, [r0, #0]
 800ac4e:	60c6      	str	r6, [r0, #12]
 800ac50:	b13c      	cbz	r4, 800ac62 <_Bfree+0x3a>
 800ac52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac54:	6862      	ldr	r2, [r4, #4]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac5c:	6021      	str	r1, [r4, #0]
 800ac5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	0800c3cd 	.word	0x0800c3cd
 800ac68:	0800c450 	.word	0x0800c450

0800ac6c <__multadd>:
 800ac6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac70:	690d      	ldr	r5, [r1, #16]
 800ac72:	4607      	mov	r7, r0
 800ac74:	460c      	mov	r4, r1
 800ac76:	461e      	mov	r6, r3
 800ac78:	f101 0c14 	add.w	ip, r1, #20
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	f8dc 3000 	ldr.w	r3, [ip]
 800ac82:	b299      	uxth	r1, r3
 800ac84:	fb02 6101 	mla	r1, r2, r1, r6
 800ac88:	0c1e      	lsrs	r6, r3, #16
 800ac8a:	0c0b      	lsrs	r3, r1, #16
 800ac8c:	fb02 3306 	mla	r3, r2, r6, r3
 800ac90:	b289      	uxth	r1, r1
 800ac92:	3001      	adds	r0, #1
 800ac94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac98:	4285      	cmp	r5, r0
 800ac9a:	f84c 1b04 	str.w	r1, [ip], #4
 800ac9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aca2:	dcec      	bgt.n	800ac7e <__multadd+0x12>
 800aca4:	b30e      	cbz	r6, 800acea <__multadd+0x7e>
 800aca6:	68a3      	ldr	r3, [r4, #8]
 800aca8:	42ab      	cmp	r3, r5
 800acaa:	dc19      	bgt.n	800ace0 <__multadd+0x74>
 800acac:	6861      	ldr	r1, [r4, #4]
 800acae:	4638      	mov	r0, r7
 800acb0:	3101      	adds	r1, #1
 800acb2:	f7ff ff79 	bl	800aba8 <_Balloc>
 800acb6:	4680      	mov	r8, r0
 800acb8:	b928      	cbnz	r0, 800acc6 <__multadd+0x5a>
 800acba:	4602      	mov	r2, r0
 800acbc:	4b0c      	ldr	r3, [pc, #48]	; (800acf0 <__multadd+0x84>)
 800acbe:	480d      	ldr	r0, [pc, #52]	; (800acf4 <__multadd+0x88>)
 800acc0:	21b5      	movs	r1, #181	; 0xb5
 800acc2:	f000 fd57 	bl	800b774 <__assert_func>
 800acc6:	6922      	ldr	r2, [r4, #16]
 800acc8:	3202      	adds	r2, #2
 800acca:	f104 010c 	add.w	r1, r4, #12
 800acce:	0092      	lsls	r2, r2, #2
 800acd0:	300c      	adds	r0, #12
 800acd2:	f7ff ff5b 	bl	800ab8c <memcpy>
 800acd6:	4621      	mov	r1, r4
 800acd8:	4638      	mov	r0, r7
 800acda:	f7ff ffa5 	bl	800ac28 <_Bfree>
 800acde:	4644      	mov	r4, r8
 800ace0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ace4:	3501      	adds	r5, #1
 800ace6:	615e      	str	r6, [r3, #20]
 800ace8:	6125      	str	r5, [r4, #16]
 800acea:	4620      	mov	r0, r4
 800acec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acf0:	0800c43f 	.word	0x0800c43f
 800acf4:	0800c450 	.word	0x0800c450

0800acf8 <__hi0bits>:
 800acf8:	0c03      	lsrs	r3, r0, #16
 800acfa:	041b      	lsls	r3, r3, #16
 800acfc:	b9d3      	cbnz	r3, 800ad34 <__hi0bits+0x3c>
 800acfe:	0400      	lsls	r0, r0, #16
 800ad00:	2310      	movs	r3, #16
 800ad02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad06:	bf04      	itt	eq
 800ad08:	0200      	lsleq	r0, r0, #8
 800ad0a:	3308      	addeq	r3, #8
 800ad0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad10:	bf04      	itt	eq
 800ad12:	0100      	lsleq	r0, r0, #4
 800ad14:	3304      	addeq	r3, #4
 800ad16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad1a:	bf04      	itt	eq
 800ad1c:	0080      	lsleq	r0, r0, #2
 800ad1e:	3302      	addeq	r3, #2
 800ad20:	2800      	cmp	r0, #0
 800ad22:	db05      	blt.n	800ad30 <__hi0bits+0x38>
 800ad24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad28:	f103 0301 	add.w	r3, r3, #1
 800ad2c:	bf08      	it	eq
 800ad2e:	2320      	moveq	r3, #32
 800ad30:	4618      	mov	r0, r3
 800ad32:	4770      	bx	lr
 800ad34:	2300      	movs	r3, #0
 800ad36:	e7e4      	b.n	800ad02 <__hi0bits+0xa>

0800ad38 <__lo0bits>:
 800ad38:	6803      	ldr	r3, [r0, #0]
 800ad3a:	f013 0207 	ands.w	r2, r3, #7
 800ad3e:	4601      	mov	r1, r0
 800ad40:	d00b      	beq.n	800ad5a <__lo0bits+0x22>
 800ad42:	07da      	lsls	r2, r3, #31
 800ad44:	d423      	bmi.n	800ad8e <__lo0bits+0x56>
 800ad46:	0798      	lsls	r0, r3, #30
 800ad48:	bf49      	itett	mi
 800ad4a:	085b      	lsrmi	r3, r3, #1
 800ad4c:	089b      	lsrpl	r3, r3, #2
 800ad4e:	2001      	movmi	r0, #1
 800ad50:	600b      	strmi	r3, [r1, #0]
 800ad52:	bf5c      	itt	pl
 800ad54:	600b      	strpl	r3, [r1, #0]
 800ad56:	2002      	movpl	r0, #2
 800ad58:	4770      	bx	lr
 800ad5a:	b298      	uxth	r0, r3
 800ad5c:	b9a8      	cbnz	r0, 800ad8a <__lo0bits+0x52>
 800ad5e:	0c1b      	lsrs	r3, r3, #16
 800ad60:	2010      	movs	r0, #16
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	b90a      	cbnz	r2, 800ad6a <__lo0bits+0x32>
 800ad66:	3008      	adds	r0, #8
 800ad68:	0a1b      	lsrs	r3, r3, #8
 800ad6a:	071a      	lsls	r2, r3, #28
 800ad6c:	bf04      	itt	eq
 800ad6e:	091b      	lsreq	r3, r3, #4
 800ad70:	3004      	addeq	r0, #4
 800ad72:	079a      	lsls	r2, r3, #30
 800ad74:	bf04      	itt	eq
 800ad76:	089b      	lsreq	r3, r3, #2
 800ad78:	3002      	addeq	r0, #2
 800ad7a:	07da      	lsls	r2, r3, #31
 800ad7c:	d403      	bmi.n	800ad86 <__lo0bits+0x4e>
 800ad7e:	085b      	lsrs	r3, r3, #1
 800ad80:	f100 0001 	add.w	r0, r0, #1
 800ad84:	d005      	beq.n	800ad92 <__lo0bits+0x5a>
 800ad86:	600b      	str	r3, [r1, #0]
 800ad88:	4770      	bx	lr
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	e7e9      	b.n	800ad62 <__lo0bits+0x2a>
 800ad8e:	2000      	movs	r0, #0
 800ad90:	4770      	bx	lr
 800ad92:	2020      	movs	r0, #32
 800ad94:	4770      	bx	lr
	...

0800ad98 <__i2b>:
 800ad98:	b510      	push	{r4, lr}
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	2101      	movs	r1, #1
 800ad9e:	f7ff ff03 	bl	800aba8 <_Balloc>
 800ada2:	4602      	mov	r2, r0
 800ada4:	b928      	cbnz	r0, 800adb2 <__i2b+0x1a>
 800ada6:	4b05      	ldr	r3, [pc, #20]	; (800adbc <__i2b+0x24>)
 800ada8:	4805      	ldr	r0, [pc, #20]	; (800adc0 <__i2b+0x28>)
 800adaa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800adae:	f000 fce1 	bl	800b774 <__assert_func>
 800adb2:	2301      	movs	r3, #1
 800adb4:	6144      	str	r4, [r0, #20]
 800adb6:	6103      	str	r3, [r0, #16]
 800adb8:	bd10      	pop	{r4, pc}
 800adba:	bf00      	nop
 800adbc:	0800c43f 	.word	0x0800c43f
 800adc0:	0800c450 	.word	0x0800c450

0800adc4 <__multiply>:
 800adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc8:	4691      	mov	r9, r2
 800adca:	690a      	ldr	r2, [r1, #16]
 800adcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800add0:	429a      	cmp	r2, r3
 800add2:	bfb8      	it	lt
 800add4:	460b      	movlt	r3, r1
 800add6:	460c      	mov	r4, r1
 800add8:	bfbc      	itt	lt
 800adda:	464c      	movlt	r4, r9
 800addc:	4699      	movlt	r9, r3
 800adde:	6927      	ldr	r7, [r4, #16]
 800ade0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ade4:	68a3      	ldr	r3, [r4, #8]
 800ade6:	6861      	ldr	r1, [r4, #4]
 800ade8:	eb07 060a 	add.w	r6, r7, sl
 800adec:	42b3      	cmp	r3, r6
 800adee:	b085      	sub	sp, #20
 800adf0:	bfb8      	it	lt
 800adf2:	3101      	addlt	r1, #1
 800adf4:	f7ff fed8 	bl	800aba8 <_Balloc>
 800adf8:	b930      	cbnz	r0, 800ae08 <__multiply+0x44>
 800adfa:	4602      	mov	r2, r0
 800adfc:	4b44      	ldr	r3, [pc, #272]	; (800af10 <__multiply+0x14c>)
 800adfe:	4845      	ldr	r0, [pc, #276]	; (800af14 <__multiply+0x150>)
 800ae00:	f240 115d 	movw	r1, #349	; 0x15d
 800ae04:	f000 fcb6 	bl	800b774 <__assert_func>
 800ae08:	f100 0514 	add.w	r5, r0, #20
 800ae0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae10:	462b      	mov	r3, r5
 800ae12:	2200      	movs	r2, #0
 800ae14:	4543      	cmp	r3, r8
 800ae16:	d321      	bcc.n	800ae5c <__multiply+0x98>
 800ae18:	f104 0314 	add.w	r3, r4, #20
 800ae1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae20:	f109 0314 	add.w	r3, r9, #20
 800ae24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae28:	9202      	str	r2, [sp, #8]
 800ae2a:	1b3a      	subs	r2, r7, r4
 800ae2c:	3a15      	subs	r2, #21
 800ae2e:	f022 0203 	bic.w	r2, r2, #3
 800ae32:	3204      	adds	r2, #4
 800ae34:	f104 0115 	add.w	r1, r4, #21
 800ae38:	428f      	cmp	r7, r1
 800ae3a:	bf38      	it	cc
 800ae3c:	2204      	movcc	r2, #4
 800ae3e:	9201      	str	r2, [sp, #4]
 800ae40:	9a02      	ldr	r2, [sp, #8]
 800ae42:	9303      	str	r3, [sp, #12]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d80c      	bhi.n	800ae62 <__multiply+0x9e>
 800ae48:	2e00      	cmp	r6, #0
 800ae4a:	dd03      	ble.n	800ae54 <__multiply+0x90>
 800ae4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d05a      	beq.n	800af0a <__multiply+0x146>
 800ae54:	6106      	str	r6, [r0, #16]
 800ae56:	b005      	add	sp, #20
 800ae58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae5c:	f843 2b04 	str.w	r2, [r3], #4
 800ae60:	e7d8      	b.n	800ae14 <__multiply+0x50>
 800ae62:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae66:	f1ba 0f00 	cmp.w	sl, #0
 800ae6a:	d024      	beq.n	800aeb6 <__multiply+0xf2>
 800ae6c:	f104 0e14 	add.w	lr, r4, #20
 800ae70:	46a9      	mov	r9, r5
 800ae72:	f04f 0c00 	mov.w	ip, #0
 800ae76:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae7a:	f8d9 1000 	ldr.w	r1, [r9]
 800ae7e:	fa1f fb82 	uxth.w	fp, r2
 800ae82:	b289      	uxth	r1, r1
 800ae84:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae8c:	f8d9 2000 	ldr.w	r2, [r9]
 800ae90:	4461      	add	r1, ip
 800ae92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae96:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae9e:	b289      	uxth	r1, r1
 800aea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aea4:	4577      	cmp	r7, lr
 800aea6:	f849 1b04 	str.w	r1, [r9], #4
 800aeaa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aeae:	d8e2      	bhi.n	800ae76 <__multiply+0xb2>
 800aeb0:	9a01      	ldr	r2, [sp, #4]
 800aeb2:	f845 c002 	str.w	ip, [r5, r2]
 800aeb6:	9a03      	ldr	r2, [sp, #12]
 800aeb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aebc:	3304      	adds	r3, #4
 800aebe:	f1b9 0f00 	cmp.w	r9, #0
 800aec2:	d020      	beq.n	800af06 <__multiply+0x142>
 800aec4:	6829      	ldr	r1, [r5, #0]
 800aec6:	f104 0c14 	add.w	ip, r4, #20
 800aeca:	46ae      	mov	lr, r5
 800aecc:	f04f 0a00 	mov.w	sl, #0
 800aed0:	f8bc b000 	ldrh.w	fp, [ip]
 800aed4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aed8:	fb09 220b 	mla	r2, r9, fp, r2
 800aedc:	4492      	add	sl, r2
 800aede:	b289      	uxth	r1, r1
 800aee0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aee4:	f84e 1b04 	str.w	r1, [lr], #4
 800aee8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aeec:	f8be 1000 	ldrh.w	r1, [lr]
 800aef0:	0c12      	lsrs	r2, r2, #16
 800aef2:	fb09 1102 	mla	r1, r9, r2, r1
 800aef6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aefa:	4567      	cmp	r7, ip
 800aefc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800af00:	d8e6      	bhi.n	800aed0 <__multiply+0x10c>
 800af02:	9a01      	ldr	r2, [sp, #4]
 800af04:	50a9      	str	r1, [r5, r2]
 800af06:	3504      	adds	r5, #4
 800af08:	e79a      	b.n	800ae40 <__multiply+0x7c>
 800af0a:	3e01      	subs	r6, #1
 800af0c:	e79c      	b.n	800ae48 <__multiply+0x84>
 800af0e:	bf00      	nop
 800af10:	0800c43f 	.word	0x0800c43f
 800af14:	0800c450 	.word	0x0800c450

0800af18 <__pow5mult>:
 800af18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af1c:	4615      	mov	r5, r2
 800af1e:	f012 0203 	ands.w	r2, r2, #3
 800af22:	4606      	mov	r6, r0
 800af24:	460f      	mov	r7, r1
 800af26:	d007      	beq.n	800af38 <__pow5mult+0x20>
 800af28:	4c25      	ldr	r4, [pc, #148]	; (800afc0 <__pow5mult+0xa8>)
 800af2a:	3a01      	subs	r2, #1
 800af2c:	2300      	movs	r3, #0
 800af2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af32:	f7ff fe9b 	bl	800ac6c <__multadd>
 800af36:	4607      	mov	r7, r0
 800af38:	10ad      	asrs	r5, r5, #2
 800af3a:	d03d      	beq.n	800afb8 <__pow5mult+0xa0>
 800af3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af3e:	b97c      	cbnz	r4, 800af60 <__pow5mult+0x48>
 800af40:	2010      	movs	r0, #16
 800af42:	f7ff fe1b 	bl	800ab7c <malloc>
 800af46:	4602      	mov	r2, r0
 800af48:	6270      	str	r0, [r6, #36]	; 0x24
 800af4a:	b928      	cbnz	r0, 800af58 <__pow5mult+0x40>
 800af4c:	4b1d      	ldr	r3, [pc, #116]	; (800afc4 <__pow5mult+0xac>)
 800af4e:	481e      	ldr	r0, [pc, #120]	; (800afc8 <__pow5mult+0xb0>)
 800af50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af54:	f000 fc0e 	bl	800b774 <__assert_func>
 800af58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af5c:	6004      	str	r4, [r0, #0]
 800af5e:	60c4      	str	r4, [r0, #12]
 800af60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af68:	b94c      	cbnz	r4, 800af7e <__pow5mult+0x66>
 800af6a:	f240 2171 	movw	r1, #625	; 0x271
 800af6e:	4630      	mov	r0, r6
 800af70:	f7ff ff12 	bl	800ad98 <__i2b>
 800af74:	2300      	movs	r3, #0
 800af76:	f8c8 0008 	str.w	r0, [r8, #8]
 800af7a:	4604      	mov	r4, r0
 800af7c:	6003      	str	r3, [r0, #0]
 800af7e:	f04f 0900 	mov.w	r9, #0
 800af82:	07eb      	lsls	r3, r5, #31
 800af84:	d50a      	bpl.n	800af9c <__pow5mult+0x84>
 800af86:	4639      	mov	r1, r7
 800af88:	4622      	mov	r2, r4
 800af8a:	4630      	mov	r0, r6
 800af8c:	f7ff ff1a 	bl	800adc4 <__multiply>
 800af90:	4639      	mov	r1, r7
 800af92:	4680      	mov	r8, r0
 800af94:	4630      	mov	r0, r6
 800af96:	f7ff fe47 	bl	800ac28 <_Bfree>
 800af9a:	4647      	mov	r7, r8
 800af9c:	106d      	asrs	r5, r5, #1
 800af9e:	d00b      	beq.n	800afb8 <__pow5mult+0xa0>
 800afa0:	6820      	ldr	r0, [r4, #0]
 800afa2:	b938      	cbnz	r0, 800afb4 <__pow5mult+0x9c>
 800afa4:	4622      	mov	r2, r4
 800afa6:	4621      	mov	r1, r4
 800afa8:	4630      	mov	r0, r6
 800afaa:	f7ff ff0b 	bl	800adc4 <__multiply>
 800afae:	6020      	str	r0, [r4, #0]
 800afb0:	f8c0 9000 	str.w	r9, [r0]
 800afb4:	4604      	mov	r4, r0
 800afb6:	e7e4      	b.n	800af82 <__pow5mult+0x6a>
 800afb8:	4638      	mov	r0, r7
 800afba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afbe:	bf00      	nop
 800afc0:	0800c5a0 	.word	0x0800c5a0
 800afc4:	0800c3cd 	.word	0x0800c3cd
 800afc8:	0800c450 	.word	0x0800c450

0800afcc <__lshift>:
 800afcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afd0:	460c      	mov	r4, r1
 800afd2:	6849      	ldr	r1, [r1, #4]
 800afd4:	6923      	ldr	r3, [r4, #16]
 800afd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afda:	68a3      	ldr	r3, [r4, #8]
 800afdc:	4607      	mov	r7, r0
 800afde:	4691      	mov	r9, r2
 800afe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afe4:	f108 0601 	add.w	r6, r8, #1
 800afe8:	42b3      	cmp	r3, r6
 800afea:	db0b      	blt.n	800b004 <__lshift+0x38>
 800afec:	4638      	mov	r0, r7
 800afee:	f7ff fddb 	bl	800aba8 <_Balloc>
 800aff2:	4605      	mov	r5, r0
 800aff4:	b948      	cbnz	r0, 800b00a <__lshift+0x3e>
 800aff6:	4602      	mov	r2, r0
 800aff8:	4b2a      	ldr	r3, [pc, #168]	; (800b0a4 <__lshift+0xd8>)
 800affa:	482b      	ldr	r0, [pc, #172]	; (800b0a8 <__lshift+0xdc>)
 800affc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b000:	f000 fbb8 	bl	800b774 <__assert_func>
 800b004:	3101      	adds	r1, #1
 800b006:	005b      	lsls	r3, r3, #1
 800b008:	e7ee      	b.n	800afe8 <__lshift+0x1c>
 800b00a:	2300      	movs	r3, #0
 800b00c:	f100 0114 	add.w	r1, r0, #20
 800b010:	f100 0210 	add.w	r2, r0, #16
 800b014:	4618      	mov	r0, r3
 800b016:	4553      	cmp	r3, sl
 800b018:	db37      	blt.n	800b08a <__lshift+0xbe>
 800b01a:	6920      	ldr	r0, [r4, #16]
 800b01c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b020:	f104 0314 	add.w	r3, r4, #20
 800b024:	f019 091f 	ands.w	r9, r9, #31
 800b028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b02c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b030:	d02f      	beq.n	800b092 <__lshift+0xc6>
 800b032:	f1c9 0e20 	rsb	lr, r9, #32
 800b036:	468a      	mov	sl, r1
 800b038:	f04f 0c00 	mov.w	ip, #0
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	fa02 f209 	lsl.w	r2, r2, r9
 800b042:	ea42 020c 	orr.w	r2, r2, ip
 800b046:	f84a 2b04 	str.w	r2, [sl], #4
 800b04a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b04e:	4298      	cmp	r0, r3
 800b050:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b054:	d8f2      	bhi.n	800b03c <__lshift+0x70>
 800b056:	1b03      	subs	r3, r0, r4
 800b058:	3b15      	subs	r3, #21
 800b05a:	f023 0303 	bic.w	r3, r3, #3
 800b05e:	3304      	adds	r3, #4
 800b060:	f104 0215 	add.w	r2, r4, #21
 800b064:	4290      	cmp	r0, r2
 800b066:	bf38      	it	cc
 800b068:	2304      	movcc	r3, #4
 800b06a:	f841 c003 	str.w	ip, [r1, r3]
 800b06e:	f1bc 0f00 	cmp.w	ip, #0
 800b072:	d001      	beq.n	800b078 <__lshift+0xac>
 800b074:	f108 0602 	add.w	r6, r8, #2
 800b078:	3e01      	subs	r6, #1
 800b07a:	4638      	mov	r0, r7
 800b07c:	612e      	str	r6, [r5, #16]
 800b07e:	4621      	mov	r1, r4
 800b080:	f7ff fdd2 	bl	800ac28 <_Bfree>
 800b084:	4628      	mov	r0, r5
 800b086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b08a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b08e:	3301      	adds	r3, #1
 800b090:	e7c1      	b.n	800b016 <__lshift+0x4a>
 800b092:	3904      	subs	r1, #4
 800b094:	f853 2b04 	ldr.w	r2, [r3], #4
 800b098:	f841 2f04 	str.w	r2, [r1, #4]!
 800b09c:	4298      	cmp	r0, r3
 800b09e:	d8f9      	bhi.n	800b094 <__lshift+0xc8>
 800b0a0:	e7ea      	b.n	800b078 <__lshift+0xac>
 800b0a2:	bf00      	nop
 800b0a4:	0800c43f 	.word	0x0800c43f
 800b0a8:	0800c450 	.word	0x0800c450

0800b0ac <__mcmp>:
 800b0ac:	b530      	push	{r4, r5, lr}
 800b0ae:	6902      	ldr	r2, [r0, #16]
 800b0b0:	690c      	ldr	r4, [r1, #16]
 800b0b2:	1b12      	subs	r2, r2, r4
 800b0b4:	d10e      	bne.n	800b0d4 <__mcmp+0x28>
 800b0b6:	f100 0314 	add.w	r3, r0, #20
 800b0ba:	3114      	adds	r1, #20
 800b0bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0cc:	42a5      	cmp	r5, r4
 800b0ce:	d003      	beq.n	800b0d8 <__mcmp+0x2c>
 800b0d0:	d305      	bcc.n	800b0de <__mcmp+0x32>
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	bd30      	pop	{r4, r5, pc}
 800b0d8:	4283      	cmp	r3, r0
 800b0da:	d3f3      	bcc.n	800b0c4 <__mcmp+0x18>
 800b0dc:	e7fa      	b.n	800b0d4 <__mcmp+0x28>
 800b0de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0e2:	e7f7      	b.n	800b0d4 <__mcmp+0x28>

0800b0e4 <__mdiff>:
 800b0e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e8:	460c      	mov	r4, r1
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	4690      	mov	r8, r2
 800b0f2:	f7ff ffdb 	bl	800b0ac <__mcmp>
 800b0f6:	1e05      	subs	r5, r0, #0
 800b0f8:	d110      	bne.n	800b11c <__mdiff+0x38>
 800b0fa:	4629      	mov	r1, r5
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	f7ff fd53 	bl	800aba8 <_Balloc>
 800b102:	b930      	cbnz	r0, 800b112 <__mdiff+0x2e>
 800b104:	4b3a      	ldr	r3, [pc, #232]	; (800b1f0 <__mdiff+0x10c>)
 800b106:	4602      	mov	r2, r0
 800b108:	f240 2132 	movw	r1, #562	; 0x232
 800b10c:	4839      	ldr	r0, [pc, #228]	; (800b1f4 <__mdiff+0x110>)
 800b10e:	f000 fb31 	bl	800b774 <__assert_func>
 800b112:	2301      	movs	r3, #1
 800b114:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b118:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11c:	bfa4      	itt	ge
 800b11e:	4643      	movge	r3, r8
 800b120:	46a0      	movge	r8, r4
 800b122:	4630      	mov	r0, r6
 800b124:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b128:	bfa6      	itte	ge
 800b12a:	461c      	movge	r4, r3
 800b12c:	2500      	movge	r5, #0
 800b12e:	2501      	movlt	r5, #1
 800b130:	f7ff fd3a 	bl	800aba8 <_Balloc>
 800b134:	b920      	cbnz	r0, 800b140 <__mdiff+0x5c>
 800b136:	4b2e      	ldr	r3, [pc, #184]	; (800b1f0 <__mdiff+0x10c>)
 800b138:	4602      	mov	r2, r0
 800b13a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b13e:	e7e5      	b.n	800b10c <__mdiff+0x28>
 800b140:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b144:	6926      	ldr	r6, [r4, #16]
 800b146:	60c5      	str	r5, [r0, #12]
 800b148:	f104 0914 	add.w	r9, r4, #20
 800b14c:	f108 0514 	add.w	r5, r8, #20
 800b150:	f100 0e14 	add.w	lr, r0, #20
 800b154:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b158:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b15c:	f108 0210 	add.w	r2, r8, #16
 800b160:	46f2      	mov	sl, lr
 800b162:	2100      	movs	r1, #0
 800b164:	f859 3b04 	ldr.w	r3, [r9], #4
 800b168:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b16c:	fa1f f883 	uxth.w	r8, r3
 800b170:	fa11 f18b 	uxtah	r1, r1, fp
 800b174:	0c1b      	lsrs	r3, r3, #16
 800b176:	eba1 0808 	sub.w	r8, r1, r8
 800b17a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b17e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b182:	fa1f f888 	uxth.w	r8, r8
 800b186:	1419      	asrs	r1, r3, #16
 800b188:	454e      	cmp	r6, r9
 800b18a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b18e:	f84a 3b04 	str.w	r3, [sl], #4
 800b192:	d8e7      	bhi.n	800b164 <__mdiff+0x80>
 800b194:	1b33      	subs	r3, r6, r4
 800b196:	3b15      	subs	r3, #21
 800b198:	f023 0303 	bic.w	r3, r3, #3
 800b19c:	3304      	adds	r3, #4
 800b19e:	3415      	adds	r4, #21
 800b1a0:	42a6      	cmp	r6, r4
 800b1a2:	bf38      	it	cc
 800b1a4:	2304      	movcc	r3, #4
 800b1a6:	441d      	add	r5, r3
 800b1a8:	4473      	add	r3, lr
 800b1aa:	469e      	mov	lr, r3
 800b1ac:	462e      	mov	r6, r5
 800b1ae:	4566      	cmp	r6, ip
 800b1b0:	d30e      	bcc.n	800b1d0 <__mdiff+0xec>
 800b1b2:	f10c 0203 	add.w	r2, ip, #3
 800b1b6:	1b52      	subs	r2, r2, r5
 800b1b8:	f022 0203 	bic.w	r2, r2, #3
 800b1bc:	3d03      	subs	r5, #3
 800b1be:	45ac      	cmp	ip, r5
 800b1c0:	bf38      	it	cc
 800b1c2:	2200      	movcc	r2, #0
 800b1c4:	441a      	add	r2, r3
 800b1c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1ca:	b17b      	cbz	r3, 800b1ec <__mdiff+0x108>
 800b1cc:	6107      	str	r7, [r0, #16]
 800b1ce:	e7a3      	b.n	800b118 <__mdiff+0x34>
 800b1d0:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1d4:	fa11 f288 	uxtah	r2, r1, r8
 800b1d8:	1414      	asrs	r4, r2, #16
 800b1da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1de:	b292      	uxth	r2, r2
 800b1e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1e4:	f84e 2b04 	str.w	r2, [lr], #4
 800b1e8:	1421      	asrs	r1, r4, #16
 800b1ea:	e7e0      	b.n	800b1ae <__mdiff+0xca>
 800b1ec:	3f01      	subs	r7, #1
 800b1ee:	e7ea      	b.n	800b1c6 <__mdiff+0xe2>
 800b1f0:	0800c43f 	.word	0x0800c43f
 800b1f4:	0800c450 	.word	0x0800c450

0800b1f8 <__d2b>:
 800b1f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1fc:	4689      	mov	r9, r1
 800b1fe:	2101      	movs	r1, #1
 800b200:	ec57 6b10 	vmov	r6, r7, d0
 800b204:	4690      	mov	r8, r2
 800b206:	f7ff fccf 	bl	800aba8 <_Balloc>
 800b20a:	4604      	mov	r4, r0
 800b20c:	b930      	cbnz	r0, 800b21c <__d2b+0x24>
 800b20e:	4602      	mov	r2, r0
 800b210:	4b25      	ldr	r3, [pc, #148]	; (800b2a8 <__d2b+0xb0>)
 800b212:	4826      	ldr	r0, [pc, #152]	; (800b2ac <__d2b+0xb4>)
 800b214:	f240 310a 	movw	r1, #778	; 0x30a
 800b218:	f000 faac 	bl	800b774 <__assert_func>
 800b21c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b220:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b224:	bb35      	cbnz	r5, 800b274 <__d2b+0x7c>
 800b226:	2e00      	cmp	r6, #0
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	d028      	beq.n	800b27e <__d2b+0x86>
 800b22c:	4668      	mov	r0, sp
 800b22e:	9600      	str	r6, [sp, #0]
 800b230:	f7ff fd82 	bl	800ad38 <__lo0bits>
 800b234:	9900      	ldr	r1, [sp, #0]
 800b236:	b300      	cbz	r0, 800b27a <__d2b+0x82>
 800b238:	9a01      	ldr	r2, [sp, #4]
 800b23a:	f1c0 0320 	rsb	r3, r0, #32
 800b23e:	fa02 f303 	lsl.w	r3, r2, r3
 800b242:	430b      	orrs	r3, r1
 800b244:	40c2      	lsrs	r2, r0
 800b246:	6163      	str	r3, [r4, #20]
 800b248:	9201      	str	r2, [sp, #4]
 800b24a:	9b01      	ldr	r3, [sp, #4]
 800b24c:	61a3      	str	r3, [r4, #24]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	bf14      	ite	ne
 800b252:	2202      	movne	r2, #2
 800b254:	2201      	moveq	r2, #1
 800b256:	6122      	str	r2, [r4, #16]
 800b258:	b1d5      	cbz	r5, 800b290 <__d2b+0x98>
 800b25a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b25e:	4405      	add	r5, r0
 800b260:	f8c9 5000 	str.w	r5, [r9]
 800b264:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b268:	f8c8 0000 	str.w	r0, [r8]
 800b26c:	4620      	mov	r0, r4
 800b26e:	b003      	add	sp, #12
 800b270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b274:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b278:	e7d5      	b.n	800b226 <__d2b+0x2e>
 800b27a:	6161      	str	r1, [r4, #20]
 800b27c:	e7e5      	b.n	800b24a <__d2b+0x52>
 800b27e:	a801      	add	r0, sp, #4
 800b280:	f7ff fd5a 	bl	800ad38 <__lo0bits>
 800b284:	9b01      	ldr	r3, [sp, #4]
 800b286:	6163      	str	r3, [r4, #20]
 800b288:	2201      	movs	r2, #1
 800b28a:	6122      	str	r2, [r4, #16]
 800b28c:	3020      	adds	r0, #32
 800b28e:	e7e3      	b.n	800b258 <__d2b+0x60>
 800b290:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b294:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b298:	f8c9 0000 	str.w	r0, [r9]
 800b29c:	6918      	ldr	r0, [r3, #16]
 800b29e:	f7ff fd2b 	bl	800acf8 <__hi0bits>
 800b2a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b2a6:	e7df      	b.n	800b268 <__d2b+0x70>
 800b2a8:	0800c43f 	.word	0x0800c43f
 800b2ac:	0800c450 	.word	0x0800c450

0800b2b0 <_calloc_r>:
 800b2b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2b2:	fba1 2402 	umull	r2, r4, r1, r2
 800b2b6:	b94c      	cbnz	r4, 800b2cc <_calloc_r+0x1c>
 800b2b8:	4611      	mov	r1, r2
 800b2ba:	9201      	str	r2, [sp, #4]
 800b2bc:	f000 f87a 	bl	800b3b4 <_malloc_r>
 800b2c0:	9a01      	ldr	r2, [sp, #4]
 800b2c2:	4605      	mov	r5, r0
 800b2c4:	b930      	cbnz	r0, 800b2d4 <_calloc_r+0x24>
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	b003      	add	sp, #12
 800b2ca:	bd30      	pop	{r4, r5, pc}
 800b2cc:	220c      	movs	r2, #12
 800b2ce:	6002      	str	r2, [r0, #0]
 800b2d0:	2500      	movs	r5, #0
 800b2d2:	e7f8      	b.n	800b2c6 <_calloc_r+0x16>
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	f7fe f941 	bl	800955c <memset>
 800b2da:	e7f4      	b.n	800b2c6 <_calloc_r+0x16>

0800b2dc <_free_r>:
 800b2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2de:	2900      	cmp	r1, #0
 800b2e0:	d044      	beq.n	800b36c <_free_r+0x90>
 800b2e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e6:	9001      	str	r0, [sp, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f1a1 0404 	sub.w	r4, r1, #4
 800b2ee:	bfb8      	it	lt
 800b2f0:	18e4      	addlt	r4, r4, r3
 800b2f2:	f000 fa9b 	bl	800b82c <__malloc_lock>
 800b2f6:	4a1e      	ldr	r2, [pc, #120]	; (800b370 <_free_r+0x94>)
 800b2f8:	9801      	ldr	r0, [sp, #4]
 800b2fa:	6813      	ldr	r3, [r2, #0]
 800b2fc:	b933      	cbnz	r3, 800b30c <_free_r+0x30>
 800b2fe:	6063      	str	r3, [r4, #4]
 800b300:	6014      	str	r4, [r2, #0]
 800b302:	b003      	add	sp, #12
 800b304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b308:	f000 ba96 	b.w	800b838 <__malloc_unlock>
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	d908      	bls.n	800b322 <_free_r+0x46>
 800b310:	6825      	ldr	r5, [r4, #0]
 800b312:	1961      	adds	r1, r4, r5
 800b314:	428b      	cmp	r3, r1
 800b316:	bf01      	itttt	eq
 800b318:	6819      	ldreq	r1, [r3, #0]
 800b31a:	685b      	ldreq	r3, [r3, #4]
 800b31c:	1949      	addeq	r1, r1, r5
 800b31e:	6021      	streq	r1, [r4, #0]
 800b320:	e7ed      	b.n	800b2fe <_free_r+0x22>
 800b322:	461a      	mov	r2, r3
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	b10b      	cbz	r3, 800b32c <_free_r+0x50>
 800b328:	42a3      	cmp	r3, r4
 800b32a:	d9fa      	bls.n	800b322 <_free_r+0x46>
 800b32c:	6811      	ldr	r1, [r2, #0]
 800b32e:	1855      	adds	r5, r2, r1
 800b330:	42a5      	cmp	r5, r4
 800b332:	d10b      	bne.n	800b34c <_free_r+0x70>
 800b334:	6824      	ldr	r4, [r4, #0]
 800b336:	4421      	add	r1, r4
 800b338:	1854      	adds	r4, r2, r1
 800b33a:	42a3      	cmp	r3, r4
 800b33c:	6011      	str	r1, [r2, #0]
 800b33e:	d1e0      	bne.n	800b302 <_free_r+0x26>
 800b340:	681c      	ldr	r4, [r3, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	6053      	str	r3, [r2, #4]
 800b346:	4421      	add	r1, r4
 800b348:	6011      	str	r1, [r2, #0]
 800b34a:	e7da      	b.n	800b302 <_free_r+0x26>
 800b34c:	d902      	bls.n	800b354 <_free_r+0x78>
 800b34e:	230c      	movs	r3, #12
 800b350:	6003      	str	r3, [r0, #0]
 800b352:	e7d6      	b.n	800b302 <_free_r+0x26>
 800b354:	6825      	ldr	r5, [r4, #0]
 800b356:	1961      	adds	r1, r4, r5
 800b358:	428b      	cmp	r3, r1
 800b35a:	bf04      	itt	eq
 800b35c:	6819      	ldreq	r1, [r3, #0]
 800b35e:	685b      	ldreq	r3, [r3, #4]
 800b360:	6063      	str	r3, [r4, #4]
 800b362:	bf04      	itt	eq
 800b364:	1949      	addeq	r1, r1, r5
 800b366:	6021      	streq	r1, [r4, #0]
 800b368:	6054      	str	r4, [r2, #4]
 800b36a:	e7ca      	b.n	800b302 <_free_r+0x26>
 800b36c:	b003      	add	sp, #12
 800b36e:	bd30      	pop	{r4, r5, pc}
 800b370:	200018ac 	.word	0x200018ac

0800b374 <sbrk_aligned>:
 800b374:	b570      	push	{r4, r5, r6, lr}
 800b376:	4e0e      	ldr	r6, [pc, #56]	; (800b3b0 <sbrk_aligned+0x3c>)
 800b378:	460c      	mov	r4, r1
 800b37a:	6831      	ldr	r1, [r6, #0]
 800b37c:	4605      	mov	r5, r0
 800b37e:	b911      	cbnz	r1, 800b386 <sbrk_aligned+0x12>
 800b380:	f000 f9e8 	bl	800b754 <_sbrk_r>
 800b384:	6030      	str	r0, [r6, #0]
 800b386:	4621      	mov	r1, r4
 800b388:	4628      	mov	r0, r5
 800b38a:	f000 f9e3 	bl	800b754 <_sbrk_r>
 800b38e:	1c43      	adds	r3, r0, #1
 800b390:	d00a      	beq.n	800b3a8 <sbrk_aligned+0x34>
 800b392:	1cc4      	adds	r4, r0, #3
 800b394:	f024 0403 	bic.w	r4, r4, #3
 800b398:	42a0      	cmp	r0, r4
 800b39a:	d007      	beq.n	800b3ac <sbrk_aligned+0x38>
 800b39c:	1a21      	subs	r1, r4, r0
 800b39e:	4628      	mov	r0, r5
 800b3a0:	f000 f9d8 	bl	800b754 <_sbrk_r>
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	d101      	bne.n	800b3ac <sbrk_aligned+0x38>
 800b3a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	bd70      	pop	{r4, r5, r6, pc}
 800b3b0:	200018b0 	.word	0x200018b0

0800b3b4 <_malloc_r>:
 800b3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b8:	1ccd      	adds	r5, r1, #3
 800b3ba:	f025 0503 	bic.w	r5, r5, #3
 800b3be:	3508      	adds	r5, #8
 800b3c0:	2d0c      	cmp	r5, #12
 800b3c2:	bf38      	it	cc
 800b3c4:	250c      	movcc	r5, #12
 800b3c6:	2d00      	cmp	r5, #0
 800b3c8:	4607      	mov	r7, r0
 800b3ca:	db01      	blt.n	800b3d0 <_malloc_r+0x1c>
 800b3cc:	42a9      	cmp	r1, r5
 800b3ce:	d905      	bls.n	800b3dc <_malloc_r+0x28>
 800b3d0:	230c      	movs	r3, #12
 800b3d2:	603b      	str	r3, [r7, #0]
 800b3d4:	2600      	movs	r6, #0
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3dc:	4e2e      	ldr	r6, [pc, #184]	; (800b498 <_malloc_r+0xe4>)
 800b3de:	f000 fa25 	bl	800b82c <__malloc_lock>
 800b3e2:	6833      	ldr	r3, [r6, #0]
 800b3e4:	461c      	mov	r4, r3
 800b3e6:	bb34      	cbnz	r4, 800b436 <_malloc_r+0x82>
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	f7ff ffc2 	bl	800b374 <sbrk_aligned>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	4604      	mov	r4, r0
 800b3f4:	d14d      	bne.n	800b492 <_malloc_r+0xde>
 800b3f6:	6834      	ldr	r4, [r6, #0]
 800b3f8:	4626      	mov	r6, r4
 800b3fa:	2e00      	cmp	r6, #0
 800b3fc:	d140      	bne.n	800b480 <_malloc_r+0xcc>
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	4631      	mov	r1, r6
 800b402:	4638      	mov	r0, r7
 800b404:	eb04 0803 	add.w	r8, r4, r3
 800b408:	f000 f9a4 	bl	800b754 <_sbrk_r>
 800b40c:	4580      	cmp	r8, r0
 800b40e:	d13a      	bne.n	800b486 <_malloc_r+0xd2>
 800b410:	6821      	ldr	r1, [r4, #0]
 800b412:	3503      	adds	r5, #3
 800b414:	1a6d      	subs	r5, r5, r1
 800b416:	f025 0503 	bic.w	r5, r5, #3
 800b41a:	3508      	adds	r5, #8
 800b41c:	2d0c      	cmp	r5, #12
 800b41e:	bf38      	it	cc
 800b420:	250c      	movcc	r5, #12
 800b422:	4629      	mov	r1, r5
 800b424:	4638      	mov	r0, r7
 800b426:	f7ff ffa5 	bl	800b374 <sbrk_aligned>
 800b42a:	3001      	adds	r0, #1
 800b42c:	d02b      	beq.n	800b486 <_malloc_r+0xd2>
 800b42e:	6823      	ldr	r3, [r4, #0]
 800b430:	442b      	add	r3, r5
 800b432:	6023      	str	r3, [r4, #0]
 800b434:	e00e      	b.n	800b454 <_malloc_r+0xa0>
 800b436:	6822      	ldr	r2, [r4, #0]
 800b438:	1b52      	subs	r2, r2, r5
 800b43a:	d41e      	bmi.n	800b47a <_malloc_r+0xc6>
 800b43c:	2a0b      	cmp	r2, #11
 800b43e:	d916      	bls.n	800b46e <_malloc_r+0xba>
 800b440:	1961      	adds	r1, r4, r5
 800b442:	42a3      	cmp	r3, r4
 800b444:	6025      	str	r5, [r4, #0]
 800b446:	bf18      	it	ne
 800b448:	6059      	strne	r1, [r3, #4]
 800b44a:	6863      	ldr	r3, [r4, #4]
 800b44c:	bf08      	it	eq
 800b44e:	6031      	streq	r1, [r6, #0]
 800b450:	5162      	str	r2, [r4, r5]
 800b452:	604b      	str	r3, [r1, #4]
 800b454:	4638      	mov	r0, r7
 800b456:	f104 060b 	add.w	r6, r4, #11
 800b45a:	f000 f9ed 	bl	800b838 <__malloc_unlock>
 800b45e:	f026 0607 	bic.w	r6, r6, #7
 800b462:	1d23      	adds	r3, r4, #4
 800b464:	1af2      	subs	r2, r6, r3
 800b466:	d0b6      	beq.n	800b3d6 <_malloc_r+0x22>
 800b468:	1b9b      	subs	r3, r3, r6
 800b46a:	50a3      	str	r3, [r4, r2]
 800b46c:	e7b3      	b.n	800b3d6 <_malloc_r+0x22>
 800b46e:	6862      	ldr	r2, [r4, #4]
 800b470:	42a3      	cmp	r3, r4
 800b472:	bf0c      	ite	eq
 800b474:	6032      	streq	r2, [r6, #0]
 800b476:	605a      	strne	r2, [r3, #4]
 800b478:	e7ec      	b.n	800b454 <_malloc_r+0xa0>
 800b47a:	4623      	mov	r3, r4
 800b47c:	6864      	ldr	r4, [r4, #4]
 800b47e:	e7b2      	b.n	800b3e6 <_malloc_r+0x32>
 800b480:	4634      	mov	r4, r6
 800b482:	6876      	ldr	r6, [r6, #4]
 800b484:	e7b9      	b.n	800b3fa <_malloc_r+0x46>
 800b486:	230c      	movs	r3, #12
 800b488:	603b      	str	r3, [r7, #0]
 800b48a:	4638      	mov	r0, r7
 800b48c:	f000 f9d4 	bl	800b838 <__malloc_unlock>
 800b490:	e7a1      	b.n	800b3d6 <_malloc_r+0x22>
 800b492:	6025      	str	r5, [r4, #0]
 800b494:	e7de      	b.n	800b454 <_malloc_r+0xa0>
 800b496:	bf00      	nop
 800b498:	200018ac 	.word	0x200018ac

0800b49c <__ssputs_r>:
 800b49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a0:	688e      	ldr	r6, [r1, #8]
 800b4a2:	429e      	cmp	r6, r3
 800b4a4:	4682      	mov	sl, r0
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	4690      	mov	r8, r2
 800b4aa:	461f      	mov	r7, r3
 800b4ac:	d838      	bhi.n	800b520 <__ssputs_r+0x84>
 800b4ae:	898a      	ldrh	r2, [r1, #12]
 800b4b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4b4:	d032      	beq.n	800b51c <__ssputs_r+0x80>
 800b4b6:	6825      	ldr	r5, [r4, #0]
 800b4b8:	6909      	ldr	r1, [r1, #16]
 800b4ba:	eba5 0901 	sub.w	r9, r5, r1
 800b4be:	6965      	ldr	r5, [r4, #20]
 800b4c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	444b      	add	r3, r9
 800b4cc:	106d      	asrs	r5, r5, #1
 800b4ce:	429d      	cmp	r5, r3
 800b4d0:	bf38      	it	cc
 800b4d2:	461d      	movcc	r5, r3
 800b4d4:	0553      	lsls	r3, r2, #21
 800b4d6:	d531      	bpl.n	800b53c <__ssputs_r+0xa0>
 800b4d8:	4629      	mov	r1, r5
 800b4da:	f7ff ff6b 	bl	800b3b4 <_malloc_r>
 800b4de:	4606      	mov	r6, r0
 800b4e0:	b950      	cbnz	r0, 800b4f8 <__ssputs_r+0x5c>
 800b4e2:	230c      	movs	r3, #12
 800b4e4:	f8ca 3000 	str.w	r3, [sl]
 800b4e8:	89a3      	ldrh	r3, [r4, #12]
 800b4ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ee:	81a3      	strh	r3, [r4, #12]
 800b4f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f8:	6921      	ldr	r1, [r4, #16]
 800b4fa:	464a      	mov	r2, r9
 800b4fc:	f7ff fb46 	bl	800ab8c <memcpy>
 800b500:	89a3      	ldrh	r3, [r4, #12]
 800b502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b50a:	81a3      	strh	r3, [r4, #12]
 800b50c:	6126      	str	r6, [r4, #16]
 800b50e:	6165      	str	r5, [r4, #20]
 800b510:	444e      	add	r6, r9
 800b512:	eba5 0509 	sub.w	r5, r5, r9
 800b516:	6026      	str	r6, [r4, #0]
 800b518:	60a5      	str	r5, [r4, #8]
 800b51a:	463e      	mov	r6, r7
 800b51c:	42be      	cmp	r6, r7
 800b51e:	d900      	bls.n	800b522 <__ssputs_r+0x86>
 800b520:	463e      	mov	r6, r7
 800b522:	6820      	ldr	r0, [r4, #0]
 800b524:	4632      	mov	r2, r6
 800b526:	4641      	mov	r1, r8
 800b528:	f000 f966 	bl	800b7f8 <memmove>
 800b52c:	68a3      	ldr	r3, [r4, #8]
 800b52e:	1b9b      	subs	r3, r3, r6
 800b530:	60a3      	str	r3, [r4, #8]
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	4433      	add	r3, r6
 800b536:	6023      	str	r3, [r4, #0]
 800b538:	2000      	movs	r0, #0
 800b53a:	e7db      	b.n	800b4f4 <__ssputs_r+0x58>
 800b53c:	462a      	mov	r2, r5
 800b53e:	f000 f981 	bl	800b844 <_realloc_r>
 800b542:	4606      	mov	r6, r0
 800b544:	2800      	cmp	r0, #0
 800b546:	d1e1      	bne.n	800b50c <__ssputs_r+0x70>
 800b548:	6921      	ldr	r1, [r4, #16]
 800b54a:	4650      	mov	r0, sl
 800b54c:	f7ff fec6 	bl	800b2dc <_free_r>
 800b550:	e7c7      	b.n	800b4e2 <__ssputs_r+0x46>
	...

0800b554 <_svfiprintf_r>:
 800b554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b558:	4698      	mov	r8, r3
 800b55a:	898b      	ldrh	r3, [r1, #12]
 800b55c:	061b      	lsls	r3, r3, #24
 800b55e:	b09d      	sub	sp, #116	; 0x74
 800b560:	4607      	mov	r7, r0
 800b562:	460d      	mov	r5, r1
 800b564:	4614      	mov	r4, r2
 800b566:	d50e      	bpl.n	800b586 <_svfiprintf_r+0x32>
 800b568:	690b      	ldr	r3, [r1, #16]
 800b56a:	b963      	cbnz	r3, 800b586 <_svfiprintf_r+0x32>
 800b56c:	2140      	movs	r1, #64	; 0x40
 800b56e:	f7ff ff21 	bl	800b3b4 <_malloc_r>
 800b572:	6028      	str	r0, [r5, #0]
 800b574:	6128      	str	r0, [r5, #16]
 800b576:	b920      	cbnz	r0, 800b582 <_svfiprintf_r+0x2e>
 800b578:	230c      	movs	r3, #12
 800b57a:	603b      	str	r3, [r7, #0]
 800b57c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b580:	e0d1      	b.n	800b726 <_svfiprintf_r+0x1d2>
 800b582:	2340      	movs	r3, #64	; 0x40
 800b584:	616b      	str	r3, [r5, #20]
 800b586:	2300      	movs	r3, #0
 800b588:	9309      	str	r3, [sp, #36]	; 0x24
 800b58a:	2320      	movs	r3, #32
 800b58c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b590:	f8cd 800c 	str.w	r8, [sp, #12]
 800b594:	2330      	movs	r3, #48	; 0x30
 800b596:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b740 <_svfiprintf_r+0x1ec>
 800b59a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b59e:	f04f 0901 	mov.w	r9, #1
 800b5a2:	4623      	mov	r3, r4
 800b5a4:	469a      	mov	sl, r3
 800b5a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5aa:	b10a      	cbz	r2, 800b5b0 <_svfiprintf_r+0x5c>
 800b5ac:	2a25      	cmp	r2, #37	; 0x25
 800b5ae:	d1f9      	bne.n	800b5a4 <_svfiprintf_r+0x50>
 800b5b0:	ebba 0b04 	subs.w	fp, sl, r4
 800b5b4:	d00b      	beq.n	800b5ce <_svfiprintf_r+0x7a>
 800b5b6:	465b      	mov	r3, fp
 800b5b8:	4622      	mov	r2, r4
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	4638      	mov	r0, r7
 800b5be:	f7ff ff6d 	bl	800b49c <__ssputs_r>
 800b5c2:	3001      	adds	r0, #1
 800b5c4:	f000 80aa 	beq.w	800b71c <_svfiprintf_r+0x1c8>
 800b5c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5ca:	445a      	add	r2, fp
 800b5cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 80a2 	beq.w	800b71c <_svfiprintf_r+0x1c8>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5e2:	f10a 0a01 	add.w	sl, sl, #1
 800b5e6:	9304      	str	r3, [sp, #16]
 800b5e8:	9307      	str	r3, [sp, #28]
 800b5ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5ee:	931a      	str	r3, [sp, #104]	; 0x68
 800b5f0:	4654      	mov	r4, sl
 800b5f2:	2205      	movs	r2, #5
 800b5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f8:	4851      	ldr	r0, [pc, #324]	; (800b740 <_svfiprintf_r+0x1ec>)
 800b5fa:	f7f4 fdf1 	bl	80001e0 <memchr>
 800b5fe:	9a04      	ldr	r2, [sp, #16]
 800b600:	b9d8      	cbnz	r0, 800b63a <_svfiprintf_r+0xe6>
 800b602:	06d0      	lsls	r0, r2, #27
 800b604:	bf44      	itt	mi
 800b606:	2320      	movmi	r3, #32
 800b608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b60c:	0711      	lsls	r1, r2, #28
 800b60e:	bf44      	itt	mi
 800b610:	232b      	movmi	r3, #43	; 0x2b
 800b612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b616:	f89a 3000 	ldrb.w	r3, [sl]
 800b61a:	2b2a      	cmp	r3, #42	; 0x2a
 800b61c:	d015      	beq.n	800b64a <_svfiprintf_r+0xf6>
 800b61e:	9a07      	ldr	r2, [sp, #28]
 800b620:	4654      	mov	r4, sl
 800b622:	2000      	movs	r0, #0
 800b624:	f04f 0c0a 	mov.w	ip, #10
 800b628:	4621      	mov	r1, r4
 800b62a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b62e:	3b30      	subs	r3, #48	; 0x30
 800b630:	2b09      	cmp	r3, #9
 800b632:	d94e      	bls.n	800b6d2 <_svfiprintf_r+0x17e>
 800b634:	b1b0      	cbz	r0, 800b664 <_svfiprintf_r+0x110>
 800b636:	9207      	str	r2, [sp, #28]
 800b638:	e014      	b.n	800b664 <_svfiprintf_r+0x110>
 800b63a:	eba0 0308 	sub.w	r3, r0, r8
 800b63e:	fa09 f303 	lsl.w	r3, r9, r3
 800b642:	4313      	orrs	r3, r2
 800b644:	9304      	str	r3, [sp, #16]
 800b646:	46a2      	mov	sl, r4
 800b648:	e7d2      	b.n	800b5f0 <_svfiprintf_r+0x9c>
 800b64a:	9b03      	ldr	r3, [sp, #12]
 800b64c:	1d19      	adds	r1, r3, #4
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	9103      	str	r1, [sp, #12]
 800b652:	2b00      	cmp	r3, #0
 800b654:	bfbb      	ittet	lt
 800b656:	425b      	neglt	r3, r3
 800b658:	f042 0202 	orrlt.w	r2, r2, #2
 800b65c:	9307      	strge	r3, [sp, #28]
 800b65e:	9307      	strlt	r3, [sp, #28]
 800b660:	bfb8      	it	lt
 800b662:	9204      	strlt	r2, [sp, #16]
 800b664:	7823      	ldrb	r3, [r4, #0]
 800b666:	2b2e      	cmp	r3, #46	; 0x2e
 800b668:	d10c      	bne.n	800b684 <_svfiprintf_r+0x130>
 800b66a:	7863      	ldrb	r3, [r4, #1]
 800b66c:	2b2a      	cmp	r3, #42	; 0x2a
 800b66e:	d135      	bne.n	800b6dc <_svfiprintf_r+0x188>
 800b670:	9b03      	ldr	r3, [sp, #12]
 800b672:	1d1a      	adds	r2, r3, #4
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	9203      	str	r2, [sp, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	bfb8      	it	lt
 800b67c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b680:	3402      	adds	r4, #2
 800b682:	9305      	str	r3, [sp, #20]
 800b684:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b750 <_svfiprintf_r+0x1fc>
 800b688:	7821      	ldrb	r1, [r4, #0]
 800b68a:	2203      	movs	r2, #3
 800b68c:	4650      	mov	r0, sl
 800b68e:	f7f4 fda7 	bl	80001e0 <memchr>
 800b692:	b140      	cbz	r0, 800b6a6 <_svfiprintf_r+0x152>
 800b694:	2340      	movs	r3, #64	; 0x40
 800b696:	eba0 000a 	sub.w	r0, r0, sl
 800b69a:	fa03 f000 	lsl.w	r0, r3, r0
 800b69e:	9b04      	ldr	r3, [sp, #16]
 800b6a0:	4303      	orrs	r3, r0
 800b6a2:	3401      	adds	r4, #1
 800b6a4:	9304      	str	r3, [sp, #16]
 800b6a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6aa:	4826      	ldr	r0, [pc, #152]	; (800b744 <_svfiprintf_r+0x1f0>)
 800b6ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6b0:	2206      	movs	r2, #6
 800b6b2:	f7f4 fd95 	bl	80001e0 <memchr>
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d038      	beq.n	800b72c <_svfiprintf_r+0x1d8>
 800b6ba:	4b23      	ldr	r3, [pc, #140]	; (800b748 <_svfiprintf_r+0x1f4>)
 800b6bc:	bb1b      	cbnz	r3, 800b706 <_svfiprintf_r+0x1b2>
 800b6be:	9b03      	ldr	r3, [sp, #12]
 800b6c0:	3307      	adds	r3, #7
 800b6c2:	f023 0307 	bic.w	r3, r3, #7
 800b6c6:	3308      	adds	r3, #8
 800b6c8:	9303      	str	r3, [sp, #12]
 800b6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6cc:	4433      	add	r3, r6
 800b6ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b6d0:	e767      	b.n	800b5a2 <_svfiprintf_r+0x4e>
 800b6d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6d6:	460c      	mov	r4, r1
 800b6d8:	2001      	movs	r0, #1
 800b6da:	e7a5      	b.n	800b628 <_svfiprintf_r+0xd4>
 800b6dc:	2300      	movs	r3, #0
 800b6de:	3401      	adds	r4, #1
 800b6e0:	9305      	str	r3, [sp, #20]
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	f04f 0c0a 	mov.w	ip, #10
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6ee:	3a30      	subs	r2, #48	; 0x30
 800b6f0:	2a09      	cmp	r2, #9
 800b6f2:	d903      	bls.n	800b6fc <_svfiprintf_r+0x1a8>
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d0c5      	beq.n	800b684 <_svfiprintf_r+0x130>
 800b6f8:	9105      	str	r1, [sp, #20]
 800b6fa:	e7c3      	b.n	800b684 <_svfiprintf_r+0x130>
 800b6fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b700:	4604      	mov	r4, r0
 800b702:	2301      	movs	r3, #1
 800b704:	e7f0      	b.n	800b6e8 <_svfiprintf_r+0x194>
 800b706:	ab03      	add	r3, sp, #12
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	462a      	mov	r2, r5
 800b70c:	4b0f      	ldr	r3, [pc, #60]	; (800b74c <_svfiprintf_r+0x1f8>)
 800b70e:	a904      	add	r1, sp, #16
 800b710:	4638      	mov	r0, r7
 800b712:	f7fd ffcb 	bl	80096ac <_printf_float>
 800b716:	1c42      	adds	r2, r0, #1
 800b718:	4606      	mov	r6, r0
 800b71a:	d1d6      	bne.n	800b6ca <_svfiprintf_r+0x176>
 800b71c:	89ab      	ldrh	r3, [r5, #12]
 800b71e:	065b      	lsls	r3, r3, #25
 800b720:	f53f af2c 	bmi.w	800b57c <_svfiprintf_r+0x28>
 800b724:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b726:	b01d      	add	sp, #116	; 0x74
 800b728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b72c:	ab03      	add	r3, sp, #12
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	462a      	mov	r2, r5
 800b732:	4b06      	ldr	r3, [pc, #24]	; (800b74c <_svfiprintf_r+0x1f8>)
 800b734:	a904      	add	r1, sp, #16
 800b736:	4638      	mov	r0, r7
 800b738:	f7fe fa5c 	bl	8009bf4 <_printf_i>
 800b73c:	e7eb      	b.n	800b716 <_svfiprintf_r+0x1c2>
 800b73e:	bf00      	nop
 800b740:	0800c5ac 	.word	0x0800c5ac
 800b744:	0800c5b6 	.word	0x0800c5b6
 800b748:	080096ad 	.word	0x080096ad
 800b74c:	0800b49d 	.word	0x0800b49d
 800b750:	0800c5b2 	.word	0x0800c5b2

0800b754 <_sbrk_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	4d06      	ldr	r5, [pc, #24]	; (800b770 <_sbrk_r+0x1c>)
 800b758:	2300      	movs	r3, #0
 800b75a:	4604      	mov	r4, r0
 800b75c:	4608      	mov	r0, r1
 800b75e:	602b      	str	r3, [r5, #0]
 800b760:	f7f7 fa82 	bl	8002c68 <_sbrk>
 800b764:	1c43      	adds	r3, r0, #1
 800b766:	d102      	bne.n	800b76e <_sbrk_r+0x1a>
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	b103      	cbz	r3, 800b76e <_sbrk_r+0x1a>
 800b76c:	6023      	str	r3, [r4, #0]
 800b76e:	bd38      	pop	{r3, r4, r5, pc}
 800b770:	200018b4 	.word	0x200018b4

0800b774 <__assert_func>:
 800b774:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b776:	4614      	mov	r4, r2
 800b778:	461a      	mov	r2, r3
 800b77a:	4b09      	ldr	r3, [pc, #36]	; (800b7a0 <__assert_func+0x2c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4605      	mov	r5, r0
 800b780:	68d8      	ldr	r0, [r3, #12]
 800b782:	b14c      	cbz	r4, 800b798 <__assert_func+0x24>
 800b784:	4b07      	ldr	r3, [pc, #28]	; (800b7a4 <__assert_func+0x30>)
 800b786:	9100      	str	r1, [sp, #0]
 800b788:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b78c:	4906      	ldr	r1, [pc, #24]	; (800b7a8 <__assert_func+0x34>)
 800b78e:	462b      	mov	r3, r5
 800b790:	f000 f80e 	bl	800b7b0 <fiprintf>
 800b794:	f000 faac 	bl	800bcf0 <abort>
 800b798:	4b04      	ldr	r3, [pc, #16]	; (800b7ac <__assert_func+0x38>)
 800b79a:	461c      	mov	r4, r3
 800b79c:	e7f3      	b.n	800b786 <__assert_func+0x12>
 800b79e:	bf00      	nop
 800b7a0:	2000000c 	.word	0x2000000c
 800b7a4:	0800c5bd 	.word	0x0800c5bd
 800b7a8:	0800c5ca 	.word	0x0800c5ca
 800b7ac:	0800c5f8 	.word	0x0800c5f8

0800b7b0 <fiprintf>:
 800b7b0:	b40e      	push	{r1, r2, r3}
 800b7b2:	b503      	push	{r0, r1, lr}
 800b7b4:	4601      	mov	r1, r0
 800b7b6:	ab03      	add	r3, sp, #12
 800b7b8:	4805      	ldr	r0, [pc, #20]	; (800b7d0 <fiprintf+0x20>)
 800b7ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7be:	6800      	ldr	r0, [r0, #0]
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	f000 f897 	bl	800b8f4 <_vfiprintf_r>
 800b7c6:	b002      	add	sp, #8
 800b7c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7cc:	b003      	add	sp, #12
 800b7ce:	4770      	bx	lr
 800b7d0:	2000000c 	.word	0x2000000c

0800b7d4 <__ascii_mbtowc>:
 800b7d4:	b082      	sub	sp, #8
 800b7d6:	b901      	cbnz	r1, 800b7da <__ascii_mbtowc+0x6>
 800b7d8:	a901      	add	r1, sp, #4
 800b7da:	b142      	cbz	r2, 800b7ee <__ascii_mbtowc+0x1a>
 800b7dc:	b14b      	cbz	r3, 800b7f2 <__ascii_mbtowc+0x1e>
 800b7de:	7813      	ldrb	r3, [r2, #0]
 800b7e0:	600b      	str	r3, [r1, #0]
 800b7e2:	7812      	ldrb	r2, [r2, #0]
 800b7e4:	1e10      	subs	r0, r2, #0
 800b7e6:	bf18      	it	ne
 800b7e8:	2001      	movne	r0, #1
 800b7ea:	b002      	add	sp, #8
 800b7ec:	4770      	bx	lr
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	e7fb      	b.n	800b7ea <__ascii_mbtowc+0x16>
 800b7f2:	f06f 0001 	mvn.w	r0, #1
 800b7f6:	e7f8      	b.n	800b7ea <__ascii_mbtowc+0x16>

0800b7f8 <memmove>:
 800b7f8:	4288      	cmp	r0, r1
 800b7fa:	b510      	push	{r4, lr}
 800b7fc:	eb01 0402 	add.w	r4, r1, r2
 800b800:	d902      	bls.n	800b808 <memmove+0x10>
 800b802:	4284      	cmp	r4, r0
 800b804:	4623      	mov	r3, r4
 800b806:	d807      	bhi.n	800b818 <memmove+0x20>
 800b808:	1e43      	subs	r3, r0, #1
 800b80a:	42a1      	cmp	r1, r4
 800b80c:	d008      	beq.n	800b820 <memmove+0x28>
 800b80e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b812:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b816:	e7f8      	b.n	800b80a <memmove+0x12>
 800b818:	4402      	add	r2, r0
 800b81a:	4601      	mov	r1, r0
 800b81c:	428a      	cmp	r2, r1
 800b81e:	d100      	bne.n	800b822 <memmove+0x2a>
 800b820:	bd10      	pop	{r4, pc}
 800b822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b82a:	e7f7      	b.n	800b81c <memmove+0x24>

0800b82c <__malloc_lock>:
 800b82c:	4801      	ldr	r0, [pc, #4]	; (800b834 <__malloc_lock+0x8>)
 800b82e:	f000 bc1f 	b.w	800c070 <__retarget_lock_acquire_recursive>
 800b832:	bf00      	nop
 800b834:	200018b8 	.word	0x200018b8

0800b838 <__malloc_unlock>:
 800b838:	4801      	ldr	r0, [pc, #4]	; (800b840 <__malloc_unlock+0x8>)
 800b83a:	f000 bc1a 	b.w	800c072 <__retarget_lock_release_recursive>
 800b83e:	bf00      	nop
 800b840:	200018b8 	.word	0x200018b8

0800b844 <_realloc_r>:
 800b844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b848:	4680      	mov	r8, r0
 800b84a:	4614      	mov	r4, r2
 800b84c:	460e      	mov	r6, r1
 800b84e:	b921      	cbnz	r1, 800b85a <_realloc_r+0x16>
 800b850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b854:	4611      	mov	r1, r2
 800b856:	f7ff bdad 	b.w	800b3b4 <_malloc_r>
 800b85a:	b92a      	cbnz	r2, 800b868 <_realloc_r+0x24>
 800b85c:	f7ff fd3e 	bl	800b2dc <_free_r>
 800b860:	4625      	mov	r5, r4
 800b862:	4628      	mov	r0, r5
 800b864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b868:	f000 fc6a 	bl	800c140 <_malloc_usable_size_r>
 800b86c:	4284      	cmp	r4, r0
 800b86e:	4607      	mov	r7, r0
 800b870:	d802      	bhi.n	800b878 <_realloc_r+0x34>
 800b872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b876:	d812      	bhi.n	800b89e <_realloc_r+0x5a>
 800b878:	4621      	mov	r1, r4
 800b87a:	4640      	mov	r0, r8
 800b87c:	f7ff fd9a 	bl	800b3b4 <_malloc_r>
 800b880:	4605      	mov	r5, r0
 800b882:	2800      	cmp	r0, #0
 800b884:	d0ed      	beq.n	800b862 <_realloc_r+0x1e>
 800b886:	42bc      	cmp	r4, r7
 800b888:	4622      	mov	r2, r4
 800b88a:	4631      	mov	r1, r6
 800b88c:	bf28      	it	cs
 800b88e:	463a      	movcs	r2, r7
 800b890:	f7ff f97c 	bl	800ab8c <memcpy>
 800b894:	4631      	mov	r1, r6
 800b896:	4640      	mov	r0, r8
 800b898:	f7ff fd20 	bl	800b2dc <_free_r>
 800b89c:	e7e1      	b.n	800b862 <_realloc_r+0x1e>
 800b89e:	4635      	mov	r5, r6
 800b8a0:	e7df      	b.n	800b862 <_realloc_r+0x1e>

0800b8a2 <__sfputc_r>:
 800b8a2:	6893      	ldr	r3, [r2, #8]
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	b410      	push	{r4}
 800b8aa:	6093      	str	r3, [r2, #8]
 800b8ac:	da08      	bge.n	800b8c0 <__sfputc_r+0x1e>
 800b8ae:	6994      	ldr	r4, [r2, #24]
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	db01      	blt.n	800b8b8 <__sfputc_r+0x16>
 800b8b4:	290a      	cmp	r1, #10
 800b8b6:	d103      	bne.n	800b8c0 <__sfputc_r+0x1e>
 800b8b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8bc:	f000 b94a 	b.w	800bb54 <__swbuf_r>
 800b8c0:	6813      	ldr	r3, [r2, #0]
 800b8c2:	1c58      	adds	r0, r3, #1
 800b8c4:	6010      	str	r0, [r2, #0]
 800b8c6:	7019      	strb	r1, [r3, #0]
 800b8c8:	4608      	mov	r0, r1
 800b8ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8ce:	4770      	bx	lr

0800b8d0 <__sfputs_r>:
 800b8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	460f      	mov	r7, r1
 800b8d6:	4614      	mov	r4, r2
 800b8d8:	18d5      	adds	r5, r2, r3
 800b8da:	42ac      	cmp	r4, r5
 800b8dc:	d101      	bne.n	800b8e2 <__sfputs_r+0x12>
 800b8de:	2000      	movs	r0, #0
 800b8e0:	e007      	b.n	800b8f2 <__sfputs_r+0x22>
 800b8e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8e6:	463a      	mov	r2, r7
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	f7ff ffda 	bl	800b8a2 <__sfputc_r>
 800b8ee:	1c43      	adds	r3, r0, #1
 800b8f0:	d1f3      	bne.n	800b8da <__sfputs_r+0xa>
 800b8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8f4 <_vfiprintf_r>:
 800b8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f8:	460d      	mov	r5, r1
 800b8fa:	b09d      	sub	sp, #116	; 0x74
 800b8fc:	4614      	mov	r4, r2
 800b8fe:	4698      	mov	r8, r3
 800b900:	4606      	mov	r6, r0
 800b902:	b118      	cbz	r0, 800b90c <_vfiprintf_r+0x18>
 800b904:	6983      	ldr	r3, [r0, #24]
 800b906:	b90b      	cbnz	r3, 800b90c <_vfiprintf_r+0x18>
 800b908:	f000 fb14 	bl	800bf34 <__sinit>
 800b90c:	4b89      	ldr	r3, [pc, #548]	; (800bb34 <_vfiprintf_r+0x240>)
 800b90e:	429d      	cmp	r5, r3
 800b910:	d11b      	bne.n	800b94a <_vfiprintf_r+0x56>
 800b912:	6875      	ldr	r5, [r6, #4]
 800b914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b916:	07d9      	lsls	r1, r3, #31
 800b918:	d405      	bmi.n	800b926 <_vfiprintf_r+0x32>
 800b91a:	89ab      	ldrh	r3, [r5, #12]
 800b91c:	059a      	lsls	r2, r3, #22
 800b91e:	d402      	bmi.n	800b926 <_vfiprintf_r+0x32>
 800b920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b922:	f000 fba5 	bl	800c070 <__retarget_lock_acquire_recursive>
 800b926:	89ab      	ldrh	r3, [r5, #12]
 800b928:	071b      	lsls	r3, r3, #28
 800b92a:	d501      	bpl.n	800b930 <_vfiprintf_r+0x3c>
 800b92c:	692b      	ldr	r3, [r5, #16]
 800b92e:	b9eb      	cbnz	r3, 800b96c <_vfiprintf_r+0x78>
 800b930:	4629      	mov	r1, r5
 800b932:	4630      	mov	r0, r6
 800b934:	f000 f96e 	bl	800bc14 <__swsetup_r>
 800b938:	b1c0      	cbz	r0, 800b96c <_vfiprintf_r+0x78>
 800b93a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b93c:	07dc      	lsls	r4, r3, #31
 800b93e:	d50e      	bpl.n	800b95e <_vfiprintf_r+0x6a>
 800b940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b944:	b01d      	add	sp, #116	; 0x74
 800b946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94a:	4b7b      	ldr	r3, [pc, #492]	; (800bb38 <_vfiprintf_r+0x244>)
 800b94c:	429d      	cmp	r5, r3
 800b94e:	d101      	bne.n	800b954 <_vfiprintf_r+0x60>
 800b950:	68b5      	ldr	r5, [r6, #8]
 800b952:	e7df      	b.n	800b914 <_vfiprintf_r+0x20>
 800b954:	4b79      	ldr	r3, [pc, #484]	; (800bb3c <_vfiprintf_r+0x248>)
 800b956:	429d      	cmp	r5, r3
 800b958:	bf08      	it	eq
 800b95a:	68f5      	ldreq	r5, [r6, #12]
 800b95c:	e7da      	b.n	800b914 <_vfiprintf_r+0x20>
 800b95e:	89ab      	ldrh	r3, [r5, #12]
 800b960:	0598      	lsls	r0, r3, #22
 800b962:	d4ed      	bmi.n	800b940 <_vfiprintf_r+0x4c>
 800b964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b966:	f000 fb84 	bl	800c072 <__retarget_lock_release_recursive>
 800b96a:	e7e9      	b.n	800b940 <_vfiprintf_r+0x4c>
 800b96c:	2300      	movs	r3, #0
 800b96e:	9309      	str	r3, [sp, #36]	; 0x24
 800b970:	2320      	movs	r3, #32
 800b972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b976:	f8cd 800c 	str.w	r8, [sp, #12]
 800b97a:	2330      	movs	r3, #48	; 0x30
 800b97c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb40 <_vfiprintf_r+0x24c>
 800b980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b984:	f04f 0901 	mov.w	r9, #1
 800b988:	4623      	mov	r3, r4
 800b98a:	469a      	mov	sl, r3
 800b98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b990:	b10a      	cbz	r2, 800b996 <_vfiprintf_r+0xa2>
 800b992:	2a25      	cmp	r2, #37	; 0x25
 800b994:	d1f9      	bne.n	800b98a <_vfiprintf_r+0x96>
 800b996:	ebba 0b04 	subs.w	fp, sl, r4
 800b99a:	d00b      	beq.n	800b9b4 <_vfiprintf_r+0xc0>
 800b99c:	465b      	mov	r3, fp
 800b99e:	4622      	mov	r2, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f7ff ff94 	bl	800b8d0 <__sfputs_r>
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	f000 80aa 	beq.w	800bb02 <_vfiprintf_r+0x20e>
 800b9ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9b0:	445a      	add	r2, fp
 800b9b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f000 80a2 	beq.w	800bb02 <_vfiprintf_r+0x20e>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c8:	f10a 0a01 	add.w	sl, sl, #1
 800b9cc:	9304      	str	r3, [sp, #16]
 800b9ce:	9307      	str	r3, [sp, #28]
 800b9d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9d4:	931a      	str	r3, [sp, #104]	; 0x68
 800b9d6:	4654      	mov	r4, sl
 800b9d8:	2205      	movs	r2, #5
 800b9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9de:	4858      	ldr	r0, [pc, #352]	; (800bb40 <_vfiprintf_r+0x24c>)
 800b9e0:	f7f4 fbfe 	bl	80001e0 <memchr>
 800b9e4:	9a04      	ldr	r2, [sp, #16]
 800b9e6:	b9d8      	cbnz	r0, 800ba20 <_vfiprintf_r+0x12c>
 800b9e8:	06d1      	lsls	r1, r2, #27
 800b9ea:	bf44      	itt	mi
 800b9ec:	2320      	movmi	r3, #32
 800b9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9f2:	0713      	lsls	r3, r2, #28
 800b9f4:	bf44      	itt	mi
 800b9f6:	232b      	movmi	r3, #43	; 0x2b
 800b9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800ba00:	2b2a      	cmp	r3, #42	; 0x2a
 800ba02:	d015      	beq.n	800ba30 <_vfiprintf_r+0x13c>
 800ba04:	9a07      	ldr	r2, [sp, #28]
 800ba06:	4654      	mov	r4, sl
 800ba08:	2000      	movs	r0, #0
 800ba0a:	f04f 0c0a 	mov.w	ip, #10
 800ba0e:	4621      	mov	r1, r4
 800ba10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba14:	3b30      	subs	r3, #48	; 0x30
 800ba16:	2b09      	cmp	r3, #9
 800ba18:	d94e      	bls.n	800bab8 <_vfiprintf_r+0x1c4>
 800ba1a:	b1b0      	cbz	r0, 800ba4a <_vfiprintf_r+0x156>
 800ba1c:	9207      	str	r2, [sp, #28]
 800ba1e:	e014      	b.n	800ba4a <_vfiprintf_r+0x156>
 800ba20:	eba0 0308 	sub.w	r3, r0, r8
 800ba24:	fa09 f303 	lsl.w	r3, r9, r3
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	9304      	str	r3, [sp, #16]
 800ba2c:	46a2      	mov	sl, r4
 800ba2e:	e7d2      	b.n	800b9d6 <_vfiprintf_r+0xe2>
 800ba30:	9b03      	ldr	r3, [sp, #12]
 800ba32:	1d19      	adds	r1, r3, #4
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	9103      	str	r1, [sp, #12]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	bfbb      	ittet	lt
 800ba3c:	425b      	neglt	r3, r3
 800ba3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba42:	9307      	strge	r3, [sp, #28]
 800ba44:	9307      	strlt	r3, [sp, #28]
 800ba46:	bfb8      	it	lt
 800ba48:	9204      	strlt	r2, [sp, #16]
 800ba4a:	7823      	ldrb	r3, [r4, #0]
 800ba4c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba4e:	d10c      	bne.n	800ba6a <_vfiprintf_r+0x176>
 800ba50:	7863      	ldrb	r3, [r4, #1]
 800ba52:	2b2a      	cmp	r3, #42	; 0x2a
 800ba54:	d135      	bne.n	800bac2 <_vfiprintf_r+0x1ce>
 800ba56:	9b03      	ldr	r3, [sp, #12]
 800ba58:	1d1a      	adds	r2, r3, #4
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	9203      	str	r2, [sp, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	bfb8      	it	lt
 800ba62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ba66:	3402      	adds	r4, #2
 800ba68:	9305      	str	r3, [sp, #20]
 800ba6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb50 <_vfiprintf_r+0x25c>
 800ba6e:	7821      	ldrb	r1, [r4, #0]
 800ba70:	2203      	movs	r2, #3
 800ba72:	4650      	mov	r0, sl
 800ba74:	f7f4 fbb4 	bl	80001e0 <memchr>
 800ba78:	b140      	cbz	r0, 800ba8c <_vfiprintf_r+0x198>
 800ba7a:	2340      	movs	r3, #64	; 0x40
 800ba7c:	eba0 000a 	sub.w	r0, r0, sl
 800ba80:	fa03 f000 	lsl.w	r0, r3, r0
 800ba84:	9b04      	ldr	r3, [sp, #16]
 800ba86:	4303      	orrs	r3, r0
 800ba88:	3401      	adds	r4, #1
 800ba8a:	9304      	str	r3, [sp, #16]
 800ba8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba90:	482c      	ldr	r0, [pc, #176]	; (800bb44 <_vfiprintf_r+0x250>)
 800ba92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba96:	2206      	movs	r2, #6
 800ba98:	f7f4 fba2 	bl	80001e0 <memchr>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d03f      	beq.n	800bb20 <_vfiprintf_r+0x22c>
 800baa0:	4b29      	ldr	r3, [pc, #164]	; (800bb48 <_vfiprintf_r+0x254>)
 800baa2:	bb1b      	cbnz	r3, 800baec <_vfiprintf_r+0x1f8>
 800baa4:	9b03      	ldr	r3, [sp, #12]
 800baa6:	3307      	adds	r3, #7
 800baa8:	f023 0307 	bic.w	r3, r3, #7
 800baac:	3308      	adds	r3, #8
 800baae:	9303      	str	r3, [sp, #12]
 800bab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bab2:	443b      	add	r3, r7
 800bab4:	9309      	str	r3, [sp, #36]	; 0x24
 800bab6:	e767      	b.n	800b988 <_vfiprintf_r+0x94>
 800bab8:	fb0c 3202 	mla	r2, ip, r2, r3
 800babc:	460c      	mov	r4, r1
 800babe:	2001      	movs	r0, #1
 800bac0:	e7a5      	b.n	800ba0e <_vfiprintf_r+0x11a>
 800bac2:	2300      	movs	r3, #0
 800bac4:	3401      	adds	r4, #1
 800bac6:	9305      	str	r3, [sp, #20]
 800bac8:	4619      	mov	r1, r3
 800baca:	f04f 0c0a 	mov.w	ip, #10
 800bace:	4620      	mov	r0, r4
 800bad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bad4:	3a30      	subs	r2, #48	; 0x30
 800bad6:	2a09      	cmp	r2, #9
 800bad8:	d903      	bls.n	800bae2 <_vfiprintf_r+0x1ee>
 800bada:	2b00      	cmp	r3, #0
 800badc:	d0c5      	beq.n	800ba6a <_vfiprintf_r+0x176>
 800bade:	9105      	str	r1, [sp, #20]
 800bae0:	e7c3      	b.n	800ba6a <_vfiprintf_r+0x176>
 800bae2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bae6:	4604      	mov	r4, r0
 800bae8:	2301      	movs	r3, #1
 800baea:	e7f0      	b.n	800bace <_vfiprintf_r+0x1da>
 800baec:	ab03      	add	r3, sp, #12
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	462a      	mov	r2, r5
 800baf2:	4b16      	ldr	r3, [pc, #88]	; (800bb4c <_vfiprintf_r+0x258>)
 800baf4:	a904      	add	r1, sp, #16
 800baf6:	4630      	mov	r0, r6
 800baf8:	f7fd fdd8 	bl	80096ac <_printf_float>
 800bafc:	4607      	mov	r7, r0
 800bafe:	1c78      	adds	r0, r7, #1
 800bb00:	d1d6      	bne.n	800bab0 <_vfiprintf_r+0x1bc>
 800bb02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb04:	07d9      	lsls	r1, r3, #31
 800bb06:	d405      	bmi.n	800bb14 <_vfiprintf_r+0x220>
 800bb08:	89ab      	ldrh	r3, [r5, #12]
 800bb0a:	059a      	lsls	r2, r3, #22
 800bb0c:	d402      	bmi.n	800bb14 <_vfiprintf_r+0x220>
 800bb0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb10:	f000 faaf 	bl	800c072 <__retarget_lock_release_recursive>
 800bb14:	89ab      	ldrh	r3, [r5, #12]
 800bb16:	065b      	lsls	r3, r3, #25
 800bb18:	f53f af12 	bmi.w	800b940 <_vfiprintf_r+0x4c>
 800bb1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb1e:	e711      	b.n	800b944 <_vfiprintf_r+0x50>
 800bb20:	ab03      	add	r3, sp, #12
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	462a      	mov	r2, r5
 800bb26:	4b09      	ldr	r3, [pc, #36]	; (800bb4c <_vfiprintf_r+0x258>)
 800bb28:	a904      	add	r1, sp, #16
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	f7fe f862 	bl	8009bf4 <_printf_i>
 800bb30:	e7e4      	b.n	800bafc <_vfiprintf_r+0x208>
 800bb32:	bf00      	nop
 800bb34:	0800c724 	.word	0x0800c724
 800bb38:	0800c744 	.word	0x0800c744
 800bb3c:	0800c704 	.word	0x0800c704
 800bb40:	0800c5ac 	.word	0x0800c5ac
 800bb44:	0800c5b6 	.word	0x0800c5b6
 800bb48:	080096ad 	.word	0x080096ad
 800bb4c:	0800b8d1 	.word	0x0800b8d1
 800bb50:	0800c5b2 	.word	0x0800c5b2

0800bb54 <__swbuf_r>:
 800bb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb56:	460e      	mov	r6, r1
 800bb58:	4614      	mov	r4, r2
 800bb5a:	4605      	mov	r5, r0
 800bb5c:	b118      	cbz	r0, 800bb66 <__swbuf_r+0x12>
 800bb5e:	6983      	ldr	r3, [r0, #24]
 800bb60:	b90b      	cbnz	r3, 800bb66 <__swbuf_r+0x12>
 800bb62:	f000 f9e7 	bl	800bf34 <__sinit>
 800bb66:	4b21      	ldr	r3, [pc, #132]	; (800bbec <__swbuf_r+0x98>)
 800bb68:	429c      	cmp	r4, r3
 800bb6a:	d12b      	bne.n	800bbc4 <__swbuf_r+0x70>
 800bb6c:	686c      	ldr	r4, [r5, #4]
 800bb6e:	69a3      	ldr	r3, [r4, #24]
 800bb70:	60a3      	str	r3, [r4, #8]
 800bb72:	89a3      	ldrh	r3, [r4, #12]
 800bb74:	071a      	lsls	r2, r3, #28
 800bb76:	d52f      	bpl.n	800bbd8 <__swbuf_r+0x84>
 800bb78:	6923      	ldr	r3, [r4, #16]
 800bb7a:	b36b      	cbz	r3, 800bbd8 <__swbuf_r+0x84>
 800bb7c:	6923      	ldr	r3, [r4, #16]
 800bb7e:	6820      	ldr	r0, [r4, #0]
 800bb80:	1ac0      	subs	r0, r0, r3
 800bb82:	6963      	ldr	r3, [r4, #20]
 800bb84:	b2f6      	uxtb	r6, r6
 800bb86:	4283      	cmp	r3, r0
 800bb88:	4637      	mov	r7, r6
 800bb8a:	dc04      	bgt.n	800bb96 <__swbuf_r+0x42>
 800bb8c:	4621      	mov	r1, r4
 800bb8e:	4628      	mov	r0, r5
 800bb90:	f000 f93c 	bl	800be0c <_fflush_r>
 800bb94:	bb30      	cbnz	r0, 800bbe4 <__swbuf_r+0x90>
 800bb96:	68a3      	ldr	r3, [r4, #8]
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	60a3      	str	r3, [r4, #8]
 800bb9c:	6823      	ldr	r3, [r4, #0]
 800bb9e:	1c5a      	adds	r2, r3, #1
 800bba0:	6022      	str	r2, [r4, #0]
 800bba2:	701e      	strb	r6, [r3, #0]
 800bba4:	6963      	ldr	r3, [r4, #20]
 800bba6:	3001      	adds	r0, #1
 800bba8:	4283      	cmp	r3, r0
 800bbaa:	d004      	beq.n	800bbb6 <__swbuf_r+0x62>
 800bbac:	89a3      	ldrh	r3, [r4, #12]
 800bbae:	07db      	lsls	r3, r3, #31
 800bbb0:	d506      	bpl.n	800bbc0 <__swbuf_r+0x6c>
 800bbb2:	2e0a      	cmp	r6, #10
 800bbb4:	d104      	bne.n	800bbc0 <__swbuf_r+0x6c>
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	4628      	mov	r0, r5
 800bbba:	f000 f927 	bl	800be0c <_fflush_r>
 800bbbe:	b988      	cbnz	r0, 800bbe4 <__swbuf_r+0x90>
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbc4:	4b0a      	ldr	r3, [pc, #40]	; (800bbf0 <__swbuf_r+0x9c>)
 800bbc6:	429c      	cmp	r4, r3
 800bbc8:	d101      	bne.n	800bbce <__swbuf_r+0x7a>
 800bbca:	68ac      	ldr	r4, [r5, #8]
 800bbcc:	e7cf      	b.n	800bb6e <__swbuf_r+0x1a>
 800bbce:	4b09      	ldr	r3, [pc, #36]	; (800bbf4 <__swbuf_r+0xa0>)
 800bbd0:	429c      	cmp	r4, r3
 800bbd2:	bf08      	it	eq
 800bbd4:	68ec      	ldreq	r4, [r5, #12]
 800bbd6:	e7ca      	b.n	800bb6e <__swbuf_r+0x1a>
 800bbd8:	4621      	mov	r1, r4
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f000 f81a 	bl	800bc14 <__swsetup_r>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d0cb      	beq.n	800bb7c <__swbuf_r+0x28>
 800bbe4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bbe8:	e7ea      	b.n	800bbc0 <__swbuf_r+0x6c>
 800bbea:	bf00      	nop
 800bbec:	0800c724 	.word	0x0800c724
 800bbf0:	0800c744 	.word	0x0800c744
 800bbf4:	0800c704 	.word	0x0800c704

0800bbf8 <__ascii_wctomb>:
 800bbf8:	b149      	cbz	r1, 800bc0e <__ascii_wctomb+0x16>
 800bbfa:	2aff      	cmp	r2, #255	; 0xff
 800bbfc:	bf85      	ittet	hi
 800bbfe:	238a      	movhi	r3, #138	; 0x8a
 800bc00:	6003      	strhi	r3, [r0, #0]
 800bc02:	700a      	strbls	r2, [r1, #0]
 800bc04:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bc08:	bf98      	it	ls
 800bc0a:	2001      	movls	r0, #1
 800bc0c:	4770      	bx	lr
 800bc0e:	4608      	mov	r0, r1
 800bc10:	4770      	bx	lr
	...

0800bc14 <__swsetup_r>:
 800bc14:	4b32      	ldr	r3, [pc, #200]	; (800bce0 <__swsetup_r+0xcc>)
 800bc16:	b570      	push	{r4, r5, r6, lr}
 800bc18:	681d      	ldr	r5, [r3, #0]
 800bc1a:	4606      	mov	r6, r0
 800bc1c:	460c      	mov	r4, r1
 800bc1e:	b125      	cbz	r5, 800bc2a <__swsetup_r+0x16>
 800bc20:	69ab      	ldr	r3, [r5, #24]
 800bc22:	b913      	cbnz	r3, 800bc2a <__swsetup_r+0x16>
 800bc24:	4628      	mov	r0, r5
 800bc26:	f000 f985 	bl	800bf34 <__sinit>
 800bc2a:	4b2e      	ldr	r3, [pc, #184]	; (800bce4 <__swsetup_r+0xd0>)
 800bc2c:	429c      	cmp	r4, r3
 800bc2e:	d10f      	bne.n	800bc50 <__swsetup_r+0x3c>
 800bc30:	686c      	ldr	r4, [r5, #4]
 800bc32:	89a3      	ldrh	r3, [r4, #12]
 800bc34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc38:	0719      	lsls	r1, r3, #28
 800bc3a:	d42c      	bmi.n	800bc96 <__swsetup_r+0x82>
 800bc3c:	06dd      	lsls	r5, r3, #27
 800bc3e:	d411      	bmi.n	800bc64 <__swsetup_r+0x50>
 800bc40:	2309      	movs	r3, #9
 800bc42:	6033      	str	r3, [r6, #0]
 800bc44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc48:	81a3      	strh	r3, [r4, #12]
 800bc4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc4e:	e03e      	b.n	800bcce <__swsetup_r+0xba>
 800bc50:	4b25      	ldr	r3, [pc, #148]	; (800bce8 <__swsetup_r+0xd4>)
 800bc52:	429c      	cmp	r4, r3
 800bc54:	d101      	bne.n	800bc5a <__swsetup_r+0x46>
 800bc56:	68ac      	ldr	r4, [r5, #8]
 800bc58:	e7eb      	b.n	800bc32 <__swsetup_r+0x1e>
 800bc5a:	4b24      	ldr	r3, [pc, #144]	; (800bcec <__swsetup_r+0xd8>)
 800bc5c:	429c      	cmp	r4, r3
 800bc5e:	bf08      	it	eq
 800bc60:	68ec      	ldreq	r4, [r5, #12]
 800bc62:	e7e6      	b.n	800bc32 <__swsetup_r+0x1e>
 800bc64:	0758      	lsls	r0, r3, #29
 800bc66:	d512      	bpl.n	800bc8e <__swsetup_r+0x7a>
 800bc68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc6a:	b141      	cbz	r1, 800bc7e <__swsetup_r+0x6a>
 800bc6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc70:	4299      	cmp	r1, r3
 800bc72:	d002      	beq.n	800bc7a <__swsetup_r+0x66>
 800bc74:	4630      	mov	r0, r6
 800bc76:	f7ff fb31 	bl	800b2dc <_free_r>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	6363      	str	r3, [r4, #52]	; 0x34
 800bc7e:	89a3      	ldrh	r3, [r4, #12]
 800bc80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc84:	81a3      	strh	r3, [r4, #12]
 800bc86:	2300      	movs	r3, #0
 800bc88:	6063      	str	r3, [r4, #4]
 800bc8a:	6923      	ldr	r3, [r4, #16]
 800bc8c:	6023      	str	r3, [r4, #0]
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	f043 0308 	orr.w	r3, r3, #8
 800bc94:	81a3      	strh	r3, [r4, #12]
 800bc96:	6923      	ldr	r3, [r4, #16]
 800bc98:	b94b      	cbnz	r3, 800bcae <__swsetup_r+0x9a>
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bca4:	d003      	beq.n	800bcae <__swsetup_r+0x9a>
 800bca6:	4621      	mov	r1, r4
 800bca8:	4630      	mov	r0, r6
 800bcaa:	f000 fa09 	bl	800c0c0 <__smakebuf_r>
 800bcae:	89a0      	ldrh	r0, [r4, #12]
 800bcb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcb4:	f010 0301 	ands.w	r3, r0, #1
 800bcb8:	d00a      	beq.n	800bcd0 <__swsetup_r+0xbc>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60a3      	str	r3, [r4, #8]
 800bcbe:	6963      	ldr	r3, [r4, #20]
 800bcc0:	425b      	negs	r3, r3
 800bcc2:	61a3      	str	r3, [r4, #24]
 800bcc4:	6923      	ldr	r3, [r4, #16]
 800bcc6:	b943      	cbnz	r3, 800bcda <__swsetup_r+0xc6>
 800bcc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bccc:	d1ba      	bne.n	800bc44 <__swsetup_r+0x30>
 800bcce:	bd70      	pop	{r4, r5, r6, pc}
 800bcd0:	0781      	lsls	r1, r0, #30
 800bcd2:	bf58      	it	pl
 800bcd4:	6963      	ldrpl	r3, [r4, #20]
 800bcd6:	60a3      	str	r3, [r4, #8]
 800bcd8:	e7f4      	b.n	800bcc4 <__swsetup_r+0xb0>
 800bcda:	2000      	movs	r0, #0
 800bcdc:	e7f7      	b.n	800bcce <__swsetup_r+0xba>
 800bcde:	bf00      	nop
 800bce0:	2000000c 	.word	0x2000000c
 800bce4:	0800c724 	.word	0x0800c724
 800bce8:	0800c744 	.word	0x0800c744
 800bcec:	0800c704 	.word	0x0800c704

0800bcf0 <abort>:
 800bcf0:	b508      	push	{r3, lr}
 800bcf2:	2006      	movs	r0, #6
 800bcf4:	f000 fa54 	bl	800c1a0 <raise>
 800bcf8:	2001      	movs	r0, #1
 800bcfa:	f7f6 ff3d 	bl	8002b78 <_exit>
	...

0800bd00 <__sflush_r>:
 800bd00:	898a      	ldrh	r2, [r1, #12]
 800bd02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd06:	4605      	mov	r5, r0
 800bd08:	0710      	lsls	r0, r2, #28
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	d458      	bmi.n	800bdc0 <__sflush_r+0xc0>
 800bd0e:	684b      	ldr	r3, [r1, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	dc05      	bgt.n	800bd20 <__sflush_r+0x20>
 800bd14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	dc02      	bgt.n	800bd20 <__sflush_r+0x20>
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd22:	2e00      	cmp	r6, #0
 800bd24:	d0f9      	beq.n	800bd1a <__sflush_r+0x1a>
 800bd26:	2300      	movs	r3, #0
 800bd28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd2c:	682f      	ldr	r7, [r5, #0]
 800bd2e:	602b      	str	r3, [r5, #0]
 800bd30:	d032      	beq.n	800bd98 <__sflush_r+0x98>
 800bd32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	075a      	lsls	r2, r3, #29
 800bd38:	d505      	bpl.n	800bd46 <__sflush_r+0x46>
 800bd3a:	6863      	ldr	r3, [r4, #4]
 800bd3c:	1ac0      	subs	r0, r0, r3
 800bd3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd40:	b10b      	cbz	r3, 800bd46 <__sflush_r+0x46>
 800bd42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd44:	1ac0      	subs	r0, r0, r3
 800bd46:	2300      	movs	r3, #0
 800bd48:	4602      	mov	r2, r0
 800bd4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd4c:	6a21      	ldr	r1, [r4, #32]
 800bd4e:	4628      	mov	r0, r5
 800bd50:	47b0      	blx	r6
 800bd52:	1c43      	adds	r3, r0, #1
 800bd54:	89a3      	ldrh	r3, [r4, #12]
 800bd56:	d106      	bne.n	800bd66 <__sflush_r+0x66>
 800bd58:	6829      	ldr	r1, [r5, #0]
 800bd5a:	291d      	cmp	r1, #29
 800bd5c:	d82c      	bhi.n	800bdb8 <__sflush_r+0xb8>
 800bd5e:	4a2a      	ldr	r2, [pc, #168]	; (800be08 <__sflush_r+0x108>)
 800bd60:	40ca      	lsrs	r2, r1
 800bd62:	07d6      	lsls	r6, r2, #31
 800bd64:	d528      	bpl.n	800bdb8 <__sflush_r+0xb8>
 800bd66:	2200      	movs	r2, #0
 800bd68:	6062      	str	r2, [r4, #4]
 800bd6a:	04d9      	lsls	r1, r3, #19
 800bd6c:	6922      	ldr	r2, [r4, #16]
 800bd6e:	6022      	str	r2, [r4, #0]
 800bd70:	d504      	bpl.n	800bd7c <__sflush_r+0x7c>
 800bd72:	1c42      	adds	r2, r0, #1
 800bd74:	d101      	bne.n	800bd7a <__sflush_r+0x7a>
 800bd76:	682b      	ldr	r3, [r5, #0]
 800bd78:	b903      	cbnz	r3, 800bd7c <__sflush_r+0x7c>
 800bd7a:	6560      	str	r0, [r4, #84]	; 0x54
 800bd7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd7e:	602f      	str	r7, [r5, #0]
 800bd80:	2900      	cmp	r1, #0
 800bd82:	d0ca      	beq.n	800bd1a <__sflush_r+0x1a>
 800bd84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd88:	4299      	cmp	r1, r3
 800bd8a:	d002      	beq.n	800bd92 <__sflush_r+0x92>
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	f7ff faa5 	bl	800b2dc <_free_r>
 800bd92:	2000      	movs	r0, #0
 800bd94:	6360      	str	r0, [r4, #52]	; 0x34
 800bd96:	e7c1      	b.n	800bd1c <__sflush_r+0x1c>
 800bd98:	6a21      	ldr	r1, [r4, #32]
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	47b0      	blx	r6
 800bda0:	1c41      	adds	r1, r0, #1
 800bda2:	d1c7      	bne.n	800bd34 <__sflush_r+0x34>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d0c4      	beq.n	800bd34 <__sflush_r+0x34>
 800bdaa:	2b1d      	cmp	r3, #29
 800bdac:	d001      	beq.n	800bdb2 <__sflush_r+0xb2>
 800bdae:	2b16      	cmp	r3, #22
 800bdb0:	d101      	bne.n	800bdb6 <__sflush_r+0xb6>
 800bdb2:	602f      	str	r7, [r5, #0]
 800bdb4:	e7b1      	b.n	800bd1a <__sflush_r+0x1a>
 800bdb6:	89a3      	ldrh	r3, [r4, #12]
 800bdb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdbc:	81a3      	strh	r3, [r4, #12]
 800bdbe:	e7ad      	b.n	800bd1c <__sflush_r+0x1c>
 800bdc0:	690f      	ldr	r7, [r1, #16]
 800bdc2:	2f00      	cmp	r7, #0
 800bdc4:	d0a9      	beq.n	800bd1a <__sflush_r+0x1a>
 800bdc6:	0793      	lsls	r3, r2, #30
 800bdc8:	680e      	ldr	r6, [r1, #0]
 800bdca:	bf08      	it	eq
 800bdcc:	694b      	ldreq	r3, [r1, #20]
 800bdce:	600f      	str	r7, [r1, #0]
 800bdd0:	bf18      	it	ne
 800bdd2:	2300      	movne	r3, #0
 800bdd4:	eba6 0807 	sub.w	r8, r6, r7
 800bdd8:	608b      	str	r3, [r1, #8]
 800bdda:	f1b8 0f00 	cmp.w	r8, #0
 800bdde:	dd9c      	ble.n	800bd1a <__sflush_r+0x1a>
 800bde0:	6a21      	ldr	r1, [r4, #32]
 800bde2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bde4:	4643      	mov	r3, r8
 800bde6:	463a      	mov	r2, r7
 800bde8:	4628      	mov	r0, r5
 800bdea:	47b0      	blx	r6
 800bdec:	2800      	cmp	r0, #0
 800bdee:	dc06      	bgt.n	800bdfe <__sflush_r+0xfe>
 800bdf0:	89a3      	ldrh	r3, [r4, #12]
 800bdf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdf6:	81a3      	strh	r3, [r4, #12]
 800bdf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdfc:	e78e      	b.n	800bd1c <__sflush_r+0x1c>
 800bdfe:	4407      	add	r7, r0
 800be00:	eba8 0800 	sub.w	r8, r8, r0
 800be04:	e7e9      	b.n	800bdda <__sflush_r+0xda>
 800be06:	bf00      	nop
 800be08:	20400001 	.word	0x20400001

0800be0c <_fflush_r>:
 800be0c:	b538      	push	{r3, r4, r5, lr}
 800be0e:	690b      	ldr	r3, [r1, #16]
 800be10:	4605      	mov	r5, r0
 800be12:	460c      	mov	r4, r1
 800be14:	b913      	cbnz	r3, 800be1c <_fflush_r+0x10>
 800be16:	2500      	movs	r5, #0
 800be18:	4628      	mov	r0, r5
 800be1a:	bd38      	pop	{r3, r4, r5, pc}
 800be1c:	b118      	cbz	r0, 800be26 <_fflush_r+0x1a>
 800be1e:	6983      	ldr	r3, [r0, #24]
 800be20:	b90b      	cbnz	r3, 800be26 <_fflush_r+0x1a>
 800be22:	f000 f887 	bl	800bf34 <__sinit>
 800be26:	4b14      	ldr	r3, [pc, #80]	; (800be78 <_fflush_r+0x6c>)
 800be28:	429c      	cmp	r4, r3
 800be2a:	d11b      	bne.n	800be64 <_fflush_r+0x58>
 800be2c:	686c      	ldr	r4, [r5, #4]
 800be2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d0ef      	beq.n	800be16 <_fflush_r+0xa>
 800be36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be38:	07d0      	lsls	r0, r2, #31
 800be3a:	d404      	bmi.n	800be46 <_fflush_r+0x3a>
 800be3c:	0599      	lsls	r1, r3, #22
 800be3e:	d402      	bmi.n	800be46 <_fflush_r+0x3a>
 800be40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be42:	f000 f915 	bl	800c070 <__retarget_lock_acquire_recursive>
 800be46:	4628      	mov	r0, r5
 800be48:	4621      	mov	r1, r4
 800be4a:	f7ff ff59 	bl	800bd00 <__sflush_r>
 800be4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be50:	07da      	lsls	r2, r3, #31
 800be52:	4605      	mov	r5, r0
 800be54:	d4e0      	bmi.n	800be18 <_fflush_r+0xc>
 800be56:	89a3      	ldrh	r3, [r4, #12]
 800be58:	059b      	lsls	r3, r3, #22
 800be5a:	d4dd      	bmi.n	800be18 <_fflush_r+0xc>
 800be5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be5e:	f000 f908 	bl	800c072 <__retarget_lock_release_recursive>
 800be62:	e7d9      	b.n	800be18 <_fflush_r+0xc>
 800be64:	4b05      	ldr	r3, [pc, #20]	; (800be7c <_fflush_r+0x70>)
 800be66:	429c      	cmp	r4, r3
 800be68:	d101      	bne.n	800be6e <_fflush_r+0x62>
 800be6a:	68ac      	ldr	r4, [r5, #8]
 800be6c:	e7df      	b.n	800be2e <_fflush_r+0x22>
 800be6e:	4b04      	ldr	r3, [pc, #16]	; (800be80 <_fflush_r+0x74>)
 800be70:	429c      	cmp	r4, r3
 800be72:	bf08      	it	eq
 800be74:	68ec      	ldreq	r4, [r5, #12]
 800be76:	e7da      	b.n	800be2e <_fflush_r+0x22>
 800be78:	0800c724 	.word	0x0800c724
 800be7c:	0800c744 	.word	0x0800c744
 800be80:	0800c704 	.word	0x0800c704

0800be84 <std>:
 800be84:	2300      	movs	r3, #0
 800be86:	b510      	push	{r4, lr}
 800be88:	4604      	mov	r4, r0
 800be8a:	e9c0 3300 	strd	r3, r3, [r0]
 800be8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be92:	6083      	str	r3, [r0, #8]
 800be94:	8181      	strh	r1, [r0, #12]
 800be96:	6643      	str	r3, [r0, #100]	; 0x64
 800be98:	81c2      	strh	r2, [r0, #14]
 800be9a:	6183      	str	r3, [r0, #24]
 800be9c:	4619      	mov	r1, r3
 800be9e:	2208      	movs	r2, #8
 800bea0:	305c      	adds	r0, #92	; 0x5c
 800bea2:	f7fd fb5b 	bl	800955c <memset>
 800bea6:	4b05      	ldr	r3, [pc, #20]	; (800bebc <std+0x38>)
 800bea8:	6263      	str	r3, [r4, #36]	; 0x24
 800beaa:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <std+0x3c>)
 800beac:	62a3      	str	r3, [r4, #40]	; 0x28
 800beae:	4b05      	ldr	r3, [pc, #20]	; (800bec4 <std+0x40>)
 800beb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800beb2:	4b05      	ldr	r3, [pc, #20]	; (800bec8 <std+0x44>)
 800beb4:	6224      	str	r4, [r4, #32]
 800beb6:	6323      	str	r3, [r4, #48]	; 0x30
 800beb8:	bd10      	pop	{r4, pc}
 800beba:	bf00      	nop
 800bebc:	0800c1d9 	.word	0x0800c1d9
 800bec0:	0800c1fb 	.word	0x0800c1fb
 800bec4:	0800c233 	.word	0x0800c233
 800bec8:	0800c257 	.word	0x0800c257

0800becc <_cleanup_r>:
 800becc:	4901      	ldr	r1, [pc, #4]	; (800bed4 <_cleanup_r+0x8>)
 800bece:	f000 b8af 	b.w	800c030 <_fwalk_reent>
 800bed2:	bf00      	nop
 800bed4:	0800be0d 	.word	0x0800be0d

0800bed8 <__sfmoreglue>:
 800bed8:	b570      	push	{r4, r5, r6, lr}
 800beda:	2268      	movs	r2, #104	; 0x68
 800bedc:	1e4d      	subs	r5, r1, #1
 800bede:	4355      	muls	r5, r2
 800bee0:	460e      	mov	r6, r1
 800bee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bee6:	f7ff fa65 	bl	800b3b4 <_malloc_r>
 800beea:	4604      	mov	r4, r0
 800beec:	b140      	cbz	r0, 800bf00 <__sfmoreglue+0x28>
 800beee:	2100      	movs	r1, #0
 800bef0:	e9c0 1600 	strd	r1, r6, [r0]
 800bef4:	300c      	adds	r0, #12
 800bef6:	60a0      	str	r0, [r4, #8]
 800bef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800befc:	f7fd fb2e 	bl	800955c <memset>
 800bf00:	4620      	mov	r0, r4
 800bf02:	bd70      	pop	{r4, r5, r6, pc}

0800bf04 <__sfp_lock_acquire>:
 800bf04:	4801      	ldr	r0, [pc, #4]	; (800bf0c <__sfp_lock_acquire+0x8>)
 800bf06:	f000 b8b3 	b.w	800c070 <__retarget_lock_acquire_recursive>
 800bf0a:	bf00      	nop
 800bf0c:	200018b9 	.word	0x200018b9

0800bf10 <__sfp_lock_release>:
 800bf10:	4801      	ldr	r0, [pc, #4]	; (800bf18 <__sfp_lock_release+0x8>)
 800bf12:	f000 b8ae 	b.w	800c072 <__retarget_lock_release_recursive>
 800bf16:	bf00      	nop
 800bf18:	200018b9 	.word	0x200018b9

0800bf1c <__sinit_lock_acquire>:
 800bf1c:	4801      	ldr	r0, [pc, #4]	; (800bf24 <__sinit_lock_acquire+0x8>)
 800bf1e:	f000 b8a7 	b.w	800c070 <__retarget_lock_acquire_recursive>
 800bf22:	bf00      	nop
 800bf24:	200018ba 	.word	0x200018ba

0800bf28 <__sinit_lock_release>:
 800bf28:	4801      	ldr	r0, [pc, #4]	; (800bf30 <__sinit_lock_release+0x8>)
 800bf2a:	f000 b8a2 	b.w	800c072 <__retarget_lock_release_recursive>
 800bf2e:	bf00      	nop
 800bf30:	200018ba 	.word	0x200018ba

0800bf34 <__sinit>:
 800bf34:	b510      	push	{r4, lr}
 800bf36:	4604      	mov	r4, r0
 800bf38:	f7ff fff0 	bl	800bf1c <__sinit_lock_acquire>
 800bf3c:	69a3      	ldr	r3, [r4, #24]
 800bf3e:	b11b      	cbz	r3, 800bf48 <__sinit+0x14>
 800bf40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf44:	f7ff bff0 	b.w	800bf28 <__sinit_lock_release>
 800bf48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf4c:	6523      	str	r3, [r4, #80]	; 0x50
 800bf4e:	4b13      	ldr	r3, [pc, #76]	; (800bf9c <__sinit+0x68>)
 800bf50:	4a13      	ldr	r2, [pc, #76]	; (800bfa0 <__sinit+0x6c>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf56:	42a3      	cmp	r3, r4
 800bf58:	bf04      	itt	eq
 800bf5a:	2301      	moveq	r3, #1
 800bf5c:	61a3      	streq	r3, [r4, #24]
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 f820 	bl	800bfa4 <__sfp>
 800bf64:	6060      	str	r0, [r4, #4]
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 f81c 	bl	800bfa4 <__sfp>
 800bf6c:	60a0      	str	r0, [r4, #8]
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f000 f818 	bl	800bfa4 <__sfp>
 800bf74:	2200      	movs	r2, #0
 800bf76:	60e0      	str	r0, [r4, #12]
 800bf78:	2104      	movs	r1, #4
 800bf7a:	6860      	ldr	r0, [r4, #4]
 800bf7c:	f7ff ff82 	bl	800be84 <std>
 800bf80:	68a0      	ldr	r0, [r4, #8]
 800bf82:	2201      	movs	r2, #1
 800bf84:	2109      	movs	r1, #9
 800bf86:	f7ff ff7d 	bl	800be84 <std>
 800bf8a:	68e0      	ldr	r0, [r4, #12]
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	2112      	movs	r1, #18
 800bf90:	f7ff ff78 	bl	800be84 <std>
 800bf94:	2301      	movs	r3, #1
 800bf96:	61a3      	str	r3, [r4, #24]
 800bf98:	e7d2      	b.n	800bf40 <__sinit+0xc>
 800bf9a:	bf00      	nop
 800bf9c:	0800c388 	.word	0x0800c388
 800bfa0:	0800becd 	.word	0x0800becd

0800bfa4 <__sfp>:
 800bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa6:	4607      	mov	r7, r0
 800bfa8:	f7ff ffac 	bl	800bf04 <__sfp_lock_acquire>
 800bfac:	4b1e      	ldr	r3, [pc, #120]	; (800c028 <__sfp+0x84>)
 800bfae:	681e      	ldr	r6, [r3, #0]
 800bfb0:	69b3      	ldr	r3, [r6, #24]
 800bfb2:	b913      	cbnz	r3, 800bfba <__sfp+0x16>
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	f7ff ffbd 	bl	800bf34 <__sinit>
 800bfba:	3648      	adds	r6, #72	; 0x48
 800bfbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bfc0:	3b01      	subs	r3, #1
 800bfc2:	d503      	bpl.n	800bfcc <__sfp+0x28>
 800bfc4:	6833      	ldr	r3, [r6, #0]
 800bfc6:	b30b      	cbz	r3, 800c00c <__sfp+0x68>
 800bfc8:	6836      	ldr	r6, [r6, #0]
 800bfca:	e7f7      	b.n	800bfbc <__sfp+0x18>
 800bfcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bfd0:	b9d5      	cbnz	r5, 800c008 <__sfp+0x64>
 800bfd2:	4b16      	ldr	r3, [pc, #88]	; (800c02c <__sfp+0x88>)
 800bfd4:	60e3      	str	r3, [r4, #12]
 800bfd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfda:	6665      	str	r5, [r4, #100]	; 0x64
 800bfdc:	f000 f847 	bl	800c06e <__retarget_lock_init_recursive>
 800bfe0:	f7ff ff96 	bl	800bf10 <__sfp_lock_release>
 800bfe4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bfe8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bfec:	6025      	str	r5, [r4, #0]
 800bfee:	61a5      	str	r5, [r4, #24]
 800bff0:	2208      	movs	r2, #8
 800bff2:	4629      	mov	r1, r5
 800bff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bff8:	f7fd fab0 	bl	800955c <memset>
 800bffc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c004:	4620      	mov	r0, r4
 800c006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c008:	3468      	adds	r4, #104	; 0x68
 800c00a:	e7d9      	b.n	800bfc0 <__sfp+0x1c>
 800c00c:	2104      	movs	r1, #4
 800c00e:	4638      	mov	r0, r7
 800c010:	f7ff ff62 	bl	800bed8 <__sfmoreglue>
 800c014:	4604      	mov	r4, r0
 800c016:	6030      	str	r0, [r6, #0]
 800c018:	2800      	cmp	r0, #0
 800c01a:	d1d5      	bne.n	800bfc8 <__sfp+0x24>
 800c01c:	f7ff ff78 	bl	800bf10 <__sfp_lock_release>
 800c020:	230c      	movs	r3, #12
 800c022:	603b      	str	r3, [r7, #0]
 800c024:	e7ee      	b.n	800c004 <__sfp+0x60>
 800c026:	bf00      	nop
 800c028:	0800c388 	.word	0x0800c388
 800c02c:	ffff0001 	.word	0xffff0001

0800c030 <_fwalk_reent>:
 800c030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c034:	4606      	mov	r6, r0
 800c036:	4688      	mov	r8, r1
 800c038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c03c:	2700      	movs	r7, #0
 800c03e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c042:	f1b9 0901 	subs.w	r9, r9, #1
 800c046:	d505      	bpl.n	800c054 <_fwalk_reent+0x24>
 800c048:	6824      	ldr	r4, [r4, #0]
 800c04a:	2c00      	cmp	r4, #0
 800c04c:	d1f7      	bne.n	800c03e <_fwalk_reent+0xe>
 800c04e:	4638      	mov	r0, r7
 800c050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c054:	89ab      	ldrh	r3, [r5, #12]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d907      	bls.n	800c06a <_fwalk_reent+0x3a>
 800c05a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c05e:	3301      	adds	r3, #1
 800c060:	d003      	beq.n	800c06a <_fwalk_reent+0x3a>
 800c062:	4629      	mov	r1, r5
 800c064:	4630      	mov	r0, r6
 800c066:	47c0      	blx	r8
 800c068:	4307      	orrs	r7, r0
 800c06a:	3568      	adds	r5, #104	; 0x68
 800c06c:	e7e9      	b.n	800c042 <_fwalk_reent+0x12>

0800c06e <__retarget_lock_init_recursive>:
 800c06e:	4770      	bx	lr

0800c070 <__retarget_lock_acquire_recursive>:
 800c070:	4770      	bx	lr

0800c072 <__retarget_lock_release_recursive>:
 800c072:	4770      	bx	lr

0800c074 <__swhatbuf_r>:
 800c074:	b570      	push	{r4, r5, r6, lr}
 800c076:	460e      	mov	r6, r1
 800c078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c07c:	2900      	cmp	r1, #0
 800c07e:	b096      	sub	sp, #88	; 0x58
 800c080:	4614      	mov	r4, r2
 800c082:	461d      	mov	r5, r3
 800c084:	da08      	bge.n	800c098 <__swhatbuf_r+0x24>
 800c086:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c08a:	2200      	movs	r2, #0
 800c08c:	602a      	str	r2, [r5, #0]
 800c08e:	061a      	lsls	r2, r3, #24
 800c090:	d410      	bmi.n	800c0b4 <__swhatbuf_r+0x40>
 800c092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c096:	e00e      	b.n	800c0b6 <__swhatbuf_r+0x42>
 800c098:	466a      	mov	r2, sp
 800c09a:	f000 f903 	bl	800c2a4 <_fstat_r>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	dbf1      	blt.n	800c086 <__swhatbuf_r+0x12>
 800c0a2:	9a01      	ldr	r2, [sp, #4]
 800c0a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0ac:	425a      	negs	r2, r3
 800c0ae:	415a      	adcs	r2, r3
 800c0b0:	602a      	str	r2, [r5, #0]
 800c0b2:	e7ee      	b.n	800c092 <__swhatbuf_r+0x1e>
 800c0b4:	2340      	movs	r3, #64	; 0x40
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	b016      	add	sp, #88	; 0x58
 800c0bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c0c0 <__smakebuf_r>:
 800c0c0:	898b      	ldrh	r3, [r1, #12]
 800c0c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0c4:	079d      	lsls	r5, r3, #30
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	460c      	mov	r4, r1
 800c0ca:	d507      	bpl.n	800c0dc <__smakebuf_r+0x1c>
 800c0cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	6123      	str	r3, [r4, #16]
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	6163      	str	r3, [r4, #20]
 800c0d8:	b002      	add	sp, #8
 800c0da:	bd70      	pop	{r4, r5, r6, pc}
 800c0dc:	ab01      	add	r3, sp, #4
 800c0de:	466a      	mov	r2, sp
 800c0e0:	f7ff ffc8 	bl	800c074 <__swhatbuf_r>
 800c0e4:	9900      	ldr	r1, [sp, #0]
 800c0e6:	4605      	mov	r5, r0
 800c0e8:	4630      	mov	r0, r6
 800c0ea:	f7ff f963 	bl	800b3b4 <_malloc_r>
 800c0ee:	b948      	cbnz	r0, 800c104 <__smakebuf_r+0x44>
 800c0f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0f4:	059a      	lsls	r2, r3, #22
 800c0f6:	d4ef      	bmi.n	800c0d8 <__smakebuf_r+0x18>
 800c0f8:	f023 0303 	bic.w	r3, r3, #3
 800c0fc:	f043 0302 	orr.w	r3, r3, #2
 800c100:	81a3      	strh	r3, [r4, #12]
 800c102:	e7e3      	b.n	800c0cc <__smakebuf_r+0xc>
 800c104:	4b0d      	ldr	r3, [pc, #52]	; (800c13c <__smakebuf_r+0x7c>)
 800c106:	62b3      	str	r3, [r6, #40]	; 0x28
 800c108:	89a3      	ldrh	r3, [r4, #12]
 800c10a:	6020      	str	r0, [r4, #0]
 800c10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c110:	81a3      	strh	r3, [r4, #12]
 800c112:	9b00      	ldr	r3, [sp, #0]
 800c114:	6163      	str	r3, [r4, #20]
 800c116:	9b01      	ldr	r3, [sp, #4]
 800c118:	6120      	str	r0, [r4, #16]
 800c11a:	b15b      	cbz	r3, 800c134 <__smakebuf_r+0x74>
 800c11c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c120:	4630      	mov	r0, r6
 800c122:	f000 f8d1 	bl	800c2c8 <_isatty_r>
 800c126:	b128      	cbz	r0, 800c134 <__smakebuf_r+0x74>
 800c128:	89a3      	ldrh	r3, [r4, #12]
 800c12a:	f023 0303 	bic.w	r3, r3, #3
 800c12e:	f043 0301 	orr.w	r3, r3, #1
 800c132:	81a3      	strh	r3, [r4, #12]
 800c134:	89a0      	ldrh	r0, [r4, #12]
 800c136:	4305      	orrs	r5, r0
 800c138:	81a5      	strh	r5, [r4, #12]
 800c13a:	e7cd      	b.n	800c0d8 <__smakebuf_r+0x18>
 800c13c:	0800becd 	.word	0x0800becd

0800c140 <_malloc_usable_size_r>:
 800c140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c144:	1f18      	subs	r0, r3, #4
 800c146:	2b00      	cmp	r3, #0
 800c148:	bfbc      	itt	lt
 800c14a:	580b      	ldrlt	r3, [r1, r0]
 800c14c:	18c0      	addlt	r0, r0, r3
 800c14e:	4770      	bx	lr

0800c150 <_raise_r>:
 800c150:	291f      	cmp	r1, #31
 800c152:	b538      	push	{r3, r4, r5, lr}
 800c154:	4604      	mov	r4, r0
 800c156:	460d      	mov	r5, r1
 800c158:	d904      	bls.n	800c164 <_raise_r+0x14>
 800c15a:	2316      	movs	r3, #22
 800c15c:	6003      	str	r3, [r0, #0]
 800c15e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c162:	bd38      	pop	{r3, r4, r5, pc}
 800c164:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c166:	b112      	cbz	r2, 800c16e <_raise_r+0x1e>
 800c168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c16c:	b94b      	cbnz	r3, 800c182 <_raise_r+0x32>
 800c16e:	4620      	mov	r0, r4
 800c170:	f000 f830 	bl	800c1d4 <_getpid_r>
 800c174:	462a      	mov	r2, r5
 800c176:	4601      	mov	r1, r0
 800c178:	4620      	mov	r0, r4
 800c17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c17e:	f000 b817 	b.w	800c1b0 <_kill_r>
 800c182:	2b01      	cmp	r3, #1
 800c184:	d00a      	beq.n	800c19c <_raise_r+0x4c>
 800c186:	1c59      	adds	r1, r3, #1
 800c188:	d103      	bne.n	800c192 <_raise_r+0x42>
 800c18a:	2316      	movs	r3, #22
 800c18c:	6003      	str	r3, [r0, #0]
 800c18e:	2001      	movs	r0, #1
 800c190:	e7e7      	b.n	800c162 <_raise_r+0x12>
 800c192:	2400      	movs	r4, #0
 800c194:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c198:	4628      	mov	r0, r5
 800c19a:	4798      	blx	r3
 800c19c:	2000      	movs	r0, #0
 800c19e:	e7e0      	b.n	800c162 <_raise_r+0x12>

0800c1a0 <raise>:
 800c1a0:	4b02      	ldr	r3, [pc, #8]	; (800c1ac <raise+0xc>)
 800c1a2:	4601      	mov	r1, r0
 800c1a4:	6818      	ldr	r0, [r3, #0]
 800c1a6:	f7ff bfd3 	b.w	800c150 <_raise_r>
 800c1aa:	bf00      	nop
 800c1ac:	2000000c 	.word	0x2000000c

0800c1b0 <_kill_r>:
 800c1b0:	b538      	push	{r3, r4, r5, lr}
 800c1b2:	4d07      	ldr	r5, [pc, #28]	; (800c1d0 <_kill_r+0x20>)
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	4608      	mov	r0, r1
 800c1ba:	4611      	mov	r1, r2
 800c1bc:	602b      	str	r3, [r5, #0]
 800c1be:	f7f6 fccb 	bl	8002b58 <_kill>
 800c1c2:	1c43      	adds	r3, r0, #1
 800c1c4:	d102      	bne.n	800c1cc <_kill_r+0x1c>
 800c1c6:	682b      	ldr	r3, [r5, #0]
 800c1c8:	b103      	cbz	r3, 800c1cc <_kill_r+0x1c>
 800c1ca:	6023      	str	r3, [r4, #0]
 800c1cc:	bd38      	pop	{r3, r4, r5, pc}
 800c1ce:	bf00      	nop
 800c1d0:	200018b4 	.word	0x200018b4

0800c1d4 <_getpid_r>:
 800c1d4:	f7f6 bcb8 	b.w	8002b48 <_getpid>

0800c1d8 <__sread>:
 800c1d8:	b510      	push	{r4, lr}
 800c1da:	460c      	mov	r4, r1
 800c1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e0:	f000 f894 	bl	800c30c <_read_r>
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	bfab      	itete	ge
 800c1e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1ea:	89a3      	ldrhlt	r3, [r4, #12]
 800c1ec:	181b      	addge	r3, r3, r0
 800c1ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1f2:	bfac      	ite	ge
 800c1f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1f6:	81a3      	strhlt	r3, [r4, #12]
 800c1f8:	bd10      	pop	{r4, pc}

0800c1fa <__swrite>:
 800c1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1fe:	461f      	mov	r7, r3
 800c200:	898b      	ldrh	r3, [r1, #12]
 800c202:	05db      	lsls	r3, r3, #23
 800c204:	4605      	mov	r5, r0
 800c206:	460c      	mov	r4, r1
 800c208:	4616      	mov	r6, r2
 800c20a:	d505      	bpl.n	800c218 <__swrite+0x1e>
 800c20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c210:	2302      	movs	r3, #2
 800c212:	2200      	movs	r2, #0
 800c214:	f000 f868 	bl	800c2e8 <_lseek_r>
 800c218:	89a3      	ldrh	r3, [r4, #12]
 800c21a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c21e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c222:	81a3      	strh	r3, [r4, #12]
 800c224:	4632      	mov	r2, r6
 800c226:	463b      	mov	r3, r7
 800c228:	4628      	mov	r0, r5
 800c22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c22e:	f000 b817 	b.w	800c260 <_write_r>

0800c232 <__sseek>:
 800c232:	b510      	push	{r4, lr}
 800c234:	460c      	mov	r4, r1
 800c236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c23a:	f000 f855 	bl	800c2e8 <_lseek_r>
 800c23e:	1c43      	adds	r3, r0, #1
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	bf15      	itete	ne
 800c244:	6560      	strne	r0, [r4, #84]	; 0x54
 800c246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c24a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c24e:	81a3      	strheq	r3, [r4, #12]
 800c250:	bf18      	it	ne
 800c252:	81a3      	strhne	r3, [r4, #12]
 800c254:	bd10      	pop	{r4, pc}

0800c256 <__sclose>:
 800c256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c25a:	f000 b813 	b.w	800c284 <_close_r>
	...

0800c260 <_write_r>:
 800c260:	b538      	push	{r3, r4, r5, lr}
 800c262:	4d07      	ldr	r5, [pc, #28]	; (800c280 <_write_r+0x20>)
 800c264:	4604      	mov	r4, r0
 800c266:	4608      	mov	r0, r1
 800c268:	4611      	mov	r1, r2
 800c26a:	2200      	movs	r2, #0
 800c26c:	602a      	str	r2, [r5, #0]
 800c26e:	461a      	mov	r2, r3
 800c270:	f7f6 fca9 	bl	8002bc6 <_write>
 800c274:	1c43      	adds	r3, r0, #1
 800c276:	d102      	bne.n	800c27e <_write_r+0x1e>
 800c278:	682b      	ldr	r3, [r5, #0]
 800c27a:	b103      	cbz	r3, 800c27e <_write_r+0x1e>
 800c27c:	6023      	str	r3, [r4, #0]
 800c27e:	bd38      	pop	{r3, r4, r5, pc}
 800c280:	200018b4 	.word	0x200018b4

0800c284 <_close_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d06      	ldr	r5, [pc, #24]	; (800c2a0 <_close_r+0x1c>)
 800c288:	2300      	movs	r3, #0
 800c28a:	4604      	mov	r4, r0
 800c28c:	4608      	mov	r0, r1
 800c28e:	602b      	str	r3, [r5, #0]
 800c290:	f7f6 fcb5 	bl	8002bfe <_close>
 800c294:	1c43      	adds	r3, r0, #1
 800c296:	d102      	bne.n	800c29e <_close_r+0x1a>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	b103      	cbz	r3, 800c29e <_close_r+0x1a>
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	200018b4 	.word	0x200018b4

0800c2a4 <_fstat_r>:
 800c2a4:	b538      	push	{r3, r4, r5, lr}
 800c2a6:	4d07      	ldr	r5, [pc, #28]	; (800c2c4 <_fstat_r+0x20>)
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	4608      	mov	r0, r1
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	602b      	str	r3, [r5, #0]
 800c2b2:	f7f6 fcb0 	bl	8002c16 <_fstat>
 800c2b6:	1c43      	adds	r3, r0, #1
 800c2b8:	d102      	bne.n	800c2c0 <_fstat_r+0x1c>
 800c2ba:	682b      	ldr	r3, [r5, #0]
 800c2bc:	b103      	cbz	r3, 800c2c0 <_fstat_r+0x1c>
 800c2be:	6023      	str	r3, [r4, #0]
 800c2c0:	bd38      	pop	{r3, r4, r5, pc}
 800c2c2:	bf00      	nop
 800c2c4:	200018b4 	.word	0x200018b4

0800c2c8 <_isatty_r>:
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	4d06      	ldr	r5, [pc, #24]	; (800c2e4 <_isatty_r+0x1c>)
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	4608      	mov	r0, r1
 800c2d2:	602b      	str	r3, [r5, #0]
 800c2d4:	f7f6 fcaf 	bl	8002c36 <_isatty>
 800c2d8:	1c43      	adds	r3, r0, #1
 800c2da:	d102      	bne.n	800c2e2 <_isatty_r+0x1a>
 800c2dc:	682b      	ldr	r3, [r5, #0]
 800c2de:	b103      	cbz	r3, 800c2e2 <_isatty_r+0x1a>
 800c2e0:	6023      	str	r3, [r4, #0]
 800c2e2:	bd38      	pop	{r3, r4, r5, pc}
 800c2e4:	200018b4 	.word	0x200018b4

0800c2e8 <_lseek_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d07      	ldr	r5, [pc, #28]	; (800c308 <_lseek_r+0x20>)
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	4608      	mov	r0, r1
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	602a      	str	r2, [r5, #0]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	f7f6 fca8 	bl	8002c4c <_lseek>
 800c2fc:	1c43      	adds	r3, r0, #1
 800c2fe:	d102      	bne.n	800c306 <_lseek_r+0x1e>
 800c300:	682b      	ldr	r3, [r5, #0]
 800c302:	b103      	cbz	r3, 800c306 <_lseek_r+0x1e>
 800c304:	6023      	str	r3, [r4, #0]
 800c306:	bd38      	pop	{r3, r4, r5, pc}
 800c308:	200018b4 	.word	0x200018b4

0800c30c <_read_r>:
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	4d07      	ldr	r5, [pc, #28]	; (800c32c <_read_r+0x20>)
 800c310:	4604      	mov	r4, r0
 800c312:	4608      	mov	r0, r1
 800c314:	4611      	mov	r1, r2
 800c316:	2200      	movs	r2, #0
 800c318:	602a      	str	r2, [r5, #0]
 800c31a:	461a      	mov	r2, r3
 800c31c:	f7f6 fc36 	bl	8002b8c <_read>
 800c320:	1c43      	adds	r3, r0, #1
 800c322:	d102      	bne.n	800c32a <_read_r+0x1e>
 800c324:	682b      	ldr	r3, [r5, #0]
 800c326:	b103      	cbz	r3, 800c32a <_read_r+0x1e>
 800c328:	6023      	str	r3, [r4, #0]
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	200018b4 	.word	0x200018b4

0800c330 <_init>:
 800c330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c332:	bf00      	nop
 800c334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c336:	bc08      	pop	{r3}
 800c338:	469e      	mov	lr, r3
 800c33a:	4770      	bx	lr

0800c33c <_fini>:
 800c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33e:	bf00      	nop
 800c340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c342:	bc08      	pop	{r3}
 800c344:	469e      	mov	lr, r3
 800c346:	4770      	bx	lr
