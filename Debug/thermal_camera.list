
thermal_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800ddd8  0800ddd8  0001ddd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e274  0800e274  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e274  0800e274  0001e274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e27c  0800e27c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e27c  0800e27c  0001e27c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e280  0800e280  0001e280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00005938  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005b14  20005b14  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017929  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e15  00000000  00000000  00037b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003a950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001398  00000000  00000000  0003be08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a37  00000000  00000000  0003d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001803b  00000000  00000000  00061bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de2fb  00000000  00000000  00079c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00157f0d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069f8  00000000  00000000  00157f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ddbc 	.word	0x0800ddbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800ddbc 	.word	0x0800ddbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <amg8833Init>:


#include "AMG8833.h"
#include "stm32f4xx.h"

void amg8833Init(AMG8833 *inst,I2C_HandleTypeDef *hi2c, uint8_t ad_sel){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	4613      	mov	r3, r2
 8000f58:	71fb      	strb	r3, [r7, #7]

	inst->adri2c= ad_sel ? ( AMG8833_I2C_BASE_ADR + 1 ) << 1 :
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <amg8833Init+0x18>
 8000f60:	22d2      	movs	r2, #210	; 0xd2
 8000f62:	e000      	b.n	8000f66 <amg8833Init+0x1a>
 8000f64:	22d0      	movs	r2, #208	; 0xd0
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	801a      	strh	r2, [r3, #0]
								AMG8833_I2C_BASE_ADR << 1;
	inst->hi2c=hi2c;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	605a      	str	r2, [r3, #4]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <amg8833IsReady>:

/*
 * Test if the sensor reply on configured I2C line
 */
uint8_t amg8833IsReady(AMG8833 *inst,uint8_t max_retry){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef status=HAL_I2C_IsDeviceReady(inst->hi2c,inst->adri2c, max_retry ,10);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6858      	ldr	r0, [r3, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	8819      	ldrh	r1, [r3, #0]
 8000f90:	78fa      	ldrb	r2, [r7, #3]
 8000f92:	230a      	movs	r3, #10
 8000f94:	f005 faee 	bl	8006574 <HAL_I2C_IsDeviceReady>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]
	return (uint8_t)(status==HAL_OK);
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bf0c      	ite	eq
 8000fa2:	2301      	moveq	r3, #1
 8000fa4:	2300      	movne	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <I2C_Read>:
}

/*
 * Utils to read/write on I2C line with automatic retry in case of failure
 */
HAL_StatusTypeDef I2C_Read(AMG8833 *inst, uint8_t reg,uint8_t *data,uint16_t dim,uint16_t max_retry){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	72fb      	strb	r3, [r7, #11]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	813b      	strh	r3, [r7, #8]

	uint8_t try=0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;

	do{
		try++;
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	75fb      	strb	r3, [r7, #23]
		status=HAL_I2C_Mem_Read( inst->hi2c,(uint16_t)inst->adri2c,reg,
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6858      	ldr	r0, [r3, #4]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	8819      	ldrh	r1, [r3, #0]
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	893b      	ldrh	r3, [r7, #8]
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f004 ff09 	bl	8005e00 <HAL_I2C_Mem_Read>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75bb      	strb	r3, [r7, #22]
				1,data,dim,2000 );
	}while( status!=HAL_OK && try <= max_retry );
 8000ff2:	7dbb      	ldrb	r3, [r7, #22]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <I2C_Read+0x52>
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	8c3a      	ldrh	r2, [r7, #32]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d2e2      	bcs.n	8000fc8 <I2C_Read+0x18>

	return status;
 8001002:	7dbb      	ldrb	r3, [r7, #22]

}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <I2C_Write>:

HAL_StatusTypeDef I2C_Write(AMG8833 *inst, uint8_t reg,uint8_t *data,uint16_t dim,uint16_t max_retry){
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]

	uint8_t try=0;
 8001020:	2300      	movs	r3, #0
 8001022:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;

	do{
		try++;
 8001024:	7dfb      	ldrb	r3, [r7, #23]
 8001026:	3301      	adds	r3, #1
 8001028:	75fb      	strb	r3, [r7, #23]
		status=HAL_I2C_Mem_Write( inst->hi2c,(uint16_t)inst->adri2c,reg,
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6858      	ldr	r0, [r3, #4]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	8819      	ldrh	r1, [r3, #0]
 8001032:	7afb      	ldrb	r3, [r7, #11]
 8001034:	b29a      	uxth	r2, r3
 8001036:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	893b      	ldrh	r3, [r7, #8]
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	f004 fde1 	bl	8005c0c <HAL_I2C_Mem_Write>
 800104a:	4603      	mov	r3, r0
 800104c:	75bb      	strb	r3, [r7, #22]
				1,data,dim,2000 );
	}while( status!=HAL_OK && try <= max_retry );
 800104e:	7dbb      	ldrb	r3, [r7, #22]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d004      	beq.n	800105e <I2C_Write+0x52>
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	b29b      	uxth	r3, r3
 8001058:	8c3a      	ldrh	r2, [r7, #32]
 800105a:	429a      	cmp	r2, r3
 800105c:	d2e2      	bcs.n	8001024 <I2C_Write+0x18>

	return status;
 800105e:	7dbb      	ldrb	r3, [r7, #22]

}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <I2C_ReadDMA>:

HAL_StatusTypeDef I2C_ReadDMA(AMG8833 *inst, uint8_t reg,uint8_t *data,uint16_t dim,uint16_t max_retry){
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af02      	add	r7, sp, #8
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	461a      	mov	r2, r3
 8001074:	460b      	mov	r3, r1
 8001076:	72fb      	strb	r3, [r7, #11]
 8001078:	4613      	mov	r3, r2
 800107a:	813b      	strh	r3, [r7, #8]

	uint8_t try=0;
 800107c:	2300      	movs	r3, #0
 800107e:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;

	do{
		try++;
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	3301      	adds	r3, #1
 8001084:	75fb      	strb	r3, [r7, #23]
		status=HAL_I2C_Mem_Read_DMA( inst->hi2c,(uint16_t)inst->adri2c,reg,
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6858      	ldr	r0, [r3, #4]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8819      	ldrh	r1, [r3, #0]
 800108e:	7afb      	ldrb	r3, [r7, #11]
 8001090:	b29a      	uxth	r2, r3
 8001092:	893b      	ldrh	r3, [r7, #8]
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	f005 f8d6 	bl	800624c <HAL_I2C_Mem_Read_DMA>
 80010a0:	4603      	mov	r3, r0
 80010a2:	75bb      	strb	r3, [r7, #22]
				1,data,dim );
	}while( status!=HAL_OK && try <= max_retry );
 80010a4:	7dbb      	ldrb	r3, [r7, #22]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <I2C_ReadDMA+0x4c>
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	8c3a      	ldrh	r2, [r7, #32]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d2e5      	bcs.n	8001080 <I2C_ReadDMA+0x18>

	return status;
 80010b4:	7dbb      	ldrb	r3, [r7, #22]

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <amg8833Reset>:
/*
 * Reset to initial settings
 */
HAL_StatusTypeDef amg8833Reset( AMG8833 *inst, uint8_t max_retry ){
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70fb      	strb	r3, [r7, #3]

	uint8_t data=AMG8833_INIT_RST;
 80010ca:	233f      	movs	r3, #63	; 0x3f
 80010cc:	73fb      	strb	r3, [r7, #15]
	return I2C_Write( inst,AMG8833_RST,&data,1,max_retry );
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	f107 020f 	add.w	r2, r7, #15
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	2101      	movs	r1, #1
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff95 	bl	800100c <I2C_Write>
 80010e2:	4603      	mov	r3, r0


}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <amg8833ReadDMA>:
}

/*
 * Read temperature matrix in DMA mode
 */
HAL_StatusTypeDef amg8833ReadDMA(AMG8833 *inst,uint8_t *data, uint8_t max_retry){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	4613      	mov	r3, r2
 80010f8:	71fb      	strb	r3, [r7, #7]

	return I2C_ReadDMA( inst,AMG8833_T01L,data,AMG8833_DS,max_retry );
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f7ff ffae 	bl	8001068 <I2C_ReadDMA>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <amg8833IntEn>:
}

/*
 * Enable interrupt triggered by by pixels above hysteresis/absolute  threshold
 */
HAL_StatusTypeDef amg8833IntEn(AMG8833 *inst, uint8_t max_retry ){
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af02      	add	r7, sp, #8
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef status;
	uint8_t data;

	status=amg8833GetIntCtrl( inst,&data, max_retry );
 8001122:	78fa      	ldrb	r2, [r7, #3]
 8001124:	f107 030e 	add.w	r3, r7, #14
 8001128:	4619      	mov	r1, r3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f843 	bl	80011b6 <amg8833GetIntCtrl>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]

	if( status!=HAL_OK )
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <amg8833IntEn+0x28>
		return status;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	e00f      	b.n	800115e <amg8833IntEn+0x48>

	data|=AMG8833_INTEN;
 800113e:	7bbb      	ldrb	r3, [r7, #14]
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	73bb      	strb	r3, [r7, #14]

	return I2C_Write( inst,AMG8833_INTC,&data,1,max_retry );
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	b29b      	uxth	r3, r3
 800114c:	f107 020e 	add.w	r2, r7, #14
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	2103      	movs	r1, #3
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff58 	bl	800100c <I2C_Write>
 800115c:	4603      	mov	r3, r0

}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <amg8833IntDis>:

/*
 * Disable interrupt triggered by by pixels above hysteresis/absolute  threshold
 */
HAL_StatusTypeDef amg8833IntDis(AMG8833 *inst, uint8_t max_retry ){
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af02      	add	r7, sp, #8
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef status;
	uint8_t data;

	status=amg8833GetIntCtrl( inst,&data, max_retry );
 8001172:	78fa      	ldrb	r2, [r7, #3]
 8001174:	f107 030e 	add.w	r3, r7, #14
 8001178:	4619      	mov	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f81b 	bl	80011b6 <amg8833GetIntCtrl>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]

	if( status!=HAL_OK )
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <amg8833IntDis+0x28>
		return status;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	e00f      	b.n	80011ae <amg8833IntDis+0x48>

	data&=~AMG8833_INTEN;
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	73bb      	strb	r3, [r7, #14]

	return I2C_Write( inst,AMG8833_INTC,&data,1,max_retry );
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	b29b      	uxth	r3, r3
 800119c:	f107 020e 	add.w	r2, r7, #14
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	2103      	movs	r1, #3
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff30 	bl	800100c <I2C_Write>
 80011ac:	4603      	mov	r3, r0

}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <amg8833GetIntCtrl>:


/*
 * Get interrupt control register value
 */
HAL_StatusTypeDef amg8833GetIntCtrl(AMG8833 *inst,uint8_t *data, uint8_t max_retry){
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af02      	add	r7, sp, #8
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71fb      	strb	r3, [r7, #7]

	return I2C_Read( inst,AMG8833_INTC,data,1,max_retry );
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	2103      	movs	r1, #3
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f7ff feed 	bl	8000fb0 <I2C_Read>
 80011d6:	4603      	mov	r3, r0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <amg8833SetIntMode>:

/*
 * Set interrupt in hysteresis/absolute ( 0/1 ) threshold mode
 */
HAL_StatusTypeDef amg8833SetIntMode(AMG8833 *inst, uint8_t mode, uint8_t max_retry){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
 80011ec:	4613      	mov	r3, r2
 80011ee:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef status;
	uint8_t data;

	status=amg8833GetIntCtrl( inst,&data, max_retry );
 80011f0:	78ba      	ldrb	r2, [r7, #2]
 80011f2:	f107 030e 	add.w	r3, r7, #14
 80011f6:	4619      	mov	r1, r3
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ffdc 	bl	80011b6 <amg8833GetIntCtrl>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]

	if( status!=HAL_OK )
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <amg8833SetIntMode+0x2c>
		return status;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	e018      	b.n	800123e <amg8833SetIntMode+0x5e>

	/*
	 * Toggle bit of absolute threshold interrupt
	 */
	if(!mode)
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d105      	bne.n	800121e <amg8833SetIntMode+0x3e>
		/*
		 * Set hysteresis mode
		 */
		data&=~AMG8833_INT_MOD_FLAG;
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	f023 0302 	bic.w	r3, r3, #2
 8001218:	b2db      	uxtb	r3, r3
 800121a:	73bb      	strb	r3, [r7, #14]
 800121c:	e004      	b.n	8001228 <amg8833SetIntMode+0x48>
	else
		/*
		 * Set absolute mode
		 */
		data|=AMG8833_INT_MOD_FLAG;
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	b2db      	uxtb	r3, r3
 8001226:	73bb      	strb	r3, [r7, #14]

	return I2C_Write( inst,AMG8833_INTC,&data,1,max_retry );
 8001228:	78bb      	ldrb	r3, [r7, #2]
 800122a:	b29b      	uxth	r3, r3
 800122c:	f107 020e 	add.w	r2, r7, #14
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	2103      	movs	r1, #3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fee8 	bl	800100c <I2C_Write>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <amg8833SetAbsHighThrs>:
}

/*
 * Set 12 bit absolute threshold value if interrupt in absolute mode is selected
 */
HAL_StatusTypeDef amg8833SetAbsHighThrs(AMG8833 *inst,uint16_t thrs, uint8_t max_retry){
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af02      	add	r7, sp, #8
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	460b      	mov	r3, r1
 8001250:	807b      	strh	r3, [r7, #2]
 8001252:	4613      	mov	r3, r2
 8001254:	707b      	strb	r3, [r7, #1]

	HAL_StatusTypeDef status;
	uint8_t data;

	/*Lower byte*/
	data=(uint8_t)( thrs & 0x00FF );
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	73bb      	strb	r3, [r7, #14]

	status=I2C_Write( inst,AMG8833_INTHL,&data,1,max_retry);
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	b29b      	uxth	r3, r3
 8001260:	f107 020e 	add.w	r2, r7, #14
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2301      	movs	r3, #1
 8001268:	2108      	movs	r1, #8
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fece 	bl	800100c <I2C_Write>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]

	if(status!=HAL_OK){
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <amg8833SetAbsHighThrs+0x38>
		return status;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	e011      	b.n	80012a2 <amg8833SetAbsHighThrs+0x5c>
	}

	/*Higher byte (only lower 4-bit)*/
	data=(uint8_t)( ( thrs & 0x0F00 ) >> 8 );
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	121b      	asrs	r3, r3, #8
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	b2db      	uxtb	r3, r3
 800128a:	73bb      	strb	r3, [r7, #14]
	return I2C_Write( inst,AMG8833_INTHH,&data,1,max_retry);
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	b29b      	uxth	r3, r3
 8001290:	f107 020e 	add.w	r2, r7, #14
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	2109      	movs	r1, #9
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff feb6 	bl	800100c <I2C_Write>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <initJstick>:

#include "Jstick.h"
#include "stm32f4xx.h"


void initJstick(Jstick *inst,ADC_HandleTypeDef *hadc,uint16_t errpin,GPIO_TypeDef *errport){
 80012aa:	b480      	push	{r7}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4613      	mov	r3, r2
 80012b8:	80fb      	strh	r3, [r7, #6]
	inst->hadc=hadc;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	601a      	str	r2, [r3, #0]
	inst->errpin=errpin;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	809a      	strh	r2, [r3, #4]
	inst->errport=errport;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	609a      	str	r2, [r3, #8]

}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <jstickGetDirPoll>:


JstickDir jstickGetDirPoll(Jstick *inst){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	uint16_t raw_val;
	HAL_StatusTypeDef status;

	status=HAL_ADC_PollForConversion(inst->hadc,50);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2132      	movs	r1, #50	; 0x32
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 fc24 	bl	8003b34 <HAL_ADC_PollForConversion>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]

	if(status==HAL_OK){
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d111      	bne.n	800131a <jstickGetDirPoll+0x42>
		raw_val=HAL_ADC_GetValue(inst->hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fdb6 	bl	8003e6c <HAL_ADC_GetValue>
 8001300:	4603      	mov	r3, r0
 8001302:	81bb      	strh	r3, [r7, #12]

		if(raw_val>4000) return RIGHT;
 8001304:	89bb      	ldrh	r3, [r7, #12]
 8001306:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800130a:	d901      	bls.n	8001310 <jstickGetDirPoll+0x38>
 800130c:	2302      	movs	r3, #2
 800130e:	e005      	b.n	800131c <jstickGetDirPoll+0x44>
		if(raw_val<100) return LEFT;
 8001310:	89bb      	ldrh	r3, [r7, #12]
 8001312:	2b63      	cmp	r3, #99	; 0x63
 8001314:	d801      	bhi.n	800131a <jstickGetDirPoll+0x42>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <jstickGetDirPoll+0x44>
	}

	return CENTER;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <initStep>:
 */
#include "Step.h"
#include "stm32f4xx.h"

/*Init stepper motor data structure*/
void initStep(Step *inst,uint16_t p0,uint16_t p1,uint16_t p2,uint16_t p3,GPIO_TypeDef *port,StepMode mode,TIM_HandleTypeDef *htim){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	4608      	mov	r0, r1
 800132e:	4611      	mov	r1, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4603      	mov	r3, r0
 8001334:	817b      	strh	r3, [r7, #10]
 8001336:	460b      	mov	r3, r1
 8001338:	813b      	strh	r3, [r7, #8]
 800133a:	4613      	mov	r3, r2
 800133c:	80fb      	strh	r3, [r7, #6]

	/*Assign gpio pins and port*/
	inst->pins[0]=p0;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	897a      	ldrh	r2, [r7, #10]
 8001342:	801a      	strh	r2, [r3, #0]
	inst->pins[1]=p1;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	893a      	ldrh	r2, [r7, #8]
 8001348:	805a      	strh	r2, [r3, #2]
	inst->pins[2]=p2;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	88fa      	ldrh	r2, [r7, #6]
 800134e:	809a      	strh	r2, [r3, #4]
	inst->pins[3]=p3;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8b3a      	ldrh	r2, [r7, #24]
 8001354:	80da      	strh	r2, [r3, #6]

	inst->port=port;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	609a      	str	r2, [r3, #8]

	initMode(inst,mode);
 800135c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001360:	4619      	mov	r1, r3
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 f812 	bl	800138c <initMode>

	inst->ang_idx=0;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
	inst->move_lock=0;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	771a      	strb	r2, [r3, #28]
	inst->htim=htim;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001378:	619a      	str	r2, [r3, #24]
	inst->ang_lim=0;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <initMode>:

/*Init step mode, step resolution, step sequence indexes and reset pins*/
void initMode(Step *inst,StepMode mode){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
	inst->mode=mode;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	78fa      	ldrb	r2, [r7, #3]
 800139c:	731a      	strb	r2, [r3, #12]
	inst->cur_step=0;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	735a      	strb	r2, [r3, #13]
	rstPins(inst);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f80f 	bl	80013c8 <rstPins>

	if(mode==WAVE || mode==FULL)
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <initMode+0x2a>
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d102      	bne.n	80013bc <initMode+0x30>
		inst->res=360.0/2038.0;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a02      	ldr	r2, [pc, #8]	; (80013c4 <initMode+0x38>)
 80013ba:	615a      	str	r2, [r3, #20]
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	3e34e21b 	.word	0x3e34e21b

080013c8 <rstPins>:
void rstPins(Step *inst){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	inst->port->ODR&=~( inst->pins[0] | inst->pins[1] | inst->pins[2] | inst->pins[3] );
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	8819      	ldrh	r1, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	885b      	ldrh	r3, [r3, #2]
 80013de:	430b      	orrs	r3, r1
 80013e0:	b299      	uxth	r1, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	889b      	ldrh	r3, [r3, #4]
 80013e6:	430b      	orrs	r3, r1
 80013e8:	b299      	uxth	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	88db      	ldrh	r3, [r3, #6]
 80013ee:	430b      	orrs	r3, r1
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	4619      	mov	r1, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	400a      	ands	r2, r1
 80013fc:	615a      	str	r2, [r3, #20]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <rstAngle>:

void rstAngle(Step *inst){
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
	inst->ang_idx=0;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <waveStep>:
    |1  0  0  0|
    |0  1  0  0|
    |0  0  1  0|
    |0  0  0  1|
 */
void waveStep(Step *inst,uint8_t dir){
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]

	/*Reset previous step pin*/
	inst->port->ODR&= ~(inst->pins[ inst->cur_step ]);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7b5b      	ldrb	r3, [r3, #13]
 800143a:	4619      	mov	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001442:	43db      	mvns	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	400a      	ands	r2, r1
 800144c:	615a      	str	r2, [r3, #20]

	if(dir){
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00e      	beq.n	8001472 <waveStep+0x4e>

		/*Move forward cur_step*/
		inst->cur_step=(inst->cur_step + 1) & 0x3;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7b5b      	ldrb	r3, [r3, #13]
 8001458:	3301      	adds	r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	b2da      	uxtb	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	735a      	strb	r2, [r3, #13]
		inst->ang_idx ++;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	e010      	b.n	8001494 <waveStep+0x70>
	}
	else{

		/*Move backward cur_step*/
		inst->cur_step= inst->cur_step ? (inst->cur_step - 1) : 0x3;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7b5b      	ldrb	r3, [r3, #13]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d004      	beq.n	8001484 <waveStep+0x60>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7b5b      	ldrb	r3, [r3, #13]
 800147e:	3b01      	subs	r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	e000      	b.n	8001486 <waveStep+0x62>
 8001484:	2203      	movs	r2, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	735a      	strb	r2, [r3, #13]
		inst->ang_idx --;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	1e5a      	subs	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	611a      	str	r2, [r3, #16]
	}

	/*Set current step pin*/
	inst->port->ODR|= inst->pins[ inst->cur_step ];
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7b5b      	ldrb	r3, [r3, #13]
 800149e:	4619      	mov	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80014a6:	4619      	mov	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	615a      	str	r2, [r3, #20]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <fullStep>:
    |1  1  0  0|
    |0  1  1  0|
    |0  0  1  1|
    |1  0  0  1|
 */
void fullStep(Step *inst,uint8_t dir){
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]

	if(dir){
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d01d      	beq.n	800150a <fullStep+0x4e>
		/*Reset previous step pin*/
		inst->port->ODR&= ~(inst->pins[ inst->cur_step ]);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7b5b      	ldrb	r3, [r3, #13]
 80014d8:	4619      	mov	r1, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4619      	mov	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	400a      	ands	r2, r1
 80014ea:	615a      	str	r2, [r3, #20]

		/*Move forward cur_step*/
		inst->cur_step=(inst->cur_step + 1) & 0x3;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7b5b      	ldrb	r3, [r3, #13]
 80014f0:	3301      	adds	r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	735a      	strb	r2, [r3, #13]
		inst->ang_idx ++;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	e021      	b.n	800154e <fullStep+0x92>


	}
	else{
		/*Reset previous step right sibling pin*/
		inst->port->ODR&= ~(inst->pins[ (inst->cur_step + 1) & 0x3 ]);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	695a      	ldr	r2, [r3, #20]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7b5b      	ldrb	r3, [r3, #13]
 8001514:	3301      	adds	r3, #1
 8001516:	f003 0103 	and.w	r1, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001520:	43db      	mvns	r3, r3
 8001522:	4619      	mov	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	400a      	ands	r2, r1
 800152a:	615a      	str	r2, [r3, #20]

		/*Move backward cur_step*/
		inst->cur_step= inst->cur_step ? (inst->cur_step - 1) : 0x3;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7b5b      	ldrb	r3, [r3, #13]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <fullStep+0x82>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	7b5b      	ldrb	r3, [r3, #13]
 8001538:	3b01      	subs	r3, #1
 800153a:	b2da      	uxtb	r2, r3
 800153c:	e000      	b.n	8001540 <fullStep+0x84>
 800153e:	2203      	movs	r2, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	735a      	strb	r2, [r3, #13]
		inst->ang_idx --;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]
	}

	/*Set current step pin and its right sibling*/
	inst->port->ODR|= ( inst->pins[ inst->cur_step ] | inst->pins[ (inst->cur_step + 1) & 0x3] );
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7b5b      	ldrb	r3, [r3, #13]
 8001558:	4619      	mov	r1, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7b5b      	ldrb	r3, [r3, #13]
 8001564:	3301      	adds	r3, #1
 8001566:	f003 0003 	and.w	r0, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8001570:	430b      	orrs	r3, r1
 8001572:	b29b      	uxth	r3, r3
 8001574:	4619      	mov	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	430a      	orrs	r2, r1
 800157c:	615a      	str	r2, [r3, #20]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <step>:

/*
 * Step command
 */
void step(Step *inst,uint8_t dir){
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	70fb      	strb	r3, [r7, #3]
	switch(inst->mode){
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7b1b      	ldrb	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <step+0x1a>
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d005      	beq.n	80015ae <step+0x24>
	case WAVE:
		waveStep(inst,dir);
	case FULL:
		fullStep(inst,dir);
	}
}
 80015a2:	e009      	b.n	80015b8 <step+0x2e>
		waveStep(inst,dir);
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	4619      	mov	r1, r3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff3b 	bl	8001424 <waveStep>
		fullStep(inst,dir);
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	4619      	mov	r1, r3
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ff82 	bl	80014bc <fullStep>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <stepIt>:

/*
 * Perform one step in interrupt mode
 * this function is meant to be called inside instance timer PeriodElapsed callback
 */
void stepIt(Step *inst){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if( inst->destination_it > inst->ang_idx * inst->res ){
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	ee07 3a90 	vmov	s15, r3
 80015d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80015e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	dd21      	ble.n	8001632 <stepIt+0x72>

		if( inst->destination_it > ( inst->ang_idx + 1 ) * inst->res )
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	ed93 7a08 	vldr	s14, [r3, #32]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	3301      	adds	r3, #1
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	edd3 7a05 	vldr	s15, [r3, #20]
 8001608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001614:	dd04      	ble.n	8001620 <stepIt+0x60>
			step(inst,1);
 8001616:	2101      	movs	r1, #1
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffb6 	bl	800158a <step>
		else{
			HAL_TIM_Base_Stop_IT(inst->htim);
			inst->move_lock=0;
		}
	}
}
 800161e:	e029      	b.n	8001674 <stepIt+0xb4>
			HAL_TIM_Base_Stop_IT(inst->htim);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4618      	mov	r0, r3
 8001626:	f007 fe85 	bl	8009334 <HAL_TIM_Base_Stop_IT>
			inst->move_lock=0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	771a      	strb	r2, [r3, #28]
}
 8001630:	e020      	b.n	8001674 <stepIt+0xb4>
		if( inst->destination_it < ( inst->ang_idx - 1 ) * inst->res )
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	ed93 7a08 	vldr	s14, [r3, #32]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	3b01      	subs	r3, #1
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	edd3 7a05 	vldr	s15, [r3, #20]
 800164c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001650:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001658:	d504      	bpl.n	8001664 <stepIt+0xa4>
			step(inst,0);
 800165a:	2100      	movs	r1, #0
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff94 	bl	800158a <step>
}
 8001662:	e007      	b.n	8001674 <stepIt+0xb4>
			HAL_TIM_Base_Stop_IT(inst->htim);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4618      	mov	r0, r3
 800166a:	f007 fe63 	bl	8009334 <HAL_TIM_Base_Stop_IT>
			inst->move_lock=0;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	771a      	strb	r2, [r3, #28]
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <moveToIt>:


/*
 * Move motor from a starting position to a destination expressed in angle degrees
 */
void moveToIt(Step *inst,float angle){
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	ed87 0a00 	vstr	s0, [r7]

	if(!inst->move_lock){
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7f1b      	ldrb	r3, [r3, #28]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10a      	bne.n	80016a6 <moveToIt+0x2a>
		inst->move_lock=1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	771a      	strb	r2, [r3, #28]

		inst->destination_it=angle;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	621a      	str	r2, [r3, #32]
		HAL_TIM_Base_Start_IT( inst->htim );
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f007 fdd7 	bl	8009254 <HAL_TIM_Base_Start_IT>
	}
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <stop>:

/*
 * Stop stepper motor while is moving to a destination
 */
void stop(Step* inst){
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(inst->htim);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f007 fe3a 	bl	8009334 <HAL_TIM_Base_Stop_IT>
	inst->move_lock=0;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	771a      	strb	r2, [r3, #28]
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_I2C_MemRxCpltCallback>:

/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image reading is now complete
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <HAL_I2C_MemRxCpltCallback+0x24>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d102      	bne.n	80016e8 <HAL_I2C_MemRxCpltCallback+0x18>
		AMG_RD_CPLT=1;
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_I2C_MemRxCpltCallback+0x28>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
	}
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40005400 	.word	0x40005400
 80016f8:	22000018 	.word	0x22000018

080016fc <HAL_UART_TxCpltCallback>:

/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image output is now complete
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a05      	ldr	r2, [pc, #20]	; (8001720 <HAL_UART_TxCpltCallback+0x24>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d102      	bne.n	8001714 <HAL_UART_TxCpltCallback+0x18>
		AMG_OUT_CPLT=1;
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_UART_TxCpltCallback+0x28>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]
	}
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40004800 	.word	0x40004800
 8001724:	22000014 	.word	0x22000014

08001728 <thermalImgFSM>:
 * 		AMG_RD_START ==> AMG_RD_CPLT
 * DMA1 Stream 6 (Thermal image USART2 Tx) Tx Cplt ISR
 * 		AMG_RD_CPLT ==> AMG_OUT_CPLT
 *
 */
void thermalImgFSM(){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	  /*
	   * Thermal camera FSM
	   */
	  //If timer6 has expired
	  if(AMG_RD_START){
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <thermalImgFSM+0x6c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00f      	beq.n	8001754 <thermalImgFSM+0x2c>

		  //Command DMA transfer from amg8833
		status=amg8833ReadDMA( &cam,img_buf, 1 );
 8001734:	2201      	movs	r2, #1
 8001736:	4918      	ldr	r1, [pc, #96]	; (8001798 <thermalImgFSM+0x70>)
 8001738:	4818      	ldr	r0, [pc, #96]	; (800179c <thermalImgFSM+0x74>)
 800173a:	f7ff fcd7 	bl	80010ec <amg8833ReadDMA>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <thermalImgFSM+0x78>)
 8001744:	701a      	strb	r2, [r3, #0]
		if(status==HAL_OK){
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <thermalImgFSM+0x78>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <thermalImgFSM+0x2c>
			//Clear ctrl read start bit
			AMG_RD_START=0;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <thermalImgFSM+0x6c>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
#endif
		}
	  }

	  //If DMA image reading was successful
	  if(AMG_RD_CPLT){
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <thermalImgFSM+0x7c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00f      	beq.n	800177c <thermalImgFSM+0x54>
		 //Command DMA transfer to uart2
		 status=HAL_UART_Transmit_DMA(&huart3,img_buf,AMG8833_DS);
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	490e      	ldr	r1, [pc, #56]	; (8001798 <thermalImgFSM+0x70>)
 8001760:	4811      	ldr	r0, [pc, #68]	; (80017a8 <thermalImgFSM+0x80>)
 8001762:	f008 fab7 	bl	8009cd4 <HAL_UART_Transmit_DMA>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <thermalImgFSM+0x78>)
 800176c:	701a      	strb	r2, [r3, #0]
		 if(status==HAL_OK){
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <thermalImgFSM+0x78>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <thermalImgFSM+0x54>
			 AMG_RD_CPLT=0;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <thermalImgFSM+0x7c>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
		 }
	  }
	  //if latest data were consumed in output, restart timer6
	  if(AMG_OUT_CPLT){
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <thermalImgFSM+0x84>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <thermalImgFSM+0x68>
		  AMG_OUT_CPLT=0;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <thermalImgFSM+0x84>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 800178a:	4809      	ldr	r0, [pc, #36]	; (80017b0 <thermalImgFSM+0x88>)
 800178c:	f007 fd62 	bl	8009254 <HAL_TIM_Base_Start_IT>

#ifdef TIME_VIDEO_STREAM
			CHRONO_STOP();
#endif
	  }
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2200001c 	.word	0x2200001c
 8001798:	20000888 	.word	0x20000888
 800179c:	200007c8 	.word	0x200007c8
 80017a0:	20000884 	.word	0x20000884
 80017a4:	22000018 	.word	0x22000018
 80017a8:	20000680 	.word	0x20000680
 80017ac:	22000014 	.word	0x22000014
 80017b0:	200005a8 	.word	0x200005a8

080017b4 <HAL_ADC_ConvHalfCpltCallback>:
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_BUF_SZ sample were converted and put into audio_in_buf.
 * Data can be moved by main application from lower audio_in_buf to higher audio_out_buf
 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==ADC1){
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d108      	bne.n	80017d8 <HAL_ADC_ConvHalfCpltCallback+0x24>

#ifdef TIME_CONV_CH1
		CHRONO_START();
#endif
		audio_in_ptr1=&audio_in_buf1[0];
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 80017c8:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80017ca:	601a      	str	r2, [r3, #0]
		audio_out_ptr1=&audio_out_buf1[0];
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80017d0:	601a      	str	r2, [r3, #0]
		BUF1_CPLT=1;
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
	}

	if(hadc->Instance==ADC2){
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d108      	bne.n	80017f4 <HAL_ADC_ConvHalfCpltCallback+0x40>

#ifdef TIME_CONV_CH2
		CHRONO_START();
#endif
		audio_in_ptr2=&audio_in_buf2[0];
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_ADC_ConvHalfCpltCallback+0x68>)
 80017e4:	4a0e      	ldr	r2, [pc, #56]	; (8001820 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 80017e6:	601a      	str	r2, [r3, #0]
		audio_out_ptr2=&audio_out_buf2[0];
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 80017ea:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80017ec:	601a      	str	r2, [r3, #0]
		BUF2_CPLT=1;
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
	}
}
 80017f4:	bf00      	nop
 80017f6:	370c      	adds	r7, #12
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40012000 	.word	0x40012000
 8001804:	20002908 	.word	0x20002908
 8001808:	20000908 	.word	0x20000908
 800180c:	2000290c 	.word	0x2000290c
 8001810:	20001108 	.word	0x20001108
 8001814:	2200005c 	.word	0x2200005c
 8001818:	40012100 	.word	0x40012100
 800181c:	20002910 	.word	0x20002910
 8001820:	20001908 	.word	0x20001908
 8001824:	20002914 	.word	0x20002914
 8001828:	20002108 	.word	0x20002108
 800182c:	22000058 	.word	0x22000058

08001830 <HAL_DAC_ConvCpltCallbackCh1>:
/*
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_TOT_BUF_SZ sample were taken from audio out buf and fed into DAC.
 * Data can be moved by main application from higher audio_in_buf to lower audio_out_buf
 */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

#ifdef TIME_CONV_CH1
	CHRONO_STOP();
#endif
	audio_in_ptr1=&audio_in_buf1[AUDIO_BUF_SZ];
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
 800183c:	601a      	str	r2, [r3, #0]
	audio_out_ptr1=&audio_out_buf1[AUDIO_BUF_SZ];
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_DAC_ConvCpltCallbackCh1+0x30>)
 8001840:	4a08      	ldr	r2, [pc, #32]	; (8001864 <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 8001842:	601a      	str	r2, [r3, #0]
	BUF1_CPLT=1;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_DAC_ConvCpltCallbackCh1+0x38>)
 8001846:	2201      	movs	r2, #1
 8001848:	601a      	str	r2, [r3, #0]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20002908 	.word	0x20002908
 800185c:	20000d08 	.word	0x20000d08
 8001860:	2000290c 	.word	0x2000290c
 8001864:	20001508 	.word	0x20001508
 8001868:	2200005c 	.word	0x2200005c

0800186c <HAL_DACEx_ConvCpltCallbackCh2>:

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac){
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

#ifdef TIME_CONV_CH2
	CHRONO_STOP();
#endif
	audio_in_ptr2=&audio_in_buf2[AUDIO_BUF_SZ];
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <HAL_DACEx_ConvCpltCallbackCh2+0x28>)
 8001876:	4a08      	ldr	r2, [pc, #32]	; (8001898 <HAL_DACEx_ConvCpltCallbackCh2+0x2c>)
 8001878:	601a      	str	r2, [r3, #0]
	audio_out_ptr2=&audio_out_buf2[AUDIO_BUF_SZ];
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_DACEx_ConvCpltCallbackCh2+0x30>)
 800187c:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_DACEx_ConvCpltCallbackCh2+0x34>)
 800187e:	601a      	str	r2, [r3, #0]
	BUF2_CPLT=1;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_DACEx_ConvCpltCallbackCh2+0x38>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20002910 	.word	0x20002910
 8001898:	20001d08 	.word	0x20001d08
 800189c:	20002914 	.word	0x20002914
 80018a0:	20002508 	.word	0x20002508
 80018a4:	22000058 	.word	0x22000058

080018a8 <audioPlayback>:
 * Audio playback process.
 * Transfer audio samples from input buffer to output buffer using pointers set by ISR (ping-pong buffers).
 * Used by main application during calibration mode
 */

void audioPlayback(){
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0

	uint32_t mean1,mean2;

	/*If channel 1 and 2 conversion was completed*/
	if(BUF1_CPLT && BUF2_CPLT){
 80018ae:	4b38      	ldr	r3, [pc, #224]	; (8001990 <audioPlayback+0xe8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d065      	beq.n	8001982 <audioPlayback+0xda>
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <audioPlayback+0xec>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d061      	beq.n	8001982 <audioPlayback+0xda>
		BUF1_CPLT=0;
 80018be:	4b34      	ldr	r3, [pc, #208]	; (8001990 <audioPlayback+0xe8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
		BUF2_CPLT=0;
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <audioPlayback+0xec>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
#ifdef TIME_AUDIO_STREAM
			CHRONO_START();
#endif

		/*Transfer samples from input to output buffers*/
		for(int i=0;i<AUDIO_BUF_SZ;i++){
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	e032      	b.n	8001936 <audioPlayback+0x8e>
			/*
			 * Compute mean value in buffers 1 and 2
			 */
			mean1+=audio_in_ptr1[i];
 80018d0:	4b31      	ldr	r3, [pc, #196]	; (8001998 <audioPlayback+0xf0>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
			mean2+=audio_in_ptr2[i];
 80018e6:	4b2d      	ldr	r3, [pc, #180]	; (800199c <audioPlayback+0xf4>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	4413      	add	r3, r2
 80018fa:	60bb      	str	r3, [r7, #8]

			audio_out_ptr1[i]=audio_in_ptr1[i];
 80018fc:	4b26      	ldr	r3, [pc, #152]	; (8001998 <audioPlayback+0xf0>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	441a      	add	r2, r3
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <audioPlayback+0xf8>)
 8001908:	6819      	ldr	r1, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	440b      	add	r3, r1
 8001910:	8812      	ldrh	r2, [r2, #0]
 8001912:	b292      	uxth	r2, r2
 8001914:	801a      	strh	r2, [r3, #0]
			audio_out_ptr2[i]=audio_in_ptr2[i];
 8001916:	4b21      	ldr	r3, [pc, #132]	; (800199c <audioPlayback+0xf4>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	441a      	add	r2, r3
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <audioPlayback+0xfc>)
 8001922:	6819      	ldr	r1, [r3, #0]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	440b      	add	r3, r1
 800192a:	8812      	ldrh	r2, [r2, #0]
 800192c:	b292      	uxth	r2, r2
 800192e:	801a      	strh	r2, [r3, #0]
		for(int i=0;i<AUDIO_BUF_SZ;i++){
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3301      	adds	r3, #1
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800193c:	dbc8      	blt.n	80018d0 <audioPlayback+0x28>

		}
		/*
		 * Enqueue last mean value computed and increment DC buffer pointer
		 */
		dc_buf_ch1[dc_buf_idx]=(uint16_t)( mean1/AUDIO_BUF_SZ );
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	0a59      	lsrs	r1, r3, #9
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <audioPlayback+0x100>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	b289      	uxth	r1, r1
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <audioPlayback+0x104>)
 800194c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		dc_buf_ch2[dc_buf_idx]=(uint16_t)( mean2/AUDIO_BUF_SZ );
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	0a59      	lsrs	r1, r3, #9
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <audioPlayback+0x100>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	461a      	mov	r2, r3
 800195a:	b289      	uxth	r1, r1
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <audioPlayback+0x108>)
 800195e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		dc_buf_idx=( dc_buf_idx + 1 ) % DC_BUF_SZ;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <audioPlayback+0x100>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <audioPlayback+0x10c>)
 800196a:	fb82 1203 	smull	r1, r2, r2, r3
 800196e:	1151      	asrs	r1, r2, #5
 8001970:	17da      	asrs	r2, r3, #31
 8001972:	1a8a      	subs	r2, r1, r2
 8001974:	2164      	movs	r1, #100	; 0x64
 8001976:	fb01 f202 	mul.w	r2, r1, r2
 800197a:	1a9a      	subs	r2, r3, r2
 800197c:	b292      	uxth	r2, r2
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <audioPlayback+0x100>)
 8001980:	801a      	strh	r2, [r3, #0]
#ifdef TIME_AUDIO_STREAM
			CHRONO_STOP();
#endif
	}

}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	2200005c 	.word	0x2200005c
 8001994:	22000058 	.word	0x22000058
 8001998:	20002908 	.word	0x20002908
 800199c:	20002910 	.word	0x20002910
 80019a0:	2000290c 	.word	0x2000290c
 80019a4:	20002914 	.word	0x20002914
 80019a8:	20002aa8 	.word	0x20002aa8
 80019ac:	20002918 	.word	0x20002918
 80019b0:	200029e0 	.word	0x200029e0
 80019b4:	51eb851f 	.word	0x51eb851f

080019b8 <audioPreproc>:
 * Audio preprocessing.
 * Transfer audio samples from input buffer to output buffer using pointers set by ISR (ping-pong buffers).
 * DC offset is removed from every sample and threshold overflow is computed.
 * Used by main application during SSL mode
 */
void audioPreproc(){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af00      	add	r7, sp, #0
	/*
	 * Preproc loop will set rms values of last buf1 and buf2 to trigger cross-correlation
	 */

	/*If channel 1 and 2 conversion was completed*/
	if(BUF1_CPLT && BUF2_CPLT){
 80019be:	4b9d      	ldr	r3, [pc, #628]	; (8001c34 <audioPreproc+0x27c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8176 	beq.w	8001cb4 <audioPreproc+0x2fc>
 80019c8:	4b9b      	ldr	r3, [pc, #620]	; (8001c38 <audioPreproc+0x280>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 8171 	beq.w	8001cb4 <audioPreproc+0x2fc>

#ifdef 	TIME_PREPROC
		CHRONO_START();
#endif
		BUF1_CPLT=0;
 80019d2:	4b98      	ldr	r3, [pc, #608]	; (8001c34 <audioPreproc+0x27c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
		BUF2_CPLT=0;
 80019d8:	4b97      	ldr	r3, [pc, #604]	; (8001c38 <audioPreproc+0x280>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]

		mean1=0;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
		mean2=0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]

		dc1=0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
		dc2=0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]

		rms1=0;
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
		rms2=0;
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
		

		/*
		 * Transfer samples from input to cross-correlation buffers
		 */
		for( int i=0 ; i<AUDIO_BUF_SZ || i<DC_BUF_SZ ; i++ ){
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	e04d      	b.n	8001a9c <audioPreproc+0xe4>

			/*
			 * Compute the mean value of input buffers 1 and 2
			 */
			if(i<AUDIO_BUF_SZ){
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a06:	da2f      	bge.n	8001a68 <audioPreproc+0xb0>
				mean1+=audio_in_ptr1[i];
 8001a08:	4b8c      	ldr	r3, [pc, #560]	; (8001c3c <audioPreproc+0x284>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	881b      	ldrh	r3, [r3, #0]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	4413      	add	r3, r2
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
				mean2+=audio_in_ptr2[i];
 8001a1e:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <audioPreproc+0x288>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	4413      	add	r3, r2
 8001a32:	623b      	str	r3, [r7, #32]

				/*
				 * Fill the DAC buffer
				 */
				audio_out_ptr1[i]=audio_in_ptr1[i];
 8001a34:	4b81      	ldr	r3, [pc, #516]	; (8001c3c <audioPreproc+0x284>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	441a      	add	r2, r3
 8001a3e:	4b81      	ldr	r3, [pc, #516]	; (8001c44 <audioPreproc+0x28c>)
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	440b      	add	r3, r1
 8001a48:	8812      	ldrh	r2, [r2, #0]
 8001a4a:	b292      	uxth	r2, r2
 8001a4c:	801a      	strh	r2, [r3, #0]
				audio_out_ptr2[i]=audio_in_ptr2[i];
 8001a4e:	4b7c      	ldr	r3, [pc, #496]	; (8001c40 <audioPreproc+0x288>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	441a      	add	r2, r3
 8001a58:	4b7b      	ldr	r3, [pc, #492]	; (8001c48 <audioPreproc+0x290>)
 8001a5a:	6819      	ldr	r1, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	440b      	add	r3, r1
 8001a62:	8812      	ldrh	r2, [r2, #0]
 8001a64:	b292      	uxth	r2, r2
 8001a66:	801a      	strh	r2, [r3, #0]
			}
			/*
			 * Compute estimate of DC offset based on the last DC_BUF_SZ mean values computed in buffers
			 */
			if(i<DC_BUF_SZ){
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b63      	cmp	r3, #99	; 0x63
 8001a6c:	dc13      	bgt.n	8001a96 <audioPreproc+0xde>
				dc1+=dc_buf_ch1[dc_buf_idx];
 8001a6e:	4b77      	ldr	r3, [pc, #476]	; (8001c4c <audioPreproc+0x294>)
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b76      	ldr	r3, [pc, #472]	; (8001c50 <audioPreproc+0x298>)
 8001a76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	4413      	add	r3, r2
 8001a80:	61fb      	str	r3, [r7, #28]
				dc2+=dc_buf_ch2[dc_buf_idx];
 8001a82:	4b72      	ldr	r3, [pc, #456]	; (8001c4c <audioPreproc+0x294>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b72      	ldr	r3, [pc, #456]	; (8001c54 <audioPreproc+0x29c>)
 8001a8a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	4413      	add	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
		for( int i=0 ; i<AUDIO_BUF_SZ || i<DC_BUF_SZ ; i++ ){
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa2:	dbad      	blt.n	8001a00 <audioPreproc+0x48>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b63      	cmp	r3, #99	; 0x63
 8001aa8:	ddaa      	ble.n	8001a00 <audioPreproc+0x48>
		}

		/*
		 * Enqueue current mean value of input buffer in dc buffer
		 */
		dc_buf_ch1[dc_buf_idx]=(uint16_t)( mean1/AUDIO_BUF_SZ );
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	0a59      	lsrs	r1, r3, #9
 8001aae:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <audioPreproc+0x294>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	b289      	uxth	r1, r1
 8001ab6:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <audioPreproc+0x298>)
 8001ab8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		dc_buf_ch2[dc_buf_idx]=(uint16_t)( mean2/AUDIO_BUF_SZ );
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	0a59      	lsrs	r1, r3, #9
 8001ac0:	4b62      	ldr	r3, [pc, #392]	; (8001c4c <audioPreproc+0x294>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	b289      	uxth	r1, r1
 8001ac8:	4b62      	ldr	r3, [pc, #392]	; (8001c54 <audioPreproc+0x29c>)
 8001aca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		dc1/=DC_BUF_SZ;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	4a61      	ldr	r2, [pc, #388]	; (8001c58 <audioPreproc+0x2a0>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	61fb      	str	r3, [r7, #28]
		dc2/=DC_BUF_SZ;
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	4a5e      	ldr	r2, [pc, #376]	; (8001c58 <audioPreproc+0x2a0>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	61bb      	str	r3, [r7, #24]
		/*
		 * Subtract DC offset to have 0 mean signal in cross-correlation buffer.
		 * Compute RMS of signals in ch1-2 input buffers
		 */

		for(int i=0,idx;i<AUDIO_BUF_SZ;i++){
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	e058      	b.n	8001b9e <audioPreproc+0x1e6>

			idx=xcor_buf_oset * AUDIO_BUF_SZ + i;
 8001aec:	4b5b      	ldr	r3, [pc, #364]	; (8001c5c <audioPreproc+0x2a4>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	025b      	lsls	r3, r3, #9
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	4413      	add	r3, r2
 8001af6:	607b      	str	r3, [r7, #4]
			/*
			 * CROSS-CORRELATION FEATURE CURRENTLY UNUSED
			 */
			xcor_buf1[idx]=audio_in_ptr1[i] - dc1;
 8001af8:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <audioPreproc+0x284>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4a54      	ldr	r2, [pc, #336]	; (8001c60 <audioPreproc+0x2a8>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			xcor_buf2[idx]=audio_in_ptr2[i] - dc2;
 8001b16:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <audioPreproc+0x288>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4a4d      	ldr	r2, [pc, #308]	; (8001c64 <audioPreproc+0x2ac>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			rms1+=( xcor_buf1[idx] * xcor_buf1[idx] ) / AUDIO_BUF_SZ;
 8001b34:	4a4a      	ldr	r2, [pc, #296]	; (8001c60 <audioPreproc+0x2a8>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3c:	4948      	ldr	r1, [pc, #288]	; (8001c60 <audioPreproc+0x2a8>)
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b44:	fb02 f303 	mul.w	r3, r2, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	da01      	bge.n	8001b50 <audioPreproc+0x198>
 8001b4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001b50:	125b      	asrs	r3, r3, #9
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b62:	edc7 7a05 	vstr	s15, [r7, #20]
			rms2+=( xcor_buf2[idx] * xcor_buf2[idx] ) / AUDIO_BUF_SZ;
 8001b66:	4a3f      	ldr	r2, [pc, #252]	; (8001c64 <audioPreproc+0x2ac>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	493d      	ldr	r1, [pc, #244]	; (8001c64 <audioPreproc+0x2ac>)
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da01      	bge.n	8001b82 <audioPreproc+0x1ca>
 8001b7e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001b82:	125b      	asrs	r3, r3, #9
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b94:	edc7 7a04 	vstr	s15, [r7, #16]
		for(int i=0,idx;i<AUDIO_BUF_SZ;i++){
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba4:	dba2      	blt.n	8001aec <audioPreproc+0x134>

		}

		rms1=sqrt(rms1);
 8001ba6:	6978      	ldr	r0, [r7, #20]
 8001ba8:	f7fe fcce 	bl	8000548 <__aeabi_f2d>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	ec43 2b10 	vmov	d0, r2, r3
 8001bb4:	f00c f824 	bl	800dc00 <sqrt>
 8001bb8:	ec53 2b10 	vmov	r2, r3, d0
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f7fe fff2 	bl	8000ba8 <__aeabi_d2f>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	617b      	str	r3, [r7, #20]
		rms2=sqrt(rms2);
 8001bc8:	6938      	ldr	r0, [r7, #16]
 8001bca:	f7fe fcbd 	bl	8000548 <__aeabi_f2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	ec43 2b10 	vmov	d0, r2, r3
 8001bd6:	f00c f813 	bl	800dc00 <sqrt>
 8001bda:	ec53 2b10 	vmov	r2, r3, d0
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7fe ffe1 	bl	8000ba8 <__aeabi_d2f>
 8001be6:	4603      	mov	r3, r0
 8001be8:	613b      	str	r3, [r7, #16]
#endif
		
		/*
		 * If any of the input buffers has RMS under threshold
		 */
		if(rms1>threshold && rms2>threshold){
 8001bea:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <audioPreproc+0x2b0>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	ee07 3a90 	vmov	s15, r3
 8001bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	dd35      	ble.n	8001c70 <audioPreproc+0x2b8>
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <audioPreproc+0x2b0>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	ee07 3a90 	vmov	s15, r3
 8001c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c10:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	dd28      	ble.n	8001c70 <audioPreproc+0x2b8>
					,(int)rms1,(int)rms2,threshold, (float)rms1/(float)rms2 );
			HAL_UART_Transmit(&huart6,(uint8_t*)msg_buf,strlen(msg_buf),20);
#endif

			/*Increment over threshold counter up to 3*/
			if(ovr_thr_cnt<BUF_OVR_THR)
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <audioPreproc+0x2b4>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d827      	bhi.n	8001c76 <audioPreproc+0x2be>
				ovr_thr_cnt++;
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <audioPreproc+0x2b4>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <audioPreproc+0x2b4>)
 8001c30:	701a      	strb	r2, [r3, #0]
			if(ovr_thr_cnt<BUF_OVR_THR)
 8001c32:	e020      	b.n	8001c76 <audioPreproc+0x2be>
 8001c34:	2200005c 	.word	0x2200005c
 8001c38:	22000058 	.word	0x22000058
 8001c3c:	20002908 	.word	0x20002908
 8001c40:	20002910 	.word	0x20002910
 8001c44:	2000290c 	.word	0x2000290c
 8001c48:	20002914 	.word	0x20002914
 8001c4c:	20002aa8 	.word	0x20002aa8
 8001c50:	20002918 	.word	0x20002918
 8001c54:	200029e0 	.word	0x200029e0
 8001c58:	51eb851f 	.word	0x51eb851f
 8001c5c:	20005ab0 	.word	0x20005ab0
 8001c60:	20002ab0 	.word	0x20002ab0
 8001c64:	200042b0 	.word	0x200042b0
 8001c68:	20002aac 	.word	0x20002aac
 8001c6c:	20002aaa 	.word	0x20002aaa
		}
		else{
			ovr_thr_cnt=0;
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <audioPreproc+0x304>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]

		/*
		 * Update cross-correlation circular buffer offset
		 * XCOR_BUF_SZ = AUDIO_BUF_SZ * XCOR_BUF_MULT
		 */
		xcor_buf_oset=( xcor_buf_oset + 1 ) % XCOR_BUF_MULT;
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <audioPreproc+0x308>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <audioPreproc+0x30c>)
 8001c7e:	fb83 3102 	smull	r3, r1, r3, r2
 8001c82:	17d3      	asrs	r3, r2, #31
 8001c84:	1ac9      	subs	r1, r1, r3
 8001c86:	460b      	mov	r3, r1
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	440b      	add	r3, r1
 8001c8c:	1ad1      	subs	r1, r2, r3
 8001c8e:	b2ca      	uxtb	r2, r1
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <audioPreproc+0x308>)
 8001c92:	701a      	strb	r2, [r3, #0]

		/*
		 * Update DC buffer offset idx
		 */
		dc_buf_idx=( dc_buf_idx + 1 ) % DC_BUF_SZ;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <audioPreproc+0x310>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	4a0c      	ldr	r2, [pc, #48]	; (8001ccc <audioPreproc+0x314>)
 8001c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8001ca0:	1151      	asrs	r1, r2, #5
 8001ca2:	17da      	asrs	r2, r3, #31
 8001ca4:	1a8a      	subs	r2, r1, r2
 8001ca6:	2164      	movs	r1, #100	; 0x64
 8001ca8:	fb01 f202 	mul.w	r2, r1, r2
 8001cac:	1a9a      	subs	r2, r3, r2
 8001cae:	b292      	uxth	r2, r2
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <audioPreproc+0x310>)
 8001cb2:	801a      	strh	r2, [r3, #0]

	}
}
 8001cb4:	bf00      	nop
 8001cb6:	3728      	adds	r7, #40	; 0x28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20002aaa 	.word	0x20002aaa
 8001cc0:	20005ab0 	.word	0x20005ab0
 8001cc4:	55555556 	.word	0x55555556
 8001cc8:	20002aa8 	.word	0x20002aa8
 8001ccc:	51eb851f 	.word	0x51eb851f

08001cd0 <HAL_GPIO_EXTI_Callback>:

/*
 * Callback function to manage external interrupt push buttons pushed
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Manage interrupt on exti line from AMG8833 sensor
	 */
	if( GPIO_PIN == GPIO_PIN_15 ){
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ce0:	d106      	bne.n	8001cf0 <HAL_GPIO_EXTI_Callback+0x20>

		AMG_TARGET_DET=1;
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]
		stop( &motor );
 8001ce8:	4809      	ldr	r0, [pc, #36]	; (8001d10 <HAL_GPIO_EXTI_Callback+0x40>)
 8001cea:	f7ff fce0 	bl	80016ae <stop>
	else if( !EXTI_BUT_PUSH  ){
		EXTI_BUT_PUSH=1;
		//Start debounce timer: interrupt after 50 ms
		HAL_TIM_Base_Start_IT(&htim10);
	}
}
 8001cee:	e009      	b.n	8001d04 <HAL_GPIO_EXTI_Callback+0x34>
	else if( !EXTI_BUT_PUSH  ){
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x44>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d105      	bne.n	8001d04 <HAL_GPIO_EXTI_Callback+0x34>
		EXTI_BUT_PUSH=1;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_GPIO_EXTI_Callback+0x44>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim10);
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <HAL_GPIO_EXTI_Callback+0x48>)
 8001d00:	f007 faa8 	bl	8009254 <HAL_TIM_Base_Start_IT>
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	22000010 	.word	0x22000010
 8001d10:	200007d0 	.word	0x200007d0
 8001d14:	2200007c 	.word	0x2200007c
 8001d18:	20000638 	.word	0x20000638

08001d1c <searchWhilePlay>:

/*
 * Manage audio/video streaming while searching a target towards a destination
 * expressed in angle degree
 */
void searchWhilePlay(float angle){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	ed87 0a01 	vstr	s0, [r7, #4]
	 /*
	  * Move to the right limit
	  */
	 moveToIt( &motor,angle );
 8001d26:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d2a:	4808      	ldr	r0, [pc, #32]	; (8001d4c <searchWhilePlay+0x30>)
 8001d2c:	f7ff fca6 	bl	800167c <moveToIt>

	 /*
	  * While motor is in motion
	  */
	 while( motor.move_lock ){
 8001d30:	e003      	b.n	8001d3a <searchWhilePlay+0x1e>

		 audioPreproc();
 8001d32:	f7ff fe41 	bl	80019b8 <audioPreproc>
		 thermalImgFSM();
 8001d36:	f7ff fcf7 	bl	8001728 <thermalImgFSM>
	 while( motor.move_lock ){
 8001d3a:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <searchWhilePlay+0x30>)
 8001d3c:	7f1b      	ldrb	r3, [r3, #28]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f7      	bne.n	8001d32 <searchWhilePlay+0x16>
	 }

}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200007d0 	.word	0x200007d0

08001d50 <targetDetect>:
void targetDetect(){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	  /*
	   * Set absolute value value threshold to detect hot objects
	   * Test it with this threshold by making noise and light on a lighter
	   * Adjust threshold to 28° detect a human in a room at approximately 20°
	   */
	  amg8833SetAbsHighThrs( &cam,(uint16_t)( 37.0/0.25 ),2 );
 8001d54:	2202      	movs	r2, #2
 8001d56:	2194      	movs	r1, #148	; 0x94
 8001d58:	482c      	ldr	r0, [pc, #176]	; (8001e0c <targetDetect+0xbc>)
 8001d5a:	f7ff fa74 	bl	8001246 <amg8833SetAbsHighThrs>
	  /*
	   * Set absolute threshold interrupt mode
	   */
	  amg8833SetIntMode( &cam,1,2 );
 8001d5e:	2202      	movs	r2, #2
 8001d60:	2101      	movs	r1, #1
 8001d62:	482a      	ldr	r0, [pc, #168]	; (8001e0c <targetDetect+0xbc>)
 8001d64:	f7ff fa3c 	bl	80011e0 <amg8833SetIntMode>
	  /*
	   * Enable interrupt on amg8833
	   */
	  amg8833IntEn( &cam,3 );
 8001d68:	2103      	movs	r1, #3
 8001d6a:	4828      	ldr	r0, [pc, #160]	; (8001e0c <targetDetect+0xbc>)
 8001d6c:	f7ff f9d3 	bl	8001116 <amg8833IntEn>
	  /*
	   * Reset interrupt flag
	   */
	  AMG_TARGET_DET=0;
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <targetDetect+0xc0>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]

	 /*
	  * Pan with the camera and stop the movement if amg8833 triggers interrupt on exti line (i.e. target detected)
	  */
	 if( motor.ang_idx > 0 ){
 8001d76:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <targetDetect+0xc4>)
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	dd0c      	ble.n	8001d98 <targetDetect+0x48>
		 /*
		  * Move to the right limit and stop if target is detected
		  */
		 searchWhilePlay( -80.0 );
 8001d7e:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8001e18 <targetDetect+0xc8>
 8001d82:	f7ff ffcb 	bl	8001d1c <searchWhilePlay>
		 /*
		  * If no target was detected
		  */
		 if(!AMG_TARGET_DET){
 8001d86:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <targetDetect+0xc0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d110      	bne.n	8001db0 <targetDetect+0x60>
			 /*
			  * Move to the left limit and stop if target is detected
			  */
			 searchWhilePlay( 80.0 );
 8001d8e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001e1c <targetDetect+0xcc>
 8001d92:	f7ff ffc3 	bl	8001d1c <searchWhilePlay>
 8001d96:	e00b      	b.n	8001db0 <targetDetect+0x60>
		 }
	 }
	 else{
		 searchWhilePlay( 80.0 );
 8001d98:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001e1c <targetDetect+0xcc>
 8001d9c:	f7ff ffbe 	bl	8001d1c <searchWhilePlay>

		 if(!AMG_TARGET_DET){
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <targetDetect+0xc0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d103      	bne.n	8001db0 <targetDetect+0x60>
			 searchWhilePlay( -80.0 );
 8001da8:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8001e18 <targetDetect+0xc8>
 8001dac:	f7ff ffb6 	bl	8001d1c <searchWhilePlay>
		 }
	 }
	 /*
	  * Disable amg8833 interrupt
	  */
	 amg8833IntDis( &cam,2 );
 8001db0:	2102      	movs	r1, #2
 8001db2:	4816      	ldr	r0, [pc, #88]	; (8001e0c <targetDetect+0xbc>)
 8001db4:	f7ff f9d7 	bl	8001166 <amg8833IntDis>

	 if( AMG_TARGET_DET ){
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <targetDetect+0xc0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01f      	beq.n	8001e00 <targetDetect+0xb0>

		 sprintf( msg_buf,"Target was detected at angle: %f\r\n", motor.ang_idx*motor.res );
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <targetDetect+0xc4>)
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <targetDetect+0xc4>)
 8001dce:	edd3 7a05 	vldr	s15, [r3, #20]
 8001dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd6:	ee17 0a90 	vmov	r0, s15
 8001dda:	f7fe fbb5 	bl	8000548 <__aeabi_f2d>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	490f      	ldr	r1, [pc, #60]	; (8001e20 <targetDetect+0xd0>)
 8001de4:	480f      	ldr	r0, [pc, #60]	; (8001e24 <targetDetect+0xd4>)
 8001de6:	f009 fc91 	bl	800b70c <siprintf>
		 HAL_UART_Transmit( &huart6,(uint8_t *)msg_buf,strlen(msg_buf),HAL_MAX_DELAY);
 8001dea:	480e      	ldr	r0, [pc, #56]	; (8001e24 <targetDetect+0xd4>)
 8001dec:	f7fe f9f0 	bl	80001d0 <strlen>
 8001df0:	4603      	mov	r3, r0
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001df8:	490a      	ldr	r1, [pc, #40]	; (8001e24 <targetDetect+0xd4>)
 8001dfa:	480b      	ldr	r0, [pc, #44]	; (8001e28 <targetDetect+0xd8>)
 8001dfc:	f007 fed7 	bl	8009bae <HAL_UART_Transmit>
	 }

	 AMG_TARGET_DET=0;
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <targetDetect+0xc0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200007c8 	.word	0x200007c8
 8001e10:	22000010 	.word	0x22000010
 8001e14:	200007d0 	.word	0x200007d0
 8001e18:	c2a00000 	.word	0xc2a00000
 8001e1c:	42a00000 	.word	0x42a00000
 8001e20:	0800ddd8 	.word	0x0800ddd8
 8001e24:	20000804 	.word	0x20000804
 8001e28:	200006c4 	.word	0x200006c4

08001e2c <logMotor>:


/*
 * Log debug UART interface motor position computed since the latest call to rstAngle(&motor)
 */
void logMotor(){
 8001e2c:	b5b0      	push	{r4, r5, r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af04      	add	r7, sp, #16

	sprintf(msg_buf,"Motor position: %f\r\nStep angular resolution: %f\r\nAngular index:%d \r\n\r\n\r\n",
								motor.ang_idx*motor.res,motor.res,motor.ang_idx);
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <logMotor+0x68>)
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <logMotor+0x68>)
 8001e40:	edd3 7a05 	vldr	s15, [r3, #20]
 8001e44:	ee67 7a27 	vmul.f32	s15, s14, s15
	sprintf(msg_buf,"Motor position: %f\r\nStep angular resolution: %f\r\nAngular index:%d \r\n\r\n\r\n",
 8001e48:	ee17 0a90 	vmov	r0, s15
 8001e4c:	f7fe fb7c 	bl	8000548 <__aeabi_f2d>
 8001e50:	4604      	mov	r4, r0
 8001e52:	460d      	mov	r5, r1
								motor.ang_idx*motor.res,motor.res,motor.ang_idx);
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <logMotor+0x68>)
 8001e56:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buf,"Motor position: %f\r\nStep angular resolution: %f\r\nAngular index:%d \r\n\r\n\r\n",
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb75 	bl	8000548 <__aeabi_f2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	490c      	ldr	r1, [pc, #48]	; (8001e94 <logMotor+0x68>)
 8001e64:	6909      	ldr	r1, [r1, #16]
 8001e66:	9102      	str	r1, [sp, #8]
 8001e68:	e9cd 2300 	strd	r2, r3, [sp]
 8001e6c:	4622      	mov	r2, r4
 8001e6e:	462b      	mov	r3, r5
 8001e70:	4909      	ldr	r1, [pc, #36]	; (8001e98 <logMotor+0x6c>)
 8001e72:	480a      	ldr	r0, [pc, #40]	; (8001e9c <logMotor+0x70>)
 8001e74:	f009 fc4a 	bl	800b70c <siprintf>
	HAL_UART_Transmit_DMA(&huart6,(uint8_t*)msg_buf,strlen(msg_buf));
 8001e78:	4808      	ldr	r0, [pc, #32]	; (8001e9c <logMotor+0x70>)
 8001e7a:	f7fe f9a9 	bl	80001d0 <strlen>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	4905      	ldr	r1, [pc, #20]	; (8001e9c <logMotor+0x70>)
 8001e86:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <logMotor+0x74>)
 8001e88:	f007 ff24 	bl	8009cd4 <HAL_UART_Transmit_DMA>
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bdb0      	pop	{r4, r5, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200007d0 	.word	0x200007d0
 8001e98:	0800ddfc 	.word	0x0800ddfc
 8001e9c:	20000804 	.word	0x20000804
 8001ea0:	200006c4 	.word	0x200006c4

08001ea4 <motorControl>:

/*
 * Read joystick's position and EXTI buttons and perform one motor step according to joystick direction
 */
void motorControl(){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0

	JstickDir dir;

	if(MOTOR_MV){
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <motorControl+0x60>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d024      	beq.n	8001efc <motorControl+0x58>
		MOTOR_MV=0;
 8001eb2:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <motorControl+0x60>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

		dir=jstickGetDirPoll(&js);
 8001eb8:	4813      	ldr	r0, [pc, #76]	; (8001f08 <motorControl+0x64>)
 8001eba:	f7ff fa0d 	bl	80012d8 <jstickGetDirPoll>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
		if(dir==LEFT || LEFT_BUT_PUSH){
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d003      	beq.n	8001ed0 <motorControl+0x2c>
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <motorControl+0x68>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d007      	beq.n	8001ee0 <motorControl+0x3c>
			LEFT_BUT_PUSH=0;
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <motorControl+0x68>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
			step(&motor,1);
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	480d      	ldr	r0, [pc, #52]	; (8001f10 <motorControl+0x6c>)
 8001eda:	f7ff fb56 	bl	800158a <step>
			logMotor();
#endif
		}
	}

}
 8001ede:	e00d      	b.n	8001efc <motorControl+0x58>
		else if(dir==RIGHT || RIGHT_BUT_PUSH){
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d003      	beq.n	8001eee <motorControl+0x4a>
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <motorControl+0x70>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <motorControl+0x58>
			RIGHT_BUT_PUSH=0;
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <motorControl+0x70>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
			step(&motor,0);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4806      	ldr	r0, [pc, #24]	; (8001f10 <motorControl+0x6c>)
 8001ef8:	f7ff fb47 	bl	800158a <step>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2200003c 	.word	0x2200003c
 8001f08:	200007f8 	.word	0x200007f8
 8001f0c:	22000074 	.word	0x22000074
 8001f10:	200007d0 	.word	0x200007d0
 8001f14:	22000070 	.word	0x22000070

08001f18 <initCalibration>:

/*Functions to init calibration/sound source localization mode*/
void initCalibration(){
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
	GPIOD->ODR&=~GPIO_PIN_15;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <initCalibration+0x1c>)
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <initCalibration+0x1c>)
 8001f22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001f26:	6153      	str	r3, [r2, #20]
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40020c00 	.word	0x40020c00

08001f38 <initSSL>:

/*
 * Initi Sound Source Localization mode
 */
void initSSL(){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0

	  /*Reset motor angle idx to 0 to set initial camera offset*/
	  rstAngle(&motor);
 8001f3c:	4814      	ldr	r0, [pc, #80]	; (8001f90 <initSSL+0x58>)
 8001f3e:	f7ff fa64 	bl	800140a <rstAngle>
	  logMotor();
 8001f42:	f7ff ff73 	bl	8001e2c <logMotor>
	  mode=1;
 8001f46:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <initSSL+0x5c>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]

	  /*Reset xcor_buf_oset*/
	  xcor_buf_oset=0;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <initSSL+0x60>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]

	  /*Reset threshold to a start value of 100*/
	  threshold=50;
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <initSSL+0x64>)
 8001f54:	2232      	movs	r2, #50	; 0x32
 8001f56:	801a      	strh	r2, [r3, #0]
	  /*Reset over threshold counter*/
	  ovr_thr_cnt=0;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <initSSL+0x68>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]

	  sprintf(msg_buf,"Max delay between audio signals (in samples):%d\r\b",MAX_DELAY);
 8001f5e:	220e      	movs	r2, #14
 8001f60:	4910      	ldr	r1, [pc, #64]	; (8001fa4 <initSSL+0x6c>)
 8001f62:	4811      	ldr	r0, [pc, #68]	; (8001fa8 <initSSL+0x70>)
 8001f64:	f009 fbd2 	bl	800b70c <siprintf>
	  HAL_UART_Transmit(&huart6,(uint8_t*)msg_buf,strlen(msg_buf),HAL_MAX_DELAY);
 8001f68:	480f      	ldr	r0, [pc, #60]	; (8001fa8 <initSSL+0x70>)
 8001f6a:	f7fe f931 	bl	80001d0 <strlen>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f76:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <initSSL+0x70>)
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <initSSL+0x74>)
 8001f7a:	f007 fe18 	bl	8009bae <HAL_UART_Transmit>
	  /*Toggle led to notify the mode change*/
	  GPIOD->ODR|=GPIO_PIN_15;
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <initSSL+0x78>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <initSSL+0x78>)
 8001f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f88:	6153      	str	r3, [r2, #20]
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200007d0 	.word	0x200007d0
 8001f94:	20002aae 	.word	0x20002aae
 8001f98:	20005ab0 	.word	0x20005ab0
 8001f9c:	20002aac 	.word	0x20002aac
 8001fa0:	20002aaa 	.word	0x20002aaa
 8001fa4:	0800de48 	.word	0x0800de48
 8001fa8:	20000804 	.word	0x20000804
 8001fac:	200006c4 	.word	0x200006c4
 8001fb0:	40020c00 	.word	0x40020c00

08001fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fba:	f001 fc3f 	bl	800383c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fbe:	f000 f905 	bl	80021cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_I2C_DeInit(&hi2c1);
 8001fc2:	4869      	ldr	r0, [pc, #420]	; (8002168 <main+0x1b4>)
 8001fc4:	f003 fdf2 	bl	8005bac <HAL_I2C_DeInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fc8:	f000 fc9e 	bl	8002908 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001fcc:	f000 fb5a 	bl	8002684 <MX_TIM6_Init>
  MX_DMA_Init();
 8001fd0:	f000 fc3c 	bl	800284c <MX_DMA_Init>
  MX_I2C1_Init();
 8001fd4:	f000 fa8e 	bl	80024f4 <MX_I2C1_Init>
  MX_ADC3_Init();
 8001fd8:	f000 fa06 	bl	80023e8 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001fdc:	f000 f960 	bl	80022a0 <MX_ADC1_Init>
  MX_DAC_Init();
 8001fe0:	f000 fa54 	bl	800248c <MX_DAC_Init>
  MX_TIM2_Init();
 8001fe4:	f000 fab4 	bl	8002550 <MX_TIM2_Init>
  MX_ADC2_Init();
 8001fe8:	f000 f9ac 	bl	8002344 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8001fec:	f000 fbda 	bl	80027a4 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001ff0:	f000 fb7e 	bl	80026f0 <MX_TIM7_Init>
  MX_USART6_UART_Init();
 8001ff4:	f000 fc00 	bl	80027f8 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001ff8:	f000 fbb0 	bl	800275c <MX_TIM10_Init>
  MX_TIM4_Init();
 8001ffc:	f000 faf4 	bl	80025e8 <MX_TIM4_Init>


  /*
   * Init DMA handle data structures for thermal image in/out transfer
   */
  HAL_DMA_Init(&hdma_i2c1_rx);
 8002000:	485a      	ldr	r0, [pc, #360]	; (800216c <main+0x1b8>)
 8002002:	f002 fd4b 	bl	8004a9c <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart3_tx);
 8002006:	485a      	ldr	r0, [pc, #360]	; (8002170 <main+0x1bc>)
 8002008:	f002 fd48 	bl	8004a9c <HAL_DMA_Init>

  HAL_Delay(50);
 800200c:	2032      	movs	r0, #50	; 0x32
 800200e:	f001 fc57 	bl	80038c0 <HAL_Delay>

  /*Init amg8833 sensor with ad select pin connected to the ground*/
  amg8833Init(&cam,&hi2c1,0);
 8002012:	2200      	movs	r2, #0
 8002014:	4954      	ldr	r1, [pc, #336]	; (8002168 <main+0x1b4>)
 8002016:	4857      	ldr	r0, [pc, #348]	; (8002174 <main+0x1c0>)
 8002018:	f7fe ff98 	bl	8000f4c <amg8833Init>

  /*Wait until amg8833 is ready*/
  while(!amg8833IsReady( &cam, 5 )){
 800201c:	e008      	b.n	8002030 <main+0x7c>
	  GPIOD->ODR|=GPIO_PIN_14;
 800201e:	4b56      	ldr	r3, [pc, #344]	; (8002178 <main+0x1c4>)
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	4a55      	ldr	r2, [pc, #340]	; (8002178 <main+0x1c4>)
 8002024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002028:	6153      	str	r3, [r2, #20]
	  HAL_Delay(20);
 800202a:	2014      	movs	r0, #20
 800202c:	f001 fc48 	bl	80038c0 <HAL_Delay>
  while(!amg8833IsReady( &cam, 5 )){
 8002030:	2105      	movs	r1, #5
 8002032:	4850      	ldr	r0, [pc, #320]	; (8002174 <main+0x1c0>)
 8002034:	f7fe ffa2 	bl	8000f7c <amg8833IsReady>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0ef      	beq.n	800201e <main+0x6a>
  }

  GPIOD->ODR&=~GPIO_PIN_14;
 800203e:	4b4e      	ldr	r3, [pc, #312]	; (8002178 <main+0x1c4>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	4a4d      	ldr	r2, [pc, #308]	; (8002178 <main+0x1c4>)
 8002044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002048:	6153      	str	r3, [r2, #20]

  /*
   * Reset camera to initial condition
   */
  amg8833Reset(&cam, 3);
 800204a:	2103      	movs	r1, #3
 800204c:	4849      	ldr	r0, [pc, #292]	; (8002174 <main+0x1c0>)
 800204e:	f7ff f836 	bl	80010be <amg8833Reset>

  HAL_Delay(50);
 8002052:	2032      	movs	r0, #50	; 0x32
 8002054:	f001 fc34 	bl	80038c0 <HAL_Delay>

  /*Start Timer 6 - Update event every 0.025 s for thermal camera reading*/
  HAL_TIM_Base_Start_IT(&htim6);
 8002058:	4848      	ldr	r0, [pc, #288]	; (800217c <main+0x1c8>)
 800205a:	f007 f8fb 	bl	8009254 <HAL_TIM_Base_Start_IT>
  /*Start Timer 7 - Update event every 1/10 s for motor control*/
  HAL_TIM_Base_Start_IT(&htim7);
 800205e:	4848      	ldr	r0, [pc, #288]	; (8002180 <main+0x1cc>)
 8002060:	f007 f8f8 	bl	8009254 <HAL_TIM_Base_Start_IT>

  uint16_t dc_init=2048;
 8002064:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002068:	807b      	strh	r3, [r7, #2]
  /*
   * Fill dc offset estimation with intial value
   */
  for(int i=0;i<DC_BUF_SZ;i++){
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	e00c      	b.n	800208a <main+0xd6>
	  dc_buf_ch1[i]=dc_init;
 8002070:	4944      	ldr	r1, [pc, #272]	; (8002184 <main+0x1d0>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	887a      	ldrh	r2, [r7, #2]
 8002076:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  dc_buf_ch2[i]=dc_init;
 800207a:	4943      	ldr	r1, [pc, #268]	; (8002188 <main+0x1d4>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	887a      	ldrh	r2, [r7, #2]
 8002080:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for(int i=0;i<DC_BUF_SZ;i++){
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3301      	adds	r3, #1
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b63      	cmp	r3, #99	; 0x63
 800208e:	ddef      	ble.n	8002070 <main+0xbc>
  }
  /*
   * Start audio clock
   */
  HAL_TIM_Base_Start_IT(&htim2);
 8002090:	483e      	ldr	r0, [pc, #248]	; (800218c <main+0x1d8>)
 8002092:	f007 f8df 	bl	8009254 <HAL_TIM_Base_Start_IT>
  /*
   * Start audio DMA continous reading
   * ADC1 and DAC both works with htim2 conversion clock
   */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)audio_in_buf1,AUDIO_TOT_BUF_SZ);
 8002096:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209a:	493d      	ldr	r1, [pc, #244]	; (8002190 <main+0x1dc>)
 800209c:	483d      	ldr	r0, [pc, #244]	; (8002194 <main+0x1e0>)
 800209e:	f001 fdd5 	bl	8003c4c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint32_t*)audio_in_buf2,AUDIO_TOT_BUF_SZ);
 80020a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a6:	493c      	ldr	r1, [pc, #240]	; (8002198 <main+0x1e4>)
 80020a8:	483c      	ldr	r0, [pc, #240]	; (800219c <main+0x1e8>)
 80020aa:	f001 fdcf 	bl	8003c4c <HAL_ADC_Start_DMA>

  /*Start DMA request to playback audio through DAC channels 1 and 2*/
  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_1,(uint32_t*)audio_out_buf1,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 80020ae:	2300      	movs	r3, #0
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b6:	4a3a      	ldr	r2, [pc, #232]	; (80021a0 <main+0x1ec>)
 80020b8:	2100      	movs	r1, #0
 80020ba:	483a      	ldr	r0, [pc, #232]	; (80021a4 <main+0x1f0>)
 80020bc:	f002 face 	bl	800465c <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_2,(uint32_t*)audio_out_buf2,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 80020c0:	2300      	movs	r3, #0
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c8:	4a37      	ldr	r2, [pc, #220]	; (80021a8 <main+0x1f4>)
 80020ca:	2110      	movs	r1, #16
 80020cc:	4835      	ldr	r0, [pc, #212]	; (80021a4 <main+0x1f0>)
 80020ce:	f002 fac5 	bl	800465c <HAL_DAC_Start_DMA>

  /*Init step motor data structure*/
  initStep(&motor,GPIO_PIN_1,GPIO_PIN_2,GPIO_PIN_3,GPIO_PIN_4,GPIOD,FULL,&htim4);
 80020d2:	4b36      	ldr	r3, [pc, #216]	; (80021ac <main+0x1f8>)
 80020d4:	9303      	str	r3, [sp, #12]
 80020d6:	2301      	movs	r3, #1
 80020d8:	9302      	str	r3, [sp, #8]
 80020da:	4b27      	ldr	r3, [pc, #156]	; (8002178 <main+0x1c4>)
 80020dc:	9301      	str	r3, [sp, #4]
 80020de:	2310      	movs	r3, #16
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	2308      	movs	r3, #8
 80020e4:	2204      	movs	r2, #4
 80020e6:	2102      	movs	r1, #2
 80020e8:	4831      	ldr	r0, [pc, #196]	; (80021b0 <main+0x1fc>)
 80020ea:	f7ff f91b 	bl	8001324 <initStep>

  /*Init joystick img_buf structure with yellow error pin*/
  initJstick(&js,&hadc3,GPIO_PIN_12,GPIOD);
 80020ee:	4b22      	ldr	r3, [pc, #136]	; (8002178 <main+0x1c4>)
 80020f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020f4:	492f      	ldr	r1, [pc, #188]	; (80021b4 <main+0x200>)
 80020f6:	4830      	ldr	r0, [pc, #192]	; (80021b8 <main+0x204>)
 80020f8:	f7ff f8d7 	bl	80012aa <initJstick>
  /*Start ADC3 associated with joystick*/
  HAL_ADC_Start(&hadc3);
 80020fc:	482d      	ldr	r0, [pc, #180]	; (80021b4 <main+0x200>)
 80020fe:	f001 fc47 	bl	8003990 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MODE_TOGGLE=0;
 8002102:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <main+0x208>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
  mode=1;
 8002108:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <main+0x20c>)
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
  threshold=100;
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <main+0x210>)
 8002110:	2264      	movs	r2, #100	; 0x64
 8002112:	801a      	strh	r2, [r3, #0]

  while (1)
  {
	  thermalImgFSM();
 8002114:	f7ff fb08 	bl	8001728 <thermalImgFSM>

	  /*MODE_TOGGLE bit is set by the EXTI4 button line debounce timer TIM10*/
	  if( !MODE_TOGGLE ){
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <main+0x208>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10d      	bne.n	800213c <main+0x188>
		  /*
		   * Calibration mode:
		   * -microphones AD conversion can be tested connecting an oscilloscope or an amplifier to DAC channels 1/2
		   * -camera can be moved manually using joystick and buttons to set angular offset
		   */
		  if(mode){
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <main+0x20c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d004      	beq.n	8002132 <main+0x17e>
			  initCalibration();
 8002128:	f7ff fef6 	bl	8001f18 <initCalibration>
			  mode=0;
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <main+0x20c>)
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
		  }

		  audioPlayback();
 8002132:	f7ff fbb9 	bl	80018a8 <audioPlayback>
		  motorControl();
 8002136:	f7ff feb5 	bl	8001ea4 <motorControl>
 800213a:	e7eb      	b.n	8002114 <main+0x160>
	  }
	  else{
		  if(!mode){
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <main+0x20c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <main+0x1a0>
			  /*
			   * Sound Source Localization mode
			   */
			  initSSL();
 8002144:	f7ff fef8 	bl	8001f38 <initSSL>
			  mode=1;
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <main+0x20c>)
 800214a:	2201      	movs	r2, #1
 800214c:	701a      	strb	r2, [r3, #0]
			  HAL_Delay( 100 );
 800214e:	2064      	movs	r0, #100	; 0x64
 8002150:	f001 fbb6 	bl	80038c0 <HAL_Delay>
		  }
		  /*
		   * Preprocess audio and compute RMS of audio buffers
		   */
		  audioPreproc();
 8002154:	f7ff fc30 	bl	80019b8 <audioPreproc>
		  /*
		   * If more than BUF_OVR_THR consecutive buffers were found to be over the threshold
		   * trigger hot target detection
		   */
		 if( ovr_thr_cnt >= BUF_OVR_THR ){
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <main+0x214>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d9d9      	bls.n	8002114 <main+0x160>
			 targetDetect();
 8002160:	f7ff fdf6 	bl	8001d50 <targetDetect>
	  thermalImgFSM();
 8002164:	e7d6      	b.n	8002114 <main+0x160>
 8002166:	bf00      	nop
 8002168:	20000464 	.word	0x20000464
 800216c:	200004b8 	.word	0x200004b8
 8002170:	20000708 	.word	0x20000708
 8002174:	200007c8 	.word	0x200007c8
 8002178:	40020c00 	.word	0x40020c00
 800217c:	200005a8 	.word	0x200005a8
 8002180:	200005f0 	.word	0x200005f0
 8002184:	20002918 	.word	0x20002918
 8002188:	200029e0 	.word	0x200029e0
 800218c:	20000518 	.word	0x20000518
 8002190:	20000908 	.word	0x20000908
 8002194:	200001f8 	.word	0x200001f8
 8002198:	20001908 	.word	0x20001908
 800219c:	20000240 	.word	0x20000240
 80021a0:	20001108 	.word	0x20001108
 80021a4:	20000390 	.word	0x20000390
 80021a8:	20002108 	.word	0x20002108
 80021ac:	20000560 	.word	0x20000560
 80021b0:	200007d0 	.word	0x200007d0
 80021b4:	20000288 	.word	0x20000288
 80021b8:	200007f8 	.word	0x200007f8
 80021bc:	22000078 	.word	0x22000078
 80021c0:	20002aae 	.word	0x20002aae
 80021c4:	20002aac 	.word	0x20002aac
 80021c8:	20002aaa 	.word	0x20002aaa

080021cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b094      	sub	sp, #80	; 0x50
 80021d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021d2:	f107 0320 	add.w	r3, r7, #32
 80021d6:	2230      	movs	r2, #48	; 0x30
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f008 fe24 	bl	800ae28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021e0:	f107 030c 	add.w	r3, r7, #12
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021f0:	2300      	movs	r3, #0
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	4b28      	ldr	r3, [pc, #160]	; (8002298 <SystemClock_Config+0xcc>)
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	4a27      	ldr	r2, [pc, #156]	; (8002298 <SystemClock_Config+0xcc>)
 80021fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002200:	4b25      	ldr	r3, [pc, #148]	; (8002298 <SystemClock_Config+0xcc>)
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800220c:	2300      	movs	r3, #0
 800220e:	607b      	str	r3, [r7, #4]
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <SystemClock_Config+0xd0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a21      	ldr	r2, [pc, #132]	; (800229c <SystemClock_Config+0xd0>)
 8002216:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800221a:	6013      	str	r3, [r2, #0]
 800221c:	4b1f      	ldr	r3, [pc, #124]	; (800229c <SystemClock_Config+0xd0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002228:	2302      	movs	r3, #2
 800222a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800222c:	2301      	movs	r3, #1
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002230:	2310      	movs	r3, #16
 8002232:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002234:	2302      	movs	r3, #2
 8002236:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002238:	2300      	movs	r3, #0
 800223a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800223c:	2308      	movs	r3, #8
 800223e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002240:	2332      	movs	r3, #50	; 0x32
 8002242:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002244:	2302      	movs	r3, #2
 8002246:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002248:	2307      	movs	r3, #7
 800224a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800224c:	f107 0320 	add.w	r3, r7, #32
 8002250:	4618      	mov	r0, r3
 8002252:	f006 fae5 	bl	8008820 <HAL_RCC_OscConfig>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800225c:	f000 fc90 	bl	8002b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002260:	230f      	movs	r3, #15
 8002262:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002264:	2302      	movs	r3, #2
 8002266:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800226c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002272:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002276:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	2101      	movs	r1, #1
 800227e:	4618      	mov	r0, r3
 8002280:	f006 fd46 	bl	8008d10 <HAL_RCC_ClockConfig>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800228a:	f000 fc79 	bl	8002b80 <Error_Handler>
  }
}
 800228e:	bf00      	nop
 8002290:	3750      	adds	r7, #80	; 0x50
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40007000 	.word	0x40007000

080022a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022a6:	463b      	mov	r3, r7
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <MX_ADC1_Init+0x9c>)
 80022b4:	4a22      	ldr	r2, [pc, #136]	; (8002340 <MX_ADC1_Init+0xa0>)
 80022b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80022b8:	4b20      	ldr	r3, [pc, #128]	; (800233c <MX_ADC1_Init+0x9c>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022be:	4b1f      	ldr	r3, [pc, #124]	; (800233c <MX_ADC1_Init+0x9c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80022c4:	4b1d      	ldr	r3, [pc, #116]	; (800233c <MX_ADC1_Init+0x9c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022ca:	4b1c      	ldr	r3, [pc, #112]	; (800233c <MX_ADC1_Init+0x9c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <MX_ADC1_Init+0x9c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <MX_ADC1_Init+0x9c>)
 80022da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80022e0:	4b16      	ldr	r3, [pc, #88]	; (800233c <MX_ADC1_Init+0x9c>)
 80022e2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <MX_ADC1_Init+0x9c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <MX_ADC1_Init+0x9c>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_ADC1_Init+0x9c>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <MX_ADC1_Init+0x9c>)
 80022fe:	2201      	movs	r2, #1
 8002300:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002302:	480e      	ldr	r0, [pc, #56]	; (800233c <MX_ADC1_Init+0x9c>)
 8002304:	f001 fb00 	bl	8003908 <HAL_ADC_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800230e:	f000 fc37 	bl	8002b80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002312:	2308      	movs	r3, #8
 8002314:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002316:	2301      	movs	r3, #1
 8002318:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800231e:	463b      	mov	r3, r7
 8002320:	4619      	mov	r1, r3
 8002322:	4806      	ldr	r0, [pc, #24]	; (800233c <MX_ADC1_Init+0x9c>)
 8002324:	f001 fdc4 	bl	8003eb0 <HAL_ADC_ConfigChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800232e:	f000 fc27 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200001f8 	.word	0x200001f8
 8002340:	40012000 	.word	0x40012000

08002344 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800234a:	463b      	mov	r3, r7
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002356:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <MX_ADC2_Init+0x9c>)
 8002358:	4a22      	ldr	r2, [pc, #136]	; (80023e4 <MX_ADC2_Init+0xa0>)
 800235a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800235c:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <MX_ADC2_Init+0x9c>)
 800235e:	2200      	movs	r2, #0
 8002360:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002362:	4b1f      	ldr	r3, [pc, #124]	; (80023e0 <MX_ADC2_Init+0x9c>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002368:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <MX_ADC2_Init+0x9c>)
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <MX_ADC2_Init+0x9c>)
 8002370:	2200      	movs	r2, #0
 8002372:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <MX_ADC2_Init+0x9c>)
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <MX_ADC2_Init+0x9c>)
 800237e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <MX_ADC2_Init+0x9c>)
 8002386:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <MX_ADC2_Init+0x9c>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <MX_ADC2_Init+0x9c>)
 8002394:	2201      	movs	r2, #1
 8002396:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <MX_ADC2_Init+0x9c>)
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <MX_ADC2_Init+0x9c>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80023a6:	480e      	ldr	r0, [pc, #56]	; (80023e0 <MX_ADC2_Init+0x9c>)
 80023a8:	f001 faae 	bl	8003908 <HAL_ADC_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 80023b2:	f000 fbe5 	bl	8002b80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80023b6:	2307      	movs	r3, #7
 80023b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80023ba:	2301      	movs	r3, #1
 80023bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023be:	2300      	movs	r3, #0
 80023c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80023c2:	463b      	mov	r3, r7
 80023c4:	4619      	mov	r1, r3
 80023c6:	4806      	ldr	r0, [pc, #24]	; (80023e0 <MX_ADC2_Init+0x9c>)
 80023c8:	f001 fd72 	bl	8003eb0 <HAL_ADC_ConfigChannel>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 80023d2:	f000 fbd5 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000240 	.word	0x20000240
 80023e4:	40012100 	.word	0x40012100

080023e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023ee:	463b      	mov	r3, r7
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	605a      	str	r2, [r3, #4]
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <MX_ADC3_Init+0x98>)
 80023fc:	4a21      	ldr	r2, [pc, #132]	; (8002484 <MX_ADC3_Init+0x9c>)
 80023fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <MX_ADC3_Init+0x98>)
 8002402:	2200      	movs	r2, #0
 8002404:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002406:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <MX_ADC3_Init+0x98>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800240c:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <MX_ADC3_Init+0x98>)
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002412:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <MX_ADC3_Init+0x98>)
 8002414:	2201      	movs	r2, #1
 8002416:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <MX_ADC3_Init+0x98>)
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002420:	4b17      	ldr	r3, [pc, #92]	; (8002480 <MX_ADC3_Init+0x98>)
 8002422:	2200      	movs	r2, #0
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <MX_ADC3_Init+0x98>)
 8002428:	4a17      	ldr	r2, [pc, #92]	; (8002488 <MX_ADC3_Init+0xa0>)
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <MX_ADC3_Init+0x98>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <MX_ADC3_Init+0x98>)
 8002434:	2201      	movs	r2, #1
 8002436:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <MX_ADC3_Init+0x98>)
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <MX_ADC3_Init+0x98>)
 8002442:	2200      	movs	r2, #0
 8002444:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002446:	480e      	ldr	r0, [pc, #56]	; (8002480 <MX_ADC3_Init+0x98>)
 8002448:	f001 fa5e 	bl	8003908 <HAL_ADC_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8002452:	f000 fb95 	bl	8002b80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002456:	2301      	movs	r3, #1
 8002458:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800245a:	2301      	movs	r3, #1
 800245c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002462:	463b      	mov	r3, r7
 8002464:	4619      	mov	r1, r3
 8002466:	4806      	ldr	r0, [pc, #24]	; (8002480 <MX_ADC3_Init+0x98>)
 8002468:	f001 fd22 	bl	8003eb0 <HAL_ADC_ConfigChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8002472:	f000 fb85 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000288 	.word	0x20000288
 8002484:	40012200 	.word	0x40012200
 8002488:	0f000001 	.word	0x0f000001

0800248c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002492:	463b      	mov	r3, r7
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800249a:	4b14      	ldr	r3, [pc, #80]	; (80024ec <MX_DAC_Init+0x60>)
 800249c:	4a14      	ldr	r2, [pc, #80]	; (80024f0 <MX_DAC_Init+0x64>)
 800249e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80024a0:	4812      	ldr	r0, [pc, #72]	; (80024ec <MX_DAC_Init+0x60>)
 80024a2:	f002 f8b9 	bl	8004618 <HAL_DAC_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80024ac:	f000 fb68 	bl	8002b80 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80024b0:	2324      	movs	r3, #36	; 0x24
 80024b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80024b8:	463b      	mov	r3, r7
 80024ba:	2200      	movs	r2, #0
 80024bc:	4619      	mov	r1, r3
 80024be:	480b      	ldr	r0, [pc, #44]	; (80024ec <MX_DAC_Init+0x60>)
 80024c0:	f002 fa12 	bl	80048e8 <HAL_DAC_ConfigChannel>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80024ca:	f000 fb59 	bl	8002b80 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80024ce:	463b      	mov	r3, r7
 80024d0:	2210      	movs	r2, #16
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	; (80024ec <MX_DAC_Init+0x60>)
 80024d6:	f002 fa07 	bl	80048e8 <HAL_DAC_ConfigChannel>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80024e0:	f000 fb4e 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000390 	.word	0x20000390
 80024f0:	40007400 	.word	0x40007400

080024f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <MX_I2C1_Init+0x50>)
 80024fa:	4a13      	ldr	r2, [pc, #76]	; (8002548 <MX_I2C1_Init+0x54>)
 80024fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80024fe:	4b11      	ldr	r3, [pc, #68]	; (8002544 <MX_I2C1_Init+0x50>)
 8002500:	4a12      	ldr	r2, [pc, #72]	; (800254c <MX_I2C1_Init+0x58>)
 8002502:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002504:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <MX_I2C1_Init+0x50>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <MX_I2C1_Init+0x50>)
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <MX_I2C1_Init+0x50>)
 8002512:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002516:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002518:	4b0a      	ldr	r3, [pc, #40]	; (8002544 <MX_I2C1_Init+0x50>)
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800251e:	4b09      	ldr	r3, [pc, #36]	; (8002544 <MX_I2C1_Init+0x50>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002524:	4b07      	ldr	r3, [pc, #28]	; (8002544 <MX_I2C1_Init+0x50>)
 8002526:	2200      	movs	r2, #0
 8002528:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <MX_I2C1_Init+0x50>)
 800252c:	2200      	movs	r2, #0
 800252e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002530:	4804      	ldr	r0, [pc, #16]	; (8002544 <MX_I2C1_Init+0x50>)
 8002532:	f003 f9f7 	bl	8005924 <HAL_I2C_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800253c:	f000 fb20 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000464 	.word	0x20000464
 8002548:	40005400 	.word	0x40005400
 800254c:	00061a80 	.word	0x00061a80

08002550 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002556:	f107 0308 	add.w	r3, r7, #8
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]
 8002560:	609a      	str	r2, [r3, #8]
 8002562:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002564:	463b      	mov	r3, r7
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <MX_TIM2_Init+0x94>)
 800256e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002572:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <MX_TIM2_Init+0x94>)
 8002576:	2201      	movs	r2, #1
 8002578:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <MX_TIM2_Init+0x94>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <MX_TIM2_Init+0x94>)
 8002582:	22ff      	movs	r2, #255	; 0xff
 8002584:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002586:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <MX_TIM2_Init+0x94>)
 8002588:	2200      	movs	r2, #0
 800258a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <MX_TIM2_Init+0x94>)
 800258e:	2280      	movs	r2, #128	; 0x80
 8002590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002592:	4814      	ldr	r0, [pc, #80]	; (80025e4 <MX_TIM2_Init+0x94>)
 8002594:	f006 fe0e 	bl	80091b4 <HAL_TIM_Base_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800259e:	f000 faef 	bl	8002b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025a8:	f107 0308 	add.w	r3, r7, #8
 80025ac:	4619      	mov	r1, r3
 80025ae:	480d      	ldr	r0, [pc, #52]	; (80025e4 <MX_TIM2_Init+0x94>)
 80025b0:	f006 fff7 	bl	80095a2 <HAL_TIM_ConfigClockSource>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80025ba:	f000 fae1 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025be:	2320      	movs	r3, #32
 80025c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025c6:	463b      	mov	r3, r7
 80025c8:	4619      	mov	r1, r3
 80025ca:	4806      	ldr	r0, [pc, #24]	; (80025e4 <MX_TIM2_Init+0x94>)
 80025cc:	f007 fa12 	bl	80099f4 <HAL_TIMEx_MasterConfigSynchronization>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80025d6:	f000 fad3 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000518 	.word	0x20000518

080025e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ee:	f107 0308 	add.w	r3, r7, #8
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025fc:	463b      	mov	r3, r7
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002604:	4b1d      	ldr	r3, [pc, #116]	; (800267c <MX_TIM4_Init+0x94>)
 8002606:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <MX_TIM4_Init+0x98>)
 8002608:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <MX_TIM4_Init+0x94>)
 800260c:	2263      	movs	r2, #99	; 0x63
 800260e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002610:	4b1a      	ldr	r3, [pc, #104]	; (800267c <MX_TIM4_Init+0x94>)
 8002612:	2200      	movs	r2, #0
 8002614:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 599;
 8002616:	4b19      	ldr	r3, [pc, #100]	; (800267c <MX_TIM4_Init+0x94>)
 8002618:	f240 2257 	movw	r2, #599	; 0x257
 800261c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800261e:	4b17      	ldr	r3, [pc, #92]	; (800267c <MX_TIM4_Init+0x94>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002624:	4b15      	ldr	r3, [pc, #84]	; (800267c <MX_TIM4_Init+0x94>)
 8002626:	2280      	movs	r2, #128	; 0x80
 8002628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800262a:	4814      	ldr	r0, [pc, #80]	; (800267c <MX_TIM4_Init+0x94>)
 800262c:	f006 fdc2 	bl	80091b4 <HAL_TIM_Base_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002636:	f000 faa3 	bl	8002b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800263a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800263e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002640:	f107 0308 	add.w	r3, r7, #8
 8002644:	4619      	mov	r1, r3
 8002646:	480d      	ldr	r0, [pc, #52]	; (800267c <MX_TIM4_Init+0x94>)
 8002648:	f006 ffab 	bl	80095a2 <HAL_TIM_ConfigClockSource>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002652:	f000 fa95 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800265e:	463b      	mov	r3, r7
 8002660:	4619      	mov	r1, r3
 8002662:	4806      	ldr	r0, [pc, #24]	; (800267c <MX_TIM4_Init+0x94>)
 8002664:	f007 f9c6 	bl	80099f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800266e:	f000 fa87 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000560 	.word	0x20000560
 8002680:	40000800 	.word	0x40000800

08002684 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800268a:	463b      	mov	r3, r7
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <MX_TIM6_Init+0x64>)
 8002694:	4a15      	ldr	r2, [pc, #84]	; (80026ec <MX_TIM6_Init+0x68>)
 8002696:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <MX_TIM6_Init+0x64>)
 800269a:	2209      	movs	r2, #9
 800269c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <MX_TIM6_Init+0x64>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80026a4:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <MX_TIM6_Init+0x64>)
 80026a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ac:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_TIM6_Init+0x64>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026b2:	480d      	ldr	r0, [pc, #52]	; (80026e8 <MX_TIM6_Init+0x64>)
 80026b4:	f006 fd7e 	bl	80091b4 <HAL_TIM_Base_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80026be:	f000 fa5f 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026ca:	463b      	mov	r3, r7
 80026cc:	4619      	mov	r1, r3
 80026ce:	4806      	ldr	r0, [pc, #24]	; (80026e8 <MX_TIM6_Init+0x64>)
 80026d0:	f007 f990 	bl	80099f4 <HAL_TIMEx_MasterConfigSynchronization>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80026da:	f000 fa51 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200005a8 	.word	0x200005a8
 80026ec:	40001000 	.word	0x40001000

080026f0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f6:	463b      	mov	r3, r7
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <MX_TIM7_Init+0x64>)
 8002700:	4a15      	ldr	r2, [pc, #84]	; (8002758 <MX_TIM7_Init+0x68>)
 8002702:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002704:	4b13      	ldr	r3, [pc, #76]	; (8002754 <MX_TIM7_Init+0x64>)
 8002706:	2200      	movs	r2, #0
 8002708:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <MX_TIM7_Init+0x64>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 62499;
 8002710:	4b10      	ldr	r3, [pc, #64]	; (8002754 <MX_TIM7_Init+0x64>)
 8002712:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002716:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_TIM7_Init+0x64>)
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800271e:	480d      	ldr	r0, [pc, #52]	; (8002754 <MX_TIM7_Init+0x64>)
 8002720:	f006 fd48 	bl	80091b4 <HAL_TIM_Base_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800272a:	f000 fa29 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002736:	463b      	mov	r3, r7
 8002738:	4619      	mov	r1, r3
 800273a:	4806      	ldr	r0, [pc, #24]	; (8002754 <MX_TIM7_Init+0x64>)
 800273c:	f007 f95a 	bl	80099f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8002746:	f000 fa1b 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200005f0 	.word	0x200005f0
 8002758:	40001400 	.word	0x40001400

0800275c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002760:	4b0e      	ldr	r3, [pc, #56]	; (800279c <MX_TIM10_Init+0x40>)
 8002762:	4a0f      	ldr	r2, [pc, #60]	; (80027a0 <MX_TIM10_Init+0x44>)
 8002764:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 8002766:	4b0d      	ldr	r3, [pc, #52]	; (800279c <MX_TIM10_Init+0x40>)
 8002768:	2263      	movs	r2, #99	; 0x63
 800276a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <MX_TIM10_Init+0x40>)
 800276e:	2200      	movs	r2, #0
 8002770:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2499;
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <MX_TIM10_Init+0x40>)
 8002774:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002778:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <MX_TIM10_Init+0x40>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <MX_TIM10_Init+0x40>)
 8002782:	2200      	movs	r2, #0
 8002784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002786:	4805      	ldr	r0, [pc, #20]	; (800279c <MX_TIM10_Init+0x40>)
 8002788:	f006 fd14 	bl	80091b4 <HAL_TIM_Base_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002792:	f000 f9f5 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000638 	.word	0x20000638
 80027a0:	40014400 	.word	0x40014400

080027a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <MX_USART3_UART_Init+0x50>)
 80027ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027ca:	220c      	movs	r2, #12
 80027cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_USART3_UART_Init+0x4c>)
 80027dc:	f007 f99a 	bl	8009b14 <HAL_UART_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80027e6:	f000 f9cb 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000680 	.word	0x20000680
 80027f4:	40004800 	.word	0x40004800

080027f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <MX_USART6_UART_Init+0x4c>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <MX_USART6_UART_Init+0x50>)
 8002800:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <MX_USART6_UART_Init+0x4c>)
 8002804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002808:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800280a:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_USART6_UART_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <MX_USART6_UART_Init+0x4c>)
 8002812:	2200      	movs	r2, #0
 8002814:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002816:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <MX_USART6_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <MX_USART6_UART_Init+0x4c>)
 800281e:	220c      	movs	r2, #12
 8002820:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002822:	4b08      	ldr	r3, [pc, #32]	; (8002844 <MX_USART6_UART_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <MX_USART6_UART_Init+0x4c>)
 800282a:	2200      	movs	r2, #0
 800282c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800282e:	4805      	ldr	r0, [pc, #20]	; (8002844 <MX_USART6_UART_Init+0x4c>)
 8002830:	f007 f970 	bl	8009b14 <HAL_UART_Init>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800283a:	f000 f9a1 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200006c4 	.word	0x200006c4
 8002848:	40011400 	.word	0x40011400

0800284c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <MX_DMA_Init+0xb8>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a2a      	ldr	r2, [pc, #168]	; (8002904 <MX_DMA_Init+0xb8>)
 800285c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b28      	ldr	r3, [pc, #160]	; (8002904 <MX_DMA_Init+0xb8>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	4b24      	ldr	r3, [pc, #144]	; (8002904 <MX_DMA_Init+0xb8>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a23      	ldr	r2, [pc, #140]	; (8002904 <MX_DMA_Init+0xb8>)
 8002878:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b21      	ldr	r3, [pc, #132]	; (8002904 <MX_DMA_Init+0xb8>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800288a:	2200      	movs	r2, #0
 800288c:	2100      	movs	r1, #0
 800288e:	200b      	movs	r0, #11
 8002890:	f001 fe8a 	bl	80045a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002894:	200b      	movs	r0, #11
 8002896:	f001 fea3 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	200e      	movs	r0, #14
 80028a0:	f001 fe82 	bl	80045a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80028a4:	200e      	movs	r0, #14
 80028a6:	f001 fe9b 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2100      	movs	r1, #0
 80028ae:	2010      	movs	r0, #16
 80028b0:	f001 fe7a 	bl	80045a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80028b4:	2010      	movs	r0, #16
 80028b6:	f001 fe93 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2100      	movs	r1, #0
 80028be:	2011      	movs	r0, #17
 80028c0:	f001 fe72 	bl	80045a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80028c4:	2011      	movs	r0, #17
 80028c6:	f001 fe8b 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2100      	movs	r1, #0
 80028ce:	2038      	movs	r0, #56	; 0x38
 80028d0:	f001 fe6a 	bl	80045a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80028d4:	2038      	movs	r0, #56	; 0x38
 80028d6:	f001 fe83 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2100      	movs	r1, #0
 80028de:	203a      	movs	r0, #58	; 0x3a
 80028e0:	f001 fe62 	bl	80045a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80028e4:	203a      	movs	r0, #58	; 0x3a
 80028e6:	f001 fe7b 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2100      	movs	r1, #0
 80028ee:	2045      	movs	r0, #69	; 0x45
 80028f0:	f001 fe5a 	bl	80045a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80028f4:	2045      	movs	r0, #69	; 0x45
 80028f6:	f001 fe73 	bl	80045e0 <HAL_NVIC_EnableIRQ>

}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800

08002908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	605a      	str	r2, [r3, #4]
 8002918:	609a      	str	r2, [r3, #8]
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	4b56      	ldr	r3, [pc, #344]	; (8002a7c <MX_GPIO_Init+0x174>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4a55      	ldr	r2, [pc, #340]	; (8002a7c <MX_GPIO_Init+0x174>)
 8002928:	f043 0310 	orr.w	r3, r3, #16
 800292c:	6313      	str	r3, [r2, #48]	; 0x30
 800292e:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <MX_GPIO_Init+0x174>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b4f      	ldr	r3, [pc, #316]	; (8002a7c <MX_GPIO_Init+0x174>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a4e      	ldr	r2, [pc, #312]	; (8002a7c <MX_GPIO_Init+0x174>)
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b4c      	ldr	r3, [pc, #304]	; (8002a7c <MX_GPIO_Init+0x174>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	4b48      	ldr	r3, [pc, #288]	; (8002a7c <MX_GPIO_Init+0x174>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4a47      	ldr	r2, [pc, #284]	; (8002a7c <MX_GPIO_Init+0x174>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4b45      	ldr	r3, [pc, #276]	; (8002a7c <MX_GPIO_Init+0x174>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	4b41      	ldr	r3, [pc, #260]	; (8002a7c <MX_GPIO_Init+0x174>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a40      	ldr	r2, [pc, #256]	; (8002a7c <MX_GPIO_Init+0x174>)
 800297c:	f043 0302 	orr.w	r3, r3, #2
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <MX_GPIO_Init+0x174>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	603b      	str	r3, [r7, #0]
 8002992:	4b3a      	ldr	r3, [pc, #232]	; (8002a7c <MX_GPIO_Init+0x174>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4a39      	ldr	r2, [pc, #228]	; (8002a7c <MX_GPIO_Init+0x174>)
 8002998:	f043 0308 	orr.w	r3, r3, #8
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <MX_GPIO_Init+0x174>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	603b      	str	r3, [r7, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029b0:	4833      	ldr	r0, [pc, #204]	; (8002a80 <MX_GPIO_Init+0x178>)
 80029b2:	f002 ff85 	bl	80058c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80029b6:	2200      	movs	r2, #0
 80029b8:	f24f 011e 	movw	r1, #61470	; 0xf01e
 80029bc:	4831      	ldr	r0, [pc, #196]	; (8002a84 <MX_GPIO_Init+0x17c>)
 80029be:	f002 ff7f 	bl	80058c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80029c2:	231c      	movs	r3, #28
 80029c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80029ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80029cc:	2302      	movs	r3, #2
 80029ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	4619      	mov	r1, r3
 80029d6:	482a      	ldr	r0, [pc, #168]	; (8002a80 <MX_GPIO_Init+0x178>)
 80029d8:	f002 fcda 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80029e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	4825      	ldr	r0, [pc, #148]	; (8002a88 <MX_GPIO_Init+0x180>)
 80029f4:	f002 fccc 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a06:	2300      	movs	r3, #0
 8002a08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	4619      	mov	r1, r3
 8002a10:	481b      	ldr	r0, [pc, #108]	; (8002a80 <MX_GPIO_Init+0x178>)
 8002a12:	f002 fcbd 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002a16:	f24f 031e 	movw	r3, #61470	; 0xf01e
 8002a1a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4815      	ldr	r0, [pc, #84]	; (8002a84 <MX_GPIO_Init+0x17c>)
 8002a30:	f002 fcae 	bl	8005390 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2100      	movs	r1, #0
 8002a38:	2008      	movs	r0, #8
 8002a3a:	f001 fdb5 	bl	80045a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a3e:	2008      	movs	r0, #8
 8002a40:	f001 fdce 	bl	80045e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2100      	movs	r1, #0
 8002a48:	2009      	movs	r0, #9
 8002a4a:	f001 fdad 	bl	80045a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a4e:	2009      	movs	r0, #9
 8002a50:	f001 fdc6 	bl	80045e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002a54:	2200      	movs	r2, #0
 8002a56:	2100      	movs	r1, #0
 8002a58:	200a      	movs	r0, #10
 8002a5a:	f001 fda5 	bl	80045a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002a5e:	200a      	movs	r0, #10
 8002a60:	f001 fdbe 	bl	80045e0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	2100      	movs	r1, #0
 8002a68:	2028      	movs	r0, #40	; 0x28
 8002a6a:	f001 fd9d 	bl	80045a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a6e:	2028      	movs	r0, #40	; 0x28
 8002a70:	f001 fdb6 	bl	80045e0 <HAL_NVIC_EnableIRQ>

}
 8002a74:	bf00      	nop
 8002a76:	3728      	adds	r7, #40	; 0x28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40021000 	.word	0x40021000
 8002a84:	40020c00 	.word	0x40020c00
 8002a88:	40020800 	.word	0x40020800

08002a8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a2c      	ldr	r2, [pc, #176]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d102      	bne.n	8002aa4 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8002a9e:	f000 feef 	bl	8003880 <HAL_IncTick>
	  EXTI_BUT_PUSH=0;

  }

  /* USER CODE END Callback 1 */
}
 8002aa2:	e04e      	b.n	8002b42 <HAL_TIM_PeriodElapsedCallback+0xb6>
  else if( htim->Instance == TIM4 ){
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a29      	ldr	r2, [pc, #164]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d103      	bne.n	8002ab6 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  stepIt(&motor);
 8002aae:	4829      	ldr	r0, [pc, #164]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002ab0:	f7fe fd86 	bl	80015c0 <stepIt>
}
 8002ab4:	e045      	b.n	8002b42 <HAL_TIM_PeriodElapsedCallback+0xb6>
  else if( htim->Instance == TIM6 ){
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a27      	ldr	r2, [pc, #156]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d103      	bne.n	8002ac8 <HAL_TIM_PeriodElapsedCallback+0x3c>
	  AMG_RD_START=1;
 8002ac0:	4b26      	ldr	r3, [pc, #152]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
}
 8002ac6:	e03c      	b.n	8002b42 <HAL_TIM_PeriodElapsedCallback+0xb6>
  else if( htim->Instance == TIM7 ){
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a24      	ldr	r2, [pc, #144]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d103      	bne.n	8002ada <HAL_TIM_PeriodElapsedCallback+0x4e>
	MOTOR_MV=1;
 8002ad2:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
}
 8002ad8:	e033      	b.n	8002b42 <HAL_TIM_PeriodElapsedCallback+0xb6>
  else if( htim->Instance == TIM10 ){
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a22      	ldr	r2, [pc, #136]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d12e      	bne.n	8002b42 <HAL_TIM_PeriodElapsedCallback+0xb6>
	  if( GPIOE->IDR & GPIO_PIN_2 && EXTI_BUT_PUSH  )
 8002ae4:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 0304 	and.w	r3, r3, #4
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d007      	beq.n	8002b00 <HAL_TIM_PeriodElapsedCallback+0x74>
 8002af0:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_TIM_PeriodElapsedCallback+0x74>
		  LEFT_BUT_PUSH=1;
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002afa:	2201      	movs	r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e01d      	b.n	8002b3c <HAL_TIM_PeriodElapsedCallback+0xb0>
	  else if( GPIOE->IDR & GPIO_PIN_3  && EXTI_BUT_PUSH )
 8002b00:	4b1a      	ldr	r3, [pc, #104]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <HAL_TIM_PeriodElapsedCallback+0x90>
 8002b0c:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_TIM_PeriodElapsedCallback+0x90>
		  RIGHT_BUT_PUSH=1;
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e00f      	b.n	8002b3c <HAL_TIM_PeriodElapsedCallback+0xb0>
	  else if( GPIOE->IDR & GPIO_PIN_4 && EXTI_BUT_PUSH )
 8002b1c:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d009      	beq.n	8002b3c <HAL_TIM_PeriodElapsedCallback+0xb0>
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_TIM_PeriodElapsedCallback+0xb0>
		  MODE_TOGGLE^=1;
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a11      	ldr	r2, [pc, #68]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002b36:	f083 0301 	eor.w	r3, r3, #1
 8002b3a:	6013      	str	r3, [r2, #0]
	  EXTI_BUT_PUSH=0;
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	40000800 	.word	0x40000800
 8002b54:	200007d0 	.word	0x200007d0
 8002b58:	40001000 	.word	0x40001000
 8002b5c:	2200001c 	.word	0x2200001c
 8002b60:	40001400 	.word	0x40001400
 8002b64:	2200003c 	.word	0x2200003c
 8002b68:	40014400 	.word	0x40014400
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	2200007c 	.word	0x2200007c
 8002b74:	22000074 	.word	0x22000074
 8002b78:	22000070 	.word	0x22000070
 8002b7c:	22000078 	.word	0x22000078

08002b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b84:	b672      	cpsid	i
}
 8002b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b88:	e7fe      	b.n	8002b88 <Error_Handler+0x8>
	...

08002b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_MspInit+0x4c>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	4a0f      	ldr	r2, [pc, #60]	; (8002bd8 <HAL_MspInit+0x4c>)
 8002b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_MspInit+0x4c>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_MspInit+0x4c>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <HAL_MspInit+0x4c>)
 8002bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_MspInit+0x4c>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800

08002bdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08e      	sub	sp, #56	; 0x38
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a75      	ldr	r2, [pc, #468]	; (8002dd0 <HAL_ADC_MspInit+0x1f4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d158      	bne.n	8002cb0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
 8002c02:	4b74      	ldr	r3, [pc, #464]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	4a73      	ldr	r2, [pc, #460]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0e:	4b71      	ldr	r3, [pc, #452]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	623b      	str	r3, [r7, #32]
 8002c18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	4b6d      	ldr	r3, [pc, #436]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	4a6c      	ldr	r2, [pc, #432]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	6313      	str	r3, [r2, #48]	; 0x30
 8002c2a:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c36:	2301      	movs	r3, #1
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c46:	4619      	mov	r1, r3
 8002c48:	4863      	ldr	r0, [pc, #396]	; (8002dd8 <HAL_ADC_MspInit+0x1fc>)
 8002c4a:	f002 fba1 	bl	8005390 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002c4e:	4b63      	ldr	r3, [pc, #396]	; (8002ddc <HAL_ADC_MspInit+0x200>)
 8002c50:	4a63      	ldr	r2, [pc, #396]	; (8002de0 <HAL_ADC_MspInit+0x204>)
 8002c52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002c54:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <HAL_ADC_MspInit+0x200>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c5a:	4b60      	ldr	r3, [pc, #384]	; (8002ddc <HAL_ADC_MspInit+0x200>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c60:	4b5e      	ldr	r3, [pc, #376]	; (8002ddc <HAL_ADC_MspInit+0x200>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c66:	4b5d      	ldr	r3, [pc, #372]	; (8002ddc <HAL_ADC_MspInit+0x200>)
 8002c68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c6e:	4b5b      	ldr	r3, [pc, #364]	; (8002ddc <HAL_ADC_MspInit+0x200>)
 8002c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c76:	4b59      	ldr	r3, [pc, #356]	; (8002ddc <HAL_ADC_MspInit+0x200>)
 8002c78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c7e:	4b57      	ldr	r3, [pc, #348]	; (8002ddc <HAL_ADC_MspInit+0x200>)
 8002c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c86:	4b55      	ldr	r3, [pc, #340]	; (8002ddc <HAL_ADC_MspInit+0x200>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c8c:	4b53      	ldr	r3, [pc, #332]	; (8002ddc <HAL_ADC_MspInit+0x200>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c92:	4852      	ldr	r0, [pc, #328]	; (8002ddc <HAL_ADC_MspInit+0x200>)
 8002c94:	f001 ff02 	bl	8004a9c <HAL_DMA_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002c9e:	f7ff ff6f 	bl	8002b80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4d      	ldr	r2, [pc, #308]	; (8002ddc <HAL_ADC_MspInit+0x200>)
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	; (8002ddc <HAL_ADC_MspInit+0x200>)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002cae:	e08b      	b.n	8002dc8 <HAL_ADC_MspInit+0x1ec>
  else if(hadc->Instance==ADC2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a4b      	ldr	r2, [pc, #300]	; (8002de4 <HAL_ADC_MspInit+0x208>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d159      	bne.n	8002d6e <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	4b45      	ldr	r3, [pc, #276]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	4a44      	ldr	r2, [pc, #272]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002cc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cca:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	4b3e      	ldr	r3, [pc, #248]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	4a3d      	ldr	r2, [pc, #244]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d02:	4619      	mov	r1, r3
 8002d04:	4838      	ldr	r0, [pc, #224]	; (8002de8 <HAL_ADC_MspInit+0x20c>)
 8002d06:	f002 fb43 	bl	8005390 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002d0a:	4b38      	ldr	r3, [pc, #224]	; (8002dec <HAL_ADC_MspInit+0x210>)
 8002d0c:	4a38      	ldr	r2, [pc, #224]	; (8002df0 <HAL_ADC_MspInit+0x214>)
 8002d0e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002d10:	4b36      	ldr	r3, [pc, #216]	; (8002dec <HAL_ADC_MspInit+0x210>)
 8002d12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d16:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d18:	4b34      	ldr	r3, [pc, #208]	; (8002dec <HAL_ADC_MspInit+0x210>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d1e:	4b33      	ldr	r3, [pc, #204]	; (8002dec <HAL_ADC_MspInit+0x210>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002d24:	4b31      	ldr	r3, [pc, #196]	; (8002dec <HAL_ADC_MspInit+0x210>)
 8002d26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d2a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d2c:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <HAL_ADC_MspInit+0x210>)
 8002d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d32:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d34:	4b2d      	ldr	r3, [pc, #180]	; (8002dec <HAL_ADC_MspInit+0x210>)
 8002d36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d3a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <HAL_ADC_MspInit+0x210>)
 8002d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d42:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002d44:	4b29      	ldr	r3, [pc, #164]	; (8002dec <HAL_ADC_MspInit+0x210>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d4a:	4b28      	ldr	r3, [pc, #160]	; (8002dec <HAL_ADC_MspInit+0x210>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002d50:	4826      	ldr	r0, [pc, #152]	; (8002dec <HAL_ADC_MspInit+0x210>)
 8002d52:	f001 fea3 	bl	8004a9c <HAL_DMA_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8002d5c:	f7ff ff10 	bl	8002b80 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a22      	ldr	r2, [pc, #136]	; (8002dec <HAL_ADC_MspInit+0x210>)
 8002d64:	639a      	str	r2, [r3, #56]	; 0x38
 8002d66:	4a21      	ldr	r2, [pc, #132]	; (8002dec <HAL_ADC_MspInit+0x210>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d6c:	e02c      	b.n	8002dc8 <HAL_ADC_MspInit+0x1ec>
  else if(hadc->Instance==ADC3)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <HAL_ADC_MspInit+0x218>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d127      	bne.n	8002dc8 <HAL_ADC_MspInit+0x1ec>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d78:	2300      	movs	r3, #0
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d86:	6453      	str	r3, [r2, #68]	; 0x44
 8002d88:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6313      	str	r3, [r2, #48]	; 0x30
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_ADC_MspInit+0x1f8>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002db0:	2302      	movs	r3, #2
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002db4:	2303      	movs	r3, #3
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4809      	ldr	r0, [pc, #36]	; (8002de8 <HAL_ADC_MspInit+0x20c>)
 8002dc4:	f002 fae4 	bl	8005390 <HAL_GPIO_Init>
}
 8002dc8:	bf00      	nop
 8002dca:	3738      	adds	r7, #56	; 0x38
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40012000 	.word	0x40012000
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	200002d0 	.word	0x200002d0
 8002de0:	40026410 	.word	0x40026410
 8002de4:	40012100 	.word	0x40012100
 8002de8:	40020000 	.word	0x40020000
 8002dec:	20000330 	.word	0x20000330
 8002df0:	40026440 	.word	0x40026440
 8002df4:	40012200 	.word	0x40012200

08002df8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a4c      	ldr	r2, [pc, #304]	; (8002f48 <HAL_DAC_MspInit+0x150>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	f040 8092 	bne.w	8002f40 <HAL_DAC_MspInit+0x148>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	4b4a      	ldr	r3, [pc, #296]	; (8002f4c <HAL_DAC_MspInit+0x154>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	4a49      	ldr	r2, [pc, #292]	; (8002f4c <HAL_DAC_MspInit+0x154>)
 8002e26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2c:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_DAC_MspInit+0x154>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	4b43      	ldr	r3, [pc, #268]	; (8002f4c <HAL_DAC_MspInit+0x154>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	4a42      	ldr	r2, [pc, #264]	; (8002f4c <HAL_DAC_MspInit+0x154>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6313      	str	r3, [r2, #48]	; 0x30
 8002e48:	4b40      	ldr	r3, [pc, #256]	; (8002f4c <HAL_DAC_MspInit+0x154>)
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002e54:	2330      	movs	r3, #48	; 0x30
 8002e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	4619      	mov	r1, r3
 8002e66:	483a      	ldr	r0, [pc, #232]	; (8002f50 <HAL_DAC_MspInit+0x158>)
 8002e68:	f002 fa92 	bl	8005390 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002e6c:	4b39      	ldr	r3, [pc, #228]	; (8002f54 <HAL_DAC_MspInit+0x15c>)
 8002e6e:	4a3a      	ldr	r2, [pc, #232]	; (8002f58 <HAL_DAC_MspInit+0x160>)
 8002e70:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002e72:	4b38      	ldr	r3, [pc, #224]	; (8002f54 <HAL_DAC_MspInit+0x15c>)
 8002e74:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002e78:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e7a:	4b36      	ldr	r3, [pc, #216]	; (8002f54 <HAL_DAC_MspInit+0x15c>)
 8002e7c:	2240      	movs	r2, #64	; 0x40
 8002e7e:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e80:	4b34      	ldr	r3, [pc, #208]	; (8002f54 <HAL_DAC_MspInit+0x15c>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002e86:	4b33      	ldr	r3, [pc, #204]	; (8002f54 <HAL_DAC_MspInit+0x15c>)
 8002e88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e8e:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <HAL_DAC_MspInit+0x15c>)
 8002e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e94:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e96:	4b2f      	ldr	r3, [pc, #188]	; (8002f54 <HAL_DAC_MspInit+0x15c>)
 8002e98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e9c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8002e9e:	4b2d      	ldr	r3, [pc, #180]	; (8002f54 <HAL_DAC_MspInit+0x15c>)
 8002ea0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ea4:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <HAL_DAC_MspInit+0x15c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eac:	4b29      	ldr	r3, [pc, #164]	; (8002f54 <HAL_DAC_MspInit+0x15c>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002eb2:	4828      	ldr	r0, [pc, #160]	; (8002f54 <HAL_DAC_MspInit+0x15c>)
 8002eb4:	f001 fdf2 	bl	8004a9c <HAL_DMA_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002ebe:	f7ff fe5f 	bl	8002b80 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a23      	ldr	r2, [pc, #140]	; (8002f54 <HAL_DAC_MspInit+0x15c>)
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	4a22      	ldr	r2, [pc, #136]	; (8002f54 <HAL_DAC_MspInit+0x15c>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8002ece:	4b23      	ldr	r3, [pc, #140]	; (8002f5c <HAL_DAC_MspInit+0x164>)
 8002ed0:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <HAL_DAC_MspInit+0x168>)
 8002ed2:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8002ed4:	4b21      	ldr	r3, [pc, #132]	; (8002f5c <HAL_DAC_MspInit+0x164>)
 8002ed6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002eda:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002edc:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <HAL_DAC_MspInit+0x164>)
 8002ede:	2240      	movs	r2, #64	; 0x40
 8002ee0:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <HAL_DAC_MspInit+0x164>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8002ee8:	4b1c      	ldr	r3, [pc, #112]	; (8002f5c <HAL_DAC_MspInit+0x164>)
 8002eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eee:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <HAL_DAC_MspInit+0x164>)
 8002ef2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ef6:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ef8:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <HAL_DAC_MspInit+0x164>)
 8002efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002efe:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8002f00:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <HAL_DAC_MspInit+0x164>)
 8002f02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f06:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8002f08:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_DAC_MspInit+0x164>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f0e:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <HAL_DAC_MspInit+0x164>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8002f14:	4811      	ldr	r0, [pc, #68]	; (8002f5c <HAL_DAC_MspInit+0x164>)
 8002f16:	f001 fdc1 	bl	8004a9c <HAL_DMA_Init>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8002f20:	f7ff fe2e 	bl	8002b80 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a0d      	ldr	r2, [pc, #52]	; (8002f5c <HAL_DAC_MspInit+0x164>)
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	4a0c      	ldr	r2, [pc, #48]	; (8002f5c <HAL_DAC_MspInit+0x164>)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002f30:	2200      	movs	r2, #0
 8002f32:	2100      	movs	r1, #0
 8002f34:	2036      	movs	r0, #54	; 0x36
 8002f36:	f001 fb37 	bl	80045a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002f3a:	2036      	movs	r0, #54	; 0x36
 8002f3c:	f001 fb50 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002f40:	bf00      	nop
 8002f42:	3728      	adds	r7, #40	; 0x28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40007400 	.word	0x40007400
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40020000 	.word	0x40020000
 8002f54:	200003a4 	.word	0x200003a4
 8002f58:	40026088 	.word	0x40026088
 8002f5c:	20000404 	.word	0x20000404
 8002f60:	400260a0 	.word	0x400260a0

08002f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f6c:	f107 0314 	add.w	r3, r7, #20
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	60da      	str	r2, [r3, #12]
 8002f7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a34      	ldr	r2, [pc, #208]	; (8003054 <HAL_I2C_MspInit+0xf0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d161      	bne.n	800304a <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	4b33      	ldr	r3, [pc, #204]	; (8003058 <HAL_I2C_MspInit+0xf4>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a32      	ldr	r2, [pc, #200]	; (8003058 <HAL_I2C_MspInit+0xf4>)
 8002f90:	f043 0302 	orr.w	r3, r3, #2
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_I2C_MspInit+0xf4>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fa2:	23c0      	movs	r3, #192	; 0xc0
 8002fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fa6:	2312      	movs	r3, #18
 8002fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb6:	f107 0314 	add.w	r3, r7, #20
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4827      	ldr	r0, [pc, #156]	; (800305c <HAL_I2C_MspInit+0xf8>)
 8002fbe:	f002 f9e7 	bl	8005390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <HAL_I2C_MspInit+0xf4>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	4a23      	ldr	r2, [pc, #140]	; (8003058 <HAL_I2C_MspInit+0xf4>)
 8002fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd2:	4b21      	ldr	r3, [pc, #132]	; (8003058 <HAL_I2C_MspInit+0xf4>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002fde:	4b20      	ldr	r3, [pc, #128]	; (8003060 <HAL_I2C_MspInit+0xfc>)
 8002fe0:	4a20      	ldr	r2, [pc, #128]	; (8003064 <HAL_I2C_MspInit+0x100>)
 8002fe2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002fe4:	4b1e      	ldr	r3, [pc, #120]	; (8003060 <HAL_I2C_MspInit+0xfc>)
 8002fe6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fec:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <HAL_I2C_MspInit+0xfc>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_I2C_MspInit+0xfc>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_I2C_MspInit+0xfc>)
 8002ffa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ffe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003000:	4b17      	ldr	r3, [pc, #92]	; (8003060 <HAL_I2C_MspInit+0xfc>)
 8003002:	2200      	movs	r2, #0
 8003004:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003006:	4b16      	ldr	r3, [pc, #88]	; (8003060 <HAL_I2C_MspInit+0xfc>)
 8003008:	2200      	movs	r2, #0
 800300a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <HAL_I2C_MspInit+0xfc>)
 800300e:	2200      	movs	r2, #0
 8003010:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003012:	4b13      	ldr	r3, [pc, #76]	; (8003060 <HAL_I2C_MspInit+0xfc>)
 8003014:	2200      	movs	r2, #0
 8003016:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <HAL_I2C_MspInit+0xfc>)
 800301a:	2200      	movs	r2, #0
 800301c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800301e:	4810      	ldr	r0, [pc, #64]	; (8003060 <HAL_I2C_MspInit+0xfc>)
 8003020:	f001 fd3c 	bl	8004a9c <HAL_DMA_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800302a:	f7ff fda9 	bl	8002b80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a0b      	ldr	r2, [pc, #44]	; (8003060 <HAL_I2C_MspInit+0xfc>)
 8003032:	639a      	str	r2, [r3, #56]	; 0x38
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <HAL_I2C_MspInit+0xfc>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	2100      	movs	r1, #0
 800303e:	201f      	movs	r0, #31
 8003040:	f001 fab2 	bl	80045a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003044:	201f      	movs	r0, #31
 8003046:	f001 facb 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800304a:	bf00      	nop
 800304c:	3728      	adds	r7, #40	; 0x28
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40005400 	.word	0x40005400
 8003058:	40023800 	.word	0x40023800
 800305c:	40020400 	.word	0x40020400
 8003060:	200004b8 	.word	0x200004b8
 8003064:	40026010 	.word	0x40026010

08003068 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a0e      	ldr	r2, [pc, #56]	; (80030b0 <HAL_I2C_MspDeInit+0x48>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d115      	bne.n	80030a6 <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_I2C_MspDeInit+0x4c>)
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	4a0d      	ldr	r2, [pc, #52]	; (80030b4 <HAL_I2C_MspDeInit+0x4c>)
 8003080:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003084:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8003086:	2140      	movs	r1, #64	; 0x40
 8003088:	480b      	ldr	r0, [pc, #44]	; (80030b8 <HAL_I2C_MspDeInit+0x50>)
 800308a:	f002 fb1d 	bl	80056c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800308e:	2180      	movs	r1, #128	; 0x80
 8003090:	4809      	ldr	r0, [pc, #36]	; (80030b8 <HAL_I2C_MspDeInit+0x50>)
 8003092:	f002 fb19 	bl	80056c8 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	4618      	mov	r0, r3
 800309c:	f001 fdac 	bl	8004bf8 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80030a0:	201f      	movs	r0, #31
 80030a2:	f001 faab 	bl	80045fc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40005400 	.word	0x40005400
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40020400 	.word	0x40020400

080030bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030cc:	d10e      	bne.n	80030ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	4a3f      	ldr	r2, [pc, #252]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6413      	str	r3, [r2, #64]	; 0x40
 80030de:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80030ea:	e06e      	b.n	80031ca <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM4)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a39      	ldr	r2, [pc, #228]	; (80031d8 <HAL_TIM_Base_MspInit+0x11c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d116      	bne.n	8003124 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a35      	ldr	r2, [pc, #212]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 8003100:	f043 0304 	orr.w	r3, r3, #4
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b33      	ldr	r3, [pc, #204]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2101      	movs	r1, #1
 8003116:	201e      	movs	r0, #30
 8003118:	f001 fa46 	bl	80045a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800311c:	201e      	movs	r0, #30
 800311e:	f001 fa5f 	bl	80045e0 <HAL_NVIC_EnableIRQ>
}
 8003122:	e052      	b.n	80031ca <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a2c      	ldr	r2, [pc, #176]	; (80031dc <HAL_TIM_Base_MspInit+0x120>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d116      	bne.n	800315c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 8003138:	f043 0310 	orr.w	r3, r3, #16
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b25      	ldr	r3, [pc, #148]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800314a:	2200      	movs	r2, #0
 800314c:	2100      	movs	r1, #0
 800314e:	2036      	movs	r0, #54	; 0x36
 8003150:	f001 fa2a 	bl	80045a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003154:	2036      	movs	r0, #54	; 0x36
 8003156:	f001 fa43 	bl	80045e0 <HAL_NVIC_EnableIRQ>
}
 800315a:	e036      	b.n	80031ca <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <HAL_TIM_Base_MspInit+0x124>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d116      	bne.n	8003194 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 8003170:	f043 0320 	orr.w	r3, r3, #32
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	2100      	movs	r1, #0
 8003186:	2037      	movs	r0, #55	; 0x37
 8003188:	f001 fa0e 	bl	80045a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800318c:	2037      	movs	r0, #55	; 0x37
 800318e:	f001 fa27 	bl	80045e0 <HAL_NVIC_EnableIRQ>
}
 8003192:	e01a      	b.n	80031ca <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <HAL_TIM_Base_MspInit+0x128>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d115      	bne.n	80031ca <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	4a0b      	ldr	r2, [pc, #44]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 80031a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ac:	6453      	str	r3, [r2, #68]	; 0x44
 80031ae:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_TIM_Base_MspInit+0x118>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80031ba:	2200      	movs	r2, #0
 80031bc:	2100      	movs	r1, #0
 80031be:	2019      	movs	r0, #25
 80031c0:	f001 f9f2 	bl	80045a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80031c4:	2019      	movs	r0, #25
 80031c6:	f001 fa0b 	bl	80045e0 <HAL_NVIC_EnableIRQ>
}
 80031ca:	bf00      	nop
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40000800 	.word	0x40000800
 80031dc:	40001000 	.word	0x40001000
 80031e0:	40001400 	.word	0x40001400
 80031e4:	40014400 	.word	0x40014400

080031e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	; 0x30
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f0:	f107 031c 	add.w	r3, r7, #28
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a68      	ldr	r2, [pc, #416]	; (80033a8 <HAL_UART_MspInit+0x1c0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d163      	bne.n	80032d2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	61bb      	str	r3, [r7, #24]
 800320e:	4b67      	ldr	r3, [pc, #412]	; (80033ac <HAL_UART_MspInit+0x1c4>)
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	4a66      	ldr	r2, [pc, #408]	; (80033ac <HAL_UART_MspInit+0x1c4>)
 8003214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003218:	6413      	str	r3, [r2, #64]	; 0x40
 800321a:	4b64      	ldr	r3, [pc, #400]	; (80033ac <HAL_UART_MspInit+0x1c4>)
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	4b60      	ldr	r3, [pc, #384]	; (80033ac <HAL_UART_MspInit+0x1c4>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	4a5f      	ldr	r2, [pc, #380]	; (80033ac <HAL_UART_MspInit+0x1c4>)
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	6313      	str	r3, [r2, #48]	; 0x30
 8003236:	4b5d      	ldr	r3, [pc, #372]	; (80033ac <HAL_UART_MspInit+0x1c4>)
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003242:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003248:	2302      	movs	r3, #2
 800324a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003250:	2303      	movs	r3, #3
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003254:	2307      	movs	r3, #7
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003258:	f107 031c 	add.w	r3, r7, #28
 800325c:	4619      	mov	r1, r3
 800325e:	4854      	ldr	r0, [pc, #336]	; (80033b0 <HAL_UART_MspInit+0x1c8>)
 8003260:	f002 f896 	bl	8005390 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003264:	4b53      	ldr	r3, [pc, #332]	; (80033b4 <HAL_UART_MspInit+0x1cc>)
 8003266:	4a54      	ldr	r2, [pc, #336]	; (80033b8 <HAL_UART_MspInit+0x1d0>)
 8003268:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800326a:	4b52      	ldr	r3, [pc, #328]	; (80033b4 <HAL_UART_MspInit+0x1cc>)
 800326c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003270:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003272:	4b50      	ldr	r3, [pc, #320]	; (80033b4 <HAL_UART_MspInit+0x1cc>)
 8003274:	2240      	movs	r2, #64	; 0x40
 8003276:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003278:	4b4e      	ldr	r3, [pc, #312]	; (80033b4 <HAL_UART_MspInit+0x1cc>)
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800327e:	4b4d      	ldr	r3, [pc, #308]	; (80033b4 <HAL_UART_MspInit+0x1cc>)
 8003280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003284:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003286:	4b4b      	ldr	r3, [pc, #300]	; (80033b4 <HAL_UART_MspInit+0x1cc>)
 8003288:	2200      	movs	r2, #0
 800328a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800328c:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <HAL_UART_MspInit+0x1cc>)
 800328e:	2200      	movs	r2, #0
 8003290:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003292:	4b48      	ldr	r3, [pc, #288]	; (80033b4 <HAL_UART_MspInit+0x1cc>)
 8003294:	2200      	movs	r2, #0
 8003296:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003298:	4b46      	ldr	r3, [pc, #280]	; (80033b4 <HAL_UART_MspInit+0x1cc>)
 800329a:	2200      	movs	r2, #0
 800329c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800329e:	4b45      	ldr	r3, [pc, #276]	; (80033b4 <HAL_UART_MspInit+0x1cc>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80032a4:	4843      	ldr	r0, [pc, #268]	; (80033b4 <HAL_UART_MspInit+0x1cc>)
 80032a6:	f001 fbf9 	bl	8004a9c <HAL_DMA_Init>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80032b0:	f7ff fc66 	bl	8002b80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a3f      	ldr	r2, [pc, #252]	; (80033b4 <HAL_UART_MspInit+0x1cc>)
 80032b8:	635a      	str	r2, [r3, #52]	; 0x34
 80032ba:	4a3e      	ldr	r2, [pc, #248]	; (80033b4 <HAL_UART_MspInit+0x1cc>)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80032c0:	2200      	movs	r2, #0
 80032c2:	2100      	movs	r1, #0
 80032c4:	2027      	movs	r0, #39	; 0x27
 80032c6:	f001 f96f 	bl	80045a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032ca:	2027      	movs	r0, #39	; 0x27
 80032cc:	f001 f988 	bl	80045e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80032d0:	e066      	b.n	80033a0 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a39      	ldr	r2, [pc, #228]	; (80033bc <HAL_UART_MspInit+0x1d4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d161      	bne.n	80033a0 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	4b32      	ldr	r3, [pc, #200]	; (80033ac <HAL_UART_MspInit+0x1c4>)
 80032e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e4:	4a31      	ldr	r2, [pc, #196]	; (80033ac <HAL_UART_MspInit+0x1c4>)
 80032e6:	f043 0320 	orr.w	r3, r3, #32
 80032ea:	6453      	str	r3, [r2, #68]	; 0x44
 80032ec:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <HAL_UART_MspInit+0x1c4>)
 80032ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	4b2b      	ldr	r3, [pc, #172]	; (80033ac <HAL_UART_MspInit+0x1c4>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4a2a      	ldr	r2, [pc, #168]	; (80033ac <HAL_UART_MspInit+0x1c4>)
 8003302:	f043 0304 	orr.w	r3, r3, #4
 8003306:	6313      	str	r3, [r2, #48]	; 0x30
 8003308:	4b28      	ldr	r3, [pc, #160]	; (80033ac <HAL_UART_MspInit+0x1c4>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003314:	23c0      	movs	r3, #192	; 0xc0
 8003316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003318:	2302      	movs	r3, #2
 800331a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003320:	2303      	movs	r3, #3
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003324:	2308      	movs	r3, #8
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003328:	f107 031c 	add.w	r3, r7, #28
 800332c:	4619      	mov	r1, r3
 800332e:	4824      	ldr	r0, [pc, #144]	; (80033c0 <HAL_UART_MspInit+0x1d8>)
 8003330:	f002 f82e 	bl	8005390 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003334:	4b23      	ldr	r3, [pc, #140]	; (80033c4 <HAL_UART_MspInit+0x1dc>)
 8003336:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <HAL_UART_MspInit+0x1e0>)
 8003338:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800333a:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <HAL_UART_MspInit+0x1dc>)
 800333c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003340:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_UART_MspInit+0x1dc>)
 8003344:	2240      	movs	r2, #64	; 0x40
 8003346:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003348:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <HAL_UART_MspInit+0x1dc>)
 800334a:	2200      	movs	r2, #0
 800334c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800334e:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <HAL_UART_MspInit+0x1dc>)
 8003350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003354:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_UART_MspInit+0x1dc>)
 8003358:	2200      	movs	r2, #0
 800335a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_UART_MspInit+0x1dc>)
 800335e:	2200      	movs	r2, #0
 8003360:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003362:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <HAL_UART_MspInit+0x1dc>)
 8003364:	2200      	movs	r2, #0
 8003366:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003368:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <HAL_UART_MspInit+0x1dc>)
 800336a:	2200      	movs	r2, #0
 800336c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800336e:	4b15      	ldr	r3, [pc, #84]	; (80033c4 <HAL_UART_MspInit+0x1dc>)
 8003370:	2200      	movs	r2, #0
 8003372:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003374:	4813      	ldr	r0, [pc, #76]	; (80033c4 <HAL_UART_MspInit+0x1dc>)
 8003376:	f001 fb91 	bl	8004a9c <HAL_DMA_Init>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8003380:	f7ff fbfe 	bl	8002b80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <HAL_UART_MspInit+0x1dc>)
 8003388:	635a      	str	r2, [r3, #52]	; 0x34
 800338a:	4a0e      	ldr	r2, [pc, #56]	; (80033c4 <HAL_UART_MspInit+0x1dc>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003390:	2200      	movs	r2, #0
 8003392:	2100      	movs	r1, #0
 8003394:	2047      	movs	r0, #71	; 0x47
 8003396:	f001 f907 	bl	80045a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800339a:	2047      	movs	r0, #71	; 0x47
 800339c:	f001 f920 	bl	80045e0 <HAL_NVIC_EnableIRQ>
}
 80033a0:	bf00      	nop
 80033a2:	3730      	adds	r7, #48	; 0x30
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40004800 	.word	0x40004800
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40020400 	.word	0x40020400
 80033b4:	20000708 	.word	0x20000708
 80033b8:	40026058 	.word	0x40026058
 80033bc:	40011400 	.word	0x40011400
 80033c0:	40020800 	.word	0x40020800
 80033c4:	20000768 	.word	0x20000768
 80033c8:	400264a0 	.word	0x400264a0

080033cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08c      	sub	sp, #48	; 0x30
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80033dc:	2200      	movs	r2, #0
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	2019      	movs	r0, #25
 80033e2:	f001 f8e1 	bl	80045a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80033e6:	2019      	movs	r0, #25
 80033e8:	f001 f8fa 	bl	80045e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <HAL_InitTick+0xa4>)
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	4a1e      	ldr	r2, [pc, #120]	; (8003470 <HAL_InitTick+0xa4>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	6453      	str	r3, [r2, #68]	; 0x44
 80033fc:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <HAL_InitTick+0xa4>)
 80033fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003408:	f107 0210 	add.w	r2, r7, #16
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	4611      	mov	r1, r2
 8003412:	4618      	mov	r0, r3
 8003414:	f005 fe9c 	bl	8009150 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003418:	f005 fe86 	bl	8009128 <HAL_RCC_GetPCLK2Freq>
 800341c:	4603      	mov	r3, r0
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	4a13      	ldr	r2, [pc, #76]	; (8003474 <HAL_InitTick+0xa8>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	0c9b      	lsrs	r3, r3, #18
 800342c:	3b01      	subs	r3, #1
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003430:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_InitTick+0xac>)
 8003432:	4a12      	ldr	r2, [pc, #72]	; (800347c <HAL_InitTick+0xb0>)
 8003434:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003436:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_InitTick+0xac>)
 8003438:	f240 32e7 	movw	r2, #999	; 0x3e7
 800343c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800343e:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <HAL_InitTick+0xac>)
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_InitTick+0xac>)
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_InitTick+0xac>)
 800344c:	2200      	movs	r2, #0
 800344e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003450:	4809      	ldr	r0, [pc, #36]	; (8003478 <HAL_InitTick+0xac>)
 8003452:	f005 feaf 	bl	80091b4 <HAL_TIM_Base_Init>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800345c:	4806      	ldr	r0, [pc, #24]	; (8003478 <HAL_InitTick+0xac>)
 800345e:	f005 fef9 	bl	8009254 <HAL_TIM_Base_Start_IT>
 8003462:	4603      	mov	r3, r0
 8003464:	e000      	b.n	8003468 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
}
 8003468:	4618      	mov	r0, r3
 800346a:	3730      	adds	r7, #48	; 0x30
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40023800 	.word	0x40023800
 8003474:	431bde83 	.word	0x431bde83
 8003478:	20005ab4 	.word	0x20005ab4
 800347c:	40010000 	.word	0x40010000

08003480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003484:	e7fe      	b.n	8003484 <NMI_Handler+0x4>

08003486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800348a:	e7fe      	b.n	800348a <HardFault_Handler+0x4>

0800348c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003490:	e7fe      	b.n	8003490 <MemManage_Handler+0x4>

08003492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003496:	e7fe      	b.n	8003496 <BusFault_Handler+0x4>

08003498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800349c:	e7fe      	b.n	800349c <UsageFault_Handler+0x4>

0800349e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ba:	b480      	push	{r7}
 80034bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80034da:	2004      	movs	r0, #4
 80034dc:	f002 fa0a 	bl	80058f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80034e0:	bf00      	nop
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80034e8:	2008      	movs	r0, #8
 80034ea:	f002 fa03 	bl	80058f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80034f6:	2010      	movs	r0, #16
 80034f8:	f002 f9fc 	bl	80058f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}

08003500 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003504:	4802      	ldr	r0, [pc, #8]	; (8003510 <DMA1_Stream0_IRQHandler+0x10>)
 8003506:	f001 fcbf 	bl	8004e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	200004b8 	.word	0x200004b8

08003514 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003518:	4802      	ldr	r0, [pc, #8]	; (8003524 <DMA1_Stream3_IRQHandler+0x10>)
 800351a:	f001 fcb5 	bl	8004e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800351e:	bf00      	nop
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000708 	.word	0x20000708

08003528 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800352c:	4802      	ldr	r0, [pc, #8]	; (8003538 <DMA1_Stream5_IRQHandler+0x10>)
 800352e:	f001 fcab 	bl	8004e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	200003a4 	.word	0x200003a4

0800353c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <DMA1_Stream6_IRQHandler+0x10>)
 8003542:	f001 fca1 	bl	8004e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000404 	.word	0x20000404

08003550 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003554:	4803      	ldr	r0, [pc, #12]	; (8003564 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003556:	f005 ff1c 	bl	8009392 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800355a:	4803      	ldr	r0, [pc, #12]	; (8003568 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800355c:	f005 ff19 	bl	8009392 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20005ab4 	.word	0x20005ab4
 8003568:	20000638 	.word	0x20000638

0800356c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003570:	4802      	ldr	r0, [pc, #8]	; (800357c <TIM4_IRQHandler+0x10>)
 8003572:	f005 ff0e 	bl	8009392 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	20000560 	.word	0x20000560

08003580 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003584:	4802      	ldr	r0, [pc, #8]	; (8003590 <I2C1_EV_IRQHandler+0x10>)
 8003586:	f003 f923 	bl	80067d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000464 	.word	0x20000464

08003594 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003598:	4802      	ldr	r0, [pc, #8]	; (80035a4 <USART3_IRQHandler+0x10>)
 800359a:	f006 fc19 	bl	8009dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20000680 	.word	0x20000680

080035a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80035ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80035b0:	f002 f9a0 	bl	80058f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035b4:	bf00      	nop
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80035bc:	4803      	ldr	r0, [pc, #12]	; (80035cc <TIM6_DAC_IRQHandler+0x14>)
 80035be:	f001 f91b 	bl	80047f8 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80035c2:	4803      	ldr	r0, [pc, #12]	; (80035d0 <TIM6_DAC_IRQHandler+0x18>)
 80035c4:	f005 fee5 	bl	8009392 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035c8:	bf00      	nop
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000390 	.word	0x20000390
 80035d0:	200005a8 	.word	0x200005a8

080035d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80035d8:	4802      	ldr	r0, [pc, #8]	; (80035e4 <TIM7_IRQHandler+0x10>)
 80035da:	f005 feda 	bl	8009392 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	200005f0 	.word	0x200005f0

080035e8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035ec:	4802      	ldr	r0, [pc, #8]	; (80035f8 <DMA2_Stream0_IRQHandler+0x10>)
 80035ee:	f001 fc4b 	bl	8004e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80035f2:	bf00      	nop
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200002d0 	.word	0x200002d0

080035fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003600:	4802      	ldr	r0, [pc, #8]	; (800360c <DMA2_Stream2_IRQHandler+0x10>)
 8003602:	f001 fc41 	bl	8004e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003606:	bf00      	nop
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20000330 	.word	0x20000330

08003610 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8003614:	4802      	ldr	r0, [pc, #8]	; (8003620 <DMA2_Stream6_IRQHandler+0x10>)
 8003616:	f001 fc37 	bl	8004e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800361a:	bf00      	nop
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000768 	.word	0x20000768

08003624 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003628:	4802      	ldr	r0, [pc, #8]	; (8003634 <USART6_IRQHandler+0x10>)
 800362a:	f006 fbd1 	bl	8009dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800362e:	bf00      	nop
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	200006c4 	.word	0x200006c4

08003638 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
	return 1;
 800363c:	2301      	movs	r3, #1
}
 800363e:	4618      	mov	r0, r3
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <_kill>:

int _kill(int pid, int sig)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003652:	f007 fbbf 	bl	800add4 <__errno>
 8003656:	4603      	mov	r3, r0
 8003658:	2216      	movs	r2, #22
 800365a:	601a      	str	r2, [r3, #0]
	return -1;
 800365c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <_exit>:

void _exit (int status)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003670:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ffe7 	bl	8003648 <_kill>
	while (1) {}		/* Make sure we hang here */
 800367a:	e7fe      	b.n	800367a <_exit+0x12>

0800367c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	e00a      	b.n	80036a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800368e:	f3af 8000 	nop.w
 8003692:	4601      	mov	r1, r0
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	60ba      	str	r2, [r7, #8]
 800369a:	b2ca      	uxtb	r2, r1
 800369c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	3301      	adds	r3, #1
 80036a2:	617b      	str	r3, [r7, #20]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	dbf0      	blt.n	800368e <_read+0x12>
	}

return len;
 80036ac:	687b      	ldr	r3, [r7, #4]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b086      	sub	sp, #24
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e009      	b.n	80036dc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	60ba      	str	r2, [r7, #8]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	3301      	adds	r3, #1
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	dbf1      	blt.n	80036c8 <_write+0x12>
	}
	return len;
 80036e4:	687b      	ldr	r3, [r7, #4]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3718      	adds	r7, #24
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <_close>:

int _close(int file)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
	return -1;
 80036f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003716:	605a      	str	r2, [r3, #4]
	return 0;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <_isatty>:

int _isatty(int file)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
	return 1;
 800372e:	2301      	movs	r3, #1
}
 8003730:	4618      	mov	r0, r3
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
	return 0;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <_sbrk+0x5c>)
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <_sbrk+0x60>)
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <_sbrk+0x64>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <_sbrk+0x64>)
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <_sbrk+0x68>)
 8003778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <_sbrk+0x64>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	429a      	cmp	r2, r3
 8003786:	d207      	bcs.n	8003798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003788:	f007 fb24 	bl	800add4 <__errno>
 800378c:	4603      	mov	r3, r0
 800378e:	220c      	movs	r2, #12
 8003790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003796:	e009      	b.n	80037ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003798:	4b08      	ldr	r3, [pc, #32]	; (80037bc <_sbrk+0x64>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800379e:	4b07      	ldr	r3, [pc, #28]	; (80037bc <_sbrk+0x64>)
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	4a05      	ldr	r2, [pc, #20]	; (80037bc <_sbrk+0x64>)
 80037a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037aa:	68fb      	ldr	r3, [r7, #12]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20020000 	.word	0x20020000
 80037b8:	00000400 	.word	0x00000400
 80037bc:	20005afc 	.word	0x20005afc
 80037c0:	20005b18 	.word	0x20005b18

080037c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <SystemInit+0x20>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ce:	4a05      	ldr	r2, [pc, #20]	; (80037e4 <SystemInit+0x20>)
 80037d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037d8:	bf00      	nop
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	e000ed00 	.word	0xe000ed00

080037e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003820 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037ec:	480d      	ldr	r0, [pc, #52]	; (8003824 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80037ee:	490e      	ldr	r1, [pc, #56]	; (8003828 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80037f0:	4a0e      	ldr	r2, [pc, #56]	; (800382c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80037f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037f4:	e002      	b.n	80037fc <LoopCopyDataInit>

080037f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037fa:	3304      	adds	r3, #4

080037fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003800:	d3f9      	bcc.n	80037f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003802:	4a0b      	ldr	r2, [pc, #44]	; (8003830 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003804:	4c0b      	ldr	r4, [pc, #44]	; (8003834 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003808:	e001      	b.n	800380e <LoopFillZerobss>

0800380a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800380a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800380c:	3204      	adds	r2, #4

0800380e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800380e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003810:	d3fb      	bcc.n	800380a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003812:	f7ff ffd7 	bl	80037c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003816:	f007 fae3 	bl	800ade0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800381a:	f7fe fbcb 	bl	8001fb4 <main>
  bx  lr    
 800381e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003828:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800382c:	0800e284 	.word	0x0800e284
  ldr r2, =_sbss
 8003830:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003834:	20005b14 	.word	0x20005b14

08003838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003838:	e7fe      	b.n	8003838 <ADC_IRQHandler>
	...

0800383c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <HAL_Init+0x40>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0d      	ldr	r2, [pc, #52]	; (800387c <HAL_Init+0x40>)
 8003846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800384a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_Init+0x40>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a0a      	ldr	r2, [pc, #40]	; (800387c <HAL_Init+0x40>)
 8003852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003858:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_Init+0x40>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a07      	ldr	r2, [pc, #28]	; (800387c <HAL_Init+0x40>)
 800385e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003864:	2003      	movs	r0, #3
 8003866:	f000 fe94 	bl	8004592 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800386a:	2000      	movs	r0, #0
 800386c:	f7ff fdae 	bl	80033cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003870:	f7ff f98c 	bl	8002b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40023c00 	.word	0x40023c00

08003880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <HAL_IncTick+0x20>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <HAL_IncTick+0x24>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4413      	add	r3, r2
 8003890:	4a04      	ldr	r2, [pc, #16]	; (80038a4 <HAL_IncTick+0x24>)
 8003892:	6013      	str	r3, [r2, #0]
}
 8003894:	bf00      	nop
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000008 	.word	0x20000008
 80038a4:	20005b00 	.word	0x20005b00

080038a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  return uwTick;
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <HAL_GetTick+0x14>)
 80038ae:	681b      	ldr	r3, [r3, #0]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	20005b00 	.word	0x20005b00

080038c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c8:	f7ff ffee 	bl	80038a8 <HAL_GetTick>
 80038cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d8:	d005      	beq.n	80038e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_Delay+0x44>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038e6:	bf00      	nop
 80038e8:	f7ff ffde 	bl	80038a8 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d8f7      	bhi.n	80038e8 <HAL_Delay+0x28>
  {
  }
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000008 	.word	0x20000008

08003908 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e033      	b.n	8003986 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d109      	bne.n	800393a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff f958 	bl	8002bdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	d118      	bne.n	8003978 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800394e:	f023 0302 	bic.w	r3, r3, #2
 8003952:	f043 0202 	orr.w	r2, r3, #2
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fbca 	bl	80040f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	f043 0201 	orr.w	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
 8003976:	e001      	b.n	800397c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_ADC_Start+0x1a>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e0b2      	b.n	8003b10 <HAL_ADC_Start+0x180>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d018      	beq.n	80039f2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039d0:	4b52      	ldr	r3, [pc, #328]	; (8003b1c <HAL_ADC_Start+0x18c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a52      	ldr	r2, [pc, #328]	; (8003b20 <HAL_ADC_Start+0x190>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	0c9a      	lsrs	r2, r3, #18
 80039dc:	4613      	mov	r3, r2
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	4413      	add	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80039e4:	e002      	b.n	80039ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3b01      	subs	r3, #1
 80039ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f9      	bne.n	80039e6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d17a      	bne.n	8003af6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a3e:	d106      	bne.n	8003a4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a44:	f023 0206 	bic.w	r2, r3, #6
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	645a      	str	r2, [r3, #68]	; 0x44
 8003a4c:	e002      	b.n	8003a54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a5c:	4b31      	ldr	r3, [pc, #196]	; (8003b24 <HAL_ADC_Start+0x194>)
 8003a5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003a68:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d12a      	bne.n	8003acc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a2b      	ldr	r2, [pc, #172]	; (8003b28 <HAL_ADC_Start+0x198>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d015      	beq.n	8003aac <HAL_ADC_Start+0x11c>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a29      	ldr	r2, [pc, #164]	; (8003b2c <HAL_ADC_Start+0x19c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d105      	bne.n	8003a96 <HAL_ADC_Start+0x106>
 8003a8a:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <HAL_ADC_Start+0x194>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a25      	ldr	r2, [pc, #148]	; (8003b30 <HAL_ADC_Start+0x1a0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d136      	bne.n	8003b0e <HAL_ADC_Start+0x17e>
 8003aa0:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <HAL_ADC_Start+0x194>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0310 	and.w	r3, r3, #16
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d130      	bne.n	8003b0e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d129      	bne.n	8003b0e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ac8:	609a      	str	r2, [r3, #8]
 8003aca:	e020      	b.n	8003b0e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <HAL_ADC_Start+0x198>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d11b      	bne.n	8003b0e <HAL_ADC_Start+0x17e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d114      	bne.n	8003b0e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	e00b      	b.n	8003b0e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f043 0210 	orr.w	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b06:	f043 0201 	orr.w	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	20000000 	.word	0x20000000
 8003b20:	431bde83 	.word	0x431bde83
 8003b24:	40012300 	.word	0x40012300
 8003b28:	40012000 	.word	0x40012000
 8003b2c:	40012100 	.word	0x40012100
 8003b30:	40012200 	.word	0x40012200

08003b34 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b50:	d113      	bne.n	8003b7a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b60:	d10b      	bne.n	8003b7a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f043 0220 	orr.w	r2, r3, #32
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e063      	b.n	8003c42 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003b7a:	f7ff fe95 	bl	80038a8 <HAL_GetTick>
 8003b7e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003b80:	e021      	b.n	8003bc6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b88:	d01d      	beq.n	8003bc6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_ADC_PollForConversion+0x6c>
 8003b90:	f7ff fe8a 	bl	80038a8 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d212      	bcs.n	8003bc6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d00b      	beq.n	8003bc6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f043 0204 	orr.w	r2, r3, #4
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e03d      	b.n	8003c42 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d1d6      	bne.n	8003b82 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0212 	mvn.w	r2, #18
 8003bdc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d123      	bne.n	8003c40 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d11f      	bne.n	8003c40 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d006      	beq.n	8003c1c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d111      	bne.n	8003c40 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d105      	bne.n	8003c40 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	f043 0201 	orr.w	r2, r3, #1
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
	...

08003c4c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_ADC_Start_DMA+0x1e>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e0e9      	b.n	8003e3e <HAL_ADC_Start_DMA+0x1f2>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d018      	beq.n	8003cb2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c90:	4b6d      	ldr	r3, [pc, #436]	; (8003e48 <HAL_ADC_Start_DMA+0x1fc>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a6d      	ldr	r2, [pc, #436]	; (8003e4c <HAL_ADC_Start_DMA+0x200>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	0c9a      	lsrs	r2, r3, #18
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003ca4:	e002      	b.n	8003cac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f9      	bne.n	8003ca6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc0:	d107      	bne.n	8003cd2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	f040 80a1 	bne.w	8003e24 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d007      	beq.n	8003d14 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d20:	d106      	bne.n	8003d30 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f023 0206 	bic.w	r2, r3, #6
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	645a      	str	r2, [r3, #68]	; 0x44
 8003d2e:	e002      	b.n	8003d36 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d3e:	4b44      	ldr	r3, [pc, #272]	; (8003e50 <HAL_ADC_Start_DMA+0x204>)
 8003d40:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d46:	4a43      	ldr	r2, [pc, #268]	; (8003e54 <HAL_ADC_Start_DMA+0x208>)
 8003d48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	4a42      	ldr	r2, [pc, #264]	; (8003e58 <HAL_ADC_Start_DMA+0x20c>)
 8003d50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	4a41      	ldr	r2, [pc, #260]	; (8003e5c <HAL_ADC_Start_DMA+0x210>)
 8003d58:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d62:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d72:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d82:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	334c      	adds	r3, #76	; 0x4c
 8003d8e:	4619      	mov	r1, r3
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f000 ff8e 	bl	8004cb4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d12a      	bne.n	8003dfa <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2d      	ldr	r2, [pc, #180]	; (8003e60 <HAL_ADC_Start_DMA+0x214>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d015      	beq.n	8003dda <HAL_ADC_Start_DMA+0x18e>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2c      	ldr	r2, [pc, #176]	; (8003e64 <HAL_ADC_Start_DMA+0x218>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d105      	bne.n	8003dc4 <HAL_ADC_Start_DMA+0x178>
 8003db8:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_ADC_Start_DMA+0x204>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a27      	ldr	r2, [pc, #156]	; (8003e68 <HAL_ADC_Start_DMA+0x21c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d136      	bne.n	8003e3c <HAL_ADC_Start_DMA+0x1f0>
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_ADC_Start_DMA+0x204>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f003 0310 	and.w	r3, r3, #16
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d130      	bne.n	8003e3c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d129      	bne.n	8003e3c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	e020      	b.n	8003e3c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a18      	ldr	r2, [pc, #96]	; (8003e60 <HAL_ADC_Start_DMA+0x214>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d11b      	bne.n	8003e3c <HAL_ADC_Start_DMA+0x1f0>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d114      	bne.n	8003e3c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e20:	609a      	str	r2, [r3, #8]
 8003e22:	e00b      	b.n	8003e3c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	f043 0210 	orr.w	r2, r3, #16
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e34:	f043 0201 	orr.w	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000000 	.word	0x20000000
 8003e4c:	431bde83 	.word	0x431bde83
 8003e50:	40012300 	.word	0x40012300
 8003e54:	080042ed 	.word	0x080042ed
 8003e58:	080043a7 	.word	0x080043a7
 8003e5c:	080043c3 	.word	0x080043c3
 8003e60:	40012000 	.word	0x40012000
 8003e64:	40012100 	.word	0x40012100
 8003e68:	40012200 	.word	0x40012200

08003e6c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x1c>
 8003ec8:	2302      	movs	r3, #2
 8003eca:	e105      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x228>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2b09      	cmp	r3, #9
 8003eda:	d925      	bls.n	8003f28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68d9      	ldr	r1, [r3, #12]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	3b1e      	subs	r3, #30
 8003ef2:	2207      	movs	r2, #7
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43da      	mvns	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	400a      	ands	r2, r1
 8003f00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68d9      	ldr	r1, [r3, #12]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	4618      	mov	r0, r3
 8003f14:	4603      	mov	r3, r0
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4403      	add	r3, r0
 8003f1a:	3b1e      	subs	r3, #30
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	60da      	str	r2, [r3, #12]
 8003f26:	e022      	b.n	8003f6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6919      	ldr	r1, [r3, #16]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	2207      	movs	r2, #7
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43da      	mvns	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	400a      	ands	r2, r1
 8003f4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6919      	ldr	r1, [r3, #16]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	4603      	mov	r3, r0
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	4403      	add	r3, r0
 8003f64:	409a      	lsls	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b06      	cmp	r3, #6
 8003f74:	d824      	bhi.n	8003fc0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	3b05      	subs	r3, #5
 8003f88:	221f      	movs	r2, #31
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43da      	mvns	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	400a      	ands	r2, r1
 8003f96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	3b05      	subs	r3, #5
 8003fb2:	fa00 f203 	lsl.w	r2, r0, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8003fbe:	e04c      	b.n	800405a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	d824      	bhi.n	8004012 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3b23      	subs	r3, #35	; 0x23
 8003fda:	221f      	movs	r2, #31
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43da      	mvns	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	400a      	ands	r2, r1
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	3b23      	subs	r3, #35	; 0x23
 8004004:	fa00 f203 	lsl.w	r2, r0, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	631a      	str	r2, [r3, #48]	; 0x30
 8004010:	e023      	b.n	800405a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	3b41      	subs	r3, #65	; 0x41
 8004024:	221f      	movs	r2, #31
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43da      	mvns	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	400a      	ands	r2, r1
 8004032:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	b29b      	uxth	r3, r3
 8004040:	4618      	mov	r0, r3
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	3b41      	subs	r3, #65	; 0x41
 800404e:	fa00 f203 	lsl.w	r2, r0, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <HAL_ADC_ConfigChannel+0x234>)
 800405c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a21      	ldr	r2, [pc, #132]	; (80040e8 <HAL_ADC_ConfigChannel+0x238>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d109      	bne.n	800407c <HAL_ADC_ConfigChannel+0x1cc>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b12      	cmp	r3, #18
 800406e:	d105      	bne.n	800407c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a19      	ldr	r2, [pc, #100]	; (80040e8 <HAL_ADC_ConfigChannel+0x238>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d123      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x21e>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b10      	cmp	r3, #16
 800408c:	d003      	beq.n	8004096 <HAL_ADC_ConfigChannel+0x1e6>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b11      	cmp	r3, #17
 8004094:	d11b      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b10      	cmp	r3, #16
 80040a8:	d111      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040aa:	4b10      	ldr	r3, [pc, #64]	; (80040ec <HAL_ADC_ConfigChannel+0x23c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a10      	ldr	r2, [pc, #64]	; (80040f0 <HAL_ADC_ConfigChannel+0x240>)
 80040b0:	fba2 2303 	umull	r2, r3, r2, r3
 80040b4:	0c9a      	lsrs	r2, r3, #18
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040c0:	e002      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1f9      	bne.n	80040c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40012300 	.word	0x40012300
 80040e8:	40012000 	.word	0x40012000
 80040ec:	20000000 	.word	0x20000000
 80040f0:	431bde83 	.word	0x431bde83

080040f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040fc:	4b79      	ldr	r3, [pc, #484]	; (80042e4 <ADC_Init+0x1f0>)
 80040fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	431a      	orrs	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004128:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	021a      	lsls	r2, r3, #8
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800414c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689a      	ldr	r2, [r3, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6899      	ldr	r1, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	4a58      	ldr	r2, [pc, #352]	; (80042e8 <ADC_Init+0x1f4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800419a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6899      	ldr	r1, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6899      	ldr	r1, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	e00f      	b.n	80041f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0202 	bic.w	r2, r2, #2
 8004200:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6899      	ldr	r1, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7e1b      	ldrb	r3, [r3, #24]
 800420c:	005a      	lsls	r2, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01b      	beq.n	8004258 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800422e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800423e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6859      	ldr	r1, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	3b01      	subs	r3, #1
 800424c:	035a      	lsls	r2, r3, #13
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
 8004256:	e007      	b.n	8004268 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004266:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004276:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	3b01      	subs	r3, #1
 8004284:	051a      	lsls	r2, r3, #20
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800429c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6899      	ldr	r1, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042aa:	025a      	lsls	r2, r3, #9
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6899      	ldr	r1, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	029a      	lsls	r2, r3, #10
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40012300 	.word	0x40012300
 80042e8:	0f000001 	.word	0x0f000001

080042ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004302:	2b00      	cmp	r3, #0
 8004304:	d13c      	bne.n	8004380 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d12b      	bne.n	8004378 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004324:	2b00      	cmp	r3, #0
 8004326:	d127      	bne.n	8004378 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004332:	2b00      	cmp	r3, #0
 8004334:	d006      	beq.n	8004344 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004340:	2b00      	cmp	r3, #0
 8004342:	d119      	bne.n	8004378 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0220 	bic.w	r2, r2, #32
 8004352:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004364:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d105      	bne.n	8004378 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	f043 0201 	orr.w	r2, r3, #1
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004378:	68f8      	ldr	r0, [r7, #12]
 800437a:	f7ff fd84 	bl	8003e86 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800437e:	e00e      	b.n	800439e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d003      	beq.n	8004394 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f7ff fd84 	bl	8003e9a <HAL_ADC_ErrorCallback>
}
 8004392:	e004      	b.n	800439e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4798      	blx	r3
}
 800439e:	bf00      	nop
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b084      	sub	sp, #16
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7fd f9fd 	bl	80017b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2240      	movs	r2, #64	; 0x40
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	f043 0204 	orr.w	r2, r3, #4
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff fd59 	bl	8003e9a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <__NVIC_SetPriorityGrouping+0x44>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800440c:	4013      	ands	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800441c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004422:	4a04      	ldr	r2, [pc, #16]	; (8004434 <__NVIC_SetPriorityGrouping+0x44>)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	60d3      	str	r3, [r2, #12]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	e000ed00 	.word	0xe000ed00

08004438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <__NVIC_GetPriorityGrouping+0x18>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	0a1b      	lsrs	r3, r3, #8
 8004442:	f003 0307 	and.w	r3, r3, #7
}
 8004446:	4618      	mov	r0, r3
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	e000ed00 	.word	0xe000ed00

08004454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800445e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004462:	2b00      	cmp	r3, #0
 8004464:	db0b      	blt.n	800447e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	f003 021f 	and.w	r2, r3, #31
 800446c:	4907      	ldr	r1, [pc, #28]	; (800448c <__NVIC_EnableIRQ+0x38>)
 800446e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004472:	095b      	lsrs	r3, r3, #5
 8004474:	2001      	movs	r0, #1
 8004476:	fa00 f202 	lsl.w	r2, r0, r2
 800447a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	e000e100 	.word	0xe000e100

08004490 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800449a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	db12      	blt.n	80044c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	f003 021f 	and.w	r2, r3, #31
 80044a8:	490a      	ldr	r1, [pc, #40]	; (80044d4 <__NVIC_DisableIRQ+0x44>)
 80044aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	2001      	movs	r0, #1
 80044b2:	fa00 f202 	lsl.w	r2, r0, r2
 80044b6:	3320      	adds	r3, #32
 80044b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80044bc:	f3bf 8f4f 	dsb	sy
}
 80044c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80044c2:	f3bf 8f6f 	isb	sy
}
 80044c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr
 80044d4:	e000e100 	.word	0xe000e100

080044d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	6039      	str	r1, [r7, #0]
 80044e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	db0a      	blt.n	8004502 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	490c      	ldr	r1, [pc, #48]	; (8004524 <__NVIC_SetPriority+0x4c>)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	0112      	lsls	r2, r2, #4
 80044f8:	b2d2      	uxtb	r2, r2
 80044fa:	440b      	add	r3, r1
 80044fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004500:	e00a      	b.n	8004518 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	b2da      	uxtb	r2, r3
 8004506:	4908      	ldr	r1, [pc, #32]	; (8004528 <__NVIC_SetPriority+0x50>)
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	3b04      	subs	r3, #4
 8004510:	0112      	lsls	r2, r2, #4
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	440b      	add	r3, r1
 8004516:	761a      	strb	r2, [r3, #24]
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	e000e100 	.word	0xe000e100
 8004528:	e000ed00 	.word	0xe000ed00

0800452c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800452c:	b480      	push	{r7}
 800452e:	b089      	sub	sp, #36	; 0x24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f1c3 0307 	rsb	r3, r3, #7
 8004546:	2b04      	cmp	r3, #4
 8004548:	bf28      	it	cs
 800454a:	2304      	movcs	r3, #4
 800454c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	3304      	adds	r3, #4
 8004552:	2b06      	cmp	r3, #6
 8004554:	d902      	bls.n	800455c <NVIC_EncodePriority+0x30>
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3b03      	subs	r3, #3
 800455a:	e000      	b.n	800455e <NVIC_EncodePriority+0x32>
 800455c:	2300      	movs	r3, #0
 800455e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43da      	mvns	r2, r3
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	401a      	ands	r2, r3
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	fa01 f303 	lsl.w	r3, r1, r3
 800457e:	43d9      	mvns	r1, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004584:	4313      	orrs	r3, r2
         );
}
 8004586:	4618      	mov	r0, r3
 8004588:	3724      	adds	r7, #36	; 0x24
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff ff28 	bl	80043f0 <__NVIC_SetPriorityGrouping>
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045ba:	f7ff ff3d 	bl	8004438 <__NVIC_GetPriorityGrouping>
 80045be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	6978      	ldr	r0, [r7, #20]
 80045c6:	f7ff ffb1 	bl	800452c <NVIC_EncodePriority>
 80045ca:	4602      	mov	r2, r0
 80045cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff ff80 	bl	80044d8 <__NVIC_SetPriority>
}
 80045d8:	bf00      	nop
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff ff30 	bl	8004454 <__NVIC_EnableIRQ>
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff ff40 	bl	8004490 <__NVIC_DisableIRQ>
}
 8004610:	bf00      	nop
 8004612:	3708      	adds	r7, #8
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e014      	b.n	8004654 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	791b      	ldrb	r3, [r3, #4]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d105      	bne.n	8004640 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fe fbdc 	bl	8002df8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
 8004668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	795b      	ldrb	r3, [r3, #5]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_DAC_Start_DMA+0x22>
 800467a:	2302      	movs	r3, #2
 800467c:	e0ab      	b.n	80047d6 <HAL_DAC_Start_DMA+0x17a>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2202      	movs	r2, #2
 8004688:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d12f      	bne.n	80046f0 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	4a52      	ldr	r2, [pc, #328]	; (80047e0 <HAL_DAC_Start_DMA+0x184>)
 8004696:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4a51      	ldr	r2, [pc, #324]	; (80047e4 <HAL_DAC_Start_DMA+0x188>)
 800469e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4a50      	ldr	r2, [pc, #320]	; (80047e8 <HAL_DAC_Start_DMA+0x18c>)
 80046a6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046b6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d013      	beq.n	80046e6 <HAL_DAC_Start_DMA+0x8a>
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d845      	bhi.n	8004750 <HAL_DAC_Start_DMA+0xf4>
 80046c4:	6a3b      	ldr	r3, [r7, #32]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_DAC_Start_DMA+0x76>
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d005      	beq.n	80046dc <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80046d0:	e03e      	b.n	8004750 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3308      	adds	r3, #8
 80046d8:	613b      	str	r3, [r7, #16]
        break;
 80046da:	e03c      	b.n	8004756 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	613b      	str	r3, [r7, #16]
        break;
 80046e4:	e037      	b.n	8004756 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3310      	adds	r3, #16
 80046ec:	613b      	str	r3, [r7, #16]
        break;
 80046ee:	e032      	b.n	8004756 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4a3d      	ldr	r2, [pc, #244]	; (80047ec <HAL_DAC_Start_DMA+0x190>)
 80046f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	4a3c      	ldr	r2, [pc, #240]	; (80047f0 <HAL_DAC_Start_DMA+0x194>)
 80046fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	4a3b      	ldr	r2, [pc, #236]	; (80047f4 <HAL_DAC_Start_DMA+0x198>)
 8004706:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004716:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	2b08      	cmp	r3, #8
 800471c:	d013      	beq.n	8004746 <HAL_DAC_Start_DMA+0xea>
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d817      	bhi.n	8004754 <HAL_DAC_Start_DMA+0xf8>
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_DAC_Start_DMA+0xd6>
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d005      	beq.n	800473c <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004730:	e010      	b.n	8004754 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3314      	adds	r3, #20
 8004738:	613b      	str	r3, [r7, #16]
        break;
 800473a:	e00c      	b.n	8004756 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3318      	adds	r3, #24
 8004742:	613b      	str	r3, [r7, #16]
        break;
 8004744:	e007      	b.n	8004756 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	331c      	adds	r3, #28
 800474c:	613b      	str	r3, [r7, #16]
        break;
 800474e:	e002      	b.n	8004756 <HAL_DAC_Start_DMA+0xfa>
        break;
 8004750:	bf00      	nop
 8004752:	e000      	b.n	8004756 <HAL_DAC_Start_DMA+0xfa>
        break;
 8004754:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d111      	bne.n	8004780 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800476a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6898      	ldr	r0, [r3, #8]
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	f000 fa9d 	bl	8004cb4 <HAL_DMA_Start_IT>
 800477a:	4603      	mov	r3, r0
 800477c:	75fb      	strb	r3, [r7, #23]
 800477e:	e010      	b.n	80047a2 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800478e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	68d8      	ldr	r0, [r3, #12]
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	f000 fa8b 	bl	8004cb4 <HAL_DMA_Start_IT>
 800479e:	4603      	mov	r3, r0
 80047a0:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80047a8:	7dfb      	ldrb	r3, [r7, #23]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10c      	bne.n	80047c8 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6819      	ldr	r1, [r3, #0]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2201      	movs	r2, #1
 80047bc:	409a      	lsls	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	e005      	b.n	80047d4 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f043 0204 	orr.w	r2, r3, #4
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80047d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	08004987 	.word	0x08004987
 80047e4:	080049a9 	.word	0x080049a9
 80047e8:	080049c5 	.word	0x080049c5
 80047ec:	08004a2f 	.word	0x08004a2f
 80047f0:	08004a51 	.word	0x08004a51
 80047f4:	08004a6d 	.word	0x08004a6d

080047f8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800480a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800480e:	d120      	bne.n	8004852 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800481a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800481e:	d118      	bne.n	8004852 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2204      	movs	r2, #4
 8004824:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	f043 0201 	orr.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800483a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800484a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f841 	bl	80048d4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800485c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004860:	d120      	bne.n	80048a4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800486c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004870:	d118      	bne.n	80048a4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2204      	movs	r2, #4
 8004876:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f043 0202 	orr.w	r2, r3, #2
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800488c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800489c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8bb 	bl	8004a1a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80048a4:	bf00      	nop
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	795b      	ldrb	r3, [r3, #5]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_DAC_ConfigChannel+0x18>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e03c      	b.n	800497a <HAL_DAC_ConfigChannel+0x92>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2202      	movs	r2, #2
 800490a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f003 0310 	and.w	r3, r3, #16
 800491a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43db      	mvns	r3, r3
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4013      	ands	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4313      	orrs	r3, r2
 8004934:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f003 0310 	and.w	r3, r3, #16
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	4313      	orrs	r3, r2
 8004946:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6819      	ldr	r1, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	22c0      	movs	r2, #192	; 0xc0
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43da      	mvns	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	400a      	ands	r2, r1
 800496a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7fc ff4b 	bl	8001830 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	711a      	strb	r2, [r3, #4]
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7ff ff78 	bl	80048ac <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f043 0204 	orr.w	r2, r3, #4
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff ff6e 	bl	80048c0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	711a      	strb	r2, [r3, #4]
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7fc ff15 	bl	800186c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	711a      	strb	r2, [r3, #4]
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff ffc7 	bl	80049f2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f043 0204 	orr.w	r2, r3, #4
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f7ff ffbd 	bl	8004a06 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	711a      	strb	r2, [r3, #4]
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004aa8:	f7fe fefe 	bl	80038a8 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e099      	b.n	8004bec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 0201 	bic.w	r2, r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ad8:	e00f      	b.n	8004afa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ada:	f7fe fee5 	bl	80038a8 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b05      	cmp	r3, #5
 8004ae6:	d908      	bls.n	8004afa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2203      	movs	r2, #3
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e078      	b.n	8004bec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1e8      	bne.n	8004ada <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4b38      	ldr	r3, [pc, #224]	; (8004bf4 <HAL_DMA_Init+0x158>)
 8004b14:	4013      	ands	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d107      	bne.n	8004b64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0307 	bic.w	r3, r3, #7
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d117      	bne.n	8004bbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00e      	beq.n	8004bbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fb79 	bl	8005298 <DMA_CheckFifoParam>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2240      	movs	r2, #64	; 0x40
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e016      	b.n	8004bec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fb30 	bl	800522c <DMA_CalcBaseAndBitshift>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd4:	223f      	movs	r2, #63	; 0x3f
 8004bd6:	409a      	lsls	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	f010803f 	.word	0xf010803f

08004bf8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e050      	b.n	8004cac <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d101      	bne.n	8004c1a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004c16:	2302      	movs	r3, #2
 8004c18:	e048      	b.n	8004cac <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2200      	movs	r2, #0
 8004c38:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2200      	movs	r2, #0
 8004c48:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2221      	movs	r2, #33	; 0x21
 8004c58:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fae6 	bl	800522c <DMA_CalcBaseAndBitshift>
 8004c60:	4603      	mov	r3, r0
 8004c62:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8c:	223f      	movs	r2, #63	; 0x3f
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_DMA_Start_IT+0x26>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e040      	b.n	8004d5c <HAL_DMA_Start_IT+0xa8>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d12f      	bne.n	8004d4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fa64 	bl	80051d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0c:	223f      	movs	r2, #63	; 0x3f
 8004d0e:	409a      	lsls	r2, r3
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0216 	orr.w	r2, r2, #22
 8004d22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0208 	orr.w	r2, r2, #8
 8004d3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	e005      	b.n	8004d5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d56:	2302      	movs	r3, #2
 8004d58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d70:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d72:	f7fe fd99 	bl	80038a8 <HAL_GetTick>
 8004d76:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d008      	beq.n	8004d96 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2280      	movs	r2, #128	; 0x80
 8004d88:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e052      	b.n	8004e3c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0216 	bic.w	r2, r2, #22
 8004da4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004db4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d103      	bne.n	8004dc6 <HAL_DMA_Abort+0x62>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0208 	bic.w	r2, r2, #8
 8004dd4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0201 	bic.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004de6:	e013      	b.n	8004e10 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004de8:	f7fe fd5e 	bl	80038a8 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b05      	cmp	r3, #5
 8004df4:	d90c      	bls.n	8004e10 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2203      	movs	r2, #3
 8004e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e015      	b.n	8004e3c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e4      	bne.n	8004de8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e22:	223f      	movs	r2, #63	; 0x3f
 8004e24:	409a      	lsls	r2, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d004      	beq.n	8004e62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2280      	movs	r2, #128	; 0x80
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e00c      	b.n	8004e7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2205      	movs	r2, #5
 8004e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0201 	bic.w	r2, r2, #1
 8004e78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e94:	4b8e      	ldr	r3, [pc, #568]	; (80050d0 <HAL_DMA_IRQHandler+0x248>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a8e      	ldr	r2, [pc, #568]	; (80050d4 <HAL_DMA_IRQHandler+0x24c>)
 8004e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9e:	0a9b      	lsrs	r3, r3, #10
 8004ea0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb2:	2208      	movs	r2, #8
 8004eb4:	409a      	lsls	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01a      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d013      	beq.n	8004ef4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0204 	bic.w	r2, r2, #4
 8004eda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eec:	f043 0201 	orr.w	r2, r3, #1
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef8:	2201      	movs	r2, #1
 8004efa:	409a      	lsls	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d012      	beq.n	8004f2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f16:	2201      	movs	r2, #1
 8004f18:	409a      	lsls	r2, r3
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f043 0202 	orr.w	r2, r3, #2
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2e:	2204      	movs	r2, #4
 8004f30:	409a      	lsls	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d012      	beq.n	8004f60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00b      	beq.n	8004f60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	409a      	lsls	r2, r3
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f58:	f043 0204 	orr.w	r2, r3, #4
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f64:	2210      	movs	r2, #16
 8004f66:	409a      	lsls	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d043      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d03c      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f82:	2210      	movs	r2, #16
 8004f84:	409a      	lsls	r2, r3
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d018      	beq.n	8004fca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d108      	bne.n	8004fb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d024      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	4798      	blx	r3
 8004fb6:	e01f      	b.n	8004ff8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01b      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	4798      	blx	r3
 8004fc8:	e016      	b.n	8004ff8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d107      	bne.n	8004fe8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0208 	bic.w	r2, r2, #8
 8004fe6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	409a      	lsls	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	4013      	ands	r3, r2
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 808f 	beq.w	8005128 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0310 	and.w	r3, r3, #16
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8087 	beq.w	8005128 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501e:	2220      	movs	r2, #32
 8005020:	409a      	lsls	r2, r3
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b05      	cmp	r3, #5
 8005030:	d136      	bne.n	80050a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0216 	bic.w	r2, r2, #22
 8005040:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005050:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d103      	bne.n	8005062 <HAL_DMA_IRQHandler+0x1da>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0208 	bic.w	r2, r2, #8
 8005070:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005076:	223f      	movs	r2, #63	; 0x3f
 8005078:	409a      	lsls	r2, r3
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005092:	2b00      	cmp	r3, #0
 8005094:	d07e      	beq.n	8005194 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	4798      	blx	r3
        }
        return;
 800509e:	e079      	b.n	8005194 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01d      	beq.n	80050ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10d      	bne.n	80050d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d031      	beq.n	8005128 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	4798      	blx	r3
 80050cc:	e02c      	b.n	8005128 <HAL_DMA_IRQHandler+0x2a0>
 80050ce:	bf00      	nop
 80050d0:	20000000 	.word	0x20000000
 80050d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d023      	beq.n	8005128 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
 80050e8:	e01e      	b.n	8005128 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10f      	bne.n	8005118 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0210 	bic.w	r2, r2, #16
 8005106:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512c:	2b00      	cmp	r3, #0
 800512e:	d032      	beq.n	8005196 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d022      	beq.n	8005182 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2205      	movs	r2, #5
 8005140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0201 	bic.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	3301      	adds	r3, #1
 8005158:	60bb      	str	r3, [r7, #8]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	429a      	cmp	r2, r3
 800515e:	d307      	bcc.n	8005170 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f2      	bne.n	8005154 <HAL_DMA_IRQHandler+0x2cc>
 800516e:	e000      	b.n	8005172 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005170:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d005      	beq.n	8005196 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	4798      	blx	r3
 8005192:	e000      	b.n	8005196 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005194:	bf00      	nop
    }
  }
}
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051aa:	b2db      	uxtb	r3, r3
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b40      	cmp	r3, #64	; 0x40
 80051fc:	d108      	bne.n	8005210 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800520e:	e007      	b.n	8005220 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	60da      	str	r2, [r3, #12]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	3b10      	subs	r3, #16
 800523c:	4a14      	ldr	r2, [pc, #80]	; (8005290 <DMA_CalcBaseAndBitshift+0x64>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	091b      	lsrs	r3, r3, #4
 8005244:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005246:	4a13      	ldr	r2, [pc, #76]	; (8005294 <DMA_CalcBaseAndBitshift+0x68>)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b03      	cmp	r3, #3
 8005258:	d909      	bls.n	800526e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	1d1a      	adds	r2, r3, #4
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	659a      	str	r2, [r3, #88]	; 0x58
 800526c:	e007      	b.n	800527e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	aaaaaaab 	.word	0xaaaaaaab
 8005294:	0800de94 	.word	0x0800de94

08005298 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d11f      	bne.n	80052f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d856      	bhi.n	8005366 <DMA_CheckFifoParam+0xce>
 80052b8:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <DMA_CheckFifoParam+0x28>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	080052d1 	.word	0x080052d1
 80052c4:	080052e3 	.word	0x080052e3
 80052c8:	080052d1 	.word	0x080052d1
 80052cc:	08005367 	.word	0x08005367
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d046      	beq.n	800536a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052e0:	e043      	b.n	800536a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052ea:	d140      	bne.n	800536e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052f0:	e03d      	b.n	800536e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fa:	d121      	bne.n	8005340 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d837      	bhi.n	8005372 <DMA_CheckFifoParam+0xda>
 8005302:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <DMA_CheckFifoParam+0x70>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	08005319 	.word	0x08005319
 800530c:	0800531f 	.word	0x0800531f
 8005310:	08005319 	.word	0x08005319
 8005314:	08005331 	.word	0x08005331
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]
      break;
 800531c:	e030      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d025      	beq.n	8005376 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800532e:	e022      	b.n	8005376 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005338:	d11f      	bne.n	800537a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800533e:	e01c      	b.n	800537a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d903      	bls.n	800534e <DMA_CheckFifoParam+0xb6>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b03      	cmp	r3, #3
 800534a:	d003      	beq.n	8005354 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800534c:	e018      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	73fb      	strb	r3, [r7, #15]
      break;
 8005352:	e015      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00e      	beq.n	800537e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
      break;
 8005364:	e00b      	b.n	800537e <DMA_CheckFifoParam+0xe6>
      break;
 8005366:	bf00      	nop
 8005368:	e00a      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      break;
 800536a:	bf00      	nop
 800536c:	e008      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      break;
 800536e:	bf00      	nop
 8005370:	e006      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      break;
 8005372:	bf00      	nop
 8005374:	e004      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      break;
 8005376:	bf00      	nop
 8005378:	e002      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      break;   
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      break;
 800537e:	bf00      	nop
    }
  } 
  
  return status; 
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop

08005390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005390:	b480      	push	{r7}
 8005392:	b089      	sub	sp, #36	; 0x24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053a6:	2300      	movs	r3, #0
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	e16b      	b.n	8005684 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053ac:	2201      	movs	r2, #1
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4013      	ands	r3, r2
 80053be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	f040 815a 	bne.w	800567e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d005      	beq.n	80053e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d130      	bne.n	8005444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	2203      	movs	r2, #3
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	4013      	ands	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	4313      	orrs	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005418:	2201      	movs	r2, #1
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	43db      	mvns	r3, r3
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	4013      	ands	r3, r2
 8005426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	f003 0201 	and.w	r2, r3, #1
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4313      	orrs	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f003 0303 	and.w	r3, r3, #3
 800544c:	2b03      	cmp	r3, #3
 800544e:	d017      	beq.n	8005480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	2203      	movs	r2, #3
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	43db      	mvns	r3, r3
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4013      	ands	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	4313      	orrs	r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d123      	bne.n	80054d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	08da      	lsrs	r2, r3, #3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3208      	adds	r2, #8
 8005494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	220f      	movs	r2, #15
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	43db      	mvns	r3, r3
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	4013      	ands	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	08da      	lsrs	r2, r3, #3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3208      	adds	r2, #8
 80054ce:	69b9      	ldr	r1, [r7, #24]
 80054d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	2203      	movs	r2, #3
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4013      	ands	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f003 0203 	and.w	r2, r3, #3
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4313      	orrs	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80b4 	beq.w	800567e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	4b60      	ldr	r3, [pc, #384]	; (800569c <HAL_GPIO_Init+0x30c>)
 800551c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551e:	4a5f      	ldr	r2, [pc, #380]	; (800569c <HAL_GPIO_Init+0x30c>)
 8005520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005524:	6453      	str	r3, [r2, #68]	; 0x44
 8005526:	4b5d      	ldr	r3, [pc, #372]	; (800569c <HAL_GPIO_Init+0x30c>)
 8005528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800552a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005532:	4a5b      	ldr	r2, [pc, #364]	; (80056a0 <HAL_GPIO_Init+0x310>)
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	089b      	lsrs	r3, r3, #2
 8005538:	3302      	adds	r3, #2
 800553a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	220f      	movs	r2, #15
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a52      	ldr	r2, [pc, #328]	; (80056a4 <HAL_GPIO_Init+0x314>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d02b      	beq.n	80055b6 <HAL_GPIO_Init+0x226>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a51      	ldr	r2, [pc, #324]	; (80056a8 <HAL_GPIO_Init+0x318>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d025      	beq.n	80055b2 <HAL_GPIO_Init+0x222>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a50      	ldr	r2, [pc, #320]	; (80056ac <HAL_GPIO_Init+0x31c>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d01f      	beq.n	80055ae <HAL_GPIO_Init+0x21e>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a4f      	ldr	r2, [pc, #316]	; (80056b0 <HAL_GPIO_Init+0x320>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d019      	beq.n	80055aa <HAL_GPIO_Init+0x21a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a4e      	ldr	r2, [pc, #312]	; (80056b4 <HAL_GPIO_Init+0x324>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <HAL_GPIO_Init+0x216>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a4d      	ldr	r2, [pc, #308]	; (80056b8 <HAL_GPIO_Init+0x328>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00d      	beq.n	80055a2 <HAL_GPIO_Init+0x212>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a4c      	ldr	r2, [pc, #304]	; (80056bc <HAL_GPIO_Init+0x32c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d007      	beq.n	800559e <HAL_GPIO_Init+0x20e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a4b      	ldr	r2, [pc, #300]	; (80056c0 <HAL_GPIO_Init+0x330>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d101      	bne.n	800559a <HAL_GPIO_Init+0x20a>
 8005596:	2307      	movs	r3, #7
 8005598:	e00e      	b.n	80055b8 <HAL_GPIO_Init+0x228>
 800559a:	2308      	movs	r3, #8
 800559c:	e00c      	b.n	80055b8 <HAL_GPIO_Init+0x228>
 800559e:	2306      	movs	r3, #6
 80055a0:	e00a      	b.n	80055b8 <HAL_GPIO_Init+0x228>
 80055a2:	2305      	movs	r3, #5
 80055a4:	e008      	b.n	80055b8 <HAL_GPIO_Init+0x228>
 80055a6:	2304      	movs	r3, #4
 80055a8:	e006      	b.n	80055b8 <HAL_GPIO_Init+0x228>
 80055aa:	2303      	movs	r3, #3
 80055ac:	e004      	b.n	80055b8 <HAL_GPIO_Init+0x228>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e002      	b.n	80055b8 <HAL_GPIO_Init+0x228>
 80055b2:	2301      	movs	r3, #1
 80055b4:	e000      	b.n	80055b8 <HAL_GPIO_Init+0x228>
 80055b6:	2300      	movs	r3, #0
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	f002 0203 	and.w	r2, r2, #3
 80055be:	0092      	lsls	r2, r2, #2
 80055c0:	4093      	lsls	r3, r2
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055c8:	4935      	ldr	r1, [pc, #212]	; (80056a0 <HAL_GPIO_Init+0x310>)
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	089b      	lsrs	r3, r3, #2
 80055ce:	3302      	adds	r3, #2
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055d6:	4b3b      	ldr	r3, [pc, #236]	; (80056c4 <HAL_GPIO_Init+0x334>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	43db      	mvns	r3, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4013      	ands	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055fa:	4a32      	ldr	r2, [pc, #200]	; (80056c4 <HAL_GPIO_Init+0x334>)
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005600:	4b30      	ldr	r3, [pc, #192]	; (80056c4 <HAL_GPIO_Init+0x334>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	43db      	mvns	r3, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005624:	4a27      	ldr	r2, [pc, #156]	; (80056c4 <HAL_GPIO_Init+0x334>)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800562a:	4b26      	ldr	r3, [pc, #152]	; (80056c4 <HAL_GPIO_Init+0x334>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	43db      	mvns	r3, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	4013      	ands	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4313      	orrs	r3, r2
 800564c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800564e:	4a1d      	ldr	r2, [pc, #116]	; (80056c4 <HAL_GPIO_Init+0x334>)
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005654:	4b1b      	ldr	r3, [pc, #108]	; (80056c4 <HAL_GPIO_Init+0x334>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	43db      	mvns	r3, r3
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	4013      	ands	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d003      	beq.n	8005678 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005678:	4a12      	ldr	r2, [pc, #72]	; (80056c4 <HAL_GPIO_Init+0x334>)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	3301      	adds	r3, #1
 8005682:	61fb      	str	r3, [r7, #28]
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b0f      	cmp	r3, #15
 8005688:	f67f ae90 	bls.w	80053ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800568c:	bf00      	nop
 800568e:	bf00      	nop
 8005690:	3724      	adds	r7, #36	; 0x24
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40023800 	.word	0x40023800
 80056a0:	40013800 	.word	0x40013800
 80056a4:	40020000 	.word	0x40020000
 80056a8:	40020400 	.word	0x40020400
 80056ac:	40020800 	.word	0x40020800
 80056b0:	40020c00 	.word	0x40020c00
 80056b4:	40021000 	.word	0x40021000
 80056b8:	40021400 	.word	0x40021400
 80056bc:	40021800 	.word	0x40021800
 80056c0:	40021c00 	.word	0x40021c00
 80056c4:	40013c00 	.word	0x40013c00

080056c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80056da:	2300      	movs	r3, #0
 80056dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
 80056e2:	e0cd      	b.n	8005880 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056e4:	2201      	movs	r2, #1
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4013      	ands	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	f040 80bd 	bne.w	800587a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005700:	4a65      	ldr	r2, [pc, #404]	; (8005898 <HAL_GPIO_DeInit+0x1d0>)
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	089b      	lsrs	r3, r3, #2
 8005706:	3302      	adds	r3, #2
 8005708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800570c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f003 0303 	and.w	r3, r3, #3
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	220f      	movs	r2, #15
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	4013      	ands	r3, r2
 8005720:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a5d      	ldr	r2, [pc, #372]	; (800589c <HAL_GPIO_DeInit+0x1d4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d02b      	beq.n	8005782 <HAL_GPIO_DeInit+0xba>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a5c      	ldr	r2, [pc, #368]	; (80058a0 <HAL_GPIO_DeInit+0x1d8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d025      	beq.n	800577e <HAL_GPIO_DeInit+0xb6>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a5b      	ldr	r2, [pc, #364]	; (80058a4 <HAL_GPIO_DeInit+0x1dc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d01f      	beq.n	800577a <HAL_GPIO_DeInit+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a5a      	ldr	r2, [pc, #360]	; (80058a8 <HAL_GPIO_DeInit+0x1e0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d019      	beq.n	8005776 <HAL_GPIO_DeInit+0xae>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a59      	ldr	r2, [pc, #356]	; (80058ac <HAL_GPIO_DeInit+0x1e4>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d013      	beq.n	8005772 <HAL_GPIO_DeInit+0xaa>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a58      	ldr	r2, [pc, #352]	; (80058b0 <HAL_GPIO_DeInit+0x1e8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00d      	beq.n	800576e <HAL_GPIO_DeInit+0xa6>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a57      	ldr	r2, [pc, #348]	; (80058b4 <HAL_GPIO_DeInit+0x1ec>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d007      	beq.n	800576a <HAL_GPIO_DeInit+0xa2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a56      	ldr	r2, [pc, #344]	; (80058b8 <HAL_GPIO_DeInit+0x1f0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d101      	bne.n	8005766 <HAL_GPIO_DeInit+0x9e>
 8005762:	2307      	movs	r3, #7
 8005764:	e00e      	b.n	8005784 <HAL_GPIO_DeInit+0xbc>
 8005766:	2308      	movs	r3, #8
 8005768:	e00c      	b.n	8005784 <HAL_GPIO_DeInit+0xbc>
 800576a:	2306      	movs	r3, #6
 800576c:	e00a      	b.n	8005784 <HAL_GPIO_DeInit+0xbc>
 800576e:	2305      	movs	r3, #5
 8005770:	e008      	b.n	8005784 <HAL_GPIO_DeInit+0xbc>
 8005772:	2304      	movs	r3, #4
 8005774:	e006      	b.n	8005784 <HAL_GPIO_DeInit+0xbc>
 8005776:	2303      	movs	r3, #3
 8005778:	e004      	b.n	8005784 <HAL_GPIO_DeInit+0xbc>
 800577a:	2302      	movs	r3, #2
 800577c:	e002      	b.n	8005784 <HAL_GPIO_DeInit+0xbc>
 800577e:	2301      	movs	r3, #1
 8005780:	e000      	b.n	8005784 <HAL_GPIO_DeInit+0xbc>
 8005782:	2300      	movs	r3, #0
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	f002 0203 	and.w	r2, r2, #3
 800578a:	0092      	lsls	r2, r2, #2
 800578c:	4093      	lsls	r3, r2
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	429a      	cmp	r2, r3
 8005792:	d132      	bne.n	80057fa <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005794:	4b49      	ldr	r3, [pc, #292]	; (80058bc <HAL_GPIO_DeInit+0x1f4>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	43db      	mvns	r3, r3
 800579c:	4947      	ldr	r1, [pc, #284]	; (80058bc <HAL_GPIO_DeInit+0x1f4>)
 800579e:	4013      	ands	r3, r2
 80057a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80057a2:	4b46      	ldr	r3, [pc, #280]	; (80058bc <HAL_GPIO_DeInit+0x1f4>)
 80057a4:	685a      	ldr	r2, [r3, #4]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	43db      	mvns	r3, r3
 80057aa:	4944      	ldr	r1, [pc, #272]	; (80058bc <HAL_GPIO_DeInit+0x1f4>)
 80057ac:	4013      	ands	r3, r2
 80057ae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80057b0:	4b42      	ldr	r3, [pc, #264]	; (80058bc <HAL_GPIO_DeInit+0x1f4>)
 80057b2:	68da      	ldr	r2, [r3, #12]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	43db      	mvns	r3, r3
 80057b8:	4940      	ldr	r1, [pc, #256]	; (80058bc <HAL_GPIO_DeInit+0x1f4>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80057be:	4b3f      	ldr	r3, [pc, #252]	; (80058bc <HAL_GPIO_DeInit+0x1f4>)
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	43db      	mvns	r3, r3
 80057c6:	493d      	ldr	r1, [pc, #244]	; (80058bc <HAL_GPIO_DeInit+0x1f4>)
 80057c8:	4013      	ands	r3, r2
 80057ca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	220f      	movs	r2, #15
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80057dc:	4a2e      	ldr	r2, [pc, #184]	; (8005898 <HAL_GPIO_DeInit+0x1d0>)
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	089b      	lsrs	r3, r3, #2
 80057e2:	3302      	adds	r3, #2
 80057e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	43da      	mvns	r2, r3
 80057ec:	482a      	ldr	r0, [pc, #168]	; (8005898 <HAL_GPIO_DeInit+0x1d0>)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	089b      	lsrs	r3, r3, #2
 80057f2:	400a      	ands	r2, r1
 80057f4:	3302      	adds	r3, #2
 80057f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	2103      	movs	r1, #3
 8005804:	fa01 f303 	lsl.w	r3, r1, r3
 8005808:	43db      	mvns	r3, r3
 800580a:	401a      	ands	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	08da      	lsrs	r2, r3, #3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	3208      	adds	r2, #8
 8005818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	220f      	movs	r2, #15
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	43db      	mvns	r3, r3
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	08d2      	lsrs	r2, r2, #3
 8005830:	4019      	ands	r1, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3208      	adds	r2, #8
 8005836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	2103      	movs	r1, #3
 8005844:	fa01 f303 	lsl.w	r3, r1, r3
 8005848:	43db      	mvns	r3, r3
 800584a:	401a      	ands	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	2101      	movs	r1, #1
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	fa01 f303 	lsl.w	r3, r1, r3
 800585c:	43db      	mvns	r3, r3
 800585e:	401a      	ands	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	2103      	movs	r1, #3
 800586e:	fa01 f303 	lsl.w	r3, r1, r3
 8005872:	43db      	mvns	r3, r3
 8005874:	401a      	ands	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	3301      	adds	r3, #1
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b0f      	cmp	r3, #15
 8005884:	f67f af2e 	bls.w	80056e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005888:	bf00      	nop
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40013800 	.word	0x40013800
 800589c:	40020000 	.word	0x40020000
 80058a0:	40020400 	.word	0x40020400
 80058a4:	40020800 	.word	0x40020800
 80058a8:	40020c00 	.word	0x40020c00
 80058ac:	40021000 	.word	0x40021000
 80058b0:	40021400 	.word	0x40021400
 80058b4:	40021800 	.word	0x40021800
 80058b8:	40021c00 	.word	0x40021c00
 80058bc:	40013c00 	.word	0x40013c00

080058c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	807b      	strh	r3, [r7, #2]
 80058cc:	4613      	mov	r3, r2
 80058ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80058d0:	787b      	ldrb	r3, [r7, #1]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058d6:	887a      	ldrh	r2, [r7, #2]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80058dc:	e003      	b.n	80058e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80058de:	887b      	ldrh	r3, [r7, #2]
 80058e0:	041a      	lsls	r2, r3, #16
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	619a      	str	r2, [r3, #24]
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
	...

080058f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	4603      	mov	r3, r0
 80058fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80058fe:	4b08      	ldr	r3, [pc, #32]	; (8005920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	4013      	ands	r3, r2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d006      	beq.n	8005918 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800590a:	4a05      	ldr	r2, [pc, #20]	; (8005920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800590c:	88fb      	ldrh	r3, [r7, #6]
 800590e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005910:	88fb      	ldrh	r3, [r7, #6]
 8005912:	4618      	mov	r0, r3
 8005914:	f7fc f9dc 	bl	8001cd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40013c00 	.word	0x40013c00

08005924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e12b      	b.n	8005b8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fd fb0a 	bl	8002f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2224      	movs	r2, #36	; 0x24
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0201 	bic.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005976:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005986:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005988:	f003 fbba 	bl	8009100 <HAL_RCC_GetPCLK1Freq>
 800598c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	4a81      	ldr	r2, [pc, #516]	; (8005b98 <HAL_I2C_Init+0x274>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d807      	bhi.n	80059a8 <HAL_I2C_Init+0x84>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4a80      	ldr	r2, [pc, #512]	; (8005b9c <HAL_I2C_Init+0x278>)
 800599c:	4293      	cmp	r3, r2
 800599e:	bf94      	ite	ls
 80059a0:	2301      	movls	r3, #1
 80059a2:	2300      	movhi	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	e006      	b.n	80059b6 <HAL_I2C_Init+0x92>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4a7d      	ldr	r2, [pc, #500]	; (8005ba0 <HAL_I2C_Init+0x27c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	bf94      	ite	ls
 80059b0:	2301      	movls	r3, #1
 80059b2:	2300      	movhi	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e0e7      	b.n	8005b8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4a78      	ldr	r2, [pc, #480]	; (8005ba4 <HAL_I2C_Init+0x280>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	0c9b      	lsrs	r3, r3, #18
 80059c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	4a6a      	ldr	r2, [pc, #424]	; (8005b98 <HAL_I2C_Init+0x274>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d802      	bhi.n	80059f8 <HAL_I2C_Init+0xd4>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	3301      	adds	r3, #1
 80059f6:	e009      	b.n	8005a0c <HAL_I2C_Init+0xe8>
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059fe:	fb02 f303 	mul.w	r3, r2, r3
 8005a02:	4a69      	ldr	r2, [pc, #420]	; (8005ba8 <HAL_I2C_Init+0x284>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	099b      	lsrs	r3, r3, #6
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	495c      	ldr	r1, [pc, #368]	; (8005b98 <HAL_I2C_Init+0x274>)
 8005a28:	428b      	cmp	r3, r1
 8005a2a:	d819      	bhi.n	8005a60 <HAL_I2C_Init+0x13c>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	1e59      	subs	r1, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a3a:	1c59      	adds	r1, r3, #1
 8005a3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a40:	400b      	ands	r3, r1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <HAL_I2C_Init+0x138>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1e59      	subs	r1, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a54:	3301      	adds	r3, #1
 8005a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5a:	e051      	b.n	8005b00 <HAL_I2C_Init+0x1dc>
 8005a5c:	2304      	movs	r3, #4
 8005a5e:	e04f      	b.n	8005b00 <HAL_I2C_Init+0x1dc>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d111      	bne.n	8005a8c <HAL_I2C_Init+0x168>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	1e58      	subs	r0, r3, #1
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6859      	ldr	r1, [r3, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	005b      	lsls	r3, r3, #1
 8005a74:	440b      	add	r3, r1
 8005a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bf0c      	ite	eq
 8005a84:	2301      	moveq	r3, #1
 8005a86:	2300      	movne	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	e012      	b.n	8005ab2 <HAL_I2C_Init+0x18e>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	1e58      	subs	r0, r3, #1
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6859      	ldr	r1, [r3, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	0099      	lsls	r1, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	bf0c      	ite	eq
 8005aac:	2301      	moveq	r3, #1
 8005aae:	2300      	movne	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_I2C_Init+0x196>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e022      	b.n	8005b00 <HAL_I2C_Init+0x1dc>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10e      	bne.n	8005ae0 <HAL_I2C_Init+0x1bc>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1e58      	subs	r0, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6859      	ldr	r1, [r3, #4]
 8005aca:	460b      	mov	r3, r1
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	440b      	add	r3, r1
 8005ad0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ade:	e00f      	b.n	8005b00 <HAL_I2C_Init+0x1dc>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	1e58      	subs	r0, r3, #1
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6859      	ldr	r1, [r3, #4]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	440b      	add	r3, r1
 8005aee:	0099      	lsls	r1, r3, #2
 8005af0:	440b      	add	r3, r1
 8005af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005af6:	3301      	adds	r3, #1
 8005af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005afc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	6809      	ldr	r1, [r1, #0]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	69da      	ldr	r2, [r3, #28]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	431a      	orrs	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6911      	ldr	r1, [r2, #16]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68d2      	ldr	r2, [r2, #12]
 8005b3a:	4311      	orrs	r1, r2
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6812      	ldr	r2, [r2, #0]
 8005b40:	430b      	orrs	r3, r1
 8005b42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695a      	ldr	r2, [r3, #20]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	000186a0 	.word	0x000186a0
 8005b9c:	001e847f 	.word	0x001e847f
 8005ba0:	003d08ff 	.word	0x003d08ff
 8005ba4:	431bde83 	.word	0x431bde83
 8005ba8:	10624dd3 	.word	0x10624dd3

08005bac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e021      	b.n	8005c02 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2224      	movs	r2, #36	; 0x24
 8005bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0201 	bic.w	r2, r2, #1
 8005bd4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7fd fa46 	bl	8003068 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af02      	add	r7, sp, #8
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	4608      	mov	r0, r1
 8005c16:	4611      	mov	r1, r2
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	817b      	strh	r3, [r7, #10]
 8005c1e:	460b      	mov	r3, r1
 8005c20:	813b      	strh	r3, [r7, #8]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c26:	f7fd fe3f 	bl	80038a8 <HAL_GetTick>
 8005c2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	f040 80d9 	bne.w	8005dec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	2319      	movs	r3, #25
 8005c40:	2201      	movs	r2, #1
 8005c42:	496d      	ldr	r1, [pc, #436]	; (8005df8 <HAL_I2C_Mem_Write+0x1ec>)
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f002 fbc1 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d001      	beq.n	8005c54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c50:	2302      	movs	r3, #2
 8005c52:	e0cc      	b.n	8005dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d101      	bne.n	8005c62 <HAL_I2C_Mem_Write+0x56>
 8005c5e:	2302      	movs	r3, #2
 8005c60:	e0c5      	b.n	8005dee <HAL_I2C_Mem_Write+0x1e2>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d007      	beq.n	8005c88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2221      	movs	r2, #33	; 0x21
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2240      	movs	r2, #64	; 0x40
 8005ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a3a      	ldr	r2, [r7, #32]
 8005cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005cb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4a4d      	ldr	r2, [pc, #308]	; (8005dfc <HAL_I2C_Mem_Write+0x1f0>)
 8005cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cca:	88f8      	ldrh	r0, [r7, #6]
 8005ccc:	893a      	ldrh	r2, [r7, #8]
 8005cce:	8979      	ldrh	r1, [r7, #10]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	9301      	str	r3, [sp, #4]
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	4603      	mov	r3, r0
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f002 f83e 	bl	8007d5c <I2C_RequestMemoryWrite>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d052      	beq.n	8005d8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e081      	b.n	8005dee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f002 fc42 	bl	8008578 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00d      	beq.n	8005d16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d107      	bne.n	8005d12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e06b      	b.n	8005dee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695b      	ldr	r3, [r3, #20]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d11b      	bne.n	8005d8c <HAL_I2C_Mem_Write+0x180>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d017      	beq.n	8005d8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d60:	781a      	ldrb	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	b29a      	uxth	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1aa      	bne.n	8005cea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f002 fc2e 	bl	80085fa <I2C_WaitOnBTFFlagUntilTimeout>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00d      	beq.n	8005dc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d107      	bne.n	8005dbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e016      	b.n	8005dee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	e000      	b.n	8005dee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005dec:	2302      	movs	r3, #2
  }
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	00100002 	.word	0x00100002
 8005dfc:	ffff0000 	.word	0xffff0000

08005e00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08c      	sub	sp, #48	; 0x30
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	4608      	mov	r0, r1
 8005e0a:	4611      	mov	r1, r2
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	4603      	mov	r3, r0
 8005e10:	817b      	strh	r3, [r7, #10]
 8005e12:	460b      	mov	r3, r1
 8005e14:	813b      	strh	r3, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e1a:	f7fd fd45 	bl	80038a8 <HAL_GetTick>
 8005e1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b20      	cmp	r3, #32
 8005e2a:	f040 8208 	bne.w	800623e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	2319      	movs	r3, #25
 8005e34:	2201      	movs	r2, #1
 8005e36:	497b      	ldr	r1, [pc, #492]	; (8006024 <HAL_I2C_Mem_Read+0x224>)
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f002 fac7 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e44:	2302      	movs	r3, #2
 8005e46:	e1fb      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_I2C_Mem_Read+0x56>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e1f4      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d007      	beq.n	8005e7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2222      	movs	r2, #34	; 0x22
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2240      	movs	r2, #64	; 0x40
 8005e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4a5b      	ldr	r2, [pc, #364]	; (8006028 <HAL_I2C_Mem_Read+0x228>)
 8005ebc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ebe:	88f8      	ldrh	r0, [r7, #6]
 8005ec0:	893a      	ldrh	r2, [r7, #8]
 8005ec2:	8979      	ldrh	r1, [r7, #10]
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	4603      	mov	r3, r0
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f001 ffda 	bl	8007e88 <I2C_RequestMemoryRead>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e1b0      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d113      	bne.n	8005f0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	623b      	str	r3, [r7, #32]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	623b      	str	r3, [r7, #32]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	623b      	str	r3, [r7, #32]
 8005efa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	e184      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d11b      	bne.n	8005f4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f26:	2300      	movs	r3, #0
 8005f28:	61fb      	str	r3, [r7, #28]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	61fb      	str	r3, [r7, #28]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	61fb      	str	r3, [r7, #28]
 8005f3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	e164      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d11b      	bne.n	8005f8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f76:	2300      	movs	r3, #0
 8005f78:	61bb      	str	r3, [r7, #24]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	e144      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fa4:	e138      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	f200 80f1 	bhi.w	8006192 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d123      	bne.n	8006000 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f002 fb8f 	bl	80086e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e139      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ffe:	e10b      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006004:	2b02      	cmp	r3, #2
 8006006:	d14e      	bne.n	80060a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	2200      	movs	r2, #0
 8006010:	4906      	ldr	r1, [pc, #24]	; (800602c <HAL_I2C_Mem_Read+0x22c>)
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f002 f9da 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d008      	beq.n	8006030 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e10e      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
 8006022:	bf00      	nop
 8006024:	00100002 	.word	0x00100002
 8006028:	ffff0000 	.word	0xffff0000
 800602c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800603e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	691a      	ldr	r2, [r3, #16]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607c:	b2d2      	uxtb	r2, r2
 800607e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609a:	b29b      	uxth	r3, r3
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060a4:	e0b8      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	2200      	movs	r2, #0
 80060ae:	4966      	ldr	r1, [pc, #408]	; (8006248 <HAL_I2C_Mem_Read+0x448>)
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f002 f98b 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e0bf      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006108:	2200      	movs	r2, #0
 800610a:	494f      	ldr	r1, [pc, #316]	; (8006248 <HAL_I2C_Mem_Read+0x448>)
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f002 f95d 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e091      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800612a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617a:	3b01      	subs	r3, #1
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006190:	e042      	b.n	8006218 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006194:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f002 faa2 	bl	80086e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e04c      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d118      	bne.n	8006218 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006202:	3b01      	subs	r3, #1
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620e:	b29b      	uxth	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800621c:	2b00      	cmp	r3, #0
 800621e:	f47f aec2 	bne.w	8005fa6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2220      	movs	r2, #32
 8006226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	e000      	b.n	8006240 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800623e:	2302      	movs	r3, #2
  }
}
 8006240:	4618      	mov	r0, r3
 8006242:	3728      	adds	r7, #40	; 0x28
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	00010004 	.word	0x00010004

0800624c <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08c      	sub	sp, #48	; 0x30
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	4608      	mov	r0, r1
 8006256:	4611      	mov	r1, r2
 8006258:	461a      	mov	r2, r3
 800625a:	4603      	mov	r3, r0
 800625c:	817b      	strh	r3, [r7, #10]
 800625e:	460b      	mov	r3, r1
 8006260:	813b      	strh	r3, [r7, #8]
 8006262:	4613      	mov	r3, r2
 8006264:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006266:	f7fd fb1f 	bl	80038a8 <HAL_GetTick>
 800626a:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b20      	cmp	r3, #32
 800627a:	f040 8176 	bne.w	800656a <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800627e:	4b95      	ldr	r3, [pc, #596]	; (80064d4 <HAL_I2C_Mem_Read_DMA+0x288>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	08db      	lsrs	r3, r3, #3
 8006284:	4a94      	ldr	r2, [pc, #592]	; (80064d8 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	0a1a      	lsrs	r2, r3, #8
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009a      	lsls	r2, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	3b01      	subs	r3, #1
 800629c:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d116      	bne.n	80062d2 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	f043 0220 	orr.w	r2, r3, #32
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e14c      	b.n	800656c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d0db      	beq.n	8006298 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_I2C_Mem_Read_DMA+0xa2>
 80062ea:	2302      	movs	r3, #2
 80062ec:	e13e      	b.n	800656c <HAL_I2C_Mem_Read_DMA+0x320>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b01      	cmp	r3, #1
 8006302:	d007      	beq.n	8006314 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006322:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2222      	movs	r2, #34	; 0x22
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2240      	movs	r2, #64	; 0x40
 8006330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800633e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006344:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4a62      	ldr	r2, [pc, #392]	; (80064dc <HAL_I2C_Mem_Read_DMA+0x290>)
 8006354:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006356:	897a      	ldrh	r2, [r7, #10]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800635c:	893a      	ldrh	r2, [r7, #8]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006362:	88fa      	ldrh	r2, [r7, #6]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006372:	2b00      	cmp	r3, #0
 8006374:	f000 80cc 	beq.w	8006510 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	2b00      	cmp	r3, #0
 800637e:	d02d      	beq.n	80063dc <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	4a56      	ldr	r2, [pc, #344]	; (80064e0 <HAL_I2C_Mem_Read_DMA+0x294>)
 8006386:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638c:	4a55      	ldr	r2, [pc, #340]	; (80064e4 <HAL_I2C_Mem_Read_DMA+0x298>)
 800638e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	2200      	movs	r2, #0
 8006396:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639c:	2200      	movs	r2, #0
 800639e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	2200      	movs	r2, #0
 80063a6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	2200      	movs	r2, #0
 80063ae:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3310      	adds	r3, #16
 80063ba:	4619      	mov	r1, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	461a      	mov	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c6:	f7fe fc75 	bl	8004cb4 <HAL_DMA_Start_IT>
 80063ca:	4603      	mov	r3, r0
 80063cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80063d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f040 8087 	bne.w	80064e8 <HAL_I2C_Mem_Read_DMA+0x29c>
 80063da:	e013      	b.n	8006404 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e0b3      	b.n	800656c <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006404:	88f8      	ldrh	r0, [r7, #6]
 8006406:	893a      	ldrh	r2, [r7, #8]
 8006408:	8979      	ldrh	r1, [r7, #10]
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	2323      	movs	r3, #35	; 0x23
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	4603      	mov	r3, r0
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f001 fd37 	bl	8007e88 <I2C_RequestMemoryRead>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d023      	beq.n	8006468 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	4618      	mov	r0, r3
 8006426:	f7fe fd0d 	bl	8004e44 <HAL_DMA_Abort_IT>
 800642a:	4603      	mov	r3, r0
 800642c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	2200      	movs	r2, #0
 8006436:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006446:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 0201 	bic.w	r2, r2, #1
 8006462:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e081      	b.n	800656c <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646c:	2b01      	cmp	r3, #1
 800646e:	d108      	bne.n	8006482 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	e007      	b.n	8006492 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006490:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006492:	2300      	movs	r3, #0
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695b      	ldr	r3, [r3, #20]
 800649c:	61bb      	str	r3, [r7, #24]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	61bb      	str	r3, [r7, #24]
 80064a6:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064be:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064ce:	605a      	str	r2, [r3, #4]
 80064d0:	e049      	b.n	8006566 <HAL_I2C_Mem_Read_DMA+0x31a>
 80064d2:	bf00      	nop
 80064d4:	20000000 	.word	0x20000000
 80064d8:	14f8b589 	.word	0x14f8b589
 80064dc:	ffff0000 	.word	0xffff0000
 80064e0:	08008059 	.word	0x08008059
 80064e4:	08008203 	.word	0x08008203
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	f043 0210 	orr.w	r2, r3, #16
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e02d      	b.n	800656c <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8006510:	88f8      	ldrh	r0, [r7, #6]
 8006512:	893a      	ldrh	r2, [r7, #8]
 8006514:	8979      	ldrh	r1, [r7, #10]
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	2323      	movs	r3, #35	; 0x23
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	4603      	mov	r3, r0
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f001 fcb1 	bl	8007e88 <I2C_RequestMemoryRead>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e01d      	b.n	800656c <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	617b      	str	r3, [r7, #20]
 8006544:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006554:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	e000      	b.n	800656c <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800656a:	2302      	movs	r3, #2
  }
}
 800656c:	4618      	mov	r0, r3
 800656e:	3728      	adds	r7, #40	; 0x28
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b08a      	sub	sp, #40	; 0x28
 8006578:	af02      	add	r7, sp, #8
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	607a      	str	r2, [r7, #4]
 800657e:	603b      	str	r3, [r7, #0]
 8006580:	460b      	mov	r3, r1
 8006582:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006584:	f7fd f990 	bl	80038a8 <HAL_GetTick>
 8006588:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b20      	cmp	r3, #32
 8006598:	f040 8111 	bne.w	80067be <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	2319      	movs	r3, #25
 80065a2:	2201      	movs	r2, #1
 80065a4:	4988      	ldr	r1, [pc, #544]	; (80067c8 <HAL_I2C_IsDeviceReady+0x254>)
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f001 ff10 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80065b2:	2302      	movs	r3, #2
 80065b4:	e104      	b.n	80067c0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_I2C_IsDeviceReady+0x50>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e0fd      	b.n	80067c0 <HAL_I2C_IsDeviceReady+0x24c>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d007      	beq.n	80065ea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f042 0201 	orr.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2224      	movs	r2, #36	; 0x24
 80065fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4a70      	ldr	r2, [pc, #448]	; (80067cc <HAL_I2C_IsDeviceReady+0x258>)
 800660c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800661c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2200      	movs	r2, #0
 8006626:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f001 fece 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00d      	beq.n	8006652 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006644:	d103      	bne.n	800664e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800664c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e0b6      	b.n	80067c0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006652:	897b      	ldrh	r3, [r7, #10]
 8006654:	b2db      	uxtb	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006660:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006662:	f7fd f921 	bl	80038a8 <HAL_GetTick>
 8006666:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	f003 0302 	and.w	r3, r3, #2
 8006672:	2b02      	cmp	r3, #2
 8006674:	bf0c      	ite	eq
 8006676:	2301      	moveq	r3, #1
 8006678:	2300      	movne	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668c:	bf0c      	ite	eq
 800668e:	2301      	moveq	r3, #1
 8006690:	2300      	movne	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006696:	e025      	b.n	80066e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006698:	f7fd f906 	bl	80038a8 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d302      	bcc.n	80066ae <HAL_I2C_IsDeviceReady+0x13a>
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d103      	bne.n	80066b6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	22a0      	movs	r2, #160	; 0xa0
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	bf0c      	ite	eq
 80066c4:	2301      	moveq	r3, #1
 80066c6:	2300      	movne	r3, #0
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066da:	bf0c      	ite	eq
 80066dc:	2301      	moveq	r3, #1
 80066de:	2300      	movne	r3, #0
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	2ba0      	cmp	r3, #160	; 0xa0
 80066ee:	d005      	beq.n	80066fc <HAL_I2C_IsDeviceReady+0x188>
 80066f0:	7dfb      	ldrb	r3, [r7, #23]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d102      	bne.n	80066fc <HAL_I2C_IsDeviceReady+0x188>
 80066f6:	7dbb      	ldrb	r3, [r7, #22]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0cd      	beq.n	8006698 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b02      	cmp	r3, #2
 8006710:	d129      	bne.n	8006766 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006720:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006722:	2300      	movs	r3, #0
 8006724:	613b      	str	r3, [r7, #16]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	613b      	str	r3, [r7, #16]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	613b      	str	r3, [r7, #16]
 8006736:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	2319      	movs	r3, #25
 800673e:	2201      	movs	r2, #1
 8006740:	4921      	ldr	r1, [pc, #132]	; (80067c8 <HAL_I2C_IsDeviceReady+0x254>)
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f001 fe42 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e036      	b.n	80067c0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	e02c      	b.n	80067c0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006774:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800677e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	9300      	str	r3, [sp, #0]
 8006784:	2319      	movs	r3, #25
 8006786:	2201      	movs	r2, #1
 8006788:	490f      	ldr	r1, [pc, #60]	; (80067c8 <HAL_I2C_IsDeviceReady+0x254>)
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f001 fe1e 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e012      	b.n	80067c0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	3301      	adds	r3, #1
 800679e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	f4ff af32 	bcc.w	800660e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e000      	b.n	80067c0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80067be:	2302      	movs	r3, #2
  }
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3720      	adds	r7, #32
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	00100002 	.word	0x00100002
 80067cc:	ffff0000 	.word	0xffff0000

080067d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067f0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	2b10      	cmp	r3, #16
 80067fe:	d003      	beq.n	8006808 <HAL_I2C_EV_IRQHandler+0x38>
 8006800:	7bfb      	ldrb	r3, [r7, #15]
 8006802:	2b40      	cmp	r3, #64	; 0x40
 8006804:	f040 80c1 	bne.w	800698a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10d      	bne.n	800683e <HAL_I2C_EV_IRQHandler+0x6e>
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006828:	d003      	beq.n	8006832 <HAL_I2C_EV_IRQHandler+0x62>
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006830:	d101      	bne.n	8006836 <HAL_I2C_EV_IRQHandler+0x66>
 8006832:	2301      	movs	r3, #1
 8006834:	e000      	b.n	8006838 <HAL_I2C_EV_IRQHandler+0x68>
 8006836:	2300      	movs	r3, #0
 8006838:	2b01      	cmp	r3, #1
 800683a:	f000 8132 	beq.w	8006aa2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00c      	beq.n	8006862 <HAL_I2C_EV_IRQHandler+0x92>
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	0a5b      	lsrs	r3, r3, #9
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d006      	beq.n	8006862 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f001 ffc8 	bl	80087ea <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fcd2 	bl	8007204 <I2C_Master_SB>
 8006860:	e092      	b.n	8006988 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	08db      	lsrs	r3, r3, #3
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d009      	beq.n	8006882 <HAL_I2C_EV_IRQHandler+0xb2>
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	0a5b      	lsrs	r3, r3, #9
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fd48 	bl	8007310 <I2C_Master_ADD10>
 8006880:	e082      	b.n	8006988 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	085b      	lsrs	r3, r3, #1
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d009      	beq.n	80068a2 <HAL_I2C_EV_IRQHandler+0xd2>
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	0a5b      	lsrs	r3, r3, #9
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fd62 	bl	8007364 <I2C_Master_ADDR>
 80068a0:	e072      	b.n	8006988 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	089b      	lsrs	r3, r3, #2
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d03b      	beq.n	8006926 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068bc:	f000 80f3 	beq.w	8006aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	09db      	lsrs	r3, r3, #7
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00f      	beq.n	80068ec <HAL_I2C_EV_IRQHandler+0x11c>
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	0a9b      	lsrs	r3, r3, #10
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d009      	beq.n	80068ec <HAL_I2C_EV_IRQHandler+0x11c>
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	089b      	lsrs	r3, r3, #2
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d103      	bne.n	80068ec <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f942 	bl	8006b6e <I2C_MasterTransmit_TXE>
 80068ea:	e04d      	b.n	8006988 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	089b      	lsrs	r3, r3, #2
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 80d6 	beq.w	8006aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	0a5b      	lsrs	r3, r3, #9
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 80cf 	beq.w	8006aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006908:	7bbb      	ldrb	r3, [r7, #14]
 800690a:	2b21      	cmp	r3, #33	; 0x21
 800690c:	d103      	bne.n	8006916 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f9c9 	bl	8006ca6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006914:	e0c7      	b.n	8006aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	2b40      	cmp	r3, #64	; 0x40
 800691a:	f040 80c4 	bne.w	8006aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fa37 	bl	8006d92 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006924:	e0bf      	b.n	8006aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006934:	f000 80b7 	beq.w	8006aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	099b      	lsrs	r3, r3, #6
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00f      	beq.n	8006964 <HAL_I2C_EV_IRQHandler+0x194>
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	0a9b      	lsrs	r3, r3, #10
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	2b00      	cmp	r3, #0
 800694e:	d009      	beq.n	8006964 <HAL_I2C_EV_IRQHandler+0x194>
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	089b      	lsrs	r3, r3, #2
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d103      	bne.n	8006964 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 faac 	bl	8006eba <I2C_MasterReceive_RXNE>
 8006962:	e011      	b.n	8006988 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	089b      	lsrs	r3, r3, #2
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 809a 	beq.w	8006aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	0a5b      	lsrs	r3, r3, #9
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8093 	beq.w	8006aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fb55 	bl	8007030 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006986:	e08e      	b.n	8006aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006988:	e08d      	b.n	8006aa6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	e007      	b.n	80069ac <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	085b      	lsrs	r3, r3, #1
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d012      	beq.n	80069de <HAL_I2C_EV_IRQHandler+0x20e>
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	0a5b      	lsrs	r3, r3, #9
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00c      	beq.n	80069de <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d003      	beq.n	80069d4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80069d4:	69b9      	ldr	r1, [r7, #24]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 ff13 	bl	8007802 <I2C_Slave_ADDR>
 80069dc:	e066      	b.n	8006aac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	091b      	lsrs	r3, r3, #4
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d009      	beq.n	80069fe <HAL_I2C_EV_IRQHandler+0x22e>
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	0a5b      	lsrs	r3, r3, #9
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 ff4e 	bl	8007898 <I2C_Slave_STOPF>
 80069fc:	e056      	b.n	8006aac <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80069fe:	7bbb      	ldrb	r3, [r7, #14]
 8006a00:	2b21      	cmp	r3, #33	; 0x21
 8006a02:	d002      	beq.n	8006a0a <HAL_I2C_EV_IRQHandler+0x23a>
 8006a04:	7bbb      	ldrb	r3, [r7, #14]
 8006a06:	2b29      	cmp	r3, #41	; 0x29
 8006a08:	d125      	bne.n	8006a56 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	09db      	lsrs	r3, r3, #7
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00f      	beq.n	8006a36 <HAL_I2C_EV_IRQHandler+0x266>
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	0a9b      	lsrs	r3, r3, #10
 8006a1a:	f003 0301 	and.w	r3, r3, #1
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d009      	beq.n	8006a36 <HAL_I2C_EV_IRQHandler+0x266>
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	089b      	lsrs	r3, r3, #2
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d103      	bne.n	8006a36 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fe29 	bl	8007686 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a34:	e039      	b.n	8006aaa <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	089b      	lsrs	r3, r3, #2
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d033      	beq.n	8006aaa <HAL_I2C_EV_IRQHandler+0x2da>
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	0a5b      	lsrs	r3, r3, #9
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d02d      	beq.n	8006aaa <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fe56 	bl	8007700 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a54:	e029      	b.n	8006aaa <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	099b      	lsrs	r3, r3, #6
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00f      	beq.n	8006a82 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	0a9b      	lsrs	r3, r3, #10
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d009      	beq.n	8006a82 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	089b      	lsrs	r3, r3, #2
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d103      	bne.n	8006a82 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fe61 	bl	8007742 <I2C_SlaveReceive_RXNE>
 8006a80:	e014      	b.n	8006aac <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	089b      	lsrs	r3, r3, #2
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00e      	beq.n	8006aac <HAL_I2C_EV_IRQHandler+0x2dc>
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	0a5b      	lsrs	r3, r3, #9
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d008      	beq.n	8006aac <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 fe8f 	bl	80077be <I2C_SlaveReceive_BTF>
 8006aa0:	e004      	b.n	8006aac <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006aa2:	bf00      	nop
 8006aa4:	e002      	b.n	8006aac <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aa6:	bf00      	nop
 8006aa8:	e000      	b.n	8006aac <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006aaa:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006aac:	3720      	adds	r7, #32
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b083      	sub	sp, #12
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006aba:	bf00      	nop
 8006abc:	370c      	adds	r7, #12
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b083      	sub	sp, #12
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006ae2:	bf00      	nop
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70fb      	strb	r3, [r7, #3]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006b12:	bf00      	nop
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr

08006b1e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b1e:	b480      	push	{r7}
 8006b20:	b083      	sub	sp, #12
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006b26:	bf00      	nop
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b083      	sub	sp, #12
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr

08006b5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b5a:	b480      	push	{r7}
 8006b5c:	b083      	sub	sp, #12
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006b62:	bf00      	nop
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b84:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d150      	bne.n	8006c36 <I2C_MasterTransmit_TXE+0xc8>
 8006b94:	7bfb      	ldrb	r3, [r7, #15]
 8006b96:	2b21      	cmp	r3, #33	; 0x21
 8006b98:	d14d      	bne.n	8006c36 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2b08      	cmp	r3, #8
 8006b9e:	d01d      	beq.n	8006bdc <I2C_MasterTransmit_TXE+0x6e>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b20      	cmp	r3, #32
 8006ba4:	d01a      	beq.n	8006bdc <I2C_MasterTransmit_TXE+0x6e>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bac:	d016      	beq.n	8006bdc <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bbc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2211      	movs	r2, #17
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff ff6c 	bl	8006ab2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006bda:	e060      	b.n	8006c9e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bea:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bfa:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2220      	movs	r2, #32
 8006c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b40      	cmp	r3, #64	; 0x40
 8006c14:	d107      	bne.n	8006c26 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff ff87 	bl	8006b32 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c24:	e03b      	b.n	8006c9e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff ff3f 	bl	8006ab2 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c34:	e033      	b.n	8006c9e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	2b21      	cmp	r3, #33	; 0x21
 8006c3a:	d005      	beq.n	8006c48 <I2C_MasterTransmit_TXE+0xda>
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	2b40      	cmp	r3, #64	; 0x40
 8006c40:	d12d      	bne.n	8006c9e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	2b22      	cmp	r3, #34	; 0x22
 8006c46:	d12a      	bne.n	8006c9e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d108      	bne.n	8006c64 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c60:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006c62:	e01c      	b.n	8006c9e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b40      	cmp	r3, #64	; 0x40
 8006c6e:	d103      	bne.n	8006c78 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f88e 	bl	8006d92 <I2C_MemoryTransmit_TXE_BTF>
}
 8006c76:	e012      	b.n	8006c9e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	781a      	ldrb	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006c9c:	e7ff      	b.n	8006c9e <I2C_MasterTransmit_TXE+0x130>
 8006c9e:	bf00      	nop
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b084      	sub	sp, #16
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b21      	cmp	r3, #33	; 0x21
 8006cbe:	d164      	bne.n	8006d8a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d012      	beq.n	8006cf0 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	781a      	ldrb	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006cee:	e04c      	b.n	8006d8a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b08      	cmp	r3, #8
 8006cf4:	d01d      	beq.n	8006d32 <I2C_MasterTransmit_BTF+0x8c>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2b20      	cmp	r3, #32
 8006cfa:	d01a      	beq.n	8006d32 <I2C_MasterTransmit_BTF+0x8c>
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d02:	d016      	beq.n	8006d32 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685a      	ldr	r2, [r3, #4]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d12:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2211      	movs	r2, #17
 8006d18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff fec1 	bl	8006ab2 <HAL_I2C_MasterTxCpltCallback>
}
 8006d30:	e02b      	b.n	8006d8a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d40:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d50:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b40      	cmp	r3, #64	; 0x40
 8006d6a:	d107      	bne.n	8006d7c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f7ff fedc 	bl	8006b32 <HAL_I2C_MemTxCpltCallback>
}
 8006d7a:	e006      	b.n	8006d8a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff fe94 	bl	8006ab2 <HAL_I2C_MasterTxCpltCallback>
}
 8006d8a:	bf00      	nop
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b084      	sub	sp, #16
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d11d      	bne.n	8006de6 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d10b      	bne.n	8006dca <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dc2:	1c9a      	adds	r2, r3, #2
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006dc8:	e073      	b.n	8006eb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	121b      	asrs	r3, r3, #8
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006de4:	e065      	b.n	8006eb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d10b      	bne.n	8006e06 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e04:	e055      	b.n	8006eb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d151      	bne.n	8006eb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	2b22      	cmp	r3, #34	; 0x22
 8006e12:	d10d      	bne.n	8006e30 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e22:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e2e:	e040      	b.n	8006eb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d015      	beq.n	8006e66 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	2b21      	cmp	r3, #33	; 0x21
 8006e3e:	d112      	bne.n	8006e66 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e44:	781a      	ldrb	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006e64:	e025      	b.n	8006eb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d120      	bne.n	8006eb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b21      	cmp	r3, #33	; 0x21
 8006e74:	d11d      	bne.n	8006eb2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e84:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e94:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff fe40 	bl	8006b32 <HAL_I2C_MemTxCpltCallback>
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b22      	cmp	r3, #34	; 0x22
 8006ecc:	f040 80ac 	bne.w	8007028 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d921      	bls.n	8006f22 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	691a      	ldr	r2, [r3, #16]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	b2d2      	uxtb	r2, r2
 8006eea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	f040 808c 	bne.w	8007028 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f1e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006f20:	e082      	b.n	8007028 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d075      	beq.n	8007016 <I2C_MasterReceive_RXNE+0x15c>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d002      	beq.n	8006f36 <I2C_MasterReceive_RXNE+0x7c>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d16f      	bne.n	8007016 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f001 fba0 	bl	800867c <I2C_WaitOnSTOPRequestThroughIT>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d142      	bne.n	8006fc8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f50:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f60:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	b2d2      	uxtb	r2, r2
 8006f6e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b40      	cmp	r3, #64	; 0x40
 8006f9a:	d10a      	bne.n	8006fb2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fa fb90 	bl	80016d0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006fb0:	e03a      	b.n	8007028 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2212      	movs	r2, #18
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff fd80 	bl	8006ac6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006fc6:	e02f      	b.n	8007028 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fd6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691a      	ldr	r2, [r3, #16]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	1c5a      	adds	r2, r3, #1
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	b29a      	uxth	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2220      	movs	r2, #32
 8007002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7ff fd99 	bl	8006b46 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007014:	e008      	b.n	8007028 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007024:	605a      	str	r2, [r3, #4]
}
 8007026:	e7ff      	b.n	8007028 <I2C_MasterReceive_RXNE+0x16e>
 8007028:	bf00      	nop
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007042:	b29b      	uxth	r3, r3
 8007044:	2b04      	cmp	r3, #4
 8007046:	d11b      	bne.n	8007080 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007056:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691a      	ldr	r2, [r3, #16]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007074:	b29b      	uxth	r3, r3
 8007076:	3b01      	subs	r3, #1
 8007078:	b29a      	uxth	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800707e:	e0bd      	b.n	80071fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007084:	b29b      	uxth	r3, r3
 8007086:	2b03      	cmp	r3, #3
 8007088:	d129      	bne.n	80070de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685a      	ldr	r2, [r3, #4]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007098:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2b04      	cmp	r3, #4
 800709e:	d00a      	beq.n	80070b6 <I2C_MasterReceive_BTF+0x86>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d007      	beq.n	80070b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	691a      	ldr	r2, [r3, #16]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80070dc:	e08e      	b.n	80071fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d176      	bne.n	80071d6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d002      	beq.n	80070f4 <I2C_MasterReceive_BTF+0xc4>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d108      	bne.n	8007106 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	e019      	b.n	800713a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b04      	cmp	r3, #4
 800710a:	d002      	beq.n	8007112 <I2C_MasterReceive_BTF+0xe2>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2b02      	cmp	r3, #2
 8007110:	d108      	bne.n	8007124 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	e00a      	b.n	800713a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b10      	cmp	r3, #16
 8007128:	d007      	beq.n	800713a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007138:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	691a      	ldr	r2, [r3, #16]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	b2d2      	uxtb	r2, r2
 8007146:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007156:	b29b      	uxth	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	691a      	ldr	r2, [r3, #16]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007194:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2220      	movs	r2, #32
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b40      	cmp	r3, #64	; 0x40
 80071a8:	d10a      	bne.n	80071c0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7fa fa89 	bl	80016d0 <HAL_I2C_MemRxCpltCallback>
}
 80071be:	e01d      	b.n	80071fc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2212      	movs	r2, #18
 80071cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7ff fc79 	bl	8006ac6 <HAL_I2C_MasterRxCpltCallback>
}
 80071d4:	e012      	b.n	80071fc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	691a      	ldr	r2, [r3, #16]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80071fc:	bf00      	nop
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b40      	cmp	r3, #64	; 0x40
 8007216:	d117      	bne.n	8007248 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721c:	2b00      	cmp	r3, #0
 800721e:	d109      	bne.n	8007234 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007224:	b2db      	uxtb	r3, r3
 8007226:	461a      	mov	r2, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007230:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007232:	e067      	b.n	8007304 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007238:	b2db      	uxtb	r3, r3
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	b2da      	uxtb	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	611a      	str	r2, [r3, #16]
}
 8007246:	e05d      	b.n	8007304 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007250:	d133      	bne.n	80072ba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b21      	cmp	r3, #33	; 0x21
 800725c:	d109      	bne.n	8007272 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007262:	b2db      	uxtb	r3, r3
 8007264:	461a      	mov	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800726e:	611a      	str	r2, [r3, #16]
 8007270:	e008      	b.n	8007284 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f043 0301 	orr.w	r3, r3, #1
 800727c:	b2da      	uxtb	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <I2C_Master_SB+0x92>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007292:	2b00      	cmp	r3, #0
 8007294:	d108      	bne.n	80072a8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	2b00      	cmp	r3, #0
 800729c:	d032      	beq.n	8007304 <I2C_Master_SB+0x100>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d02d      	beq.n	8007304 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685a      	ldr	r2, [r3, #4]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072b6:	605a      	str	r2, [r3, #4]
}
 80072b8:	e024      	b.n	8007304 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10e      	bne.n	80072e0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	11db      	asrs	r3, r3, #7
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	f003 0306 	and.w	r3, r3, #6
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f063 030f 	orn	r3, r3, #15
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	611a      	str	r2, [r3, #16]
}
 80072de:	e011      	b.n	8007304 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d10d      	bne.n	8007304 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	11db      	asrs	r3, r3, #7
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	f003 0306 	and.w	r3, r3, #6
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	f063 030e 	orn	r3, r3, #14
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	611a      	str	r2, [r3, #16]
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731c:	b2da      	uxtb	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <I2C_Master_ADD10+0x26>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007332:	2b00      	cmp	r3, #0
 8007334:	d108      	bne.n	8007348 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00c      	beq.n	8007358 <I2C_Master_ADD10+0x48>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d007      	beq.n	8007358 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007356:	605a      	str	r2, [r3, #4]
  }
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007364:	b480      	push	{r7}
 8007366:	b091      	sub	sp, #68	; 0x44
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007372:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007380:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b22      	cmp	r3, #34	; 0x22
 800738c:	f040 8169 	bne.w	8007662 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10f      	bne.n	80073b8 <I2C_Master_ADDR+0x54>
 8007398:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	d10b      	bne.n	80073b8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073a0:	2300      	movs	r3, #0
 80073a2:	633b      	str	r3, [r7, #48]	; 0x30
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	633b      	str	r3, [r7, #48]	; 0x30
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	633b      	str	r3, [r7, #48]	; 0x30
 80073b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b6:	e160      	b.n	800767a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d11d      	bne.n	80073fc <I2C_Master_ADDR+0x98>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073c8:	d118      	bne.n	80073fc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ca:	2300      	movs	r3, #0
 80073cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073de:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073ee:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	651a      	str	r2, [r3, #80]	; 0x50
 80073fa:	e13e      	b.n	800767a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007400:	b29b      	uxth	r3, r3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d113      	bne.n	800742e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007406:	2300      	movs	r3, #0
 8007408:	62bb      	str	r3, [r7, #40]	; 0x28
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	695b      	ldr	r3, [r3, #20]
 8007410:	62bb      	str	r3, [r7, #40]	; 0x28
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	62bb      	str	r3, [r7, #40]	; 0x28
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	e115      	b.n	800765a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007432:	b29b      	uxth	r3, r3
 8007434:	2b01      	cmp	r3, #1
 8007436:	f040 808a 	bne.w	800754e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800743a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007440:	d137      	bne.n	80074b2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007450:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800745c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007460:	d113      	bne.n	800748a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007470:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007472:	2300      	movs	r3, #0
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
 8007486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007488:	e0e7      	b.n	800765a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800748a:	2300      	movs	r3, #0
 800748c:	623b      	str	r3, [r7, #32]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	623b      	str	r3, [r7, #32]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	623b      	str	r3, [r7, #32]
 800749e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074ae:	601a      	str	r2, [r3, #0]
 80074b0:	e0d3      	b.n	800765a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d02e      	beq.n	8007516 <I2C_Master_ADDR+0x1b2>
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	2b20      	cmp	r3, #32
 80074bc:	d02b      	beq.n	8007516 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80074be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c0:	2b12      	cmp	r3, #18
 80074c2:	d102      	bne.n	80074ca <I2C_Master_ADDR+0x166>
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d125      	bne.n	8007516 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d00e      	beq.n	80074ee <I2C_Master_ADDR+0x18a>
 80074d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d00b      	beq.n	80074ee <I2C_Master_ADDR+0x18a>
 80074d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d8:	2b10      	cmp	r3, #16
 80074da:	d008      	beq.n	80074ee <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	e007      	b.n	80074fe <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074fe:	2300      	movs	r3, #0
 8007500:	61fb      	str	r3, [r7, #28]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	61fb      	str	r3, [r7, #28]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	61fb      	str	r3, [r7, #28]
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	e0a1      	b.n	800765a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007524:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007526:	2300      	movs	r3, #0
 8007528:	61bb      	str	r3, [r7, #24]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	61bb      	str	r3, [r7, #24]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	61bb      	str	r3, [r7, #24]
 800753a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	e085      	b.n	800765a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d14d      	bne.n	80075f4 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	2b04      	cmp	r3, #4
 800755c:	d016      	beq.n	800758c <I2C_Master_ADDR+0x228>
 800755e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007560:	2b02      	cmp	r3, #2
 8007562:	d013      	beq.n	800758c <I2C_Master_ADDR+0x228>
 8007564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007566:	2b10      	cmp	r3, #16
 8007568:	d010      	beq.n	800758c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007578:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	e007      	b.n	800759c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800759a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075aa:	d117      	bne.n	80075dc <I2C_Master_ADDR+0x278>
 80075ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075b2:	d00b      	beq.n	80075cc <I2C_Master_ADDR+0x268>
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d008      	beq.n	80075cc <I2C_Master_ADDR+0x268>
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d005      	beq.n	80075cc <I2C_Master_ADDR+0x268>
 80075c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c2:	2b10      	cmp	r3, #16
 80075c4:	d002      	beq.n	80075cc <I2C_Master_ADDR+0x268>
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d107      	bne.n	80075dc <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	685a      	ldr	r2, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80075da:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	617b      	str	r3, [r7, #20]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	e032      	b.n	800765a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007602:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800760e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007612:	d117      	bne.n	8007644 <I2C_Master_ADDR+0x2e0>
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800761a:	d00b      	beq.n	8007634 <I2C_Master_ADDR+0x2d0>
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	2b01      	cmp	r3, #1
 8007620:	d008      	beq.n	8007634 <I2C_Master_ADDR+0x2d0>
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	2b08      	cmp	r3, #8
 8007626:	d005      	beq.n	8007634 <I2C_Master_ADDR+0x2d0>
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	2b10      	cmp	r3, #16
 800762c:	d002      	beq.n	8007634 <I2C_Master_ADDR+0x2d0>
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	2b20      	cmp	r3, #32
 8007632:	d107      	bne.n	8007644 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007642:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007644:	2300      	movs	r3, #0
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	613b      	str	r3, [r7, #16]
 8007658:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007660:	e00b      	b.n	800767a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007662:	2300      	movs	r3, #0
 8007664:	60fb      	str	r3, [r7, #12]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	68fb      	ldr	r3, [r7, #12]
}
 8007678:	e7ff      	b.n	800767a <I2C_Master_ADDR+0x316>
 800767a:	bf00      	nop
 800767c:	3744      	adds	r7, #68	; 0x44
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007694:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769a:	b29b      	uxth	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d02b      	beq.n	80076f8 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	781a      	ldrb	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d114      	bne.n	80076f8 <I2C_SlaveTransmit_TXE+0x72>
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	2b29      	cmp	r3, #41	; 0x29
 80076d2:	d111      	bne.n	80076f8 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076e2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2221      	movs	r2, #33	; 0x21
 80076e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2228      	movs	r2, #40	; 0x28
 80076ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff f9f1 	bl	8006ada <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80076f8:	bf00      	nop
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800770c:	b29b      	uxth	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d011      	beq.n	8007736 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007716:	781a      	ldrb	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007736:	bf00      	nop
 8007738:	370c      	adds	r7, #12
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007750:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007756:	b29b      	uxth	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d02c      	beq.n	80077b6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691a      	ldr	r2, [r3, #16]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007766:	b2d2      	uxtb	r2, r2
 8007768:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007786:	b29b      	uxth	r3, r3
 8007788:	2b00      	cmp	r3, #0
 800778a:	d114      	bne.n	80077b6 <I2C_SlaveReceive_RXNE+0x74>
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	2b2a      	cmp	r3, #42	; 0x2a
 8007790:	d111      	bne.n	80077b6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2222      	movs	r2, #34	; 0x22
 80077a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2228      	movs	r2, #40	; 0x28
 80077ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff f99c 	bl	8006aee <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80077b6:	bf00      	nop
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d012      	beq.n	80077f6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	691a      	ldr	r2, [r3, #16]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	3b01      	subs	r3, #1
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800781c:	2b28      	cmp	r3, #40	; 0x28
 800781e:	d127      	bne.n	8007870 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800782e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	089b      	lsrs	r3, r3, #2
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d101      	bne.n	8007840 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800783c:	2301      	movs	r3, #1
 800783e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	09db      	lsrs	r3, r3, #7
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d103      	bne.n	8007854 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	81bb      	strh	r3, [r7, #12]
 8007852:	e002      	b.n	800785a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007862:	89ba      	ldrh	r2, [r7, #12]
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7ff f94a 	bl	8006b02 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800786e:	e00e      	b.n	800788e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007870:	2300      	movs	r3, #0
 8007872:	60bb      	str	r3, [r7, #8]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	60bb      	str	r3, [r7, #8]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	60bb      	str	r3, [r7, #8]
 8007884:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800788e:	bf00      	nop
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80078b8:	2300      	movs	r3, #0
 80078ba:	60bb      	str	r3, [r7, #8]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	60bb      	str	r3, [r7, #8]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078f4:	d172      	bne.n	80079dc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	2b22      	cmp	r3, #34	; 0x22
 80078fa:	d002      	beq.n	8007902 <I2C_Slave_STOPF+0x6a>
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007900:	d135      	bne.n	800796e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	b29a      	uxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	f043 0204 	orr.w	r2, r3, #4
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685a      	ldr	r2, [r3, #4]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007934:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	4618      	mov	r0, r3
 800793c:	f7fd fc2e 	bl	800519c <HAL_DMA_GetState>
 8007940:	4603      	mov	r3, r0
 8007942:	2b01      	cmp	r3, #1
 8007944:	d049      	beq.n	80079da <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	4a69      	ldr	r2, [pc, #420]	; (8007af0 <I2C_Slave_STOPF+0x258>)
 800794c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007952:	4618      	mov	r0, r3
 8007954:	f7fd fa76 	bl	8004e44 <HAL_DMA_Abort_IT>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d03d      	beq.n	80079da <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007968:	4610      	mov	r0, r2
 800796a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800796c:	e035      	b.n	80079da <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	b29a      	uxth	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d005      	beq.n	8007992 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	f043 0204 	orr.w	r2, r3, #4
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	685a      	ldr	r2, [r3, #4]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fd fbf8 	bl	800519c <HAL_DMA_GetState>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d014      	beq.n	80079dc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b6:	4a4e      	ldr	r2, [pc, #312]	; (8007af0 <I2C_Slave_STOPF+0x258>)
 80079b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd fa40 	bl	8004e44 <HAL_DMA_Abort_IT>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d008      	beq.n	80079dc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80079d4:	4610      	mov	r0, r2
 80079d6:	4798      	blx	r3
 80079d8:	e000      	b.n	80079dc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079da:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d03e      	beq.n	8007a64 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d112      	bne.n	8007a1a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691a      	ldr	r2, [r3, #16]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	b2d2      	uxtb	r2, r2
 8007a00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	1c5a      	adds	r2, r3, #1
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	3b01      	subs	r3, #1
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a24:	2b40      	cmp	r3, #64	; 0x40
 8007a26:	d112      	bne.n	8007a4e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	691a      	ldr	r2, [r3, #16]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	b2d2      	uxtb	r2, r2
 8007a34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5c:	f043 0204 	orr.w	r2, r3, #4
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f843 	bl	8007af8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007a72:	e039      	b.n	8007ae8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	2b2a      	cmp	r3, #42	; 0x2a
 8007a78:	d109      	bne.n	8007a8e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2228      	movs	r2, #40	; 0x28
 8007a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff f830 	bl	8006aee <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b28      	cmp	r3, #40	; 0x28
 8007a98:	d111      	bne.n	8007abe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a15      	ldr	r2, [pc, #84]	; (8007af4 <I2C_Slave_STOPF+0x25c>)
 8007a9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2220      	movs	r2, #32
 8007aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f7ff f831 	bl	8006b1e <HAL_I2C_ListenCpltCallback>
}
 8007abc:	e014      	b.n	8007ae8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac2:	2b22      	cmp	r3, #34	; 0x22
 8007ac4:	d002      	beq.n	8007acc <I2C_Slave_STOPF+0x234>
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
 8007ac8:	2b22      	cmp	r3, #34	; 0x22
 8007aca:	d10d      	bne.n	8007ae8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7ff f803 	bl	8006aee <HAL_I2C_SlaveRxCpltCallback>
}
 8007ae8:	bf00      	nop
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	0800827d 	.word	0x0800827d
 8007af4:	ffff0000 	.word	0xffff0000

08007af8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b06:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b0e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	2b10      	cmp	r3, #16
 8007b14:	d002      	beq.n	8007b1c <I2C_ITError+0x24>
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	2b40      	cmp	r3, #64	; 0x40
 8007b1a:	d10a      	bne.n	8007b32 <I2C_ITError+0x3a>
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	2b22      	cmp	r3, #34	; 0x22
 8007b20:	d107      	bne.n	8007b32 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b30:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007b38:	2b28      	cmp	r3, #40	; 0x28
 8007b3a:	d107      	bne.n	8007b4c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2228      	movs	r2, #40	; 0x28
 8007b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b4a:	e015      	b.n	8007b78 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b5a:	d00a      	beq.n	8007b72 <I2C_ITError+0x7a>
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
 8007b5e:	2b60      	cmp	r3, #96	; 0x60
 8007b60:	d007      	beq.n	8007b72 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b86:	d162      	bne.n	8007c4e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b96:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d020      	beq.n	8007be8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007baa:	4a6a      	ldr	r2, [pc, #424]	; (8007d54 <I2C_ITError+0x25c>)
 8007bac:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fd f946 	bl	8004e44 <HAL_DMA_Abort_IT>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 8089 	beq.w	8007cd2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0201 	bic.w	r2, r2, #1
 8007bce:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2220      	movs	r2, #32
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007be2:	4610      	mov	r0, r2
 8007be4:	4798      	blx	r3
 8007be6:	e074      	b.n	8007cd2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	4a59      	ldr	r2, [pc, #356]	; (8007d54 <I2C_ITError+0x25c>)
 8007bee:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fd f925 	bl	8004e44 <HAL_DMA_Abort_IT>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d068      	beq.n	8007cd2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c0a:	2b40      	cmp	r3, #64	; 0x40
 8007c0c:	d10b      	bne.n	8007c26 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	691a      	ldr	r2, [r3, #16]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	b2d2      	uxtb	r2, r2
 8007c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0201 	bic.w	r2, r2, #1
 8007c34:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4798      	blx	r3
 8007c4c:	e041      	b.n	8007cd2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b60      	cmp	r3, #96	; 0x60
 8007c58:	d125      	bne.n	8007ca6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	d10b      	bne.n	8007c8e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	691a      	ldr	r2, [r3, #16]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	b2d2      	uxtb	r2, r2
 8007c82:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	1c5a      	adds	r2, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fe ff5b 	bl	8006b5a <HAL_I2C_AbortCpltCallback>
 8007ca4:	e015      	b.n	8007cd2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	695b      	ldr	r3, [r3, #20]
 8007cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb0:	2b40      	cmp	r3, #64	; 0x40
 8007cb2:	d10b      	bne.n	8007ccc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	691a      	ldr	r2, [r3, #16]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	b2d2      	uxtb	r2, r2
 8007cc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7fe ff3a 	bl	8006b46 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10e      	bne.n	8007d00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d109      	bne.n	8007d00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d104      	bne.n	8007d00 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d007      	beq.n	8007d10 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007d0e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d16:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d113      	bne.n	8007d4c <I2C_ITError+0x254>
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	2b28      	cmp	r3, #40	; 0x28
 8007d28:	d110      	bne.n	8007d4c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a0a      	ldr	r2, [pc, #40]	; (8007d58 <I2C_ITError+0x260>)
 8007d2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2220      	movs	r2, #32
 8007d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7fe fee9 	bl	8006b1e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	0800827d 	.word	0x0800827d
 8007d58:	ffff0000 	.word	0xffff0000

08007d5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af02      	add	r7, sp, #8
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	4608      	mov	r0, r1
 8007d66:	4611      	mov	r1, r2
 8007d68:	461a      	mov	r2, r3
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	817b      	strh	r3, [r7, #10]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	813b      	strh	r3, [r7, #8]
 8007d72:	4613      	mov	r3, r2
 8007d74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 fb1a 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00d      	beq.n	8007dba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dac:	d103      	bne.n	8007db6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007db4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e05f      	b.n	8007e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007dba:	897b      	ldrh	r3, [r7, #10]
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007dc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	6a3a      	ldr	r2, [r7, #32]
 8007dce:	492d      	ldr	r1, [pc, #180]	; (8007e84 <I2C_RequestMemoryWrite+0x128>)
 8007dd0:	68f8      	ldr	r0, [r7, #12]
 8007dd2:	f000 fb52 	bl	800847a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d001      	beq.n	8007de0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e04c      	b.n	8007e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007de0:	2300      	movs	r3, #0
 8007de2:	617b      	str	r3, [r7, #20]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	695b      	ldr	r3, [r3, #20]
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	699b      	ldr	r3, [r3, #24]
 8007df2:	617b      	str	r3, [r7, #20]
 8007df4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007df8:	6a39      	ldr	r1, [r7, #32]
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 fbbc 	bl	8008578 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00d      	beq.n	8007e22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	2b04      	cmp	r3, #4
 8007e0c:	d107      	bne.n	8007e1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e02b      	b.n	8007e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e22:	88fb      	ldrh	r3, [r7, #6]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d105      	bne.n	8007e34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e28:	893b      	ldrh	r3, [r7, #8]
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	611a      	str	r2, [r3, #16]
 8007e32:	e021      	b.n	8007e78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e34:	893b      	ldrh	r3, [r7, #8]
 8007e36:	0a1b      	lsrs	r3, r3, #8
 8007e38:	b29b      	uxth	r3, r3
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e44:	6a39      	ldr	r1, [r7, #32]
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 fb96 	bl	8008578 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00d      	beq.n	8007e6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d107      	bne.n	8007e6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e005      	b.n	8007e7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e6e:	893b      	ldrh	r3, [r7, #8]
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	00010002 	.word	0x00010002

08007e88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b088      	sub	sp, #32
 8007e8c:	af02      	add	r7, sp, #8
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	4608      	mov	r0, r1
 8007e92:	4611      	mov	r1, r2
 8007e94:	461a      	mov	r2, r3
 8007e96:	4603      	mov	r3, r0
 8007e98:	817b      	strh	r3, [r7, #10]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	813b      	strh	r3, [r7, #8]
 8007e9e:	4613      	mov	r3, r2
 8007ea0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007eb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fa7c 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00d      	beq.n	8007ef6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee8:	d103      	bne.n	8007ef2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e0aa      	b.n	800804c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ef6:	897b      	ldrh	r3, [r7, #10]
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	461a      	mov	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	6a3a      	ldr	r2, [r7, #32]
 8007f0a:	4952      	ldr	r1, [pc, #328]	; (8008054 <I2C_RequestMemoryRead+0x1cc>)
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 fab4 	bl	800847a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d001      	beq.n	8007f1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e097      	b.n	800804c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	617b      	str	r3, [r7, #20]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	617b      	str	r3, [r7, #20]
 8007f30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f34:	6a39      	ldr	r1, [r7, #32]
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f000 fb1e 	bl	8008578 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00d      	beq.n	8007f5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	d107      	bne.n	8007f5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e076      	b.n	800804c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f5e:	88fb      	ldrh	r3, [r7, #6]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d105      	bne.n	8007f70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f64:	893b      	ldrh	r3, [r7, #8]
 8007f66:	b2da      	uxtb	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	611a      	str	r2, [r3, #16]
 8007f6e:	e021      	b.n	8007fb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007f70:	893b      	ldrh	r3, [r7, #8]
 8007f72:	0a1b      	lsrs	r3, r3, #8
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f80:	6a39      	ldr	r1, [r7, #32]
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 faf8 	bl	8008578 <I2C_WaitOnTXEFlagUntilTimeout>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00d      	beq.n	8007faa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d107      	bne.n	8007fa6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e050      	b.n	800804c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007faa:	893b      	ldrh	r3, [r7, #8]
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb6:	6a39      	ldr	r1, [r7, #32]
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 fadd 	bl	8008578 <I2C_WaitOnTXEFlagUntilTimeout>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00d      	beq.n	8007fe0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	d107      	bne.n	8007fdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e035      	b.n	800804c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 f9e5 	bl	80083cc <I2C_WaitOnFlagUntilTimeout>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00d      	beq.n	8008024 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008016:	d103      	bne.n	8008020 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800801e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e013      	b.n	800804c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008024:	897b      	ldrh	r3, [r7, #10]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	f043 0301 	orr.w	r3, r3, #1
 800802c:	b2da      	uxtb	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	6a3a      	ldr	r2, [r7, #32]
 8008038:	4906      	ldr	r1, [pc, #24]	; (8008054 <I2C_RequestMemoryRead+0x1cc>)
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f000 fa1d 	bl	800847a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e000      	b.n	800804c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3718      	adds	r7, #24
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	00010002 	.word	0x00010002

08008058 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008064:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800806c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008074:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800808a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008090:	2b00      	cmp	r3, #0
 8008092:	d003      	beq.n	800809c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008098:	2200      	movs	r2, #0
 800809a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a8:	2200      	movs	r2, #0
 80080aa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80080ac:	7cfb      	ldrb	r3, [r7, #19]
 80080ae:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80080b2:	2b21      	cmp	r3, #33	; 0x21
 80080b4:	d007      	beq.n	80080c6 <I2C_DMAXferCplt+0x6e>
 80080b6:	7cfb      	ldrb	r3, [r7, #19]
 80080b8:	f003 0322 	and.w	r3, r3, #34	; 0x22
 80080bc:	2b22      	cmp	r3, #34	; 0x22
 80080be:	d131      	bne.n	8008124 <I2C_DMAXferCplt+0xcc>
 80080c0:	7cbb      	ldrb	r3, [r7, #18]
 80080c2:	2b20      	cmp	r3, #32
 80080c4:	d12e      	bne.n	8008124 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080d4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2200      	movs	r2, #0
 80080da:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80080dc:	7cfb      	ldrb	r3, [r7, #19]
 80080de:	2b29      	cmp	r3, #41	; 0x29
 80080e0:	d10a      	bne.n	80080f8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2221      	movs	r2, #33	; 0x21
 80080e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2228      	movs	r2, #40	; 0x28
 80080ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80080f0:	6978      	ldr	r0, [r7, #20]
 80080f2:	f7fe fcf2 	bl	8006ada <HAL_I2C_SlaveTxCpltCallback>
 80080f6:	e00c      	b.n	8008112 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80080f8:	7cfb      	ldrb	r3, [r7, #19]
 80080fa:	2b2a      	cmp	r3, #42	; 0x2a
 80080fc:	d109      	bne.n	8008112 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	2222      	movs	r2, #34	; 0x22
 8008102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	2228      	movs	r2, #40	; 0x28
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800810c:	6978      	ldr	r0, [r7, #20]
 800810e:	f7fe fcee 	bl	8006aee <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008120:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8008122:	e06a      	b.n	80081fa <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b00      	cmp	r3, #0
 800812e:	d064      	beq.n	80081fa <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008134:	b29b      	uxth	r3, r3
 8008136:	2b01      	cmp	r3, #1
 8008138:	d107      	bne.n	800814a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008148:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008158:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008160:	d009      	beq.n	8008176 <I2C_DMAXferCplt+0x11e>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2b08      	cmp	r3, #8
 8008166:	d006      	beq.n	8008176 <I2C_DMAXferCplt+0x11e>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800816e:	d002      	beq.n	8008176 <I2C_DMAXferCplt+0x11e>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b20      	cmp	r3, #32
 8008174:	d107      	bne.n	8008186 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008184:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008194:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081a4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2200      	movs	r2, #0
 80081aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80081b4:	6978      	ldr	r0, [r7, #20]
 80081b6:	f7fe fcc6 	bl	8006b46 <HAL_I2C_ErrorCallback>
}
 80081ba:	e01e      	b.n	80081fa <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2220      	movs	r2, #32
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b40      	cmp	r3, #64	; 0x40
 80081ce:	d10a      	bne.n	80081e6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2200      	movs	r2, #0
 80081dc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80081de:	6978      	ldr	r0, [r7, #20]
 80081e0:	f7f9 fa76 	bl	80016d0 <HAL_I2C_MemRxCpltCallback>
}
 80081e4:	e009      	b.n	80081fa <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	2212      	movs	r2, #18
 80081f2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80081f4:	6978      	ldr	r0, [r7, #20]
 80081f6:	f7fe fc66 	bl	8006ac6 <HAL_I2C_MasterRxCpltCallback>
}
 80081fa:	bf00      	nop
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821c:	2200      	movs	r2, #0
 800821e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	2200      	movs	r2, #0
 800822e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7fc ffc1 	bl	80051b8 <HAL_DMA_GetError>
 8008236:	4603      	mov	r3, r0
 8008238:	2b02      	cmp	r3, #2
 800823a:	d01b      	beq.n	8008274 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800824a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2220      	movs	r2, #32
 8008256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	f043 0210 	orr.w	r2, r3, #16
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f7fe fc69 	bl	8006b46 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008274:	bf00      	nop
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008294:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008296:	4b4b      	ldr	r3, [pc, #300]	; (80083c4 <I2C_DMAAbort+0x148>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	08db      	lsrs	r3, r3, #3
 800829c:	4a4a      	ldr	r2, [pc, #296]	; (80083c8 <I2C_DMAAbort+0x14c>)
 800829e:	fba2 2303 	umull	r2, r3, r2, r3
 80082a2:	0a1a      	lsrs	r2, r3, #8
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	00da      	lsls	r2, r3, #3
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d106      	bne.n	80082c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	f043 0220 	orr.w	r2, r3, #32
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80082c2:	e00a      	b.n	80082da <I2C_DMAAbort+0x5e>
    }
    count--;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082d8:	d0ea      	beq.n	80082b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e6:	2200      	movs	r2, #0
 80082e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f6:	2200      	movs	r2, #0
 80082f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008308:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2200      	movs	r2, #0
 800830e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800831c:	2200      	movs	r2, #0
 800831e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	2200      	movs	r2, #0
 800832e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 0201 	bic.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b60      	cmp	r3, #96	; 0x60
 800834a:	d10e      	bne.n	800836a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2220      	movs	r2, #32
 8008350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2200      	movs	r2, #0
 8008360:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008362:	6978      	ldr	r0, [r7, #20]
 8008364:	f7fe fbf9 	bl	8006b5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008368:	e027      	b.n	80083ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800836a:	7cfb      	ldrb	r3, [r7, #19]
 800836c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008370:	2b28      	cmp	r3, #40	; 0x28
 8008372:	d117      	bne.n	80083a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f042 0201 	orr.w	r2, r2, #1
 8008382:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008392:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	2200      	movs	r2, #0
 8008398:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2228      	movs	r2, #40	; 0x28
 800839e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80083a2:	e007      	b.n	80083b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2220      	movs	r2, #32
 80083a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80083b4:	6978      	ldr	r0, [r7, #20]
 80083b6:	f7fe fbc6 	bl	8006b46 <HAL_I2C_ErrorCallback>
}
 80083ba:	bf00      	nop
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20000000 	.word	0x20000000
 80083c8:	14f8b589 	.word	0x14f8b589

080083cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	603b      	str	r3, [r7, #0]
 80083d8:	4613      	mov	r3, r2
 80083da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083dc:	e025      	b.n	800842a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083e4:	d021      	beq.n	800842a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083e6:	f7fb fa5f 	bl	80038a8 <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	683a      	ldr	r2, [r7, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d302      	bcc.n	80083fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d116      	bne.n	800842a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2220      	movs	r2, #32
 8008406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	f043 0220 	orr.w	r2, r3, #32
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e023      	b.n	8008472 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	0c1b      	lsrs	r3, r3, #16
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b01      	cmp	r3, #1
 8008432:	d10d      	bne.n	8008450 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	695b      	ldr	r3, [r3, #20]
 800843a:	43da      	mvns	r2, r3
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	4013      	ands	r3, r2
 8008440:	b29b      	uxth	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	bf0c      	ite	eq
 8008446:	2301      	moveq	r3, #1
 8008448:	2300      	movne	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	461a      	mov	r2, r3
 800844e:	e00c      	b.n	800846a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	43da      	mvns	r2, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	4013      	ands	r3, r2
 800845c:	b29b      	uxth	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	bf0c      	ite	eq
 8008462:	2301      	moveq	r3, #1
 8008464:	2300      	movne	r3, #0
 8008466:	b2db      	uxtb	r3, r3
 8008468:	461a      	mov	r2, r3
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	429a      	cmp	r2, r3
 800846e:	d0b6      	beq.n	80083de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008488:	e051      	b.n	800852e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695b      	ldr	r3, [r3, #20]
 8008490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008498:	d123      	bne.n	80084e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80084b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2220      	movs	r2, #32
 80084be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ce:	f043 0204 	orr.w	r2, r3, #4
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e046      	b.n	8008570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084e8:	d021      	beq.n	800852e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ea:	f7fb f9dd 	bl	80038a8 <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d302      	bcc.n	8008500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d116      	bne.n	800852e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2200      	movs	r2, #0
 8008504:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2220      	movs	r2, #32
 800850a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	f043 0220 	orr.w	r2, r3, #32
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e020      	b.n	8008570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	0c1b      	lsrs	r3, r3, #16
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b01      	cmp	r3, #1
 8008536:	d10c      	bne.n	8008552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	695b      	ldr	r3, [r3, #20]
 800853e:	43da      	mvns	r2, r3
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	4013      	ands	r3, r2
 8008544:	b29b      	uxth	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	bf14      	ite	ne
 800854a:	2301      	movne	r3, #1
 800854c:	2300      	moveq	r3, #0
 800854e:	b2db      	uxtb	r3, r3
 8008550:	e00b      	b.n	800856a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	43da      	mvns	r2, r3
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	4013      	ands	r3, r2
 800855e:	b29b      	uxth	r3, r3
 8008560:	2b00      	cmp	r3, #0
 8008562:	bf14      	ite	ne
 8008564:	2301      	movne	r3, #1
 8008566:	2300      	moveq	r3, #0
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d18d      	bne.n	800848a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008584:	e02d      	b.n	80085e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f000 f900 	bl	800878c <I2C_IsAcknowledgeFailed>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e02d      	b.n	80085f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800859c:	d021      	beq.n	80085e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800859e:	f7fb f983 	bl	80038a8 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d302      	bcc.n	80085b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d116      	bne.n	80085e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2220      	movs	r2, #32
 80085be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	f043 0220 	orr.w	r2, r3, #32
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e007      	b.n	80085f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ec:	2b80      	cmp	r3, #128	; 0x80
 80085ee:	d1ca      	bne.n	8008586 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008606:	e02d      	b.n	8008664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 f8bf 	bl	800878c <I2C_IsAcknowledgeFailed>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e02d      	b.n	8008674 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800861e:	d021      	beq.n	8008664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008620:	f7fb f942 	bl	80038a8 <HAL_GetTick>
 8008624:	4602      	mov	r2, r0
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	429a      	cmp	r2, r3
 800862e:	d302      	bcc.n	8008636 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d116      	bne.n	8008664 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2220      	movs	r2, #32
 8008640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008650:	f043 0220 	orr.w	r2, r3, #32
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e007      	b.n	8008674 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	695b      	ldr	r3, [r3, #20]
 800866a:	f003 0304 	and.w	r3, r3, #4
 800866e:	2b04      	cmp	r3, #4
 8008670:	d1ca      	bne.n	8008608 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008672:	2300      	movs	r3, #0
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008688:	4b13      	ldr	r3, [pc, #76]	; (80086d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	08db      	lsrs	r3, r3, #3
 800868e:	4a13      	ldr	r2, [pc, #76]	; (80086dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008690:	fba2 2303 	umull	r2, r3, r2, r3
 8008694:	0a1a      	lsrs	r2, r3, #8
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	3b01      	subs	r3, #1
 80086a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d107      	bne.n	80086ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	f043 0220 	orr.w	r2, r3, #32
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e008      	b.n	80086cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086c8:	d0e9      	beq.n	800869e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	20000000 	.word	0x20000000
 80086dc:	14f8b589 	.word	0x14f8b589

080086e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80086ec:	e042      	b.n	8008774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	f003 0310 	and.w	r3, r3, #16
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d119      	bne.n	8008730 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f06f 0210 	mvn.w	r2, #16
 8008704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2220      	movs	r2, #32
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	e029      	b.n	8008784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008730:	f7fb f8ba 	bl	80038a8 <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	429a      	cmp	r2, r3
 800873e:	d302      	bcc.n	8008746 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d116      	bne.n	8008774 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2220      	movs	r2, #32
 8008750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008760:	f043 0220 	orr.w	r2, r3, #32
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e007      	b.n	8008784 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	695b      	ldr	r3, [r3, #20]
 800877a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877e:	2b40      	cmp	r3, #64	; 0x40
 8008780:	d1b5      	bne.n	80086ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800879e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087a2:	d11b      	bne.n	80087dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2220      	movs	r2, #32
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c8:	f043 0204 	orr.w	r2, r3, #4
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	e000      	b.n	80087de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80087fa:	d103      	bne.n	8008804 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008802:	e007      	b.n	8008814 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800880c:	d102      	bne.n	8008814 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2208      	movs	r2, #8
 8008812:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e267      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d075      	beq.n	800892a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800883e:	4b88      	ldr	r3, [pc, #544]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f003 030c 	and.w	r3, r3, #12
 8008846:	2b04      	cmp	r3, #4
 8008848:	d00c      	beq.n	8008864 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800884a:	4b85      	ldr	r3, [pc, #532]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008852:	2b08      	cmp	r3, #8
 8008854:	d112      	bne.n	800887c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008856:	4b82      	ldr	r3, [pc, #520]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800885e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008862:	d10b      	bne.n	800887c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008864:	4b7e      	ldr	r3, [pc, #504]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800886c:	2b00      	cmp	r3, #0
 800886e:	d05b      	beq.n	8008928 <HAL_RCC_OscConfig+0x108>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d157      	bne.n	8008928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e242      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008884:	d106      	bne.n	8008894 <HAL_RCC_OscConfig+0x74>
 8008886:	4b76      	ldr	r3, [pc, #472]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a75      	ldr	r2, [pc, #468]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 800888c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008890:	6013      	str	r3, [r2, #0]
 8008892:	e01d      	b.n	80088d0 <HAL_RCC_OscConfig+0xb0>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800889c:	d10c      	bne.n	80088b8 <HAL_RCC_OscConfig+0x98>
 800889e:	4b70      	ldr	r3, [pc, #448]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a6f      	ldr	r2, [pc, #444]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 80088a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088a8:	6013      	str	r3, [r2, #0]
 80088aa:	4b6d      	ldr	r3, [pc, #436]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a6c      	ldr	r2, [pc, #432]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 80088b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	e00b      	b.n	80088d0 <HAL_RCC_OscConfig+0xb0>
 80088b8:	4b69      	ldr	r3, [pc, #420]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a68      	ldr	r2, [pc, #416]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 80088be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	4b66      	ldr	r3, [pc, #408]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a65      	ldr	r2, [pc, #404]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 80088ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d013      	beq.n	8008900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088d8:	f7fa ffe6 	bl	80038a8 <HAL_GetTick>
 80088dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088de:	e008      	b.n	80088f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80088e0:	f7fa ffe2 	bl	80038a8 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b64      	cmp	r3, #100	; 0x64
 80088ec:	d901      	bls.n	80088f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e207      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088f2:	4b5b      	ldr	r3, [pc, #364]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0f0      	beq.n	80088e0 <HAL_RCC_OscConfig+0xc0>
 80088fe:	e014      	b.n	800892a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008900:	f7fa ffd2 	bl	80038a8 <HAL_GetTick>
 8008904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008906:	e008      	b.n	800891a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008908:	f7fa ffce 	bl	80038a8 <HAL_GetTick>
 800890c:	4602      	mov	r2, r0
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b64      	cmp	r3, #100	; 0x64
 8008914:	d901      	bls.n	800891a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e1f3      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800891a:	4b51      	ldr	r3, [pc, #324]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1f0      	bne.n	8008908 <HAL_RCC_OscConfig+0xe8>
 8008926:	e000      	b.n	800892a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d063      	beq.n	80089fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008936:	4b4a      	ldr	r3, [pc, #296]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f003 030c 	and.w	r3, r3, #12
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00b      	beq.n	800895a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008942:	4b47      	ldr	r3, [pc, #284]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800894a:	2b08      	cmp	r3, #8
 800894c:	d11c      	bne.n	8008988 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800894e:	4b44      	ldr	r3, [pc, #272]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d116      	bne.n	8008988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800895a:	4b41      	ldr	r3, [pc, #260]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0302 	and.w	r3, r3, #2
 8008962:	2b00      	cmp	r3, #0
 8008964:	d005      	beq.n	8008972 <HAL_RCC_OscConfig+0x152>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	2b01      	cmp	r3, #1
 800896c:	d001      	beq.n	8008972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e1c7      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008972:	4b3b      	ldr	r3, [pc, #236]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	4937      	ldr	r1, [pc, #220]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 8008982:	4313      	orrs	r3, r2
 8008984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008986:	e03a      	b.n	80089fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d020      	beq.n	80089d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008990:	4b34      	ldr	r3, [pc, #208]	; (8008a64 <HAL_RCC_OscConfig+0x244>)
 8008992:	2201      	movs	r2, #1
 8008994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008996:	f7fa ff87 	bl	80038a8 <HAL_GetTick>
 800899a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800899c:	e008      	b.n	80089b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800899e:	f7fa ff83 	bl	80038a8 <HAL_GetTick>
 80089a2:	4602      	mov	r2, r0
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d901      	bls.n	80089b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e1a8      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089b0:	4b2b      	ldr	r3, [pc, #172]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d0f0      	beq.n	800899e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089bc:	4b28      	ldr	r3, [pc, #160]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	4925      	ldr	r1, [pc, #148]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 80089cc:	4313      	orrs	r3, r2
 80089ce:	600b      	str	r3, [r1, #0]
 80089d0:	e015      	b.n	80089fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089d2:	4b24      	ldr	r3, [pc, #144]	; (8008a64 <HAL_RCC_OscConfig+0x244>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d8:	f7fa ff66 	bl	80038a8 <HAL_GetTick>
 80089dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089de:	e008      	b.n	80089f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80089e0:	f7fa ff62 	bl	80038a8 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e187      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80089f2:	4b1b      	ldr	r3, [pc, #108]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1f0      	bne.n	80089e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0308 	and.w	r3, r3, #8
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d036      	beq.n	8008a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d016      	beq.n	8008a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a12:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <HAL_RCC_OscConfig+0x248>)
 8008a14:	2201      	movs	r2, #1
 8008a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a18:	f7fa ff46 	bl	80038a8 <HAL_GetTick>
 8008a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a1e:	e008      	b.n	8008a32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a20:	f7fa ff42 	bl	80038a8 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d901      	bls.n	8008a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e167      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a32:	4b0b      	ldr	r3, [pc, #44]	; (8008a60 <HAL_RCC_OscConfig+0x240>)
 8008a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a36:	f003 0302 	and.w	r3, r3, #2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0f0      	beq.n	8008a20 <HAL_RCC_OscConfig+0x200>
 8008a3e:	e01b      	b.n	8008a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a40:	4b09      	ldr	r3, [pc, #36]	; (8008a68 <HAL_RCC_OscConfig+0x248>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a46:	f7fa ff2f 	bl	80038a8 <HAL_GetTick>
 8008a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a4c:	e00e      	b.n	8008a6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008a4e:	f7fa ff2b 	bl	80038a8 <HAL_GetTick>
 8008a52:	4602      	mov	r2, r0
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d907      	bls.n	8008a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e150      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
 8008a60:	40023800 	.word	0x40023800
 8008a64:	42470000 	.word	0x42470000
 8008a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a6c:	4b88      	ldr	r3, [pc, #544]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1ea      	bne.n	8008a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 8097 	beq.w	8008bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a86:	2300      	movs	r3, #0
 8008a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a8a:	4b81      	ldr	r3, [pc, #516]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10f      	bne.n	8008ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a96:	2300      	movs	r3, #0
 8008a98:	60bb      	str	r3, [r7, #8]
 8008a9a:	4b7d      	ldr	r3, [pc, #500]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9e:	4a7c      	ldr	r2, [pc, #496]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8008aa6:	4b7a      	ldr	r3, [pc, #488]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008aae:	60bb      	str	r3, [r7, #8]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ab6:	4b77      	ldr	r3, [pc, #476]	; (8008c94 <HAL_RCC_OscConfig+0x474>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d118      	bne.n	8008af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ac2:	4b74      	ldr	r3, [pc, #464]	; (8008c94 <HAL_RCC_OscConfig+0x474>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a73      	ldr	r2, [pc, #460]	; (8008c94 <HAL_RCC_OscConfig+0x474>)
 8008ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ace:	f7fa feeb 	bl	80038a8 <HAL_GetTick>
 8008ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ad4:	e008      	b.n	8008ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ad6:	f7fa fee7 	bl	80038a8 <HAL_GetTick>
 8008ada:	4602      	mov	r2, r0
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	1ad3      	subs	r3, r2, r3
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d901      	bls.n	8008ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ae4:	2303      	movs	r3, #3
 8008ae6:	e10c      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ae8:	4b6a      	ldr	r3, [pc, #424]	; (8008c94 <HAL_RCC_OscConfig+0x474>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d0f0      	beq.n	8008ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d106      	bne.n	8008b0a <HAL_RCC_OscConfig+0x2ea>
 8008afc:	4b64      	ldr	r3, [pc, #400]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b00:	4a63      	ldr	r2, [pc, #396]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008b02:	f043 0301 	orr.w	r3, r3, #1
 8008b06:	6713      	str	r3, [r2, #112]	; 0x70
 8008b08:	e01c      	b.n	8008b44 <HAL_RCC_OscConfig+0x324>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	2b05      	cmp	r3, #5
 8008b10:	d10c      	bne.n	8008b2c <HAL_RCC_OscConfig+0x30c>
 8008b12:	4b5f      	ldr	r3, [pc, #380]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b16:	4a5e      	ldr	r2, [pc, #376]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008b18:	f043 0304 	orr.w	r3, r3, #4
 8008b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8008b1e:	4b5c      	ldr	r3, [pc, #368]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b22:	4a5b      	ldr	r2, [pc, #364]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008b24:	f043 0301 	orr.w	r3, r3, #1
 8008b28:	6713      	str	r3, [r2, #112]	; 0x70
 8008b2a:	e00b      	b.n	8008b44 <HAL_RCC_OscConfig+0x324>
 8008b2c:	4b58      	ldr	r3, [pc, #352]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b30:	4a57      	ldr	r2, [pc, #348]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008b32:	f023 0301 	bic.w	r3, r3, #1
 8008b36:	6713      	str	r3, [r2, #112]	; 0x70
 8008b38:	4b55      	ldr	r3, [pc, #340]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b3c:	4a54      	ldr	r2, [pc, #336]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008b3e:	f023 0304 	bic.w	r3, r3, #4
 8008b42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d015      	beq.n	8008b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b4c:	f7fa feac 	bl	80038a8 <HAL_GetTick>
 8008b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b52:	e00a      	b.n	8008b6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b54:	f7fa fea8 	bl	80038a8 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d901      	bls.n	8008b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008b66:	2303      	movs	r3, #3
 8008b68:	e0cb      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b6a:	4b49      	ldr	r3, [pc, #292]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b6e:	f003 0302 	and.w	r3, r3, #2
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0ee      	beq.n	8008b54 <HAL_RCC_OscConfig+0x334>
 8008b76:	e014      	b.n	8008ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b78:	f7fa fe96 	bl	80038a8 <HAL_GetTick>
 8008b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b7e:	e00a      	b.n	8008b96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008b80:	f7fa fe92 	bl	80038a8 <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d901      	bls.n	8008b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e0b5      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008b96:	4b3e      	ldr	r3, [pc, #248]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b9a:	f003 0302 	and.w	r3, r3, #2
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d1ee      	bne.n	8008b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ba2:	7dfb      	ldrb	r3, [r7, #23]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d105      	bne.n	8008bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ba8:	4b39      	ldr	r3, [pc, #228]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bac:	4a38      	ldr	r2, [pc, #224]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 80a1 	beq.w	8008d00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008bbe:	4b34      	ldr	r3, [pc, #208]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f003 030c 	and.w	r3, r3, #12
 8008bc6:	2b08      	cmp	r3, #8
 8008bc8:	d05c      	beq.n	8008c84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d141      	bne.n	8008c56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bd2:	4b31      	ldr	r3, [pc, #196]	; (8008c98 <HAL_RCC_OscConfig+0x478>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bd8:	f7fa fe66 	bl	80038a8 <HAL_GetTick>
 8008bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bde:	e008      	b.n	8008bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008be0:	f7fa fe62 	bl	80038a8 <HAL_GetTick>
 8008be4:	4602      	mov	r2, r0
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	2b02      	cmp	r3, #2
 8008bec:	d901      	bls.n	8008bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e087      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bf2:	4b27      	ldr	r3, [pc, #156]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1f0      	bne.n	8008be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	69da      	ldr	r2, [r3, #28]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	431a      	orrs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0c:	019b      	lsls	r3, r3, #6
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c14:	085b      	lsrs	r3, r3, #1
 8008c16:	3b01      	subs	r3, #1
 8008c18:	041b      	lsls	r3, r3, #16
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c20:	061b      	lsls	r3, r3, #24
 8008c22:	491b      	ldr	r1, [pc, #108]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008c24:	4313      	orrs	r3, r2
 8008c26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c28:	4b1b      	ldr	r3, [pc, #108]	; (8008c98 <HAL_RCC_OscConfig+0x478>)
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c2e:	f7fa fe3b 	bl	80038a8 <HAL_GetTick>
 8008c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c34:	e008      	b.n	8008c48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c36:	f7fa fe37 	bl	80038a8 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d901      	bls.n	8008c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e05c      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c48:	4b11      	ldr	r3, [pc, #68]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0f0      	beq.n	8008c36 <HAL_RCC_OscConfig+0x416>
 8008c54:	e054      	b.n	8008d00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c56:	4b10      	ldr	r3, [pc, #64]	; (8008c98 <HAL_RCC_OscConfig+0x478>)
 8008c58:	2200      	movs	r2, #0
 8008c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c5c:	f7fa fe24 	bl	80038a8 <HAL_GetTick>
 8008c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c62:	e008      	b.n	8008c76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008c64:	f7fa fe20 	bl	80038a8 <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d901      	bls.n	8008c76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e045      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c76:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <HAL_RCC_OscConfig+0x470>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d1f0      	bne.n	8008c64 <HAL_RCC_OscConfig+0x444>
 8008c82:	e03d      	b.n	8008d00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d107      	bne.n	8008c9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e038      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
 8008c90:	40023800 	.word	0x40023800
 8008c94:	40007000 	.word	0x40007000
 8008c98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008c9c:	4b1b      	ldr	r3, [pc, #108]	; (8008d0c <HAL_RCC_OscConfig+0x4ec>)
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d028      	beq.n	8008cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d121      	bne.n	8008cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d11a      	bne.n	8008cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008ccc:	4013      	ands	r3, r2
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008cd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d111      	bne.n	8008cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce2:	085b      	lsrs	r3, r3, #1
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d107      	bne.n	8008cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d001      	beq.n	8008d00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e000      	b.n	8008d02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	40023800 	.word	0x40023800

08008d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e0cc      	b.n	8008ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008d24:	4b68      	ldr	r3, [pc, #416]	; (8008ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0307 	and.w	r3, r3, #7
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d90c      	bls.n	8008d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d32:	4b65      	ldr	r3, [pc, #404]	; (8008ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	b2d2      	uxtb	r2, r2
 8008d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d3a:	4b63      	ldr	r3, [pc, #396]	; (8008ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0307 	and.w	r3, r3, #7
 8008d42:	683a      	ldr	r2, [r7, #0]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d001      	beq.n	8008d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e0b8      	b.n	8008ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f003 0302 	and.w	r3, r3, #2
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d020      	beq.n	8008d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 0304 	and.w	r3, r3, #4
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d005      	beq.n	8008d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d64:	4b59      	ldr	r3, [pc, #356]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	4a58      	ldr	r2, [pc, #352]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008d6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008d6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0308 	and.w	r3, r3, #8
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d005      	beq.n	8008d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d7c:	4b53      	ldr	r3, [pc, #332]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	4a52      	ldr	r2, [pc, #328]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008d82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d88:	4b50      	ldr	r3, [pc, #320]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	494d      	ldr	r1, [pc, #308]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d044      	beq.n	8008e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d107      	bne.n	8008dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dae:	4b47      	ldr	r3, [pc, #284]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d119      	bne.n	8008dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e07f      	b.n	8008ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d003      	beq.n	8008dce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d107      	bne.n	8008dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dce:	4b3f      	ldr	r3, [pc, #252]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d109      	bne.n	8008dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e06f      	b.n	8008ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dde:	4b3b      	ldr	r3, [pc, #236]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d101      	bne.n	8008dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e067      	b.n	8008ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008dee:	4b37      	ldr	r3, [pc, #220]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f023 0203 	bic.w	r2, r3, #3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	4934      	ldr	r1, [pc, #208]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e00:	f7fa fd52 	bl	80038a8 <HAL_GetTick>
 8008e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e06:	e00a      	b.n	8008e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e08:	f7fa fd4e 	bl	80038a8 <HAL_GetTick>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	1ad3      	subs	r3, r2, r3
 8008e12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d901      	bls.n	8008e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e04f      	b.n	8008ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e1e:	4b2b      	ldr	r3, [pc, #172]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f003 020c 	and.w	r2, r3, #12
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d1eb      	bne.n	8008e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e30:	4b25      	ldr	r3, [pc, #148]	; (8008ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 0307 	and.w	r3, r3, #7
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d20c      	bcs.n	8008e58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e3e:	4b22      	ldr	r3, [pc, #136]	; (8008ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8008e40:	683a      	ldr	r2, [r7, #0]
 8008e42:	b2d2      	uxtb	r2, r2
 8008e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e46:	4b20      	ldr	r3, [pc, #128]	; (8008ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 0307 	and.w	r3, r3, #7
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d001      	beq.n	8008e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	e032      	b.n	8008ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0304 	and.w	r3, r3, #4
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d008      	beq.n	8008e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e64:	4b19      	ldr	r3, [pc, #100]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008e66:	689b      	ldr	r3, [r3, #8]
 8008e68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	4916      	ldr	r1, [pc, #88]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0308 	and.w	r3, r3, #8
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d009      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e82:	4b12      	ldr	r3, [pc, #72]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	490e      	ldr	r1, [pc, #56]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e96:	f000 f821 	bl	8008edc <HAL_RCC_GetSysClockFreq>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	4b0b      	ldr	r3, [pc, #44]	; (8008ecc <HAL_RCC_ClockConfig+0x1bc>)
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	091b      	lsrs	r3, r3, #4
 8008ea2:	f003 030f 	and.w	r3, r3, #15
 8008ea6:	490a      	ldr	r1, [pc, #40]	; (8008ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8008ea8:	5ccb      	ldrb	r3, [r1, r3]
 8008eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8008eae:	4a09      	ldr	r2, [pc, #36]	; (8008ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8008eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008eb2:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fa fa88 	bl	80033cc <HAL_InitTick>

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	40023c00 	.word	0x40023c00
 8008ecc:	40023800 	.word	0x40023800
 8008ed0:	0800de7c 	.word	0x0800de7c
 8008ed4:	20000000 	.word	0x20000000
 8008ed8:	20000004 	.word	0x20000004

08008edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ee0:	b094      	sub	sp, #80	; 0x50
 8008ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ee8:	2300      	movs	r3, #0
 8008eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eec:	2300      	movs	r3, #0
 8008eee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ef4:	4b79      	ldr	r3, [pc, #484]	; (80090dc <HAL_RCC_GetSysClockFreq+0x200>)
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	f003 030c 	and.w	r3, r3, #12
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d00d      	beq.n	8008f1c <HAL_RCC_GetSysClockFreq+0x40>
 8008f00:	2b08      	cmp	r3, #8
 8008f02:	f200 80e1 	bhi.w	80090c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d002      	beq.n	8008f10 <HAL_RCC_GetSysClockFreq+0x34>
 8008f0a:	2b04      	cmp	r3, #4
 8008f0c:	d003      	beq.n	8008f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8008f0e:	e0db      	b.n	80090c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f10:	4b73      	ldr	r3, [pc, #460]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008f12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008f14:	e0db      	b.n	80090ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008f16:	4b73      	ldr	r3, [pc, #460]	; (80090e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8008f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008f1a:	e0d8      	b.n	80090ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f1c:	4b6f      	ldr	r3, [pc, #444]	; (80090dc <HAL_RCC_GetSysClockFreq+0x200>)
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f26:	4b6d      	ldr	r3, [pc, #436]	; (80090dc <HAL_RCC_GetSysClockFreq+0x200>)
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d063      	beq.n	8008ffa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f32:	4b6a      	ldr	r3, [pc, #424]	; (80090dc <HAL_RCC_GetSysClockFreq+0x200>)
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	099b      	lsrs	r3, r3, #6
 8008f38:	2200      	movs	r2, #0
 8008f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f44:	633b      	str	r3, [r7, #48]	; 0x30
 8008f46:	2300      	movs	r3, #0
 8008f48:	637b      	str	r3, [r7, #52]	; 0x34
 8008f4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008f4e:	4622      	mov	r2, r4
 8008f50:	462b      	mov	r3, r5
 8008f52:	f04f 0000 	mov.w	r0, #0
 8008f56:	f04f 0100 	mov.w	r1, #0
 8008f5a:	0159      	lsls	r1, r3, #5
 8008f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f60:	0150      	lsls	r0, r2, #5
 8008f62:	4602      	mov	r2, r0
 8008f64:	460b      	mov	r3, r1
 8008f66:	4621      	mov	r1, r4
 8008f68:	1a51      	subs	r1, r2, r1
 8008f6a:	6139      	str	r1, [r7, #16]
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8008f72:	617b      	str	r3, [r7, #20]
 8008f74:	f04f 0200 	mov.w	r2, #0
 8008f78:	f04f 0300 	mov.w	r3, #0
 8008f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f80:	4659      	mov	r1, fp
 8008f82:	018b      	lsls	r3, r1, #6
 8008f84:	4651      	mov	r1, sl
 8008f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008f8a:	4651      	mov	r1, sl
 8008f8c:	018a      	lsls	r2, r1, #6
 8008f8e:	4651      	mov	r1, sl
 8008f90:	ebb2 0801 	subs.w	r8, r2, r1
 8008f94:	4659      	mov	r1, fp
 8008f96:	eb63 0901 	sbc.w	r9, r3, r1
 8008f9a:	f04f 0200 	mov.w	r2, #0
 8008f9e:	f04f 0300 	mov.w	r3, #0
 8008fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008fae:	4690      	mov	r8, r2
 8008fb0:	4699      	mov	r9, r3
 8008fb2:	4623      	mov	r3, r4
 8008fb4:	eb18 0303 	adds.w	r3, r8, r3
 8008fb8:	60bb      	str	r3, [r7, #8]
 8008fba:	462b      	mov	r3, r5
 8008fbc:	eb49 0303 	adc.w	r3, r9, r3
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	f04f 0200 	mov.w	r2, #0
 8008fc6:	f04f 0300 	mov.w	r3, #0
 8008fca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008fce:	4629      	mov	r1, r5
 8008fd0:	024b      	lsls	r3, r1, #9
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008fd8:	4621      	mov	r1, r4
 8008fda:	024a      	lsls	r2, r1, #9
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fe8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008fec:	f7f7 fe2c 	bl	8000c48 <__aeabi_uldivmod>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ff8:	e058      	b.n	80090ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ffa:	4b38      	ldr	r3, [pc, #224]	; (80090dc <HAL_RCC_GetSysClockFreq+0x200>)
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	099b      	lsrs	r3, r3, #6
 8009000:	2200      	movs	r2, #0
 8009002:	4618      	mov	r0, r3
 8009004:	4611      	mov	r1, r2
 8009006:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800900a:	623b      	str	r3, [r7, #32]
 800900c:	2300      	movs	r3, #0
 800900e:	627b      	str	r3, [r7, #36]	; 0x24
 8009010:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009014:	4642      	mov	r2, r8
 8009016:	464b      	mov	r3, r9
 8009018:	f04f 0000 	mov.w	r0, #0
 800901c:	f04f 0100 	mov.w	r1, #0
 8009020:	0159      	lsls	r1, r3, #5
 8009022:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009026:	0150      	lsls	r0, r2, #5
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4641      	mov	r1, r8
 800902e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009032:	4649      	mov	r1, r9
 8009034:	eb63 0b01 	sbc.w	fp, r3, r1
 8009038:	f04f 0200 	mov.w	r2, #0
 800903c:	f04f 0300 	mov.w	r3, #0
 8009040:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009044:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009048:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800904c:	ebb2 040a 	subs.w	r4, r2, sl
 8009050:	eb63 050b 	sbc.w	r5, r3, fp
 8009054:	f04f 0200 	mov.w	r2, #0
 8009058:	f04f 0300 	mov.w	r3, #0
 800905c:	00eb      	lsls	r3, r5, #3
 800905e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009062:	00e2      	lsls	r2, r4, #3
 8009064:	4614      	mov	r4, r2
 8009066:	461d      	mov	r5, r3
 8009068:	4643      	mov	r3, r8
 800906a:	18e3      	adds	r3, r4, r3
 800906c:	603b      	str	r3, [r7, #0]
 800906e:	464b      	mov	r3, r9
 8009070:	eb45 0303 	adc.w	r3, r5, r3
 8009074:	607b      	str	r3, [r7, #4]
 8009076:	f04f 0200 	mov.w	r2, #0
 800907a:	f04f 0300 	mov.w	r3, #0
 800907e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009082:	4629      	mov	r1, r5
 8009084:	028b      	lsls	r3, r1, #10
 8009086:	4621      	mov	r1, r4
 8009088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800908c:	4621      	mov	r1, r4
 800908e:	028a      	lsls	r2, r1, #10
 8009090:	4610      	mov	r0, r2
 8009092:	4619      	mov	r1, r3
 8009094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009096:	2200      	movs	r2, #0
 8009098:	61bb      	str	r3, [r7, #24]
 800909a:	61fa      	str	r2, [r7, #28]
 800909c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090a0:	f7f7 fdd2 	bl	8000c48 <__aeabi_uldivmod>
 80090a4:	4602      	mov	r2, r0
 80090a6:	460b      	mov	r3, r1
 80090a8:	4613      	mov	r3, r2
 80090aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80090ac:	4b0b      	ldr	r3, [pc, #44]	; (80090dc <HAL_RCC_GetSysClockFreq+0x200>)
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	0c1b      	lsrs	r3, r3, #16
 80090b2:	f003 0303 	and.w	r3, r3, #3
 80090b6:	3301      	adds	r3, #1
 80090b8:	005b      	lsls	r3, r3, #1
 80090ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80090bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80090be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80090c6:	e002      	b.n	80090ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80090c8:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80090ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80090cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80090ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3750      	adds	r7, #80	; 0x50
 80090d4:	46bd      	mov	sp, r7
 80090d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090da:	bf00      	nop
 80090dc:	40023800 	.word	0x40023800
 80090e0:	00f42400 	.word	0x00f42400
 80090e4:	007a1200 	.word	0x007a1200

080090e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80090e8:	b480      	push	{r7}
 80090ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80090ec:	4b03      	ldr	r3, [pc, #12]	; (80090fc <HAL_RCC_GetHCLKFreq+0x14>)
 80090ee:	681b      	ldr	r3, [r3, #0]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	20000000 	.word	0x20000000

08009100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009104:	f7ff fff0 	bl	80090e8 <HAL_RCC_GetHCLKFreq>
 8009108:	4602      	mov	r2, r0
 800910a:	4b05      	ldr	r3, [pc, #20]	; (8009120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	0a9b      	lsrs	r3, r3, #10
 8009110:	f003 0307 	and.w	r3, r3, #7
 8009114:	4903      	ldr	r1, [pc, #12]	; (8009124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009116:	5ccb      	ldrb	r3, [r1, r3]
 8009118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800911c:	4618      	mov	r0, r3
 800911e:	bd80      	pop	{r7, pc}
 8009120:	40023800 	.word	0x40023800
 8009124:	0800de8c 	.word	0x0800de8c

08009128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800912c:	f7ff ffdc 	bl	80090e8 <HAL_RCC_GetHCLKFreq>
 8009130:	4602      	mov	r2, r0
 8009132:	4b05      	ldr	r3, [pc, #20]	; (8009148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	0b5b      	lsrs	r3, r3, #13
 8009138:	f003 0307 	and.w	r3, r3, #7
 800913c:	4903      	ldr	r1, [pc, #12]	; (800914c <HAL_RCC_GetPCLK2Freq+0x24>)
 800913e:	5ccb      	ldrb	r3, [r1, r3]
 8009140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009144:	4618      	mov	r0, r3
 8009146:	bd80      	pop	{r7, pc}
 8009148:	40023800 	.word	0x40023800
 800914c:	0800de8c 	.word	0x0800de8c

08009150 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	220f      	movs	r2, #15
 800915e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009160:	4b12      	ldr	r3, [pc, #72]	; (80091ac <HAL_RCC_GetClockConfig+0x5c>)
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f003 0203 	and.w	r2, r3, #3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800916c:	4b0f      	ldr	r3, [pc, #60]	; (80091ac <HAL_RCC_GetClockConfig+0x5c>)
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009178:	4b0c      	ldr	r3, [pc, #48]	; (80091ac <HAL_RCC_GetClockConfig+0x5c>)
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009184:	4b09      	ldr	r3, [pc, #36]	; (80091ac <HAL_RCC_GetClockConfig+0x5c>)
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	08db      	lsrs	r3, r3, #3
 800918a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009192:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <HAL_RCC_GetClockConfig+0x60>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 0207 	and.w	r2, r3, #7
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	601a      	str	r2, [r3, #0]
}
 800919e:	bf00      	nop
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	40023800 	.word	0x40023800
 80091b0:	40023c00 	.word	0x40023c00

080091b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d101      	bne.n	80091c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e041      	b.n	800924a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d106      	bne.n	80091e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7f9 ff6e 	bl	80030bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2202      	movs	r2, #2
 80091e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	3304      	adds	r3, #4
 80091f0:	4619      	mov	r1, r3
 80091f2:	4610      	mov	r0, r2
 80091f4:	f000 fac4 	bl	8009780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3708      	adds	r7, #8
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
	...

08009254 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009262:	b2db      	uxtb	r3, r3
 8009264:	2b01      	cmp	r3, #1
 8009266:	d001      	beq.n	800926c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e04e      	b.n	800930a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68da      	ldr	r2, [r3, #12]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f042 0201 	orr.w	r2, r2, #1
 8009282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a23      	ldr	r2, [pc, #140]	; (8009318 <HAL_TIM_Base_Start_IT+0xc4>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d022      	beq.n	80092d4 <HAL_TIM_Base_Start_IT+0x80>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009296:	d01d      	beq.n	80092d4 <HAL_TIM_Base_Start_IT+0x80>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a1f      	ldr	r2, [pc, #124]	; (800931c <HAL_TIM_Base_Start_IT+0xc8>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d018      	beq.n	80092d4 <HAL_TIM_Base_Start_IT+0x80>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a1e      	ldr	r2, [pc, #120]	; (8009320 <HAL_TIM_Base_Start_IT+0xcc>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d013      	beq.n	80092d4 <HAL_TIM_Base_Start_IT+0x80>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a1c      	ldr	r2, [pc, #112]	; (8009324 <HAL_TIM_Base_Start_IT+0xd0>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d00e      	beq.n	80092d4 <HAL_TIM_Base_Start_IT+0x80>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a1b      	ldr	r2, [pc, #108]	; (8009328 <HAL_TIM_Base_Start_IT+0xd4>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d009      	beq.n	80092d4 <HAL_TIM_Base_Start_IT+0x80>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a19      	ldr	r2, [pc, #100]	; (800932c <HAL_TIM_Base_Start_IT+0xd8>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d004      	beq.n	80092d4 <HAL_TIM_Base_Start_IT+0x80>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a18      	ldr	r2, [pc, #96]	; (8009330 <HAL_TIM_Base_Start_IT+0xdc>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d111      	bne.n	80092f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f003 0307 	and.w	r3, r3, #7
 80092de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2b06      	cmp	r3, #6
 80092e4:	d010      	beq.n	8009308 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	681a      	ldr	r2, [r3, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f042 0201 	orr.w	r2, r2, #1
 80092f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092f6:	e007      	b.n	8009308 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f042 0201 	orr.w	r2, r2, #1
 8009306:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	40010000 	.word	0x40010000
 800931c:	40000400 	.word	0x40000400
 8009320:	40000800 	.word	0x40000800
 8009324:	40000c00 	.word	0x40000c00
 8009328:	40010400 	.word	0x40010400
 800932c:	40014000 	.word	0x40014000
 8009330:	40001800 	.word	0x40001800

08009334 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f022 0201 	bic.w	r2, r2, #1
 800934a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6a1a      	ldr	r2, [r3, #32]
 8009352:	f241 1311 	movw	r3, #4369	; 0x1111
 8009356:	4013      	ands	r3, r2
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10f      	bne.n	800937c <HAL_TIM_Base_Stop_IT+0x48>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6a1a      	ldr	r2, [r3, #32]
 8009362:	f240 4344 	movw	r3, #1092	; 0x444
 8009366:	4013      	ands	r3, r2
 8009368:	2b00      	cmp	r3, #0
 800936a:	d107      	bne.n	800937c <HAL_TIM_Base_Stop_IT+0x48>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f022 0201 	bic.w	r2, r2, #1
 800937a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b082      	sub	sp, #8
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d122      	bne.n	80093ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d11b      	bne.n	80093ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f06f 0202 	mvn.w	r2, #2
 80093be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	f003 0303 	and.w	r3, r3, #3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f9b5 	bl	8009744 <HAL_TIM_IC_CaptureCallback>
 80093da:	e005      	b.n	80093e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f9a7 	bl	8009730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f9b8 	bl	8009758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	f003 0304 	and.w	r3, r3, #4
 80093f8:	2b04      	cmp	r3, #4
 80093fa:	d122      	bne.n	8009442 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	f003 0304 	and.w	r3, r3, #4
 8009406:	2b04      	cmp	r3, #4
 8009408:	d11b      	bne.n	8009442 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f06f 0204 	mvn.w	r2, #4
 8009412:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2202      	movs	r2, #2
 8009418:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009424:	2b00      	cmp	r3, #0
 8009426:	d003      	beq.n	8009430 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f98b 	bl	8009744 <HAL_TIM_IC_CaptureCallback>
 800942e:	e005      	b.n	800943c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f97d 	bl	8009730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 f98e 	bl	8009758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	f003 0308 	and.w	r3, r3, #8
 800944c:	2b08      	cmp	r3, #8
 800944e:	d122      	bne.n	8009496 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f003 0308 	and.w	r3, r3, #8
 800945a:	2b08      	cmp	r3, #8
 800945c:	d11b      	bne.n	8009496 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f06f 0208 	mvn.w	r2, #8
 8009466:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2204      	movs	r2, #4
 800946c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	69db      	ldr	r3, [r3, #28]
 8009474:	f003 0303 	and.w	r3, r3, #3
 8009478:	2b00      	cmp	r3, #0
 800947a:	d003      	beq.n	8009484 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 f961 	bl	8009744 <HAL_TIM_IC_CaptureCallback>
 8009482:	e005      	b.n	8009490 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f953 	bl	8009730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f964 	bl	8009758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	f003 0310 	and.w	r3, r3, #16
 80094a0:	2b10      	cmp	r3, #16
 80094a2:	d122      	bne.n	80094ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	f003 0310 	and.w	r3, r3, #16
 80094ae:	2b10      	cmp	r3, #16
 80094b0:	d11b      	bne.n	80094ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f06f 0210 	mvn.w	r2, #16
 80094ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2208      	movs	r2, #8
 80094c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	69db      	ldr	r3, [r3, #28]
 80094c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d003      	beq.n	80094d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f937 	bl	8009744 <HAL_TIM_IC_CaptureCallback>
 80094d6:	e005      	b.n	80094e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f929 	bl	8009730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f93a 	bl	8009758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d10e      	bne.n	8009516 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b01      	cmp	r3, #1
 8009504:	d107      	bne.n	8009516 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f06f 0201 	mvn.w	r2, #1
 800950e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f7f9 fabb 	bl	8002a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009520:	2b80      	cmp	r3, #128	; 0x80
 8009522:	d10e      	bne.n	8009542 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952e:	2b80      	cmp	r3, #128	; 0x80
 8009530:	d107      	bne.n	8009542 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800953a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 fadf 	bl	8009b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	691b      	ldr	r3, [r3, #16]
 8009548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800954c:	2b40      	cmp	r3, #64	; 0x40
 800954e:	d10e      	bne.n	800956e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955a:	2b40      	cmp	r3, #64	; 0x40
 800955c:	d107      	bne.n	800956e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f8ff 	bl	800976c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	f003 0320 	and.w	r3, r3, #32
 8009578:	2b20      	cmp	r3, #32
 800957a:	d10e      	bne.n	800959a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b20      	cmp	r3, #32
 8009588:	d107      	bne.n	800959a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f06f 0220 	mvn.w	r2, #32
 8009592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 faa9 	bl	8009aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095ac:	2300      	movs	r3, #0
 80095ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d101      	bne.n	80095be <HAL_TIM_ConfigClockSource+0x1c>
 80095ba:	2302      	movs	r3, #2
 80095bc:	e0b4      	b.n	8009728 <HAL_TIM_ConfigClockSource+0x186>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2202      	movs	r2, #2
 80095ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80095dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095f6:	d03e      	beq.n	8009676 <HAL_TIM_ConfigClockSource+0xd4>
 80095f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095fc:	f200 8087 	bhi.w	800970e <HAL_TIM_ConfigClockSource+0x16c>
 8009600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009604:	f000 8086 	beq.w	8009714 <HAL_TIM_ConfigClockSource+0x172>
 8009608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800960c:	d87f      	bhi.n	800970e <HAL_TIM_ConfigClockSource+0x16c>
 800960e:	2b70      	cmp	r3, #112	; 0x70
 8009610:	d01a      	beq.n	8009648 <HAL_TIM_ConfigClockSource+0xa6>
 8009612:	2b70      	cmp	r3, #112	; 0x70
 8009614:	d87b      	bhi.n	800970e <HAL_TIM_ConfigClockSource+0x16c>
 8009616:	2b60      	cmp	r3, #96	; 0x60
 8009618:	d050      	beq.n	80096bc <HAL_TIM_ConfigClockSource+0x11a>
 800961a:	2b60      	cmp	r3, #96	; 0x60
 800961c:	d877      	bhi.n	800970e <HAL_TIM_ConfigClockSource+0x16c>
 800961e:	2b50      	cmp	r3, #80	; 0x50
 8009620:	d03c      	beq.n	800969c <HAL_TIM_ConfigClockSource+0xfa>
 8009622:	2b50      	cmp	r3, #80	; 0x50
 8009624:	d873      	bhi.n	800970e <HAL_TIM_ConfigClockSource+0x16c>
 8009626:	2b40      	cmp	r3, #64	; 0x40
 8009628:	d058      	beq.n	80096dc <HAL_TIM_ConfigClockSource+0x13a>
 800962a:	2b40      	cmp	r3, #64	; 0x40
 800962c:	d86f      	bhi.n	800970e <HAL_TIM_ConfigClockSource+0x16c>
 800962e:	2b30      	cmp	r3, #48	; 0x30
 8009630:	d064      	beq.n	80096fc <HAL_TIM_ConfigClockSource+0x15a>
 8009632:	2b30      	cmp	r3, #48	; 0x30
 8009634:	d86b      	bhi.n	800970e <HAL_TIM_ConfigClockSource+0x16c>
 8009636:	2b20      	cmp	r3, #32
 8009638:	d060      	beq.n	80096fc <HAL_TIM_ConfigClockSource+0x15a>
 800963a:	2b20      	cmp	r3, #32
 800963c:	d867      	bhi.n	800970e <HAL_TIM_ConfigClockSource+0x16c>
 800963e:	2b00      	cmp	r3, #0
 8009640:	d05c      	beq.n	80096fc <HAL_TIM_ConfigClockSource+0x15a>
 8009642:	2b10      	cmp	r3, #16
 8009644:	d05a      	beq.n	80096fc <HAL_TIM_ConfigClockSource+0x15a>
 8009646:	e062      	b.n	800970e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6818      	ldr	r0, [r3, #0]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	6899      	ldr	r1, [r3, #8]
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	685a      	ldr	r2, [r3, #4]
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	f000 f9ac 	bl	80099b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800966a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	609a      	str	r2, [r3, #8]
      break;
 8009674:	e04f      	b.n	8009716 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6818      	ldr	r0, [r3, #0]
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	6899      	ldr	r1, [r3, #8]
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	685a      	ldr	r2, [r3, #4]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	f000 f995 	bl	80099b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	689a      	ldr	r2, [r3, #8]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009698:	609a      	str	r2, [r3, #8]
      break;
 800969a:	e03c      	b.n	8009716 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6818      	ldr	r0, [r3, #0]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	6859      	ldr	r1, [r3, #4]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	461a      	mov	r2, r3
 80096aa:	f000 f909 	bl	80098c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	2150      	movs	r1, #80	; 0x50
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 f962 	bl	800997e <TIM_ITRx_SetConfig>
      break;
 80096ba:	e02c      	b.n	8009716 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6818      	ldr	r0, [r3, #0]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	6859      	ldr	r1, [r3, #4]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	461a      	mov	r2, r3
 80096ca:	f000 f928 	bl	800991e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	2160      	movs	r1, #96	; 0x60
 80096d4:	4618      	mov	r0, r3
 80096d6:	f000 f952 	bl	800997e <TIM_ITRx_SetConfig>
      break;
 80096da:	e01c      	b.n	8009716 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6818      	ldr	r0, [r3, #0]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	6859      	ldr	r1, [r3, #4]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	461a      	mov	r2, r3
 80096ea:	f000 f8e9 	bl	80098c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2140      	movs	r1, #64	; 0x40
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 f942 	bl	800997e <TIM_ITRx_SetConfig>
      break;
 80096fa:	e00c      	b.n	8009716 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4619      	mov	r1, r3
 8009706:	4610      	mov	r0, r2
 8009708:	f000 f939 	bl	800997e <TIM_ITRx_SetConfig>
      break;
 800970c:	e003      	b.n	8009716 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	73fb      	strb	r3, [r7, #15]
      break;
 8009712:	e000      	b.n	8009716 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009714:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2201      	movs	r2, #1
 800971a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009726:	7bfb      	ldrb	r3, [r7, #15]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4a40      	ldr	r2, [pc, #256]	; (8009894 <TIM_Base_SetConfig+0x114>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d013      	beq.n	80097c0 <TIM_Base_SetConfig+0x40>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800979e:	d00f      	beq.n	80097c0 <TIM_Base_SetConfig+0x40>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a3d      	ldr	r2, [pc, #244]	; (8009898 <TIM_Base_SetConfig+0x118>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d00b      	beq.n	80097c0 <TIM_Base_SetConfig+0x40>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a3c      	ldr	r2, [pc, #240]	; (800989c <TIM_Base_SetConfig+0x11c>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d007      	beq.n	80097c0 <TIM_Base_SetConfig+0x40>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a3b      	ldr	r2, [pc, #236]	; (80098a0 <TIM_Base_SetConfig+0x120>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d003      	beq.n	80097c0 <TIM_Base_SetConfig+0x40>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a3a      	ldr	r2, [pc, #232]	; (80098a4 <TIM_Base_SetConfig+0x124>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d108      	bne.n	80097d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	68fa      	ldr	r2, [r7, #12]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a2f      	ldr	r2, [pc, #188]	; (8009894 <TIM_Base_SetConfig+0x114>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d02b      	beq.n	8009832 <TIM_Base_SetConfig+0xb2>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097e0:	d027      	beq.n	8009832 <TIM_Base_SetConfig+0xb2>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a2c      	ldr	r2, [pc, #176]	; (8009898 <TIM_Base_SetConfig+0x118>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d023      	beq.n	8009832 <TIM_Base_SetConfig+0xb2>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a2b      	ldr	r2, [pc, #172]	; (800989c <TIM_Base_SetConfig+0x11c>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d01f      	beq.n	8009832 <TIM_Base_SetConfig+0xb2>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a2a      	ldr	r2, [pc, #168]	; (80098a0 <TIM_Base_SetConfig+0x120>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d01b      	beq.n	8009832 <TIM_Base_SetConfig+0xb2>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a29      	ldr	r2, [pc, #164]	; (80098a4 <TIM_Base_SetConfig+0x124>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d017      	beq.n	8009832 <TIM_Base_SetConfig+0xb2>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a28      	ldr	r2, [pc, #160]	; (80098a8 <TIM_Base_SetConfig+0x128>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d013      	beq.n	8009832 <TIM_Base_SetConfig+0xb2>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a27      	ldr	r2, [pc, #156]	; (80098ac <TIM_Base_SetConfig+0x12c>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d00f      	beq.n	8009832 <TIM_Base_SetConfig+0xb2>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a26      	ldr	r2, [pc, #152]	; (80098b0 <TIM_Base_SetConfig+0x130>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d00b      	beq.n	8009832 <TIM_Base_SetConfig+0xb2>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a25      	ldr	r2, [pc, #148]	; (80098b4 <TIM_Base_SetConfig+0x134>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d007      	beq.n	8009832 <TIM_Base_SetConfig+0xb2>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a24      	ldr	r2, [pc, #144]	; (80098b8 <TIM_Base_SetConfig+0x138>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d003      	beq.n	8009832 <TIM_Base_SetConfig+0xb2>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a23      	ldr	r2, [pc, #140]	; (80098bc <TIM_Base_SetConfig+0x13c>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d108      	bne.n	8009844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	4313      	orrs	r3, r2
 8009842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	4313      	orrs	r3, r2
 8009850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a0a      	ldr	r2, [pc, #40]	; (8009894 <TIM_Base_SetConfig+0x114>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d003      	beq.n	8009878 <TIM_Base_SetConfig+0xf8>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a0c      	ldr	r2, [pc, #48]	; (80098a4 <TIM_Base_SetConfig+0x124>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d103      	bne.n	8009880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	691a      	ldr	r2, [r3, #16]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2201      	movs	r2, #1
 8009884:	615a      	str	r2, [r3, #20]
}
 8009886:	bf00      	nop
 8009888:	3714      	adds	r7, #20
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	40010000 	.word	0x40010000
 8009898:	40000400 	.word	0x40000400
 800989c:	40000800 	.word	0x40000800
 80098a0:	40000c00 	.word	0x40000c00
 80098a4:	40010400 	.word	0x40010400
 80098a8:	40014000 	.word	0x40014000
 80098ac:	40014400 	.word	0x40014400
 80098b0:	40014800 	.word	0x40014800
 80098b4:	40001800 	.word	0x40001800
 80098b8:	40001c00 	.word	0x40001c00
 80098bc:	40002000 	.word	0x40002000

080098c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	f023 0201 	bic.w	r2, r3, #1
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	011b      	lsls	r3, r3, #4
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f023 030a 	bic.w	r3, r3, #10
 80098fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	4313      	orrs	r3, r2
 8009904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	621a      	str	r2, [r3, #32]
}
 8009912:	bf00      	nop
 8009914:	371c      	adds	r7, #28
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800991e:	b480      	push	{r7}
 8009920:	b087      	sub	sp, #28
 8009922:	af00      	add	r7, sp, #0
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	60b9      	str	r1, [r7, #8]
 8009928:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	f023 0210 	bic.w	r2, r3, #16
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6a1b      	ldr	r3, [r3, #32]
 8009940:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	031b      	lsls	r3, r3, #12
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	4313      	orrs	r3, r2
 8009952:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800995a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	011b      	lsls	r3, r3, #4
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	4313      	orrs	r3, r2
 8009964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	693a      	ldr	r2, [r7, #16]
 8009970:	621a      	str	r2, [r3, #32]
}
 8009972:	bf00      	nop
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800997e:	b480      	push	{r7}
 8009980:	b085      	sub	sp, #20
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009994:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4313      	orrs	r3, r2
 800999c:	f043 0307 	orr.w	r3, r3, #7
 80099a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	609a      	str	r2, [r3, #8]
}
 80099a8:	bf00      	nop
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b087      	sub	sp, #28
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	607a      	str	r2, [r7, #4]
 80099c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	689b      	ldr	r3, [r3, #8]
 80099c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	021a      	lsls	r2, r3, #8
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	431a      	orrs	r2, r3
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	4313      	orrs	r3, r2
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	4313      	orrs	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	609a      	str	r2, [r3, #8]
}
 80099e8:	bf00      	nop
 80099ea:	371c      	adds	r7, #28
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d101      	bne.n	8009a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a08:	2302      	movs	r3, #2
 8009a0a:	e05a      	b.n	8009ac2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2202      	movs	r2, #2
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a21      	ldr	r2, [pc, #132]	; (8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d022      	beq.n	8009a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a58:	d01d      	beq.n	8009a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a1d      	ldr	r2, [pc, #116]	; (8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d018      	beq.n	8009a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a1b      	ldr	r2, [pc, #108]	; (8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d013      	beq.n	8009a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a1a      	ldr	r2, [pc, #104]	; (8009adc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d00e      	beq.n	8009a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a18      	ldr	r2, [pc, #96]	; (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d009      	beq.n	8009a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a17      	ldr	r2, [pc, #92]	; (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d004      	beq.n	8009a96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a15      	ldr	r2, [pc, #84]	; (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d10c      	bne.n	8009ab0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3714      	adds	r7, #20
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	40010000 	.word	0x40010000
 8009ad4:	40000400 	.word	0x40000400
 8009ad8:	40000800 	.word	0x40000800
 8009adc:	40000c00 	.word	0x40000c00
 8009ae0:	40010400 	.word	0x40010400
 8009ae4:	40014000 	.word	0x40014000
 8009ae8:	40001800 	.word	0x40001800

08009aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d101      	bne.n	8009b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	e03f      	b.n	8009ba6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d106      	bne.n	8009b40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f7f9 fb54 	bl	80031e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2224      	movs	r2, #36	; 0x24
 8009b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68da      	ldr	r2, [r3, #12]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fec7 	bl	800a8ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	691a      	ldr	r2, [r3, #16]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	695a      	ldr	r2, [r3, #20]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68da      	ldr	r2, [r3, #12]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2220      	movs	r2, #32
 8009b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2220      	movs	r2, #32
 8009ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b08a      	sub	sp, #40	; 0x28
 8009bb2:	af02      	add	r7, sp, #8
 8009bb4:	60f8      	str	r0, [r7, #12]
 8009bb6:	60b9      	str	r1, [r7, #8]
 8009bb8:	603b      	str	r3, [r7, #0]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	2b20      	cmp	r3, #32
 8009bcc:	d17c      	bne.n	8009cc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d002      	beq.n	8009bda <HAL_UART_Transmit+0x2c>
 8009bd4:	88fb      	ldrh	r3, [r7, #6]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e075      	b.n	8009cca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d101      	bne.n	8009bec <HAL_UART_Transmit+0x3e>
 8009be8:	2302      	movs	r3, #2
 8009bea:	e06e      	b.n	8009cca <HAL_UART_Transmit+0x11c>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2221      	movs	r2, #33	; 0x21
 8009bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c02:	f7f9 fe51 	bl	80038a8 <HAL_GetTick>
 8009c06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	88fa      	ldrh	r2, [r7, #6]
 8009c0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	88fa      	ldrh	r2, [r7, #6]
 8009c12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c1c:	d108      	bne.n	8009c30 <HAL_UART_Transmit+0x82>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d104      	bne.n	8009c30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009c26:	2300      	movs	r3, #0
 8009c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	61bb      	str	r3, [r7, #24]
 8009c2e:	e003      	b.n	8009c38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c34:	2300      	movs	r3, #0
 8009c36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009c40:	e02a      	b.n	8009c98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	2180      	movs	r1, #128	; 0x80
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 fc1c 	bl	800a48a <UART_WaitOnFlagUntilTimeout>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009c58:	2303      	movs	r3, #3
 8009c5a:	e036      	b.n	8009cca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d10b      	bne.n	8009c7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	881b      	ldrh	r3, [r3, #0]
 8009c66:	461a      	mov	r2, r3
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	3302      	adds	r3, #2
 8009c76:	61bb      	str	r3, [r7, #24]
 8009c78:	e007      	b.n	8009c8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	781a      	ldrb	r2, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	3301      	adds	r3, #1
 8009c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	3b01      	subs	r3, #1
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1cf      	bne.n	8009c42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	9300      	str	r3, [sp, #0]
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	2140      	movs	r1, #64	; 0x40
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 fbec 	bl	800a48a <UART_WaitOnFlagUntilTimeout>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d001      	beq.n	8009cbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e006      	b.n	8009cca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2220      	movs	r2, #32
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	e000      	b.n	8009cca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009cc8:	2302      	movs	r3, #2
  }
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3720      	adds	r7, #32
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
	...

08009cd4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b08c      	sub	sp, #48	; 0x30
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b20      	cmp	r3, #32
 8009cec:	d165      	bne.n	8009dba <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d002      	beq.n	8009cfa <HAL_UART_Transmit_DMA+0x26>
 8009cf4:	88fb      	ldrh	r3, [r7, #6]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d101      	bne.n	8009cfe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e05e      	b.n	8009dbc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d101      	bne.n	8009d0c <HAL_UART_Transmit_DMA+0x38>
 8009d08:	2302      	movs	r3, #2
 8009d0a:	e057      	b.n	8009dbc <HAL_UART_Transmit_DMA+0xe8>
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009d14:	68ba      	ldr	r2, [r7, #8]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	88fa      	ldrh	r2, [r7, #6]
 8009d1e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	88fa      	ldrh	r2, [r7, #6]
 8009d24:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2221      	movs	r2, #33	; 0x21
 8009d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d38:	4a22      	ldr	r2, [pc, #136]	; (8009dc4 <HAL_UART_Transmit_DMA+0xf0>)
 8009d3a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d40:	4a21      	ldr	r2, [pc, #132]	; (8009dc8 <HAL_UART_Transmit_DMA+0xf4>)
 8009d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d48:	4a20      	ldr	r2, [pc, #128]	; (8009dcc <HAL_UART_Transmit_DMA+0xf8>)
 8009d4a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d50:	2200      	movs	r2, #0
 8009d52:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009d54:	f107 0308 	add.w	r3, r7, #8
 8009d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d60:	6819      	ldr	r1, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3304      	adds	r3, #4
 8009d68:	461a      	mov	r2, r3
 8009d6a:	88fb      	ldrh	r3, [r7, #6]
 8009d6c:	f7fa ffa2 	bl	8004cb4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d78:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3314      	adds	r3, #20
 8009d88:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	e853 3f00 	ldrex	r3, [r3]
 8009d90:	617b      	str	r3, [r7, #20]
   return(result);
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	3314      	adds	r3, #20
 8009da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009da2:	627a      	str	r2, [r7, #36]	; 0x24
 8009da4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da6:	6a39      	ldr	r1, [r7, #32]
 8009da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009daa:	e841 2300 	strex	r3, r2, [r1]
 8009dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d1e5      	bne.n	8009d82 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009db6:	2300      	movs	r3, #0
 8009db8:	e000      	b.n	8009dbc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009dba:	2302      	movs	r3, #2
  }
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3730      	adds	r7, #48	; 0x30
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	0800a341 	.word	0x0800a341
 8009dc8:	0800a3db 	.word	0x0800a3db
 8009dcc:	0800a3f7 	.word	0x0800a3f7

08009dd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b0ba      	sub	sp, #232	; 0xe8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e06:	f003 030f 	and.w	r3, r3, #15
 8009e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10f      	bne.n	8009e36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e1a:	f003 0320 	and.w	r3, r3, #32
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d009      	beq.n	8009e36 <HAL_UART_IRQHandler+0x66>
 8009e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e26:	f003 0320 	and.w	r3, r3, #32
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fca0 	bl	800a774 <UART_Receive_IT>
      return;
 8009e34:	e256      	b.n	800a2e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	f000 80de 	beq.w	8009ffc <HAL_UART_IRQHandler+0x22c>
 8009e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d106      	bne.n	8009e5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 80d1 	beq.w	8009ffc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00b      	beq.n	8009e7e <HAL_UART_IRQHandler+0xae>
 8009e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d005      	beq.n	8009e7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e76:	f043 0201 	orr.w	r2, r3, #1
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e82:	f003 0304 	and.w	r3, r3, #4
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00b      	beq.n	8009ea2 <HAL_UART_IRQHandler+0xd2>
 8009e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d005      	beq.n	8009ea2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9a:	f043 0202 	orr.w	r2, r3, #2
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea6:	f003 0302 	and.w	r3, r3, #2
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <HAL_UART_IRQHandler+0xf6>
 8009eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009eb2:	f003 0301 	and.w	r3, r3, #1
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d005      	beq.n	8009ec6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	f043 0204 	orr.w	r2, r3, #4
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eca:	f003 0308 	and.w	r3, r3, #8
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d011      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x126>
 8009ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ed6:	f003 0320 	and.w	r3, r3, #32
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d105      	bne.n	8009eea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d005      	beq.n	8009ef6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eee:	f043 0208 	orr.w	r2, r3, #8
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 81ed 	beq.w	800a2da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f04:	f003 0320 	and.w	r3, r3, #32
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d008      	beq.n	8009f1e <HAL_UART_IRQHandler+0x14e>
 8009f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f10:	f003 0320 	and.w	r3, r3, #32
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d002      	beq.n	8009f1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f000 fc2b 	bl	800a774 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	695b      	ldr	r3, [r3, #20]
 8009f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f28:	2b40      	cmp	r3, #64	; 0x40
 8009f2a:	bf0c      	ite	eq
 8009f2c:	2301      	moveq	r3, #1
 8009f2e:	2300      	movne	r3, #0
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3a:	f003 0308 	and.w	r3, r3, #8
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d103      	bne.n	8009f4a <HAL_UART_IRQHandler+0x17a>
 8009f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d04f      	beq.n	8009fea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 fb33 	bl	800a5b6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f5a:	2b40      	cmp	r3, #64	; 0x40
 8009f5c:	d141      	bne.n	8009fe2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	3314      	adds	r3, #20
 8009f64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f6c:	e853 3f00 	ldrex	r3, [r3]
 8009f70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	3314      	adds	r3, #20
 8009f86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f9a:	e841 2300 	strex	r3, r2, [r1]
 8009f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1d9      	bne.n	8009f5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d013      	beq.n	8009fda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb6:	4a7d      	ldr	r2, [pc, #500]	; (800a1ac <HAL_UART_IRQHandler+0x3dc>)
 8009fb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fa ff40 	bl	8004e44 <HAL_DMA_Abort_IT>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d016      	beq.n	8009ff8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd8:	e00e      	b.n	8009ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f99a 	bl	800a314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe0:	e00a      	b.n	8009ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 f996 	bl	800a314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe8:	e006      	b.n	8009ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f992 	bl	800a314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009ff6:	e170      	b.n	800a2da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ff8:	bf00      	nop
    return;
 8009ffa:	e16e      	b.n	800a2da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a000:	2b01      	cmp	r3, #1
 800a002:	f040 814a 	bne.w	800a29a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a00a:	f003 0310 	and.w	r3, r3, #16
 800a00e:	2b00      	cmp	r3, #0
 800a010:	f000 8143 	beq.w	800a29a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a018:	f003 0310 	and.w	r3, r3, #16
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f000 813c 	beq.w	800a29a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a022:	2300      	movs	r3, #0
 800a024:	60bb      	str	r3, [r7, #8]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	60bb      	str	r3, [r7, #8]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	60bb      	str	r3, [r7, #8]
 800a036:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a042:	2b40      	cmp	r3, #64	; 0x40
 800a044:	f040 80b4 	bne.w	800a1b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 8140 	beq.w	800a2de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a066:	429a      	cmp	r2, r3
 800a068:	f080 8139 	bcs.w	800a2de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a072:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a07e:	f000 8088 	beq.w	800a192 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	330c      	adds	r3, #12
 800a088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a090:	e853 3f00 	ldrex	r3, [r3]
 800a094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a09c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	330c      	adds	r3, #12
 800a0aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a0ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a0b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a0ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a0be:	e841 2300 	strex	r3, r2, [r1]
 800a0c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a0c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1d9      	bne.n	800a082 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	3314      	adds	r3, #20
 800a0d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0d8:	e853 3f00 	ldrex	r3, [r3]
 800a0dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0e0:	f023 0301 	bic.w	r3, r3, #1
 800a0e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3314      	adds	r3, #20
 800a0ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a0f2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a0f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0fe:	e841 2300 	strex	r3, r2, [r1]
 800a102:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a106:	2b00      	cmp	r3, #0
 800a108:	d1e1      	bne.n	800a0ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	3314      	adds	r3, #20
 800a110:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a112:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a114:	e853 3f00 	ldrex	r3, [r3]
 800a118:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a11a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a11c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	3314      	adds	r3, #20
 800a12a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a12e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a130:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a134:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a13c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e3      	bne.n	800a10a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2220      	movs	r2, #32
 800a146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	330c      	adds	r3, #12
 800a156:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a15a:	e853 3f00 	ldrex	r3, [r3]
 800a15e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a162:	f023 0310 	bic.w	r3, r3, #16
 800a166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	330c      	adds	r3, #12
 800a170:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a174:	65ba      	str	r2, [r7, #88]	; 0x58
 800a176:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a178:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a17a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a17c:	e841 2300 	strex	r3, r2, [r1]
 800a180:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a184:	2b00      	cmp	r3, #0
 800a186:	d1e3      	bne.n	800a150 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fa fde9 	bl	8004d64 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f8c0 	bl	800a328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a1a8:	e099      	b.n	800a2de <HAL_UART_IRQHandler+0x50e>
 800a1aa:	bf00      	nop
 800a1ac:	0800a67d 	.word	0x0800a67d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	1ad3      	subs	r3, r2, r3
 800a1bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 808b 	beq.w	800a2e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a1cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 8086 	beq.w	800a2e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	330c      	adds	r3, #12
 800a1dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e0:	e853 3f00 	ldrex	r3, [r3]
 800a1e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	330c      	adds	r3, #12
 800a1f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a1fa:	647a      	str	r2, [r7, #68]	; 0x44
 800a1fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a200:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a202:	e841 2300 	strex	r3, r2, [r1]
 800a206:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d1e3      	bne.n	800a1d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3314      	adds	r3, #20
 800a214:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	e853 3f00 	ldrex	r3, [r3]
 800a21c:	623b      	str	r3, [r7, #32]
   return(result);
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	f023 0301 	bic.w	r3, r3, #1
 800a224:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3314      	adds	r3, #20
 800a22e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a232:	633a      	str	r2, [r7, #48]	; 0x30
 800a234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e3      	bne.n	800a20e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2220      	movs	r2, #32
 800a24a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2200      	movs	r2, #0
 800a252:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	330c      	adds	r3, #12
 800a25a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	e853 3f00 	ldrex	r3, [r3]
 800a262:	60fb      	str	r3, [r7, #12]
   return(result);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f023 0310 	bic.w	r3, r3, #16
 800a26a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	330c      	adds	r3, #12
 800a274:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a278:	61fa      	str	r2, [r7, #28]
 800a27a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27c:	69b9      	ldr	r1, [r7, #24]
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	e841 2300 	strex	r3, r2, [r1]
 800a284:	617b      	str	r3, [r7, #20]
   return(result);
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1e3      	bne.n	800a254 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a28c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a290:	4619      	mov	r1, r3
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f848 	bl	800a328 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a298:	e023      	b.n	800a2e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d009      	beq.n	800a2ba <HAL_UART_IRQHandler+0x4ea>
 800a2a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f9f6 	bl	800a6a4 <UART_Transmit_IT>
    return;
 800a2b8:	e014      	b.n	800a2e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a2ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d00e      	beq.n	800a2e4 <HAL_UART_IRQHandler+0x514>
 800a2c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d008      	beq.n	800a2e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fa36 	bl	800a744 <UART_EndTransmit_IT>
    return;
 800a2d8:	e004      	b.n	800a2e4 <HAL_UART_IRQHandler+0x514>
    return;
 800a2da:	bf00      	nop
 800a2dc:	e002      	b.n	800a2e4 <HAL_UART_IRQHandler+0x514>
      return;
 800a2de:	bf00      	nop
 800a2e0:	e000      	b.n	800a2e4 <HAL_UART_IRQHandler+0x514>
      return;
 800a2e2:	bf00      	nop
  }
}
 800a2e4:	37e8      	adds	r7, #232	; 0xe8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop

0800a2ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a308:	bf00      	nop
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr

0800a314 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a314:	b480      	push	{r7}
 800a316:	b083      	sub	sp, #12
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	460b      	mov	r3, r1
 800a332:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b090      	sub	sp, #64	; 0x40
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d137      	bne.n	800a3cc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a35e:	2200      	movs	r2, #0
 800a360:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3314      	adds	r3, #20
 800a368:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	e853 3f00 	ldrex	r3, [r3]
 800a370:	623b      	str	r3, [r7, #32]
   return(result);
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a378:	63bb      	str	r3, [r7, #56]	; 0x38
 800a37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3314      	adds	r3, #20
 800a380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a382:	633a      	str	r2, [r7, #48]	; 0x30
 800a384:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a38a:	e841 2300 	strex	r3, r2, [r1]
 800a38e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1e5      	bne.n	800a362 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	330c      	adds	r3, #12
 800a39c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	e853 3f00 	ldrex	r3, [r3]
 800a3a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ac:	637b      	str	r3, [r7, #52]	; 0x34
 800a3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	330c      	adds	r3, #12
 800a3b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3b6:	61fa      	str	r2, [r7, #28]
 800a3b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ba:	69b9      	ldr	r1, [r7, #24]
 800a3bc:	69fa      	ldr	r2, [r7, #28]
 800a3be:	e841 2300 	strex	r3, r2, [r1]
 800a3c2:	617b      	str	r3, [r7, #20]
   return(result);
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d1e5      	bne.n	800a396 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3ca:	e002      	b.n	800a3d2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a3cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a3ce:	f7f7 f995 	bl	80016fc <HAL_UART_TxCpltCallback>
}
 800a3d2:	bf00      	nop
 800a3d4:	3740      	adds	r7, #64	; 0x40
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}

0800a3da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f7ff ff7f 	bl	800a2ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a3ee:	bf00      	nop
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b084      	sub	sp, #16
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a3fe:	2300      	movs	r3, #0
 800a400:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a406:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	695b      	ldr	r3, [r3, #20]
 800a40e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a412:	2b80      	cmp	r3, #128	; 0x80
 800a414:	bf0c      	ite	eq
 800a416:	2301      	moveq	r3, #1
 800a418:	2300      	movne	r3, #0
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b21      	cmp	r3, #33	; 0x21
 800a428:	d108      	bne.n	800a43c <UART_DMAError+0x46>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	2200      	movs	r2, #0
 800a434:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a436:	68b8      	ldr	r0, [r7, #8]
 800a438:	f000 f895 	bl	800a566 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a446:	2b40      	cmp	r3, #64	; 0x40
 800a448:	bf0c      	ite	eq
 800a44a:	2301      	moveq	r3, #1
 800a44c:	2300      	movne	r3, #0
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b22      	cmp	r3, #34	; 0x22
 800a45c:	d108      	bne.n	800a470 <UART_DMAError+0x7a>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d005      	beq.n	800a470 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	2200      	movs	r2, #0
 800a468:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a46a:	68b8      	ldr	r0, [r7, #8]
 800a46c:	f000 f8a3 	bl	800a5b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a474:	f043 0210 	orr.w	r2, r3, #16
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a47c:	68b8      	ldr	r0, [r7, #8]
 800a47e:	f7ff ff49 	bl	800a314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a482:	bf00      	nop
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b090      	sub	sp, #64	; 0x40
 800a48e:	af00      	add	r7, sp, #0
 800a490:	60f8      	str	r0, [r7, #12]
 800a492:	60b9      	str	r1, [r7, #8]
 800a494:	603b      	str	r3, [r7, #0]
 800a496:	4613      	mov	r3, r2
 800a498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a49a:	e050      	b.n	800a53e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a49c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a49e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4a2:	d04c      	beq.n	800a53e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a4a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d007      	beq.n	800a4ba <UART_WaitOnFlagUntilTimeout+0x30>
 800a4aa:	f7f9 f9fd 	bl	80038a8 <HAL_GetTick>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d241      	bcs.n	800a53e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	330c      	adds	r3, #12
 800a4c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c4:	e853 3f00 	ldrex	r3, [r3]
 800a4c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	330c      	adds	r3, #12
 800a4d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4da:	637a      	str	r2, [r7, #52]	; 0x34
 800a4dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4e2:	e841 2300 	strex	r3, r2, [r1]
 800a4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1e5      	bne.n	800a4ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3314      	adds	r3, #20
 800a4f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	e853 3f00 	ldrex	r3, [r3]
 800a4fc:	613b      	str	r3, [r7, #16]
   return(result);
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f023 0301 	bic.w	r3, r3, #1
 800a504:	63bb      	str	r3, [r7, #56]	; 0x38
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	3314      	adds	r3, #20
 800a50c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a50e:	623a      	str	r2, [r7, #32]
 800a510:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a512:	69f9      	ldr	r1, [r7, #28]
 800a514:	6a3a      	ldr	r2, [r7, #32]
 800a516:	e841 2300 	strex	r3, r2, [r1]
 800a51a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1e5      	bne.n	800a4ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2220      	movs	r2, #32
 800a526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2220      	movs	r2, #32
 800a52e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a53a:	2303      	movs	r3, #3
 800a53c:	e00f      	b.n	800a55e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	4013      	ands	r3, r2
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	bf0c      	ite	eq
 800a54e:	2301      	moveq	r3, #1
 800a550:	2300      	movne	r3, #0
 800a552:	b2db      	uxtb	r3, r3
 800a554:	461a      	mov	r2, r3
 800a556:	79fb      	ldrb	r3, [r7, #7]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d09f      	beq.n	800a49c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3740      	adds	r7, #64	; 0x40
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a566:	b480      	push	{r7}
 800a568:	b089      	sub	sp, #36	; 0x24
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	330c      	adds	r3, #12
 800a574:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a584:	61fb      	str	r3, [r7, #28]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	330c      	adds	r3, #12
 800a58c:	69fa      	ldr	r2, [r7, #28]
 800a58e:	61ba      	str	r2, [r7, #24]
 800a590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	6979      	ldr	r1, [r7, #20]
 800a594:	69ba      	ldr	r2, [r7, #24]
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	613b      	str	r3, [r7, #16]
   return(result);
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e5      	bne.n	800a56e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2220      	movs	r2, #32
 800a5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a5aa:	bf00      	nop
 800a5ac:	3724      	adds	r7, #36	; 0x24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b095      	sub	sp, #84	; 0x54
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	330c      	adds	r3, #12
 800a5c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c8:	e853 3f00 	ldrex	r3, [r3]
 800a5cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	330c      	adds	r3, #12
 800a5dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a5de:	643a      	str	r2, [r7, #64]	; 0x40
 800a5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5e6:	e841 2300 	strex	r3, r2, [r1]
 800a5ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e5      	bne.n	800a5be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3314      	adds	r3, #20
 800a5f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	e853 3f00 	ldrex	r3, [r3]
 800a600:	61fb      	str	r3, [r7, #28]
   return(result);
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	f023 0301 	bic.w	r3, r3, #1
 800a608:	64bb      	str	r3, [r7, #72]	; 0x48
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	3314      	adds	r3, #20
 800a610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a612:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a61a:	e841 2300 	strex	r3, r2, [r1]
 800a61e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1e5      	bne.n	800a5f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d119      	bne.n	800a662 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	330c      	adds	r3, #12
 800a634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	e853 3f00 	ldrex	r3, [r3]
 800a63c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	f023 0310 	bic.w	r3, r3, #16
 800a644:	647b      	str	r3, [r7, #68]	; 0x44
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	330c      	adds	r3, #12
 800a64c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a64e:	61ba      	str	r2, [r7, #24]
 800a650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a652:	6979      	ldr	r1, [r7, #20]
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	e841 2300 	strex	r3, r2, [r1]
 800a65a:	613b      	str	r3, [r7, #16]
   return(result);
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1e5      	bne.n	800a62e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2220      	movs	r2, #32
 800a666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a670:	bf00      	nop
 800a672:	3754      	adds	r7, #84	; 0x54
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a688:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	2200      	movs	r2, #0
 800a68e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a696:	68f8      	ldr	r0, [r7, #12]
 800a698:	f7ff fe3c 	bl	800a314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a69c:	bf00      	nop
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b21      	cmp	r3, #33	; 0x21
 800a6b6:	d13e      	bne.n	800a736 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6c0:	d114      	bne.n	800a6ec <UART_Transmit_IT+0x48>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d110      	bne.n	800a6ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	881b      	ldrh	r3, [r3, #0]
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	1c9a      	adds	r2, r3, #2
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	621a      	str	r2, [r3, #32]
 800a6ea:	e008      	b.n	800a6fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	1c59      	adds	r1, r3, #1
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	6211      	str	r1, [r2, #32]
 800a6f6:	781a      	ldrb	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a702:	b29b      	uxth	r3, r3
 800a704:	3b01      	subs	r3, #1
 800a706:	b29b      	uxth	r3, r3
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	4619      	mov	r1, r3
 800a70c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10f      	bne.n	800a732 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a720:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	68da      	ldr	r2, [r3, #12]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a730:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a732:	2300      	movs	r3, #0
 800a734:	e000      	b.n	800a738 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a736:	2302      	movs	r3, #2
  }
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b082      	sub	sp, #8
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	68da      	ldr	r2, [r3, #12]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a75a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2220      	movs	r2, #32
 800a760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7f6 ffc9 	bl	80016fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a76a:	2300      	movs	r3, #0
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b08c      	sub	sp, #48	; 0x30
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a782:	b2db      	uxtb	r3, r3
 800a784:	2b22      	cmp	r3, #34	; 0x22
 800a786:	f040 80ab 	bne.w	800a8e0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a792:	d117      	bne.n	800a7c4 <UART_Receive_IT+0x50>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	691b      	ldr	r3, [r3, #16]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d113      	bne.n	800a7c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a79c:	2300      	movs	r3, #0
 800a79e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7bc:	1c9a      	adds	r2, r3, #2
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	629a      	str	r2, [r3, #40]	; 0x28
 800a7c2:	e026      	b.n	800a812 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7d6:	d007      	beq.n	800a7e8 <UART_Receive_IT+0x74>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10a      	bne.n	800a7f6 <UART_Receive_IT+0x82>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d106      	bne.n	800a7f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f2:	701a      	strb	r2, [r3, #0]
 800a7f4:	e008      	b.n	800a808 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a802:	b2da      	uxtb	r2, r3
 800a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a806:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80c:	1c5a      	adds	r2, r3, #1
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a816:	b29b      	uxth	r3, r3
 800a818:	3b01      	subs	r3, #1
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	4619      	mov	r1, r3
 800a820:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a822:	2b00      	cmp	r3, #0
 800a824:	d15a      	bne.n	800a8dc <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68da      	ldr	r2, [r3, #12]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f022 0220 	bic.w	r2, r2, #32
 800a834:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68da      	ldr	r2, [r3, #12]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a844:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	695a      	ldr	r2, [r3, #20]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f022 0201 	bic.w	r2, r2, #1
 800a854:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2220      	movs	r2, #32
 800a85a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a862:	2b01      	cmp	r3, #1
 800a864:	d135      	bne.n	800a8d2 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	330c      	adds	r3, #12
 800a872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	e853 3f00 	ldrex	r3, [r3]
 800a87a:	613b      	str	r3, [r7, #16]
   return(result);
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	f023 0310 	bic.w	r3, r3, #16
 800a882:	627b      	str	r3, [r7, #36]	; 0x24
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	330c      	adds	r3, #12
 800a88a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a88c:	623a      	str	r2, [r7, #32]
 800a88e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a890:	69f9      	ldr	r1, [r7, #28]
 800a892:	6a3a      	ldr	r2, [r7, #32]
 800a894:	e841 2300 	strex	r3, r2, [r1]
 800a898:	61bb      	str	r3, [r7, #24]
   return(result);
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d1e5      	bne.n	800a86c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f003 0310 	and.w	r3, r3, #16
 800a8aa:	2b10      	cmp	r3, #16
 800a8ac:	d10a      	bne.n	800a8c4 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60fb      	str	r3, [r7, #12]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	60fb      	str	r3, [r7, #12]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	60fb      	str	r3, [r7, #12]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f7ff fd2c 	bl	800a328 <HAL_UARTEx_RxEventCallback>
 800a8d0:	e002      	b.n	800a8d8 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f7ff fd14 	bl	800a300 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	e002      	b.n	800a8e2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	e000      	b.n	800a8e2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a8e0:	2302      	movs	r3, #2
  }
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3730      	adds	r7, #48	; 0x30
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
	...

0800a8ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8f0:	b0c0      	sub	sp, #256	; 0x100
 800a8f2:	af00      	add	r7, sp, #0
 800a8f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a908:	68d9      	ldr	r1, [r3, #12]
 800a90a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	ea40 0301 	orr.w	r3, r0, r1
 800a914:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a91a:	689a      	ldr	r2, [r3, #8]
 800a91c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	431a      	orrs	r2, r3
 800a924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	431a      	orrs	r2, r3
 800a92c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a930:	69db      	ldr	r3, [r3, #28]
 800a932:	4313      	orrs	r3, r2
 800a934:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a944:	f021 010c 	bic.w	r1, r1, #12
 800a948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a952:	430b      	orrs	r3, r1
 800a954:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	695b      	ldr	r3, [r3, #20]
 800a95e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a966:	6999      	ldr	r1, [r3, #24]
 800a968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	ea40 0301 	orr.w	r3, r0, r1
 800a972:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	4b8f      	ldr	r3, [pc, #572]	; (800abb8 <UART_SetConfig+0x2cc>)
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d005      	beq.n	800a98c <UART_SetConfig+0xa0>
 800a980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	4b8d      	ldr	r3, [pc, #564]	; (800abbc <UART_SetConfig+0x2d0>)
 800a988:	429a      	cmp	r2, r3
 800a98a:	d104      	bne.n	800a996 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a98c:	f7fe fbcc 	bl	8009128 <HAL_RCC_GetPCLK2Freq>
 800a990:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a994:	e003      	b.n	800a99e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a996:	f7fe fbb3 	bl	8009100 <HAL_RCC_GetPCLK1Freq>
 800a99a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a99e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9a8:	f040 810c 	bne.w	800abc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a9ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a9b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a9ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a9be:	4622      	mov	r2, r4
 800a9c0:	462b      	mov	r3, r5
 800a9c2:	1891      	adds	r1, r2, r2
 800a9c4:	65b9      	str	r1, [r7, #88]	; 0x58
 800a9c6:	415b      	adcs	r3, r3
 800a9c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a9ce:	4621      	mov	r1, r4
 800a9d0:	eb12 0801 	adds.w	r8, r2, r1
 800a9d4:	4629      	mov	r1, r5
 800a9d6:	eb43 0901 	adc.w	r9, r3, r1
 800a9da:	f04f 0200 	mov.w	r2, #0
 800a9de:	f04f 0300 	mov.w	r3, #0
 800a9e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a9e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9ee:	4690      	mov	r8, r2
 800a9f0:	4699      	mov	r9, r3
 800a9f2:	4623      	mov	r3, r4
 800a9f4:	eb18 0303 	adds.w	r3, r8, r3
 800a9f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	eb49 0303 	adc.w	r3, r9, r3
 800aa02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aa16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	18db      	adds	r3, r3, r3
 800aa1e:	653b      	str	r3, [r7, #80]	; 0x50
 800aa20:	4613      	mov	r3, r2
 800aa22:	eb42 0303 	adc.w	r3, r2, r3
 800aa26:	657b      	str	r3, [r7, #84]	; 0x54
 800aa28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aa2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aa30:	f7f6 f90a 	bl	8000c48 <__aeabi_uldivmod>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4b61      	ldr	r3, [pc, #388]	; (800abc0 <UART_SetConfig+0x2d4>)
 800aa3a:	fba3 2302 	umull	r2, r3, r3, r2
 800aa3e:	095b      	lsrs	r3, r3, #5
 800aa40:	011c      	lsls	r4, r3, #4
 800aa42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa46:	2200      	movs	r2, #0
 800aa48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aa50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aa54:	4642      	mov	r2, r8
 800aa56:	464b      	mov	r3, r9
 800aa58:	1891      	adds	r1, r2, r2
 800aa5a:	64b9      	str	r1, [r7, #72]	; 0x48
 800aa5c:	415b      	adcs	r3, r3
 800aa5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aa64:	4641      	mov	r1, r8
 800aa66:	eb12 0a01 	adds.w	sl, r2, r1
 800aa6a:	4649      	mov	r1, r9
 800aa6c:	eb43 0b01 	adc.w	fp, r3, r1
 800aa70:	f04f 0200 	mov.w	r2, #0
 800aa74:	f04f 0300 	mov.w	r3, #0
 800aa78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa84:	4692      	mov	sl, r2
 800aa86:	469b      	mov	fp, r3
 800aa88:	4643      	mov	r3, r8
 800aa8a:	eb1a 0303 	adds.w	r3, sl, r3
 800aa8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa92:	464b      	mov	r3, r9
 800aa94:	eb4b 0303 	adc.w	r3, fp, r3
 800aa98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aaa8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aaac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aab0:	460b      	mov	r3, r1
 800aab2:	18db      	adds	r3, r3, r3
 800aab4:	643b      	str	r3, [r7, #64]	; 0x40
 800aab6:	4613      	mov	r3, r2
 800aab8:	eb42 0303 	adc.w	r3, r2, r3
 800aabc:	647b      	str	r3, [r7, #68]	; 0x44
 800aabe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aac2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aac6:	f7f6 f8bf 	bl	8000c48 <__aeabi_uldivmod>
 800aaca:	4602      	mov	r2, r0
 800aacc:	460b      	mov	r3, r1
 800aace:	4611      	mov	r1, r2
 800aad0:	4b3b      	ldr	r3, [pc, #236]	; (800abc0 <UART_SetConfig+0x2d4>)
 800aad2:	fba3 2301 	umull	r2, r3, r3, r1
 800aad6:	095b      	lsrs	r3, r3, #5
 800aad8:	2264      	movs	r2, #100	; 0x64
 800aada:	fb02 f303 	mul.w	r3, r2, r3
 800aade:	1acb      	subs	r3, r1, r3
 800aae0:	00db      	lsls	r3, r3, #3
 800aae2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aae6:	4b36      	ldr	r3, [pc, #216]	; (800abc0 <UART_SetConfig+0x2d4>)
 800aae8:	fba3 2302 	umull	r2, r3, r3, r2
 800aaec:	095b      	lsrs	r3, r3, #5
 800aaee:	005b      	lsls	r3, r3, #1
 800aaf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aaf4:	441c      	add	r4, r3
 800aaf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aafa:	2200      	movs	r2, #0
 800aafc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ab04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ab08:	4642      	mov	r2, r8
 800ab0a:	464b      	mov	r3, r9
 800ab0c:	1891      	adds	r1, r2, r2
 800ab0e:	63b9      	str	r1, [r7, #56]	; 0x38
 800ab10:	415b      	adcs	r3, r3
 800ab12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ab18:	4641      	mov	r1, r8
 800ab1a:	1851      	adds	r1, r2, r1
 800ab1c:	6339      	str	r1, [r7, #48]	; 0x30
 800ab1e:	4649      	mov	r1, r9
 800ab20:	414b      	adcs	r3, r1
 800ab22:	637b      	str	r3, [r7, #52]	; 0x34
 800ab24:	f04f 0200 	mov.w	r2, #0
 800ab28:	f04f 0300 	mov.w	r3, #0
 800ab2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ab30:	4659      	mov	r1, fp
 800ab32:	00cb      	lsls	r3, r1, #3
 800ab34:	4651      	mov	r1, sl
 800ab36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab3a:	4651      	mov	r1, sl
 800ab3c:	00ca      	lsls	r2, r1, #3
 800ab3e:	4610      	mov	r0, r2
 800ab40:	4619      	mov	r1, r3
 800ab42:	4603      	mov	r3, r0
 800ab44:	4642      	mov	r2, r8
 800ab46:	189b      	adds	r3, r3, r2
 800ab48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab4c:	464b      	mov	r3, r9
 800ab4e:	460a      	mov	r2, r1
 800ab50:	eb42 0303 	adc.w	r3, r2, r3
 800ab54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ab64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ab68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	18db      	adds	r3, r3, r3
 800ab70:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab72:	4613      	mov	r3, r2
 800ab74:	eb42 0303 	adc.w	r3, r2, r3
 800ab78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ab7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ab82:	f7f6 f861 	bl	8000c48 <__aeabi_uldivmod>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4b0d      	ldr	r3, [pc, #52]	; (800abc0 <UART_SetConfig+0x2d4>)
 800ab8c:	fba3 1302 	umull	r1, r3, r3, r2
 800ab90:	095b      	lsrs	r3, r3, #5
 800ab92:	2164      	movs	r1, #100	; 0x64
 800ab94:	fb01 f303 	mul.w	r3, r1, r3
 800ab98:	1ad3      	subs	r3, r2, r3
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	3332      	adds	r3, #50	; 0x32
 800ab9e:	4a08      	ldr	r2, [pc, #32]	; (800abc0 <UART_SetConfig+0x2d4>)
 800aba0:	fba2 2303 	umull	r2, r3, r2, r3
 800aba4:	095b      	lsrs	r3, r3, #5
 800aba6:	f003 0207 	and.w	r2, r3, #7
 800abaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4422      	add	r2, r4
 800abb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800abb4:	e105      	b.n	800adc2 <UART_SetConfig+0x4d6>
 800abb6:	bf00      	nop
 800abb8:	40011000 	.word	0x40011000
 800abbc:	40011400 	.word	0x40011400
 800abc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800abc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abc8:	2200      	movs	r2, #0
 800abca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800abce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800abd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800abd6:	4642      	mov	r2, r8
 800abd8:	464b      	mov	r3, r9
 800abda:	1891      	adds	r1, r2, r2
 800abdc:	6239      	str	r1, [r7, #32]
 800abde:	415b      	adcs	r3, r3
 800abe0:	627b      	str	r3, [r7, #36]	; 0x24
 800abe2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800abe6:	4641      	mov	r1, r8
 800abe8:	1854      	adds	r4, r2, r1
 800abea:	4649      	mov	r1, r9
 800abec:	eb43 0501 	adc.w	r5, r3, r1
 800abf0:	f04f 0200 	mov.w	r2, #0
 800abf4:	f04f 0300 	mov.w	r3, #0
 800abf8:	00eb      	lsls	r3, r5, #3
 800abfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abfe:	00e2      	lsls	r2, r4, #3
 800ac00:	4614      	mov	r4, r2
 800ac02:	461d      	mov	r5, r3
 800ac04:	4643      	mov	r3, r8
 800ac06:	18e3      	adds	r3, r4, r3
 800ac08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ac0c:	464b      	mov	r3, r9
 800ac0e:	eb45 0303 	adc.w	r3, r5, r3
 800ac12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ac16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ac22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ac26:	f04f 0200 	mov.w	r2, #0
 800ac2a:	f04f 0300 	mov.w	r3, #0
 800ac2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ac32:	4629      	mov	r1, r5
 800ac34:	008b      	lsls	r3, r1, #2
 800ac36:	4621      	mov	r1, r4
 800ac38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac3c:	4621      	mov	r1, r4
 800ac3e:	008a      	lsls	r2, r1, #2
 800ac40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ac44:	f7f6 f800 	bl	8000c48 <__aeabi_uldivmod>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4b60      	ldr	r3, [pc, #384]	; (800add0 <UART_SetConfig+0x4e4>)
 800ac4e:	fba3 2302 	umull	r2, r3, r3, r2
 800ac52:	095b      	lsrs	r3, r3, #5
 800ac54:	011c      	lsls	r4, r3, #4
 800ac56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ac60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ac68:	4642      	mov	r2, r8
 800ac6a:	464b      	mov	r3, r9
 800ac6c:	1891      	adds	r1, r2, r2
 800ac6e:	61b9      	str	r1, [r7, #24]
 800ac70:	415b      	adcs	r3, r3
 800ac72:	61fb      	str	r3, [r7, #28]
 800ac74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac78:	4641      	mov	r1, r8
 800ac7a:	1851      	adds	r1, r2, r1
 800ac7c:	6139      	str	r1, [r7, #16]
 800ac7e:	4649      	mov	r1, r9
 800ac80:	414b      	adcs	r3, r1
 800ac82:	617b      	str	r3, [r7, #20]
 800ac84:	f04f 0200 	mov.w	r2, #0
 800ac88:	f04f 0300 	mov.w	r3, #0
 800ac8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac90:	4659      	mov	r1, fp
 800ac92:	00cb      	lsls	r3, r1, #3
 800ac94:	4651      	mov	r1, sl
 800ac96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac9a:	4651      	mov	r1, sl
 800ac9c:	00ca      	lsls	r2, r1, #3
 800ac9e:	4610      	mov	r0, r2
 800aca0:	4619      	mov	r1, r3
 800aca2:	4603      	mov	r3, r0
 800aca4:	4642      	mov	r2, r8
 800aca6:	189b      	adds	r3, r3, r2
 800aca8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800acac:	464b      	mov	r3, r9
 800acae:	460a      	mov	r2, r1
 800acb0:	eb42 0303 	adc.w	r3, r2, r3
 800acb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800acb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	67bb      	str	r3, [r7, #120]	; 0x78
 800acc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800acc4:	f04f 0200 	mov.w	r2, #0
 800acc8:	f04f 0300 	mov.w	r3, #0
 800accc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800acd0:	4649      	mov	r1, r9
 800acd2:	008b      	lsls	r3, r1, #2
 800acd4:	4641      	mov	r1, r8
 800acd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acda:	4641      	mov	r1, r8
 800acdc:	008a      	lsls	r2, r1, #2
 800acde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ace2:	f7f5 ffb1 	bl	8000c48 <__aeabi_uldivmod>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4b39      	ldr	r3, [pc, #228]	; (800add0 <UART_SetConfig+0x4e4>)
 800acec:	fba3 1302 	umull	r1, r3, r3, r2
 800acf0:	095b      	lsrs	r3, r3, #5
 800acf2:	2164      	movs	r1, #100	; 0x64
 800acf4:	fb01 f303 	mul.w	r3, r1, r3
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	011b      	lsls	r3, r3, #4
 800acfc:	3332      	adds	r3, #50	; 0x32
 800acfe:	4a34      	ldr	r2, [pc, #208]	; (800add0 <UART_SetConfig+0x4e4>)
 800ad00:	fba2 2303 	umull	r2, r3, r2, r3
 800ad04:	095b      	lsrs	r3, r3, #5
 800ad06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad0a:	441c      	add	r4, r3
 800ad0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad10:	2200      	movs	r2, #0
 800ad12:	673b      	str	r3, [r7, #112]	; 0x70
 800ad14:	677a      	str	r2, [r7, #116]	; 0x74
 800ad16:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ad1a:	4642      	mov	r2, r8
 800ad1c:	464b      	mov	r3, r9
 800ad1e:	1891      	adds	r1, r2, r2
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	415b      	adcs	r3, r3
 800ad24:	60fb      	str	r3, [r7, #12]
 800ad26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad2a:	4641      	mov	r1, r8
 800ad2c:	1851      	adds	r1, r2, r1
 800ad2e:	6039      	str	r1, [r7, #0]
 800ad30:	4649      	mov	r1, r9
 800ad32:	414b      	adcs	r3, r1
 800ad34:	607b      	str	r3, [r7, #4]
 800ad36:	f04f 0200 	mov.w	r2, #0
 800ad3a:	f04f 0300 	mov.w	r3, #0
 800ad3e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ad42:	4659      	mov	r1, fp
 800ad44:	00cb      	lsls	r3, r1, #3
 800ad46:	4651      	mov	r1, sl
 800ad48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad4c:	4651      	mov	r1, sl
 800ad4e:	00ca      	lsls	r2, r1, #3
 800ad50:	4610      	mov	r0, r2
 800ad52:	4619      	mov	r1, r3
 800ad54:	4603      	mov	r3, r0
 800ad56:	4642      	mov	r2, r8
 800ad58:	189b      	adds	r3, r3, r2
 800ad5a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad5c:	464b      	mov	r3, r9
 800ad5e:	460a      	mov	r2, r1
 800ad60:	eb42 0303 	adc.w	r3, r2, r3
 800ad64:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	663b      	str	r3, [r7, #96]	; 0x60
 800ad70:	667a      	str	r2, [r7, #100]	; 0x64
 800ad72:	f04f 0200 	mov.w	r2, #0
 800ad76:	f04f 0300 	mov.w	r3, #0
 800ad7a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ad7e:	4649      	mov	r1, r9
 800ad80:	008b      	lsls	r3, r1, #2
 800ad82:	4641      	mov	r1, r8
 800ad84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad88:	4641      	mov	r1, r8
 800ad8a:	008a      	lsls	r2, r1, #2
 800ad8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ad90:	f7f5 ff5a 	bl	8000c48 <__aeabi_uldivmod>
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	4b0d      	ldr	r3, [pc, #52]	; (800add0 <UART_SetConfig+0x4e4>)
 800ad9a:	fba3 1302 	umull	r1, r3, r3, r2
 800ad9e:	095b      	lsrs	r3, r3, #5
 800ada0:	2164      	movs	r1, #100	; 0x64
 800ada2:	fb01 f303 	mul.w	r3, r1, r3
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	011b      	lsls	r3, r3, #4
 800adaa:	3332      	adds	r3, #50	; 0x32
 800adac:	4a08      	ldr	r2, [pc, #32]	; (800add0 <UART_SetConfig+0x4e4>)
 800adae:	fba2 2303 	umull	r2, r3, r2, r3
 800adb2:	095b      	lsrs	r3, r3, #5
 800adb4:	f003 020f 	and.w	r2, r3, #15
 800adb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4422      	add	r2, r4
 800adc0:	609a      	str	r2, [r3, #8]
}
 800adc2:	bf00      	nop
 800adc4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800adc8:	46bd      	mov	sp, r7
 800adca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adce:	bf00      	nop
 800add0:	51eb851f 	.word	0x51eb851f

0800add4 <__errno>:
 800add4:	4b01      	ldr	r3, [pc, #4]	; (800addc <__errno+0x8>)
 800add6:	6818      	ldr	r0, [r3, #0]
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	2000000c 	.word	0x2000000c

0800ade0 <__libc_init_array>:
 800ade0:	b570      	push	{r4, r5, r6, lr}
 800ade2:	4d0d      	ldr	r5, [pc, #52]	; (800ae18 <__libc_init_array+0x38>)
 800ade4:	4c0d      	ldr	r4, [pc, #52]	; (800ae1c <__libc_init_array+0x3c>)
 800ade6:	1b64      	subs	r4, r4, r5
 800ade8:	10a4      	asrs	r4, r4, #2
 800adea:	2600      	movs	r6, #0
 800adec:	42a6      	cmp	r6, r4
 800adee:	d109      	bne.n	800ae04 <__libc_init_array+0x24>
 800adf0:	4d0b      	ldr	r5, [pc, #44]	; (800ae20 <__libc_init_array+0x40>)
 800adf2:	4c0c      	ldr	r4, [pc, #48]	; (800ae24 <__libc_init_array+0x44>)
 800adf4:	f002 ffe2 	bl	800ddbc <_init>
 800adf8:	1b64      	subs	r4, r4, r5
 800adfa:	10a4      	asrs	r4, r4, #2
 800adfc:	2600      	movs	r6, #0
 800adfe:	42a6      	cmp	r6, r4
 800ae00:	d105      	bne.n	800ae0e <__libc_init_array+0x2e>
 800ae02:	bd70      	pop	{r4, r5, r6, pc}
 800ae04:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae08:	4798      	blx	r3
 800ae0a:	3601      	adds	r6, #1
 800ae0c:	e7ee      	b.n	800adec <__libc_init_array+0xc>
 800ae0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae12:	4798      	blx	r3
 800ae14:	3601      	adds	r6, #1
 800ae16:	e7f2      	b.n	800adfe <__libc_init_array+0x1e>
 800ae18:	0800e27c 	.word	0x0800e27c
 800ae1c:	0800e27c 	.word	0x0800e27c
 800ae20:	0800e27c 	.word	0x0800e27c
 800ae24:	0800e280 	.word	0x0800e280

0800ae28 <memset>:
 800ae28:	4402      	add	r2, r0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d100      	bne.n	800ae32 <memset+0xa>
 800ae30:	4770      	bx	lr
 800ae32:	f803 1b01 	strb.w	r1, [r3], #1
 800ae36:	e7f9      	b.n	800ae2c <memset+0x4>

0800ae38 <__cvt>:
 800ae38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae3c:	ec55 4b10 	vmov	r4, r5, d0
 800ae40:	2d00      	cmp	r5, #0
 800ae42:	460e      	mov	r6, r1
 800ae44:	4619      	mov	r1, r3
 800ae46:	462b      	mov	r3, r5
 800ae48:	bfbb      	ittet	lt
 800ae4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ae4e:	461d      	movlt	r5, r3
 800ae50:	2300      	movge	r3, #0
 800ae52:	232d      	movlt	r3, #45	; 0x2d
 800ae54:	700b      	strb	r3, [r1, #0]
 800ae56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ae5c:	4691      	mov	r9, r2
 800ae5e:	f023 0820 	bic.w	r8, r3, #32
 800ae62:	bfbc      	itt	lt
 800ae64:	4622      	movlt	r2, r4
 800ae66:	4614      	movlt	r4, r2
 800ae68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae6c:	d005      	beq.n	800ae7a <__cvt+0x42>
 800ae6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae72:	d100      	bne.n	800ae76 <__cvt+0x3e>
 800ae74:	3601      	adds	r6, #1
 800ae76:	2102      	movs	r1, #2
 800ae78:	e000      	b.n	800ae7c <__cvt+0x44>
 800ae7a:	2103      	movs	r1, #3
 800ae7c:	ab03      	add	r3, sp, #12
 800ae7e:	9301      	str	r3, [sp, #4]
 800ae80:	ab02      	add	r3, sp, #8
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	ec45 4b10 	vmov	d0, r4, r5
 800ae88:	4653      	mov	r3, sl
 800ae8a:	4632      	mov	r2, r6
 800ae8c:	f000 fcec 	bl	800b868 <_dtoa_r>
 800ae90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae94:	4607      	mov	r7, r0
 800ae96:	d102      	bne.n	800ae9e <__cvt+0x66>
 800ae98:	f019 0f01 	tst.w	r9, #1
 800ae9c:	d022      	beq.n	800aee4 <__cvt+0xac>
 800ae9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aea2:	eb07 0906 	add.w	r9, r7, r6
 800aea6:	d110      	bne.n	800aeca <__cvt+0x92>
 800aea8:	783b      	ldrb	r3, [r7, #0]
 800aeaa:	2b30      	cmp	r3, #48	; 0x30
 800aeac:	d10a      	bne.n	800aec4 <__cvt+0x8c>
 800aeae:	2200      	movs	r2, #0
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4620      	mov	r0, r4
 800aeb4:	4629      	mov	r1, r5
 800aeb6:	f7f5 fe07 	bl	8000ac8 <__aeabi_dcmpeq>
 800aeba:	b918      	cbnz	r0, 800aec4 <__cvt+0x8c>
 800aebc:	f1c6 0601 	rsb	r6, r6, #1
 800aec0:	f8ca 6000 	str.w	r6, [sl]
 800aec4:	f8da 3000 	ldr.w	r3, [sl]
 800aec8:	4499      	add	r9, r3
 800aeca:	2200      	movs	r2, #0
 800aecc:	2300      	movs	r3, #0
 800aece:	4620      	mov	r0, r4
 800aed0:	4629      	mov	r1, r5
 800aed2:	f7f5 fdf9 	bl	8000ac8 <__aeabi_dcmpeq>
 800aed6:	b108      	cbz	r0, 800aedc <__cvt+0xa4>
 800aed8:	f8cd 900c 	str.w	r9, [sp, #12]
 800aedc:	2230      	movs	r2, #48	; 0x30
 800aede:	9b03      	ldr	r3, [sp, #12]
 800aee0:	454b      	cmp	r3, r9
 800aee2:	d307      	bcc.n	800aef4 <__cvt+0xbc>
 800aee4:	9b03      	ldr	r3, [sp, #12]
 800aee6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aee8:	1bdb      	subs	r3, r3, r7
 800aeea:	4638      	mov	r0, r7
 800aeec:	6013      	str	r3, [r2, #0]
 800aeee:	b004      	add	sp, #16
 800aef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef4:	1c59      	adds	r1, r3, #1
 800aef6:	9103      	str	r1, [sp, #12]
 800aef8:	701a      	strb	r2, [r3, #0]
 800aefa:	e7f0      	b.n	800aede <__cvt+0xa6>

0800aefc <__exponent>:
 800aefc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aefe:	4603      	mov	r3, r0
 800af00:	2900      	cmp	r1, #0
 800af02:	bfb8      	it	lt
 800af04:	4249      	neglt	r1, r1
 800af06:	f803 2b02 	strb.w	r2, [r3], #2
 800af0a:	bfb4      	ite	lt
 800af0c:	222d      	movlt	r2, #45	; 0x2d
 800af0e:	222b      	movge	r2, #43	; 0x2b
 800af10:	2909      	cmp	r1, #9
 800af12:	7042      	strb	r2, [r0, #1]
 800af14:	dd2a      	ble.n	800af6c <__exponent+0x70>
 800af16:	f10d 0407 	add.w	r4, sp, #7
 800af1a:	46a4      	mov	ip, r4
 800af1c:	270a      	movs	r7, #10
 800af1e:	46a6      	mov	lr, r4
 800af20:	460a      	mov	r2, r1
 800af22:	fb91 f6f7 	sdiv	r6, r1, r7
 800af26:	fb07 1516 	mls	r5, r7, r6, r1
 800af2a:	3530      	adds	r5, #48	; 0x30
 800af2c:	2a63      	cmp	r2, #99	; 0x63
 800af2e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800af32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800af36:	4631      	mov	r1, r6
 800af38:	dcf1      	bgt.n	800af1e <__exponent+0x22>
 800af3a:	3130      	adds	r1, #48	; 0x30
 800af3c:	f1ae 0502 	sub.w	r5, lr, #2
 800af40:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af44:	1c44      	adds	r4, r0, #1
 800af46:	4629      	mov	r1, r5
 800af48:	4561      	cmp	r1, ip
 800af4a:	d30a      	bcc.n	800af62 <__exponent+0x66>
 800af4c:	f10d 0209 	add.w	r2, sp, #9
 800af50:	eba2 020e 	sub.w	r2, r2, lr
 800af54:	4565      	cmp	r5, ip
 800af56:	bf88      	it	hi
 800af58:	2200      	movhi	r2, #0
 800af5a:	4413      	add	r3, r2
 800af5c:	1a18      	subs	r0, r3, r0
 800af5e:	b003      	add	sp, #12
 800af60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af66:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af6a:	e7ed      	b.n	800af48 <__exponent+0x4c>
 800af6c:	2330      	movs	r3, #48	; 0x30
 800af6e:	3130      	adds	r1, #48	; 0x30
 800af70:	7083      	strb	r3, [r0, #2]
 800af72:	70c1      	strb	r1, [r0, #3]
 800af74:	1d03      	adds	r3, r0, #4
 800af76:	e7f1      	b.n	800af5c <__exponent+0x60>

0800af78 <_printf_float>:
 800af78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af7c:	ed2d 8b02 	vpush	{d8}
 800af80:	b08d      	sub	sp, #52	; 0x34
 800af82:	460c      	mov	r4, r1
 800af84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800af88:	4616      	mov	r6, r2
 800af8a:	461f      	mov	r7, r3
 800af8c:	4605      	mov	r5, r0
 800af8e:	f001 fa59 	bl	800c444 <_localeconv_r>
 800af92:	f8d0 a000 	ldr.w	sl, [r0]
 800af96:	4650      	mov	r0, sl
 800af98:	f7f5 f91a 	bl	80001d0 <strlen>
 800af9c:	2300      	movs	r3, #0
 800af9e:	930a      	str	r3, [sp, #40]	; 0x28
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	9305      	str	r3, [sp, #20]
 800afa4:	f8d8 3000 	ldr.w	r3, [r8]
 800afa8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800afac:	3307      	adds	r3, #7
 800afae:	f023 0307 	bic.w	r3, r3, #7
 800afb2:	f103 0208 	add.w	r2, r3, #8
 800afb6:	f8c8 2000 	str.w	r2, [r8]
 800afba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800afc2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800afc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800afca:	9307      	str	r3, [sp, #28]
 800afcc:	f8cd 8018 	str.w	r8, [sp, #24]
 800afd0:	ee08 0a10 	vmov	s16, r0
 800afd4:	4b9f      	ldr	r3, [pc, #636]	; (800b254 <_printf_float+0x2dc>)
 800afd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afde:	f7f5 fda5 	bl	8000b2c <__aeabi_dcmpun>
 800afe2:	bb88      	cbnz	r0, 800b048 <_printf_float+0xd0>
 800afe4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800afe8:	4b9a      	ldr	r3, [pc, #616]	; (800b254 <_printf_float+0x2dc>)
 800afea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afee:	f7f5 fd7f 	bl	8000af0 <__aeabi_dcmple>
 800aff2:	bb48      	cbnz	r0, 800b048 <_printf_float+0xd0>
 800aff4:	2200      	movs	r2, #0
 800aff6:	2300      	movs	r3, #0
 800aff8:	4640      	mov	r0, r8
 800affa:	4649      	mov	r1, r9
 800affc:	f7f5 fd6e 	bl	8000adc <__aeabi_dcmplt>
 800b000:	b110      	cbz	r0, 800b008 <_printf_float+0x90>
 800b002:	232d      	movs	r3, #45	; 0x2d
 800b004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b008:	4b93      	ldr	r3, [pc, #588]	; (800b258 <_printf_float+0x2e0>)
 800b00a:	4894      	ldr	r0, [pc, #592]	; (800b25c <_printf_float+0x2e4>)
 800b00c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b010:	bf94      	ite	ls
 800b012:	4698      	movls	r8, r3
 800b014:	4680      	movhi	r8, r0
 800b016:	2303      	movs	r3, #3
 800b018:	6123      	str	r3, [r4, #16]
 800b01a:	9b05      	ldr	r3, [sp, #20]
 800b01c:	f023 0204 	bic.w	r2, r3, #4
 800b020:	6022      	str	r2, [r4, #0]
 800b022:	f04f 0900 	mov.w	r9, #0
 800b026:	9700      	str	r7, [sp, #0]
 800b028:	4633      	mov	r3, r6
 800b02a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b02c:	4621      	mov	r1, r4
 800b02e:	4628      	mov	r0, r5
 800b030:	f000 f9d8 	bl	800b3e4 <_printf_common>
 800b034:	3001      	adds	r0, #1
 800b036:	f040 8090 	bne.w	800b15a <_printf_float+0x1e2>
 800b03a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b03e:	b00d      	add	sp, #52	; 0x34
 800b040:	ecbd 8b02 	vpop	{d8}
 800b044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b048:	4642      	mov	r2, r8
 800b04a:	464b      	mov	r3, r9
 800b04c:	4640      	mov	r0, r8
 800b04e:	4649      	mov	r1, r9
 800b050:	f7f5 fd6c 	bl	8000b2c <__aeabi_dcmpun>
 800b054:	b140      	cbz	r0, 800b068 <_printf_float+0xf0>
 800b056:	464b      	mov	r3, r9
 800b058:	2b00      	cmp	r3, #0
 800b05a:	bfbc      	itt	lt
 800b05c:	232d      	movlt	r3, #45	; 0x2d
 800b05e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b062:	487f      	ldr	r0, [pc, #508]	; (800b260 <_printf_float+0x2e8>)
 800b064:	4b7f      	ldr	r3, [pc, #508]	; (800b264 <_printf_float+0x2ec>)
 800b066:	e7d1      	b.n	800b00c <_printf_float+0x94>
 800b068:	6863      	ldr	r3, [r4, #4]
 800b06a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b06e:	9206      	str	r2, [sp, #24]
 800b070:	1c5a      	adds	r2, r3, #1
 800b072:	d13f      	bne.n	800b0f4 <_printf_float+0x17c>
 800b074:	2306      	movs	r3, #6
 800b076:	6063      	str	r3, [r4, #4]
 800b078:	9b05      	ldr	r3, [sp, #20]
 800b07a:	6861      	ldr	r1, [r4, #4]
 800b07c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b080:	2300      	movs	r3, #0
 800b082:	9303      	str	r3, [sp, #12]
 800b084:	ab0a      	add	r3, sp, #40	; 0x28
 800b086:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b08a:	ab09      	add	r3, sp, #36	; 0x24
 800b08c:	ec49 8b10 	vmov	d0, r8, r9
 800b090:	9300      	str	r3, [sp, #0]
 800b092:	6022      	str	r2, [r4, #0]
 800b094:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b098:	4628      	mov	r0, r5
 800b09a:	f7ff fecd 	bl	800ae38 <__cvt>
 800b09e:	9b06      	ldr	r3, [sp, #24]
 800b0a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0a2:	2b47      	cmp	r3, #71	; 0x47
 800b0a4:	4680      	mov	r8, r0
 800b0a6:	d108      	bne.n	800b0ba <_printf_float+0x142>
 800b0a8:	1cc8      	adds	r0, r1, #3
 800b0aa:	db02      	blt.n	800b0b2 <_printf_float+0x13a>
 800b0ac:	6863      	ldr	r3, [r4, #4]
 800b0ae:	4299      	cmp	r1, r3
 800b0b0:	dd41      	ble.n	800b136 <_printf_float+0x1be>
 800b0b2:	f1ab 0b02 	sub.w	fp, fp, #2
 800b0b6:	fa5f fb8b 	uxtb.w	fp, fp
 800b0ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0be:	d820      	bhi.n	800b102 <_printf_float+0x18a>
 800b0c0:	3901      	subs	r1, #1
 800b0c2:	465a      	mov	r2, fp
 800b0c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b0c8:	9109      	str	r1, [sp, #36]	; 0x24
 800b0ca:	f7ff ff17 	bl	800aefc <__exponent>
 800b0ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0d0:	1813      	adds	r3, r2, r0
 800b0d2:	2a01      	cmp	r2, #1
 800b0d4:	4681      	mov	r9, r0
 800b0d6:	6123      	str	r3, [r4, #16]
 800b0d8:	dc02      	bgt.n	800b0e0 <_printf_float+0x168>
 800b0da:	6822      	ldr	r2, [r4, #0]
 800b0dc:	07d2      	lsls	r2, r2, #31
 800b0de:	d501      	bpl.n	800b0e4 <_printf_float+0x16c>
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	6123      	str	r3, [r4, #16]
 800b0e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d09c      	beq.n	800b026 <_printf_float+0xae>
 800b0ec:	232d      	movs	r3, #45	; 0x2d
 800b0ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0f2:	e798      	b.n	800b026 <_printf_float+0xae>
 800b0f4:	9a06      	ldr	r2, [sp, #24]
 800b0f6:	2a47      	cmp	r2, #71	; 0x47
 800b0f8:	d1be      	bne.n	800b078 <_printf_float+0x100>
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d1bc      	bne.n	800b078 <_printf_float+0x100>
 800b0fe:	2301      	movs	r3, #1
 800b100:	e7b9      	b.n	800b076 <_printf_float+0xfe>
 800b102:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b106:	d118      	bne.n	800b13a <_printf_float+0x1c2>
 800b108:	2900      	cmp	r1, #0
 800b10a:	6863      	ldr	r3, [r4, #4]
 800b10c:	dd0b      	ble.n	800b126 <_printf_float+0x1ae>
 800b10e:	6121      	str	r1, [r4, #16]
 800b110:	b913      	cbnz	r3, 800b118 <_printf_float+0x1a0>
 800b112:	6822      	ldr	r2, [r4, #0]
 800b114:	07d0      	lsls	r0, r2, #31
 800b116:	d502      	bpl.n	800b11e <_printf_float+0x1a6>
 800b118:	3301      	adds	r3, #1
 800b11a:	440b      	add	r3, r1
 800b11c:	6123      	str	r3, [r4, #16]
 800b11e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b120:	f04f 0900 	mov.w	r9, #0
 800b124:	e7de      	b.n	800b0e4 <_printf_float+0x16c>
 800b126:	b913      	cbnz	r3, 800b12e <_printf_float+0x1b6>
 800b128:	6822      	ldr	r2, [r4, #0]
 800b12a:	07d2      	lsls	r2, r2, #31
 800b12c:	d501      	bpl.n	800b132 <_printf_float+0x1ba>
 800b12e:	3302      	adds	r3, #2
 800b130:	e7f4      	b.n	800b11c <_printf_float+0x1a4>
 800b132:	2301      	movs	r3, #1
 800b134:	e7f2      	b.n	800b11c <_printf_float+0x1a4>
 800b136:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b13c:	4299      	cmp	r1, r3
 800b13e:	db05      	blt.n	800b14c <_printf_float+0x1d4>
 800b140:	6823      	ldr	r3, [r4, #0]
 800b142:	6121      	str	r1, [r4, #16]
 800b144:	07d8      	lsls	r0, r3, #31
 800b146:	d5ea      	bpl.n	800b11e <_printf_float+0x1a6>
 800b148:	1c4b      	adds	r3, r1, #1
 800b14a:	e7e7      	b.n	800b11c <_printf_float+0x1a4>
 800b14c:	2900      	cmp	r1, #0
 800b14e:	bfd4      	ite	le
 800b150:	f1c1 0202 	rsble	r2, r1, #2
 800b154:	2201      	movgt	r2, #1
 800b156:	4413      	add	r3, r2
 800b158:	e7e0      	b.n	800b11c <_printf_float+0x1a4>
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	055a      	lsls	r2, r3, #21
 800b15e:	d407      	bmi.n	800b170 <_printf_float+0x1f8>
 800b160:	6923      	ldr	r3, [r4, #16]
 800b162:	4642      	mov	r2, r8
 800b164:	4631      	mov	r1, r6
 800b166:	4628      	mov	r0, r5
 800b168:	47b8      	blx	r7
 800b16a:	3001      	adds	r0, #1
 800b16c:	d12c      	bne.n	800b1c8 <_printf_float+0x250>
 800b16e:	e764      	b.n	800b03a <_printf_float+0xc2>
 800b170:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b174:	f240 80e0 	bls.w	800b338 <_printf_float+0x3c0>
 800b178:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b17c:	2200      	movs	r2, #0
 800b17e:	2300      	movs	r3, #0
 800b180:	f7f5 fca2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b184:	2800      	cmp	r0, #0
 800b186:	d034      	beq.n	800b1f2 <_printf_float+0x27a>
 800b188:	4a37      	ldr	r2, [pc, #220]	; (800b268 <_printf_float+0x2f0>)
 800b18a:	2301      	movs	r3, #1
 800b18c:	4631      	mov	r1, r6
 800b18e:	4628      	mov	r0, r5
 800b190:	47b8      	blx	r7
 800b192:	3001      	adds	r0, #1
 800b194:	f43f af51 	beq.w	800b03a <_printf_float+0xc2>
 800b198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b19c:	429a      	cmp	r2, r3
 800b19e:	db02      	blt.n	800b1a6 <_printf_float+0x22e>
 800b1a0:	6823      	ldr	r3, [r4, #0]
 800b1a2:	07d8      	lsls	r0, r3, #31
 800b1a4:	d510      	bpl.n	800b1c8 <_printf_float+0x250>
 800b1a6:	ee18 3a10 	vmov	r3, s16
 800b1aa:	4652      	mov	r2, sl
 800b1ac:	4631      	mov	r1, r6
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	47b8      	blx	r7
 800b1b2:	3001      	adds	r0, #1
 800b1b4:	f43f af41 	beq.w	800b03a <_printf_float+0xc2>
 800b1b8:	f04f 0800 	mov.w	r8, #0
 800b1bc:	f104 091a 	add.w	r9, r4, #26
 800b1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	4543      	cmp	r3, r8
 800b1c6:	dc09      	bgt.n	800b1dc <_printf_float+0x264>
 800b1c8:	6823      	ldr	r3, [r4, #0]
 800b1ca:	079b      	lsls	r3, r3, #30
 800b1cc:	f100 8105 	bmi.w	800b3da <_printf_float+0x462>
 800b1d0:	68e0      	ldr	r0, [r4, #12]
 800b1d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1d4:	4298      	cmp	r0, r3
 800b1d6:	bfb8      	it	lt
 800b1d8:	4618      	movlt	r0, r3
 800b1da:	e730      	b.n	800b03e <_printf_float+0xc6>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	464a      	mov	r2, r9
 800b1e0:	4631      	mov	r1, r6
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	47b8      	blx	r7
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	f43f af27 	beq.w	800b03a <_printf_float+0xc2>
 800b1ec:	f108 0801 	add.w	r8, r8, #1
 800b1f0:	e7e6      	b.n	800b1c0 <_printf_float+0x248>
 800b1f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	dc39      	bgt.n	800b26c <_printf_float+0x2f4>
 800b1f8:	4a1b      	ldr	r2, [pc, #108]	; (800b268 <_printf_float+0x2f0>)
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	4631      	mov	r1, r6
 800b1fe:	4628      	mov	r0, r5
 800b200:	47b8      	blx	r7
 800b202:	3001      	adds	r0, #1
 800b204:	f43f af19 	beq.w	800b03a <_printf_float+0xc2>
 800b208:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b20c:	4313      	orrs	r3, r2
 800b20e:	d102      	bne.n	800b216 <_printf_float+0x29e>
 800b210:	6823      	ldr	r3, [r4, #0]
 800b212:	07d9      	lsls	r1, r3, #31
 800b214:	d5d8      	bpl.n	800b1c8 <_printf_float+0x250>
 800b216:	ee18 3a10 	vmov	r3, s16
 800b21a:	4652      	mov	r2, sl
 800b21c:	4631      	mov	r1, r6
 800b21e:	4628      	mov	r0, r5
 800b220:	47b8      	blx	r7
 800b222:	3001      	adds	r0, #1
 800b224:	f43f af09 	beq.w	800b03a <_printf_float+0xc2>
 800b228:	f04f 0900 	mov.w	r9, #0
 800b22c:	f104 0a1a 	add.w	sl, r4, #26
 800b230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b232:	425b      	negs	r3, r3
 800b234:	454b      	cmp	r3, r9
 800b236:	dc01      	bgt.n	800b23c <_printf_float+0x2c4>
 800b238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b23a:	e792      	b.n	800b162 <_printf_float+0x1ea>
 800b23c:	2301      	movs	r3, #1
 800b23e:	4652      	mov	r2, sl
 800b240:	4631      	mov	r1, r6
 800b242:	4628      	mov	r0, r5
 800b244:	47b8      	blx	r7
 800b246:	3001      	adds	r0, #1
 800b248:	f43f aef7 	beq.w	800b03a <_printf_float+0xc2>
 800b24c:	f109 0901 	add.w	r9, r9, #1
 800b250:	e7ee      	b.n	800b230 <_printf_float+0x2b8>
 800b252:	bf00      	nop
 800b254:	7fefffff 	.word	0x7fefffff
 800b258:	0800dea0 	.word	0x0800dea0
 800b25c:	0800dea4 	.word	0x0800dea4
 800b260:	0800deac 	.word	0x0800deac
 800b264:	0800dea8 	.word	0x0800dea8
 800b268:	0800deb0 	.word	0x0800deb0
 800b26c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b26e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b270:	429a      	cmp	r2, r3
 800b272:	bfa8      	it	ge
 800b274:	461a      	movge	r2, r3
 800b276:	2a00      	cmp	r2, #0
 800b278:	4691      	mov	r9, r2
 800b27a:	dc37      	bgt.n	800b2ec <_printf_float+0x374>
 800b27c:	f04f 0b00 	mov.w	fp, #0
 800b280:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b284:	f104 021a 	add.w	r2, r4, #26
 800b288:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b28a:	9305      	str	r3, [sp, #20]
 800b28c:	eba3 0309 	sub.w	r3, r3, r9
 800b290:	455b      	cmp	r3, fp
 800b292:	dc33      	bgt.n	800b2fc <_printf_float+0x384>
 800b294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b298:	429a      	cmp	r2, r3
 800b29a:	db3b      	blt.n	800b314 <_printf_float+0x39c>
 800b29c:	6823      	ldr	r3, [r4, #0]
 800b29e:	07da      	lsls	r2, r3, #31
 800b2a0:	d438      	bmi.n	800b314 <_printf_float+0x39c>
 800b2a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2a4:	9a05      	ldr	r2, [sp, #20]
 800b2a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2a8:	1a9a      	subs	r2, r3, r2
 800b2aa:	eba3 0901 	sub.w	r9, r3, r1
 800b2ae:	4591      	cmp	r9, r2
 800b2b0:	bfa8      	it	ge
 800b2b2:	4691      	movge	r9, r2
 800b2b4:	f1b9 0f00 	cmp.w	r9, #0
 800b2b8:	dc35      	bgt.n	800b326 <_printf_float+0x3ae>
 800b2ba:	f04f 0800 	mov.w	r8, #0
 800b2be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b2c2:	f104 0a1a 	add.w	sl, r4, #26
 800b2c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2ca:	1a9b      	subs	r3, r3, r2
 800b2cc:	eba3 0309 	sub.w	r3, r3, r9
 800b2d0:	4543      	cmp	r3, r8
 800b2d2:	f77f af79 	ble.w	800b1c8 <_printf_float+0x250>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	4652      	mov	r2, sl
 800b2da:	4631      	mov	r1, r6
 800b2dc:	4628      	mov	r0, r5
 800b2de:	47b8      	blx	r7
 800b2e0:	3001      	adds	r0, #1
 800b2e2:	f43f aeaa 	beq.w	800b03a <_printf_float+0xc2>
 800b2e6:	f108 0801 	add.w	r8, r8, #1
 800b2ea:	e7ec      	b.n	800b2c6 <_printf_float+0x34e>
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	4631      	mov	r1, r6
 800b2f0:	4642      	mov	r2, r8
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	47b8      	blx	r7
 800b2f6:	3001      	adds	r0, #1
 800b2f8:	d1c0      	bne.n	800b27c <_printf_float+0x304>
 800b2fa:	e69e      	b.n	800b03a <_printf_float+0xc2>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	4631      	mov	r1, r6
 800b300:	4628      	mov	r0, r5
 800b302:	9205      	str	r2, [sp, #20]
 800b304:	47b8      	blx	r7
 800b306:	3001      	adds	r0, #1
 800b308:	f43f ae97 	beq.w	800b03a <_printf_float+0xc2>
 800b30c:	9a05      	ldr	r2, [sp, #20]
 800b30e:	f10b 0b01 	add.w	fp, fp, #1
 800b312:	e7b9      	b.n	800b288 <_printf_float+0x310>
 800b314:	ee18 3a10 	vmov	r3, s16
 800b318:	4652      	mov	r2, sl
 800b31a:	4631      	mov	r1, r6
 800b31c:	4628      	mov	r0, r5
 800b31e:	47b8      	blx	r7
 800b320:	3001      	adds	r0, #1
 800b322:	d1be      	bne.n	800b2a2 <_printf_float+0x32a>
 800b324:	e689      	b.n	800b03a <_printf_float+0xc2>
 800b326:	9a05      	ldr	r2, [sp, #20]
 800b328:	464b      	mov	r3, r9
 800b32a:	4442      	add	r2, r8
 800b32c:	4631      	mov	r1, r6
 800b32e:	4628      	mov	r0, r5
 800b330:	47b8      	blx	r7
 800b332:	3001      	adds	r0, #1
 800b334:	d1c1      	bne.n	800b2ba <_printf_float+0x342>
 800b336:	e680      	b.n	800b03a <_printf_float+0xc2>
 800b338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b33a:	2a01      	cmp	r2, #1
 800b33c:	dc01      	bgt.n	800b342 <_printf_float+0x3ca>
 800b33e:	07db      	lsls	r3, r3, #31
 800b340:	d538      	bpl.n	800b3b4 <_printf_float+0x43c>
 800b342:	2301      	movs	r3, #1
 800b344:	4642      	mov	r2, r8
 800b346:	4631      	mov	r1, r6
 800b348:	4628      	mov	r0, r5
 800b34a:	47b8      	blx	r7
 800b34c:	3001      	adds	r0, #1
 800b34e:	f43f ae74 	beq.w	800b03a <_printf_float+0xc2>
 800b352:	ee18 3a10 	vmov	r3, s16
 800b356:	4652      	mov	r2, sl
 800b358:	4631      	mov	r1, r6
 800b35a:	4628      	mov	r0, r5
 800b35c:	47b8      	blx	r7
 800b35e:	3001      	adds	r0, #1
 800b360:	f43f ae6b 	beq.w	800b03a <_printf_float+0xc2>
 800b364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b368:	2200      	movs	r2, #0
 800b36a:	2300      	movs	r3, #0
 800b36c:	f7f5 fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 800b370:	b9d8      	cbnz	r0, 800b3aa <_printf_float+0x432>
 800b372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b374:	f108 0201 	add.w	r2, r8, #1
 800b378:	3b01      	subs	r3, #1
 800b37a:	4631      	mov	r1, r6
 800b37c:	4628      	mov	r0, r5
 800b37e:	47b8      	blx	r7
 800b380:	3001      	adds	r0, #1
 800b382:	d10e      	bne.n	800b3a2 <_printf_float+0x42a>
 800b384:	e659      	b.n	800b03a <_printf_float+0xc2>
 800b386:	2301      	movs	r3, #1
 800b388:	4652      	mov	r2, sl
 800b38a:	4631      	mov	r1, r6
 800b38c:	4628      	mov	r0, r5
 800b38e:	47b8      	blx	r7
 800b390:	3001      	adds	r0, #1
 800b392:	f43f ae52 	beq.w	800b03a <_printf_float+0xc2>
 800b396:	f108 0801 	add.w	r8, r8, #1
 800b39a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b39c:	3b01      	subs	r3, #1
 800b39e:	4543      	cmp	r3, r8
 800b3a0:	dcf1      	bgt.n	800b386 <_printf_float+0x40e>
 800b3a2:	464b      	mov	r3, r9
 800b3a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b3a8:	e6dc      	b.n	800b164 <_printf_float+0x1ec>
 800b3aa:	f04f 0800 	mov.w	r8, #0
 800b3ae:	f104 0a1a 	add.w	sl, r4, #26
 800b3b2:	e7f2      	b.n	800b39a <_printf_float+0x422>
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	4642      	mov	r2, r8
 800b3b8:	e7df      	b.n	800b37a <_printf_float+0x402>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	464a      	mov	r2, r9
 800b3be:	4631      	mov	r1, r6
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	47b8      	blx	r7
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	f43f ae38 	beq.w	800b03a <_printf_float+0xc2>
 800b3ca:	f108 0801 	add.w	r8, r8, #1
 800b3ce:	68e3      	ldr	r3, [r4, #12]
 800b3d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3d2:	1a5b      	subs	r3, r3, r1
 800b3d4:	4543      	cmp	r3, r8
 800b3d6:	dcf0      	bgt.n	800b3ba <_printf_float+0x442>
 800b3d8:	e6fa      	b.n	800b1d0 <_printf_float+0x258>
 800b3da:	f04f 0800 	mov.w	r8, #0
 800b3de:	f104 0919 	add.w	r9, r4, #25
 800b3e2:	e7f4      	b.n	800b3ce <_printf_float+0x456>

0800b3e4 <_printf_common>:
 800b3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e8:	4616      	mov	r6, r2
 800b3ea:	4699      	mov	r9, r3
 800b3ec:	688a      	ldr	r2, [r1, #8]
 800b3ee:	690b      	ldr	r3, [r1, #16]
 800b3f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	bfb8      	it	lt
 800b3f8:	4613      	movlt	r3, r2
 800b3fa:	6033      	str	r3, [r6, #0]
 800b3fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b400:	4607      	mov	r7, r0
 800b402:	460c      	mov	r4, r1
 800b404:	b10a      	cbz	r2, 800b40a <_printf_common+0x26>
 800b406:	3301      	adds	r3, #1
 800b408:	6033      	str	r3, [r6, #0]
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	0699      	lsls	r1, r3, #26
 800b40e:	bf42      	ittt	mi
 800b410:	6833      	ldrmi	r3, [r6, #0]
 800b412:	3302      	addmi	r3, #2
 800b414:	6033      	strmi	r3, [r6, #0]
 800b416:	6825      	ldr	r5, [r4, #0]
 800b418:	f015 0506 	ands.w	r5, r5, #6
 800b41c:	d106      	bne.n	800b42c <_printf_common+0x48>
 800b41e:	f104 0a19 	add.w	sl, r4, #25
 800b422:	68e3      	ldr	r3, [r4, #12]
 800b424:	6832      	ldr	r2, [r6, #0]
 800b426:	1a9b      	subs	r3, r3, r2
 800b428:	42ab      	cmp	r3, r5
 800b42a:	dc26      	bgt.n	800b47a <_printf_common+0x96>
 800b42c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b430:	1e13      	subs	r3, r2, #0
 800b432:	6822      	ldr	r2, [r4, #0]
 800b434:	bf18      	it	ne
 800b436:	2301      	movne	r3, #1
 800b438:	0692      	lsls	r2, r2, #26
 800b43a:	d42b      	bmi.n	800b494 <_printf_common+0xb0>
 800b43c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b440:	4649      	mov	r1, r9
 800b442:	4638      	mov	r0, r7
 800b444:	47c0      	blx	r8
 800b446:	3001      	adds	r0, #1
 800b448:	d01e      	beq.n	800b488 <_printf_common+0xa4>
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	68e5      	ldr	r5, [r4, #12]
 800b44e:	6832      	ldr	r2, [r6, #0]
 800b450:	f003 0306 	and.w	r3, r3, #6
 800b454:	2b04      	cmp	r3, #4
 800b456:	bf08      	it	eq
 800b458:	1aad      	subeq	r5, r5, r2
 800b45a:	68a3      	ldr	r3, [r4, #8]
 800b45c:	6922      	ldr	r2, [r4, #16]
 800b45e:	bf0c      	ite	eq
 800b460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b464:	2500      	movne	r5, #0
 800b466:	4293      	cmp	r3, r2
 800b468:	bfc4      	itt	gt
 800b46a:	1a9b      	subgt	r3, r3, r2
 800b46c:	18ed      	addgt	r5, r5, r3
 800b46e:	2600      	movs	r6, #0
 800b470:	341a      	adds	r4, #26
 800b472:	42b5      	cmp	r5, r6
 800b474:	d11a      	bne.n	800b4ac <_printf_common+0xc8>
 800b476:	2000      	movs	r0, #0
 800b478:	e008      	b.n	800b48c <_printf_common+0xa8>
 800b47a:	2301      	movs	r3, #1
 800b47c:	4652      	mov	r2, sl
 800b47e:	4649      	mov	r1, r9
 800b480:	4638      	mov	r0, r7
 800b482:	47c0      	blx	r8
 800b484:	3001      	adds	r0, #1
 800b486:	d103      	bne.n	800b490 <_printf_common+0xac>
 800b488:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b490:	3501      	adds	r5, #1
 800b492:	e7c6      	b.n	800b422 <_printf_common+0x3e>
 800b494:	18e1      	adds	r1, r4, r3
 800b496:	1c5a      	adds	r2, r3, #1
 800b498:	2030      	movs	r0, #48	; 0x30
 800b49a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b49e:	4422      	add	r2, r4
 800b4a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b4a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b4a8:	3302      	adds	r3, #2
 800b4aa:	e7c7      	b.n	800b43c <_printf_common+0x58>
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	4622      	mov	r2, r4
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	4638      	mov	r0, r7
 800b4b4:	47c0      	blx	r8
 800b4b6:	3001      	adds	r0, #1
 800b4b8:	d0e6      	beq.n	800b488 <_printf_common+0xa4>
 800b4ba:	3601      	adds	r6, #1
 800b4bc:	e7d9      	b.n	800b472 <_printf_common+0x8e>
	...

0800b4c0 <_printf_i>:
 800b4c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c4:	7e0f      	ldrb	r7, [r1, #24]
 800b4c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4c8:	2f78      	cmp	r7, #120	; 0x78
 800b4ca:	4691      	mov	r9, r2
 800b4cc:	4680      	mov	r8, r0
 800b4ce:	460c      	mov	r4, r1
 800b4d0:	469a      	mov	sl, r3
 800b4d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4d6:	d807      	bhi.n	800b4e8 <_printf_i+0x28>
 800b4d8:	2f62      	cmp	r7, #98	; 0x62
 800b4da:	d80a      	bhi.n	800b4f2 <_printf_i+0x32>
 800b4dc:	2f00      	cmp	r7, #0
 800b4de:	f000 80d8 	beq.w	800b692 <_printf_i+0x1d2>
 800b4e2:	2f58      	cmp	r7, #88	; 0x58
 800b4e4:	f000 80a3 	beq.w	800b62e <_printf_i+0x16e>
 800b4e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4f0:	e03a      	b.n	800b568 <_printf_i+0xa8>
 800b4f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4f6:	2b15      	cmp	r3, #21
 800b4f8:	d8f6      	bhi.n	800b4e8 <_printf_i+0x28>
 800b4fa:	a101      	add	r1, pc, #4	; (adr r1, 800b500 <_printf_i+0x40>)
 800b4fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b500:	0800b559 	.word	0x0800b559
 800b504:	0800b56d 	.word	0x0800b56d
 800b508:	0800b4e9 	.word	0x0800b4e9
 800b50c:	0800b4e9 	.word	0x0800b4e9
 800b510:	0800b4e9 	.word	0x0800b4e9
 800b514:	0800b4e9 	.word	0x0800b4e9
 800b518:	0800b56d 	.word	0x0800b56d
 800b51c:	0800b4e9 	.word	0x0800b4e9
 800b520:	0800b4e9 	.word	0x0800b4e9
 800b524:	0800b4e9 	.word	0x0800b4e9
 800b528:	0800b4e9 	.word	0x0800b4e9
 800b52c:	0800b679 	.word	0x0800b679
 800b530:	0800b59d 	.word	0x0800b59d
 800b534:	0800b65b 	.word	0x0800b65b
 800b538:	0800b4e9 	.word	0x0800b4e9
 800b53c:	0800b4e9 	.word	0x0800b4e9
 800b540:	0800b69b 	.word	0x0800b69b
 800b544:	0800b4e9 	.word	0x0800b4e9
 800b548:	0800b59d 	.word	0x0800b59d
 800b54c:	0800b4e9 	.word	0x0800b4e9
 800b550:	0800b4e9 	.word	0x0800b4e9
 800b554:	0800b663 	.word	0x0800b663
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	1d1a      	adds	r2, r3, #4
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	602a      	str	r2, [r5, #0]
 800b560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b568:	2301      	movs	r3, #1
 800b56a:	e0a3      	b.n	800b6b4 <_printf_i+0x1f4>
 800b56c:	6820      	ldr	r0, [r4, #0]
 800b56e:	6829      	ldr	r1, [r5, #0]
 800b570:	0606      	lsls	r6, r0, #24
 800b572:	f101 0304 	add.w	r3, r1, #4
 800b576:	d50a      	bpl.n	800b58e <_printf_i+0xce>
 800b578:	680e      	ldr	r6, [r1, #0]
 800b57a:	602b      	str	r3, [r5, #0]
 800b57c:	2e00      	cmp	r6, #0
 800b57e:	da03      	bge.n	800b588 <_printf_i+0xc8>
 800b580:	232d      	movs	r3, #45	; 0x2d
 800b582:	4276      	negs	r6, r6
 800b584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b588:	485e      	ldr	r0, [pc, #376]	; (800b704 <_printf_i+0x244>)
 800b58a:	230a      	movs	r3, #10
 800b58c:	e019      	b.n	800b5c2 <_printf_i+0x102>
 800b58e:	680e      	ldr	r6, [r1, #0]
 800b590:	602b      	str	r3, [r5, #0]
 800b592:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b596:	bf18      	it	ne
 800b598:	b236      	sxthne	r6, r6
 800b59a:	e7ef      	b.n	800b57c <_printf_i+0xbc>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	6820      	ldr	r0, [r4, #0]
 800b5a0:	1d19      	adds	r1, r3, #4
 800b5a2:	6029      	str	r1, [r5, #0]
 800b5a4:	0601      	lsls	r1, r0, #24
 800b5a6:	d501      	bpl.n	800b5ac <_printf_i+0xec>
 800b5a8:	681e      	ldr	r6, [r3, #0]
 800b5aa:	e002      	b.n	800b5b2 <_printf_i+0xf2>
 800b5ac:	0646      	lsls	r6, r0, #25
 800b5ae:	d5fb      	bpl.n	800b5a8 <_printf_i+0xe8>
 800b5b0:	881e      	ldrh	r6, [r3, #0]
 800b5b2:	4854      	ldr	r0, [pc, #336]	; (800b704 <_printf_i+0x244>)
 800b5b4:	2f6f      	cmp	r7, #111	; 0x6f
 800b5b6:	bf0c      	ite	eq
 800b5b8:	2308      	moveq	r3, #8
 800b5ba:	230a      	movne	r3, #10
 800b5bc:	2100      	movs	r1, #0
 800b5be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5c2:	6865      	ldr	r5, [r4, #4]
 800b5c4:	60a5      	str	r5, [r4, #8]
 800b5c6:	2d00      	cmp	r5, #0
 800b5c8:	bfa2      	ittt	ge
 800b5ca:	6821      	ldrge	r1, [r4, #0]
 800b5cc:	f021 0104 	bicge.w	r1, r1, #4
 800b5d0:	6021      	strge	r1, [r4, #0]
 800b5d2:	b90e      	cbnz	r6, 800b5d8 <_printf_i+0x118>
 800b5d4:	2d00      	cmp	r5, #0
 800b5d6:	d04d      	beq.n	800b674 <_printf_i+0x1b4>
 800b5d8:	4615      	mov	r5, r2
 800b5da:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5de:	fb03 6711 	mls	r7, r3, r1, r6
 800b5e2:	5dc7      	ldrb	r7, [r0, r7]
 800b5e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5e8:	4637      	mov	r7, r6
 800b5ea:	42bb      	cmp	r3, r7
 800b5ec:	460e      	mov	r6, r1
 800b5ee:	d9f4      	bls.n	800b5da <_printf_i+0x11a>
 800b5f0:	2b08      	cmp	r3, #8
 800b5f2:	d10b      	bne.n	800b60c <_printf_i+0x14c>
 800b5f4:	6823      	ldr	r3, [r4, #0]
 800b5f6:	07de      	lsls	r6, r3, #31
 800b5f8:	d508      	bpl.n	800b60c <_printf_i+0x14c>
 800b5fa:	6923      	ldr	r3, [r4, #16]
 800b5fc:	6861      	ldr	r1, [r4, #4]
 800b5fe:	4299      	cmp	r1, r3
 800b600:	bfde      	ittt	le
 800b602:	2330      	movle	r3, #48	; 0x30
 800b604:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b608:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b60c:	1b52      	subs	r2, r2, r5
 800b60e:	6122      	str	r2, [r4, #16]
 800b610:	f8cd a000 	str.w	sl, [sp]
 800b614:	464b      	mov	r3, r9
 800b616:	aa03      	add	r2, sp, #12
 800b618:	4621      	mov	r1, r4
 800b61a:	4640      	mov	r0, r8
 800b61c:	f7ff fee2 	bl	800b3e4 <_printf_common>
 800b620:	3001      	adds	r0, #1
 800b622:	d14c      	bne.n	800b6be <_printf_i+0x1fe>
 800b624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b628:	b004      	add	sp, #16
 800b62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b62e:	4835      	ldr	r0, [pc, #212]	; (800b704 <_printf_i+0x244>)
 800b630:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b634:	6829      	ldr	r1, [r5, #0]
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	f851 6b04 	ldr.w	r6, [r1], #4
 800b63c:	6029      	str	r1, [r5, #0]
 800b63e:	061d      	lsls	r5, r3, #24
 800b640:	d514      	bpl.n	800b66c <_printf_i+0x1ac>
 800b642:	07df      	lsls	r7, r3, #31
 800b644:	bf44      	itt	mi
 800b646:	f043 0320 	orrmi.w	r3, r3, #32
 800b64a:	6023      	strmi	r3, [r4, #0]
 800b64c:	b91e      	cbnz	r6, 800b656 <_printf_i+0x196>
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	f023 0320 	bic.w	r3, r3, #32
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	2310      	movs	r3, #16
 800b658:	e7b0      	b.n	800b5bc <_printf_i+0xfc>
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	f043 0320 	orr.w	r3, r3, #32
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	2378      	movs	r3, #120	; 0x78
 800b664:	4828      	ldr	r0, [pc, #160]	; (800b708 <_printf_i+0x248>)
 800b666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b66a:	e7e3      	b.n	800b634 <_printf_i+0x174>
 800b66c:	0659      	lsls	r1, r3, #25
 800b66e:	bf48      	it	mi
 800b670:	b2b6      	uxthmi	r6, r6
 800b672:	e7e6      	b.n	800b642 <_printf_i+0x182>
 800b674:	4615      	mov	r5, r2
 800b676:	e7bb      	b.n	800b5f0 <_printf_i+0x130>
 800b678:	682b      	ldr	r3, [r5, #0]
 800b67a:	6826      	ldr	r6, [r4, #0]
 800b67c:	6961      	ldr	r1, [r4, #20]
 800b67e:	1d18      	adds	r0, r3, #4
 800b680:	6028      	str	r0, [r5, #0]
 800b682:	0635      	lsls	r5, r6, #24
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	d501      	bpl.n	800b68c <_printf_i+0x1cc>
 800b688:	6019      	str	r1, [r3, #0]
 800b68a:	e002      	b.n	800b692 <_printf_i+0x1d2>
 800b68c:	0670      	lsls	r0, r6, #25
 800b68e:	d5fb      	bpl.n	800b688 <_printf_i+0x1c8>
 800b690:	8019      	strh	r1, [r3, #0]
 800b692:	2300      	movs	r3, #0
 800b694:	6123      	str	r3, [r4, #16]
 800b696:	4615      	mov	r5, r2
 800b698:	e7ba      	b.n	800b610 <_printf_i+0x150>
 800b69a:	682b      	ldr	r3, [r5, #0]
 800b69c:	1d1a      	adds	r2, r3, #4
 800b69e:	602a      	str	r2, [r5, #0]
 800b6a0:	681d      	ldr	r5, [r3, #0]
 800b6a2:	6862      	ldr	r2, [r4, #4]
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	f7f4 fd9a 	bl	80001e0 <memchr>
 800b6ac:	b108      	cbz	r0, 800b6b2 <_printf_i+0x1f2>
 800b6ae:	1b40      	subs	r0, r0, r5
 800b6b0:	6060      	str	r0, [r4, #4]
 800b6b2:	6863      	ldr	r3, [r4, #4]
 800b6b4:	6123      	str	r3, [r4, #16]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6bc:	e7a8      	b.n	800b610 <_printf_i+0x150>
 800b6be:	6923      	ldr	r3, [r4, #16]
 800b6c0:	462a      	mov	r2, r5
 800b6c2:	4649      	mov	r1, r9
 800b6c4:	4640      	mov	r0, r8
 800b6c6:	47d0      	blx	sl
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	d0ab      	beq.n	800b624 <_printf_i+0x164>
 800b6cc:	6823      	ldr	r3, [r4, #0]
 800b6ce:	079b      	lsls	r3, r3, #30
 800b6d0:	d413      	bmi.n	800b6fa <_printf_i+0x23a>
 800b6d2:	68e0      	ldr	r0, [r4, #12]
 800b6d4:	9b03      	ldr	r3, [sp, #12]
 800b6d6:	4298      	cmp	r0, r3
 800b6d8:	bfb8      	it	lt
 800b6da:	4618      	movlt	r0, r3
 800b6dc:	e7a4      	b.n	800b628 <_printf_i+0x168>
 800b6de:	2301      	movs	r3, #1
 800b6e0:	4632      	mov	r2, r6
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	47d0      	blx	sl
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	d09b      	beq.n	800b624 <_printf_i+0x164>
 800b6ec:	3501      	adds	r5, #1
 800b6ee:	68e3      	ldr	r3, [r4, #12]
 800b6f0:	9903      	ldr	r1, [sp, #12]
 800b6f2:	1a5b      	subs	r3, r3, r1
 800b6f4:	42ab      	cmp	r3, r5
 800b6f6:	dcf2      	bgt.n	800b6de <_printf_i+0x21e>
 800b6f8:	e7eb      	b.n	800b6d2 <_printf_i+0x212>
 800b6fa:	2500      	movs	r5, #0
 800b6fc:	f104 0619 	add.w	r6, r4, #25
 800b700:	e7f5      	b.n	800b6ee <_printf_i+0x22e>
 800b702:	bf00      	nop
 800b704:	0800deb2 	.word	0x0800deb2
 800b708:	0800dec3 	.word	0x0800dec3

0800b70c <siprintf>:
 800b70c:	b40e      	push	{r1, r2, r3}
 800b70e:	b500      	push	{lr}
 800b710:	b09c      	sub	sp, #112	; 0x70
 800b712:	ab1d      	add	r3, sp, #116	; 0x74
 800b714:	9002      	str	r0, [sp, #8]
 800b716:	9006      	str	r0, [sp, #24]
 800b718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b71c:	4809      	ldr	r0, [pc, #36]	; (800b744 <siprintf+0x38>)
 800b71e:	9107      	str	r1, [sp, #28]
 800b720:	9104      	str	r1, [sp, #16]
 800b722:	4909      	ldr	r1, [pc, #36]	; (800b748 <siprintf+0x3c>)
 800b724:	f853 2b04 	ldr.w	r2, [r3], #4
 800b728:	9105      	str	r1, [sp, #20]
 800b72a:	6800      	ldr	r0, [r0, #0]
 800b72c:	9301      	str	r3, [sp, #4]
 800b72e:	a902      	add	r1, sp, #8
 800b730:	f001 fb78 	bl	800ce24 <_svfiprintf_r>
 800b734:	9b02      	ldr	r3, [sp, #8]
 800b736:	2200      	movs	r2, #0
 800b738:	701a      	strb	r2, [r3, #0]
 800b73a:	b01c      	add	sp, #112	; 0x70
 800b73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b740:	b003      	add	sp, #12
 800b742:	4770      	bx	lr
 800b744:	2000000c 	.word	0x2000000c
 800b748:	ffff0208 	.word	0xffff0208

0800b74c <quorem>:
 800b74c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b750:	6903      	ldr	r3, [r0, #16]
 800b752:	690c      	ldr	r4, [r1, #16]
 800b754:	42a3      	cmp	r3, r4
 800b756:	4607      	mov	r7, r0
 800b758:	f2c0 8081 	blt.w	800b85e <quorem+0x112>
 800b75c:	3c01      	subs	r4, #1
 800b75e:	f101 0814 	add.w	r8, r1, #20
 800b762:	f100 0514 	add.w	r5, r0, #20
 800b766:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b76a:	9301      	str	r3, [sp, #4]
 800b76c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b770:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b774:	3301      	adds	r3, #1
 800b776:	429a      	cmp	r2, r3
 800b778:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b77c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b780:	fbb2 f6f3 	udiv	r6, r2, r3
 800b784:	d331      	bcc.n	800b7ea <quorem+0x9e>
 800b786:	f04f 0e00 	mov.w	lr, #0
 800b78a:	4640      	mov	r0, r8
 800b78c:	46ac      	mov	ip, r5
 800b78e:	46f2      	mov	sl, lr
 800b790:	f850 2b04 	ldr.w	r2, [r0], #4
 800b794:	b293      	uxth	r3, r2
 800b796:	fb06 e303 	mla	r3, r6, r3, lr
 800b79a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	ebaa 0303 	sub.w	r3, sl, r3
 800b7a4:	f8dc a000 	ldr.w	sl, [ip]
 800b7a8:	0c12      	lsrs	r2, r2, #16
 800b7aa:	fa13 f38a 	uxtah	r3, r3, sl
 800b7ae:	fb06 e202 	mla	r2, r6, r2, lr
 800b7b2:	9300      	str	r3, [sp, #0]
 800b7b4:	9b00      	ldr	r3, [sp, #0]
 800b7b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b7ba:	b292      	uxth	r2, r2
 800b7bc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b7c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7c4:	f8bd 3000 	ldrh.w	r3, [sp]
 800b7c8:	4581      	cmp	r9, r0
 800b7ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7ce:	f84c 3b04 	str.w	r3, [ip], #4
 800b7d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b7d6:	d2db      	bcs.n	800b790 <quorem+0x44>
 800b7d8:	f855 300b 	ldr.w	r3, [r5, fp]
 800b7dc:	b92b      	cbnz	r3, 800b7ea <quorem+0x9e>
 800b7de:	9b01      	ldr	r3, [sp, #4]
 800b7e0:	3b04      	subs	r3, #4
 800b7e2:	429d      	cmp	r5, r3
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	d32e      	bcc.n	800b846 <quorem+0xfa>
 800b7e8:	613c      	str	r4, [r7, #16]
 800b7ea:	4638      	mov	r0, r7
 800b7ec:	f001 f8c6 	bl	800c97c <__mcmp>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	db24      	blt.n	800b83e <quorem+0xf2>
 800b7f4:	3601      	adds	r6, #1
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f04f 0c00 	mov.w	ip, #0
 800b7fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800b800:	f8d0 e000 	ldr.w	lr, [r0]
 800b804:	b293      	uxth	r3, r2
 800b806:	ebac 0303 	sub.w	r3, ip, r3
 800b80a:	0c12      	lsrs	r2, r2, #16
 800b80c:	fa13 f38e 	uxtah	r3, r3, lr
 800b810:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b814:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b818:	b29b      	uxth	r3, r3
 800b81a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b81e:	45c1      	cmp	r9, r8
 800b820:	f840 3b04 	str.w	r3, [r0], #4
 800b824:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b828:	d2e8      	bcs.n	800b7fc <quorem+0xb0>
 800b82a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b82e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b832:	b922      	cbnz	r2, 800b83e <quorem+0xf2>
 800b834:	3b04      	subs	r3, #4
 800b836:	429d      	cmp	r5, r3
 800b838:	461a      	mov	r2, r3
 800b83a:	d30a      	bcc.n	800b852 <quorem+0x106>
 800b83c:	613c      	str	r4, [r7, #16]
 800b83e:	4630      	mov	r0, r6
 800b840:	b003      	add	sp, #12
 800b842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b846:	6812      	ldr	r2, [r2, #0]
 800b848:	3b04      	subs	r3, #4
 800b84a:	2a00      	cmp	r2, #0
 800b84c:	d1cc      	bne.n	800b7e8 <quorem+0x9c>
 800b84e:	3c01      	subs	r4, #1
 800b850:	e7c7      	b.n	800b7e2 <quorem+0x96>
 800b852:	6812      	ldr	r2, [r2, #0]
 800b854:	3b04      	subs	r3, #4
 800b856:	2a00      	cmp	r2, #0
 800b858:	d1f0      	bne.n	800b83c <quorem+0xf0>
 800b85a:	3c01      	subs	r4, #1
 800b85c:	e7eb      	b.n	800b836 <quorem+0xea>
 800b85e:	2000      	movs	r0, #0
 800b860:	e7ee      	b.n	800b840 <quorem+0xf4>
 800b862:	0000      	movs	r0, r0
 800b864:	0000      	movs	r0, r0
	...

0800b868 <_dtoa_r>:
 800b868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b86c:	ed2d 8b04 	vpush	{d8-d9}
 800b870:	ec57 6b10 	vmov	r6, r7, d0
 800b874:	b093      	sub	sp, #76	; 0x4c
 800b876:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b878:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b87c:	9106      	str	r1, [sp, #24]
 800b87e:	ee10 aa10 	vmov	sl, s0
 800b882:	4604      	mov	r4, r0
 800b884:	9209      	str	r2, [sp, #36]	; 0x24
 800b886:	930c      	str	r3, [sp, #48]	; 0x30
 800b888:	46bb      	mov	fp, r7
 800b88a:	b975      	cbnz	r5, 800b8aa <_dtoa_r+0x42>
 800b88c:	2010      	movs	r0, #16
 800b88e:	f000 fddd 	bl	800c44c <malloc>
 800b892:	4602      	mov	r2, r0
 800b894:	6260      	str	r0, [r4, #36]	; 0x24
 800b896:	b920      	cbnz	r0, 800b8a2 <_dtoa_r+0x3a>
 800b898:	4ba7      	ldr	r3, [pc, #668]	; (800bb38 <_dtoa_r+0x2d0>)
 800b89a:	21ea      	movs	r1, #234	; 0xea
 800b89c:	48a7      	ldr	r0, [pc, #668]	; (800bb3c <_dtoa_r+0x2d4>)
 800b89e:	f001 fbd1 	bl	800d044 <__assert_func>
 800b8a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b8a6:	6005      	str	r5, [r0, #0]
 800b8a8:	60c5      	str	r5, [r0, #12]
 800b8aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8ac:	6819      	ldr	r1, [r3, #0]
 800b8ae:	b151      	cbz	r1, 800b8c6 <_dtoa_r+0x5e>
 800b8b0:	685a      	ldr	r2, [r3, #4]
 800b8b2:	604a      	str	r2, [r1, #4]
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	4093      	lsls	r3, r2
 800b8b8:	608b      	str	r3, [r1, #8]
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f000 fe1c 	bl	800c4f8 <_Bfree>
 800b8c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	601a      	str	r2, [r3, #0]
 800b8c6:	1e3b      	subs	r3, r7, #0
 800b8c8:	bfaa      	itet	ge
 800b8ca:	2300      	movge	r3, #0
 800b8cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b8d0:	f8c8 3000 	strge.w	r3, [r8]
 800b8d4:	4b9a      	ldr	r3, [pc, #616]	; (800bb40 <_dtoa_r+0x2d8>)
 800b8d6:	bfbc      	itt	lt
 800b8d8:	2201      	movlt	r2, #1
 800b8da:	f8c8 2000 	strlt.w	r2, [r8]
 800b8de:	ea33 030b 	bics.w	r3, r3, fp
 800b8e2:	d11b      	bne.n	800b91c <_dtoa_r+0xb4>
 800b8e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b8ea:	6013      	str	r3, [r2, #0]
 800b8ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8f0:	4333      	orrs	r3, r6
 800b8f2:	f000 8592 	beq.w	800c41a <_dtoa_r+0xbb2>
 800b8f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8f8:	b963      	cbnz	r3, 800b914 <_dtoa_r+0xac>
 800b8fa:	4b92      	ldr	r3, [pc, #584]	; (800bb44 <_dtoa_r+0x2dc>)
 800b8fc:	e022      	b.n	800b944 <_dtoa_r+0xdc>
 800b8fe:	4b92      	ldr	r3, [pc, #584]	; (800bb48 <_dtoa_r+0x2e0>)
 800b900:	9301      	str	r3, [sp, #4]
 800b902:	3308      	adds	r3, #8
 800b904:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	9801      	ldr	r0, [sp, #4]
 800b90a:	b013      	add	sp, #76	; 0x4c
 800b90c:	ecbd 8b04 	vpop	{d8-d9}
 800b910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b914:	4b8b      	ldr	r3, [pc, #556]	; (800bb44 <_dtoa_r+0x2dc>)
 800b916:	9301      	str	r3, [sp, #4]
 800b918:	3303      	adds	r3, #3
 800b91a:	e7f3      	b.n	800b904 <_dtoa_r+0x9c>
 800b91c:	2200      	movs	r2, #0
 800b91e:	2300      	movs	r3, #0
 800b920:	4650      	mov	r0, sl
 800b922:	4659      	mov	r1, fp
 800b924:	f7f5 f8d0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b928:	ec4b ab19 	vmov	d9, sl, fp
 800b92c:	4680      	mov	r8, r0
 800b92e:	b158      	cbz	r0, 800b948 <_dtoa_r+0xe0>
 800b930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b932:	2301      	movs	r3, #1
 800b934:	6013      	str	r3, [r2, #0]
 800b936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f000 856b 	beq.w	800c414 <_dtoa_r+0xbac>
 800b93e:	4883      	ldr	r0, [pc, #524]	; (800bb4c <_dtoa_r+0x2e4>)
 800b940:	6018      	str	r0, [r3, #0]
 800b942:	1e43      	subs	r3, r0, #1
 800b944:	9301      	str	r3, [sp, #4]
 800b946:	e7df      	b.n	800b908 <_dtoa_r+0xa0>
 800b948:	ec4b ab10 	vmov	d0, sl, fp
 800b94c:	aa10      	add	r2, sp, #64	; 0x40
 800b94e:	a911      	add	r1, sp, #68	; 0x44
 800b950:	4620      	mov	r0, r4
 800b952:	f001 f8b9 	bl	800cac8 <__d2b>
 800b956:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b95a:	ee08 0a10 	vmov	s16, r0
 800b95e:	2d00      	cmp	r5, #0
 800b960:	f000 8084 	beq.w	800ba6c <_dtoa_r+0x204>
 800b964:	ee19 3a90 	vmov	r3, s19
 800b968:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b96c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b970:	4656      	mov	r6, sl
 800b972:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b976:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b97a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b97e:	4b74      	ldr	r3, [pc, #464]	; (800bb50 <_dtoa_r+0x2e8>)
 800b980:	2200      	movs	r2, #0
 800b982:	4630      	mov	r0, r6
 800b984:	4639      	mov	r1, r7
 800b986:	f7f4 fc7f 	bl	8000288 <__aeabi_dsub>
 800b98a:	a365      	add	r3, pc, #404	; (adr r3, 800bb20 <_dtoa_r+0x2b8>)
 800b98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b990:	f7f4 fe32 	bl	80005f8 <__aeabi_dmul>
 800b994:	a364      	add	r3, pc, #400	; (adr r3, 800bb28 <_dtoa_r+0x2c0>)
 800b996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99a:	f7f4 fc77 	bl	800028c <__adddf3>
 800b99e:	4606      	mov	r6, r0
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	460f      	mov	r7, r1
 800b9a4:	f7f4 fdbe 	bl	8000524 <__aeabi_i2d>
 800b9a8:	a361      	add	r3, pc, #388	; (adr r3, 800bb30 <_dtoa_r+0x2c8>)
 800b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ae:	f7f4 fe23 	bl	80005f8 <__aeabi_dmul>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	4639      	mov	r1, r7
 800b9ba:	f7f4 fc67 	bl	800028c <__adddf3>
 800b9be:	4606      	mov	r6, r0
 800b9c0:	460f      	mov	r7, r1
 800b9c2:	f7f5 f8c9 	bl	8000b58 <__aeabi_d2iz>
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	9000      	str	r0, [sp, #0]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	4639      	mov	r1, r7
 800b9d0:	f7f5 f884 	bl	8000adc <__aeabi_dcmplt>
 800b9d4:	b150      	cbz	r0, 800b9ec <_dtoa_r+0x184>
 800b9d6:	9800      	ldr	r0, [sp, #0]
 800b9d8:	f7f4 fda4 	bl	8000524 <__aeabi_i2d>
 800b9dc:	4632      	mov	r2, r6
 800b9de:	463b      	mov	r3, r7
 800b9e0:	f7f5 f872 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9e4:	b910      	cbnz	r0, 800b9ec <_dtoa_r+0x184>
 800b9e6:	9b00      	ldr	r3, [sp, #0]
 800b9e8:	3b01      	subs	r3, #1
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	9b00      	ldr	r3, [sp, #0]
 800b9ee:	2b16      	cmp	r3, #22
 800b9f0:	d85a      	bhi.n	800baa8 <_dtoa_r+0x240>
 800b9f2:	9a00      	ldr	r2, [sp, #0]
 800b9f4:	4b57      	ldr	r3, [pc, #348]	; (800bb54 <_dtoa_r+0x2ec>)
 800b9f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fe:	ec51 0b19 	vmov	r0, r1, d9
 800ba02:	f7f5 f86b 	bl	8000adc <__aeabi_dcmplt>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d050      	beq.n	800baac <_dtoa_r+0x244>
 800ba0a:	9b00      	ldr	r3, [sp, #0]
 800ba0c:	3b01      	subs	r3, #1
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	2300      	movs	r3, #0
 800ba12:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ba16:	1b5d      	subs	r5, r3, r5
 800ba18:	1e6b      	subs	r3, r5, #1
 800ba1a:	9305      	str	r3, [sp, #20]
 800ba1c:	bf45      	ittet	mi
 800ba1e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ba22:	9304      	strmi	r3, [sp, #16]
 800ba24:	2300      	movpl	r3, #0
 800ba26:	2300      	movmi	r3, #0
 800ba28:	bf4c      	ite	mi
 800ba2a:	9305      	strmi	r3, [sp, #20]
 800ba2c:	9304      	strpl	r3, [sp, #16]
 800ba2e:	9b00      	ldr	r3, [sp, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	db3d      	blt.n	800bab0 <_dtoa_r+0x248>
 800ba34:	9b05      	ldr	r3, [sp, #20]
 800ba36:	9a00      	ldr	r2, [sp, #0]
 800ba38:	920a      	str	r2, [sp, #40]	; 0x28
 800ba3a:	4413      	add	r3, r2
 800ba3c:	9305      	str	r3, [sp, #20]
 800ba3e:	2300      	movs	r3, #0
 800ba40:	9307      	str	r3, [sp, #28]
 800ba42:	9b06      	ldr	r3, [sp, #24]
 800ba44:	2b09      	cmp	r3, #9
 800ba46:	f200 8089 	bhi.w	800bb5c <_dtoa_r+0x2f4>
 800ba4a:	2b05      	cmp	r3, #5
 800ba4c:	bfc4      	itt	gt
 800ba4e:	3b04      	subgt	r3, #4
 800ba50:	9306      	strgt	r3, [sp, #24]
 800ba52:	9b06      	ldr	r3, [sp, #24]
 800ba54:	f1a3 0302 	sub.w	r3, r3, #2
 800ba58:	bfcc      	ite	gt
 800ba5a:	2500      	movgt	r5, #0
 800ba5c:	2501      	movle	r5, #1
 800ba5e:	2b03      	cmp	r3, #3
 800ba60:	f200 8087 	bhi.w	800bb72 <_dtoa_r+0x30a>
 800ba64:	e8df f003 	tbb	[pc, r3]
 800ba68:	59383a2d 	.word	0x59383a2d
 800ba6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ba70:	441d      	add	r5, r3
 800ba72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba76:	2b20      	cmp	r3, #32
 800ba78:	bfc1      	itttt	gt
 800ba7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba82:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba86:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba8a:	bfda      	itte	le
 800ba8c:	f1c3 0320 	rsble	r3, r3, #32
 800ba90:	fa06 f003 	lslle.w	r0, r6, r3
 800ba94:	4318      	orrgt	r0, r3
 800ba96:	f7f4 fd35 	bl	8000504 <__aeabi_ui2d>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	4606      	mov	r6, r0
 800ba9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800baa2:	3d01      	subs	r5, #1
 800baa4:	930e      	str	r3, [sp, #56]	; 0x38
 800baa6:	e76a      	b.n	800b97e <_dtoa_r+0x116>
 800baa8:	2301      	movs	r3, #1
 800baaa:	e7b2      	b.n	800ba12 <_dtoa_r+0x1aa>
 800baac:	900b      	str	r0, [sp, #44]	; 0x2c
 800baae:	e7b1      	b.n	800ba14 <_dtoa_r+0x1ac>
 800bab0:	9b04      	ldr	r3, [sp, #16]
 800bab2:	9a00      	ldr	r2, [sp, #0]
 800bab4:	1a9b      	subs	r3, r3, r2
 800bab6:	9304      	str	r3, [sp, #16]
 800bab8:	4253      	negs	r3, r2
 800baba:	9307      	str	r3, [sp, #28]
 800babc:	2300      	movs	r3, #0
 800babe:	930a      	str	r3, [sp, #40]	; 0x28
 800bac0:	e7bf      	b.n	800ba42 <_dtoa_r+0x1da>
 800bac2:	2300      	movs	r3, #0
 800bac4:	9308      	str	r3, [sp, #32]
 800bac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac8:	2b00      	cmp	r3, #0
 800baca:	dc55      	bgt.n	800bb78 <_dtoa_r+0x310>
 800bacc:	2301      	movs	r3, #1
 800bace:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bad2:	461a      	mov	r2, r3
 800bad4:	9209      	str	r2, [sp, #36]	; 0x24
 800bad6:	e00c      	b.n	800baf2 <_dtoa_r+0x28a>
 800bad8:	2301      	movs	r3, #1
 800bada:	e7f3      	b.n	800bac4 <_dtoa_r+0x25c>
 800badc:	2300      	movs	r3, #0
 800bade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bae0:	9308      	str	r3, [sp, #32]
 800bae2:	9b00      	ldr	r3, [sp, #0]
 800bae4:	4413      	add	r3, r2
 800bae6:	9302      	str	r3, [sp, #8]
 800bae8:	3301      	adds	r3, #1
 800baea:	2b01      	cmp	r3, #1
 800baec:	9303      	str	r3, [sp, #12]
 800baee:	bfb8      	it	lt
 800baf0:	2301      	movlt	r3, #1
 800baf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800baf4:	2200      	movs	r2, #0
 800baf6:	6042      	str	r2, [r0, #4]
 800baf8:	2204      	movs	r2, #4
 800bafa:	f102 0614 	add.w	r6, r2, #20
 800bafe:	429e      	cmp	r6, r3
 800bb00:	6841      	ldr	r1, [r0, #4]
 800bb02:	d93d      	bls.n	800bb80 <_dtoa_r+0x318>
 800bb04:	4620      	mov	r0, r4
 800bb06:	f000 fcb7 	bl	800c478 <_Balloc>
 800bb0a:	9001      	str	r0, [sp, #4]
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	d13b      	bne.n	800bb88 <_dtoa_r+0x320>
 800bb10:	4b11      	ldr	r3, [pc, #68]	; (800bb58 <_dtoa_r+0x2f0>)
 800bb12:	4602      	mov	r2, r0
 800bb14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bb18:	e6c0      	b.n	800b89c <_dtoa_r+0x34>
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e7df      	b.n	800bade <_dtoa_r+0x276>
 800bb1e:	bf00      	nop
 800bb20:	636f4361 	.word	0x636f4361
 800bb24:	3fd287a7 	.word	0x3fd287a7
 800bb28:	8b60c8b3 	.word	0x8b60c8b3
 800bb2c:	3fc68a28 	.word	0x3fc68a28
 800bb30:	509f79fb 	.word	0x509f79fb
 800bb34:	3fd34413 	.word	0x3fd34413
 800bb38:	0800dee1 	.word	0x0800dee1
 800bb3c:	0800def8 	.word	0x0800def8
 800bb40:	7ff00000 	.word	0x7ff00000
 800bb44:	0800dedd 	.word	0x0800dedd
 800bb48:	0800ded4 	.word	0x0800ded4
 800bb4c:	0800deb1 	.word	0x0800deb1
 800bb50:	3ff80000 	.word	0x3ff80000
 800bb54:	0800dfe8 	.word	0x0800dfe8
 800bb58:	0800df53 	.word	0x0800df53
 800bb5c:	2501      	movs	r5, #1
 800bb5e:	2300      	movs	r3, #0
 800bb60:	9306      	str	r3, [sp, #24]
 800bb62:	9508      	str	r5, [sp, #32]
 800bb64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	2312      	movs	r3, #18
 800bb70:	e7b0      	b.n	800bad4 <_dtoa_r+0x26c>
 800bb72:	2301      	movs	r3, #1
 800bb74:	9308      	str	r3, [sp, #32]
 800bb76:	e7f5      	b.n	800bb64 <_dtoa_r+0x2fc>
 800bb78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb7e:	e7b8      	b.n	800baf2 <_dtoa_r+0x28a>
 800bb80:	3101      	adds	r1, #1
 800bb82:	6041      	str	r1, [r0, #4]
 800bb84:	0052      	lsls	r2, r2, #1
 800bb86:	e7b8      	b.n	800bafa <_dtoa_r+0x292>
 800bb88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb8a:	9a01      	ldr	r2, [sp, #4]
 800bb8c:	601a      	str	r2, [r3, #0]
 800bb8e:	9b03      	ldr	r3, [sp, #12]
 800bb90:	2b0e      	cmp	r3, #14
 800bb92:	f200 809d 	bhi.w	800bcd0 <_dtoa_r+0x468>
 800bb96:	2d00      	cmp	r5, #0
 800bb98:	f000 809a 	beq.w	800bcd0 <_dtoa_r+0x468>
 800bb9c:	9b00      	ldr	r3, [sp, #0]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	dd32      	ble.n	800bc08 <_dtoa_r+0x3a0>
 800bba2:	4ab7      	ldr	r2, [pc, #732]	; (800be80 <_dtoa_r+0x618>)
 800bba4:	f003 030f 	and.w	r3, r3, #15
 800bba8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bbac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bbb0:	9b00      	ldr	r3, [sp, #0]
 800bbb2:	05d8      	lsls	r0, r3, #23
 800bbb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bbb8:	d516      	bpl.n	800bbe8 <_dtoa_r+0x380>
 800bbba:	4bb2      	ldr	r3, [pc, #712]	; (800be84 <_dtoa_r+0x61c>)
 800bbbc:	ec51 0b19 	vmov	r0, r1, d9
 800bbc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bbc4:	f7f4 fe42 	bl	800084c <__aeabi_ddiv>
 800bbc8:	f007 070f 	and.w	r7, r7, #15
 800bbcc:	4682      	mov	sl, r0
 800bbce:	468b      	mov	fp, r1
 800bbd0:	2503      	movs	r5, #3
 800bbd2:	4eac      	ldr	r6, [pc, #688]	; (800be84 <_dtoa_r+0x61c>)
 800bbd4:	b957      	cbnz	r7, 800bbec <_dtoa_r+0x384>
 800bbd6:	4642      	mov	r2, r8
 800bbd8:	464b      	mov	r3, r9
 800bbda:	4650      	mov	r0, sl
 800bbdc:	4659      	mov	r1, fp
 800bbde:	f7f4 fe35 	bl	800084c <__aeabi_ddiv>
 800bbe2:	4682      	mov	sl, r0
 800bbe4:	468b      	mov	fp, r1
 800bbe6:	e028      	b.n	800bc3a <_dtoa_r+0x3d2>
 800bbe8:	2502      	movs	r5, #2
 800bbea:	e7f2      	b.n	800bbd2 <_dtoa_r+0x36a>
 800bbec:	07f9      	lsls	r1, r7, #31
 800bbee:	d508      	bpl.n	800bc02 <_dtoa_r+0x39a>
 800bbf0:	4640      	mov	r0, r8
 800bbf2:	4649      	mov	r1, r9
 800bbf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bbf8:	f7f4 fcfe 	bl	80005f8 <__aeabi_dmul>
 800bbfc:	3501      	adds	r5, #1
 800bbfe:	4680      	mov	r8, r0
 800bc00:	4689      	mov	r9, r1
 800bc02:	107f      	asrs	r7, r7, #1
 800bc04:	3608      	adds	r6, #8
 800bc06:	e7e5      	b.n	800bbd4 <_dtoa_r+0x36c>
 800bc08:	f000 809b 	beq.w	800bd42 <_dtoa_r+0x4da>
 800bc0c:	9b00      	ldr	r3, [sp, #0]
 800bc0e:	4f9d      	ldr	r7, [pc, #628]	; (800be84 <_dtoa_r+0x61c>)
 800bc10:	425e      	negs	r6, r3
 800bc12:	4b9b      	ldr	r3, [pc, #620]	; (800be80 <_dtoa_r+0x618>)
 800bc14:	f006 020f 	and.w	r2, r6, #15
 800bc18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	ec51 0b19 	vmov	r0, r1, d9
 800bc24:	f7f4 fce8 	bl	80005f8 <__aeabi_dmul>
 800bc28:	1136      	asrs	r6, r6, #4
 800bc2a:	4682      	mov	sl, r0
 800bc2c:	468b      	mov	fp, r1
 800bc2e:	2300      	movs	r3, #0
 800bc30:	2502      	movs	r5, #2
 800bc32:	2e00      	cmp	r6, #0
 800bc34:	d17a      	bne.n	800bd2c <_dtoa_r+0x4c4>
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1d3      	bne.n	800bbe2 <_dtoa_r+0x37a>
 800bc3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 8082 	beq.w	800bd46 <_dtoa_r+0x4de>
 800bc42:	4b91      	ldr	r3, [pc, #580]	; (800be88 <_dtoa_r+0x620>)
 800bc44:	2200      	movs	r2, #0
 800bc46:	4650      	mov	r0, sl
 800bc48:	4659      	mov	r1, fp
 800bc4a:	f7f4 ff47 	bl	8000adc <__aeabi_dcmplt>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d079      	beq.n	800bd46 <_dtoa_r+0x4de>
 800bc52:	9b03      	ldr	r3, [sp, #12]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d076      	beq.n	800bd46 <_dtoa_r+0x4de>
 800bc58:	9b02      	ldr	r3, [sp, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	dd36      	ble.n	800bccc <_dtoa_r+0x464>
 800bc5e:	9b00      	ldr	r3, [sp, #0]
 800bc60:	4650      	mov	r0, sl
 800bc62:	4659      	mov	r1, fp
 800bc64:	1e5f      	subs	r7, r3, #1
 800bc66:	2200      	movs	r2, #0
 800bc68:	4b88      	ldr	r3, [pc, #544]	; (800be8c <_dtoa_r+0x624>)
 800bc6a:	f7f4 fcc5 	bl	80005f8 <__aeabi_dmul>
 800bc6e:	9e02      	ldr	r6, [sp, #8]
 800bc70:	4682      	mov	sl, r0
 800bc72:	468b      	mov	fp, r1
 800bc74:	3501      	adds	r5, #1
 800bc76:	4628      	mov	r0, r5
 800bc78:	f7f4 fc54 	bl	8000524 <__aeabi_i2d>
 800bc7c:	4652      	mov	r2, sl
 800bc7e:	465b      	mov	r3, fp
 800bc80:	f7f4 fcba 	bl	80005f8 <__aeabi_dmul>
 800bc84:	4b82      	ldr	r3, [pc, #520]	; (800be90 <_dtoa_r+0x628>)
 800bc86:	2200      	movs	r2, #0
 800bc88:	f7f4 fb00 	bl	800028c <__adddf3>
 800bc8c:	46d0      	mov	r8, sl
 800bc8e:	46d9      	mov	r9, fp
 800bc90:	4682      	mov	sl, r0
 800bc92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc96:	2e00      	cmp	r6, #0
 800bc98:	d158      	bne.n	800bd4c <_dtoa_r+0x4e4>
 800bc9a:	4b7e      	ldr	r3, [pc, #504]	; (800be94 <_dtoa_r+0x62c>)
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	4640      	mov	r0, r8
 800bca0:	4649      	mov	r1, r9
 800bca2:	f7f4 faf1 	bl	8000288 <__aeabi_dsub>
 800bca6:	4652      	mov	r2, sl
 800bca8:	465b      	mov	r3, fp
 800bcaa:	4680      	mov	r8, r0
 800bcac:	4689      	mov	r9, r1
 800bcae:	f7f4 ff33 	bl	8000b18 <__aeabi_dcmpgt>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	f040 8295 	bne.w	800c1e2 <_dtoa_r+0x97a>
 800bcb8:	4652      	mov	r2, sl
 800bcba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bcbe:	4640      	mov	r0, r8
 800bcc0:	4649      	mov	r1, r9
 800bcc2:	f7f4 ff0b 	bl	8000adc <__aeabi_dcmplt>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	f040 8289 	bne.w	800c1de <_dtoa_r+0x976>
 800bccc:	ec5b ab19 	vmov	sl, fp, d9
 800bcd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f2c0 8148 	blt.w	800bf68 <_dtoa_r+0x700>
 800bcd8:	9a00      	ldr	r2, [sp, #0]
 800bcda:	2a0e      	cmp	r2, #14
 800bcdc:	f300 8144 	bgt.w	800bf68 <_dtoa_r+0x700>
 800bce0:	4b67      	ldr	r3, [pc, #412]	; (800be80 <_dtoa_r+0x618>)
 800bce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bce6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f280 80d5 	bge.w	800be9c <_dtoa_r+0x634>
 800bcf2:	9b03      	ldr	r3, [sp, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f300 80d1 	bgt.w	800be9c <_dtoa_r+0x634>
 800bcfa:	f040 826f 	bne.w	800c1dc <_dtoa_r+0x974>
 800bcfe:	4b65      	ldr	r3, [pc, #404]	; (800be94 <_dtoa_r+0x62c>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	4640      	mov	r0, r8
 800bd04:	4649      	mov	r1, r9
 800bd06:	f7f4 fc77 	bl	80005f8 <__aeabi_dmul>
 800bd0a:	4652      	mov	r2, sl
 800bd0c:	465b      	mov	r3, fp
 800bd0e:	f7f4 fef9 	bl	8000b04 <__aeabi_dcmpge>
 800bd12:	9e03      	ldr	r6, [sp, #12]
 800bd14:	4637      	mov	r7, r6
 800bd16:	2800      	cmp	r0, #0
 800bd18:	f040 8245 	bne.w	800c1a6 <_dtoa_r+0x93e>
 800bd1c:	9d01      	ldr	r5, [sp, #4]
 800bd1e:	2331      	movs	r3, #49	; 0x31
 800bd20:	f805 3b01 	strb.w	r3, [r5], #1
 800bd24:	9b00      	ldr	r3, [sp, #0]
 800bd26:	3301      	adds	r3, #1
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	e240      	b.n	800c1ae <_dtoa_r+0x946>
 800bd2c:	07f2      	lsls	r2, r6, #31
 800bd2e:	d505      	bpl.n	800bd3c <_dtoa_r+0x4d4>
 800bd30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd34:	f7f4 fc60 	bl	80005f8 <__aeabi_dmul>
 800bd38:	3501      	adds	r5, #1
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	1076      	asrs	r6, r6, #1
 800bd3e:	3708      	adds	r7, #8
 800bd40:	e777      	b.n	800bc32 <_dtoa_r+0x3ca>
 800bd42:	2502      	movs	r5, #2
 800bd44:	e779      	b.n	800bc3a <_dtoa_r+0x3d2>
 800bd46:	9f00      	ldr	r7, [sp, #0]
 800bd48:	9e03      	ldr	r6, [sp, #12]
 800bd4a:	e794      	b.n	800bc76 <_dtoa_r+0x40e>
 800bd4c:	9901      	ldr	r1, [sp, #4]
 800bd4e:	4b4c      	ldr	r3, [pc, #304]	; (800be80 <_dtoa_r+0x618>)
 800bd50:	4431      	add	r1, r6
 800bd52:	910d      	str	r1, [sp, #52]	; 0x34
 800bd54:	9908      	ldr	r1, [sp, #32]
 800bd56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bd5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd5e:	2900      	cmp	r1, #0
 800bd60:	d043      	beq.n	800bdea <_dtoa_r+0x582>
 800bd62:	494d      	ldr	r1, [pc, #308]	; (800be98 <_dtoa_r+0x630>)
 800bd64:	2000      	movs	r0, #0
 800bd66:	f7f4 fd71 	bl	800084c <__aeabi_ddiv>
 800bd6a:	4652      	mov	r2, sl
 800bd6c:	465b      	mov	r3, fp
 800bd6e:	f7f4 fa8b 	bl	8000288 <__aeabi_dsub>
 800bd72:	9d01      	ldr	r5, [sp, #4]
 800bd74:	4682      	mov	sl, r0
 800bd76:	468b      	mov	fp, r1
 800bd78:	4649      	mov	r1, r9
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	f7f4 feec 	bl	8000b58 <__aeabi_d2iz>
 800bd80:	4606      	mov	r6, r0
 800bd82:	f7f4 fbcf 	bl	8000524 <__aeabi_i2d>
 800bd86:	4602      	mov	r2, r0
 800bd88:	460b      	mov	r3, r1
 800bd8a:	4640      	mov	r0, r8
 800bd8c:	4649      	mov	r1, r9
 800bd8e:	f7f4 fa7b 	bl	8000288 <__aeabi_dsub>
 800bd92:	3630      	adds	r6, #48	; 0x30
 800bd94:	f805 6b01 	strb.w	r6, [r5], #1
 800bd98:	4652      	mov	r2, sl
 800bd9a:	465b      	mov	r3, fp
 800bd9c:	4680      	mov	r8, r0
 800bd9e:	4689      	mov	r9, r1
 800bda0:	f7f4 fe9c 	bl	8000adc <__aeabi_dcmplt>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d163      	bne.n	800be70 <_dtoa_r+0x608>
 800bda8:	4642      	mov	r2, r8
 800bdaa:	464b      	mov	r3, r9
 800bdac:	4936      	ldr	r1, [pc, #216]	; (800be88 <_dtoa_r+0x620>)
 800bdae:	2000      	movs	r0, #0
 800bdb0:	f7f4 fa6a 	bl	8000288 <__aeabi_dsub>
 800bdb4:	4652      	mov	r2, sl
 800bdb6:	465b      	mov	r3, fp
 800bdb8:	f7f4 fe90 	bl	8000adc <__aeabi_dcmplt>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	f040 80b5 	bne.w	800bf2c <_dtoa_r+0x6c4>
 800bdc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdc4:	429d      	cmp	r5, r3
 800bdc6:	d081      	beq.n	800bccc <_dtoa_r+0x464>
 800bdc8:	4b30      	ldr	r3, [pc, #192]	; (800be8c <_dtoa_r+0x624>)
 800bdca:	2200      	movs	r2, #0
 800bdcc:	4650      	mov	r0, sl
 800bdce:	4659      	mov	r1, fp
 800bdd0:	f7f4 fc12 	bl	80005f8 <__aeabi_dmul>
 800bdd4:	4b2d      	ldr	r3, [pc, #180]	; (800be8c <_dtoa_r+0x624>)
 800bdd6:	4682      	mov	sl, r0
 800bdd8:	468b      	mov	fp, r1
 800bdda:	4640      	mov	r0, r8
 800bddc:	4649      	mov	r1, r9
 800bdde:	2200      	movs	r2, #0
 800bde0:	f7f4 fc0a 	bl	80005f8 <__aeabi_dmul>
 800bde4:	4680      	mov	r8, r0
 800bde6:	4689      	mov	r9, r1
 800bde8:	e7c6      	b.n	800bd78 <_dtoa_r+0x510>
 800bdea:	4650      	mov	r0, sl
 800bdec:	4659      	mov	r1, fp
 800bdee:	f7f4 fc03 	bl	80005f8 <__aeabi_dmul>
 800bdf2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdf4:	9d01      	ldr	r5, [sp, #4]
 800bdf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdf8:	4682      	mov	sl, r0
 800bdfa:	468b      	mov	fp, r1
 800bdfc:	4649      	mov	r1, r9
 800bdfe:	4640      	mov	r0, r8
 800be00:	f7f4 feaa 	bl	8000b58 <__aeabi_d2iz>
 800be04:	4606      	mov	r6, r0
 800be06:	f7f4 fb8d 	bl	8000524 <__aeabi_i2d>
 800be0a:	3630      	adds	r6, #48	; 0x30
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4640      	mov	r0, r8
 800be12:	4649      	mov	r1, r9
 800be14:	f7f4 fa38 	bl	8000288 <__aeabi_dsub>
 800be18:	f805 6b01 	strb.w	r6, [r5], #1
 800be1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be1e:	429d      	cmp	r5, r3
 800be20:	4680      	mov	r8, r0
 800be22:	4689      	mov	r9, r1
 800be24:	f04f 0200 	mov.w	r2, #0
 800be28:	d124      	bne.n	800be74 <_dtoa_r+0x60c>
 800be2a:	4b1b      	ldr	r3, [pc, #108]	; (800be98 <_dtoa_r+0x630>)
 800be2c:	4650      	mov	r0, sl
 800be2e:	4659      	mov	r1, fp
 800be30:	f7f4 fa2c 	bl	800028c <__adddf3>
 800be34:	4602      	mov	r2, r0
 800be36:	460b      	mov	r3, r1
 800be38:	4640      	mov	r0, r8
 800be3a:	4649      	mov	r1, r9
 800be3c:	f7f4 fe6c 	bl	8000b18 <__aeabi_dcmpgt>
 800be40:	2800      	cmp	r0, #0
 800be42:	d173      	bne.n	800bf2c <_dtoa_r+0x6c4>
 800be44:	4652      	mov	r2, sl
 800be46:	465b      	mov	r3, fp
 800be48:	4913      	ldr	r1, [pc, #76]	; (800be98 <_dtoa_r+0x630>)
 800be4a:	2000      	movs	r0, #0
 800be4c:	f7f4 fa1c 	bl	8000288 <__aeabi_dsub>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	4640      	mov	r0, r8
 800be56:	4649      	mov	r1, r9
 800be58:	f7f4 fe40 	bl	8000adc <__aeabi_dcmplt>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	f43f af35 	beq.w	800bccc <_dtoa_r+0x464>
 800be62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be64:	1e6b      	subs	r3, r5, #1
 800be66:	930f      	str	r3, [sp, #60]	; 0x3c
 800be68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be6c:	2b30      	cmp	r3, #48	; 0x30
 800be6e:	d0f8      	beq.n	800be62 <_dtoa_r+0x5fa>
 800be70:	9700      	str	r7, [sp, #0]
 800be72:	e049      	b.n	800bf08 <_dtoa_r+0x6a0>
 800be74:	4b05      	ldr	r3, [pc, #20]	; (800be8c <_dtoa_r+0x624>)
 800be76:	f7f4 fbbf 	bl	80005f8 <__aeabi_dmul>
 800be7a:	4680      	mov	r8, r0
 800be7c:	4689      	mov	r9, r1
 800be7e:	e7bd      	b.n	800bdfc <_dtoa_r+0x594>
 800be80:	0800dfe8 	.word	0x0800dfe8
 800be84:	0800dfc0 	.word	0x0800dfc0
 800be88:	3ff00000 	.word	0x3ff00000
 800be8c:	40240000 	.word	0x40240000
 800be90:	401c0000 	.word	0x401c0000
 800be94:	40140000 	.word	0x40140000
 800be98:	3fe00000 	.word	0x3fe00000
 800be9c:	9d01      	ldr	r5, [sp, #4]
 800be9e:	4656      	mov	r6, sl
 800bea0:	465f      	mov	r7, fp
 800bea2:	4642      	mov	r2, r8
 800bea4:	464b      	mov	r3, r9
 800bea6:	4630      	mov	r0, r6
 800bea8:	4639      	mov	r1, r7
 800beaa:	f7f4 fccf 	bl	800084c <__aeabi_ddiv>
 800beae:	f7f4 fe53 	bl	8000b58 <__aeabi_d2iz>
 800beb2:	4682      	mov	sl, r0
 800beb4:	f7f4 fb36 	bl	8000524 <__aeabi_i2d>
 800beb8:	4642      	mov	r2, r8
 800beba:	464b      	mov	r3, r9
 800bebc:	f7f4 fb9c 	bl	80005f8 <__aeabi_dmul>
 800bec0:	4602      	mov	r2, r0
 800bec2:	460b      	mov	r3, r1
 800bec4:	4630      	mov	r0, r6
 800bec6:	4639      	mov	r1, r7
 800bec8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800becc:	f7f4 f9dc 	bl	8000288 <__aeabi_dsub>
 800bed0:	f805 6b01 	strb.w	r6, [r5], #1
 800bed4:	9e01      	ldr	r6, [sp, #4]
 800bed6:	9f03      	ldr	r7, [sp, #12]
 800bed8:	1bae      	subs	r6, r5, r6
 800beda:	42b7      	cmp	r7, r6
 800bedc:	4602      	mov	r2, r0
 800bede:	460b      	mov	r3, r1
 800bee0:	d135      	bne.n	800bf4e <_dtoa_r+0x6e6>
 800bee2:	f7f4 f9d3 	bl	800028c <__adddf3>
 800bee6:	4642      	mov	r2, r8
 800bee8:	464b      	mov	r3, r9
 800beea:	4606      	mov	r6, r0
 800beec:	460f      	mov	r7, r1
 800beee:	f7f4 fe13 	bl	8000b18 <__aeabi_dcmpgt>
 800bef2:	b9d0      	cbnz	r0, 800bf2a <_dtoa_r+0x6c2>
 800bef4:	4642      	mov	r2, r8
 800bef6:	464b      	mov	r3, r9
 800bef8:	4630      	mov	r0, r6
 800befa:	4639      	mov	r1, r7
 800befc:	f7f4 fde4 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf00:	b110      	cbz	r0, 800bf08 <_dtoa_r+0x6a0>
 800bf02:	f01a 0f01 	tst.w	sl, #1
 800bf06:	d110      	bne.n	800bf2a <_dtoa_r+0x6c2>
 800bf08:	4620      	mov	r0, r4
 800bf0a:	ee18 1a10 	vmov	r1, s16
 800bf0e:	f000 faf3 	bl	800c4f8 <_Bfree>
 800bf12:	2300      	movs	r3, #0
 800bf14:	9800      	ldr	r0, [sp, #0]
 800bf16:	702b      	strb	r3, [r5, #0]
 800bf18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf1a:	3001      	adds	r0, #1
 800bf1c:	6018      	str	r0, [r3, #0]
 800bf1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f43f acf1 	beq.w	800b908 <_dtoa_r+0xa0>
 800bf26:	601d      	str	r5, [r3, #0]
 800bf28:	e4ee      	b.n	800b908 <_dtoa_r+0xa0>
 800bf2a:	9f00      	ldr	r7, [sp, #0]
 800bf2c:	462b      	mov	r3, r5
 800bf2e:	461d      	mov	r5, r3
 800bf30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf34:	2a39      	cmp	r2, #57	; 0x39
 800bf36:	d106      	bne.n	800bf46 <_dtoa_r+0x6de>
 800bf38:	9a01      	ldr	r2, [sp, #4]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d1f7      	bne.n	800bf2e <_dtoa_r+0x6c6>
 800bf3e:	9901      	ldr	r1, [sp, #4]
 800bf40:	2230      	movs	r2, #48	; 0x30
 800bf42:	3701      	adds	r7, #1
 800bf44:	700a      	strb	r2, [r1, #0]
 800bf46:	781a      	ldrb	r2, [r3, #0]
 800bf48:	3201      	adds	r2, #1
 800bf4a:	701a      	strb	r2, [r3, #0]
 800bf4c:	e790      	b.n	800be70 <_dtoa_r+0x608>
 800bf4e:	4ba6      	ldr	r3, [pc, #664]	; (800c1e8 <_dtoa_r+0x980>)
 800bf50:	2200      	movs	r2, #0
 800bf52:	f7f4 fb51 	bl	80005f8 <__aeabi_dmul>
 800bf56:	2200      	movs	r2, #0
 800bf58:	2300      	movs	r3, #0
 800bf5a:	4606      	mov	r6, r0
 800bf5c:	460f      	mov	r7, r1
 800bf5e:	f7f4 fdb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf62:	2800      	cmp	r0, #0
 800bf64:	d09d      	beq.n	800bea2 <_dtoa_r+0x63a>
 800bf66:	e7cf      	b.n	800bf08 <_dtoa_r+0x6a0>
 800bf68:	9a08      	ldr	r2, [sp, #32]
 800bf6a:	2a00      	cmp	r2, #0
 800bf6c:	f000 80d7 	beq.w	800c11e <_dtoa_r+0x8b6>
 800bf70:	9a06      	ldr	r2, [sp, #24]
 800bf72:	2a01      	cmp	r2, #1
 800bf74:	f300 80ba 	bgt.w	800c0ec <_dtoa_r+0x884>
 800bf78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf7a:	2a00      	cmp	r2, #0
 800bf7c:	f000 80b2 	beq.w	800c0e4 <_dtoa_r+0x87c>
 800bf80:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf84:	9e07      	ldr	r6, [sp, #28]
 800bf86:	9d04      	ldr	r5, [sp, #16]
 800bf88:	9a04      	ldr	r2, [sp, #16]
 800bf8a:	441a      	add	r2, r3
 800bf8c:	9204      	str	r2, [sp, #16]
 800bf8e:	9a05      	ldr	r2, [sp, #20]
 800bf90:	2101      	movs	r1, #1
 800bf92:	441a      	add	r2, r3
 800bf94:	4620      	mov	r0, r4
 800bf96:	9205      	str	r2, [sp, #20]
 800bf98:	f000 fb66 	bl	800c668 <__i2b>
 800bf9c:	4607      	mov	r7, r0
 800bf9e:	2d00      	cmp	r5, #0
 800bfa0:	dd0c      	ble.n	800bfbc <_dtoa_r+0x754>
 800bfa2:	9b05      	ldr	r3, [sp, #20]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	dd09      	ble.n	800bfbc <_dtoa_r+0x754>
 800bfa8:	42ab      	cmp	r3, r5
 800bfaa:	9a04      	ldr	r2, [sp, #16]
 800bfac:	bfa8      	it	ge
 800bfae:	462b      	movge	r3, r5
 800bfb0:	1ad2      	subs	r2, r2, r3
 800bfb2:	9204      	str	r2, [sp, #16]
 800bfb4:	9a05      	ldr	r2, [sp, #20]
 800bfb6:	1aed      	subs	r5, r5, r3
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	9305      	str	r3, [sp, #20]
 800bfbc:	9b07      	ldr	r3, [sp, #28]
 800bfbe:	b31b      	cbz	r3, 800c008 <_dtoa_r+0x7a0>
 800bfc0:	9b08      	ldr	r3, [sp, #32]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	f000 80af 	beq.w	800c126 <_dtoa_r+0x8be>
 800bfc8:	2e00      	cmp	r6, #0
 800bfca:	dd13      	ble.n	800bff4 <_dtoa_r+0x78c>
 800bfcc:	4639      	mov	r1, r7
 800bfce:	4632      	mov	r2, r6
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f000 fc09 	bl	800c7e8 <__pow5mult>
 800bfd6:	ee18 2a10 	vmov	r2, s16
 800bfda:	4601      	mov	r1, r0
 800bfdc:	4607      	mov	r7, r0
 800bfde:	4620      	mov	r0, r4
 800bfe0:	f000 fb58 	bl	800c694 <__multiply>
 800bfe4:	ee18 1a10 	vmov	r1, s16
 800bfe8:	4680      	mov	r8, r0
 800bfea:	4620      	mov	r0, r4
 800bfec:	f000 fa84 	bl	800c4f8 <_Bfree>
 800bff0:	ee08 8a10 	vmov	s16, r8
 800bff4:	9b07      	ldr	r3, [sp, #28]
 800bff6:	1b9a      	subs	r2, r3, r6
 800bff8:	d006      	beq.n	800c008 <_dtoa_r+0x7a0>
 800bffa:	ee18 1a10 	vmov	r1, s16
 800bffe:	4620      	mov	r0, r4
 800c000:	f000 fbf2 	bl	800c7e8 <__pow5mult>
 800c004:	ee08 0a10 	vmov	s16, r0
 800c008:	2101      	movs	r1, #1
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 fb2c 	bl	800c668 <__i2b>
 800c010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c012:	2b00      	cmp	r3, #0
 800c014:	4606      	mov	r6, r0
 800c016:	f340 8088 	ble.w	800c12a <_dtoa_r+0x8c2>
 800c01a:	461a      	mov	r2, r3
 800c01c:	4601      	mov	r1, r0
 800c01e:	4620      	mov	r0, r4
 800c020:	f000 fbe2 	bl	800c7e8 <__pow5mult>
 800c024:	9b06      	ldr	r3, [sp, #24]
 800c026:	2b01      	cmp	r3, #1
 800c028:	4606      	mov	r6, r0
 800c02a:	f340 8081 	ble.w	800c130 <_dtoa_r+0x8c8>
 800c02e:	f04f 0800 	mov.w	r8, #0
 800c032:	6933      	ldr	r3, [r6, #16]
 800c034:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c038:	6918      	ldr	r0, [r3, #16]
 800c03a:	f000 fac5 	bl	800c5c8 <__hi0bits>
 800c03e:	f1c0 0020 	rsb	r0, r0, #32
 800c042:	9b05      	ldr	r3, [sp, #20]
 800c044:	4418      	add	r0, r3
 800c046:	f010 001f 	ands.w	r0, r0, #31
 800c04a:	f000 8092 	beq.w	800c172 <_dtoa_r+0x90a>
 800c04e:	f1c0 0320 	rsb	r3, r0, #32
 800c052:	2b04      	cmp	r3, #4
 800c054:	f340 808a 	ble.w	800c16c <_dtoa_r+0x904>
 800c058:	f1c0 001c 	rsb	r0, r0, #28
 800c05c:	9b04      	ldr	r3, [sp, #16]
 800c05e:	4403      	add	r3, r0
 800c060:	9304      	str	r3, [sp, #16]
 800c062:	9b05      	ldr	r3, [sp, #20]
 800c064:	4403      	add	r3, r0
 800c066:	4405      	add	r5, r0
 800c068:	9305      	str	r3, [sp, #20]
 800c06a:	9b04      	ldr	r3, [sp, #16]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	dd07      	ble.n	800c080 <_dtoa_r+0x818>
 800c070:	ee18 1a10 	vmov	r1, s16
 800c074:	461a      	mov	r2, r3
 800c076:	4620      	mov	r0, r4
 800c078:	f000 fc10 	bl	800c89c <__lshift>
 800c07c:	ee08 0a10 	vmov	s16, r0
 800c080:	9b05      	ldr	r3, [sp, #20]
 800c082:	2b00      	cmp	r3, #0
 800c084:	dd05      	ble.n	800c092 <_dtoa_r+0x82a>
 800c086:	4631      	mov	r1, r6
 800c088:	461a      	mov	r2, r3
 800c08a:	4620      	mov	r0, r4
 800c08c:	f000 fc06 	bl	800c89c <__lshift>
 800c090:	4606      	mov	r6, r0
 800c092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c094:	2b00      	cmp	r3, #0
 800c096:	d06e      	beq.n	800c176 <_dtoa_r+0x90e>
 800c098:	ee18 0a10 	vmov	r0, s16
 800c09c:	4631      	mov	r1, r6
 800c09e:	f000 fc6d 	bl	800c97c <__mcmp>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	da67      	bge.n	800c176 <_dtoa_r+0x90e>
 800c0a6:	9b00      	ldr	r3, [sp, #0]
 800c0a8:	3b01      	subs	r3, #1
 800c0aa:	ee18 1a10 	vmov	r1, s16
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	220a      	movs	r2, #10
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f000 fa41 	bl	800c53c <__multadd>
 800c0ba:	9b08      	ldr	r3, [sp, #32]
 800c0bc:	ee08 0a10 	vmov	s16, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	f000 81b1 	beq.w	800c428 <_dtoa_r+0xbc0>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	4639      	mov	r1, r7
 800c0ca:	220a      	movs	r2, #10
 800c0cc:	4620      	mov	r0, r4
 800c0ce:	f000 fa35 	bl	800c53c <__multadd>
 800c0d2:	9b02      	ldr	r3, [sp, #8]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	4607      	mov	r7, r0
 800c0d8:	f300 808e 	bgt.w	800c1f8 <_dtoa_r+0x990>
 800c0dc:	9b06      	ldr	r3, [sp, #24]
 800c0de:	2b02      	cmp	r3, #2
 800c0e0:	dc51      	bgt.n	800c186 <_dtoa_r+0x91e>
 800c0e2:	e089      	b.n	800c1f8 <_dtoa_r+0x990>
 800c0e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c0e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c0ea:	e74b      	b.n	800bf84 <_dtoa_r+0x71c>
 800c0ec:	9b03      	ldr	r3, [sp, #12]
 800c0ee:	1e5e      	subs	r6, r3, #1
 800c0f0:	9b07      	ldr	r3, [sp, #28]
 800c0f2:	42b3      	cmp	r3, r6
 800c0f4:	bfbf      	itttt	lt
 800c0f6:	9b07      	ldrlt	r3, [sp, #28]
 800c0f8:	9607      	strlt	r6, [sp, #28]
 800c0fa:	1af2      	sublt	r2, r6, r3
 800c0fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c0fe:	bfb6      	itet	lt
 800c100:	189b      	addlt	r3, r3, r2
 800c102:	1b9e      	subge	r6, r3, r6
 800c104:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c106:	9b03      	ldr	r3, [sp, #12]
 800c108:	bfb8      	it	lt
 800c10a:	2600      	movlt	r6, #0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	bfb7      	itett	lt
 800c110:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c114:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c118:	1a9d      	sublt	r5, r3, r2
 800c11a:	2300      	movlt	r3, #0
 800c11c:	e734      	b.n	800bf88 <_dtoa_r+0x720>
 800c11e:	9e07      	ldr	r6, [sp, #28]
 800c120:	9d04      	ldr	r5, [sp, #16]
 800c122:	9f08      	ldr	r7, [sp, #32]
 800c124:	e73b      	b.n	800bf9e <_dtoa_r+0x736>
 800c126:	9a07      	ldr	r2, [sp, #28]
 800c128:	e767      	b.n	800bffa <_dtoa_r+0x792>
 800c12a:	9b06      	ldr	r3, [sp, #24]
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	dc18      	bgt.n	800c162 <_dtoa_r+0x8fa>
 800c130:	f1ba 0f00 	cmp.w	sl, #0
 800c134:	d115      	bne.n	800c162 <_dtoa_r+0x8fa>
 800c136:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c13a:	b993      	cbnz	r3, 800c162 <_dtoa_r+0x8fa>
 800c13c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c140:	0d1b      	lsrs	r3, r3, #20
 800c142:	051b      	lsls	r3, r3, #20
 800c144:	b183      	cbz	r3, 800c168 <_dtoa_r+0x900>
 800c146:	9b04      	ldr	r3, [sp, #16]
 800c148:	3301      	adds	r3, #1
 800c14a:	9304      	str	r3, [sp, #16]
 800c14c:	9b05      	ldr	r3, [sp, #20]
 800c14e:	3301      	adds	r3, #1
 800c150:	9305      	str	r3, [sp, #20]
 800c152:	f04f 0801 	mov.w	r8, #1
 800c156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f47f af6a 	bne.w	800c032 <_dtoa_r+0x7ca>
 800c15e:	2001      	movs	r0, #1
 800c160:	e76f      	b.n	800c042 <_dtoa_r+0x7da>
 800c162:	f04f 0800 	mov.w	r8, #0
 800c166:	e7f6      	b.n	800c156 <_dtoa_r+0x8ee>
 800c168:	4698      	mov	r8, r3
 800c16a:	e7f4      	b.n	800c156 <_dtoa_r+0x8ee>
 800c16c:	f43f af7d 	beq.w	800c06a <_dtoa_r+0x802>
 800c170:	4618      	mov	r0, r3
 800c172:	301c      	adds	r0, #28
 800c174:	e772      	b.n	800c05c <_dtoa_r+0x7f4>
 800c176:	9b03      	ldr	r3, [sp, #12]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	dc37      	bgt.n	800c1ec <_dtoa_r+0x984>
 800c17c:	9b06      	ldr	r3, [sp, #24]
 800c17e:	2b02      	cmp	r3, #2
 800c180:	dd34      	ble.n	800c1ec <_dtoa_r+0x984>
 800c182:	9b03      	ldr	r3, [sp, #12]
 800c184:	9302      	str	r3, [sp, #8]
 800c186:	9b02      	ldr	r3, [sp, #8]
 800c188:	b96b      	cbnz	r3, 800c1a6 <_dtoa_r+0x93e>
 800c18a:	4631      	mov	r1, r6
 800c18c:	2205      	movs	r2, #5
 800c18e:	4620      	mov	r0, r4
 800c190:	f000 f9d4 	bl	800c53c <__multadd>
 800c194:	4601      	mov	r1, r0
 800c196:	4606      	mov	r6, r0
 800c198:	ee18 0a10 	vmov	r0, s16
 800c19c:	f000 fbee 	bl	800c97c <__mcmp>
 800c1a0:	2800      	cmp	r0, #0
 800c1a2:	f73f adbb 	bgt.w	800bd1c <_dtoa_r+0x4b4>
 800c1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1a8:	9d01      	ldr	r5, [sp, #4]
 800c1aa:	43db      	mvns	r3, r3
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	f04f 0800 	mov.w	r8, #0
 800c1b2:	4631      	mov	r1, r6
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	f000 f99f 	bl	800c4f8 <_Bfree>
 800c1ba:	2f00      	cmp	r7, #0
 800c1bc:	f43f aea4 	beq.w	800bf08 <_dtoa_r+0x6a0>
 800c1c0:	f1b8 0f00 	cmp.w	r8, #0
 800c1c4:	d005      	beq.n	800c1d2 <_dtoa_r+0x96a>
 800c1c6:	45b8      	cmp	r8, r7
 800c1c8:	d003      	beq.n	800c1d2 <_dtoa_r+0x96a>
 800c1ca:	4641      	mov	r1, r8
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f000 f993 	bl	800c4f8 <_Bfree>
 800c1d2:	4639      	mov	r1, r7
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f000 f98f 	bl	800c4f8 <_Bfree>
 800c1da:	e695      	b.n	800bf08 <_dtoa_r+0x6a0>
 800c1dc:	2600      	movs	r6, #0
 800c1de:	4637      	mov	r7, r6
 800c1e0:	e7e1      	b.n	800c1a6 <_dtoa_r+0x93e>
 800c1e2:	9700      	str	r7, [sp, #0]
 800c1e4:	4637      	mov	r7, r6
 800c1e6:	e599      	b.n	800bd1c <_dtoa_r+0x4b4>
 800c1e8:	40240000 	.word	0x40240000
 800c1ec:	9b08      	ldr	r3, [sp, #32]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	f000 80ca 	beq.w	800c388 <_dtoa_r+0xb20>
 800c1f4:	9b03      	ldr	r3, [sp, #12]
 800c1f6:	9302      	str	r3, [sp, #8]
 800c1f8:	2d00      	cmp	r5, #0
 800c1fa:	dd05      	ble.n	800c208 <_dtoa_r+0x9a0>
 800c1fc:	4639      	mov	r1, r7
 800c1fe:	462a      	mov	r2, r5
 800c200:	4620      	mov	r0, r4
 800c202:	f000 fb4b 	bl	800c89c <__lshift>
 800c206:	4607      	mov	r7, r0
 800c208:	f1b8 0f00 	cmp.w	r8, #0
 800c20c:	d05b      	beq.n	800c2c6 <_dtoa_r+0xa5e>
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	4620      	mov	r0, r4
 800c212:	f000 f931 	bl	800c478 <_Balloc>
 800c216:	4605      	mov	r5, r0
 800c218:	b928      	cbnz	r0, 800c226 <_dtoa_r+0x9be>
 800c21a:	4b87      	ldr	r3, [pc, #540]	; (800c438 <_dtoa_r+0xbd0>)
 800c21c:	4602      	mov	r2, r0
 800c21e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c222:	f7ff bb3b 	b.w	800b89c <_dtoa_r+0x34>
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	3202      	adds	r2, #2
 800c22a:	0092      	lsls	r2, r2, #2
 800c22c:	f107 010c 	add.w	r1, r7, #12
 800c230:	300c      	adds	r0, #12
 800c232:	f000 f913 	bl	800c45c <memcpy>
 800c236:	2201      	movs	r2, #1
 800c238:	4629      	mov	r1, r5
 800c23a:	4620      	mov	r0, r4
 800c23c:	f000 fb2e 	bl	800c89c <__lshift>
 800c240:	9b01      	ldr	r3, [sp, #4]
 800c242:	f103 0901 	add.w	r9, r3, #1
 800c246:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c24a:	4413      	add	r3, r2
 800c24c:	9305      	str	r3, [sp, #20]
 800c24e:	f00a 0301 	and.w	r3, sl, #1
 800c252:	46b8      	mov	r8, r7
 800c254:	9304      	str	r3, [sp, #16]
 800c256:	4607      	mov	r7, r0
 800c258:	4631      	mov	r1, r6
 800c25a:	ee18 0a10 	vmov	r0, s16
 800c25e:	f7ff fa75 	bl	800b74c <quorem>
 800c262:	4641      	mov	r1, r8
 800c264:	9002      	str	r0, [sp, #8]
 800c266:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c26a:	ee18 0a10 	vmov	r0, s16
 800c26e:	f000 fb85 	bl	800c97c <__mcmp>
 800c272:	463a      	mov	r2, r7
 800c274:	9003      	str	r0, [sp, #12]
 800c276:	4631      	mov	r1, r6
 800c278:	4620      	mov	r0, r4
 800c27a:	f000 fb9b 	bl	800c9b4 <__mdiff>
 800c27e:	68c2      	ldr	r2, [r0, #12]
 800c280:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c284:	4605      	mov	r5, r0
 800c286:	bb02      	cbnz	r2, 800c2ca <_dtoa_r+0xa62>
 800c288:	4601      	mov	r1, r0
 800c28a:	ee18 0a10 	vmov	r0, s16
 800c28e:	f000 fb75 	bl	800c97c <__mcmp>
 800c292:	4602      	mov	r2, r0
 800c294:	4629      	mov	r1, r5
 800c296:	4620      	mov	r0, r4
 800c298:	9207      	str	r2, [sp, #28]
 800c29a:	f000 f92d 	bl	800c4f8 <_Bfree>
 800c29e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c2a2:	ea43 0102 	orr.w	r1, r3, r2
 800c2a6:	9b04      	ldr	r3, [sp, #16]
 800c2a8:	430b      	orrs	r3, r1
 800c2aa:	464d      	mov	r5, r9
 800c2ac:	d10f      	bne.n	800c2ce <_dtoa_r+0xa66>
 800c2ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2b2:	d02a      	beq.n	800c30a <_dtoa_r+0xaa2>
 800c2b4:	9b03      	ldr	r3, [sp, #12]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	dd02      	ble.n	800c2c0 <_dtoa_r+0xa58>
 800c2ba:	9b02      	ldr	r3, [sp, #8]
 800c2bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c2c0:	f88b a000 	strb.w	sl, [fp]
 800c2c4:	e775      	b.n	800c1b2 <_dtoa_r+0x94a>
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	e7ba      	b.n	800c240 <_dtoa_r+0x9d8>
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	e7e2      	b.n	800c294 <_dtoa_r+0xa2c>
 800c2ce:	9b03      	ldr	r3, [sp, #12]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	db04      	blt.n	800c2de <_dtoa_r+0xa76>
 800c2d4:	9906      	ldr	r1, [sp, #24]
 800c2d6:	430b      	orrs	r3, r1
 800c2d8:	9904      	ldr	r1, [sp, #16]
 800c2da:	430b      	orrs	r3, r1
 800c2dc:	d122      	bne.n	800c324 <_dtoa_r+0xabc>
 800c2de:	2a00      	cmp	r2, #0
 800c2e0:	ddee      	ble.n	800c2c0 <_dtoa_r+0xa58>
 800c2e2:	ee18 1a10 	vmov	r1, s16
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f000 fad7 	bl	800c89c <__lshift>
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	ee08 0a10 	vmov	s16, r0
 800c2f4:	f000 fb42 	bl	800c97c <__mcmp>
 800c2f8:	2800      	cmp	r0, #0
 800c2fa:	dc03      	bgt.n	800c304 <_dtoa_r+0xa9c>
 800c2fc:	d1e0      	bne.n	800c2c0 <_dtoa_r+0xa58>
 800c2fe:	f01a 0f01 	tst.w	sl, #1
 800c302:	d0dd      	beq.n	800c2c0 <_dtoa_r+0xa58>
 800c304:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c308:	d1d7      	bne.n	800c2ba <_dtoa_r+0xa52>
 800c30a:	2339      	movs	r3, #57	; 0x39
 800c30c:	f88b 3000 	strb.w	r3, [fp]
 800c310:	462b      	mov	r3, r5
 800c312:	461d      	mov	r5, r3
 800c314:	3b01      	subs	r3, #1
 800c316:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c31a:	2a39      	cmp	r2, #57	; 0x39
 800c31c:	d071      	beq.n	800c402 <_dtoa_r+0xb9a>
 800c31e:	3201      	adds	r2, #1
 800c320:	701a      	strb	r2, [r3, #0]
 800c322:	e746      	b.n	800c1b2 <_dtoa_r+0x94a>
 800c324:	2a00      	cmp	r2, #0
 800c326:	dd07      	ble.n	800c338 <_dtoa_r+0xad0>
 800c328:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c32c:	d0ed      	beq.n	800c30a <_dtoa_r+0xaa2>
 800c32e:	f10a 0301 	add.w	r3, sl, #1
 800c332:	f88b 3000 	strb.w	r3, [fp]
 800c336:	e73c      	b.n	800c1b2 <_dtoa_r+0x94a>
 800c338:	9b05      	ldr	r3, [sp, #20]
 800c33a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c33e:	4599      	cmp	r9, r3
 800c340:	d047      	beq.n	800c3d2 <_dtoa_r+0xb6a>
 800c342:	ee18 1a10 	vmov	r1, s16
 800c346:	2300      	movs	r3, #0
 800c348:	220a      	movs	r2, #10
 800c34a:	4620      	mov	r0, r4
 800c34c:	f000 f8f6 	bl	800c53c <__multadd>
 800c350:	45b8      	cmp	r8, r7
 800c352:	ee08 0a10 	vmov	s16, r0
 800c356:	f04f 0300 	mov.w	r3, #0
 800c35a:	f04f 020a 	mov.w	r2, #10
 800c35e:	4641      	mov	r1, r8
 800c360:	4620      	mov	r0, r4
 800c362:	d106      	bne.n	800c372 <_dtoa_r+0xb0a>
 800c364:	f000 f8ea 	bl	800c53c <__multadd>
 800c368:	4680      	mov	r8, r0
 800c36a:	4607      	mov	r7, r0
 800c36c:	f109 0901 	add.w	r9, r9, #1
 800c370:	e772      	b.n	800c258 <_dtoa_r+0x9f0>
 800c372:	f000 f8e3 	bl	800c53c <__multadd>
 800c376:	4639      	mov	r1, r7
 800c378:	4680      	mov	r8, r0
 800c37a:	2300      	movs	r3, #0
 800c37c:	220a      	movs	r2, #10
 800c37e:	4620      	mov	r0, r4
 800c380:	f000 f8dc 	bl	800c53c <__multadd>
 800c384:	4607      	mov	r7, r0
 800c386:	e7f1      	b.n	800c36c <_dtoa_r+0xb04>
 800c388:	9b03      	ldr	r3, [sp, #12]
 800c38a:	9302      	str	r3, [sp, #8]
 800c38c:	9d01      	ldr	r5, [sp, #4]
 800c38e:	ee18 0a10 	vmov	r0, s16
 800c392:	4631      	mov	r1, r6
 800c394:	f7ff f9da 	bl	800b74c <quorem>
 800c398:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c39c:	9b01      	ldr	r3, [sp, #4]
 800c39e:	f805 ab01 	strb.w	sl, [r5], #1
 800c3a2:	1aea      	subs	r2, r5, r3
 800c3a4:	9b02      	ldr	r3, [sp, #8]
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	dd09      	ble.n	800c3be <_dtoa_r+0xb56>
 800c3aa:	ee18 1a10 	vmov	r1, s16
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	220a      	movs	r2, #10
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f000 f8c2 	bl	800c53c <__multadd>
 800c3b8:	ee08 0a10 	vmov	s16, r0
 800c3bc:	e7e7      	b.n	800c38e <_dtoa_r+0xb26>
 800c3be:	9b02      	ldr	r3, [sp, #8]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	bfc8      	it	gt
 800c3c4:	461d      	movgt	r5, r3
 800c3c6:	9b01      	ldr	r3, [sp, #4]
 800c3c8:	bfd8      	it	le
 800c3ca:	2501      	movle	r5, #1
 800c3cc:	441d      	add	r5, r3
 800c3ce:	f04f 0800 	mov.w	r8, #0
 800c3d2:	ee18 1a10 	vmov	r1, s16
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	4620      	mov	r0, r4
 800c3da:	f000 fa5f 	bl	800c89c <__lshift>
 800c3de:	4631      	mov	r1, r6
 800c3e0:	ee08 0a10 	vmov	s16, r0
 800c3e4:	f000 faca 	bl	800c97c <__mcmp>
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	dc91      	bgt.n	800c310 <_dtoa_r+0xaa8>
 800c3ec:	d102      	bne.n	800c3f4 <_dtoa_r+0xb8c>
 800c3ee:	f01a 0f01 	tst.w	sl, #1
 800c3f2:	d18d      	bne.n	800c310 <_dtoa_r+0xaa8>
 800c3f4:	462b      	mov	r3, r5
 800c3f6:	461d      	mov	r5, r3
 800c3f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3fc:	2a30      	cmp	r2, #48	; 0x30
 800c3fe:	d0fa      	beq.n	800c3f6 <_dtoa_r+0xb8e>
 800c400:	e6d7      	b.n	800c1b2 <_dtoa_r+0x94a>
 800c402:	9a01      	ldr	r2, [sp, #4]
 800c404:	429a      	cmp	r2, r3
 800c406:	d184      	bne.n	800c312 <_dtoa_r+0xaaa>
 800c408:	9b00      	ldr	r3, [sp, #0]
 800c40a:	3301      	adds	r3, #1
 800c40c:	9300      	str	r3, [sp, #0]
 800c40e:	2331      	movs	r3, #49	; 0x31
 800c410:	7013      	strb	r3, [r2, #0]
 800c412:	e6ce      	b.n	800c1b2 <_dtoa_r+0x94a>
 800c414:	4b09      	ldr	r3, [pc, #36]	; (800c43c <_dtoa_r+0xbd4>)
 800c416:	f7ff ba95 	b.w	800b944 <_dtoa_r+0xdc>
 800c41a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f47f aa6e 	bne.w	800b8fe <_dtoa_r+0x96>
 800c422:	4b07      	ldr	r3, [pc, #28]	; (800c440 <_dtoa_r+0xbd8>)
 800c424:	f7ff ba8e 	b.w	800b944 <_dtoa_r+0xdc>
 800c428:	9b02      	ldr	r3, [sp, #8]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	dcae      	bgt.n	800c38c <_dtoa_r+0xb24>
 800c42e:	9b06      	ldr	r3, [sp, #24]
 800c430:	2b02      	cmp	r3, #2
 800c432:	f73f aea8 	bgt.w	800c186 <_dtoa_r+0x91e>
 800c436:	e7a9      	b.n	800c38c <_dtoa_r+0xb24>
 800c438:	0800df53 	.word	0x0800df53
 800c43c:	0800deb0 	.word	0x0800deb0
 800c440:	0800ded4 	.word	0x0800ded4

0800c444 <_localeconv_r>:
 800c444:	4800      	ldr	r0, [pc, #0]	; (800c448 <_localeconv_r+0x4>)
 800c446:	4770      	bx	lr
 800c448:	20000160 	.word	0x20000160

0800c44c <malloc>:
 800c44c:	4b02      	ldr	r3, [pc, #8]	; (800c458 <malloc+0xc>)
 800c44e:	4601      	mov	r1, r0
 800c450:	6818      	ldr	r0, [r3, #0]
 800c452:	f000 bc17 	b.w	800cc84 <_malloc_r>
 800c456:	bf00      	nop
 800c458:	2000000c 	.word	0x2000000c

0800c45c <memcpy>:
 800c45c:	440a      	add	r2, r1
 800c45e:	4291      	cmp	r1, r2
 800c460:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c464:	d100      	bne.n	800c468 <memcpy+0xc>
 800c466:	4770      	bx	lr
 800c468:	b510      	push	{r4, lr}
 800c46a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c46e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c472:	4291      	cmp	r1, r2
 800c474:	d1f9      	bne.n	800c46a <memcpy+0xe>
 800c476:	bd10      	pop	{r4, pc}

0800c478 <_Balloc>:
 800c478:	b570      	push	{r4, r5, r6, lr}
 800c47a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c47c:	4604      	mov	r4, r0
 800c47e:	460d      	mov	r5, r1
 800c480:	b976      	cbnz	r6, 800c4a0 <_Balloc+0x28>
 800c482:	2010      	movs	r0, #16
 800c484:	f7ff ffe2 	bl	800c44c <malloc>
 800c488:	4602      	mov	r2, r0
 800c48a:	6260      	str	r0, [r4, #36]	; 0x24
 800c48c:	b920      	cbnz	r0, 800c498 <_Balloc+0x20>
 800c48e:	4b18      	ldr	r3, [pc, #96]	; (800c4f0 <_Balloc+0x78>)
 800c490:	4818      	ldr	r0, [pc, #96]	; (800c4f4 <_Balloc+0x7c>)
 800c492:	2166      	movs	r1, #102	; 0x66
 800c494:	f000 fdd6 	bl	800d044 <__assert_func>
 800c498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c49c:	6006      	str	r6, [r0, #0]
 800c49e:	60c6      	str	r6, [r0, #12]
 800c4a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c4a2:	68f3      	ldr	r3, [r6, #12]
 800c4a4:	b183      	cbz	r3, 800c4c8 <_Balloc+0x50>
 800c4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4ae:	b9b8      	cbnz	r0, 800c4e0 <_Balloc+0x68>
 800c4b0:	2101      	movs	r1, #1
 800c4b2:	fa01 f605 	lsl.w	r6, r1, r5
 800c4b6:	1d72      	adds	r2, r6, #5
 800c4b8:	0092      	lsls	r2, r2, #2
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f000 fb60 	bl	800cb80 <_calloc_r>
 800c4c0:	b160      	cbz	r0, 800c4dc <_Balloc+0x64>
 800c4c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4c6:	e00e      	b.n	800c4e6 <_Balloc+0x6e>
 800c4c8:	2221      	movs	r2, #33	; 0x21
 800c4ca:	2104      	movs	r1, #4
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f000 fb57 	bl	800cb80 <_calloc_r>
 800c4d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4d4:	60f0      	str	r0, [r6, #12]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1e4      	bne.n	800c4a6 <_Balloc+0x2e>
 800c4dc:	2000      	movs	r0, #0
 800c4de:	bd70      	pop	{r4, r5, r6, pc}
 800c4e0:	6802      	ldr	r2, [r0, #0]
 800c4e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4ec:	e7f7      	b.n	800c4de <_Balloc+0x66>
 800c4ee:	bf00      	nop
 800c4f0:	0800dee1 	.word	0x0800dee1
 800c4f4:	0800df64 	.word	0x0800df64

0800c4f8 <_Bfree>:
 800c4f8:	b570      	push	{r4, r5, r6, lr}
 800c4fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c4fc:	4605      	mov	r5, r0
 800c4fe:	460c      	mov	r4, r1
 800c500:	b976      	cbnz	r6, 800c520 <_Bfree+0x28>
 800c502:	2010      	movs	r0, #16
 800c504:	f7ff ffa2 	bl	800c44c <malloc>
 800c508:	4602      	mov	r2, r0
 800c50a:	6268      	str	r0, [r5, #36]	; 0x24
 800c50c:	b920      	cbnz	r0, 800c518 <_Bfree+0x20>
 800c50e:	4b09      	ldr	r3, [pc, #36]	; (800c534 <_Bfree+0x3c>)
 800c510:	4809      	ldr	r0, [pc, #36]	; (800c538 <_Bfree+0x40>)
 800c512:	218a      	movs	r1, #138	; 0x8a
 800c514:	f000 fd96 	bl	800d044 <__assert_func>
 800c518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c51c:	6006      	str	r6, [r0, #0]
 800c51e:	60c6      	str	r6, [r0, #12]
 800c520:	b13c      	cbz	r4, 800c532 <_Bfree+0x3a>
 800c522:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c524:	6862      	ldr	r2, [r4, #4]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c52c:	6021      	str	r1, [r4, #0]
 800c52e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c532:	bd70      	pop	{r4, r5, r6, pc}
 800c534:	0800dee1 	.word	0x0800dee1
 800c538:	0800df64 	.word	0x0800df64

0800c53c <__multadd>:
 800c53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c540:	690d      	ldr	r5, [r1, #16]
 800c542:	4607      	mov	r7, r0
 800c544:	460c      	mov	r4, r1
 800c546:	461e      	mov	r6, r3
 800c548:	f101 0c14 	add.w	ip, r1, #20
 800c54c:	2000      	movs	r0, #0
 800c54e:	f8dc 3000 	ldr.w	r3, [ip]
 800c552:	b299      	uxth	r1, r3
 800c554:	fb02 6101 	mla	r1, r2, r1, r6
 800c558:	0c1e      	lsrs	r6, r3, #16
 800c55a:	0c0b      	lsrs	r3, r1, #16
 800c55c:	fb02 3306 	mla	r3, r2, r6, r3
 800c560:	b289      	uxth	r1, r1
 800c562:	3001      	adds	r0, #1
 800c564:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c568:	4285      	cmp	r5, r0
 800c56a:	f84c 1b04 	str.w	r1, [ip], #4
 800c56e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c572:	dcec      	bgt.n	800c54e <__multadd+0x12>
 800c574:	b30e      	cbz	r6, 800c5ba <__multadd+0x7e>
 800c576:	68a3      	ldr	r3, [r4, #8]
 800c578:	42ab      	cmp	r3, r5
 800c57a:	dc19      	bgt.n	800c5b0 <__multadd+0x74>
 800c57c:	6861      	ldr	r1, [r4, #4]
 800c57e:	4638      	mov	r0, r7
 800c580:	3101      	adds	r1, #1
 800c582:	f7ff ff79 	bl	800c478 <_Balloc>
 800c586:	4680      	mov	r8, r0
 800c588:	b928      	cbnz	r0, 800c596 <__multadd+0x5a>
 800c58a:	4602      	mov	r2, r0
 800c58c:	4b0c      	ldr	r3, [pc, #48]	; (800c5c0 <__multadd+0x84>)
 800c58e:	480d      	ldr	r0, [pc, #52]	; (800c5c4 <__multadd+0x88>)
 800c590:	21b5      	movs	r1, #181	; 0xb5
 800c592:	f000 fd57 	bl	800d044 <__assert_func>
 800c596:	6922      	ldr	r2, [r4, #16]
 800c598:	3202      	adds	r2, #2
 800c59a:	f104 010c 	add.w	r1, r4, #12
 800c59e:	0092      	lsls	r2, r2, #2
 800c5a0:	300c      	adds	r0, #12
 800c5a2:	f7ff ff5b 	bl	800c45c <memcpy>
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	4638      	mov	r0, r7
 800c5aa:	f7ff ffa5 	bl	800c4f8 <_Bfree>
 800c5ae:	4644      	mov	r4, r8
 800c5b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5b4:	3501      	adds	r5, #1
 800c5b6:	615e      	str	r6, [r3, #20]
 800c5b8:	6125      	str	r5, [r4, #16]
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5c0:	0800df53 	.word	0x0800df53
 800c5c4:	0800df64 	.word	0x0800df64

0800c5c8 <__hi0bits>:
 800c5c8:	0c03      	lsrs	r3, r0, #16
 800c5ca:	041b      	lsls	r3, r3, #16
 800c5cc:	b9d3      	cbnz	r3, 800c604 <__hi0bits+0x3c>
 800c5ce:	0400      	lsls	r0, r0, #16
 800c5d0:	2310      	movs	r3, #16
 800c5d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c5d6:	bf04      	itt	eq
 800c5d8:	0200      	lsleq	r0, r0, #8
 800c5da:	3308      	addeq	r3, #8
 800c5dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c5e0:	bf04      	itt	eq
 800c5e2:	0100      	lsleq	r0, r0, #4
 800c5e4:	3304      	addeq	r3, #4
 800c5e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c5ea:	bf04      	itt	eq
 800c5ec:	0080      	lsleq	r0, r0, #2
 800c5ee:	3302      	addeq	r3, #2
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	db05      	blt.n	800c600 <__hi0bits+0x38>
 800c5f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c5f8:	f103 0301 	add.w	r3, r3, #1
 800c5fc:	bf08      	it	eq
 800c5fe:	2320      	moveq	r3, #32
 800c600:	4618      	mov	r0, r3
 800c602:	4770      	bx	lr
 800c604:	2300      	movs	r3, #0
 800c606:	e7e4      	b.n	800c5d2 <__hi0bits+0xa>

0800c608 <__lo0bits>:
 800c608:	6803      	ldr	r3, [r0, #0]
 800c60a:	f013 0207 	ands.w	r2, r3, #7
 800c60e:	4601      	mov	r1, r0
 800c610:	d00b      	beq.n	800c62a <__lo0bits+0x22>
 800c612:	07da      	lsls	r2, r3, #31
 800c614:	d423      	bmi.n	800c65e <__lo0bits+0x56>
 800c616:	0798      	lsls	r0, r3, #30
 800c618:	bf49      	itett	mi
 800c61a:	085b      	lsrmi	r3, r3, #1
 800c61c:	089b      	lsrpl	r3, r3, #2
 800c61e:	2001      	movmi	r0, #1
 800c620:	600b      	strmi	r3, [r1, #0]
 800c622:	bf5c      	itt	pl
 800c624:	600b      	strpl	r3, [r1, #0]
 800c626:	2002      	movpl	r0, #2
 800c628:	4770      	bx	lr
 800c62a:	b298      	uxth	r0, r3
 800c62c:	b9a8      	cbnz	r0, 800c65a <__lo0bits+0x52>
 800c62e:	0c1b      	lsrs	r3, r3, #16
 800c630:	2010      	movs	r0, #16
 800c632:	b2da      	uxtb	r2, r3
 800c634:	b90a      	cbnz	r2, 800c63a <__lo0bits+0x32>
 800c636:	3008      	adds	r0, #8
 800c638:	0a1b      	lsrs	r3, r3, #8
 800c63a:	071a      	lsls	r2, r3, #28
 800c63c:	bf04      	itt	eq
 800c63e:	091b      	lsreq	r3, r3, #4
 800c640:	3004      	addeq	r0, #4
 800c642:	079a      	lsls	r2, r3, #30
 800c644:	bf04      	itt	eq
 800c646:	089b      	lsreq	r3, r3, #2
 800c648:	3002      	addeq	r0, #2
 800c64a:	07da      	lsls	r2, r3, #31
 800c64c:	d403      	bmi.n	800c656 <__lo0bits+0x4e>
 800c64e:	085b      	lsrs	r3, r3, #1
 800c650:	f100 0001 	add.w	r0, r0, #1
 800c654:	d005      	beq.n	800c662 <__lo0bits+0x5a>
 800c656:	600b      	str	r3, [r1, #0]
 800c658:	4770      	bx	lr
 800c65a:	4610      	mov	r0, r2
 800c65c:	e7e9      	b.n	800c632 <__lo0bits+0x2a>
 800c65e:	2000      	movs	r0, #0
 800c660:	4770      	bx	lr
 800c662:	2020      	movs	r0, #32
 800c664:	4770      	bx	lr
	...

0800c668 <__i2b>:
 800c668:	b510      	push	{r4, lr}
 800c66a:	460c      	mov	r4, r1
 800c66c:	2101      	movs	r1, #1
 800c66e:	f7ff ff03 	bl	800c478 <_Balloc>
 800c672:	4602      	mov	r2, r0
 800c674:	b928      	cbnz	r0, 800c682 <__i2b+0x1a>
 800c676:	4b05      	ldr	r3, [pc, #20]	; (800c68c <__i2b+0x24>)
 800c678:	4805      	ldr	r0, [pc, #20]	; (800c690 <__i2b+0x28>)
 800c67a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c67e:	f000 fce1 	bl	800d044 <__assert_func>
 800c682:	2301      	movs	r3, #1
 800c684:	6144      	str	r4, [r0, #20]
 800c686:	6103      	str	r3, [r0, #16]
 800c688:	bd10      	pop	{r4, pc}
 800c68a:	bf00      	nop
 800c68c:	0800df53 	.word	0x0800df53
 800c690:	0800df64 	.word	0x0800df64

0800c694 <__multiply>:
 800c694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c698:	4691      	mov	r9, r2
 800c69a:	690a      	ldr	r2, [r1, #16]
 800c69c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	bfb8      	it	lt
 800c6a4:	460b      	movlt	r3, r1
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	bfbc      	itt	lt
 800c6aa:	464c      	movlt	r4, r9
 800c6ac:	4699      	movlt	r9, r3
 800c6ae:	6927      	ldr	r7, [r4, #16]
 800c6b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c6b4:	68a3      	ldr	r3, [r4, #8]
 800c6b6:	6861      	ldr	r1, [r4, #4]
 800c6b8:	eb07 060a 	add.w	r6, r7, sl
 800c6bc:	42b3      	cmp	r3, r6
 800c6be:	b085      	sub	sp, #20
 800c6c0:	bfb8      	it	lt
 800c6c2:	3101      	addlt	r1, #1
 800c6c4:	f7ff fed8 	bl	800c478 <_Balloc>
 800c6c8:	b930      	cbnz	r0, 800c6d8 <__multiply+0x44>
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	4b44      	ldr	r3, [pc, #272]	; (800c7e0 <__multiply+0x14c>)
 800c6ce:	4845      	ldr	r0, [pc, #276]	; (800c7e4 <__multiply+0x150>)
 800c6d0:	f240 115d 	movw	r1, #349	; 0x15d
 800c6d4:	f000 fcb6 	bl	800d044 <__assert_func>
 800c6d8:	f100 0514 	add.w	r5, r0, #20
 800c6dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6e0:	462b      	mov	r3, r5
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	4543      	cmp	r3, r8
 800c6e6:	d321      	bcc.n	800c72c <__multiply+0x98>
 800c6e8:	f104 0314 	add.w	r3, r4, #20
 800c6ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c6f0:	f109 0314 	add.w	r3, r9, #20
 800c6f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c6f8:	9202      	str	r2, [sp, #8]
 800c6fa:	1b3a      	subs	r2, r7, r4
 800c6fc:	3a15      	subs	r2, #21
 800c6fe:	f022 0203 	bic.w	r2, r2, #3
 800c702:	3204      	adds	r2, #4
 800c704:	f104 0115 	add.w	r1, r4, #21
 800c708:	428f      	cmp	r7, r1
 800c70a:	bf38      	it	cc
 800c70c:	2204      	movcc	r2, #4
 800c70e:	9201      	str	r2, [sp, #4]
 800c710:	9a02      	ldr	r2, [sp, #8]
 800c712:	9303      	str	r3, [sp, #12]
 800c714:	429a      	cmp	r2, r3
 800c716:	d80c      	bhi.n	800c732 <__multiply+0x9e>
 800c718:	2e00      	cmp	r6, #0
 800c71a:	dd03      	ble.n	800c724 <__multiply+0x90>
 800c71c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c720:	2b00      	cmp	r3, #0
 800c722:	d05a      	beq.n	800c7da <__multiply+0x146>
 800c724:	6106      	str	r6, [r0, #16]
 800c726:	b005      	add	sp, #20
 800c728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72c:	f843 2b04 	str.w	r2, [r3], #4
 800c730:	e7d8      	b.n	800c6e4 <__multiply+0x50>
 800c732:	f8b3 a000 	ldrh.w	sl, [r3]
 800c736:	f1ba 0f00 	cmp.w	sl, #0
 800c73a:	d024      	beq.n	800c786 <__multiply+0xf2>
 800c73c:	f104 0e14 	add.w	lr, r4, #20
 800c740:	46a9      	mov	r9, r5
 800c742:	f04f 0c00 	mov.w	ip, #0
 800c746:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c74a:	f8d9 1000 	ldr.w	r1, [r9]
 800c74e:	fa1f fb82 	uxth.w	fp, r2
 800c752:	b289      	uxth	r1, r1
 800c754:	fb0a 110b 	mla	r1, sl, fp, r1
 800c758:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c75c:	f8d9 2000 	ldr.w	r2, [r9]
 800c760:	4461      	add	r1, ip
 800c762:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c766:	fb0a c20b 	mla	r2, sl, fp, ip
 800c76a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c76e:	b289      	uxth	r1, r1
 800c770:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c774:	4577      	cmp	r7, lr
 800c776:	f849 1b04 	str.w	r1, [r9], #4
 800c77a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c77e:	d8e2      	bhi.n	800c746 <__multiply+0xb2>
 800c780:	9a01      	ldr	r2, [sp, #4]
 800c782:	f845 c002 	str.w	ip, [r5, r2]
 800c786:	9a03      	ldr	r2, [sp, #12]
 800c788:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c78c:	3304      	adds	r3, #4
 800c78e:	f1b9 0f00 	cmp.w	r9, #0
 800c792:	d020      	beq.n	800c7d6 <__multiply+0x142>
 800c794:	6829      	ldr	r1, [r5, #0]
 800c796:	f104 0c14 	add.w	ip, r4, #20
 800c79a:	46ae      	mov	lr, r5
 800c79c:	f04f 0a00 	mov.w	sl, #0
 800c7a0:	f8bc b000 	ldrh.w	fp, [ip]
 800c7a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c7a8:	fb09 220b 	mla	r2, r9, fp, r2
 800c7ac:	4492      	add	sl, r2
 800c7ae:	b289      	uxth	r1, r1
 800c7b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c7b4:	f84e 1b04 	str.w	r1, [lr], #4
 800c7b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c7bc:	f8be 1000 	ldrh.w	r1, [lr]
 800c7c0:	0c12      	lsrs	r2, r2, #16
 800c7c2:	fb09 1102 	mla	r1, r9, r2, r1
 800c7c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c7ca:	4567      	cmp	r7, ip
 800c7cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c7d0:	d8e6      	bhi.n	800c7a0 <__multiply+0x10c>
 800c7d2:	9a01      	ldr	r2, [sp, #4]
 800c7d4:	50a9      	str	r1, [r5, r2]
 800c7d6:	3504      	adds	r5, #4
 800c7d8:	e79a      	b.n	800c710 <__multiply+0x7c>
 800c7da:	3e01      	subs	r6, #1
 800c7dc:	e79c      	b.n	800c718 <__multiply+0x84>
 800c7de:	bf00      	nop
 800c7e0:	0800df53 	.word	0x0800df53
 800c7e4:	0800df64 	.word	0x0800df64

0800c7e8 <__pow5mult>:
 800c7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7ec:	4615      	mov	r5, r2
 800c7ee:	f012 0203 	ands.w	r2, r2, #3
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	460f      	mov	r7, r1
 800c7f6:	d007      	beq.n	800c808 <__pow5mult+0x20>
 800c7f8:	4c25      	ldr	r4, [pc, #148]	; (800c890 <__pow5mult+0xa8>)
 800c7fa:	3a01      	subs	r2, #1
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c802:	f7ff fe9b 	bl	800c53c <__multadd>
 800c806:	4607      	mov	r7, r0
 800c808:	10ad      	asrs	r5, r5, #2
 800c80a:	d03d      	beq.n	800c888 <__pow5mult+0xa0>
 800c80c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c80e:	b97c      	cbnz	r4, 800c830 <__pow5mult+0x48>
 800c810:	2010      	movs	r0, #16
 800c812:	f7ff fe1b 	bl	800c44c <malloc>
 800c816:	4602      	mov	r2, r0
 800c818:	6270      	str	r0, [r6, #36]	; 0x24
 800c81a:	b928      	cbnz	r0, 800c828 <__pow5mult+0x40>
 800c81c:	4b1d      	ldr	r3, [pc, #116]	; (800c894 <__pow5mult+0xac>)
 800c81e:	481e      	ldr	r0, [pc, #120]	; (800c898 <__pow5mult+0xb0>)
 800c820:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c824:	f000 fc0e 	bl	800d044 <__assert_func>
 800c828:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c82c:	6004      	str	r4, [r0, #0]
 800c82e:	60c4      	str	r4, [r0, #12]
 800c830:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c834:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c838:	b94c      	cbnz	r4, 800c84e <__pow5mult+0x66>
 800c83a:	f240 2171 	movw	r1, #625	; 0x271
 800c83e:	4630      	mov	r0, r6
 800c840:	f7ff ff12 	bl	800c668 <__i2b>
 800c844:	2300      	movs	r3, #0
 800c846:	f8c8 0008 	str.w	r0, [r8, #8]
 800c84a:	4604      	mov	r4, r0
 800c84c:	6003      	str	r3, [r0, #0]
 800c84e:	f04f 0900 	mov.w	r9, #0
 800c852:	07eb      	lsls	r3, r5, #31
 800c854:	d50a      	bpl.n	800c86c <__pow5mult+0x84>
 800c856:	4639      	mov	r1, r7
 800c858:	4622      	mov	r2, r4
 800c85a:	4630      	mov	r0, r6
 800c85c:	f7ff ff1a 	bl	800c694 <__multiply>
 800c860:	4639      	mov	r1, r7
 800c862:	4680      	mov	r8, r0
 800c864:	4630      	mov	r0, r6
 800c866:	f7ff fe47 	bl	800c4f8 <_Bfree>
 800c86a:	4647      	mov	r7, r8
 800c86c:	106d      	asrs	r5, r5, #1
 800c86e:	d00b      	beq.n	800c888 <__pow5mult+0xa0>
 800c870:	6820      	ldr	r0, [r4, #0]
 800c872:	b938      	cbnz	r0, 800c884 <__pow5mult+0x9c>
 800c874:	4622      	mov	r2, r4
 800c876:	4621      	mov	r1, r4
 800c878:	4630      	mov	r0, r6
 800c87a:	f7ff ff0b 	bl	800c694 <__multiply>
 800c87e:	6020      	str	r0, [r4, #0]
 800c880:	f8c0 9000 	str.w	r9, [r0]
 800c884:	4604      	mov	r4, r0
 800c886:	e7e4      	b.n	800c852 <__pow5mult+0x6a>
 800c888:	4638      	mov	r0, r7
 800c88a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c88e:	bf00      	nop
 800c890:	0800e0b0 	.word	0x0800e0b0
 800c894:	0800dee1 	.word	0x0800dee1
 800c898:	0800df64 	.word	0x0800df64

0800c89c <__lshift>:
 800c89c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	6849      	ldr	r1, [r1, #4]
 800c8a4:	6923      	ldr	r3, [r4, #16]
 800c8a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8aa:	68a3      	ldr	r3, [r4, #8]
 800c8ac:	4607      	mov	r7, r0
 800c8ae:	4691      	mov	r9, r2
 800c8b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8b4:	f108 0601 	add.w	r6, r8, #1
 800c8b8:	42b3      	cmp	r3, r6
 800c8ba:	db0b      	blt.n	800c8d4 <__lshift+0x38>
 800c8bc:	4638      	mov	r0, r7
 800c8be:	f7ff fddb 	bl	800c478 <_Balloc>
 800c8c2:	4605      	mov	r5, r0
 800c8c4:	b948      	cbnz	r0, 800c8da <__lshift+0x3e>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	4b2a      	ldr	r3, [pc, #168]	; (800c974 <__lshift+0xd8>)
 800c8ca:	482b      	ldr	r0, [pc, #172]	; (800c978 <__lshift+0xdc>)
 800c8cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c8d0:	f000 fbb8 	bl	800d044 <__assert_func>
 800c8d4:	3101      	adds	r1, #1
 800c8d6:	005b      	lsls	r3, r3, #1
 800c8d8:	e7ee      	b.n	800c8b8 <__lshift+0x1c>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	f100 0114 	add.w	r1, r0, #20
 800c8e0:	f100 0210 	add.w	r2, r0, #16
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	4553      	cmp	r3, sl
 800c8e8:	db37      	blt.n	800c95a <__lshift+0xbe>
 800c8ea:	6920      	ldr	r0, [r4, #16]
 800c8ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8f0:	f104 0314 	add.w	r3, r4, #20
 800c8f4:	f019 091f 	ands.w	r9, r9, #31
 800c8f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c900:	d02f      	beq.n	800c962 <__lshift+0xc6>
 800c902:	f1c9 0e20 	rsb	lr, r9, #32
 800c906:	468a      	mov	sl, r1
 800c908:	f04f 0c00 	mov.w	ip, #0
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	fa02 f209 	lsl.w	r2, r2, r9
 800c912:	ea42 020c 	orr.w	r2, r2, ip
 800c916:	f84a 2b04 	str.w	r2, [sl], #4
 800c91a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c91e:	4298      	cmp	r0, r3
 800c920:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c924:	d8f2      	bhi.n	800c90c <__lshift+0x70>
 800c926:	1b03      	subs	r3, r0, r4
 800c928:	3b15      	subs	r3, #21
 800c92a:	f023 0303 	bic.w	r3, r3, #3
 800c92e:	3304      	adds	r3, #4
 800c930:	f104 0215 	add.w	r2, r4, #21
 800c934:	4290      	cmp	r0, r2
 800c936:	bf38      	it	cc
 800c938:	2304      	movcc	r3, #4
 800c93a:	f841 c003 	str.w	ip, [r1, r3]
 800c93e:	f1bc 0f00 	cmp.w	ip, #0
 800c942:	d001      	beq.n	800c948 <__lshift+0xac>
 800c944:	f108 0602 	add.w	r6, r8, #2
 800c948:	3e01      	subs	r6, #1
 800c94a:	4638      	mov	r0, r7
 800c94c:	612e      	str	r6, [r5, #16]
 800c94e:	4621      	mov	r1, r4
 800c950:	f7ff fdd2 	bl	800c4f8 <_Bfree>
 800c954:	4628      	mov	r0, r5
 800c956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c95a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c95e:	3301      	adds	r3, #1
 800c960:	e7c1      	b.n	800c8e6 <__lshift+0x4a>
 800c962:	3904      	subs	r1, #4
 800c964:	f853 2b04 	ldr.w	r2, [r3], #4
 800c968:	f841 2f04 	str.w	r2, [r1, #4]!
 800c96c:	4298      	cmp	r0, r3
 800c96e:	d8f9      	bhi.n	800c964 <__lshift+0xc8>
 800c970:	e7ea      	b.n	800c948 <__lshift+0xac>
 800c972:	bf00      	nop
 800c974:	0800df53 	.word	0x0800df53
 800c978:	0800df64 	.word	0x0800df64

0800c97c <__mcmp>:
 800c97c:	b530      	push	{r4, r5, lr}
 800c97e:	6902      	ldr	r2, [r0, #16]
 800c980:	690c      	ldr	r4, [r1, #16]
 800c982:	1b12      	subs	r2, r2, r4
 800c984:	d10e      	bne.n	800c9a4 <__mcmp+0x28>
 800c986:	f100 0314 	add.w	r3, r0, #20
 800c98a:	3114      	adds	r1, #20
 800c98c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c990:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c994:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c998:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c99c:	42a5      	cmp	r5, r4
 800c99e:	d003      	beq.n	800c9a8 <__mcmp+0x2c>
 800c9a0:	d305      	bcc.n	800c9ae <__mcmp+0x32>
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	4610      	mov	r0, r2
 800c9a6:	bd30      	pop	{r4, r5, pc}
 800c9a8:	4283      	cmp	r3, r0
 800c9aa:	d3f3      	bcc.n	800c994 <__mcmp+0x18>
 800c9ac:	e7fa      	b.n	800c9a4 <__mcmp+0x28>
 800c9ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c9b2:	e7f7      	b.n	800c9a4 <__mcmp+0x28>

0800c9b4 <__mdiff>:
 800c9b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	4611      	mov	r1, r2
 800c9be:	4620      	mov	r0, r4
 800c9c0:	4690      	mov	r8, r2
 800c9c2:	f7ff ffdb 	bl	800c97c <__mcmp>
 800c9c6:	1e05      	subs	r5, r0, #0
 800c9c8:	d110      	bne.n	800c9ec <__mdiff+0x38>
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	4630      	mov	r0, r6
 800c9ce:	f7ff fd53 	bl	800c478 <_Balloc>
 800c9d2:	b930      	cbnz	r0, 800c9e2 <__mdiff+0x2e>
 800c9d4:	4b3a      	ldr	r3, [pc, #232]	; (800cac0 <__mdiff+0x10c>)
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	f240 2132 	movw	r1, #562	; 0x232
 800c9dc:	4839      	ldr	r0, [pc, #228]	; (800cac4 <__mdiff+0x110>)
 800c9de:	f000 fb31 	bl	800d044 <__assert_func>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ec:	bfa4      	itt	ge
 800c9ee:	4643      	movge	r3, r8
 800c9f0:	46a0      	movge	r8, r4
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c9f8:	bfa6      	itte	ge
 800c9fa:	461c      	movge	r4, r3
 800c9fc:	2500      	movge	r5, #0
 800c9fe:	2501      	movlt	r5, #1
 800ca00:	f7ff fd3a 	bl	800c478 <_Balloc>
 800ca04:	b920      	cbnz	r0, 800ca10 <__mdiff+0x5c>
 800ca06:	4b2e      	ldr	r3, [pc, #184]	; (800cac0 <__mdiff+0x10c>)
 800ca08:	4602      	mov	r2, r0
 800ca0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ca0e:	e7e5      	b.n	800c9dc <__mdiff+0x28>
 800ca10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ca14:	6926      	ldr	r6, [r4, #16]
 800ca16:	60c5      	str	r5, [r0, #12]
 800ca18:	f104 0914 	add.w	r9, r4, #20
 800ca1c:	f108 0514 	add.w	r5, r8, #20
 800ca20:	f100 0e14 	add.w	lr, r0, #20
 800ca24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ca28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ca2c:	f108 0210 	add.w	r2, r8, #16
 800ca30:	46f2      	mov	sl, lr
 800ca32:	2100      	movs	r1, #0
 800ca34:	f859 3b04 	ldr.w	r3, [r9], #4
 800ca38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ca3c:	fa1f f883 	uxth.w	r8, r3
 800ca40:	fa11 f18b 	uxtah	r1, r1, fp
 800ca44:	0c1b      	lsrs	r3, r3, #16
 800ca46:	eba1 0808 	sub.w	r8, r1, r8
 800ca4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ca4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ca52:	fa1f f888 	uxth.w	r8, r8
 800ca56:	1419      	asrs	r1, r3, #16
 800ca58:	454e      	cmp	r6, r9
 800ca5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ca5e:	f84a 3b04 	str.w	r3, [sl], #4
 800ca62:	d8e7      	bhi.n	800ca34 <__mdiff+0x80>
 800ca64:	1b33      	subs	r3, r6, r4
 800ca66:	3b15      	subs	r3, #21
 800ca68:	f023 0303 	bic.w	r3, r3, #3
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	3415      	adds	r4, #21
 800ca70:	42a6      	cmp	r6, r4
 800ca72:	bf38      	it	cc
 800ca74:	2304      	movcc	r3, #4
 800ca76:	441d      	add	r5, r3
 800ca78:	4473      	add	r3, lr
 800ca7a:	469e      	mov	lr, r3
 800ca7c:	462e      	mov	r6, r5
 800ca7e:	4566      	cmp	r6, ip
 800ca80:	d30e      	bcc.n	800caa0 <__mdiff+0xec>
 800ca82:	f10c 0203 	add.w	r2, ip, #3
 800ca86:	1b52      	subs	r2, r2, r5
 800ca88:	f022 0203 	bic.w	r2, r2, #3
 800ca8c:	3d03      	subs	r5, #3
 800ca8e:	45ac      	cmp	ip, r5
 800ca90:	bf38      	it	cc
 800ca92:	2200      	movcc	r2, #0
 800ca94:	441a      	add	r2, r3
 800ca96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ca9a:	b17b      	cbz	r3, 800cabc <__mdiff+0x108>
 800ca9c:	6107      	str	r7, [r0, #16]
 800ca9e:	e7a3      	b.n	800c9e8 <__mdiff+0x34>
 800caa0:	f856 8b04 	ldr.w	r8, [r6], #4
 800caa4:	fa11 f288 	uxtah	r2, r1, r8
 800caa8:	1414      	asrs	r4, r2, #16
 800caaa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800caae:	b292      	uxth	r2, r2
 800cab0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cab4:	f84e 2b04 	str.w	r2, [lr], #4
 800cab8:	1421      	asrs	r1, r4, #16
 800caba:	e7e0      	b.n	800ca7e <__mdiff+0xca>
 800cabc:	3f01      	subs	r7, #1
 800cabe:	e7ea      	b.n	800ca96 <__mdiff+0xe2>
 800cac0:	0800df53 	.word	0x0800df53
 800cac4:	0800df64 	.word	0x0800df64

0800cac8 <__d2b>:
 800cac8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cacc:	4689      	mov	r9, r1
 800cace:	2101      	movs	r1, #1
 800cad0:	ec57 6b10 	vmov	r6, r7, d0
 800cad4:	4690      	mov	r8, r2
 800cad6:	f7ff fccf 	bl	800c478 <_Balloc>
 800cada:	4604      	mov	r4, r0
 800cadc:	b930      	cbnz	r0, 800caec <__d2b+0x24>
 800cade:	4602      	mov	r2, r0
 800cae0:	4b25      	ldr	r3, [pc, #148]	; (800cb78 <__d2b+0xb0>)
 800cae2:	4826      	ldr	r0, [pc, #152]	; (800cb7c <__d2b+0xb4>)
 800cae4:	f240 310a 	movw	r1, #778	; 0x30a
 800cae8:	f000 faac 	bl	800d044 <__assert_func>
 800caec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800caf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800caf4:	bb35      	cbnz	r5, 800cb44 <__d2b+0x7c>
 800caf6:	2e00      	cmp	r6, #0
 800caf8:	9301      	str	r3, [sp, #4]
 800cafa:	d028      	beq.n	800cb4e <__d2b+0x86>
 800cafc:	4668      	mov	r0, sp
 800cafe:	9600      	str	r6, [sp, #0]
 800cb00:	f7ff fd82 	bl	800c608 <__lo0bits>
 800cb04:	9900      	ldr	r1, [sp, #0]
 800cb06:	b300      	cbz	r0, 800cb4a <__d2b+0x82>
 800cb08:	9a01      	ldr	r2, [sp, #4]
 800cb0a:	f1c0 0320 	rsb	r3, r0, #32
 800cb0e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb12:	430b      	orrs	r3, r1
 800cb14:	40c2      	lsrs	r2, r0
 800cb16:	6163      	str	r3, [r4, #20]
 800cb18:	9201      	str	r2, [sp, #4]
 800cb1a:	9b01      	ldr	r3, [sp, #4]
 800cb1c:	61a3      	str	r3, [r4, #24]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	bf14      	ite	ne
 800cb22:	2202      	movne	r2, #2
 800cb24:	2201      	moveq	r2, #1
 800cb26:	6122      	str	r2, [r4, #16]
 800cb28:	b1d5      	cbz	r5, 800cb60 <__d2b+0x98>
 800cb2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb2e:	4405      	add	r5, r0
 800cb30:	f8c9 5000 	str.w	r5, [r9]
 800cb34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb38:	f8c8 0000 	str.w	r0, [r8]
 800cb3c:	4620      	mov	r0, r4
 800cb3e:	b003      	add	sp, #12
 800cb40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb48:	e7d5      	b.n	800caf6 <__d2b+0x2e>
 800cb4a:	6161      	str	r1, [r4, #20]
 800cb4c:	e7e5      	b.n	800cb1a <__d2b+0x52>
 800cb4e:	a801      	add	r0, sp, #4
 800cb50:	f7ff fd5a 	bl	800c608 <__lo0bits>
 800cb54:	9b01      	ldr	r3, [sp, #4]
 800cb56:	6163      	str	r3, [r4, #20]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	6122      	str	r2, [r4, #16]
 800cb5c:	3020      	adds	r0, #32
 800cb5e:	e7e3      	b.n	800cb28 <__d2b+0x60>
 800cb60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb68:	f8c9 0000 	str.w	r0, [r9]
 800cb6c:	6918      	ldr	r0, [r3, #16]
 800cb6e:	f7ff fd2b 	bl	800c5c8 <__hi0bits>
 800cb72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb76:	e7df      	b.n	800cb38 <__d2b+0x70>
 800cb78:	0800df53 	.word	0x0800df53
 800cb7c:	0800df64 	.word	0x0800df64

0800cb80 <_calloc_r>:
 800cb80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb82:	fba1 2402 	umull	r2, r4, r1, r2
 800cb86:	b94c      	cbnz	r4, 800cb9c <_calloc_r+0x1c>
 800cb88:	4611      	mov	r1, r2
 800cb8a:	9201      	str	r2, [sp, #4]
 800cb8c:	f000 f87a 	bl	800cc84 <_malloc_r>
 800cb90:	9a01      	ldr	r2, [sp, #4]
 800cb92:	4605      	mov	r5, r0
 800cb94:	b930      	cbnz	r0, 800cba4 <_calloc_r+0x24>
 800cb96:	4628      	mov	r0, r5
 800cb98:	b003      	add	sp, #12
 800cb9a:	bd30      	pop	{r4, r5, pc}
 800cb9c:	220c      	movs	r2, #12
 800cb9e:	6002      	str	r2, [r0, #0]
 800cba0:	2500      	movs	r5, #0
 800cba2:	e7f8      	b.n	800cb96 <_calloc_r+0x16>
 800cba4:	4621      	mov	r1, r4
 800cba6:	f7fe f93f 	bl	800ae28 <memset>
 800cbaa:	e7f4      	b.n	800cb96 <_calloc_r+0x16>

0800cbac <_free_r>:
 800cbac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbae:	2900      	cmp	r1, #0
 800cbb0:	d044      	beq.n	800cc3c <_free_r+0x90>
 800cbb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbb6:	9001      	str	r0, [sp, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f1a1 0404 	sub.w	r4, r1, #4
 800cbbe:	bfb8      	it	lt
 800cbc0:	18e4      	addlt	r4, r4, r3
 800cbc2:	f000 fa9b 	bl	800d0fc <__malloc_lock>
 800cbc6:	4a1e      	ldr	r2, [pc, #120]	; (800cc40 <_free_r+0x94>)
 800cbc8:	9801      	ldr	r0, [sp, #4]
 800cbca:	6813      	ldr	r3, [r2, #0]
 800cbcc:	b933      	cbnz	r3, 800cbdc <_free_r+0x30>
 800cbce:	6063      	str	r3, [r4, #4]
 800cbd0:	6014      	str	r4, [r2, #0]
 800cbd2:	b003      	add	sp, #12
 800cbd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbd8:	f000 ba96 	b.w	800d108 <__malloc_unlock>
 800cbdc:	42a3      	cmp	r3, r4
 800cbde:	d908      	bls.n	800cbf2 <_free_r+0x46>
 800cbe0:	6825      	ldr	r5, [r4, #0]
 800cbe2:	1961      	adds	r1, r4, r5
 800cbe4:	428b      	cmp	r3, r1
 800cbe6:	bf01      	itttt	eq
 800cbe8:	6819      	ldreq	r1, [r3, #0]
 800cbea:	685b      	ldreq	r3, [r3, #4]
 800cbec:	1949      	addeq	r1, r1, r5
 800cbee:	6021      	streq	r1, [r4, #0]
 800cbf0:	e7ed      	b.n	800cbce <_free_r+0x22>
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	b10b      	cbz	r3, 800cbfc <_free_r+0x50>
 800cbf8:	42a3      	cmp	r3, r4
 800cbfa:	d9fa      	bls.n	800cbf2 <_free_r+0x46>
 800cbfc:	6811      	ldr	r1, [r2, #0]
 800cbfe:	1855      	adds	r5, r2, r1
 800cc00:	42a5      	cmp	r5, r4
 800cc02:	d10b      	bne.n	800cc1c <_free_r+0x70>
 800cc04:	6824      	ldr	r4, [r4, #0]
 800cc06:	4421      	add	r1, r4
 800cc08:	1854      	adds	r4, r2, r1
 800cc0a:	42a3      	cmp	r3, r4
 800cc0c:	6011      	str	r1, [r2, #0]
 800cc0e:	d1e0      	bne.n	800cbd2 <_free_r+0x26>
 800cc10:	681c      	ldr	r4, [r3, #0]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	6053      	str	r3, [r2, #4]
 800cc16:	4421      	add	r1, r4
 800cc18:	6011      	str	r1, [r2, #0]
 800cc1a:	e7da      	b.n	800cbd2 <_free_r+0x26>
 800cc1c:	d902      	bls.n	800cc24 <_free_r+0x78>
 800cc1e:	230c      	movs	r3, #12
 800cc20:	6003      	str	r3, [r0, #0]
 800cc22:	e7d6      	b.n	800cbd2 <_free_r+0x26>
 800cc24:	6825      	ldr	r5, [r4, #0]
 800cc26:	1961      	adds	r1, r4, r5
 800cc28:	428b      	cmp	r3, r1
 800cc2a:	bf04      	itt	eq
 800cc2c:	6819      	ldreq	r1, [r3, #0]
 800cc2e:	685b      	ldreq	r3, [r3, #4]
 800cc30:	6063      	str	r3, [r4, #4]
 800cc32:	bf04      	itt	eq
 800cc34:	1949      	addeq	r1, r1, r5
 800cc36:	6021      	streq	r1, [r4, #0]
 800cc38:	6054      	str	r4, [r2, #4]
 800cc3a:	e7ca      	b.n	800cbd2 <_free_r+0x26>
 800cc3c:	b003      	add	sp, #12
 800cc3e:	bd30      	pop	{r4, r5, pc}
 800cc40:	20005b04 	.word	0x20005b04

0800cc44 <sbrk_aligned>:
 800cc44:	b570      	push	{r4, r5, r6, lr}
 800cc46:	4e0e      	ldr	r6, [pc, #56]	; (800cc80 <sbrk_aligned+0x3c>)
 800cc48:	460c      	mov	r4, r1
 800cc4a:	6831      	ldr	r1, [r6, #0]
 800cc4c:	4605      	mov	r5, r0
 800cc4e:	b911      	cbnz	r1, 800cc56 <sbrk_aligned+0x12>
 800cc50:	f000 f9e8 	bl	800d024 <_sbrk_r>
 800cc54:	6030      	str	r0, [r6, #0]
 800cc56:	4621      	mov	r1, r4
 800cc58:	4628      	mov	r0, r5
 800cc5a:	f000 f9e3 	bl	800d024 <_sbrk_r>
 800cc5e:	1c43      	adds	r3, r0, #1
 800cc60:	d00a      	beq.n	800cc78 <sbrk_aligned+0x34>
 800cc62:	1cc4      	adds	r4, r0, #3
 800cc64:	f024 0403 	bic.w	r4, r4, #3
 800cc68:	42a0      	cmp	r0, r4
 800cc6a:	d007      	beq.n	800cc7c <sbrk_aligned+0x38>
 800cc6c:	1a21      	subs	r1, r4, r0
 800cc6e:	4628      	mov	r0, r5
 800cc70:	f000 f9d8 	bl	800d024 <_sbrk_r>
 800cc74:	3001      	adds	r0, #1
 800cc76:	d101      	bne.n	800cc7c <sbrk_aligned+0x38>
 800cc78:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	bd70      	pop	{r4, r5, r6, pc}
 800cc80:	20005b08 	.word	0x20005b08

0800cc84 <_malloc_r>:
 800cc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc88:	1ccd      	adds	r5, r1, #3
 800cc8a:	f025 0503 	bic.w	r5, r5, #3
 800cc8e:	3508      	adds	r5, #8
 800cc90:	2d0c      	cmp	r5, #12
 800cc92:	bf38      	it	cc
 800cc94:	250c      	movcc	r5, #12
 800cc96:	2d00      	cmp	r5, #0
 800cc98:	4607      	mov	r7, r0
 800cc9a:	db01      	blt.n	800cca0 <_malloc_r+0x1c>
 800cc9c:	42a9      	cmp	r1, r5
 800cc9e:	d905      	bls.n	800ccac <_malloc_r+0x28>
 800cca0:	230c      	movs	r3, #12
 800cca2:	603b      	str	r3, [r7, #0]
 800cca4:	2600      	movs	r6, #0
 800cca6:	4630      	mov	r0, r6
 800cca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccac:	4e2e      	ldr	r6, [pc, #184]	; (800cd68 <_malloc_r+0xe4>)
 800ccae:	f000 fa25 	bl	800d0fc <__malloc_lock>
 800ccb2:	6833      	ldr	r3, [r6, #0]
 800ccb4:	461c      	mov	r4, r3
 800ccb6:	bb34      	cbnz	r4, 800cd06 <_malloc_r+0x82>
 800ccb8:	4629      	mov	r1, r5
 800ccba:	4638      	mov	r0, r7
 800ccbc:	f7ff ffc2 	bl	800cc44 <sbrk_aligned>
 800ccc0:	1c43      	adds	r3, r0, #1
 800ccc2:	4604      	mov	r4, r0
 800ccc4:	d14d      	bne.n	800cd62 <_malloc_r+0xde>
 800ccc6:	6834      	ldr	r4, [r6, #0]
 800ccc8:	4626      	mov	r6, r4
 800ccca:	2e00      	cmp	r6, #0
 800cccc:	d140      	bne.n	800cd50 <_malloc_r+0xcc>
 800ccce:	6823      	ldr	r3, [r4, #0]
 800ccd0:	4631      	mov	r1, r6
 800ccd2:	4638      	mov	r0, r7
 800ccd4:	eb04 0803 	add.w	r8, r4, r3
 800ccd8:	f000 f9a4 	bl	800d024 <_sbrk_r>
 800ccdc:	4580      	cmp	r8, r0
 800ccde:	d13a      	bne.n	800cd56 <_malloc_r+0xd2>
 800cce0:	6821      	ldr	r1, [r4, #0]
 800cce2:	3503      	adds	r5, #3
 800cce4:	1a6d      	subs	r5, r5, r1
 800cce6:	f025 0503 	bic.w	r5, r5, #3
 800ccea:	3508      	adds	r5, #8
 800ccec:	2d0c      	cmp	r5, #12
 800ccee:	bf38      	it	cc
 800ccf0:	250c      	movcc	r5, #12
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	4638      	mov	r0, r7
 800ccf6:	f7ff ffa5 	bl	800cc44 <sbrk_aligned>
 800ccfa:	3001      	adds	r0, #1
 800ccfc:	d02b      	beq.n	800cd56 <_malloc_r+0xd2>
 800ccfe:	6823      	ldr	r3, [r4, #0]
 800cd00:	442b      	add	r3, r5
 800cd02:	6023      	str	r3, [r4, #0]
 800cd04:	e00e      	b.n	800cd24 <_malloc_r+0xa0>
 800cd06:	6822      	ldr	r2, [r4, #0]
 800cd08:	1b52      	subs	r2, r2, r5
 800cd0a:	d41e      	bmi.n	800cd4a <_malloc_r+0xc6>
 800cd0c:	2a0b      	cmp	r2, #11
 800cd0e:	d916      	bls.n	800cd3e <_malloc_r+0xba>
 800cd10:	1961      	adds	r1, r4, r5
 800cd12:	42a3      	cmp	r3, r4
 800cd14:	6025      	str	r5, [r4, #0]
 800cd16:	bf18      	it	ne
 800cd18:	6059      	strne	r1, [r3, #4]
 800cd1a:	6863      	ldr	r3, [r4, #4]
 800cd1c:	bf08      	it	eq
 800cd1e:	6031      	streq	r1, [r6, #0]
 800cd20:	5162      	str	r2, [r4, r5]
 800cd22:	604b      	str	r3, [r1, #4]
 800cd24:	4638      	mov	r0, r7
 800cd26:	f104 060b 	add.w	r6, r4, #11
 800cd2a:	f000 f9ed 	bl	800d108 <__malloc_unlock>
 800cd2e:	f026 0607 	bic.w	r6, r6, #7
 800cd32:	1d23      	adds	r3, r4, #4
 800cd34:	1af2      	subs	r2, r6, r3
 800cd36:	d0b6      	beq.n	800cca6 <_malloc_r+0x22>
 800cd38:	1b9b      	subs	r3, r3, r6
 800cd3a:	50a3      	str	r3, [r4, r2]
 800cd3c:	e7b3      	b.n	800cca6 <_malloc_r+0x22>
 800cd3e:	6862      	ldr	r2, [r4, #4]
 800cd40:	42a3      	cmp	r3, r4
 800cd42:	bf0c      	ite	eq
 800cd44:	6032      	streq	r2, [r6, #0]
 800cd46:	605a      	strne	r2, [r3, #4]
 800cd48:	e7ec      	b.n	800cd24 <_malloc_r+0xa0>
 800cd4a:	4623      	mov	r3, r4
 800cd4c:	6864      	ldr	r4, [r4, #4]
 800cd4e:	e7b2      	b.n	800ccb6 <_malloc_r+0x32>
 800cd50:	4634      	mov	r4, r6
 800cd52:	6876      	ldr	r6, [r6, #4]
 800cd54:	e7b9      	b.n	800ccca <_malloc_r+0x46>
 800cd56:	230c      	movs	r3, #12
 800cd58:	603b      	str	r3, [r7, #0]
 800cd5a:	4638      	mov	r0, r7
 800cd5c:	f000 f9d4 	bl	800d108 <__malloc_unlock>
 800cd60:	e7a1      	b.n	800cca6 <_malloc_r+0x22>
 800cd62:	6025      	str	r5, [r4, #0]
 800cd64:	e7de      	b.n	800cd24 <_malloc_r+0xa0>
 800cd66:	bf00      	nop
 800cd68:	20005b04 	.word	0x20005b04

0800cd6c <__ssputs_r>:
 800cd6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd70:	688e      	ldr	r6, [r1, #8]
 800cd72:	429e      	cmp	r6, r3
 800cd74:	4682      	mov	sl, r0
 800cd76:	460c      	mov	r4, r1
 800cd78:	4690      	mov	r8, r2
 800cd7a:	461f      	mov	r7, r3
 800cd7c:	d838      	bhi.n	800cdf0 <__ssputs_r+0x84>
 800cd7e:	898a      	ldrh	r2, [r1, #12]
 800cd80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd84:	d032      	beq.n	800cdec <__ssputs_r+0x80>
 800cd86:	6825      	ldr	r5, [r4, #0]
 800cd88:	6909      	ldr	r1, [r1, #16]
 800cd8a:	eba5 0901 	sub.w	r9, r5, r1
 800cd8e:	6965      	ldr	r5, [r4, #20]
 800cd90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd98:	3301      	adds	r3, #1
 800cd9a:	444b      	add	r3, r9
 800cd9c:	106d      	asrs	r5, r5, #1
 800cd9e:	429d      	cmp	r5, r3
 800cda0:	bf38      	it	cc
 800cda2:	461d      	movcc	r5, r3
 800cda4:	0553      	lsls	r3, r2, #21
 800cda6:	d531      	bpl.n	800ce0c <__ssputs_r+0xa0>
 800cda8:	4629      	mov	r1, r5
 800cdaa:	f7ff ff6b 	bl	800cc84 <_malloc_r>
 800cdae:	4606      	mov	r6, r0
 800cdb0:	b950      	cbnz	r0, 800cdc8 <__ssputs_r+0x5c>
 800cdb2:	230c      	movs	r3, #12
 800cdb4:	f8ca 3000 	str.w	r3, [sl]
 800cdb8:	89a3      	ldrh	r3, [r4, #12]
 800cdba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdbe:	81a3      	strh	r3, [r4, #12]
 800cdc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cdc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc8:	6921      	ldr	r1, [r4, #16]
 800cdca:	464a      	mov	r2, r9
 800cdcc:	f7ff fb46 	bl	800c45c <memcpy>
 800cdd0:	89a3      	ldrh	r3, [r4, #12]
 800cdd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cdd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdda:	81a3      	strh	r3, [r4, #12]
 800cddc:	6126      	str	r6, [r4, #16]
 800cdde:	6165      	str	r5, [r4, #20]
 800cde0:	444e      	add	r6, r9
 800cde2:	eba5 0509 	sub.w	r5, r5, r9
 800cde6:	6026      	str	r6, [r4, #0]
 800cde8:	60a5      	str	r5, [r4, #8]
 800cdea:	463e      	mov	r6, r7
 800cdec:	42be      	cmp	r6, r7
 800cdee:	d900      	bls.n	800cdf2 <__ssputs_r+0x86>
 800cdf0:	463e      	mov	r6, r7
 800cdf2:	6820      	ldr	r0, [r4, #0]
 800cdf4:	4632      	mov	r2, r6
 800cdf6:	4641      	mov	r1, r8
 800cdf8:	f000 f966 	bl	800d0c8 <memmove>
 800cdfc:	68a3      	ldr	r3, [r4, #8]
 800cdfe:	1b9b      	subs	r3, r3, r6
 800ce00:	60a3      	str	r3, [r4, #8]
 800ce02:	6823      	ldr	r3, [r4, #0]
 800ce04:	4433      	add	r3, r6
 800ce06:	6023      	str	r3, [r4, #0]
 800ce08:	2000      	movs	r0, #0
 800ce0a:	e7db      	b.n	800cdc4 <__ssputs_r+0x58>
 800ce0c:	462a      	mov	r2, r5
 800ce0e:	f000 f981 	bl	800d114 <_realloc_r>
 800ce12:	4606      	mov	r6, r0
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d1e1      	bne.n	800cddc <__ssputs_r+0x70>
 800ce18:	6921      	ldr	r1, [r4, #16]
 800ce1a:	4650      	mov	r0, sl
 800ce1c:	f7ff fec6 	bl	800cbac <_free_r>
 800ce20:	e7c7      	b.n	800cdb2 <__ssputs_r+0x46>
	...

0800ce24 <_svfiprintf_r>:
 800ce24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce28:	4698      	mov	r8, r3
 800ce2a:	898b      	ldrh	r3, [r1, #12]
 800ce2c:	061b      	lsls	r3, r3, #24
 800ce2e:	b09d      	sub	sp, #116	; 0x74
 800ce30:	4607      	mov	r7, r0
 800ce32:	460d      	mov	r5, r1
 800ce34:	4614      	mov	r4, r2
 800ce36:	d50e      	bpl.n	800ce56 <_svfiprintf_r+0x32>
 800ce38:	690b      	ldr	r3, [r1, #16]
 800ce3a:	b963      	cbnz	r3, 800ce56 <_svfiprintf_r+0x32>
 800ce3c:	2140      	movs	r1, #64	; 0x40
 800ce3e:	f7ff ff21 	bl	800cc84 <_malloc_r>
 800ce42:	6028      	str	r0, [r5, #0]
 800ce44:	6128      	str	r0, [r5, #16]
 800ce46:	b920      	cbnz	r0, 800ce52 <_svfiprintf_r+0x2e>
 800ce48:	230c      	movs	r3, #12
 800ce4a:	603b      	str	r3, [r7, #0]
 800ce4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce50:	e0d1      	b.n	800cff6 <_svfiprintf_r+0x1d2>
 800ce52:	2340      	movs	r3, #64	; 0x40
 800ce54:	616b      	str	r3, [r5, #20]
 800ce56:	2300      	movs	r3, #0
 800ce58:	9309      	str	r3, [sp, #36]	; 0x24
 800ce5a:	2320      	movs	r3, #32
 800ce5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce60:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce64:	2330      	movs	r3, #48	; 0x30
 800ce66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d010 <_svfiprintf_r+0x1ec>
 800ce6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce6e:	f04f 0901 	mov.w	r9, #1
 800ce72:	4623      	mov	r3, r4
 800ce74:	469a      	mov	sl, r3
 800ce76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce7a:	b10a      	cbz	r2, 800ce80 <_svfiprintf_r+0x5c>
 800ce7c:	2a25      	cmp	r2, #37	; 0x25
 800ce7e:	d1f9      	bne.n	800ce74 <_svfiprintf_r+0x50>
 800ce80:	ebba 0b04 	subs.w	fp, sl, r4
 800ce84:	d00b      	beq.n	800ce9e <_svfiprintf_r+0x7a>
 800ce86:	465b      	mov	r3, fp
 800ce88:	4622      	mov	r2, r4
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	4638      	mov	r0, r7
 800ce8e:	f7ff ff6d 	bl	800cd6c <__ssputs_r>
 800ce92:	3001      	adds	r0, #1
 800ce94:	f000 80aa 	beq.w	800cfec <_svfiprintf_r+0x1c8>
 800ce98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce9a:	445a      	add	r2, fp
 800ce9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ce9e:	f89a 3000 	ldrb.w	r3, [sl]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	f000 80a2 	beq.w	800cfec <_svfiprintf_r+0x1c8>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ceae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ceb2:	f10a 0a01 	add.w	sl, sl, #1
 800ceb6:	9304      	str	r3, [sp, #16]
 800ceb8:	9307      	str	r3, [sp, #28]
 800ceba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cebe:	931a      	str	r3, [sp, #104]	; 0x68
 800cec0:	4654      	mov	r4, sl
 800cec2:	2205      	movs	r2, #5
 800cec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec8:	4851      	ldr	r0, [pc, #324]	; (800d010 <_svfiprintf_r+0x1ec>)
 800ceca:	f7f3 f989 	bl	80001e0 <memchr>
 800cece:	9a04      	ldr	r2, [sp, #16]
 800ced0:	b9d8      	cbnz	r0, 800cf0a <_svfiprintf_r+0xe6>
 800ced2:	06d0      	lsls	r0, r2, #27
 800ced4:	bf44      	itt	mi
 800ced6:	2320      	movmi	r3, #32
 800ced8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cedc:	0711      	lsls	r1, r2, #28
 800cede:	bf44      	itt	mi
 800cee0:	232b      	movmi	r3, #43	; 0x2b
 800cee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cee6:	f89a 3000 	ldrb.w	r3, [sl]
 800ceea:	2b2a      	cmp	r3, #42	; 0x2a
 800ceec:	d015      	beq.n	800cf1a <_svfiprintf_r+0xf6>
 800ceee:	9a07      	ldr	r2, [sp, #28]
 800cef0:	4654      	mov	r4, sl
 800cef2:	2000      	movs	r0, #0
 800cef4:	f04f 0c0a 	mov.w	ip, #10
 800cef8:	4621      	mov	r1, r4
 800cefa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cefe:	3b30      	subs	r3, #48	; 0x30
 800cf00:	2b09      	cmp	r3, #9
 800cf02:	d94e      	bls.n	800cfa2 <_svfiprintf_r+0x17e>
 800cf04:	b1b0      	cbz	r0, 800cf34 <_svfiprintf_r+0x110>
 800cf06:	9207      	str	r2, [sp, #28]
 800cf08:	e014      	b.n	800cf34 <_svfiprintf_r+0x110>
 800cf0a:	eba0 0308 	sub.w	r3, r0, r8
 800cf0e:	fa09 f303 	lsl.w	r3, r9, r3
 800cf12:	4313      	orrs	r3, r2
 800cf14:	9304      	str	r3, [sp, #16]
 800cf16:	46a2      	mov	sl, r4
 800cf18:	e7d2      	b.n	800cec0 <_svfiprintf_r+0x9c>
 800cf1a:	9b03      	ldr	r3, [sp, #12]
 800cf1c:	1d19      	adds	r1, r3, #4
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	9103      	str	r1, [sp, #12]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	bfbb      	ittet	lt
 800cf26:	425b      	neglt	r3, r3
 800cf28:	f042 0202 	orrlt.w	r2, r2, #2
 800cf2c:	9307      	strge	r3, [sp, #28]
 800cf2e:	9307      	strlt	r3, [sp, #28]
 800cf30:	bfb8      	it	lt
 800cf32:	9204      	strlt	r2, [sp, #16]
 800cf34:	7823      	ldrb	r3, [r4, #0]
 800cf36:	2b2e      	cmp	r3, #46	; 0x2e
 800cf38:	d10c      	bne.n	800cf54 <_svfiprintf_r+0x130>
 800cf3a:	7863      	ldrb	r3, [r4, #1]
 800cf3c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf3e:	d135      	bne.n	800cfac <_svfiprintf_r+0x188>
 800cf40:	9b03      	ldr	r3, [sp, #12]
 800cf42:	1d1a      	adds	r2, r3, #4
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	9203      	str	r2, [sp, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	bfb8      	it	lt
 800cf4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf50:	3402      	adds	r4, #2
 800cf52:	9305      	str	r3, [sp, #20]
 800cf54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d020 <_svfiprintf_r+0x1fc>
 800cf58:	7821      	ldrb	r1, [r4, #0]
 800cf5a:	2203      	movs	r2, #3
 800cf5c:	4650      	mov	r0, sl
 800cf5e:	f7f3 f93f 	bl	80001e0 <memchr>
 800cf62:	b140      	cbz	r0, 800cf76 <_svfiprintf_r+0x152>
 800cf64:	2340      	movs	r3, #64	; 0x40
 800cf66:	eba0 000a 	sub.w	r0, r0, sl
 800cf6a:	fa03 f000 	lsl.w	r0, r3, r0
 800cf6e:	9b04      	ldr	r3, [sp, #16]
 800cf70:	4303      	orrs	r3, r0
 800cf72:	3401      	adds	r4, #1
 800cf74:	9304      	str	r3, [sp, #16]
 800cf76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf7a:	4826      	ldr	r0, [pc, #152]	; (800d014 <_svfiprintf_r+0x1f0>)
 800cf7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf80:	2206      	movs	r2, #6
 800cf82:	f7f3 f92d 	bl	80001e0 <memchr>
 800cf86:	2800      	cmp	r0, #0
 800cf88:	d038      	beq.n	800cffc <_svfiprintf_r+0x1d8>
 800cf8a:	4b23      	ldr	r3, [pc, #140]	; (800d018 <_svfiprintf_r+0x1f4>)
 800cf8c:	bb1b      	cbnz	r3, 800cfd6 <_svfiprintf_r+0x1b2>
 800cf8e:	9b03      	ldr	r3, [sp, #12]
 800cf90:	3307      	adds	r3, #7
 800cf92:	f023 0307 	bic.w	r3, r3, #7
 800cf96:	3308      	adds	r3, #8
 800cf98:	9303      	str	r3, [sp, #12]
 800cf9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf9c:	4433      	add	r3, r6
 800cf9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cfa0:	e767      	b.n	800ce72 <_svfiprintf_r+0x4e>
 800cfa2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfa6:	460c      	mov	r4, r1
 800cfa8:	2001      	movs	r0, #1
 800cfaa:	e7a5      	b.n	800cef8 <_svfiprintf_r+0xd4>
 800cfac:	2300      	movs	r3, #0
 800cfae:	3401      	adds	r4, #1
 800cfb0:	9305      	str	r3, [sp, #20]
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	f04f 0c0a 	mov.w	ip, #10
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cfbe:	3a30      	subs	r2, #48	; 0x30
 800cfc0:	2a09      	cmp	r2, #9
 800cfc2:	d903      	bls.n	800cfcc <_svfiprintf_r+0x1a8>
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d0c5      	beq.n	800cf54 <_svfiprintf_r+0x130>
 800cfc8:	9105      	str	r1, [sp, #20]
 800cfca:	e7c3      	b.n	800cf54 <_svfiprintf_r+0x130>
 800cfcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e7f0      	b.n	800cfb8 <_svfiprintf_r+0x194>
 800cfd6:	ab03      	add	r3, sp, #12
 800cfd8:	9300      	str	r3, [sp, #0]
 800cfda:	462a      	mov	r2, r5
 800cfdc:	4b0f      	ldr	r3, [pc, #60]	; (800d01c <_svfiprintf_r+0x1f8>)
 800cfde:	a904      	add	r1, sp, #16
 800cfe0:	4638      	mov	r0, r7
 800cfe2:	f7fd ffc9 	bl	800af78 <_printf_float>
 800cfe6:	1c42      	adds	r2, r0, #1
 800cfe8:	4606      	mov	r6, r0
 800cfea:	d1d6      	bne.n	800cf9a <_svfiprintf_r+0x176>
 800cfec:	89ab      	ldrh	r3, [r5, #12]
 800cfee:	065b      	lsls	r3, r3, #25
 800cff0:	f53f af2c 	bmi.w	800ce4c <_svfiprintf_r+0x28>
 800cff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cff6:	b01d      	add	sp, #116	; 0x74
 800cff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffc:	ab03      	add	r3, sp, #12
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	462a      	mov	r2, r5
 800d002:	4b06      	ldr	r3, [pc, #24]	; (800d01c <_svfiprintf_r+0x1f8>)
 800d004:	a904      	add	r1, sp, #16
 800d006:	4638      	mov	r0, r7
 800d008:	f7fe fa5a 	bl	800b4c0 <_printf_i>
 800d00c:	e7eb      	b.n	800cfe6 <_svfiprintf_r+0x1c2>
 800d00e:	bf00      	nop
 800d010:	0800e0bc 	.word	0x0800e0bc
 800d014:	0800e0c6 	.word	0x0800e0c6
 800d018:	0800af79 	.word	0x0800af79
 800d01c:	0800cd6d 	.word	0x0800cd6d
 800d020:	0800e0c2 	.word	0x0800e0c2

0800d024 <_sbrk_r>:
 800d024:	b538      	push	{r3, r4, r5, lr}
 800d026:	4d06      	ldr	r5, [pc, #24]	; (800d040 <_sbrk_r+0x1c>)
 800d028:	2300      	movs	r3, #0
 800d02a:	4604      	mov	r4, r0
 800d02c:	4608      	mov	r0, r1
 800d02e:	602b      	str	r3, [r5, #0]
 800d030:	f7f6 fb92 	bl	8003758 <_sbrk>
 800d034:	1c43      	adds	r3, r0, #1
 800d036:	d102      	bne.n	800d03e <_sbrk_r+0x1a>
 800d038:	682b      	ldr	r3, [r5, #0]
 800d03a:	b103      	cbz	r3, 800d03e <_sbrk_r+0x1a>
 800d03c:	6023      	str	r3, [r4, #0]
 800d03e:	bd38      	pop	{r3, r4, r5, pc}
 800d040:	20005b0c 	.word	0x20005b0c

0800d044 <__assert_func>:
 800d044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d046:	4614      	mov	r4, r2
 800d048:	461a      	mov	r2, r3
 800d04a:	4b09      	ldr	r3, [pc, #36]	; (800d070 <__assert_func+0x2c>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4605      	mov	r5, r0
 800d050:	68d8      	ldr	r0, [r3, #12]
 800d052:	b14c      	cbz	r4, 800d068 <__assert_func+0x24>
 800d054:	4b07      	ldr	r3, [pc, #28]	; (800d074 <__assert_func+0x30>)
 800d056:	9100      	str	r1, [sp, #0]
 800d058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d05c:	4906      	ldr	r1, [pc, #24]	; (800d078 <__assert_func+0x34>)
 800d05e:	462b      	mov	r3, r5
 800d060:	f000 f80e 	bl	800d080 <fiprintf>
 800d064:	f000 faac 	bl	800d5c0 <abort>
 800d068:	4b04      	ldr	r3, [pc, #16]	; (800d07c <__assert_func+0x38>)
 800d06a:	461c      	mov	r4, r3
 800d06c:	e7f3      	b.n	800d056 <__assert_func+0x12>
 800d06e:	bf00      	nop
 800d070:	2000000c 	.word	0x2000000c
 800d074:	0800e0cd 	.word	0x0800e0cd
 800d078:	0800e0da 	.word	0x0800e0da
 800d07c:	0800e108 	.word	0x0800e108

0800d080 <fiprintf>:
 800d080:	b40e      	push	{r1, r2, r3}
 800d082:	b503      	push	{r0, r1, lr}
 800d084:	4601      	mov	r1, r0
 800d086:	ab03      	add	r3, sp, #12
 800d088:	4805      	ldr	r0, [pc, #20]	; (800d0a0 <fiprintf+0x20>)
 800d08a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d08e:	6800      	ldr	r0, [r0, #0]
 800d090:	9301      	str	r3, [sp, #4]
 800d092:	f000 f897 	bl	800d1c4 <_vfiprintf_r>
 800d096:	b002      	add	sp, #8
 800d098:	f85d eb04 	ldr.w	lr, [sp], #4
 800d09c:	b003      	add	sp, #12
 800d09e:	4770      	bx	lr
 800d0a0:	2000000c 	.word	0x2000000c

0800d0a4 <__ascii_mbtowc>:
 800d0a4:	b082      	sub	sp, #8
 800d0a6:	b901      	cbnz	r1, 800d0aa <__ascii_mbtowc+0x6>
 800d0a8:	a901      	add	r1, sp, #4
 800d0aa:	b142      	cbz	r2, 800d0be <__ascii_mbtowc+0x1a>
 800d0ac:	b14b      	cbz	r3, 800d0c2 <__ascii_mbtowc+0x1e>
 800d0ae:	7813      	ldrb	r3, [r2, #0]
 800d0b0:	600b      	str	r3, [r1, #0]
 800d0b2:	7812      	ldrb	r2, [r2, #0]
 800d0b4:	1e10      	subs	r0, r2, #0
 800d0b6:	bf18      	it	ne
 800d0b8:	2001      	movne	r0, #1
 800d0ba:	b002      	add	sp, #8
 800d0bc:	4770      	bx	lr
 800d0be:	4610      	mov	r0, r2
 800d0c0:	e7fb      	b.n	800d0ba <__ascii_mbtowc+0x16>
 800d0c2:	f06f 0001 	mvn.w	r0, #1
 800d0c6:	e7f8      	b.n	800d0ba <__ascii_mbtowc+0x16>

0800d0c8 <memmove>:
 800d0c8:	4288      	cmp	r0, r1
 800d0ca:	b510      	push	{r4, lr}
 800d0cc:	eb01 0402 	add.w	r4, r1, r2
 800d0d0:	d902      	bls.n	800d0d8 <memmove+0x10>
 800d0d2:	4284      	cmp	r4, r0
 800d0d4:	4623      	mov	r3, r4
 800d0d6:	d807      	bhi.n	800d0e8 <memmove+0x20>
 800d0d8:	1e43      	subs	r3, r0, #1
 800d0da:	42a1      	cmp	r1, r4
 800d0dc:	d008      	beq.n	800d0f0 <memmove+0x28>
 800d0de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0e6:	e7f8      	b.n	800d0da <memmove+0x12>
 800d0e8:	4402      	add	r2, r0
 800d0ea:	4601      	mov	r1, r0
 800d0ec:	428a      	cmp	r2, r1
 800d0ee:	d100      	bne.n	800d0f2 <memmove+0x2a>
 800d0f0:	bd10      	pop	{r4, pc}
 800d0f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0fa:	e7f7      	b.n	800d0ec <memmove+0x24>

0800d0fc <__malloc_lock>:
 800d0fc:	4801      	ldr	r0, [pc, #4]	; (800d104 <__malloc_lock+0x8>)
 800d0fe:	f000 bc1f 	b.w	800d940 <__retarget_lock_acquire_recursive>
 800d102:	bf00      	nop
 800d104:	20005b10 	.word	0x20005b10

0800d108 <__malloc_unlock>:
 800d108:	4801      	ldr	r0, [pc, #4]	; (800d110 <__malloc_unlock+0x8>)
 800d10a:	f000 bc1a 	b.w	800d942 <__retarget_lock_release_recursive>
 800d10e:	bf00      	nop
 800d110:	20005b10 	.word	0x20005b10

0800d114 <_realloc_r>:
 800d114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d118:	4680      	mov	r8, r0
 800d11a:	4614      	mov	r4, r2
 800d11c:	460e      	mov	r6, r1
 800d11e:	b921      	cbnz	r1, 800d12a <_realloc_r+0x16>
 800d120:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d124:	4611      	mov	r1, r2
 800d126:	f7ff bdad 	b.w	800cc84 <_malloc_r>
 800d12a:	b92a      	cbnz	r2, 800d138 <_realloc_r+0x24>
 800d12c:	f7ff fd3e 	bl	800cbac <_free_r>
 800d130:	4625      	mov	r5, r4
 800d132:	4628      	mov	r0, r5
 800d134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d138:	f000 fc6a 	bl	800da10 <_malloc_usable_size_r>
 800d13c:	4284      	cmp	r4, r0
 800d13e:	4607      	mov	r7, r0
 800d140:	d802      	bhi.n	800d148 <_realloc_r+0x34>
 800d142:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d146:	d812      	bhi.n	800d16e <_realloc_r+0x5a>
 800d148:	4621      	mov	r1, r4
 800d14a:	4640      	mov	r0, r8
 800d14c:	f7ff fd9a 	bl	800cc84 <_malloc_r>
 800d150:	4605      	mov	r5, r0
 800d152:	2800      	cmp	r0, #0
 800d154:	d0ed      	beq.n	800d132 <_realloc_r+0x1e>
 800d156:	42bc      	cmp	r4, r7
 800d158:	4622      	mov	r2, r4
 800d15a:	4631      	mov	r1, r6
 800d15c:	bf28      	it	cs
 800d15e:	463a      	movcs	r2, r7
 800d160:	f7ff f97c 	bl	800c45c <memcpy>
 800d164:	4631      	mov	r1, r6
 800d166:	4640      	mov	r0, r8
 800d168:	f7ff fd20 	bl	800cbac <_free_r>
 800d16c:	e7e1      	b.n	800d132 <_realloc_r+0x1e>
 800d16e:	4635      	mov	r5, r6
 800d170:	e7df      	b.n	800d132 <_realloc_r+0x1e>

0800d172 <__sfputc_r>:
 800d172:	6893      	ldr	r3, [r2, #8]
 800d174:	3b01      	subs	r3, #1
 800d176:	2b00      	cmp	r3, #0
 800d178:	b410      	push	{r4}
 800d17a:	6093      	str	r3, [r2, #8]
 800d17c:	da08      	bge.n	800d190 <__sfputc_r+0x1e>
 800d17e:	6994      	ldr	r4, [r2, #24]
 800d180:	42a3      	cmp	r3, r4
 800d182:	db01      	blt.n	800d188 <__sfputc_r+0x16>
 800d184:	290a      	cmp	r1, #10
 800d186:	d103      	bne.n	800d190 <__sfputc_r+0x1e>
 800d188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d18c:	f000 b94a 	b.w	800d424 <__swbuf_r>
 800d190:	6813      	ldr	r3, [r2, #0]
 800d192:	1c58      	adds	r0, r3, #1
 800d194:	6010      	str	r0, [r2, #0]
 800d196:	7019      	strb	r1, [r3, #0]
 800d198:	4608      	mov	r0, r1
 800d19a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <__sfputs_r>:
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	4606      	mov	r6, r0
 800d1a4:	460f      	mov	r7, r1
 800d1a6:	4614      	mov	r4, r2
 800d1a8:	18d5      	adds	r5, r2, r3
 800d1aa:	42ac      	cmp	r4, r5
 800d1ac:	d101      	bne.n	800d1b2 <__sfputs_r+0x12>
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	e007      	b.n	800d1c2 <__sfputs_r+0x22>
 800d1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b6:	463a      	mov	r2, r7
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f7ff ffda 	bl	800d172 <__sfputc_r>
 800d1be:	1c43      	adds	r3, r0, #1
 800d1c0:	d1f3      	bne.n	800d1aa <__sfputs_r+0xa>
 800d1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1c4 <_vfiprintf_r>:
 800d1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c8:	460d      	mov	r5, r1
 800d1ca:	b09d      	sub	sp, #116	; 0x74
 800d1cc:	4614      	mov	r4, r2
 800d1ce:	4698      	mov	r8, r3
 800d1d0:	4606      	mov	r6, r0
 800d1d2:	b118      	cbz	r0, 800d1dc <_vfiprintf_r+0x18>
 800d1d4:	6983      	ldr	r3, [r0, #24]
 800d1d6:	b90b      	cbnz	r3, 800d1dc <_vfiprintf_r+0x18>
 800d1d8:	f000 fb14 	bl	800d804 <__sinit>
 800d1dc:	4b89      	ldr	r3, [pc, #548]	; (800d404 <_vfiprintf_r+0x240>)
 800d1de:	429d      	cmp	r5, r3
 800d1e0:	d11b      	bne.n	800d21a <_vfiprintf_r+0x56>
 800d1e2:	6875      	ldr	r5, [r6, #4]
 800d1e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1e6:	07d9      	lsls	r1, r3, #31
 800d1e8:	d405      	bmi.n	800d1f6 <_vfiprintf_r+0x32>
 800d1ea:	89ab      	ldrh	r3, [r5, #12]
 800d1ec:	059a      	lsls	r2, r3, #22
 800d1ee:	d402      	bmi.n	800d1f6 <_vfiprintf_r+0x32>
 800d1f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1f2:	f000 fba5 	bl	800d940 <__retarget_lock_acquire_recursive>
 800d1f6:	89ab      	ldrh	r3, [r5, #12]
 800d1f8:	071b      	lsls	r3, r3, #28
 800d1fa:	d501      	bpl.n	800d200 <_vfiprintf_r+0x3c>
 800d1fc:	692b      	ldr	r3, [r5, #16]
 800d1fe:	b9eb      	cbnz	r3, 800d23c <_vfiprintf_r+0x78>
 800d200:	4629      	mov	r1, r5
 800d202:	4630      	mov	r0, r6
 800d204:	f000 f96e 	bl	800d4e4 <__swsetup_r>
 800d208:	b1c0      	cbz	r0, 800d23c <_vfiprintf_r+0x78>
 800d20a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d20c:	07dc      	lsls	r4, r3, #31
 800d20e:	d50e      	bpl.n	800d22e <_vfiprintf_r+0x6a>
 800d210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d214:	b01d      	add	sp, #116	; 0x74
 800d216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d21a:	4b7b      	ldr	r3, [pc, #492]	; (800d408 <_vfiprintf_r+0x244>)
 800d21c:	429d      	cmp	r5, r3
 800d21e:	d101      	bne.n	800d224 <_vfiprintf_r+0x60>
 800d220:	68b5      	ldr	r5, [r6, #8]
 800d222:	e7df      	b.n	800d1e4 <_vfiprintf_r+0x20>
 800d224:	4b79      	ldr	r3, [pc, #484]	; (800d40c <_vfiprintf_r+0x248>)
 800d226:	429d      	cmp	r5, r3
 800d228:	bf08      	it	eq
 800d22a:	68f5      	ldreq	r5, [r6, #12]
 800d22c:	e7da      	b.n	800d1e4 <_vfiprintf_r+0x20>
 800d22e:	89ab      	ldrh	r3, [r5, #12]
 800d230:	0598      	lsls	r0, r3, #22
 800d232:	d4ed      	bmi.n	800d210 <_vfiprintf_r+0x4c>
 800d234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d236:	f000 fb84 	bl	800d942 <__retarget_lock_release_recursive>
 800d23a:	e7e9      	b.n	800d210 <_vfiprintf_r+0x4c>
 800d23c:	2300      	movs	r3, #0
 800d23e:	9309      	str	r3, [sp, #36]	; 0x24
 800d240:	2320      	movs	r3, #32
 800d242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d246:	f8cd 800c 	str.w	r8, [sp, #12]
 800d24a:	2330      	movs	r3, #48	; 0x30
 800d24c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d410 <_vfiprintf_r+0x24c>
 800d250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d254:	f04f 0901 	mov.w	r9, #1
 800d258:	4623      	mov	r3, r4
 800d25a:	469a      	mov	sl, r3
 800d25c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d260:	b10a      	cbz	r2, 800d266 <_vfiprintf_r+0xa2>
 800d262:	2a25      	cmp	r2, #37	; 0x25
 800d264:	d1f9      	bne.n	800d25a <_vfiprintf_r+0x96>
 800d266:	ebba 0b04 	subs.w	fp, sl, r4
 800d26a:	d00b      	beq.n	800d284 <_vfiprintf_r+0xc0>
 800d26c:	465b      	mov	r3, fp
 800d26e:	4622      	mov	r2, r4
 800d270:	4629      	mov	r1, r5
 800d272:	4630      	mov	r0, r6
 800d274:	f7ff ff94 	bl	800d1a0 <__sfputs_r>
 800d278:	3001      	adds	r0, #1
 800d27a:	f000 80aa 	beq.w	800d3d2 <_vfiprintf_r+0x20e>
 800d27e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d280:	445a      	add	r2, fp
 800d282:	9209      	str	r2, [sp, #36]	; 0x24
 800d284:	f89a 3000 	ldrb.w	r3, [sl]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	f000 80a2 	beq.w	800d3d2 <_vfiprintf_r+0x20e>
 800d28e:	2300      	movs	r3, #0
 800d290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d298:	f10a 0a01 	add.w	sl, sl, #1
 800d29c:	9304      	str	r3, [sp, #16]
 800d29e:	9307      	str	r3, [sp, #28]
 800d2a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2a4:	931a      	str	r3, [sp, #104]	; 0x68
 800d2a6:	4654      	mov	r4, sl
 800d2a8:	2205      	movs	r2, #5
 800d2aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ae:	4858      	ldr	r0, [pc, #352]	; (800d410 <_vfiprintf_r+0x24c>)
 800d2b0:	f7f2 ff96 	bl	80001e0 <memchr>
 800d2b4:	9a04      	ldr	r2, [sp, #16]
 800d2b6:	b9d8      	cbnz	r0, 800d2f0 <_vfiprintf_r+0x12c>
 800d2b8:	06d1      	lsls	r1, r2, #27
 800d2ba:	bf44      	itt	mi
 800d2bc:	2320      	movmi	r3, #32
 800d2be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2c2:	0713      	lsls	r3, r2, #28
 800d2c4:	bf44      	itt	mi
 800d2c6:	232b      	movmi	r3, #43	; 0x2b
 800d2c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2cc:	f89a 3000 	ldrb.w	r3, [sl]
 800d2d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2d2:	d015      	beq.n	800d300 <_vfiprintf_r+0x13c>
 800d2d4:	9a07      	ldr	r2, [sp, #28]
 800d2d6:	4654      	mov	r4, sl
 800d2d8:	2000      	movs	r0, #0
 800d2da:	f04f 0c0a 	mov.w	ip, #10
 800d2de:	4621      	mov	r1, r4
 800d2e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2e4:	3b30      	subs	r3, #48	; 0x30
 800d2e6:	2b09      	cmp	r3, #9
 800d2e8:	d94e      	bls.n	800d388 <_vfiprintf_r+0x1c4>
 800d2ea:	b1b0      	cbz	r0, 800d31a <_vfiprintf_r+0x156>
 800d2ec:	9207      	str	r2, [sp, #28]
 800d2ee:	e014      	b.n	800d31a <_vfiprintf_r+0x156>
 800d2f0:	eba0 0308 	sub.w	r3, r0, r8
 800d2f4:	fa09 f303 	lsl.w	r3, r9, r3
 800d2f8:	4313      	orrs	r3, r2
 800d2fa:	9304      	str	r3, [sp, #16]
 800d2fc:	46a2      	mov	sl, r4
 800d2fe:	e7d2      	b.n	800d2a6 <_vfiprintf_r+0xe2>
 800d300:	9b03      	ldr	r3, [sp, #12]
 800d302:	1d19      	adds	r1, r3, #4
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	9103      	str	r1, [sp, #12]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	bfbb      	ittet	lt
 800d30c:	425b      	neglt	r3, r3
 800d30e:	f042 0202 	orrlt.w	r2, r2, #2
 800d312:	9307      	strge	r3, [sp, #28]
 800d314:	9307      	strlt	r3, [sp, #28]
 800d316:	bfb8      	it	lt
 800d318:	9204      	strlt	r2, [sp, #16]
 800d31a:	7823      	ldrb	r3, [r4, #0]
 800d31c:	2b2e      	cmp	r3, #46	; 0x2e
 800d31e:	d10c      	bne.n	800d33a <_vfiprintf_r+0x176>
 800d320:	7863      	ldrb	r3, [r4, #1]
 800d322:	2b2a      	cmp	r3, #42	; 0x2a
 800d324:	d135      	bne.n	800d392 <_vfiprintf_r+0x1ce>
 800d326:	9b03      	ldr	r3, [sp, #12]
 800d328:	1d1a      	adds	r2, r3, #4
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	9203      	str	r2, [sp, #12]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	bfb8      	it	lt
 800d332:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d336:	3402      	adds	r4, #2
 800d338:	9305      	str	r3, [sp, #20]
 800d33a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d420 <_vfiprintf_r+0x25c>
 800d33e:	7821      	ldrb	r1, [r4, #0]
 800d340:	2203      	movs	r2, #3
 800d342:	4650      	mov	r0, sl
 800d344:	f7f2 ff4c 	bl	80001e0 <memchr>
 800d348:	b140      	cbz	r0, 800d35c <_vfiprintf_r+0x198>
 800d34a:	2340      	movs	r3, #64	; 0x40
 800d34c:	eba0 000a 	sub.w	r0, r0, sl
 800d350:	fa03 f000 	lsl.w	r0, r3, r0
 800d354:	9b04      	ldr	r3, [sp, #16]
 800d356:	4303      	orrs	r3, r0
 800d358:	3401      	adds	r4, #1
 800d35a:	9304      	str	r3, [sp, #16]
 800d35c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d360:	482c      	ldr	r0, [pc, #176]	; (800d414 <_vfiprintf_r+0x250>)
 800d362:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d366:	2206      	movs	r2, #6
 800d368:	f7f2 ff3a 	bl	80001e0 <memchr>
 800d36c:	2800      	cmp	r0, #0
 800d36e:	d03f      	beq.n	800d3f0 <_vfiprintf_r+0x22c>
 800d370:	4b29      	ldr	r3, [pc, #164]	; (800d418 <_vfiprintf_r+0x254>)
 800d372:	bb1b      	cbnz	r3, 800d3bc <_vfiprintf_r+0x1f8>
 800d374:	9b03      	ldr	r3, [sp, #12]
 800d376:	3307      	adds	r3, #7
 800d378:	f023 0307 	bic.w	r3, r3, #7
 800d37c:	3308      	adds	r3, #8
 800d37e:	9303      	str	r3, [sp, #12]
 800d380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d382:	443b      	add	r3, r7
 800d384:	9309      	str	r3, [sp, #36]	; 0x24
 800d386:	e767      	b.n	800d258 <_vfiprintf_r+0x94>
 800d388:	fb0c 3202 	mla	r2, ip, r2, r3
 800d38c:	460c      	mov	r4, r1
 800d38e:	2001      	movs	r0, #1
 800d390:	e7a5      	b.n	800d2de <_vfiprintf_r+0x11a>
 800d392:	2300      	movs	r3, #0
 800d394:	3401      	adds	r4, #1
 800d396:	9305      	str	r3, [sp, #20]
 800d398:	4619      	mov	r1, r3
 800d39a:	f04f 0c0a 	mov.w	ip, #10
 800d39e:	4620      	mov	r0, r4
 800d3a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3a4:	3a30      	subs	r2, #48	; 0x30
 800d3a6:	2a09      	cmp	r2, #9
 800d3a8:	d903      	bls.n	800d3b2 <_vfiprintf_r+0x1ee>
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d0c5      	beq.n	800d33a <_vfiprintf_r+0x176>
 800d3ae:	9105      	str	r1, [sp, #20]
 800d3b0:	e7c3      	b.n	800d33a <_vfiprintf_r+0x176>
 800d3b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3b6:	4604      	mov	r4, r0
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	e7f0      	b.n	800d39e <_vfiprintf_r+0x1da>
 800d3bc:	ab03      	add	r3, sp, #12
 800d3be:	9300      	str	r3, [sp, #0]
 800d3c0:	462a      	mov	r2, r5
 800d3c2:	4b16      	ldr	r3, [pc, #88]	; (800d41c <_vfiprintf_r+0x258>)
 800d3c4:	a904      	add	r1, sp, #16
 800d3c6:	4630      	mov	r0, r6
 800d3c8:	f7fd fdd6 	bl	800af78 <_printf_float>
 800d3cc:	4607      	mov	r7, r0
 800d3ce:	1c78      	adds	r0, r7, #1
 800d3d0:	d1d6      	bne.n	800d380 <_vfiprintf_r+0x1bc>
 800d3d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3d4:	07d9      	lsls	r1, r3, #31
 800d3d6:	d405      	bmi.n	800d3e4 <_vfiprintf_r+0x220>
 800d3d8:	89ab      	ldrh	r3, [r5, #12]
 800d3da:	059a      	lsls	r2, r3, #22
 800d3dc:	d402      	bmi.n	800d3e4 <_vfiprintf_r+0x220>
 800d3de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3e0:	f000 faaf 	bl	800d942 <__retarget_lock_release_recursive>
 800d3e4:	89ab      	ldrh	r3, [r5, #12]
 800d3e6:	065b      	lsls	r3, r3, #25
 800d3e8:	f53f af12 	bmi.w	800d210 <_vfiprintf_r+0x4c>
 800d3ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3ee:	e711      	b.n	800d214 <_vfiprintf_r+0x50>
 800d3f0:	ab03      	add	r3, sp, #12
 800d3f2:	9300      	str	r3, [sp, #0]
 800d3f4:	462a      	mov	r2, r5
 800d3f6:	4b09      	ldr	r3, [pc, #36]	; (800d41c <_vfiprintf_r+0x258>)
 800d3f8:	a904      	add	r1, sp, #16
 800d3fa:	4630      	mov	r0, r6
 800d3fc:	f7fe f860 	bl	800b4c0 <_printf_i>
 800d400:	e7e4      	b.n	800d3cc <_vfiprintf_r+0x208>
 800d402:	bf00      	nop
 800d404:	0800e234 	.word	0x0800e234
 800d408:	0800e254 	.word	0x0800e254
 800d40c:	0800e214 	.word	0x0800e214
 800d410:	0800e0bc 	.word	0x0800e0bc
 800d414:	0800e0c6 	.word	0x0800e0c6
 800d418:	0800af79 	.word	0x0800af79
 800d41c:	0800d1a1 	.word	0x0800d1a1
 800d420:	0800e0c2 	.word	0x0800e0c2

0800d424 <__swbuf_r>:
 800d424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d426:	460e      	mov	r6, r1
 800d428:	4614      	mov	r4, r2
 800d42a:	4605      	mov	r5, r0
 800d42c:	b118      	cbz	r0, 800d436 <__swbuf_r+0x12>
 800d42e:	6983      	ldr	r3, [r0, #24]
 800d430:	b90b      	cbnz	r3, 800d436 <__swbuf_r+0x12>
 800d432:	f000 f9e7 	bl	800d804 <__sinit>
 800d436:	4b21      	ldr	r3, [pc, #132]	; (800d4bc <__swbuf_r+0x98>)
 800d438:	429c      	cmp	r4, r3
 800d43a:	d12b      	bne.n	800d494 <__swbuf_r+0x70>
 800d43c:	686c      	ldr	r4, [r5, #4]
 800d43e:	69a3      	ldr	r3, [r4, #24]
 800d440:	60a3      	str	r3, [r4, #8]
 800d442:	89a3      	ldrh	r3, [r4, #12]
 800d444:	071a      	lsls	r2, r3, #28
 800d446:	d52f      	bpl.n	800d4a8 <__swbuf_r+0x84>
 800d448:	6923      	ldr	r3, [r4, #16]
 800d44a:	b36b      	cbz	r3, 800d4a8 <__swbuf_r+0x84>
 800d44c:	6923      	ldr	r3, [r4, #16]
 800d44e:	6820      	ldr	r0, [r4, #0]
 800d450:	1ac0      	subs	r0, r0, r3
 800d452:	6963      	ldr	r3, [r4, #20]
 800d454:	b2f6      	uxtb	r6, r6
 800d456:	4283      	cmp	r3, r0
 800d458:	4637      	mov	r7, r6
 800d45a:	dc04      	bgt.n	800d466 <__swbuf_r+0x42>
 800d45c:	4621      	mov	r1, r4
 800d45e:	4628      	mov	r0, r5
 800d460:	f000 f93c 	bl	800d6dc <_fflush_r>
 800d464:	bb30      	cbnz	r0, 800d4b4 <__swbuf_r+0x90>
 800d466:	68a3      	ldr	r3, [r4, #8]
 800d468:	3b01      	subs	r3, #1
 800d46a:	60a3      	str	r3, [r4, #8]
 800d46c:	6823      	ldr	r3, [r4, #0]
 800d46e:	1c5a      	adds	r2, r3, #1
 800d470:	6022      	str	r2, [r4, #0]
 800d472:	701e      	strb	r6, [r3, #0]
 800d474:	6963      	ldr	r3, [r4, #20]
 800d476:	3001      	adds	r0, #1
 800d478:	4283      	cmp	r3, r0
 800d47a:	d004      	beq.n	800d486 <__swbuf_r+0x62>
 800d47c:	89a3      	ldrh	r3, [r4, #12]
 800d47e:	07db      	lsls	r3, r3, #31
 800d480:	d506      	bpl.n	800d490 <__swbuf_r+0x6c>
 800d482:	2e0a      	cmp	r6, #10
 800d484:	d104      	bne.n	800d490 <__swbuf_r+0x6c>
 800d486:	4621      	mov	r1, r4
 800d488:	4628      	mov	r0, r5
 800d48a:	f000 f927 	bl	800d6dc <_fflush_r>
 800d48e:	b988      	cbnz	r0, 800d4b4 <__swbuf_r+0x90>
 800d490:	4638      	mov	r0, r7
 800d492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d494:	4b0a      	ldr	r3, [pc, #40]	; (800d4c0 <__swbuf_r+0x9c>)
 800d496:	429c      	cmp	r4, r3
 800d498:	d101      	bne.n	800d49e <__swbuf_r+0x7a>
 800d49a:	68ac      	ldr	r4, [r5, #8]
 800d49c:	e7cf      	b.n	800d43e <__swbuf_r+0x1a>
 800d49e:	4b09      	ldr	r3, [pc, #36]	; (800d4c4 <__swbuf_r+0xa0>)
 800d4a0:	429c      	cmp	r4, r3
 800d4a2:	bf08      	it	eq
 800d4a4:	68ec      	ldreq	r4, [r5, #12]
 800d4a6:	e7ca      	b.n	800d43e <__swbuf_r+0x1a>
 800d4a8:	4621      	mov	r1, r4
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	f000 f81a 	bl	800d4e4 <__swsetup_r>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d0cb      	beq.n	800d44c <__swbuf_r+0x28>
 800d4b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d4b8:	e7ea      	b.n	800d490 <__swbuf_r+0x6c>
 800d4ba:	bf00      	nop
 800d4bc:	0800e234 	.word	0x0800e234
 800d4c0:	0800e254 	.word	0x0800e254
 800d4c4:	0800e214 	.word	0x0800e214

0800d4c8 <__ascii_wctomb>:
 800d4c8:	b149      	cbz	r1, 800d4de <__ascii_wctomb+0x16>
 800d4ca:	2aff      	cmp	r2, #255	; 0xff
 800d4cc:	bf85      	ittet	hi
 800d4ce:	238a      	movhi	r3, #138	; 0x8a
 800d4d0:	6003      	strhi	r3, [r0, #0]
 800d4d2:	700a      	strbls	r2, [r1, #0]
 800d4d4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d4d8:	bf98      	it	ls
 800d4da:	2001      	movls	r0, #1
 800d4dc:	4770      	bx	lr
 800d4de:	4608      	mov	r0, r1
 800d4e0:	4770      	bx	lr
	...

0800d4e4 <__swsetup_r>:
 800d4e4:	4b32      	ldr	r3, [pc, #200]	; (800d5b0 <__swsetup_r+0xcc>)
 800d4e6:	b570      	push	{r4, r5, r6, lr}
 800d4e8:	681d      	ldr	r5, [r3, #0]
 800d4ea:	4606      	mov	r6, r0
 800d4ec:	460c      	mov	r4, r1
 800d4ee:	b125      	cbz	r5, 800d4fa <__swsetup_r+0x16>
 800d4f0:	69ab      	ldr	r3, [r5, #24]
 800d4f2:	b913      	cbnz	r3, 800d4fa <__swsetup_r+0x16>
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f000 f985 	bl	800d804 <__sinit>
 800d4fa:	4b2e      	ldr	r3, [pc, #184]	; (800d5b4 <__swsetup_r+0xd0>)
 800d4fc:	429c      	cmp	r4, r3
 800d4fe:	d10f      	bne.n	800d520 <__swsetup_r+0x3c>
 800d500:	686c      	ldr	r4, [r5, #4]
 800d502:	89a3      	ldrh	r3, [r4, #12]
 800d504:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d508:	0719      	lsls	r1, r3, #28
 800d50a:	d42c      	bmi.n	800d566 <__swsetup_r+0x82>
 800d50c:	06dd      	lsls	r5, r3, #27
 800d50e:	d411      	bmi.n	800d534 <__swsetup_r+0x50>
 800d510:	2309      	movs	r3, #9
 800d512:	6033      	str	r3, [r6, #0]
 800d514:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d518:	81a3      	strh	r3, [r4, #12]
 800d51a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d51e:	e03e      	b.n	800d59e <__swsetup_r+0xba>
 800d520:	4b25      	ldr	r3, [pc, #148]	; (800d5b8 <__swsetup_r+0xd4>)
 800d522:	429c      	cmp	r4, r3
 800d524:	d101      	bne.n	800d52a <__swsetup_r+0x46>
 800d526:	68ac      	ldr	r4, [r5, #8]
 800d528:	e7eb      	b.n	800d502 <__swsetup_r+0x1e>
 800d52a:	4b24      	ldr	r3, [pc, #144]	; (800d5bc <__swsetup_r+0xd8>)
 800d52c:	429c      	cmp	r4, r3
 800d52e:	bf08      	it	eq
 800d530:	68ec      	ldreq	r4, [r5, #12]
 800d532:	e7e6      	b.n	800d502 <__swsetup_r+0x1e>
 800d534:	0758      	lsls	r0, r3, #29
 800d536:	d512      	bpl.n	800d55e <__swsetup_r+0x7a>
 800d538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d53a:	b141      	cbz	r1, 800d54e <__swsetup_r+0x6a>
 800d53c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d540:	4299      	cmp	r1, r3
 800d542:	d002      	beq.n	800d54a <__swsetup_r+0x66>
 800d544:	4630      	mov	r0, r6
 800d546:	f7ff fb31 	bl	800cbac <_free_r>
 800d54a:	2300      	movs	r3, #0
 800d54c:	6363      	str	r3, [r4, #52]	; 0x34
 800d54e:	89a3      	ldrh	r3, [r4, #12]
 800d550:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d554:	81a3      	strh	r3, [r4, #12]
 800d556:	2300      	movs	r3, #0
 800d558:	6063      	str	r3, [r4, #4]
 800d55a:	6923      	ldr	r3, [r4, #16]
 800d55c:	6023      	str	r3, [r4, #0]
 800d55e:	89a3      	ldrh	r3, [r4, #12]
 800d560:	f043 0308 	orr.w	r3, r3, #8
 800d564:	81a3      	strh	r3, [r4, #12]
 800d566:	6923      	ldr	r3, [r4, #16]
 800d568:	b94b      	cbnz	r3, 800d57e <__swsetup_r+0x9a>
 800d56a:	89a3      	ldrh	r3, [r4, #12]
 800d56c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d574:	d003      	beq.n	800d57e <__swsetup_r+0x9a>
 800d576:	4621      	mov	r1, r4
 800d578:	4630      	mov	r0, r6
 800d57a:	f000 fa09 	bl	800d990 <__smakebuf_r>
 800d57e:	89a0      	ldrh	r0, [r4, #12]
 800d580:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d584:	f010 0301 	ands.w	r3, r0, #1
 800d588:	d00a      	beq.n	800d5a0 <__swsetup_r+0xbc>
 800d58a:	2300      	movs	r3, #0
 800d58c:	60a3      	str	r3, [r4, #8]
 800d58e:	6963      	ldr	r3, [r4, #20]
 800d590:	425b      	negs	r3, r3
 800d592:	61a3      	str	r3, [r4, #24]
 800d594:	6923      	ldr	r3, [r4, #16]
 800d596:	b943      	cbnz	r3, 800d5aa <__swsetup_r+0xc6>
 800d598:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d59c:	d1ba      	bne.n	800d514 <__swsetup_r+0x30>
 800d59e:	bd70      	pop	{r4, r5, r6, pc}
 800d5a0:	0781      	lsls	r1, r0, #30
 800d5a2:	bf58      	it	pl
 800d5a4:	6963      	ldrpl	r3, [r4, #20]
 800d5a6:	60a3      	str	r3, [r4, #8]
 800d5a8:	e7f4      	b.n	800d594 <__swsetup_r+0xb0>
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	e7f7      	b.n	800d59e <__swsetup_r+0xba>
 800d5ae:	bf00      	nop
 800d5b0:	2000000c 	.word	0x2000000c
 800d5b4:	0800e234 	.word	0x0800e234
 800d5b8:	0800e254 	.word	0x0800e254
 800d5bc:	0800e214 	.word	0x0800e214

0800d5c0 <abort>:
 800d5c0:	b508      	push	{r3, lr}
 800d5c2:	2006      	movs	r0, #6
 800d5c4:	f000 fa54 	bl	800da70 <raise>
 800d5c8:	2001      	movs	r0, #1
 800d5ca:	f7f6 f84d 	bl	8003668 <_exit>
	...

0800d5d0 <__sflush_r>:
 800d5d0:	898a      	ldrh	r2, [r1, #12]
 800d5d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	0710      	lsls	r0, r2, #28
 800d5da:	460c      	mov	r4, r1
 800d5dc:	d458      	bmi.n	800d690 <__sflush_r+0xc0>
 800d5de:	684b      	ldr	r3, [r1, #4]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	dc05      	bgt.n	800d5f0 <__sflush_r+0x20>
 800d5e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	dc02      	bgt.n	800d5f0 <__sflush_r+0x20>
 800d5ea:	2000      	movs	r0, #0
 800d5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5f2:	2e00      	cmp	r6, #0
 800d5f4:	d0f9      	beq.n	800d5ea <__sflush_r+0x1a>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5fc:	682f      	ldr	r7, [r5, #0]
 800d5fe:	602b      	str	r3, [r5, #0]
 800d600:	d032      	beq.n	800d668 <__sflush_r+0x98>
 800d602:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d604:	89a3      	ldrh	r3, [r4, #12]
 800d606:	075a      	lsls	r2, r3, #29
 800d608:	d505      	bpl.n	800d616 <__sflush_r+0x46>
 800d60a:	6863      	ldr	r3, [r4, #4]
 800d60c:	1ac0      	subs	r0, r0, r3
 800d60e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d610:	b10b      	cbz	r3, 800d616 <__sflush_r+0x46>
 800d612:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d614:	1ac0      	subs	r0, r0, r3
 800d616:	2300      	movs	r3, #0
 800d618:	4602      	mov	r2, r0
 800d61a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d61c:	6a21      	ldr	r1, [r4, #32]
 800d61e:	4628      	mov	r0, r5
 800d620:	47b0      	blx	r6
 800d622:	1c43      	adds	r3, r0, #1
 800d624:	89a3      	ldrh	r3, [r4, #12]
 800d626:	d106      	bne.n	800d636 <__sflush_r+0x66>
 800d628:	6829      	ldr	r1, [r5, #0]
 800d62a:	291d      	cmp	r1, #29
 800d62c:	d82c      	bhi.n	800d688 <__sflush_r+0xb8>
 800d62e:	4a2a      	ldr	r2, [pc, #168]	; (800d6d8 <__sflush_r+0x108>)
 800d630:	40ca      	lsrs	r2, r1
 800d632:	07d6      	lsls	r6, r2, #31
 800d634:	d528      	bpl.n	800d688 <__sflush_r+0xb8>
 800d636:	2200      	movs	r2, #0
 800d638:	6062      	str	r2, [r4, #4]
 800d63a:	04d9      	lsls	r1, r3, #19
 800d63c:	6922      	ldr	r2, [r4, #16]
 800d63e:	6022      	str	r2, [r4, #0]
 800d640:	d504      	bpl.n	800d64c <__sflush_r+0x7c>
 800d642:	1c42      	adds	r2, r0, #1
 800d644:	d101      	bne.n	800d64a <__sflush_r+0x7a>
 800d646:	682b      	ldr	r3, [r5, #0]
 800d648:	b903      	cbnz	r3, 800d64c <__sflush_r+0x7c>
 800d64a:	6560      	str	r0, [r4, #84]	; 0x54
 800d64c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d64e:	602f      	str	r7, [r5, #0]
 800d650:	2900      	cmp	r1, #0
 800d652:	d0ca      	beq.n	800d5ea <__sflush_r+0x1a>
 800d654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d658:	4299      	cmp	r1, r3
 800d65a:	d002      	beq.n	800d662 <__sflush_r+0x92>
 800d65c:	4628      	mov	r0, r5
 800d65e:	f7ff faa5 	bl	800cbac <_free_r>
 800d662:	2000      	movs	r0, #0
 800d664:	6360      	str	r0, [r4, #52]	; 0x34
 800d666:	e7c1      	b.n	800d5ec <__sflush_r+0x1c>
 800d668:	6a21      	ldr	r1, [r4, #32]
 800d66a:	2301      	movs	r3, #1
 800d66c:	4628      	mov	r0, r5
 800d66e:	47b0      	blx	r6
 800d670:	1c41      	adds	r1, r0, #1
 800d672:	d1c7      	bne.n	800d604 <__sflush_r+0x34>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d0c4      	beq.n	800d604 <__sflush_r+0x34>
 800d67a:	2b1d      	cmp	r3, #29
 800d67c:	d001      	beq.n	800d682 <__sflush_r+0xb2>
 800d67e:	2b16      	cmp	r3, #22
 800d680:	d101      	bne.n	800d686 <__sflush_r+0xb6>
 800d682:	602f      	str	r7, [r5, #0]
 800d684:	e7b1      	b.n	800d5ea <__sflush_r+0x1a>
 800d686:	89a3      	ldrh	r3, [r4, #12]
 800d688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d68c:	81a3      	strh	r3, [r4, #12]
 800d68e:	e7ad      	b.n	800d5ec <__sflush_r+0x1c>
 800d690:	690f      	ldr	r7, [r1, #16]
 800d692:	2f00      	cmp	r7, #0
 800d694:	d0a9      	beq.n	800d5ea <__sflush_r+0x1a>
 800d696:	0793      	lsls	r3, r2, #30
 800d698:	680e      	ldr	r6, [r1, #0]
 800d69a:	bf08      	it	eq
 800d69c:	694b      	ldreq	r3, [r1, #20]
 800d69e:	600f      	str	r7, [r1, #0]
 800d6a0:	bf18      	it	ne
 800d6a2:	2300      	movne	r3, #0
 800d6a4:	eba6 0807 	sub.w	r8, r6, r7
 800d6a8:	608b      	str	r3, [r1, #8]
 800d6aa:	f1b8 0f00 	cmp.w	r8, #0
 800d6ae:	dd9c      	ble.n	800d5ea <__sflush_r+0x1a>
 800d6b0:	6a21      	ldr	r1, [r4, #32]
 800d6b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d6b4:	4643      	mov	r3, r8
 800d6b6:	463a      	mov	r2, r7
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	47b0      	blx	r6
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	dc06      	bgt.n	800d6ce <__sflush_r+0xfe>
 800d6c0:	89a3      	ldrh	r3, [r4, #12]
 800d6c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6c6:	81a3      	strh	r3, [r4, #12]
 800d6c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6cc:	e78e      	b.n	800d5ec <__sflush_r+0x1c>
 800d6ce:	4407      	add	r7, r0
 800d6d0:	eba8 0800 	sub.w	r8, r8, r0
 800d6d4:	e7e9      	b.n	800d6aa <__sflush_r+0xda>
 800d6d6:	bf00      	nop
 800d6d8:	20400001 	.word	0x20400001

0800d6dc <_fflush_r>:
 800d6dc:	b538      	push	{r3, r4, r5, lr}
 800d6de:	690b      	ldr	r3, [r1, #16]
 800d6e0:	4605      	mov	r5, r0
 800d6e2:	460c      	mov	r4, r1
 800d6e4:	b913      	cbnz	r3, 800d6ec <_fflush_r+0x10>
 800d6e6:	2500      	movs	r5, #0
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	bd38      	pop	{r3, r4, r5, pc}
 800d6ec:	b118      	cbz	r0, 800d6f6 <_fflush_r+0x1a>
 800d6ee:	6983      	ldr	r3, [r0, #24]
 800d6f0:	b90b      	cbnz	r3, 800d6f6 <_fflush_r+0x1a>
 800d6f2:	f000 f887 	bl	800d804 <__sinit>
 800d6f6:	4b14      	ldr	r3, [pc, #80]	; (800d748 <_fflush_r+0x6c>)
 800d6f8:	429c      	cmp	r4, r3
 800d6fa:	d11b      	bne.n	800d734 <_fflush_r+0x58>
 800d6fc:	686c      	ldr	r4, [r5, #4]
 800d6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d0ef      	beq.n	800d6e6 <_fflush_r+0xa>
 800d706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d708:	07d0      	lsls	r0, r2, #31
 800d70a:	d404      	bmi.n	800d716 <_fflush_r+0x3a>
 800d70c:	0599      	lsls	r1, r3, #22
 800d70e:	d402      	bmi.n	800d716 <_fflush_r+0x3a>
 800d710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d712:	f000 f915 	bl	800d940 <__retarget_lock_acquire_recursive>
 800d716:	4628      	mov	r0, r5
 800d718:	4621      	mov	r1, r4
 800d71a:	f7ff ff59 	bl	800d5d0 <__sflush_r>
 800d71e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d720:	07da      	lsls	r2, r3, #31
 800d722:	4605      	mov	r5, r0
 800d724:	d4e0      	bmi.n	800d6e8 <_fflush_r+0xc>
 800d726:	89a3      	ldrh	r3, [r4, #12]
 800d728:	059b      	lsls	r3, r3, #22
 800d72a:	d4dd      	bmi.n	800d6e8 <_fflush_r+0xc>
 800d72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d72e:	f000 f908 	bl	800d942 <__retarget_lock_release_recursive>
 800d732:	e7d9      	b.n	800d6e8 <_fflush_r+0xc>
 800d734:	4b05      	ldr	r3, [pc, #20]	; (800d74c <_fflush_r+0x70>)
 800d736:	429c      	cmp	r4, r3
 800d738:	d101      	bne.n	800d73e <_fflush_r+0x62>
 800d73a:	68ac      	ldr	r4, [r5, #8]
 800d73c:	e7df      	b.n	800d6fe <_fflush_r+0x22>
 800d73e:	4b04      	ldr	r3, [pc, #16]	; (800d750 <_fflush_r+0x74>)
 800d740:	429c      	cmp	r4, r3
 800d742:	bf08      	it	eq
 800d744:	68ec      	ldreq	r4, [r5, #12]
 800d746:	e7da      	b.n	800d6fe <_fflush_r+0x22>
 800d748:	0800e234 	.word	0x0800e234
 800d74c:	0800e254 	.word	0x0800e254
 800d750:	0800e214 	.word	0x0800e214

0800d754 <std>:
 800d754:	2300      	movs	r3, #0
 800d756:	b510      	push	{r4, lr}
 800d758:	4604      	mov	r4, r0
 800d75a:	e9c0 3300 	strd	r3, r3, [r0]
 800d75e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d762:	6083      	str	r3, [r0, #8]
 800d764:	8181      	strh	r1, [r0, #12]
 800d766:	6643      	str	r3, [r0, #100]	; 0x64
 800d768:	81c2      	strh	r2, [r0, #14]
 800d76a:	6183      	str	r3, [r0, #24]
 800d76c:	4619      	mov	r1, r3
 800d76e:	2208      	movs	r2, #8
 800d770:	305c      	adds	r0, #92	; 0x5c
 800d772:	f7fd fb59 	bl	800ae28 <memset>
 800d776:	4b05      	ldr	r3, [pc, #20]	; (800d78c <std+0x38>)
 800d778:	6263      	str	r3, [r4, #36]	; 0x24
 800d77a:	4b05      	ldr	r3, [pc, #20]	; (800d790 <std+0x3c>)
 800d77c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d77e:	4b05      	ldr	r3, [pc, #20]	; (800d794 <std+0x40>)
 800d780:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d782:	4b05      	ldr	r3, [pc, #20]	; (800d798 <std+0x44>)
 800d784:	6224      	str	r4, [r4, #32]
 800d786:	6323      	str	r3, [r4, #48]	; 0x30
 800d788:	bd10      	pop	{r4, pc}
 800d78a:	bf00      	nop
 800d78c:	0800daa9 	.word	0x0800daa9
 800d790:	0800dacb 	.word	0x0800dacb
 800d794:	0800db03 	.word	0x0800db03
 800d798:	0800db27 	.word	0x0800db27

0800d79c <_cleanup_r>:
 800d79c:	4901      	ldr	r1, [pc, #4]	; (800d7a4 <_cleanup_r+0x8>)
 800d79e:	f000 b8af 	b.w	800d900 <_fwalk_reent>
 800d7a2:	bf00      	nop
 800d7a4:	0800d6dd 	.word	0x0800d6dd

0800d7a8 <__sfmoreglue>:
 800d7a8:	b570      	push	{r4, r5, r6, lr}
 800d7aa:	2268      	movs	r2, #104	; 0x68
 800d7ac:	1e4d      	subs	r5, r1, #1
 800d7ae:	4355      	muls	r5, r2
 800d7b0:	460e      	mov	r6, r1
 800d7b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7b6:	f7ff fa65 	bl	800cc84 <_malloc_r>
 800d7ba:	4604      	mov	r4, r0
 800d7bc:	b140      	cbz	r0, 800d7d0 <__sfmoreglue+0x28>
 800d7be:	2100      	movs	r1, #0
 800d7c0:	e9c0 1600 	strd	r1, r6, [r0]
 800d7c4:	300c      	adds	r0, #12
 800d7c6:	60a0      	str	r0, [r4, #8]
 800d7c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7cc:	f7fd fb2c 	bl	800ae28 <memset>
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	bd70      	pop	{r4, r5, r6, pc}

0800d7d4 <__sfp_lock_acquire>:
 800d7d4:	4801      	ldr	r0, [pc, #4]	; (800d7dc <__sfp_lock_acquire+0x8>)
 800d7d6:	f000 b8b3 	b.w	800d940 <__retarget_lock_acquire_recursive>
 800d7da:	bf00      	nop
 800d7dc:	20005b11 	.word	0x20005b11

0800d7e0 <__sfp_lock_release>:
 800d7e0:	4801      	ldr	r0, [pc, #4]	; (800d7e8 <__sfp_lock_release+0x8>)
 800d7e2:	f000 b8ae 	b.w	800d942 <__retarget_lock_release_recursive>
 800d7e6:	bf00      	nop
 800d7e8:	20005b11 	.word	0x20005b11

0800d7ec <__sinit_lock_acquire>:
 800d7ec:	4801      	ldr	r0, [pc, #4]	; (800d7f4 <__sinit_lock_acquire+0x8>)
 800d7ee:	f000 b8a7 	b.w	800d940 <__retarget_lock_acquire_recursive>
 800d7f2:	bf00      	nop
 800d7f4:	20005b12 	.word	0x20005b12

0800d7f8 <__sinit_lock_release>:
 800d7f8:	4801      	ldr	r0, [pc, #4]	; (800d800 <__sinit_lock_release+0x8>)
 800d7fa:	f000 b8a2 	b.w	800d942 <__retarget_lock_release_recursive>
 800d7fe:	bf00      	nop
 800d800:	20005b12 	.word	0x20005b12

0800d804 <__sinit>:
 800d804:	b510      	push	{r4, lr}
 800d806:	4604      	mov	r4, r0
 800d808:	f7ff fff0 	bl	800d7ec <__sinit_lock_acquire>
 800d80c:	69a3      	ldr	r3, [r4, #24]
 800d80e:	b11b      	cbz	r3, 800d818 <__sinit+0x14>
 800d810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d814:	f7ff bff0 	b.w	800d7f8 <__sinit_lock_release>
 800d818:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d81c:	6523      	str	r3, [r4, #80]	; 0x50
 800d81e:	4b13      	ldr	r3, [pc, #76]	; (800d86c <__sinit+0x68>)
 800d820:	4a13      	ldr	r2, [pc, #76]	; (800d870 <__sinit+0x6c>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	62a2      	str	r2, [r4, #40]	; 0x28
 800d826:	42a3      	cmp	r3, r4
 800d828:	bf04      	itt	eq
 800d82a:	2301      	moveq	r3, #1
 800d82c:	61a3      	streq	r3, [r4, #24]
 800d82e:	4620      	mov	r0, r4
 800d830:	f000 f820 	bl	800d874 <__sfp>
 800d834:	6060      	str	r0, [r4, #4]
 800d836:	4620      	mov	r0, r4
 800d838:	f000 f81c 	bl	800d874 <__sfp>
 800d83c:	60a0      	str	r0, [r4, #8]
 800d83e:	4620      	mov	r0, r4
 800d840:	f000 f818 	bl	800d874 <__sfp>
 800d844:	2200      	movs	r2, #0
 800d846:	60e0      	str	r0, [r4, #12]
 800d848:	2104      	movs	r1, #4
 800d84a:	6860      	ldr	r0, [r4, #4]
 800d84c:	f7ff ff82 	bl	800d754 <std>
 800d850:	68a0      	ldr	r0, [r4, #8]
 800d852:	2201      	movs	r2, #1
 800d854:	2109      	movs	r1, #9
 800d856:	f7ff ff7d 	bl	800d754 <std>
 800d85a:	68e0      	ldr	r0, [r4, #12]
 800d85c:	2202      	movs	r2, #2
 800d85e:	2112      	movs	r1, #18
 800d860:	f7ff ff78 	bl	800d754 <std>
 800d864:	2301      	movs	r3, #1
 800d866:	61a3      	str	r3, [r4, #24]
 800d868:	e7d2      	b.n	800d810 <__sinit+0xc>
 800d86a:	bf00      	nop
 800d86c:	0800de9c 	.word	0x0800de9c
 800d870:	0800d79d 	.word	0x0800d79d

0800d874 <__sfp>:
 800d874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d876:	4607      	mov	r7, r0
 800d878:	f7ff ffac 	bl	800d7d4 <__sfp_lock_acquire>
 800d87c:	4b1e      	ldr	r3, [pc, #120]	; (800d8f8 <__sfp+0x84>)
 800d87e:	681e      	ldr	r6, [r3, #0]
 800d880:	69b3      	ldr	r3, [r6, #24]
 800d882:	b913      	cbnz	r3, 800d88a <__sfp+0x16>
 800d884:	4630      	mov	r0, r6
 800d886:	f7ff ffbd 	bl	800d804 <__sinit>
 800d88a:	3648      	adds	r6, #72	; 0x48
 800d88c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d890:	3b01      	subs	r3, #1
 800d892:	d503      	bpl.n	800d89c <__sfp+0x28>
 800d894:	6833      	ldr	r3, [r6, #0]
 800d896:	b30b      	cbz	r3, 800d8dc <__sfp+0x68>
 800d898:	6836      	ldr	r6, [r6, #0]
 800d89a:	e7f7      	b.n	800d88c <__sfp+0x18>
 800d89c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d8a0:	b9d5      	cbnz	r5, 800d8d8 <__sfp+0x64>
 800d8a2:	4b16      	ldr	r3, [pc, #88]	; (800d8fc <__sfp+0x88>)
 800d8a4:	60e3      	str	r3, [r4, #12]
 800d8a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8aa:	6665      	str	r5, [r4, #100]	; 0x64
 800d8ac:	f000 f847 	bl	800d93e <__retarget_lock_init_recursive>
 800d8b0:	f7ff ff96 	bl	800d7e0 <__sfp_lock_release>
 800d8b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d8b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d8bc:	6025      	str	r5, [r4, #0]
 800d8be:	61a5      	str	r5, [r4, #24]
 800d8c0:	2208      	movs	r2, #8
 800d8c2:	4629      	mov	r1, r5
 800d8c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8c8:	f7fd faae 	bl	800ae28 <memset>
 800d8cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8d8:	3468      	adds	r4, #104	; 0x68
 800d8da:	e7d9      	b.n	800d890 <__sfp+0x1c>
 800d8dc:	2104      	movs	r1, #4
 800d8de:	4638      	mov	r0, r7
 800d8e0:	f7ff ff62 	bl	800d7a8 <__sfmoreglue>
 800d8e4:	4604      	mov	r4, r0
 800d8e6:	6030      	str	r0, [r6, #0]
 800d8e8:	2800      	cmp	r0, #0
 800d8ea:	d1d5      	bne.n	800d898 <__sfp+0x24>
 800d8ec:	f7ff ff78 	bl	800d7e0 <__sfp_lock_release>
 800d8f0:	230c      	movs	r3, #12
 800d8f2:	603b      	str	r3, [r7, #0]
 800d8f4:	e7ee      	b.n	800d8d4 <__sfp+0x60>
 800d8f6:	bf00      	nop
 800d8f8:	0800de9c 	.word	0x0800de9c
 800d8fc:	ffff0001 	.word	0xffff0001

0800d900 <_fwalk_reent>:
 800d900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d904:	4606      	mov	r6, r0
 800d906:	4688      	mov	r8, r1
 800d908:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d90c:	2700      	movs	r7, #0
 800d90e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d912:	f1b9 0901 	subs.w	r9, r9, #1
 800d916:	d505      	bpl.n	800d924 <_fwalk_reent+0x24>
 800d918:	6824      	ldr	r4, [r4, #0]
 800d91a:	2c00      	cmp	r4, #0
 800d91c:	d1f7      	bne.n	800d90e <_fwalk_reent+0xe>
 800d91e:	4638      	mov	r0, r7
 800d920:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d924:	89ab      	ldrh	r3, [r5, #12]
 800d926:	2b01      	cmp	r3, #1
 800d928:	d907      	bls.n	800d93a <_fwalk_reent+0x3a>
 800d92a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d92e:	3301      	adds	r3, #1
 800d930:	d003      	beq.n	800d93a <_fwalk_reent+0x3a>
 800d932:	4629      	mov	r1, r5
 800d934:	4630      	mov	r0, r6
 800d936:	47c0      	blx	r8
 800d938:	4307      	orrs	r7, r0
 800d93a:	3568      	adds	r5, #104	; 0x68
 800d93c:	e7e9      	b.n	800d912 <_fwalk_reent+0x12>

0800d93e <__retarget_lock_init_recursive>:
 800d93e:	4770      	bx	lr

0800d940 <__retarget_lock_acquire_recursive>:
 800d940:	4770      	bx	lr

0800d942 <__retarget_lock_release_recursive>:
 800d942:	4770      	bx	lr

0800d944 <__swhatbuf_r>:
 800d944:	b570      	push	{r4, r5, r6, lr}
 800d946:	460e      	mov	r6, r1
 800d948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d94c:	2900      	cmp	r1, #0
 800d94e:	b096      	sub	sp, #88	; 0x58
 800d950:	4614      	mov	r4, r2
 800d952:	461d      	mov	r5, r3
 800d954:	da08      	bge.n	800d968 <__swhatbuf_r+0x24>
 800d956:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d95a:	2200      	movs	r2, #0
 800d95c:	602a      	str	r2, [r5, #0]
 800d95e:	061a      	lsls	r2, r3, #24
 800d960:	d410      	bmi.n	800d984 <__swhatbuf_r+0x40>
 800d962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d966:	e00e      	b.n	800d986 <__swhatbuf_r+0x42>
 800d968:	466a      	mov	r2, sp
 800d96a:	f000 f903 	bl	800db74 <_fstat_r>
 800d96e:	2800      	cmp	r0, #0
 800d970:	dbf1      	blt.n	800d956 <__swhatbuf_r+0x12>
 800d972:	9a01      	ldr	r2, [sp, #4]
 800d974:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d978:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d97c:	425a      	negs	r2, r3
 800d97e:	415a      	adcs	r2, r3
 800d980:	602a      	str	r2, [r5, #0]
 800d982:	e7ee      	b.n	800d962 <__swhatbuf_r+0x1e>
 800d984:	2340      	movs	r3, #64	; 0x40
 800d986:	2000      	movs	r0, #0
 800d988:	6023      	str	r3, [r4, #0]
 800d98a:	b016      	add	sp, #88	; 0x58
 800d98c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d990 <__smakebuf_r>:
 800d990:	898b      	ldrh	r3, [r1, #12]
 800d992:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d994:	079d      	lsls	r5, r3, #30
 800d996:	4606      	mov	r6, r0
 800d998:	460c      	mov	r4, r1
 800d99a:	d507      	bpl.n	800d9ac <__smakebuf_r+0x1c>
 800d99c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9a0:	6023      	str	r3, [r4, #0]
 800d9a2:	6123      	str	r3, [r4, #16]
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	6163      	str	r3, [r4, #20]
 800d9a8:	b002      	add	sp, #8
 800d9aa:	bd70      	pop	{r4, r5, r6, pc}
 800d9ac:	ab01      	add	r3, sp, #4
 800d9ae:	466a      	mov	r2, sp
 800d9b0:	f7ff ffc8 	bl	800d944 <__swhatbuf_r>
 800d9b4:	9900      	ldr	r1, [sp, #0]
 800d9b6:	4605      	mov	r5, r0
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	f7ff f963 	bl	800cc84 <_malloc_r>
 800d9be:	b948      	cbnz	r0, 800d9d4 <__smakebuf_r+0x44>
 800d9c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9c4:	059a      	lsls	r2, r3, #22
 800d9c6:	d4ef      	bmi.n	800d9a8 <__smakebuf_r+0x18>
 800d9c8:	f023 0303 	bic.w	r3, r3, #3
 800d9cc:	f043 0302 	orr.w	r3, r3, #2
 800d9d0:	81a3      	strh	r3, [r4, #12]
 800d9d2:	e7e3      	b.n	800d99c <__smakebuf_r+0xc>
 800d9d4:	4b0d      	ldr	r3, [pc, #52]	; (800da0c <__smakebuf_r+0x7c>)
 800d9d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9d8:	89a3      	ldrh	r3, [r4, #12]
 800d9da:	6020      	str	r0, [r4, #0]
 800d9dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9e0:	81a3      	strh	r3, [r4, #12]
 800d9e2:	9b00      	ldr	r3, [sp, #0]
 800d9e4:	6163      	str	r3, [r4, #20]
 800d9e6:	9b01      	ldr	r3, [sp, #4]
 800d9e8:	6120      	str	r0, [r4, #16]
 800d9ea:	b15b      	cbz	r3, 800da04 <__smakebuf_r+0x74>
 800d9ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	f000 f8d1 	bl	800db98 <_isatty_r>
 800d9f6:	b128      	cbz	r0, 800da04 <__smakebuf_r+0x74>
 800d9f8:	89a3      	ldrh	r3, [r4, #12]
 800d9fa:	f023 0303 	bic.w	r3, r3, #3
 800d9fe:	f043 0301 	orr.w	r3, r3, #1
 800da02:	81a3      	strh	r3, [r4, #12]
 800da04:	89a0      	ldrh	r0, [r4, #12]
 800da06:	4305      	orrs	r5, r0
 800da08:	81a5      	strh	r5, [r4, #12]
 800da0a:	e7cd      	b.n	800d9a8 <__smakebuf_r+0x18>
 800da0c:	0800d79d 	.word	0x0800d79d

0800da10 <_malloc_usable_size_r>:
 800da10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da14:	1f18      	subs	r0, r3, #4
 800da16:	2b00      	cmp	r3, #0
 800da18:	bfbc      	itt	lt
 800da1a:	580b      	ldrlt	r3, [r1, r0]
 800da1c:	18c0      	addlt	r0, r0, r3
 800da1e:	4770      	bx	lr

0800da20 <_raise_r>:
 800da20:	291f      	cmp	r1, #31
 800da22:	b538      	push	{r3, r4, r5, lr}
 800da24:	4604      	mov	r4, r0
 800da26:	460d      	mov	r5, r1
 800da28:	d904      	bls.n	800da34 <_raise_r+0x14>
 800da2a:	2316      	movs	r3, #22
 800da2c:	6003      	str	r3, [r0, #0]
 800da2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da32:	bd38      	pop	{r3, r4, r5, pc}
 800da34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da36:	b112      	cbz	r2, 800da3e <_raise_r+0x1e>
 800da38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da3c:	b94b      	cbnz	r3, 800da52 <_raise_r+0x32>
 800da3e:	4620      	mov	r0, r4
 800da40:	f000 f830 	bl	800daa4 <_getpid_r>
 800da44:	462a      	mov	r2, r5
 800da46:	4601      	mov	r1, r0
 800da48:	4620      	mov	r0, r4
 800da4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da4e:	f000 b817 	b.w	800da80 <_kill_r>
 800da52:	2b01      	cmp	r3, #1
 800da54:	d00a      	beq.n	800da6c <_raise_r+0x4c>
 800da56:	1c59      	adds	r1, r3, #1
 800da58:	d103      	bne.n	800da62 <_raise_r+0x42>
 800da5a:	2316      	movs	r3, #22
 800da5c:	6003      	str	r3, [r0, #0]
 800da5e:	2001      	movs	r0, #1
 800da60:	e7e7      	b.n	800da32 <_raise_r+0x12>
 800da62:	2400      	movs	r4, #0
 800da64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da68:	4628      	mov	r0, r5
 800da6a:	4798      	blx	r3
 800da6c:	2000      	movs	r0, #0
 800da6e:	e7e0      	b.n	800da32 <_raise_r+0x12>

0800da70 <raise>:
 800da70:	4b02      	ldr	r3, [pc, #8]	; (800da7c <raise+0xc>)
 800da72:	4601      	mov	r1, r0
 800da74:	6818      	ldr	r0, [r3, #0]
 800da76:	f7ff bfd3 	b.w	800da20 <_raise_r>
 800da7a:	bf00      	nop
 800da7c:	2000000c 	.word	0x2000000c

0800da80 <_kill_r>:
 800da80:	b538      	push	{r3, r4, r5, lr}
 800da82:	4d07      	ldr	r5, [pc, #28]	; (800daa0 <_kill_r+0x20>)
 800da84:	2300      	movs	r3, #0
 800da86:	4604      	mov	r4, r0
 800da88:	4608      	mov	r0, r1
 800da8a:	4611      	mov	r1, r2
 800da8c:	602b      	str	r3, [r5, #0]
 800da8e:	f7f5 fddb 	bl	8003648 <_kill>
 800da92:	1c43      	adds	r3, r0, #1
 800da94:	d102      	bne.n	800da9c <_kill_r+0x1c>
 800da96:	682b      	ldr	r3, [r5, #0]
 800da98:	b103      	cbz	r3, 800da9c <_kill_r+0x1c>
 800da9a:	6023      	str	r3, [r4, #0]
 800da9c:	bd38      	pop	{r3, r4, r5, pc}
 800da9e:	bf00      	nop
 800daa0:	20005b0c 	.word	0x20005b0c

0800daa4 <_getpid_r>:
 800daa4:	f7f5 bdc8 	b.w	8003638 <_getpid>

0800daa8 <__sread>:
 800daa8:	b510      	push	{r4, lr}
 800daaa:	460c      	mov	r4, r1
 800daac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dab0:	f000 f894 	bl	800dbdc <_read_r>
 800dab4:	2800      	cmp	r0, #0
 800dab6:	bfab      	itete	ge
 800dab8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800daba:	89a3      	ldrhlt	r3, [r4, #12]
 800dabc:	181b      	addge	r3, r3, r0
 800dabe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dac2:	bfac      	ite	ge
 800dac4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dac6:	81a3      	strhlt	r3, [r4, #12]
 800dac8:	bd10      	pop	{r4, pc}

0800daca <__swrite>:
 800daca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dace:	461f      	mov	r7, r3
 800dad0:	898b      	ldrh	r3, [r1, #12]
 800dad2:	05db      	lsls	r3, r3, #23
 800dad4:	4605      	mov	r5, r0
 800dad6:	460c      	mov	r4, r1
 800dad8:	4616      	mov	r6, r2
 800dada:	d505      	bpl.n	800dae8 <__swrite+0x1e>
 800dadc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dae0:	2302      	movs	r3, #2
 800dae2:	2200      	movs	r2, #0
 800dae4:	f000 f868 	bl	800dbb8 <_lseek_r>
 800dae8:	89a3      	ldrh	r3, [r4, #12]
 800daea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800daf2:	81a3      	strh	r3, [r4, #12]
 800daf4:	4632      	mov	r2, r6
 800daf6:	463b      	mov	r3, r7
 800daf8:	4628      	mov	r0, r5
 800dafa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dafe:	f000 b817 	b.w	800db30 <_write_r>

0800db02 <__sseek>:
 800db02:	b510      	push	{r4, lr}
 800db04:	460c      	mov	r4, r1
 800db06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db0a:	f000 f855 	bl	800dbb8 <_lseek_r>
 800db0e:	1c43      	adds	r3, r0, #1
 800db10:	89a3      	ldrh	r3, [r4, #12]
 800db12:	bf15      	itete	ne
 800db14:	6560      	strne	r0, [r4, #84]	; 0x54
 800db16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db1e:	81a3      	strheq	r3, [r4, #12]
 800db20:	bf18      	it	ne
 800db22:	81a3      	strhne	r3, [r4, #12]
 800db24:	bd10      	pop	{r4, pc}

0800db26 <__sclose>:
 800db26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db2a:	f000 b813 	b.w	800db54 <_close_r>
	...

0800db30 <_write_r>:
 800db30:	b538      	push	{r3, r4, r5, lr}
 800db32:	4d07      	ldr	r5, [pc, #28]	; (800db50 <_write_r+0x20>)
 800db34:	4604      	mov	r4, r0
 800db36:	4608      	mov	r0, r1
 800db38:	4611      	mov	r1, r2
 800db3a:	2200      	movs	r2, #0
 800db3c:	602a      	str	r2, [r5, #0]
 800db3e:	461a      	mov	r2, r3
 800db40:	f7f5 fdb9 	bl	80036b6 <_write>
 800db44:	1c43      	adds	r3, r0, #1
 800db46:	d102      	bne.n	800db4e <_write_r+0x1e>
 800db48:	682b      	ldr	r3, [r5, #0]
 800db4a:	b103      	cbz	r3, 800db4e <_write_r+0x1e>
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	bd38      	pop	{r3, r4, r5, pc}
 800db50:	20005b0c 	.word	0x20005b0c

0800db54 <_close_r>:
 800db54:	b538      	push	{r3, r4, r5, lr}
 800db56:	4d06      	ldr	r5, [pc, #24]	; (800db70 <_close_r+0x1c>)
 800db58:	2300      	movs	r3, #0
 800db5a:	4604      	mov	r4, r0
 800db5c:	4608      	mov	r0, r1
 800db5e:	602b      	str	r3, [r5, #0]
 800db60:	f7f5 fdc5 	bl	80036ee <_close>
 800db64:	1c43      	adds	r3, r0, #1
 800db66:	d102      	bne.n	800db6e <_close_r+0x1a>
 800db68:	682b      	ldr	r3, [r5, #0]
 800db6a:	b103      	cbz	r3, 800db6e <_close_r+0x1a>
 800db6c:	6023      	str	r3, [r4, #0]
 800db6e:	bd38      	pop	{r3, r4, r5, pc}
 800db70:	20005b0c 	.word	0x20005b0c

0800db74 <_fstat_r>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	4d07      	ldr	r5, [pc, #28]	; (800db94 <_fstat_r+0x20>)
 800db78:	2300      	movs	r3, #0
 800db7a:	4604      	mov	r4, r0
 800db7c:	4608      	mov	r0, r1
 800db7e:	4611      	mov	r1, r2
 800db80:	602b      	str	r3, [r5, #0]
 800db82:	f7f5 fdc0 	bl	8003706 <_fstat>
 800db86:	1c43      	adds	r3, r0, #1
 800db88:	d102      	bne.n	800db90 <_fstat_r+0x1c>
 800db8a:	682b      	ldr	r3, [r5, #0]
 800db8c:	b103      	cbz	r3, 800db90 <_fstat_r+0x1c>
 800db8e:	6023      	str	r3, [r4, #0]
 800db90:	bd38      	pop	{r3, r4, r5, pc}
 800db92:	bf00      	nop
 800db94:	20005b0c 	.word	0x20005b0c

0800db98 <_isatty_r>:
 800db98:	b538      	push	{r3, r4, r5, lr}
 800db9a:	4d06      	ldr	r5, [pc, #24]	; (800dbb4 <_isatty_r+0x1c>)
 800db9c:	2300      	movs	r3, #0
 800db9e:	4604      	mov	r4, r0
 800dba0:	4608      	mov	r0, r1
 800dba2:	602b      	str	r3, [r5, #0]
 800dba4:	f7f5 fdbf 	bl	8003726 <_isatty>
 800dba8:	1c43      	adds	r3, r0, #1
 800dbaa:	d102      	bne.n	800dbb2 <_isatty_r+0x1a>
 800dbac:	682b      	ldr	r3, [r5, #0]
 800dbae:	b103      	cbz	r3, 800dbb2 <_isatty_r+0x1a>
 800dbb0:	6023      	str	r3, [r4, #0]
 800dbb2:	bd38      	pop	{r3, r4, r5, pc}
 800dbb4:	20005b0c 	.word	0x20005b0c

0800dbb8 <_lseek_r>:
 800dbb8:	b538      	push	{r3, r4, r5, lr}
 800dbba:	4d07      	ldr	r5, [pc, #28]	; (800dbd8 <_lseek_r+0x20>)
 800dbbc:	4604      	mov	r4, r0
 800dbbe:	4608      	mov	r0, r1
 800dbc0:	4611      	mov	r1, r2
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	602a      	str	r2, [r5, #0]
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	f7f5 fdb8 	bl	800373c <_lseek>
 800dbcc:	1c43      	adds	r3, r0, #1
 800dbce:	d102      	bne.n	800dbd6 <_lseek_r+0x1e>
 800dbd0:	682b      	ldr	r3, [r5, #0]
 800dbd2:	b103      	cbz	r3, 800dbd6 <_lseek_r+0x1e>
 800dbd4:	6023      	str	r3, [r4, #0]
 800dbd6:	bd38      	pop	{r3, r4, r5, pc}
 800dbd8:	20005b0c 	.word	0x20005b0c

0800dbdc <_read_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4d07      	ldr	r5, [pc, #28]	; (800dbfc <_read_r+0x20>)
 800dbe0:	4604      	mov	r4, r0
 800dbe2:	4608      	mov	r0, r1
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	602a      	str	r2, [r5, #0]
 800dbea:	461a      	mov	r2, r3
 800dbec:	f7f5 fd46 	bl	800367c <_read>
 800dbf0:	1c43      	adds	r3, r0, #1
 800dbf2:	d102      	bne.n	800dbfa <_read_r+0x1e>
 800dbf4:	682b      	ldr	r3, [r5, #0]
 800dbf6:	b103      	cbz	r3, 800dbfa <_read_r+0x1e>
 800dbf8:	6023      	str	r3, [r4, #0]
 800dbfa:	bd38      	pop	{r3, r4, r5, pc}
 800dbfc:	20005b0c 	.word	0x20005b0c

0800dc00 <sqrt>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	ed2d 8b02 	vpush	{d8}
 800dc06:	ec55 4b10 	vmov	r4, r5, d0
 800dc0a:	f000 f825 	bl	800dc58 <__ieee754_sqrt>
 800dc0e:	4622      	mov	r2, r4
 800dc10:	462b      	mov	r3, r5
 800dc12:	4620      	mov	r0, r4
 800dc14:	4629      	mov	r1, r5
 800dc16:	eeb0 8a40 	vmov.f32	s16, s0
 800dc1a:	eef0 8a60 	vmov.f32	s17, s1
 800dc1e:	f7f2 ff85 	bl	8000b2c <__aeabi_dcmpun>
 800dc22:	b990      	cbnz	r0, 800dc4a <sqrt+0x4a>
 800dc24:	2200      	movs	r2, #0
 800dc26:	2300      	movs	r3, #0
 800dc28:	4620      	mov	r0, r4
 800dc2a:	4629      	mov	r1, r5
 800dc2c:	f7f2 ff56 	bl	8000adc <__aeabi_dcmplt>
 800dc30:	b158      	cbz	r0, 800dc4a <sqrt+0x4a>
 800dc32:	f7fd f8cf 	bl	800add4 <__errno>
 800dc36:	2321      	movs	r3, #33	; 0x21
 800dc38:	6003      	str	r3, [r0, #0]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	4610      	mov	r0, r2
 800dc40:	4619      	mov	r1, r3
 800dc42:	f7f2 fe03 	bl	800084c <__aeabi_ddiv>
 800dc46:	ec41 0b18 	vmov	d8, r0, r1
 800dc4a:	eeb0 0a48 	vmov.f32	s0, s16
 800dc4e:	eef0 0a68 	vmov.f32	s1, s17
 800dc52:	ecbd 8b02 	vpop	{d8}
 800dc56:	bd38      	pop	{r3, r4, r5, pc}

0800dc58 <__ieee754_sqrt>:
 800dc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc5c:	ec55 4b10 	vmov	r4, r5, d0
 800dc60:	4e55      	ldr	r6, [pc, #340]	; (800ddb8 <__ieee754_sqrt+0x160>)
 800dc62:	43ae      	bics	r6, r5
 800dc64:	ee10 0a10 	vmov	r0, s0
 800dc68:	ee10 3a10 	vmov	r3, s0
 800dc6c:	462a      	mov	r2, r5
 800dc6e:	4629      	mov	r1, r5
 800dc70:	d110      	bne.n	800dc94 <__ieee754_sqrt+0x3c>
 800dc72:	ee10 2a10 	vmov	r2, s0
 800dc76:	462b      	mov	r3, r5
 800dc78:	f7f2 fcbe 	bl	80005f8 <__aeabi_dmul>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	460b      	mov	r3, r1
 800dc80:	4620      	mov	r0, r4
 800dc82:	4629      	mov	r1, r5
 800dc84:	f7f2 fb02 	bl	800028c <__adddf3>
 800dc88:	4604      	mov	r4, r0
 800dc8a:	460d      	mov	r5, r1
 800dc8c:	ec45 4b10 	vmov	d0, r4, r5
 800dc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc94:	2d00      	cmp	r5, #0
 800dc96:	dc10      	bgt.n	800dcba <__ieee754_sqrt+0x62>
 800dc98:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dc9c:	4330      	orrs	r0, r6
 800dc9e:	d0f5      	beq.n	800dc8c <__ieee754_sqrt+0x34>
 800dca0:	b15d      	cbz	r5, 800dcba <__ieee754_sqrt+0x62>
 800dca2:	ee10 2a10 	vmov	r2, s0
 800dca6:	462b      	mov	r3, r5
 800dca8:	ee10 0a10 	vmov	r0, s0
 800dcac:	f7f2 faec 	bl	8000288 <__aeabi_dsub>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	f7f2 fdca 	bl	800084c <__aeabi_ddiv>
 800dcb8:	e7e6      	b.n	800dc88 <__ieee754_sqrt+0x30>
 800dcba:	1512      	asrs	r2, r2, #20
 800dcbc:	d074      	beq.n	800dda8 <__ieee754_sqrt+0x150>
 800dcbe:	07d4      	lsls	r4, r2, #31
 800dcc0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800dcc4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800dcc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800dccc:	bf5e      	ittt	pl
 800dcce:	0fda      	lsrpl	r2, r3, #31
 800dcd0:	005b      	lslpl	r3, r3, #1
 800dcd2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800dcd6:	2400      	movs	r4, #0
 800dcd8:	0fda      	lsrs	r2, r3, #31
 800dcda:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800dcde:	107f      	asrs	r7, r7, #1
 800dce0:	005b      	lsls	r3, r3, #1
 800dce2:	2516      	movs	r5, #22
 800dce4:	4620      	mov	r0, r4
 800dce6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dcea:	1886      	adds	r6, r0, r2
 800dcec:	428e      	cmp	r6, r1
 800dcee:	bfde      	ittt	le
 800dcf0:	1b89      	suble	r1, r1, r6
 800dcf2:	18b0      	addle	r0, r6, r2
 800dcf4:	18a4      	addle	r4, r4, r2
 800dcf6:	0049      	lsls	r1, r1, #1
 800dcf8:	3d01      	subs	r5, #1
 800dcfa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800dcfe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800dd02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dd06:	d1f0      	bne.n	800dcea <__ieee754_sqrt+0x92>
 800dd08:	462a      	mov	r2, r5
 800dd0a:	f04f 0e20 	mov.w	lr, #32
 800dd0e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dd12:	4281      	cmp	r1, r0
 800dd14:	eb06 0c05 	add.w	ip, r6, r5
 800dd18:	dc02      	bgt.n	800dd20 <__ieee754_sqrt+0xc8>
 800dd1a:	d113      	bne.n	800dd44 <__ieee754_sqrt+0xec>
 800dd1c:	459c      	cmp	ip, r3
 800dd1e:	d811      	bhi.n	800dd44 <__ieee754_sqrt+0xec>
 800dd20:	f1bc 0f00 	cmp.w	ip, #0
 800dd24:	eb0c 0506 	add.w	r5, ip, r6
 800dd28:	da43      	bge.n	800ddb2 <__ieee754_sqrt+0x15a>
 800dd2a:	2d00      	cmp	r5, #0
 800dd2c:	db41      	blt.n	800ddb2 <__ieee754_sqrt+0x15a>
 800dd2e:	f100 0801 	add.w	r8, r0, #1
 800dd32:	1a09      	subs	r1, r1, r0
 800dd34:	459c      	cmp	ip, r3
 800dd36:	bf88      	it	hi
 800dd38:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800dd3c:	eba3 030c 	sub.w	r3, r3, ip
 800dd40:	4432      	add	r2, r6
 800dd42:	4640      	mov	r0, r8
 800dd44:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800dd48:	f1be 0e01 	subs.w	lr, lr, #1
 800dd4c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800dd50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dd54:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dd58:	d1db      	bne.n	800dd12 <__ieee754_sqrt+0xba>
 800dd5a:	430b      	orrs	r3, r1
 800dd5c:	d006      	beq.n	800dd6c <__ieee754_sqrt+0x114>
 800dd5e:	1c50      	adds	r0, r2, #1
 800dd60:	bf13      	iteet	ne
 800dd62:	3201      	addne	r2, #1
 800dd64:	3401      	addeq	r4, #1
 800dd66:	4672      	moveq	r2, lr
 800dd68:	f022 0201 	bicne.w	r2, r2, #1
 800dd6c:	1063      	asrs	r3, r4, #1
 800dd6e:	0852      	lsrs	r2, r2, #1
 800dd70:	07e1      	lsls	r1, r4, #31
 800dd72:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800dd76:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800dd7a:	bf48      	it	mi
 800dd7c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800dd80:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800dd84:	4614      	mov	r4, r2
 800dd86:	e781      	b.n	800dc8c <__ieee754_sqrt+0x34>
 800dd88:	0ad9      	lsrs	r1, r3, #11
 800dd8a:	3815      	subs	r0, #21
 800dd8c:	055b      	lsls	r3, r3, #21
 800dd8e:	2900      	cmp	r1, #0
 800dd90:	d0fa      	beq.n	800dd88 <__ieee754_sqrt+0x130>
 800dd92:	02cd      	lsls	r5, r1, #11
 800dd94:	d50a      	bpl.n	800ddac <__ieee754_sqrt+0x154>
 800dd96:	f1c2 0420 	rsb	r4, r2, #32
 800dd9a:	fa23 f404 	lsr.w	r4, r3, r4
 800dd9e:	1e55      	subs	r5, r2, #1
 800dda0:	4093      	lsls	r3, r2
 800dda2:	4321      	orrs	r1, r4
 800dda4:	1b42      	subs	r2, r0, r5
 800dda6:	e78a      	b.n	800dcbe <__ieee754_sqrt+0x66>
 800dda8:	4610      	mov	r0, r2
 800ddaa:	e7f0      	b.n	800dd8e <__ieee754_sqrt+0x136>
 800ddac:	0049      	lsls	r1, r1, #1
 800ddae:	3201      	adds	r2, #1
 800ddb0:	e7ef      	b.n	800dd92 <__ieee754_sqrt+0x13a>
 800ddb2:	4680      	mov	r8, r0
 800ddb4:	e7bd      	b.n	800dd32 <__ieee754_sqrt+0xda>
 800ddb6:	bf00      	nop
 800ddb8:	7ff00000 	.word	0x7ff00000

0800ddbc <_init>:
 800ddbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddbe:	bf00      	nop
 800ddc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddc2:	bc08      	pop	{r3}
 800ddc4:	469e      	mov	lr, r3
 800ddc6:	4770      	bx	lr

0800ddc8 <_fini>:
 800ddc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddca:	bf00      	nop
 800ddcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddce:	bc08      	pop	{r3}
 800ddd0:	469e      	mov	lr, r3
 800ddd2:	4770      	bx	lr
