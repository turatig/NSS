
thermal_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  0800de98  0800de98  0001de98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e334  0800e334  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e334  0800e334  0001e334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e33c  0800e33c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e33c  0800e33c  0001e33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e340  0800e340  0001e340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800e344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00005980  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005b5c  20005b5c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001797a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e13  00000000  00000000  00037b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  0003a9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013a0  00000000  00000000  0003be60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a71  00000000  00000000  0003d200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180da  00000000  00000000  00061c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de3c7  00000000  00000000  00079d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158112  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a1c  00000000  00000000  00158164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800de7c 	.word	0x0800de7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800de7c 	.word	0x0800de7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <amg8833Init>:

#include "AMG8833.h"
#include "utils.h"
#include "stm32f4xx.h"

void amg8833Init(AMG8833 *inst,I2C_HandleTypeDef *hi2c, uint8_t ad_sel){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	4613      	mov	r3, r2
 8000f58:	71fb      	strb	r3, [r7, #7]

	inst->adri2c= ad_sel ? ( AMG8833_I2C_BASE_ADR + 1 ) << 1 :
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <amg8833Init+0x18>
 8000f60:	22d2      	movs	r2, #210	; 0xd2
 8000f62:	e000      	b.n	8000f66 <amg8833Init+0x1a>
 8000f64:	22d0      	movs	r2, #208	; 0xd0
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	801a      	strh	r2, [r3, #0]
								AMG8833_I2C_BASE_ADR << 1;
	inst->hi2c=hi2c;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	605a      	str	r2, [r3, #4]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <amg8833IsReady>:

/*
 * Test if the sensor reply on configured I2C line
 */
uint8_t amg8833IsReady(AMG8833 *inst,uint8_t max_retry){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef status=HAL_I2C_IsDeviceReady(inst->hi2c,inst->adri2c, max_retry ,10);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6858      	ldr	r0, [r3, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	8819      	ldrh	r1, [r3, #0]
 8000f90:	78fa      	ldrb	r2, [r7, #3]
 8000f92:	230a      	movs	r3, #10
 8000f94:	f005 fb50 	bl	8006638 <HAL_I2C_IsDeviceReady>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]
	return (uint8_t)(status==HAL_OK);
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	bf0c      	ite	eq
 8000fa2:	2301      	moveq	r3, #1
 8000fa4:	2300      	movne	r3, #0
 8000fa6:	b2db      	uxtb	r3, r3
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <I2C_Read>:
}

/*
 * Utils to read/write on I2C line with automatic retry in case of failure
 */
HAL_StatusTypeDef I2C_Read(AMG8833 *inst, uint8_t reg,uint8_t *data,uint16_t dim,uint16_t max_retry){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	72fb      	strb	r3, [r7, #11]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	813b      	strh	r3, [r7, #8]

	uint8_t try=0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;

	do{
		try++;
 8000fc8:	7dfb      	ldrb	r3, [r7, #23]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	75fb      	strb	r3, [r7, #23]
		status=HAL_I2C_Mem_Read( inst->hi2c,(uint16_t)inst->adri2c,reg,
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6858      	ldr	r0, [r3, #4]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	8819      	ldrh	r1, [r3, #0]
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	893b      	ldrh	r3, [r7, #8]
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f004 ff6b 	bl	8005ec4 <HAL_I2C_Mem_Read>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75bb      	strb	r3, [r7, #22]
				1,data,dim,2000 );
	}while( status!=HAL_OK && try <= max_retry );
 8000ff2:	7dbb      	ldrb	r3, [r7, #22]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <I2C_Read+0x52>
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	8c3a      	ldrh	r2, [r7, #32]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d2e2      	bcs.n	8000fc8 <I2C_Read+0x18>

	return status;
 8001002:	7dbb      	ldrb	r3, [r7, #22]

}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <I2C_Write>:

HAL_StatusTypeDef I2C_Write(AMG8833 *inst, uint8_t reg,uint8_t *data,uint16_t dim,uint16_t max_retry){
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af04      	add	r7, sp, #16
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	72fb      	strb	r3, [r7, #11]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]

	uint8_t try=0;
 8001020:	2300      	movs	r3, #0
 8001022:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;

	do{
		try++;
 8001024:	7dfb      	ldrb	r3, [r7, #23]
 8001026:	3301      	adds	r3, #1
 8001028:	75fb      	strb	r3, [r7, #23]
		status=HAL_I2C_Mem_Write( inst->hi2c,(uint16_t)inst->adri2c,reg,
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6858      	ldr	r0, [r3, #4]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	8819      	ldrh	r1, [r3, #0]
 8001032:	7afb      	ldrb	r3, [r7, #11]
 8001034:	b29a      	uxth	r2, r3
 8001036:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	893b      	ldrh	r3, [r7, #8]
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	f004 fe43 	bl	8005cd0 <HAL_I2C_Mem_Write>
 800104a:	4603      	mov	r3, r0
 800104c:	75bb      	strb	r3, [r7, #22]
				1,data,dim,2000 );
	}while( status!=HAL_OK && try <= max_retry );
 800104e:	7dbb      	ldrb	r3, [r7, #22]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d004      	beq.n	800105e <I2C_Write+0x52>
 8001054:	7dfb      	ldrb	r3, [r7, #23]
 8001056:	b29b      	uxth	r3, r3
 8001058:	8c3a      	ldrh	r2, [r7, #32]
 800105a:	429a      	cmp	r2, r3
 800105c:	d2e2      	bcs.n	8001024 <I2C_Write+0x18>

	return status;
 800105e:	7dbb      	ldrb	r3, [r7, #22]

}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <I2C_ReadDMA>:

HAL_StatusTypeDef I2C_ReadDMA(AMG8833 *inst, uint8_t reg,uint8_t *data,uint16_t dim,uint16_t max_retry){
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af02      	add	r7, sp, #8
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	461a      	mov	r2, r3
 8001074:	460b      	mov	r3, r1
 8001076:	72fb      	strb	r3, [r7, #11]
 8001078:	4613      	mov	r3, r2
 800107a:	813b      	strh	r3, [r7, #8]

	uint8_t try=0;
 800107c:	2300      	movs	r3, #0
 800107e:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status;

	do{
		try++;
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	3301      	adds	r3, #1
 8001084:	75fb      	strb	r3, [r7, #23]
		status=HAL_I2C_Mem_Read_DMA( inst->hi2c,(uint16_t)inst->adri2c,reg,
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6858      	ldr	r0, [r3, #4]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8819      	ldrh	r1, [r3, #0]
 800108e:	7afb      	ldrb	r3, [r7, #11]
 8001090:	b29a      	uxth	r2, r3
 8001092:	893b      	ldrh	r3, [r7, #8]
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	f005 f938 	bl	8006310 <HAL_I2C_Mem_Read_DMA>
 80010a0:	4603      	mov	r3, r0
 80010a2:	75bb      	strb	r3, [r7, #22]
				1,data,dim );
	}while( status!=HAL_OK && try <= max_retry );
 80010a4:	7dbb      	ldrb	r3, [r7, #22]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <I2C_ReadDMA+0x4c>
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	8c3a      	ldrh	r2, [r7, #32]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d2e5      	bcs.n	8001080 <I2C_ReadDMA+0x18>

	return status;
 80010b4:	7dbb      	ldrb	r3, [r7, #22]

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <amg8833Reset>:
/*
 * Reset to initial settings
 */
HAL_StatusTypeDef amg8833Reset( AMG8833 *inst, uint8_t max_retry ){
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af02      	add	r7, sp, #8
 80010c4:	6078      	str	r0, [r7, #4]
 80010c6:	460b      	mov	r3, r1
 80010c8:	70fb      	strb	r3, [r7, #3]

	uint8_t data=AMG8833_INIT_RST;
 80010ca:	233f      	movs	r3, #63	; 0x3f
 80010cc:	73fb      	strb	r3, [r7, #15]
	return I2C_Write( inst,AMG8833_RST,&data,1,max_retry );
 80010ce:	78fb      	ldrb	r3, [r7, #3]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	f107 020f 	add.w	r2, r7, #15
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	2101      	movs	r1, #1
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff95 	bl	800100c <I2C_Write>
 80010e2:	4603      	mov	r3, r0


}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <amg8833ReadDMA>:
}

/*
 * Read temperature matrix in DMA mode
 */
HAL_StatusTypeDef amg8833ReadDMA(AMG8833 *inst,uint8_t *data, uint8_t max_retry){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	4613      	mov	r3, r2
 80010f8:	71fb      	strb	r3, [r7, #7]

	return I2C_ReadDMA( inst,AMG8833_T01L,data,AMG8833_DS,max_retry );
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f7ff ffae 	bl	8001068 <I2C_ReadDMA>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <amg8833IntEn>:
}

/*
 * Enable interrupt triggered by by pixels above hysteresis/absolute  threshold
 */
HAL_StatusTypeDef amg8833IntEn(AMG8833 *inst, uint8_t max_retry ){
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af02      	add	r7, sp, #8
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	460b      	mov	r3, r1
 8001120:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef status;
	uint8_t data;

	status=amg8833GetIntCtrl( inst,&data, max_retry );
 8001122:	78fa      	ldrb	r2, [r7, #3]
 8001124:	f107 030e 	add.w	r3, r7, #14
 8001128:	4619      	mov	r1, r3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f843 	bl	80011b6 <amg8833GetIntCtrl>
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]

	if( status!=HAL_OK )
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <amg8833IntEn+0x28>
		return status;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	e00f      	b.n	800115e <amg8833IntEn+0x48>

	data|=AMG8833_INTEN;
 800113e:	7bbb      	ldrb	r3, [r7, #14]
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	73bb      	strb	r3, [r7, #14]

	return I2C_Write( inst,AMG8833_INTC,&data,1,max_retry );
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	b29b      	uxth	r3, r3
 800114c:	f107 020e 	add.w	r2, r7, #14
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2301      	movs	r3, #1
 8001154:	2103      	movs	r1, #3
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff58 	bl	800100c <I2C_Write>
 800115c:	4603      	mov	r3, r0

}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <amg8833IntDis>:

/*
 * Disable interrupt triggered by by pixels above hysteresis/absolute  threshold
 */
HAL_StatusTypeDef amg8833IntDis(AMG8833 *inst, uint8_t max_retry ){
 8001166:	b580      	push	{r7, lr}
 8001168:	b086      	sub	sp, #24
 800116a:	af02      	add	r7, sp, #8
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	70fb      	strb	r3, [r7, #3]

	HAL_StatusTypeDef status;
	uint8_t data;

	status=amg8833GetIntCtrl( inst,&data, max_retry );
 8001172:	78fa      	ldrb	r2, [r7, #3]
 8001174:	f107 030e 	add.w	r3, r7, #14
 8001178:	4619      	mov	r1, r3
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f81b 	bl	80011b6 <amg8833GetIntCtrl>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]

	if( status!=HAL_OK )
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <amg8833IntDis+0x28>
		return status;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	e00f      	b.n	80011ae <amg8833IntDis+0x48>

	data&=~AMG8833_INTEN;
 800118e:	7bbb      	ldrb	r3, [r7, #14]
 8001190:	f023 0301 	bic.w	r3, r3, #1
 8001194:	b2db      	uxtb	r3, r3
 8001196:	73bb      	strb	r3, [r7, #14]

	return I2C_Write( inst,AMG8833_INTC,&data,1,max_retry );
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	b29b      	uxth	r3, r3
 800119c:	f107 020e 	add.w	r2, r7, #14
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	2103      	movs	r1, #3
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff30 	bl	800100c <I2C_Write>
 80011ac:	4603      	mov	r3, r0

}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <amg8833GetIntCtrl>:


/*
 * Get interrupt control register value
 */
HAL_StatusTypeDef amg8833GetIntCtrl(AMG8833 *inst,uint8_t *data, uint8_t max_retry){
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af02      	add	r7, sp, #8
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	4613      	mov	r3, r2
 80011c2:	71fb      	strb	r3, [r7, #7]

	return I2C_Read( inst,AMG8833_INTC,data,1,max_retry );
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	2301      	movs	r3, #1
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	2103      	movs	r1, #3
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f7ff feed 	bl	8000fb0 <I2C_Read>
 80011d6:	4603      	mov	r3, r0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <amg8833SetIntMode>:

/*
 * Set interrupt in hysteresis/absolute ( 0/1 ) threshold mode
 */
HAL_StatusTypeDef amg8833SetIntMode(AMG8833 *inst, uint8_t mode, uint8_t max_retry){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
 80011ec:	4613      	mov	r3, r2
 80011ee:	70bb      	strb	r3, [r7, #2]

	HAL_StatusTypeDef status;
	uint8_t data;

	status=amg8833GetIntCtrl( inst,&data, max_retry );
 80011f0:	78ba      	ldrb	r2, [r7, #2]
 80011f2:	f107 030e 	add.w	r3, r7, #14
 80011f6:	4619      	mov	r1, r3
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ffdc 	bl	80011b6 <amg8833GetIntCtrl>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]

	if( status!=HAL_OK )
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <amg8833SetIntMode+0x2c>
		return status;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	e018      	b.n	800123e <amg8833SetIntMode+0x5e>

	/*
	 * Toggle bit of absolute threshold interrupt
	 */
	if(!mode)
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d105      	bne.n	800121e <amg8833SetIntMode+0x3e>
		/*
		 * Set hysteresis mode
		 */
		data&=~AMG8833_INT_MOD_FLAG;
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	f023 0302 	bic.w	r3, r3, #2
 8001218:	b2db      	uxtb	r3, r3
 800121a:	73bb      	strb	r3, [r7, #14]
 800121c:	e004      	b.n	8001228 <amg8833SetIntMode+0x48>
	else
		/*
		 * Set absolute mode
		 */
		data|=AMG8833_INT_MOD_FLAG;
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	b2db      	uxtb	r3, r3
 8001226:	73bb      	strb	r3, [r7, #14]

	return I2C_Write( inst,AMG8833_INTC,&data,1,max_retry );
 8001228:	78bb      	ldrb	r3, [r7, #2]
 800122a:	b29b      	uxth	r3, r3
 800122c:	f107 020e 	add.w	r2, r7, #14
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2301      	movs	r3, #1
 8001234:	2103      	movs	r1, #3
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fee8 	bl	800100c <I2C_Write>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <amg8833SetAbsHighThrs>:
}

/*
 * Set 12 bit absolute threshold value if interrupt in absolute mode is selected
 */
HAL_StatusTypeDef amg8833SetAbsHighThrs(AMG8833 *inst,uint16_t thrs, uint8_t max_retry){
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af02      	add	r7, sp, #8
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	460b      	mov	r3, r1
 8001250:	807b      	strh	r3, [r7, #2]
 8001252:	4613      	mov	r3, r2
 8001254:	707b      	strb	r3, [r7, #1]

	HAL_StatusTypeDef status;
	uint8_t data;

	/*Lower byte*/
	data=(uint8_t)( thrs & 0x00FF );
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	73bb      	strb	r3, [r7, #14]

	status=I2C_Write( inst,AMG8833_INTHL,&data,1,max_retry);
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	b29b      	uxth	r3, r3
 8001260:	f107 020e 	add.w	r2, r7, #14
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2301      	movs	r3, #1
 8001268:	2108      	movs	r1, #8
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fece 	bl	800100c <I2C_Write>
 8001270:	4603      	mov	r3, r0
 8001272:	73fb      	strb	r3, [r7, #15]

	if(status!=HAL_OK){
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <amg8833SetAbsHighThrs+0x38>
		return status;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	e011      	b.n	80012a2 <amg8833SetAbsHighThrs+0x5c>
	}

	/*Higher byte (only lower 4-bit)*/
	data=(uint8_t)( ( thrs & 0x0F00 ) >> 8 );
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	121b      	asrs	r3, r3, #8
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	b2db      	uxtb	r3, r3
 800128a:	73bb      	strb	r3, [r7, #14]
	return I2C_Write( inst,AMG8833_INTHH,&data,1,max_retry);
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	b29b      	uxth	r3, r3
 8001290:	f107 020e 	add.w	r2, r7, #14
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	2109      	movs	r1, #9
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff feb6 	bl	800100c <I2C_Write>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <initJstick>:
#include "Jstick.h"
#include "stm32f4xx.h"
#include "utils.h"


void initJstick(Jstick *inst,ADC_HandleTypeDef *hadc,uint16_t errpin,GPIO_TypeDef *errport){
 80012aa:	b480      	push	{r7}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4613      	mov	r3, r2
 80012b8:	80fb      	strh	r3, [r7, #6]
	inst->hadc=hadc;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	68ba      	ldr	r2, [r7, #8]
 80012be:	601a      	str	r2, [r3, #0]
	inst->errpin=errpin;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	809a      	strh	r2, [r3, #4]
	inst->errport=errport;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	609a      	str	r2, [r3, #8]

}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <jstickGetDirPoll>:


JstickDir jstickGetDirPoll(Jstick *inst){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
	uint16_t raw_val;
	HAL_StatusTypeDef status;

	status=HAL_ADC_PollForConversion(inst->hadc,50);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2132      	movs	r1, #50	; 0x32
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 fc86 	bl	8003bf8 <HAL_ADC_PollForConversion>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]

	if(status==HAL_OK){
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d111      	bne.n	800131a <jstickGetDirPoll+0x42>
		raw_val=HAL_ADC_GetValue(inst->hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fe18 	bl	8003f30 <HAL_ADC_GetValue>
 8001300:	4603      	mov	r3, r0
 8001302:	81bb      	strh	r3, [r7, #12]

		if(raw_val>4000) return RIGHT;
 8001304:	89bb      	ldrh	r3, [r7, #12]
 8001306:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800130a:	d901      	bls.n	8001310 <jstickGetDirPoll+0x38>
 800130c:	2302      	movs	r3, #2
 800130e:	e005      	b.n	800131c <jstickGetDirPoll+0x44>
		if(raw_val<100) return LEFT;
 8001310:	89bb      	ldrh	r3, [r7, #12]
 8001312:	2b63      	cmp	r3, #99	; 0x63
 8001314:	d801      	bhi.n	800131a <jstickGetDirPoll+0x42>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <jstickGetDirPoll+0x44>
	}

	return CENTER;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <initStep>:
#include "Step.h"
#include "utils.h"
#include "stm32f4xx.h"

/*Init stepper motor data structure*/
void initStep(Step *inst,uint16_t p0,uint16_t p1,uint16_t p2,uint16_t p3,GPIO_TypeDef *port,StepMode mode,TIM_HandleTypeDef *htim){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	4608      	mov	r0, r1
 800132e:	4611      	mov	r1, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4603      	mov	r3, r0
 8001334:	817b      	strh	r3, [r7, #10]
 8001336:	460b      	mov	r3, r1
 8001338:	813b      	strh	r3, [r7, #8]
 800133a:	4613      	mov	r3, r2
 800133c:	80fb      	strh	r3, [r7, #6]

	/*Assign gpio pins and port*/
	inst->pins[0]=p0;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	897a      	ldrh	r2, [r7, #10]
 8001342:	801a      	strh	r2, [r3, #0]
	inst->pins[1]=p1;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	893a      	ldrh	r2, [r7, #8]
 8001348:	805a      	strh	r2, [r3, #2]
	inst->pins[2]=p2;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	88fa      	ldrh	r2, [r7, #6]
 800134e:	809a      	strh	r2, [r3, #4]
	inst->pins[3]=p3;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8b3a      	ldrh	r2, [r7, #24]
 8001354:	80da      	strh	r2, [r3, #6]

	inst->port=port;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	609a      	str	r2, [r3, #8]

	initMode(inst,mode);
 800135c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001360:	4619      	mov	r1, r3
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 f812 	bl	800138c <initMode>

	inst->ang_idx=0;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
	inst->move_lock=0;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	771a      	strb	r2, [r3, #28]
	inst->htim=htim;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001378:	619a      	str	r2, [r3, #24]
	inst->ang_lim=0;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <initMode>:

/*Init step mode, step resolution, step sequence indexes and reset pins*/
void initMode(Step *inst,StepMode mode){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
	inst->mode=mode;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	78fa      	ldrb	r2, [r7, #3]
 800139c:	731a      	strb	r2, [r3, #12]
	inst->cur_step=0;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	735a      	strb	r2, [r3, #13]
	rstPins(inst);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f80f 	bl	80013c8 <rstPins>

	if(mode==WAVE || mode==FULL)
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <initMode+0x2a>
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d102      	bne.n	80013bc <initMode+0x30>
		inst->res=360.0/2038.0;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a02      	ldr	r2, [pc, #8]	; (80013c4 <initMode+0x38>)
 80013ba:	615a      	str	r2, [r3, #20]
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	3e34e21b 	.word	0x3e34e21b

080013c8 <rstPins>:
void rstPins(Step *inst){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	inst->port->ODR&=~( inst->pins[0] | inst->pins[1] | inst->pins[2] | inst->pins[3] );
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	8819      	ldrh	r1, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	885b      	ldrh	r3, [r3, #2]
 80013de:	430b      	orrs	r3, r1
 80013e0:	b299      	uxth	r1, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	889b      	ldrh	r3, [r3, #4]
 80013e6:	430b      	orrs	r3, r1
 80013e8:	b299      	uxth	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	88db      	ldrh	r3, [r3, #6]
 80013ee:	430b      	orrs	r3, r1
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	4619      	mov	r1, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	400a      	ands	r2, r1
 80013fc:	615a      	str	r2, [r3, #20]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <rstAngle>:

void rstAngle(Step *inst){
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
	inst->ang_idx=0;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <waveStep>:
    |1  0  0  0|
    |0  1  0  0|
    |0  0  1  0|
    |0  0  0  1|
 */
void waveStep(Step *inst,uint8_t dir){
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]

	/*Reset previous step pin*/
	inst->port->ODR&= ~(inst->pins[ inst->cur_step ]);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7b5b      	ldrb	r3, [r3, #13]
 800143a:	4619      	mov	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001442:	43db      	mvns	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	400a      	ands	r2, r1
 800144c:	615a      	str	r2, [r3, #20]

	if(dir){
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d00e      	beq.n	8001472 <waveStep+0x4e>

		/*Move forward cur_step*/
		inst->cur_step=(inst->cur_step + 1) & 0x3;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7b5b      	ldrb	r3, [r3, #13]
 8001458:	3301      	adds	r3, #1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	f003 0303 	and.w	r3, r3, #3
 8001460:	b2da      	uxtb	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	735a      	strb	r2, [r3, #13]
		inst->ang_idx ++;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	e010      	b.n	8001494 <waveStep+0x70>
	}
	else{

		/*Move backward cur_step*/
		inst->cur_step= inst->cur_step ? (inst->cur_step - 1) : 0x3;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7b5b      	ldrb	r3, [r3, #13]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d004      	beq.n	8001484 <waveStep+0x60>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7b5b      	ldrb	r3, [r3, #13]
 800147e:	3b01      	subs	r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	e000      	b.n	8001486 <waveStep+0x62>
 8001484:	2203      	movs	r2, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	735a      	strb	r2, [r3, #13]
		inst->ang_idx --;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	1e5a      	subs	r2, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	611a      	str	r2, [r3, #16]
	}

	/*Set current step pin*/
	inst->port->ODR|= inst->pins[ inst->cur_step ];
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	695a      	ldr	r2, [r3, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	7b5b      	ldrb	r3, [r3, #13]
 800149e:	4619      	mov	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80014a6:	4619      	mov	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	615a      	str	r2, [r3, #20]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <fullStep>:
    |1  1  0  0|
    |0  1  1  0|
    |0  0  1  1|
    |1  0  0  1|
 */
void fullStep(Step *inst,uint8_t dir){
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	70fb      	strb	r3, [r7, #3]

	if(dir){
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d01d      	beq.n	800150a <fullStep+0x4e>
		/*Reset previous step pin*/
		inst->port->ODR&= ~(inst->pins[ inst->cur_step ]);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7b5b      	ldrb	r3, [r3, #13]
 80014d8:	4619      	mov	r1, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4619      	mov	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	400a      	ands	r2, r1
 80014ea:	615a      	str	r2, [r3, #20]

		/*Move forward cur_step*/
		inst->cur_step=(inst->cur_step + 1) & 0x3;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7b5b      	ldrb	r3, [r3, #13]
 80014f0:	3301      	adds	r3, #1
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	735a      	strb	r2, [r3, #13]
		inst->ang_idx ++;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	e021      	b.n	800154e <fullStep+0x92>


	}
	else{
		/*Reset previous step right sibling pin*/
		inst->port->ODR&= ~(inst->pins[ (inst->cur_step + 1) & 0x3 ]);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	695a      	ldr	r2, [r3, #20]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7b5b      	ldrb	r3, [r3, #13]
 8001514:	3301      	adds	r3, #1
 8001516:	f003 0103 	and.w	r1, r3, #3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001520:	43db      	mvns	r3, r3
 8001522:	4619      	mov	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	400a      	ands	r2, r1
 800152a:	615a      	str	r2, [r3, #20]

		/*Move backward cur_step*/
		inst->cur_step= inst->cur_step ? (inst->cur_step - 1) : 0x3;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7b5b      	ldrb	r3, [r3, #13]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d004      	beq.n	800153e <fullStep+0x82>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	7b5b      	ldrb	r3, [r3, #13]
 8001538:	3b01      	subs	r3, #1
 800153a:	b2da      	uxtb	r2, r3
 800153c:	e000      	b.n	8001540 <fullStep+0x84>
 800153e:	2203      	movs	r2, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	735a      	strb	r2, [r3, #13]
		inst->ang_idx --;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	611a      	str	r2, [r3, #16]
	}

	/*Set current step pin and its right sibling*/
	inst->port->ODR|= ( inst->pins[ inst->cur_step ] | inst->pins[ (inst->cur_step + 1) & 0x3] );
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	695a      	ldr	r2, [r3, #20]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7b5b      	ldrb	r3, [r3, #13]
 8001558:	4619      	mov	r1, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7b5b      	ldrb	r3, [r3, #13]
 8001564:	3301      	adds	r3, #1
 8001566:	f003 0003 	and.w	r0, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8001570:	430b      	orrs	r3, r1
 8001572:	b29b      	uxth	r3, r3
 8001574:	4619      	mov	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	430a      	orrs	r2, r1
 800157c:	615a      	str	r2, [r3, #20]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <step>:

/*
 * Step command
 */
void step(Step *inst,uint8_t dir){
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	70fb      	strb	r3, [r7, #3]
	switch(inst->mode){
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7b1b      	ldrb	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d002      	beq.n	80015a4 <step+0x1a>
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d005      	beq.n	80015ae <step+0x24>
	case WAVE:
		waveStep(inst,dir);
	case FULL:
		fullStep(inst,dir);
	}
}
 80015a2:	e009      	b.n	80015b8 <step+0x2e>
		waveStep(inst,dir);
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	4619      	mov	r1, r3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff3b 	bl	8001424 <waveStep>
		fullStep(inst,dir);
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	4619      	mov	r1, r3
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ff82 	bl	80014bc <fullStep>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <stepIt>:

/*
 * Perform one step in interrupt mode
 * this function is meant to be called inside instance timer PeriodElapsed callback
 */
void stepIt(Step *inst){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if( inst->destination_it > inst->ang_idx * inst->res ){
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	ed93 7a08 	vldr	s14, [r3, #32]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	ee07 3a90 	vmov	s15, r3
 80015d6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80015e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	dd21      	ble.n	8001632 <stepIt+0x72>

		if( inst->destination_it > ( inst->ang_idx + 1 ) * inst->res )
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	ed93 7a08 	vldr	s14, [r3, #32]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	3301      	adds	r3, #1
 80015fa:	ee07 3a90 	vmov	s15, r3
 80015fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	edd3 7a05 	vldr	s15, [r3, #20]
 8001608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001614:	dd04      	ble.n	8001620 <stepIt+0x60>
			step(inst,1);
 8001616:	2101      	movs	r1, #1
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffb6 	bl	800158a <step>
		else{
			HAL_TIM_Base_Stop_IT(inst->htim);
			inst->move_lock=0;
		}
	}
}
 800161e:	e029      	b.n	8001674 <stepIt+0xb4>
			HAL_TIM_Base_Stop_IT(inst->htim);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4618      	mov	r0, r3
 8001626:	f007 fee7 	bl	80093f8 <HAL_TIM_Base_Stop_IT>
			inst->move_lock=0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	771a      	strb	r2, [r3, #28]
}
 8001630:	e020      	b.n	8001674 <stepIt+0xb4>
		if( inst->destination_it < ( inst->ang_idx - 1 ) * inst->res )
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	ed93 7a08 	vldr	s14, [r3, #32]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	3b01      	subs	r3, #1
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	edd3 7a05 	vldr	s15, [r3, #20]
 800164c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001650:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001658:	d504      	bpl.n	8001664 <stepIt+0xa4>
			step(inst,0);
 800165a:	2100      	movs	r1, #0
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff94 	bl	800158a <step>
}
 8001662:	e007      	b.n	8001674 <stepIt+0xb4>
			HAL_TIM_Base_Stop_IT(inst->htim);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4618      	mov	r0, r3
 800166a:	f007 fec5 	bl	80093f8 <HAL_TIM_Base_Stop_IT>
			inst->move_lock=0;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	771a      	strb	r2, [r3, #28]
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <moveToIt>:


/*
 * Move motor from a starting position to a destination expressed in angle degrees
 */
void moveToIt(Step *inst,float angle){
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	ed87 0a00 	vstr	s0, [r7]

	if(!inst->move_lock){
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7f1b      	ldrb	r3, [r3, #28]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d10a      	bne.n	80016a6 <moveToIt+0x2a>
		inst->move_lock=1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	771a      	strb	r2, [r3, #28]

		inst->destination_it=angle;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	621a      	str	r2, [r3, #32]
		HAL_TIM_Base_Start_IT( inst->htim );
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f007 fe39 	bl	8009318 <HAL_TIM_Base_Start_IT>
	}
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <stop>:

/*
 * Stop stepper motor while is moving to a destination
 */
void stop(Step* inst){
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(inst->htim);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f007 fe9c 	bl	80093f8 <HAL_TIM_Base_Stop_IT>
	inst->move_lock=0;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	771a      	strb	r2, [r3, #28]
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_I2C_MemRxCpltCallback>:

/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image reading is now complete
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <HAL_I2C_MemRxCpltCallback+0x24>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d102      	bne.n	80016e8 <HAL_I2C_MemRxCpltCallback+0x18>
		AMG_RD_CPLT=1;
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_I2C_MemRxCpltCallback+0x28>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
	}
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40005400 	.word	0x40005400
 80016f8:	22000018 	.word	0x22000018

080016fc <HAL_UART_TxCpltCallback>:

/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image output is now complete
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a05      	ldr	r2, [pc, #20]	; (8001720 <HAL_UART_TxCpltCallback+0x24>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d102      	bne.n	8001714 <HAL_UART_TxCpltCallback+0x18>
		AMG_OUT_CPLT=1;
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_UART_TxCpltCallback+0x28>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]
	}
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40004800 	.word	0x40004800
 8001724:	22000014 	.word	0x22000014

08001728 <thermalImgFSM>:
 * 		AMG_RD_START ==> AMG_RD_CPLT
 * DMA1 Stream 6 (Thermal image USART2 Tx) Tx Cplt ISR
 * 		AMG_RD_CPLT ==> AMG_OUT_CPLT
 *
 */
void thermalImgFSM(){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	  /*
	   * Thermal camera FSM
	   */
	  //If timer6 has expired
	  if(AMG_RD_START){
 800172c:	4b19      	ldr	r3, [pc, #100]	; (8001794 <thermalImgFSM+0x6c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d00f      	beq.n	8001754 <thermalImgFSM+0x2c>

		  //Command DMA transfer from amg8833
		status=amg8833ReadDMA( &cam,img_buf, 1 );
 8001734:	2201      	movs	r2, #1
 8001736:	4918      	ldr	r1, [pc, #96]	; (8001798 <thermalImgFSM+0x70>)
 8001738:	4818      	ldr	r0, [pc, #96]	; (800179c <thermalImgFSM+0x74>)
 800173a:	f7ff fcd7 	bl	80010ec <amg8833ReadDMA>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <thermalImgFSM+0x78>)
 8001744:	701a      	strb	r2, [r3, #0]
		if(status==HAL_OK){
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <thermalImgFSM+0x78>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <thermalImgFSM+0x2c>
			//Clear ctrl read start bit
			AMG_RD_START=0;
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <thermalImgFSM+0x6c>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
		}
	  }

	  //If DMA image reading was successful
	  if(AMG_RD_CPLT){
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <thermalImgFSM+0x7c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00f      	beq.n	800177c <thermalImgFSM+0x54>
		 //Command DMA transfer to uart2
		 status=HAL_UART_Transmit_DMA(&huart3,img_buf,AMG8833_DS);
 800175c:	2280      	movs	r2, #128	; 0x80
 800175e:	490e      	ldr	r1, [pc, #56]	; (8001798 <thermalImgFSM+0x70>)
 8001760:	4811      	ldr	r0, [pc, #68]	; (80017a8 <thermalImgFSM+0x80>)
 8001762:	f008 fb19 	bl	8009d98 <HAL_UART_Transmit_DMA>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <thermalImgFSM+0x78>)
 800176c:	701a      	strb	r2, [r3, #0]
		 if(status==HAL_OK){
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <thermalImgFSM+0x78>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <thermalImgFSM+0x54>
			 AMG_RD_CPLT=0;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <thermalImgFSM+0x7c>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
		 }
	  }
	  //if latest data were consumed in output, restart timer6
	  if(AMG_OUT_CPLT){
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <thermalImgFSM+0x84>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <thermalImgFSM+0x68>
		  AMG_OUT_CPLT=0;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <thermalImgFSM+0x84>)
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 800178a:	4809      	ldr	r0, [pc, #36]	; (80017b0 <thermalImgFSM+0x88>)
 800178c:	f007 fdc4 	bl	8009318 <HAL_TIM_Base_Start_IT>
	  }
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	2200001c 	.word	0x2200001c
 8001798:	200008d0 	.word	0x200008d0
 800179c:	20000810 	.word	0x20000810
 80017a0:	200008cc 	.word	0x200008cc
 80017a4:	22000018 	.word	0x22000018
 80017a8:	200006c8 	.word	0x200006c8
 80017ac:	22000014 	.word	0x22000014
 80017b0:	200005f0 	.word	0x200005f0

080017b4 <HAL_GPIO_EXTI_Callback>:

/*
 * Callback function to manage external interrupt push buttons pushed
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
	/*
	 * Manage interrupt on exti line from AMG8833 sensor
	 */
	if( GPIO_PIN == GPIO_PIN_15 ){
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017c4:	d10c      	bne.n	80017e0 <HAL_GPIO_EXTI_Callback+0x2c>
		GPIOD->ODR|=GPIO_PIN_13;
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_GPIO_EXTI_Callback+0x48>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <HAL_GPIO_EXTI_Callback+0x48>)
 80017cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017d0:	6153      	str	r3, [r2, #20]
		AMG_TARGET_DET=1;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_GPIO_EXTI_Callback+0x4c>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
		stop( &motor );
 80017d8:	480a      	ldr	r0, [pc, #40]	; (8001804 <HAL_GPIO_EXTI_Callback+0x50>)
 80017da:	f7ff ff68 	bl	80016ae <stop>
	else if( !EXTI_BUT_PUSH  ){
		EXTI_BUT_PUSH=1;
		//Start debounce timer: interrupt after 50 ms
		HAL_TIM_Base_Start_IT(&htim10);
	}
}
 80017de:	e009      	b.n	80017f4 <HAL_GPIO_EXTI_Callback+0x40>
	else if( !EXTI_BUT_PUSH  ){
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_GPIO_EXTI_Callback+0x54>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d105      	bne.n	80017f4 <HAL_GPIO_EXTI_Callback+0x40>
		EXTI_BUT_PUSH=1;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_GPIO_EXTI_Callback+0x54>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim10);
 80017ee:	4807      	ldr	r0, [pc, #28]	; (800180c <HAL_GPIO_EXTI_Callback+0x58>)
 80017f0:	f007 fd92 	bl	8009318 <HAL_TIM_Base_Start_IT>
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	22000010 	.word	0x22000010
 8001804:	20000818 	.word	0x20000818
 8001808:	2200007c 	.word	0x2200007c
 800180c:	20000680 	.word	0x20000680

08001810 <targetDetect>:

void targetDetect(){
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	  /*
	   * Set absolute value value threshold to detect hot objects
	   */
	  amg8833SetAbsHighThrs( &cam,(uint16_t)( 37.0/0.25 ),2 );
 8001814:	2202      	movs	r2, #2
 8001816:	2194      	movs	r1, #148	; 0x94
 8001818:	483f      	ldr	r0, [pc, #252]	; (8001918 <targetDetect+0x108>)
 800181a:	f7ff fd14 	bl	8001246 <amg8833SetAbsHighThrs>
	  /*
	   * Set absolute threshold interrupt mode
	   */
	  amg8833SetIntMode( &cam,1,2 );
 800181e:	2202      	movs	r2, #2
 8001820:	2101      	movs	r1, #1
 8001822:	483d      	ldr	r0, [pc, #244]	; (8001918 <targetDetect+0x108>)
 8001824:	f7ff fcdc 	bl	80011e0 <amg8833SetIntMode>
	  /*
	   * Enable interrupt on amg8833
	   */
	  amg8833IntEn( &cam,2 );
 8001828:	2102      	movs	r1, #2
 800182a:	483b      	ldr	r0, [pc, #236]	; (8001918 <targetDetect+0x108>)
 800182c:	f7ff fc73 	bl	8001116 <amg8833IntEn>
	  /*
	   * Reset interrupt flag
	   */
	  AMG_TARGET_DET=0;
 8001830:	4b3a      	ldr	r3, [pc, #232]	; (800191c <targetDetect+0x10c>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]

	 /*
	  * Pan with the camera and stop the movement if amg8833 triggers interrupt on exti line (i.e. target detected)
	  */
	 if( motor.ang_idx > 0 ){
 8001836:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <targetDetect+0x110>)
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b00      	cmp	r3, #0
 800183c:	dd1c      	ble.n	8001878 <targetDetect+0x68>
		 /*
		  * Move to the right limit
		  */
		 moveToIt( &motor,80.0 );
 800183e:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8001924 <targetDetect+0x114>
 8001842:	4837      	ldr	r0, [pc, #220]	; (8001920 <targetDetect+0x110>)
 8001844:	f7ff ff1a 	bl	800167c <moveToIt>

		 while( motor.move_lock ){
 8001848:	e001      	b.n	800184e <targetDetect+0x3e>
			 thermalImgFSM();
 800184a:	f7ff ff6d 	bl	8001728 <thermalImgFSM>
		 while( motor.move_lock ){
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <targetDetect+0x110>)
 8001850:	7f1b      	ldrb	r3, [r3, #28]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f9      	bne.n	800184a <targetDetect+0x3a>
		 }
		 /*
		  * If no target was detected
		  */
		 if(!AMG_TARGET_DET){
 8001856:	4b31      	ldr	r3, [pc, #196]	; (800191c <targetDetect+0x10c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d128      	bne.n	80018b0 <targetDetect+0xa0>
			 /*
			  * Move to the left limit and stop if target is detected
			  */
			 moveToIt( &motor, -80.0 );
 800185e:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8001928 <targetDetect+0x118>
 8001862:	482f      	ldr	r0, [pc, #188]	; (8001920 <targetDetect+0x110>)
 8001864:	f7ff ff0a 	bl	800167c <moveToIt>
			 while( motor.move_lock ){
 8001868:	e001      	b.n	800186e <targetDetect+0x5e>
				 thermalImgFSM();
 800186a:	f7ff ff5d 	bl	8001728 <thermalImgFSM>
			 while( motor.move_lock ){
 800186e:	4b2c      	ldr	r3, [pc, #176]	; (8001920 <targetDetect+0x110>)
 8001870:	7f1b      	ldrb	r3, [r3, #28]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f9      	bne.n	800186a <targetDetect+0x5a>
 8001876:	e01b      	b.n	80018b0 <targetDetect+0xa0>
			 }
		 }
	 }
	 else{
		 moveToIt( &motor,80.0 );
 8001878:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8001924 <targetDetect+0x114>
 800187c:	4828      	ldr	r0, [pc, #160]	; (8001920 <targetDetect+0x110>)
 800187e:	f7ff fefd 	bl	800167c <moveToIt>

		 while( motor.move_lock ){
 8001882:	e001      	b.n	8001888 <targetDetect+0x78>
			 thermalImgFSM();
 8001884:	f7ff ff50 	bl	8001728 <thermalImgFSM>
		 while( motor.move_lock ){
 8001888:	4b25      	ldr	r3, [pc, #148]	; (8001920 <targetDetect+0x110>)
 800188a:	7f1b      	ldrb	r3, [r3, #28]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f9      	bne.n	8001884 <targetDetect+0x74>
		 }
		 if(!AMG_TARGET_DET){
 8001890:	4b22      	ldr	r3, [pc, #136]	; (800191c <targetDetect+0x10c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10b      	bne.n	80018b0 <targetDetect+0xa0>
			 moveToIt( &motor, -80.0 );
 8001898:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001928 <targetDetect+0x118>
 800189c:	4820      	ldr	r0, [pc, #128]	; (8001920 <targetDetect+0x110>)
 800189e:	f7ff feed 	bl	800167c <moveToIt>
			 while( motor.move_lock ){
 80018a2:	e001      	b.n	80018a8 <targetDetect+0x98>
				 thermalImgFSM();
 80018a4:	f7ff ff40 	bl	8001728 <thermalImgFSM>
			 while( motor.move_lock ){
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <targetDetect+0x110>)
 80018aa:	7f1b      	ldrb	r3, [r3, #28]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f9      	bne.n	80018a4 <targetDetect+0x94>
		 }
	 }
	 /*
	  * Disable amg8833 interrupt
	  */
	 amg8833IntDis( &cam,2 );
 80018b0:	2102      	movs	r1, #2
 80018b2:	4819      	ldr	r0, [pc, #100]	; (8001918 <targetDetect+0x108>)
 80018b4:	f7ff fc57 	bl	8001166 <amg8833IntDis>

	 if( AMG_TARGET_DET ){
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <targetDetect+0x10c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d025      	beq.n	800190c <targetDetect+0xfc>
		 GPIOD->ODR&=~GPIO_PIN_13;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	; (800192c <targetDetect+0x11c>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	4a19      	ldr	r2, [pc, #100]	; (800192c <targetDetect+0x11c>)
 80018c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018ca:	6153      	str	r3, [r2, #20]
		 sprintf( msg_buf,"Target was detected at angle: %f\r\n", motor.ang_idx*motor.res );
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <targetDetect+0x110>)
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <targetDetect+0x110>)
 80018da:	edd3 7a05 	vldr	s15, [r3, #20]
 80018de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e2:	ee17 0a90 	vmov	r0, s15
 80018e6:	f7fe fe2f 	bl	8000548 <__aeabi_f2d>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4910      	ldr	r1, [pc, #64]	; (8001930 <targetDetect+0x120>)
 80018f0:	4810      	ldr	r0, [pc, #64]	; (8001934 <targetDetect+0x124>)
 80018f2:	f009 ff6d 	bl	800b7d0 <siprintf>
		 HAL_UART_Transmit( &huart6,(uint8_t *)msg_buf,strlen(msg_buf),HAL_MAX_DELAY);
 80018f6:	480f      	ldr	r0, [pc, #60]	; (8001934 <targetDetect+0x124>)
 80018f8:	f7fe fc6a 	bl	80001d0 <strlen>
 80018fc:	4603      	mov	r3, r0
 80018fe:	b29a      	uxth	r2, r3
 8001900:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001904:	490b      	ldr	r1, [pc, #44]	; (8001934 <targetDetect+0x124>)
 8001906:	480c      	ldr	r0, [pc, #48]	; (8001938 <targetDetect+0x128>)
 8001908:	f008 f9b3 	bl	8009c72 <HAL_UART_Transmit>
	 }

	 AMG_TARGET_DET=0;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <targetDetect+0x10c>)
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]

}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000810 	.word	0x20000810
 800191c:	22000010 	.word	0x22000010
 8001920:	20000818 	.word	0x20000818
 8001924:	42a00000 	.word	0x42a00000
 8001928:	c2a00000 	.word	0xc2a00000
 800192c:	40020c00 	.word	0x40020c00
 8001930:	0800de98 	.word	0x0800de98
 8001934:	2000084c 	.word	0x2000084c
 8001938:	2000070c 	.word	0x2000070c

0800193c <HAL_ADC_ConvHalfCpltCallback>:
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_BUF_SZ sample were converted and put into audio_in_buf.
 * Data can be moved by main application from lower audio_in_buf to higher audio_out_buf
 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==ADC1){
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d108      	bne.n	8001960 <HAL_ADC_ConvHalfCpltCallback+0x24>

#ifdef TIME_CONV_CH1
		CHRONO_START();
#endif
		audio_in_ptr1=&audio_in_buf1[0];
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8001950:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8001952:	601a      	str	r2, [r3, #0]
		audio_out_ptr1=&audio_out_buf1[0];
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001958:	601a      	str	r2, [r3, #0]
		BUF1_CPLT=1;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_ADC_ConvHalfCpltCallback+0x60>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]
	}

	if(hadc->Instance==ADC2){
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d108      	bne.n	800197c <HAL_ADC_ConvHalfCpltCallback+0x40>

#ifdef TIME_CONV_CH2
		CHRONO_START();
#endif
		audio_in_ptr2=&audio_in_buf2[0];
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 800196c:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 800196e:	601a      	str	r2, [r3, #0]
		audio_out_ptr2=&audio_out_buf2[0];
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8001972:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 8001974:	601a      	str	r2, [r3, #0]
		BUF2_CPLT=1;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]
	}
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40012000 	.word	0x40012000
 800198c:	20002950 	.word	0x20002950
 8001990:	20000950 	.word	0x20000950
 8001994:	20002954 	.word	0x20002954
 8001998:	20001150 	.word	0x20001150
 800199c:	2200005c 	.word	0x2200005c
 80019a0:	40012100 	.word	0x40012100
 80019a4:	20002958 	.word	0x20002958
 80019a8:	20001950 	.word	0x20001950
 80019ac:	2000295c 	.word	0x2000295c
 80019b0:	20002150 	.word	0x20002150
 80019b4:	22000058 	.word	0x22000058

080019b8 <HAL_DAC_ConvCpltCallbackCh1>:
/*
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_TOT_BUF_SZ sample were taken from audio out buf and fed into DAC.
 * Data can be moved by main application from higher audio_in_buf to lower audio_out_buf
 */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

#ifdef TIME_CONV_CH1
	CHRONO_STOP();
#endif
	audio_in_ptr1=&audio_in_buf1[AUDIO_BUF_SZ];
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 80019c2:	4a08      	ldr	r2, [pc, #32]	; (80019e4 <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
 80019c4:	601a      	str	r2, [r3, #0]
	audio_out_ptr1=&audio_out_buf1[AUDIO_BUF_SZ];
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_DAC_ConvCpltCallbackCh1+0x30>)
 80019c8:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 80019ca:	601a      	str	r2, [r3, #0]
	BUF1_CPLT=1;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_DAC_ConvCpltCallbackCh1+0x38>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20002950 	.word	0x20002950
 80019e4:	20000d50 	.word	0x20000d50
 80019e8:	20002954 	.word	0x20002954
 80019ec:	20001550 	.word	0x20001550
 80019f0:	2200005c 	.word	0x2200005c

080019f4 <HAL_DACEx_ConvCpltCallbackCh2>:

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac){
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]

#ifdef TIME_CONV_CH2
	CHRONO_STOP();
#endif
	audio_in_ptr2=&audio_in_buf2[AUDIO_BUF_SZ];
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_DACEx_ConvCpltCallbackCh2+0x28>)
 80019fe:	4a08      	ldr	r2, [pc, #32]	; (8001a20 <HAL_DACEx_ConvCpltCallbackCh2+0x2c>)
 8001a00:	601a      	str	r2, [r3, #0]
	audio_out_ptr2=&audio_out_buf2[AUDIO_BUF_SZ];
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_DACEx_ConvCpltCallbackCh2+0x30>)
 8001a04:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <HAL_DACEx_ConvCpltCallbackCh2+0x34>)
 8001a06:	601a      	str	r2, [r3, #0]
	BUF2_CPLT=1;
 8001a08:	4b08      	ldr	r3, [pc, #32]	; (8001a2c <HAL_DACEx_ConvCpltCallbackCh2+0x38>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20002958 	.word	0x20002958
 8001a20:	20001d50 	.word	0x20001d50
 8001a24:	2000295c 	.word	0x2000295c
 8001a28:	20002550 	.word	0x20002550
 8001a2c:	22000058 	.word	0x22000058

08001a30 <audioPlayback>:
 * Audio playback process.
 * Transfer audio samples from input buffer to output buffer using pointers set by ISR (ping-pong buffers).
 * Used by main application during calibration mode
 */

void audioPlayback(){
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0

	/*If channel 1 and 2 conversion was completed*/
	if(BUF1_CPLT && BUF2_CPLT){
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <audioPlayback+0x78>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d02d      	beq.n	8001a9a <audioPlayback+0x6a>
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <audioPlayback+0x7c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d029      	beq.n	8001a9a <audioPlayback+0x6a>
		BUF1_CPLT=0;
 8001a46:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <audioPlayback+0x78>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
		BUF2_CPLT=0;
 8001a4c:	4b17      	ldr	r3, [pc, #92]	; (8001aac <audioPlayback+0x7c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]

		/*Transfer samples from input to output buffers*/
		for(int i=0;i<AUDIO_BUF_SZ;i++){
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	e01c      	b.n	8001a92 <audioPlayback+0x62>
			audio_out_ptr1[i]=audio_in_ptr1[i];
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <audioPlayback+0x80>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	441a      	add	r2, r3
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <audioPlayback+0x84>)
 8001a64:	6819      	ldr	r1, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	440b      	add	r3, r1
 8001a6c:	8812      	ldrh	r2, [r2, #0]
 8001a6e:	b292      	uxth	r2, r2
 8001a70:	801a      	strh	r2, [r3, #0]
			audio_out_ptr2[i]=audio_in_ptr2[i];
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <audioPlayback+0x88>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	441a      	add	r2, r3
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <audioPlayback+0x8c>)
 8001a7e:	6819      	ldr	r1, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	440b      	add	r3, r1
 8001a86:	8812      	ldrh	r2, [r2, #0]
 8001a88:	b292      	uxth	r2, r2
 8001a8a:	801a      	strh	r2, [r3, #0]
		for(int i=0;i<AUDIO_BUF_SZ;i++){
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a98:	dbde      	blt.n	8001a58 <audioPlayback+0x28>

		}
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	2200005c 	.word	0x2200005c
 8001aac:	22000058 	.word	0x22000058
 8001ab0:	20002950 	.word	0x20002950
 8001ab4:	20002954 	.word	0x20002954
 8001ab8:	20002958 	.word	0x20002958
 8001abc:	2000295c 	.word	0x2000295c

08001ac0 <audioPreproc>:
 * Audio preprocessing.
 * Transfer audio samples from input buffer to output buffer using pointers set by ISR (ping-pong buffers).
 * DC offset is removed from every sample and threshold overflow is computed.
 * Used by main application during SSL mode
 */
void audioPreproc(){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
	/*
	 * Preproc loop will set rms values of last buf1 and buf2 to trigger cross-correlation
	 */

	/*If channel 1 and 2 conversion was completed*/
	if(BUF1_CPLT && BUF2_CPLT){
 8001ac6:	4b9d      	ldr	r3, [pc, #628]	; (8001d3c <audioPreproc+0x27c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 8176 	beq.w	8001dbc <audioPreproc+0x2fc>
 8001ad0:	4b9b      	ldr	r3, [pc, #620]	; (8001d40 <audioPreproc+0x280>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 8171 	beq.w	8001dbc <audioPreproc+0x2fc>

#ifdef 	TIME_PREPROC
		CHRONO_START();
#endif
		BUF1_CPLT=0;
 8001ada:	4b98      	ldr	r3, [pc, #608]	; (8001d3c <audioPreproc+0x27c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
		BUF2_CPLT=0;
 8001ae0:	4b97      	ldr	r3, [pc, #604]	; (8001d40 <audioPreproc+0x280>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]

		mean1=0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
		mean2=0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]

		dc1=0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
		dc2=0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]

		rms1=0;
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
		rms2=0;
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
		

		/*
		 * Transfer samples from input to cross-correlation buffers
		 */
		for( int i=0 ; i<AUDIO_BUF_SZ || i<DC_BUF_SZ ; i++ ){
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	e04d      	b.n	8001ba4 <audioPreproc+0xe4>

			/*
			 * Compute the mean value of input buffers 1 and 2
			 */
			if(i<AUDIO_BUF_SZ){
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b0e:	da2f      	bge.n	8001b70 <audioPreproc+0xb0>
				mean1+=audio_in_ptr1[i];
 8001b10:	4b8c      	ldr	r3, [pc, #560]	; (8001d44 <audioPreproc+0x284>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	4413      	add	r3, r2
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
				mean2+=audio_in_ptr2[i];
 8001b26:	4b88      	ldr	r3, [pc, #544]	; (8001d48 <audioPreproc+0x288>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	4413      	add	r3, r2
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	4413      	add	r3, r2
 8001b3a:	623b      	str	r3, [r7, #32]

				/*
				 * Fill the DAC buffer
				 */
				audio_out_ptr1[i]=audio_in_ptr1[i];
 8001b3c:	4b81      	ldr	r3, [pc, #516]	; (8001d44 <audioPreproc+0x284>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	441a      	add	r2, r3
 8001b46:	4b81      	ldr	r3, [pc, #516]	; (8001d4c <audioPreproc+0x28c>)
 8001b48:	6819      	ldr	r1, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	440b      	add	r3, r1
 8001b50:	8812      	ldrh	r2, [r2, #0]
 8001b52:	b292      	uxth	r2, r2
 8001b54:	801a      	strh	r2, [r3, #0]
				audio_out_ptr2[i]=audio_in_ptr2[i];
 8001b56:	4b7c      	ldr	r3, [pc, #496]	; (8001d48 <audioPreproc+0x288>)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	441a      	add	r2, r3
 8001b60:	4b7b      	ldr	r3, [pc, #492]	; (8001d50 <audioPreproc+0x290>)
 8001b62:	6819      	ldr	r1, [r3, #0]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	440b      	add	r3, r1
 8001b6a:	8812      	ldrh	r2, [r2, #0]
 8001b6c:	b292      	uxth	r2, r2
 8001b6e:	801a      	strh	r2, [r3, #0]
			}
			/*
			 * Compute estimate of DC offset based on the last DC_BUF_SZ mean values computed in buffers
			 */
			if(i<DC_BUF_SZ){
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b63      	cmp	r3, #99	; 0x63
 8001b74:	dc13      	bgt.n	8001b9e <audioPreproc+0xde>
				dc1+=dc_buf_ch1[dc_buf_idx];
 8001b76:	4b77      	ldr	r3, [pc, #476]	; (8001d54 <audioPreproc+0x294>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b76      	ldr	r3, [pc, #472]	; (8001d58 <audioPreproc+0x298>)
 8001b7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b82:	461a      	mov	r2, r3
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	4413      	add	r3, r2
 8001b88:	61fb      	str	r3, [r7, #28]
				dc2+=dc_buf_ch2[dc_buf_idx];
 8001b8a:	4b72      	ldr	r3, [pc, #456]	; (8001d54 <audioPreproc+0x294>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b72      	ldr	r3, [pc, #456]	; (8001d5c <audioPreproc+0x29c>)
 8001b92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b96:	461a      	mov	r2, r3
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
		for( int i=0 ; i<AUDIO_BUF_SZ || i<DC_BUF_SZ ; i++ ){
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001baa:	dbad      	blt.n	8001b08 <audioPreproc+0x48>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b63      	cmp	r3, #99	; 0x63
 8001bb0:	ddaa      	ble.n	8001b08 <audioPreproc+0x48>
		}

		/*
		 * Enqueue current mean value of input buffer in dc buffer
		 */
		dc_buf_ch1[dc_buf_idx]=(uint16_t)( mean1/AUDIO_BUF_SZ );
 8001bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb4:	0a59      	lsrs	r1, r3, #9
 8001bb6:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <audioPreproc+0x294>)
 8001bb8:	881b      	ldrh	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	b289      	uxth	r1, r1
 8001bbe:	4b66      	ldr	r3, [pc, #408]	; (8001d58 <audioPreproc+0x298>)
 8001bc0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		dc_buf_ch2[dc_buf_idx]=(uint16_t)( mean2/AUDIO_BUF_SZ );
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	0a59      	lsrs	r1, r3, #9
 8001bc8:	4b62      	ldr	r3, [pc, #392]	; (8001d54 <audioPreproc+0x294>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	b289      	uxth	r1, r1
 8001bd0:	4b62      	ldr	r3, [pc, #392]	; (8001d5c <audioPreproc+0x29c>)
 8001bd2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		dc1/=DC_BUF_SZ;
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	4a61      	ldr	r2, [pc, #388]	; (8001d60 <audioPreproc+0x2a0>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	61fb      	str	r3, [r7, #28]
		dc2/=DC_BUF_SZ;
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4a5e      	ldr	r2, [pc, #376]	; (8001d60 <audioPreproc+0x2a0>)
 8001be6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	61bb      	str	r3, [r7, #24]
		/*
		 * Subtract DC offset to have 0 mean signal in cross-correlation buffer.
		 * Compute RMS of signals in ch1-2 input buffers
		 */

		for(int i=0,idx;i<AUDIO_BUF_SZ;i++){
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	e058      	b.n	8001ca6 <audioPreproc+0x1e6>

			idx=xcor_buf_oset * AUDIO_BUF_SZ + i;
 8001bf4:	4b5b      	ldr	r3, [pc, #364]	; (8001d64 <audioPreproc+0x2a4>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	025b      	lsls	r3, r3, #9
 8001bfa:	68ba      	ldr	r2, [r7, #8]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	607b      	str	r3, [r7, #4]
			xcor_buf1[idx]=audio_in_ptr1[i] - dc1;
 8001c00:	4b50      	ldr	r3, [pc, #320]	; (8001d44 <audioPreproc+0x284>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	4619      	mov	r1, r3
 8001c16:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <audioPreproc+0x2a8>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			xcor_buf2[idx]=audio_in_ptr2[i] - dc2;
 8001c1e:	4b4a      	ldr	r3, [pc, #296]	; (8001d48 <audioPreproc+0x288>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	4413      	add	r3, r2
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	4619      	mov	r1, r3
 8001c34:	4a4d      	ldr	r2, [pc, #308]	; (8001d6c <audioPreproc+0x2ac>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			rms1+=( xcor_buf1[idx] * xcor_buf1[idx] ) / AUDIO_BUF_SZ;
 8001c3c:	4a4a      	ldr	r2, [pc, #296]	; (8001d68 <audioPreproc+0x2a8>)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c44:	4948      	ldr	r1, [pc, #288]	; (8001d68 <audioPreproc+0x2a8>)
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	da01      	bge.n	8001c58 <audioPreproc+0x198>
 8001c54:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c58:	125b      	asrs	r3, r3, #9
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c62:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	edc7 7a05 	vstr	s15, [r7, #20]
			rms2+=( xcor_buf2[idx] * xcor_buf2[idx] ) / AUDIO_BUF_SZ;
 8001c6e:	4a3f      	ldr	r2, [pc, #252]	; (8001d6c <audioPreproc+0x2ac>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c76:	493d      	ldr	r1, [pc, #244]	; (8001d6c <audioPreproc+0x2ac>)
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001c7e:	fb02 f303 	mul.w	r3, r2, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	da01      	bge.n	8001c8a <audioPreproc+0x1ca>
 8001c86:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001c8a:	125b      	asrs	r3, r3, #9
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c94:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	edc7 7a04 	vstr	s15, [r7, #16]
		for(int i=0,idx;i<AUDIO_BUF_SZ;i++){
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cac:	dba2      	blt.n	8001bf4 <audioPreproc+0x134>

		}

		rms1=sqrt(rms1);
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7fe fc4a 	bl	8000548 <__aeabi_f2d>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	ec43 2b10 	vmov	d0, r2, r3
 8001cbc:	f00c f800 	bl	800dcc0 <sqrt>
 8001cc0:	ec53 2b10 	vmov	r2, r3, d0
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	f7fe ff6e 	bl	8000ba8 <__aeabi_d2f>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	617b      	str	r3, [r7, #20]
		rms2=sqrt(rms2);
 8001cd0:	6938      	ldr	r0, [r7, #16]
 8001cd2:	f7fe fc39 	bl	8000548 <__aeabi_f2d>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	ec43 2b10 	vmov	d0, r2, r3
 8001cde:	f00b ffef 	bl	800dcc0 <sqrt>
 8001ce2:	ec53 2b10 	vmov	r2, r3, d0
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f7fe ff5d 	bl	8000ba8 <__aeabi_d2f>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	613b      	str	r3, [r7, #16]
#endif
		
		/*
		 * If any of the input buffers has RMS under threshold
		 */
		if(rms1>threshold && rms2>threshold){
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <audioPreproc+0x2b0>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	dd35      	ble.n	8001d78 <audioPreproc+0x2b8>
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <audioPreproc+0x2b0>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	ee07 3a90 	vmov	s15, r3
 8001d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d18:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	dd28      	ble.n	8001d78 <audioPreproc+0x2b8>
					,(int)rms1,(int)rms2,threshold, (float)rms1/(float)rms2 );
			HAL_UART_Transmit(&huart6,(uint8_t*)msg_buf,strlen(msg_buf),20);
#endif

			/*Increment over threshold counter up to 3*/
			if(ovr_thr_cnt<BUF_OVR_THR)
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <audioPreproc+0x2b4>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d827      	bhi.n	8001d7e <audioPreproc+0x2be>
				ovr_thr_cnt++;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <audioPreproc+0x2b4>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	3301      	adds	r3, #1
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <audioPreproc+0x2b4>)
 8001d38:	701a      	strb	r2, [r3, #0]
			if(ovr_thr_cnt<BUF_OVR_THR)
 8001d3a:	e020      	b.n	8001d7e <audioPreproc+0x2be>
 8001d3c:	2200005c 	.word	0x2200005c
 8001d40:	22000058 	.word	0x22000058
 8001d44:	20002950 	.word	0x20002950
 8001d48:	20002958 	.word	0x20002958
 8001d4c:	20002954 	.word	0x20002954
 8001d50:	2000295c 	.word	0x2000295c
 8001d54:	20002af0 	.word	0x20002af0
 8001d58:	20002960 	.word	0x20002960
 8001d5c:	20002a28 	.word	0x20002a28
 8001d60:	51eb851f 	.word	0x51eb851f
 8001d64:	20005af8 	.word	0x20005af8
 8001d68:	20002af8 	.word	0x20002af8
 8001d6c:	200042f8 	.word	0x200042f8
 8001d70:	20002af4 	.word	0x20002af4
 8001d74:	20002af2 	.word	0x20002af2
		}
		else{
			ovr_thr_cnt=0;
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <audioPreproc+0x304>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]

		/*
		 * Update cross-correlation circular buffer offset
		 * XCOR_BUF_SZ = AUDIO_BUF_SZ * XCOR_BUF_MULT
		 */
		xcor_buf_oset=( xcor_buf_oset + 1 ) % XCOR_BUF_MULT;
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <audioPreproc+0x308>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	1c5a      	adds	r2, r3, #1
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <audioPreproc+0x30c>)
 8001d86:	fb83 3102 	smull	r3, r1, r3, r2
 8001d8a:	17d3      	asrs	r3, r2, #31
 8001d8c:	1ac9      	subs	r1, r1, r3
 8001d8e:	460b      	mov	r3, r1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	440b      	add	r3, r1
 8001d94:	1ad1      	subs	r1, r2, r3
 8001d96:	b2ca      	uxtb	r2, r1
 8001d98:	4b0b      	ldr	r3, [pc, #44]	; (8001dc8 <audioPreproc+0x308>)
 8001d9a:	701a      	strb	r2, [r3, #0]

		/*
		 * Update DC buffer offset idx
		 */
		dc_buf_idx=( dc_buf_idx + 1 ) % DC_BUF_SZ;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <audioPreproc+0x310>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <audioPreproc+0x314>)
 8001da4:	fb82 1203 	smull	r1, r2, r2, r3
 8001da8:	1151      	asrs	r1, r2, #5
 8001daa:	17da      	asrs	r2, r3, #31
 8001dac:	1a8a      	subs	r2, r1, r2
 8001dae:	2164      	movs	r1, #100	; 0x64
 8001db0:	fb01 f202 	mul.w	r2, r1, r2
 8001db4:	1a9a      	subs	r2, r3, r2
 8001db6:	b292      	uxth	r2, r2
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <audioPreproc+0x310>)
 8001dba:	801a      	strh	r2, [r3, #0]

	}
}
 8001dbc:	bf00      	nop
 8001dbe:	3728      	adds	r7, #40	; 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20002af2 	.word	0x20002af2
 8001dc8:	20005af8 	.word	0x20005af8
 8001dcc:	55555556 	.word	0x55555556
 8001dd0:	20002af0 	.word	0x20002af0
 8001dd4:	51eb851f 	.word	0x51eb851f

08001dd8 <logMotor>:


/*
 * Log debug UART interface motor position computed since the latest call to rstAngle(&motor)
 */
void logMotor(){
 8001dd8:	b5b0      	push	{r4, r5, r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af04      	add	r7, sp, #16

	sprintf(msg_buf,"Motor position: %f\r\nStep angular resolution: %f\r\nAngular index:%d \r\n\r\n\r\n",
								motor.ang_idx*motor.res,motor.res,motor.ang_idx);
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <logMotor+0x68>)
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	ee07 3a90 	vmov	s15, r3
 8001de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <logMotor+0x68>)
 8001dec:	edd3 7a05 	vldr	s15, [r3, #20]
 8001df0:	ee67 7a27 	vmul.f32	s15, s14, s15
	sprintf(msg_buf,"Motor position: %f\r\nStep angular resolution: %f\r\nAngular index:%d \r\n\r\n\r\n",
 8001df4:	ee17 0a90 	vmov	r0, s15
 8001df8:	f7fe fba6 	bl	8000548 <__aeabi_f2d>
 8001dfc:	4604      	mov	r4, r0
 8001dfe:	460d      	mov	r5, r1
								motor.ang_idx*motor.res,motor.res,motor.ang_idx);
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <logMotor+0x68>)
 8001e02:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buf,"Motor position: %f\r\nStep angular resolution: %f\r\nAngular index:%d \r\n\r\n\r\n",
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb9f 	bl	8000548 <__aeabi_f2d>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	490c      	ldr	r1, [pc, #48]	; (8001e40 <logMotor+0x68>)
 8001e10:	6909      	ldr	r1, [r1, #16]
 8001e12:	9102      	str	r1, [sp, #8]
 8001e14:	e9cd 2300 	strd	r2, r3, [sp]
 8001e18:	4622      	mov	r2, r4
 8001e1a:	462b      	mov	r3, r5
 8001e1c:	4909      	ldr	r1, [pc, #36]	; (8001e44 <logMotor+0x6c>)
 8001e1e:	480a      	ldr	r0, [pc, #40]	; (8001e48 <logMotor+0x70>)
 8001e20:	f009 fcd6 	bl	800b7d0 <siprintf>
	HAL_UART_Transmit_DMA(&huart6,(uint8_t*)msg_buf,strlen(msg_buf));
 8001e24:	4808      	ldr	r0, [pc, #32]	; (8001e48 <logMotor+0x70>)
 8001e26:	f7fe f9d3 	bl	80001d0 <strlen>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4905      	ldr	r1, [pc, #20]	; (8001e48 <logMotor+0x70>)
 8001e32:	4806      	ldr	r0, [pc, #24]	; (8001e4c <logMotor+0x74>)
 8001e34:	f007 ffb0 	bl	8009d98 <HAL_UART_Transmit_DMA>
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000818 	.word	0x20000818
 8001e44:	0800debc 	.word	0x0800debc
 8001e48:	2000084c 	.word	0x2000084c
 8001e4c:	2000070c 	.word	0x2000070c

08001e50 <motorControl>:

/*
 * Read joystick's position and EXTI buttons and perform one motor step according to joystick direction
 */
void motorControl(){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0

	JstickDir dir;

	if(MOTOR_MV){
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <motorControl+0x60>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d024      	beq.n	8001ea8 <motorControl+0x58>
		MOTOR_MV=0;
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <motorControl+0x60>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

		dir=jstickGetDirPoll(&js);
 8001e64:	4813      	ldr	r0, [pc, #76]	; (8001eb4 <motorControl+0x64>)
 8001e66:	f7ff fa37 	bl	80012d8 <jstickGetDirPoll>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
		if(dir==LEFT || LEFT_BUT_PUSH){
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d003      	beq.n	8001e7c <motorControl+0x2c>
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <motorControl+0x68>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <motorControl+0x3c>
			LEFT_BUT_PUSH=0;
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <motorControl+0x68>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
			step(&motor,1);
 8001e82:	2101      	movs	r1, #1
 8001e84:	480d      	ldr	r0, [pc, #52]	; (8001ebc <motorControl+0x6c>)
 8001e86:	f7ff fb80 	bl	800158a <step>
			logMotor();
#endif
		}
	}

}
 8001e8a:	e00d      	b.n	8001ea8 <motorControl+0x58>
		else if(dir==RIGHT || RIGHT_BUT_PUSH){
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d003      	beq.n	8001e9a <motorControl+0x4a>
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <motorControl+0x70>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d006      	beq.n	8001ea8 <motorControl+0x58>
			RIGHT_BUT_PUSH=0;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	; (8001ec0 <motorControl+0x70>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
			step(&motor,0);
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <motorControl+0x6c>)
 8001ea4:	f7ff fb71 	bl	800158a <step>
}
 8001ea8:	bf00      	nop
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	2200003c 	.word	0x2200003c
 8001eb4:	20000840 	.word	0x20000840
 8001eb8:	22000074 	.word	0x22000074
 8001ebc:	20000818 	.word	0x20000818
 8001ec0:	22000070 	.word	0x22000070

08001ec4 <initCalibration>:

/*Functions to init calibration/sound source localization mode*/
void initCalibration(){
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
	GPIOD->ODR&=~GPIO_PIN_15;
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <initCalibration+0x1c>)
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <initCalibration+0x1c>)
 8001ece:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ed2:	6153      	str	r3, [r2, #20]
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40020c00 	.word	0x40020c00

08001ee4 <initSSL>:

void initSSL(){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0

	uint16_t dc_init=2048;
 8001eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001eee:	807b      	strh	r3, [r7, #2]
	  /*Stop playback loop*/
	  /*HAL_DAC_Stop_DMA(&hdac,DAC_CHANNEL_1);
	  HAL_DAC_Stop_DMA(&hdac,DAC_CHANNEL_2);*/

	  /*Reset motor angle idx to 0 to set initial camera offset*/
	  rstAngle(&motor);
 8001ef0:	4820      	ldr	r0, [pc, #128]	; (8001f74 <initSSL+0x90>)
 8001ef2:	f7ff fa8a 	bl	800140a <rstAngle>
	  logMotor();
 8001ef6:	f7ff ff6f 	bl	8001dd8 <logMotor>
	  mode=1;
 8001efa:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <initSSL+0x94>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]

	  /*Reset xcor_buf_oset*/
	  xcor_buf_oset=0;
 8001f00:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <initSSL+0x98>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
	  /*Reset DC buffer idx*/
	  dc_buf_idx=0;
 8001f06:	4b1e      	ldr	r3, [pc, #120]	; (8001f80 <initSSL+0x9c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	801a      	strh	r2, [r3, #0]
	  /*Reset threshold to a start value of 100*/
	  threshold=30;
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <initSSL+0xa0>)
 8001f0e:	221e      	movs	r2, #30
 8001f10:	801a      	strh	r2, [r3, #0]
	  /*Reset over threshold counter*/
	  ovr_thr_cnt=0;
 8001f12:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <initSSL+0xa4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]

	  /*
	   * Fill dc offset estimation
	   */
	  for(int i=0;i<DC_BUF_SZ;i++){
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	e00c      	b.n	8001f38 <initSSL+0x54>
		  dc_buf_ch1[i]=dc_init;
 8001f1e:	491b      	ldr	r1, [pc, #108]	; (8001f8c <initSSL+0xa8>)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		  dc_buf_ch2[i]=dc_init;
 8001f28:	4919      	ldr	r1, [pc, #100]	; (8001f90 <initSSL+0xac>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	887a      	ldrh	r2, [r7, #2]
 8001f2e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  for(int i=0;i<DC_BUF_SZ;i++){
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3301      	adds	r3, #1
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b63      	cmp	r3, #99	; 0x63
 8001f3c:	ddef      	ble.n	8001f1e <initSSL+0x3a>
	  }

	  sprintf(msg_buf,"Max delay between audio signals (in samples):%d\r\b",MAX_DELAY);
 8001f3e:	220e      	movs	r2, #14
 8001f40:	4914      	ldr	r1, [pc, #80]	; (8001f94 <initSSL+0xb0>)
 8001f42:	4815      	ldr	r0, [pc, #84]	; (8001f98 <initSSL+0xb4>)
 8001f44:	f009 fc44 	bl	800b7d0 <siprintf>
	  HAL_UART_Transmit(&huart6,(uint8_t*)msg_buf,strlen(msg_buf),HAL_MAX_DELAY);
 8001f48:	4813      	ldr	r0, [pc, #76]	; (8001f98 <initSSL+0xb4>)
 8001f4a:	f7fe f941 	bl	80001d0 <strlen>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f56:	4910      	ldr	r1, [pc, #64]	; (8001f98 <initSSL+0xb4>)
 8001f58:	4810      	ldr	r0, [pc, #64]	; (8001f9c <initSSL+0xb8>)
 8001f5a:	f007 fe8a 	bl	8009c72 <HAL_UART_Transmit>
	  /*Toggle led to notify the mode change*/
	  GPIOD->ODR|=GPIO_PIN_15;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <initSSL+0xbc>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <initSSL+0xbc>)
 8001f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f68:	6153      	str	r3, [r2, #20]
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000818 	.word	0x20000818
 8001f78:	20002af6 	.word	0x20002af6
 8001f7c:	20005af8 	.word	0x20005af8
 8001f80:	20002af0 	.word	0x20002af0
 8001f84:	20002af4 	.word	0x20002af4
 8001f88:	20002af2 	.word	0x20002af2
 8001f8c:	20002960 	.word	0x20002960
 8001f90:	20002a28 	.word	0x20002a28
 8001f94:	0800df08 	.word	0x0800df08
 8001f98:	2000084c 	.word	0x2000084c
 8001f9c:	2000070c 	.word	0x2000070c
 8001fa0:	40020c00 	.word	0x40020c00

08001fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001faa:	f001 fca9 	bl	8003900 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fae:	f000 f8ed 	bl	800218c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_I2C_DeInit(&hi2c1);
 8001fb2:	485f      	ldr	r0, [pc, #380]	; (8002130 <main+0x18c>)
 8001fb4:	f003 fe5c 	bl	8005c70 <HAL_I2C_DeInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fb8:	f000 fcd4 	bl	8002964 <MX_GPIO_Init>
  MX_TIM6_Init();
 8001fbc:	f000 fb90 	bl	80026e0 <MX_TIM6_Init>
  MX_DMA_Init();
 8001fc0:	f000 fc72 	bl	80028a8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001fc4:	f000 fa76 	bl	80024b4 <MX_I2C1_Init>
  MX_ADC3_Init();
 8001fc8:	f000 f9ee 	bl	80023a8 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001fcc:	f000 f948 	bl	8002260 <MX_ADC1_Init>
  MX_DAC_Init();
 8001fd0:	f000 fa3c 	bl	800244c <MX_DAC_Init>
  MX_TIM2_Init();
 8001fd4:	f000 fa9c 	bl	8002510 <MX_TIM2_Init>
  MX_ADC2_Init();
 8001fd8:	f000 f994 	bl	8002304 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8001fdc:	f000 fc10 	bl	8002800 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001fe0:	f000 fbb4 	bl	800274c <MX_TIM7_Init>
  MX_USART6_UART_Init();
 8001fe4:	f000 fc36 	bl	8002854 <MX_USART6_UART_Init>
  MX_TIM10_Init();
 8001fe8:	f000 fbe6 	bl	80027b8 <MX_TIM10_Init>
  MX_TIM4_Init();
 8001fec:	f000 fb2a 	bl	8002644 <MX_TIM4_Init>
  MX_TIM3_Init();
 8001ff0:	f000 fada 	bl	80025a8 <MX_TIM3_Init>
#endif

  /*
   * Init DMA handle data structures for thermal image in/out transfer
   */
  HAL_DMA_Init(&hdma_i2c1_rx);
 8001ff4:	484f      	ldr	r0, [pc, #316]	; (8002134 <main+0x190>)
 8001ff6:	f002 fdb3 	bl	8004b60 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart3_tx);
 8001ffa:	484f      	ldr	r0, [pc, #316]	; (8002138 <main+0x194>)
 8001ffc:	f002 fdb0 	bl	8004b60 <HAL_DMA_Init>

  HAL_Delay(50);
 8002000:	2032      	movs	r0, #50	; 0x32
 8002002:	f001 fcbf 	bl	8003984 <HAL_Delay>

  /*Init amg8833 sensor with ad select pin connected to the ground*/
  amg8833Init(&cam,&hi2c1,0);
 8002006:	2200      	movs	r2, #0
 8002008:	4949      	ldr	r1, [pc, #292]	; (8002130 <main+0x18c>)
 800200a:	484c      	ldr	r0, [pc, #304]	; (800213c <main+0x198>)
 800200c:	f7fe ff9e 	bl	8000f4c <amg8833Init>

  /*Wait until amg8833 is ready*/
  while(!amg8833IsReady( &cam, 5 )){
 8002010:	e008      	b.n	8002024 <main+0x80>
	  GPIOD->ODR|=GPIO_PIN_14;
 8002012:	4b4b      	ldr	r3, [pc, #300]	; (8002140 <main+0x19c>)
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	4a4a      	ldr	r2, [pc, #296]	; (8002140 <main+0x19c>)
 8002018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201c:	6153      	str	r3, [r2, #20]
	  HAL_Delay(20);
 800201e:	2014      	movs	r0, #20
 8002020:	f001 fcb0 	bl	8003984 <HAL_Delay>
  while(!amg8833IsReady( &cam, 5 )){
 8002024:	2105      	movs	r1, #5
 8002026:	4845      	ldr	r0, [pc, #276]	; (800213c <main+0x198>)
 8002028:	f7fe ffa8 	bl	8000f7c <amg8833IsReady>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0ef      	beq.n	8002012 <main+0x6e>
  }

  GPIOD->ODR&=~GPIO_PIN_14;
 8002032:	4b43      	ldr	r3, [pc, #268]	; (8002140 <main+0x19c>)
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	4a42      	ldr	r2, [pc, #264]	; (8002140 <main+0x19c>)
 8002038:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800203c:	6153      	str	r3, [r2, #20]

  /*
   * Reset camera to initial condition
   */
  amg8833Reset(&cam, 3);
 800203e:	2103      	movs	r1, #3
 8002040:	483e      	ldr	r0, [pc, #248]	; (800213c <main+0x198>)
 8002042:	f7ff f83c 	bl	80010be <amg8833Reset>

  HAL_Delay(50);
 8002046:	2032      	movs	r0, #50	; 0x32
 8002048:	f001 fc9c 	bl	8003984 <HAL_Delay>
  /*
   * Start timer 3 to trigger interrupt flag reading on AMG camera
   */
  //HAL_TIM_Base_Start_IT(&htim3);
  /*Start Timer 6 - Update event every 1/20 s for thermal camera reading*/
  HAL_TIM_Base_Start_IT(&htim6);
 800204c:	483d      	ldr	r0, [pc, #244]	; (8002144 <main+0x1a0>)
 800204e:	f007 f963 	bl	8009318 <HAL_TIM_Base_Start_IT>
  /*Start Timer 7 - Update event every 1/10 s for motor control*/
  HAL_TIM_Base_Start_IT(&htim7);
 8002052:	483d      	ldr	r0, [pc, #244]	; (8002148 <main+0x1a4>)
 8002054:	f007 f960 	bl	8009318 <HAL_TIM_Base_Start_IT>

  /*
   * Start audio clock
   */
  HAL_TIM_Base_Start_IT(&htim2);
 8002058:	483c      	ldr	r0, [pc, #240]	; (800214c <main+0x1a8>)
 800205a:	f007 f95d 	bl	8009318 <HAL_TIM_Base_Start_IT>
  /*
   * Start audio DMA continous reading
   * ADC1 and DAC both works with htim2 conversion clock
   */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)audio_in_buf1,AUDIO_TOT_BUF_SZ);
 800205e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002062:	493b      	ldr	r1, [pc, #236]	; (8002150 <main+0x1ac>)
 8002064:	483b      	ldr	r0, [pc, #236]	; (8002154 <main+0x1b0>)
 8002066:	f001 fe53 	bl	8003d10 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint32_t*)audio_in_buf2,AUDIO_TOT_BUF_SZ);
 800206a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800206e:	493a      	ldr	r1, [pc, #232]	; (8002158 <main+0x1b4>)
 8002070:	483a      	ldr	r0, [pc, #232]	; (800215c <main+0x1b8>)
 8002072:	f001 fe4d 	bl	8003d10 <HAL_ADC_Start_DMA>

  /*Start DMA request to playback audio through DAC channels 1 and 2*/
  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_1,(uint32_t*)audio_out_buf1,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 8002076:	2300      	movs	r3, #0
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800207e:	4a38      	ldr	r2, [pc, #224]	; (8002160 <main+0x1bc>)
 8002080:	2100      	movs	r1, #0
 8002082:	4838      	ldr	r0, [pc, #224]	; (8002164 <main+0x1c0>)
 8002084:	f002 fb4c 	bl	8004720 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_2,(uint32_t*)audio_out_buf2,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 8002088:	2300      	movs	r3, #0
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002090:	4a35      	ldr	r2, [pc, #212]	; (8002168 <main+0x1c4>)
 8002092:	2110      	movs	r1, #16
 8002094:	4833      	ldr	r0, [pc, #204]	; (8002164 <main+0x1c0>)
 8002096:	f002 fb43 	bl	8004720 <HAL_DAC_Start_DMA>

  /*Init step motor data structure*/
  initStep(&motor,GPIO_PIN_1,GPIO_PIN_2,GPIO_PIN_3,GPIO_PIN_4,GPIOD,FULL,&htim4);
 800209a:	4b34      	ldr	r3, [pc, #208]	; (800216c <main+0x1c8>)
 800209c:	9303      	str	r3, [sp, #12]
 800209e:	2301      	movs	r3, #1
 80020a0:	9302      	str	r3, [sp, #8]
 80020a2:	4b27      	ldr	r3, [pc, #156]	; (8002140 <main+0x19c>)
 80020a4:	9301      	str	r3, [sp, #4]
 80020a6:	2310      	movs	r3, #16
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2308      	movs	r3, #8
 80020ac:	2204      	movs	r2, #4
 80020ae:	2102      	movs	r1, #2
 80020b0:	482f      	ldr	r0, [pc, #188]	; (8002170 <main+0x1cc>)
 80020b2:	f7ff f937 	bl	8001324 <initStep>

  /*Init joystick img_buf structure with yellow error pin*/
  initJstick(&js,&hadc3,GPIO_PIN_12,GPIOD);
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <main+0x19c>)
 80020b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020bc:	492d      	ldr	r1, [pc, #180]	; (8002174 <main+0x1d0>)
 80020be:	482e      	ldr	r0, [pc, #184]	; (8002178 <main+0x1d4>)
 80020c0:	f7ff f8f3 	bl	80012aa <initJstick>
  /*Start ADC3 associated with joystick*/
  HAL_ADC_Start(&hadc3);
 80020c4:	482b      	ldr	r0, [pc, #172]	; (8002174 <main+0x1d0>)
 80020c6:	f001 fcc5 	bl	8003a54 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MODE_TOGGLE=0;
 80020ca:	4b2c      	ldr	r3, [pc, #176]	; (800217c <main+0x1d8>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
  mode=1;
 80020d0:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <main+0x1dc>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
  threshold=100;
 80020d6:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <main+0x1e0>)
 80020d8:	2264      	movs	r2, #100	; 0x64
 80020da:	801a      	strh	r2, [r3, #0]

  while (1)
  {
	  thermalImgFSM();
 80020dc:	f7ff fb24 	bl	8001728 <thermalImgFSM>

	  /*MODE_TOGGLE bit is set by the EXTI4 button line debounce timer TIM10*/
	  if( !MODE_TOGGLE ){
 80020e0:	4b26      	ldr	r3, [pc, #152]	; (800217c <main+0x1d8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10d      	bne.n	8002104 <main+0x160>
		  /*
		   * Calibration mode:
		   * -microphones AD conversion can be tested connecting an oscilloscope or an amplifier to DAC channels 1/2
		   * -camera can be moved manually using joystick and buttons to set angular offset
		   */
		  if(mode){
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <main+0x1dc>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d004      	beq.n	80020fa <main+0x156>
			  initCalibration();
 80020f0:	f7ff fee8 	bl	8001ec4 <initCalibration>
			  mode=0;
 80020f4:	4b22      	ldr	r3, [pc, #136]	; (8002180 <main+0x1dc>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
		  }

		  audioPlayback();
 80020fa:	f7ff fc99 	bl	8001a30 <audioPlayback>
		  motorControl();
 80020fe:	f7ff fea7 	bl	8001e50 <motorControl>
 8002102:	e7eb      	b.n	80020dc <main+0x138>
	  }
	  else{
		  if(!mode){
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <main+0x1dc>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d107      	bne.n	800211c <main+0x178>
			  /*
			   * Sound Source Localization mode
			   */
			  initSSL();
 800210c:	f7ff feea 	bl	8001ee4 <initSSL>
			  mode=1;
 8002110:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <main+0x1dc>)
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
			  HAL_Delay( 100 );
 8002116:	2064      	movs	r0, #100	; 0x64
 8002118:	f001 fc34 	bl	8003984 <HAL_Delay>
		  }
		  audioPreproc();
 800211c:	f7ff fcd0 	bl	8001ac0 <audioPreproc>

		 if( ovr_thr_cnt >= BUF_OVR_THR ){
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <main+0x1e4>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d9d9      	bls.n	80020dc <main+0x138>
			 targetDetect();
 8002128:	f7ff fb72 	bl	8001810 <targetDetect>
	  thermalImgFSM();
 800212c:	e7d6      	b.n	80020dc <main+0x138>
 800212e:	bf00      	nop
 8002130:	20000464 	.word	0x20000464
 8002134:	200004b8 	.word	0x200004b8
 8002138:	20000750 	.word	0x20000750
 800213c:	20000810 	.word	0x20000810
 8002140:	40020c00 	.word	0x40020c00
 8002144:	200005f0 	.word	0x200005f0
 8002148:	20000638 	.word	0x20000638
 800214c:	20000518 	.word	0x20000518
 8002150:	20000950 	.word	0x20000950
 8002154:	200001f8 	.word	0x200001f8
 8002158:	20001950 	.word	0x20001950
 800215c:	20000240 	.word	0x20000240
 8002160:	20001150 	.word	0x20001150
 8002164:	20000390 	.word	0x20000390
 8002168:	20002150 	.word	0x20002150
 800216c:	200005a8 	.word	0x200005a8
 8002170:	20000818 	.word	0x20000818
 8002174:	20000288 	.word	0x20000288
 8002178:	20000840 	.word	0x20000840
 800217c:	22000078 	.word	0x22000078
 8002180:	20002af6 	.word	0x20002af6
 8002184:	20002af4 	.word	0x20002af4
 8002188:	20002af2 	.word	0x20002af2

0800218c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b094      	sub	sp, #80	; 0x50
 8002190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002192:	f107 0320 	add.w	r3, r7, #32
 8002196:	2230      	movs	r2, #48	; 0x30
 8002198:	2100      	movs	r1, #0
 800219a:	4618      	mov	r0, r3
 800219c:	f008 fea6 	bl	800aeec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	4b28      	ldr	r3, [pc, #160]	; (8002258 <SystemClock_Config+0xcc>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	4a27      	ldr	r2, [pc, #156]	; (8002258 <SystemClock_Config+0xcc>)
 80021ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021be:	6413      	str	r3, [r2, #64]	; 0x40
 80021c0:	4b25      	ldr	r3, [pc, #148]	; (8002258 <SystemClock_Config+0xcc>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021cc:	2300      	movs	r3, #0
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <SystemClock_Config+0xd0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a21      	ldr	r2, [pc, #132]	; (800225c <SystemClock_Config+0xd0>)
 80021d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b1f      	ldr	r3, [pc, #124]	; (800225c <SystemClock_Config+0xd0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e4:	607b      	str	r3, [r7, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021e8:	2302      	movs	r3, #2
 80021ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021ec:	2301      	movs	r3, #1
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021f0:	2310      	movs	r3, #16
 80021f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021f4:	2302      	movs	r3, #2
 80021f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021f8:	2300      	movs	r3, #0
 80021fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021fc:	2308      	movs	r3, #8
 80021fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002200:	2332      	movs	r3, #50	; 0x32
 8002202:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002204:	2302      	movs	r3, #2
 8002206:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002208:	2307      	movs	r3, #7
 800220a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800220c:	f107 0320 	add.w	r3, r7, #32
 8002210:	4618      	mov	r0, r3
 8002212:	f006 fb67 	bl	80088e4 <HAL_RCC_OscConfig>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800221c:	f000 fcea 	bl	8002bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002220:	230f      	movs	r3, #15
 8002222:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002224:	2302      	movs	r3, #2
 8002226:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002228:	2300      	movs	r3, #0
 800222a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800222c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002230:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002236:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	2101      	movs	r1, #1
 800223e:	4618      	mov	r0, r3
 8002240:	f006 fdc8 	bl	8008dd4 <HAL_RCC_ClockConfig>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800224a:	f000 fcd3 	bl	8002bf4 <Error_Handler>
  }
}
 800224e:	bf00      	nop
 8002250:	3750      	adds	r7, #80	; 0x50
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40007000 	.word	0x40007000

08002260 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002266:	463b      	mov	r3, r7
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <MX_ADC1_Init+0x9c>)
 8002274:	4a22      	ldr	r2, [pc, #136]	; (8002300 <MX_ADC1_Init+0xa0>)
 8002276:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002278:	4b20      	ldr	r3, [pc, #128]	; (80022fc <MX_ADC1_Init+0x9c>)
 800227a:	2200      	movs	r2, #0
 800227c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800227e:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <MX_ADC1_Init+0x9c>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <MX_ADC1_Init+0x9c>)
 8002286:	2200      	movs	r2, #0
 8002288:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <MX_ADC1_Init+0x9c>)
 800228c:	2200      	movs	r2, #0
 800228e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <MX_ADC1_Init+0x9c>)
 8002292:	2200      	movs	r2, #0
 8002294:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <MX_ADC1_Init+0x9c>)
 800229a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <MX_ADC1_Init+0x9c>)
 80022a2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80022a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <MX_ADC1_Init+0x9c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <MX_ADC1_Init+0x9c>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <MX_ADC1_Init+0x9c>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <MX_ADC1_Init+0x9c>)
 80022be:	2201      	movs	r2, #1
 80022c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022c2:	480e      	ldr	r0, [pc, #56]	; (80022fc <MX_ADC1_Init+0x9c>)
 80022c4:	f001 fb82 	bl	80039cc <HAL_ADC_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80022ce:	f000 fc91 	bl	8002bf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80022d2:	2308      	movs	r3, #8
 80022d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022d6:	2301      	movs	r3, #1
 80022d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022de:	463b      	mov	r3, r7
 80022e0:	4619      	mov	r1, r3
 80022e2:	4806      	ldr	r0, [pc, #24]	; (80022fc <MX_ADC1_Init+0x9c>)
 80022e4:	f001 fe46 	bl	8003f74 <HAL_ADC_ConfigChannel>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80022ee:	f000 fc81 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	200001f8 	.word	0x200001f8
 8002300:	40012000 	.word	0x40012000

08002304 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800230a:	463b      	mov	r3, r7
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <MX_ADC2_Init+0x9c>)
 8002318:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <MX_ADC2_Init+0xa0>)
 800231a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800231c:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <MX_ADC2_Init+0x9c>)
 800231e:	2200      	movs	r2, #0
 8002320:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002322:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <MX_ADC2_Init+0x9c>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <MX_ADC2_Init+0x9c>)
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800232e:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <MX_ADC2_Init+0x9c>)
 8002330:	2200      	movs	r2, #0
 8002332:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <MX_ADC2_Init+0x9c>)
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800233c:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <MX_ADC2_Init+0x9c>)
 800233e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002342:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8002344:	4b16      	ldr	r3, [pc, #88]	; (80023a0 <MX_ADC2_Init+0x9c>)
 8002346:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800234c:	4b14      	ldr	r3, [pc, #80]	; (80023a0 <MX_ADC2_Init+0x9c>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002352:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <MX_ADC2_Init+0x9c>)
 8002354:	2201      	movs	r2, #1
 8002356:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002358:	4b11      	ldr	r3, [pc, #68]	; (80023a0 <MX_ADC2_Init+0x9c>)
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002360:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <MX_ADC2_Init+0x9c>)
 8002362:	2201      	movs	r2, #1
 8002364:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002366:	480e      	ldr	r0, [pc, #56]	; (80023a0 <MX_ADC2_Init+0x9c>)
 8002368:	f001 fb30 	bl	80039cc <HAL_ADC_Init>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8002372:	f000 fc3f 	bl	8002bf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002376:	2307      	movs	r3, #7
 8002378:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002382:	463b      	mov	r3, r7
 8002384:	4619      	mov	r1, r3
 8002386:	4806      	ldr	r0, [pc, #24]	; (80023a0 <MX_ADC2_Init+0x9c>)
 8002388:	f001 fdf4 	bl	8003f74 <HAL_ADC_ConfigChannel>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8002392:	f000 fc2f 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000240 	.word	0x20000240
 80023a4:	40012100 	.word	0x40012100

080023a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023ae:	463b      	mov	r3, r7
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80023ba:	4b21      	ldr	r3, [pc, #132]	; (8002440 <MX_ADC3_Init+0x98>)
 80023bc:	4a21      	ldr	r2, [pc, #132]	; (8002444 <MX_ADC3_Init+0x9c>)
 80023be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <MX_ADC3_Init+0x98>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <MX_ADC3_Init+0x98>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80023cc:	4b1c      	ldr	r3, [pc, #112]	; (8002440 <MX_ADC3_Init+0x98>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80023d2:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <MX_ADC3_Init+0x98>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <MX_ADC3_Init+0x98>)
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <MX_ADC3_Init+0x98>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <MX_ADC3_Init+0x98>)
 80023e8:	4a17      	ldr	r2, [pc, #92]	; (8002448 <MX_ADC3_Init+0xa0>)
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <MX_ADC3_Init+0x98>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <MX_ADC3_Init+0x98>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <MX_ADC3_Init+0x98>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <MX_ADC3_Init+0x98>)
 8002402:	2200      	movs	r2, #0
 8002404:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002406:	480e      	ldr	r0, [pc, #56]	; (8002440 <MX_ADC3_Init+0x98>)
 8002408:	f001 fae0 	bl	80039cc <HAL_ADC_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8002412:	f000 fbef 	bl	8002bf4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002416:	2301      	movs	r3, #1
 8002418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800241a:	2301      	movs	r3, #1
 800241c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002422:	463b      	mov	r3, r7
 8002424:	4619      	mov	r1, r3
 8002426:	4806      	ldr	r0, [pc, #24]	; (8002440 <MX_ADC3_Init+0x98>)
 8002428:	f001 fda4 	bl	8003f74 <HAL_ADC_ConfigChannel>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8002432:	f000 fbdf 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000288 	.word	0x20000288
 8002444:	40012200 	.word	0x40012200
 8002448:	0f000001 	.word	0x0f000001

0800244c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002452:	463b      	mov	r3, r7
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800245a:	4b14      	ldr	r3, [pc, #80]	; (80024ac <MX_DAC_Init+0x60>)
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <MX_DAC_Init+0x64>)
 800245e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002460:	4812      	ldr	r0, [pc, #72]	; (80024ac <MX_DAC_Init+0x60>)
 8002462:	f002 f93b 	bl	80046dc <HAL_DAC_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800246c:	f000 fbc2 	bl	8002bf4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002470:	2324      	movs	r3, #36	; 0x24
 8002472:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002478:	463b      	mov	r3, r7
 800247a:	2200      	movs	r2, #0
 800247c:	4619      	mov	r1, r3
 800247e:	480b      	ldr	r0, [pc, #44]	; (80024ac <MX_DAC_Init+0x60>)
 8002480:	f002 fa94 	bl	80049ac <HAL_DAC_ConfigChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800248a:	f000 fbb3 	bl	8002bf4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800248e:	463b      	mov	r3, r7
 8002490:	2210      	movs	r2, #16
 8002492:	4619      	mov	r1, r3
 8002494:	4805      	ldr	r0, [pc, #20]	; (80024ac <MX_DAC_Init+0x60>)
 8002496:	f002 fa89 	bl	80049ac <HAL_DAC_ConfigChannel>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80024a0:	f000 fba8 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000390 	.word	0x20000390
 80024b0:	40007400 	.word	0x40007400

080024b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <MX_I2C1_Init+0x50>)
 80024ba:	4a13      	ldr	r2, [pc, #76]	; (8002508 <MX_I2C1_Init+0x54>)
 80024bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <MX_I2C1_Init+0x50>)
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <MX_I2C1_Init+0x58>)
 80024c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <MX_I2C1_Init+0x50>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <MX_I2C1_Init+0x50>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <MX_I2C1_Init+0x50>)
 80024d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <MX_I2C1_Init+0x50>)
 80024da:	2200      	movs	r2, #0
 80024dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <MX_I2C1_Init+0x50>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <MX_I2C1_Init+0x50>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <MX_I2C1_Init+0x50>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024f0:	4804      	ldr	r0, [pc, #16]	; (8002504 <MX_I2C1_Init+0x50>)
 80024f2:	f003 fa79 	bl	80059e8 <HAL_I2C_Init>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024fc:	f000 fb7a 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002500:	bf00      	nop
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000464 	.word	0x20000464
 8002508:	40005400 	.word	0x40005400
 800250c:	00061a80 	.word	0x00061a80

08002510 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002516:	f107 0308 	add.w	r3, r7, #8
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002524:	463b      	mov	r3, r7
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800252c:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <MX_TIM2_Init+0x94>)
 800252e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002532:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8002534:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <MX_TIM2_Init+0x94>)
 8002536:	2201      	movs	r2, #1
 8002538:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253a:	4b1a      	ldr	r3, [pc, #104]	; (80025a4 <MX_TIM2_Init+0x94>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8002540:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <MX_TIM2_Init+0x94>)
 8002542:	22ff      	movs	r2, #255	; 0xff
 8002544:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002546:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <MX_TIM2_Init+0x94>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <MX_TIM2_Init+0x94>)
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002552:	4814      	ldr	r0, [pc, #80]	; (80025a4 <MX_TIM2_Init+0x94>)
 8002554:	f006 fe90 	bl	8009278 <HAL_TIM_Base_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800255e:	f000 fb49 	bl	8002bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002566:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	4619      	mov	r1, r3
 800256e:	480d      	ldr	r0, [pc, #52]	; (80025a4 <MX_TIM2_Init+0x94>)
 8002570:	f007 f879 	bl	8009666 <HAL_TIM_ConfigClockSource>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800257a:	f000 fb3b 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800257e:	2320      	movs	r3, #32
 8002580:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002586:	463b      	mov	r3, r7
 8002588:	4619      	mov	r1, r3
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <MX_TIM2_Init+0x94>)
 800258c:	f007 fa94 	bl	8009ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002596:	f000 fb2d 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000518 	.word	0x20000518

080025a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025bc:	463b      	mov	r3, r7
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025c4:	4b1d      	ldr	r3, [pc, #116]	; (800263c <MX_TIM3_Init+0x94>)
 80025c6:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <MX_TIM3_Init+0x98>)
 80025c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 128;
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <MX_TIM3_Init+0x94>)
 80025cc:	2280      	movs	r2, #128	; 0x80
 80025ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d0:	4b1a      	ldr	r3, [pc, #104]	; (800263c <MX_TIM3_Init+0x94>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65103;
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <MX_TIM3_Init+0x94>)
 80025d8:	f64f 624f 	movw	r2, #65103	; 0xfe4f
 80025dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <MX_TIM3_Init+0x94>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b15      	ldr	r3, [pc, #84]	; (800263c <MX_TIM3_Init+0x94>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025ea:	4814      	ldr	r0, [pc, #80]	; (800263c <MX_TIM3_Init+0x94>)
 80025ec:	f006 fe44 	bl	8009278 <HAL_TIM_Base_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025f6:	f000 fafd 	bl	8002bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002600:	f107 0308 	add.w	r3, r7, #8
 8002604:	4619      	mov	r1, r3
 8002606:	480d      	ldr	r0, [pc, #52]	; (800263c <MX_TIM3_Init+0x94>)
 8002608:	f007 f82d 	bl	8009666 <HAL_TIM_ConfigClockSource>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002612:	f000 faef 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800261e:	463b      	mov	r3, r7
 8002620:	4619      	mov	r1, r3
 8002622:	4806      	ldr	r0, [pc, #24]	; (800263c <MX_TIM3_Init+0x94>)
 8002624:	f007 fa48 	bl	8009ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800262e:	f000 fae1 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000560 	.word	0x20000560
 8002640:	40000400 	.word	0x40000400

08002644 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800264a:	f107 0308 	add.w	r3, r7, #8
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002658:	463b      	mov	r3, r7
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002660:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <MX_TIM4_Init+0x94>)
 8002662:	4a1e      	ldr	r2, [pc, #120]	; (80026dc <MX_TIM4_Init+0x98>)
 8002664:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <MX_TIM4_Init+0x94>)
 8002668:	2263      	movs	r2, #99	; 0x63
 800266a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266c:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <MX_TIM4_Init+0x94>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 599;
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <MX_TIM4_Init+0x94>)
 8002674:	f240 2257 	movw	r2, #599	; 0x257
 8002678:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267a:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <MX_TIM4_Init+0x94>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002680:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <MX_TIM4_Init+0x94>)
 8002682:	2280      	movs	r2, #128	; 0x80
 8002684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002686:	4814      	ldr	r0, [pc, #80]	; (80026d8 <MX_TIM4_Init+0x94>)
 8002688:	f006 fdf6 	bl	8009278 <HAL_TIM_Base_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002692:	f000 faaf 	bl	8002bf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800269a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800269c:	f107 0308 	add.w	r3, r7, #8
 80026a0:	4619      	mov	r1, r3
 80026a2:	480d      	ldr	r0, [pc, #52]	; (80026d8 <MX_TIM4_Init+0x94>)
 80026a4:	f006 ffdf 	bl	8009666 <HAL_TIM_ConfigClockSource>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80026ae:	f000 faa1 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026ba:	463b      	mov	r3, r7
 80026bc:	4619      	mov	r1, r3
 80026be:	4806      	ldr	r0, [pc, #24]	; (80026d8 <MX_TIM4_Init+0x94>)
 80026c0:	f007 f9fa 	bl	8009ab8 <HAL_TIMEx_MasterConfigSynchronization>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80026ca:	f000 fa93 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200005a8 	.word	0x200005a8
 80026dc:	40000800 	.word	0x40000800

080026e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e6:	463b      	mov	r3, r7
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <MX_TIM6_Init+0x64>)
 80026f0:	4a15      	ldr	r2, [pc, #84]	; (8002748 <MX_TIM6_Init+0x68>)
 80026f2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <MX_TIM6_Init+0x64>)
 80026f6:	2209      	movs	r2, #9
 80026f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <MX_TIM6_Init+0x64>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <MX_TIM6_Init+0x64>)
 8002702:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002706:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <MX_TIM6_Init+0x64>)
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800270e:	480d      	ldr	r0, [pc, #52]	; (8002744 <MX_TIM6_Init+0x64>)
 8002710:	f006 fdb2 	bl	8009278 <HAL_TIM_Base_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800271a:	f000 fa6b 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002726:	463b      	mov	r3, r7
 8002728:	4619      	mov	r1, r3
 800272a:	4806      	ldr	r0, [pc, #24]	; (8002744 <MX_TIM6_Init+0x64>)
 800272c:	f007 f9c4 	bl	8009ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002736:	f000 fa5d 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	200005f0 	.word	0x200005f0
 8002748:	40001000 	.word	0x40001000

0800274c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002752:	463b      	mov	r3, r7
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <MX_TIM7_Init+0x64>)
 800275c:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <MX_TIM7_Init+0x68>)
 800275e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <MX_TIM7_Init+0x64>)
 8002762:	2200      	movs	r2, #0
 8002764:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <MX_TIM7_Init+0x64>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 62499;
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <MX_TIM7_Init+0x64>)
 800276e:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002772:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_TIM7_Init+0x64>)
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800277a:	480d      	ldr	r0, [pc, #52]	; (80027b0 <MX_TIM7_Init+0x64>)
 800277c:	f006 fd7c 	bl	8009278 <HAL_TIM_Base_Init>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8002786:	f000 fa35 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278a:	2300      	movs	r3, #0
 800278c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800278e:	2300      	movs	r3, #0
 8002790:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002792:	463b      	mov	r3, r7
 8002794:	4619      	mov	r1, r3
 8002796:	4806      	ldr	r0, [pc, #24]	; (80027b0 <MX_TIM7_Init+0x64>)
 8002798:	f007 f98e 	bl	8009ab8 <HAL_TIMEx_MasterConfigSynchronization>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80027a2:	f000 fa27 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000638 	.word	0x20000638
 80027b4:	40001400 	.word	0x40001400

080027b8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80027bc:	4b0e      	ldr	r3, [pc, #56]	; (80027f8 <MX_TIM10_Init+0x40>)
 80027be:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <MX_TIM10_Init+0x44>)
 80027c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 80027c2:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <MX_TIM10_Init+0x40>)
 80027c4:	2263      	movs	r2, #99	; 0x63
 80027c6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <MX_TIM10_Init+0x40>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2499;
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <MX_TIM10_Init+0x40>)
 80027d0:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80027d4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <MX_TIM10_Init+0x40>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <MX_TIM10_Init+0x40>)
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80027e2:	4805      	ldr	r0, [pc, #20]	; (80027f8 <MX_TIM10_Init+0x40>)
 80027e4:	f006 fd48 	bl	8009278 <HAL_TIM_Base_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80027ee:	f000 fa01 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000680 	.word	0x20000680
 80027fc:	40014400 	.word	0x40014400

08002800 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <MX_USART3_UART_Init+0x4c>)
 8002806:	4a12      	ldr	r2, [pc, #72]	; (8002850 <MX_USART3_UART_Init+0x50>)
 8002808:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800280a:	4b10      	ldr	r3, [pc, #64]	; (800284c <MX_USART3_UART_Init+0x4c>)
 800280c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002810:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <MX_USART3_UART_Init+0x4c>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <MX_USART3_UART_Init+0x4c>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <MX_USART3_UART_Init+0x4c>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <MX_USART3_UART_Init+0x4c>)
 8002826:	220c      	movs	r2, #12
 8002828:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <MX_USART3_UART_Init+0x4c>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <MX_USART3_UART_Init+0x4c>)
 8002832:	2200      	movs	r2, #0
 8002834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002836:	4805      	ldr	r0, [pc, #20]	; (800284c <MX_USART3_UART_Init+0x4c>)
 8002838:	f007 f9ce 	bl	8009bd8 <HAL_UART_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002842:	f000 f9d7 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200006c8 	.word	0x200006c8
 8002850:	40004800 	.word	0x40004800

08002854 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <MX_USART6_UART_Init+0x4c>)
 800285a:	4a12      	ldr	r2, [pc, #72]	; (80028a4 <MX_USART6_UART_Init+0x50>)
 800285c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <MX_USART6_UART_Init+0x4c>)
 8002860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002864:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002866:	4b0e      	ldr	r3, [pc, #56]	; (80028a0 <MX_USART6_UART_Init+0x4c>)
 8002868:	2200      	movs	r2, #0
 800286a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <MX_USART6_UART_Init+0x4c>)
 800286e:	2200      	movs	r2, #0
 8002870:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002872:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <MX_USART6_UART_Init+0x4c>)
 8002874:	2200      	movs	r2, #0
 8002876:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002878:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <MX_USART6_UART_Init+0x4c>)
 800287a:	220c      	movs	r2, #12
 800287c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800287e:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <MX_USART6_UART_Init+0x4c>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <MX_USART6_UART_Init+0x4c>)
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800288a:	4805      	ldr	r0, [pc, #20]	; (80028a0 <MX_USART6_UART_Init+0x4c>)
 800288c:	f007 f9a4 	bl	8009bd8 <HAL_UART_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002896:	f000 f9ad 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000070c 	.word	0x2000070c
 80028a4:	40011400 	.word	0x40011400

080028a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	607b      	str	r3, [r7, #4]
 80028b2:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <MX_DMA_Init+0xb8>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a2a      	ldr	r2, [pc, #168]	; (8002960 <MX_DMA_Init+0xb8>)
 80028b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b28      	ldr	r3, [pc, #160]	; (8002960 <MX_DMA_Init+0xb8>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c6:	607b      	str	r3, [r7, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <MX_DMA_Init+0xb8>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a23      	ldr	r2, [pc, #140]	; (8002960 <MX_DMA_Init+0xb8>)
 80028d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b21      	ldr	r3, [pc, #132]	; (8002960 <MX_DMA_Init+0xb8>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e2:	603b      	str	r3, [r7, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	200b      	movs	r0, #11
 80028ec:	f001 febe 	bl	800466c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80028f0:	200b      	movs	r0, #11
 80028f2:	f001 fed7 	bl	80046a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	200e      	movs	r0, #14
 80028fc:	f001 feb6 	bl	800466c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002900:	200e      	movs	r0, #14
 8002902:	f001 fecf 	bl	80046a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002906:	2200      	movs	r2, #0
 8002908:	2100      	movs	r1, #0
 800290a:	2010      	movs	r0, #16
 800290c:	f001 feae 	bl	800466c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002910:	2010      	movs	r0, #16
 8002912:	f001 fec7 	bl	80046a4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2100      	movs	r1, #0
 800291a:	2011      	movs	r0, #17
 800291c:	f001 fea6 	bl	800466c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002920:	2011      	movs	r0, #17
 8002922:	f001 febf 	bl	80046a4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2100      	movs	r1, #0
 800292a:	2038      	movs	r0, #56	; 0x38
 800292c:	f001 fe9e 	bl	800466c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002930:	2038      	movs	r0, #56	; 0x38
 8002932:	f001 feb7 	bl	80046a4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002936:	2200      	movs	r2, #0
 8002938:	2100      	movs	r1, #0
 800293a:	203a      	movs	r0, #58	; 0x3a
 800293c:	f001 fe96 	bl	800466c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002940:	203a      	movs	r0, #58	; 0x3a
 8002942:	f001 feaf 	bl	80046a4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2100      	movs	r1, #0
 800294a:	2045      	movs	r0, #69	; 0x45
 800294c:	f001 fe8e 	bl	800466c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002950:	2045      	movs	r0, #69	; 0x45
 8002952:	f001 fea7 	bl	80046a4 <HAL_NVIC_EnableIRQ>

}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800

08002964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	60da      	str	r2, [r3, #12]
 8002978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b56      	ldr	r3, [pc, #344]	; (8002ad8 <MX_GPIO_Init+0x174>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a55      	ldr	r2, [pc, #340]	; (8002ad8 <MX_GPIO_Init+0x174>)
 8002984:	f043 0310 	orr.w	r3, r3, #16
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b53      	ldr	r3, [pc, #332]	; (8002ad8 <MX_GPIO_Init+0x174>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b4f      	ldr	r3, [pc, #316]	; (8002ad8 <MX_GPIO_Init+0x174>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a4e      	ldr	r2, [pc, #312]	; (8002ad8 <MX_GPIO_Init+0x174>)
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b4c      	ldr	r3, [pc, #304]	; (8002ad8 <MX_GPIO_Init+0x174>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	4b48      	ldr	r3, [pc, #288]	; (8002ad8 <MX_GPIO_Init+0x174>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a47      	ldr	r2, [pc, #284]	; (8002ad8 <MX_GPIO_Init+0x174>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <MX_GPIO_Init+0x174>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <MX_GPIO_Init+0x174>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a40      	ldr	r2, [pc, #256]	; (8002ad8 <MX_GPIO_Init+0x174>)
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b3e      	ldr	r3, [pc, #248]	; (8002ad8 <MX_GPIO_Init+0x174>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	4b3a      	ldr	r3, [pc, #232]	; (8002ad8 <MX_GPIO_Init+0x174>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	4a39      	ldr	r2, [pc, #228]	; (8002ad8 <MX_GPIO_Init+0x174>)
 80029f4:	f043 0308 	orr.w	r3, r3, #8
 80029f8:	6313      	str	r3, [r2, #48]	; 0x30
 80029fa:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <MX_GPIO_Init+0x174>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8002a06:	2200      	movs	r2, #0
 8002a08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a0c:	4833      	ldr	r0, [pc, #204]	; (8002adc <MX_GPIO_Init+0x178>)
 8002a0e:	f002 ffb9 	bl	8005984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002a12:	2200      	movs	r2, #0
 8002a14:	f24f 011e 	movw	r1, #61470	; 0xf01e
 8002a18:	4831      	ldr	r0, [pc, #196]	; (8002ae0 <MX_GPIO_Init+0x17c>)
 8002a1a:	f002 ffb3 	bl	8005984 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002a1e:	231c      	movs	r3, #28
 8002a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	4619      	mov	r1, r3
 8002a32:	482a      	ldr	r0, [pc, #168]	; (8002adc <MX_GPIO_Init+0x178>)
 8002a34:	f002 fd0e 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a3e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4825      	ldr	r0, [pc, #148]	; (8002ae4 <MX_GPIO_Init+0x180>)
 8002a50:	f002 fd00 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a66:	f107 0314 	add.w	r3, r7, #20
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	481b      	ldr	r0, [pc, #108]	; (8002adc <MX_GPIO_Init+0x178>)
 8002a6e:	f002 fcf1 	bl	8005454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002a72:	f24f 031e 	movw	r3, #61470	; 0xf01e
 8002a76:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a80:	2300      	movs	r3, #0
 8002a82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4815      	ldr	r0, [pc, #84]	; (8002ae0 <MX_GPIO_Init+0x17c>)
 8002a8c:	f002 fce2 	bl	8005454 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002a90:	2200      	movs	r2, #0
 8002a92:	2100      	movs	r1, #0
 8002a94:	2008      	movs	r0, #8
 8002a96:	f001 fde9 	bl	800466c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a9a:	2008      	movs	r0, #8
 8002a9c:	f001 fe02 	bl	80046a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	2009      	movs	r0, #9
 8002aa6:	f001 fde1 	bl	800466c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002aaa:	2009      	movs	r0, #9
 8002aac:	f001 fdfa 	bl	80046a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	200a      	movs	r0, #10
 8002ab6:	f001 fdd9 	bl	800466c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002aba:	200a      	movs	r0, #10
 8002abc:	f001 fdf2 	bl	80046a4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	2028      	movs	r0, #40	; 0x28
 8002ac6:	f001 fdd1 	bl	800466c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002aca:	2028      	movs	r0, #40	; 0x28
 8002acc:	f001 fdea 	bl	80046a4 <HAL_NVIC_EnableIRQ>

}
 8002ad0:	bf00      	nop
 8002ad2:	3728      	adds	r7, #40	; 0x28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40020c00 	.word	0x40020c00
 8002ae4:	40020800 	.word	0x40020800

08002ae8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a30      	ldr	r2, [pc, #192]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d102      	bne.n	8002b00 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8002afa:	f000 ff23 	bl	8003944 <HAL_IncTick>
	  EXTI_BUT_PUSH=0;

  }

  /* USER CODE END Callback 1 */
}
 8002afe:	e057      	b.n	8002bb0 <HAL_TIM_PeriodElapsedCallback+0xc8>
  else if( htim->Instance == TIM3 ){
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a2d      	ldr	r2, [pc, #180]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d103      	bne.n	8002b12 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  AMG_TARGET_DET=1;
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
}
 8002b10:	e04e      	b.n	8002bb0 <HAL_TIM_PeriodElapsedCallback+0xc8>
  else if( htim->Instance == TIM4 ){
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a2b      	ldr	r2, [pc, #172]	; (8002bc4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d103      	bne.n	8002b24 <HAL_TIM_PeriodElapsedCallback+0x3c>
	  stepIt(&motor);
 8002b1c:	482a      	ldr	r0, [pc, #168]	; (8002bc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002b1e:	f7fe fd4f 	bl	80015c0 <stepIt>
}
 8002b22:	e045      	b.n	8002bb0 <HAL_TIM_PeriodElapsedCallback+0xc8>
  else if( htim->Instance == TIM6 ){
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a28      	ldr	r2, [pc, #160]	; (8002bcc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d103      	bne.n	8002b36 <HAL_TIM_PeriodElapsedCallback+0x4e>
	  AMG_RD_START=1;
 8002b2e:	4b28      	ldr	r3, [pc, #160]	; (8002bd0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]
}
 8002b34:	e03c      	b.n	8002bb0 <HAL_TIM_PeriodElapsedCallback+0xc8>
  else if( htim->Instance == TIM7 ){
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a26      	ldr	r2, [pc, #152]	; (8002bd4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d103      	bne.n	8002b48 <HAL_TIM_PeriodElapsedCallback+0x60>
	MOTOR_MV=1;
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]
}
 8002b46:	e033      	b.n	8002bb0 <HAL_TIM_PeriodElapsedCallback+0xc8>
  else if( htim->Instance == TIM10 ){
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a23      	ldr	r2, [pc, #140]	; (8002bdc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d12e      	bne.n	8002bb0 <HAL_TIM_PeriodElapsedCallback+0xc8>
	  if( GPIOE->IDR & GPIO_PIN_2 && EXTI_BUT_PUSH  )
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_TIM_PeriodElapsedCallback+0x86>
 8002b5e:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_PeriodElapsedCallback+0x86>
		  LEFT_BUT_PUSH=1;
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	e01d      	b.n	8002baa <HAL_TIM_PeriodElapsedCallback+0xc2>
	  else if( GPIOE->IDR & GPIO_PIN_3  && EXTI_BUT_PUSH )
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_TIM_PeriodElapsedCallback+0xa2>
 8002b7a:	4b1a      	ldr	r3, [pc, #104]	; (8002be4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_TIM_PeriodElapsedCallback+0xa2>
		  RIGHT_BUT_PUSH=1;
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	e00f      	b.n	8002baa <HAL_TIM_PeriodElapsedCallback+0xc2>
	  else if( GPIOE->IDR & GPIO_PIN_4 && EXTI_BUT_PUSH )
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0310 	and.w	r3, r3, #16
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d009      	beq.n	8002baa <HAL_TIM_PeriodElapsedCallback+0xc2>
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <HAL_TIM_PeriodElapsedCallback+0xc2>
		  MODE_TOGGLE^=1;
 8002b9e:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002ba4:	f083 0301 	eor.w	r3, r3, #1
 8002ba8:	6013      	str	r3, [r2, #0]
	  EXTI_BUT_PUSH=0;
 8002baa:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	22000010 	.word	0x22000010
 8002bc4:	40000800 	.word	0x40000800
 8002bc8:	20000818 	.word	0x20000818
 8002bcc:	40001000 	.word	0x40001000
 8002bd0:	2200001c 	.word	0x2200001c
 8002bd4:	40001400 	.word	0x40001400
 8002bd8:	2200003c 	.word	0x2200003c
 8002bdc:	40014400 	.word	0x40014400
 8002be0:	40021000 	.word	0x40021000
 8002be4:	2200007c 	.word	0x2200007c
 8002be8:	22000074 	.word	0x22000074
 8002bec:	22000070 	.word	0x22000070
 8002bf0:	22000078 	.word	0x22000078

08002bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf8:	b672      	cpsid	i
}
 8002bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <Error_Handler+0x8>
	...

08002c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	4b10      	ldr	r3, [pc, #64]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4a0f      	ldr	r2, [pc, #60]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c14:	6453      	str	r3, [r2, #68]	; 0x44
 8002c16:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	6413      	str	r3, [r2, #64]	; 0x40
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_MspInit+0x4c>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800

08002c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08e      	sub	sp, #56	; 0x38
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a75      	ldr	r2, [pc, #468]	; (8002e44 <HAL_ADC_MspInit+0x1f4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d158      	bne.n	8002d24 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
 8002c76:	4b74      	ldr	r3, [pc, #464]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	4a73      	ldr	r2, [pc, #460]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	6453      	str	r3, [r2, #68]	; 0x44
 8002c82:	4b71      	ldr	r3, [pc, #452]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	4b6d      	ldr	r3, [pc, #436]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a6c      	ldr	r2, [pc, #432]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b6a      	ldr	r3, [pc, #424]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002caa:	2301      	movs	r3, #1
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4863      	ldr	r0, [pc, #396]	; (8002e4c <HAL_ADC_MspInit+0x1fc>)
 8002cbe:	f002 fbc9 	bl	8005454 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002cc2:	4b63      	ldr	r3, [pc, #396]	; (8002e50 <HAL_ADC_MspInit+0x200>)
 8002cc4:	4a63      	ldr	r2, [pc, #396]	; (8002e54 <HAL_ADC_MspInit+0x204>)
 8002cc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002cc8:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <HAL_ADC_MspInit+0x200>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cce:	4b60      	ldr	r3, [pc, #384]	; (8002e50 <HAL_ADC_MspInit+0x200>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd4:	4b5e      	ldr	r3, [pc, #376]	; (8002e50 <HAL_ADC_MspInit+0x200>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cda:	4b5d      	ldr	r3, [pc, #372]	; (8002e50 <HAL_ADC_MspInit+0x200>)
 8002cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ce2:	4b5b      	ldr	r3, [pc, #364]	; (8002e50 <HAL_ADC_MspInit+0x200>)
 8002ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ce8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cea:	4b59      	ldr	r3, [pc, #356]	; (8002e50 <HAL_ADC_MspInit+0x200>)
 8002cec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cf0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002cf2:	4b57      	ldr	r3, [pc, #348]	; (8002e50 <HAL_ADC_MspInit+0x200>)
 8002cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cf8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002cfa:	4b55      	ldr	r3, [pc, #340]	; (8002e50 <HAL_ADC_MspInit+0x200>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d00:	4b53      	ldr	r3, [pc, #332]	; (8002e50 <HAL_ADC_MspInit+0x200>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d06:	4852      	ldr	r0, [pc, #328]	; (8002e50 <HAL_ADC_MspInit+0x200>)
 8002d08:	f001 ff2a 	bl	8004b60 <HAL_DMA_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002d12:	f7ff ff6f 	bl	8002bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a4d      	ldr	r2, [pc, #308]	; (8002e50 <HAL_ADC_MspInit+0x200>)
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38
 8002d1c:	4a4c      	ldr	r2, [pc, #304]	; (8002e50 <HAL_ADC_MspInit+0x200>)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d22:	e08b      	b.n	8002e3c <HAL_ADC_MspInit+0x1ec>
  else if(hadc->Instance==ADC2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a4b      	ldr	r2, [pc, #300]	; (8002e58 <HAL_ADC_MspInit+0x208>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d159      	bne.n	8002de2 <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	4b45      	ldr	r3, [pc, #276]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	4a44      	ldr	r2, [pc, #272]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d3e:	4b42      	ldr	r3, [pc, #264]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d46:	61bb      	str	r3, [r7, #24]
 8002d48:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a3d      	ldr	r2, [pc, #244]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d76:	4619      	mov	r1, r3
 8002d78:	4838      	ldr	r0, [pc, #224]	; (8002e5c <HAL_ADC_MspInit+0x20c>)
 8002d7a:	f002 fb6b 	bl	8005454 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002d7e:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <HAL_ADC_MspInit+0x210>)
 8002d80:	4a38      	ldr	r2, [pc, #224]	; (8002e64 <HAL_ADC_MspInit+0x214>)
 8002d82:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002d84:	4b36      	ldr	r3, [pc, #216]	; (8002e60 <HAL_ADC_MspInit+0x210>)
 8002d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d8a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d8c:	4b34      	ldr	r3, [pc, #208]	; (8002e60 <HAL_ADC_MspInit+0x210>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d92:	4b33      	ldr	r3, [pc, #204]	; (8002e60 <HAL_ADC_MspInit+0x210>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002d98:	4b31      	ldr	r3, [pc, #196]	; (8002e60 <HAL_ADC_MspInit+0x210>)
 8002d9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d9e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002da0:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <HAL_ADC_MspInit+0x210>)
 8002da2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002da6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002da8:	4b2d      	ldr	r3, [pc, #180]	; (8002e60 <HAL_ADC_MspInit+0x210>)
 8002daa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dae:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <HAL_ADC_MspInit+0x210>)
 8002db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002db6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002db8:	4b29      	ldr	r3, [pc, #164]	; (8002e60 <HAL_ADC_MspInit+0x210>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dbe:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <HAL_ADC_MspInit+0x210>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002dc4:	4826      	ldr	r0, [pc, #152]	; (8002e60 <HAL_ADC_MspInit+0x210>)
 8002dc6:	f001 fecb 	bl	8004b60 <HAL_DMA_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8002dd0:	f7ff ff10 	bl	8002bf4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <HAL_ADC_MspInit+0x210>)
 8002dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8002dda:	4a21      	ldr	r2, [pc, #132]	; (8002e60 <HAL_ADC_MspInit+0x210>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002de0:	e02c      	b.n	8002e3c <HAL_ADC_MspInit+0x1ec>
  else if(hadc->Instance==ADC3)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a20      	ldr	r2, [pc, #128]	; (8002e68 <HAL_ADC_MspInit+0x218>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d127      	bne.n	8002e3c <HAL_ADC_MspInit+0x1ec>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dfa:	6453      	str	r3, [r2, #68]	; 0x44
 8002dfc:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6313      	str	r3, [r2, #48]	; 0x30
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_ADC_MspInit+0x1f8>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e24:	2302      	movs	r3, #2
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e34:	4619      	mov	r1, r3
 8002e36:	4809      	ldr	r0, [pc, #36]	; (8002e5c <HAL_ADC_MspInit+0x20c>)
 8002e38:	f002 fb0c 	bl	8005454 <HAL_GPIO_Init>
}
 8002e3c:	bf00      	nop
 8002e3e:	3738      	adds	r7, #56	; 0x38
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40012000 	.word	0x40012000
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40020400 	.word	0x40020400
 8002e50:	200002d0 	.word	0x200002d0
 8002e54:	40026410 	.word	0x40026410
 8002e58:	40012100 	.word	0x40012100
 8002e5c:	40020000 	.word	0x40020000
 8002e60:	20000330 	.word	0x20000330
 8002e64:	40026440 	.word	0x40026440
 8002e68:	40012200 	.word	0x40012200

08002e6c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a4c      	ldr	r2, [pc, #304]	; (8002fbc <HAL_DAC_MspInit+0x150>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	f040 8092 	bne.w	8002fb4 <HAL_DAC_MspInit+0x148>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002e90:	2300      	movs	r3, #0
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	4b4a      	ldr	r3, [pc, #296]	; (8002fc0 <HAL_DAC_MspInit+0x154>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	4a49      	ldr	r2, [pc, #292]	; (8002fc0 <HAL_DAC_MspInit+0x154>)
 8002e9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea0:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_DAC_MspInit+0x154>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	4b43      	ldr	r3, [pc, #268]	; (8002fc0 <HAL_DAC_MspInit+0x154>)
 8002eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb4:	4a42      	ldr	r2, [pc, #264]	; (8002fc0 <HAL_DAC_MspInit+0x154>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebc:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <HAL_DAC_MspInit+0x154>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ec8:	2330      	movs	r3, #48	; 0x30
 8002eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	4619      	mov	r1, r3
 8002eda:	483a      	ldr	r0, [pc, #232]	; (8002fc4 <HAL_DAC_MspInit+0x158>)
 8002edc:	f002 faba 	bl	8005454 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002ee0:	4b39      	ldr	r3, [pc, #228]	; (8002fc8 <HAL_DAC_MspInit+0x15c>)
 8002ee2:	4a3a      	ldr	r2, [pc, #232]	; (8002fcc <HAL_DAC_MspInit+0x160>)
 8002ee4:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8002ee6:	4b38      	ldr	r3, [pc, #224]	; (8002fc8 <HAL_DAC_MspInit+0x15c>)
 8002ee8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002eec:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eee:	4b36      	ldr	r3, [pc, #216]	; (8002fc8 <HAL_DAC_MspInit+0x15c>)
 8002ef0:	2240      	movs	r2, #64	; 0x40
 8002ef2:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef4:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <HAL_DAC_MspInit+0x15c>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002efa:	4b33      	ldr	r3, [pc, #204]	; (8002fc8 <HAL_DAC_MspInit+0x15c>)
 8002efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f00:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f02:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <HAL_DAC_MspInit+0x15c>)
 8002f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f08:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f0a:	4b2f      	ldr	r3, [pc, #188]	; (8002fc8 <HAL_DAC_MspInit+0x15c>)
 8002f0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f10:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8002f12:	4b2d      	ldr	r3, [pc, #180]	; (8002fc8 <HAL_DAC_MspInit+0x15c>)
 8002f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f18:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	; (8002fc8 <HAL_DAC_MspInit+0x15c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f20:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <HAL_DAC_MspInit+0x15c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8002f26:	4828      	ldr	r0, [pc, #160]	; (8002fc8 <HAL_DAC_MspInit+0x15c>)
 8002f28:	f001 fe1a 	bl	8004b60 <HAL_DMA_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002f32:	f7ff fe5f 	bl	8002bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <HAL_DAC_MspInit+0x15c>)
 8002f3a:	609a      	str	r2, [r3, #8]
 8002f3c:	4a22      	ldr	r2, [pc, #136]	; (8002fc8 <HAL_DAC_MspInit+0x15c>)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8002f42:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <HAL_DAC_MspInit+0x164>)
 8002f44:	4a23      	ldr	r2, [pc, #140]	; (8002fd4 <HAL_DAC_MspInit+0x168>)
 8002f46:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8002f48:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <HAL_DAC_MspInit+0x164>)
 8002f4a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002f4e:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f50:	4b1f      	ldr	r3, [pc, #124]	; (8002fd0 <HAL_DAC_MspInit+0x164>)
 8002f52:	2240      	movs	r2, #64	; 0x40
 8002f54:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f56:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <HAL_DAC_MspInit+0x164>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8002f5c:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <HAL_DAC_MspInit+0x164>)
 8002f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f62:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f64:	4b1a      	ldr	r3, [pc, #104]	; (8002fd0 <HAL_DAC_MspInit+0x164>)
 8002f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f6a:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f6c:	4b18      	ldr	r3, [pc, #96]	; (8002fd0 <HAL_DAC_MspInit+0x164>)
 8002f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f72:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8002f74:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <HAL_DAC_MspInit+0x164>)
 8002f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f7a:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8002f7c:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_DAC_MspInit+0x164>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f82:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <HAL_DAC_MspInit+0x164>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8002f88:	4811      	ldr	r0, [pc, #68]	; (8002fd0 <HAL_DAC_MspInit+0x164>)
 8002f8a:	f001 fde9 	bl	8004b60 <HAL_DMA_Init>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8002f94:	f7ff fe2e 	bl	8002bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <HAL_DAC_MspInit+0x164>)
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	4a0c      	ldr	r2, [pc, #48]	; (8002fd0 <HAL_DAC_MspInit+0x164>)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	2036      	movs	r0, #54	; 0x36
 8002faa:	f001 fb5f 	bl	800466c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fae:	2036      	movs	r0, #54	; 0x36
 8002fb0:	f001 fb78 	bl	80046a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002fb4:	bf00      	nop
 8002fb6:	3728      	adds	r7, #40	; 0x28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40007400 	.word	0x40007400
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40020000 	.word	0x40020000
 8002fc8:	200003a4 	.word	0x200003a4
 8002fcc:	40026088 	.word	0x40026088
 8002fd0:	20000404 	.word	0x20000404
 8002fd4:	400260a0 	.word	0x400260a0

08002fd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a34      	ldr	r2, [pc, #208]	; (80030c8 <HAL_I2C_MspInit+0xf0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d161      	bne.n	80030be <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	4b33      	ldr	r3, [pc, #204]	; (80030cc <HAL_I2C_MspInit+0xf4>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a32      	ldr	r2, [pc, #200]	; (80030cc <HAL_I2C_MspInit+0xf4>)
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b30      	ldr	r3, [pc, #192]	; (80030cc <HAL_I2C_MspInit+0xf4>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003016:	23c0      	movs	r3, #192	; 0xc0
 8003018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800301a:	2312      	movs	r3, #18
 800301c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003022:	2303      	movs	r3, #3
 8003024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003026:	2304      	movs	r3, #4
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4619      	mov	r1, r3
 8003030:	4827      	ldr	r0, [pc, #156]	; (80030d0 <HAL_I2C_MspInit+0xf8>)
 8003032:	f002 fa0f 	bl	8005454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_I2C_MspInit+0xf4>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	4a23      	ldr	r2, [pc, #140]	; (80030cc <HAL_I2C_MspInit+0xf4>)
 8003040:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003044:	6413      	str	r3, [r2, #64]	; 0x40
 8003046:	4b21      	ldr	r3, [pc, #132]	; (80030cc <HAL_I2C_MspInit+0xf4>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_I2C_MspInit+0xfc>)
 8003054:	4a20      	ldr	r2, [pc, #128]	; (80030d8 <HAL_I2C_MspInit+0x100>)
 8003056:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003058:	4b1e      	ldr	r3, [pc, #120]	; (80030d4 <HAL_I2C_MspInit+0xfc>)
 800305a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800305e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003060:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <HAL_I2C_MspInit+0xfc>)
 8003062:	2200      	movs	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003066:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_I2C_MspInit+0xfc>)
 8003068:	2200      	movs	r2, #0
 800306a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_I2C_MspInit+0xfc>)
 800306e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003072:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003074:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_I2C_MspInit+0xfc>)
 8003076:	2200      	movs	r2, #0
 8003078:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800307a:	4b16      	ldr	r3, [pc, #88]	; (80030d4 <HAL_I2C_MspInit+0xfc>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003080:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <HAL_I2C_MspInit+0xfc>)
 8003082:	2200      	movs	r2, #0
 8003084:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003086:	4b13      	ldr	r3, [pc, #76]	; (80030d4 <HAL_I2C_MspInit+0xfc>)
 8003088:	2200      	movs	r2, #0
 800308a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_I2C_MspInit+0xfc>)
 800308e:	2200      	movs	r2, #0
 8003090:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003092:	4810      	ldr	r0, [pc, #64]	; (80030d4 <HAL_I2C_MspInit+0xfc>)
 8003094:	f001 fd64 	bl	8004b60 <HAL_DMA_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 800309e:	f7ff fda9 	bl	8002bf4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a0b      	ldr	r2, [pc, #44]	; (80030d4 <HAL_I2C_MspInit+0xfc>)
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
 80030a8:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <HAL_I2C_MspInit+0xfc>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	201f      	movs	r0, #31
 80030b4:	f001 fada 	bl	800466c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80030b8:	201f      	movs	r0, #31
 80030ba:	f001 faf3 	bl	80046a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030be:	bf00      	nop
 80030c0:	3728      	adds	r7, #40	; 0x28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40005400 	.word	0x40005400
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40020400 	.word	0x40020400
 80030d4:	200004b8 	.word	0x200004b8
 80030d8:	40026010 	.word	0x40026010

080030dc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a0e      	ldr	r2, [pc, #56]	; (8003124 <HAL_I2C_MspDeInit+0x48>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d115      	bne.n	800311a <HAL_I2C_MspDeInit+0x3e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_I2C_MspDeInit+0x4c>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a0d      	ldr	r2, [pc, #52]	; (8003128 <HAL_I2C_MspDeInit+0x4c>)
 80030f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80030fa:	2140      	movs	r1, #64	; 0x40
 80030fc:	480b      	ldr	r0, [pc, #44]	; (800312c <HAL_I2C_MspDeInit+0x50>)
 80030fe:	f002 fb45 	bl	800578c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8003102:	2180      	movs	r1, #128	; 0x80
 8003104:	4809      	ldr	r0, [pc, #36]	; (800312c <HAL_I2C_MspDeInit+0x50>)
 8003106:	f002 fb41 	bl	800578c <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	4618      	mov	r0, r3
 8003110:	f001 fdd4 	bl	8004cbc <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8003114:	201f      	movs	r0, #31
 8003116:	f001 fad3 	bl	80046c0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40005400 	.word	0x40005400
 8003128:	40023800 	.word	0x40023800
 800312c:	40020400 	.word	0x40020400

08003130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003140:	d10e      	bne.n	8003160 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	4b4e      	ldr	r3, [pc, #312]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	4a4d      	ldr	r2, [pc, #308]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	6413      	str	r3, [r2, #64]	; 0x40
 8003152:	4b4b      	ldr	r3, [pc, #300]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800315e:	e08a      	b.n	8003276 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a47      	ldr	r2, [pc, #284]	; (8003284 <HAL_TIM_Base_MspInit+0x154>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d116      	bne.n	8003198 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	4b44      	ldr	r3, [pc, #272]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	4a43      	ldr	r2, [pc, #268]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 8003174:	f043 0302 	orr.w	r3, r3, #2
 8003178:	6413      	str	r3, [r2, #64]	; 0x40
 800317a:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003186:	2200      	movs	r2, #0
 8003188:	2100      	movs	r1, #0
 800318a:	201d      	movs	r0, #29
 800318c:	f001 fa6e 	bl	800466c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003190:	201d      	movs	r0, #29
 8003192:	f001 fa87 	bl	80046a4 <HAL_NVIC_EnableIRQ>
}
 8003196:	e06e      	b.n	8003276 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM4)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a3a      	ldr	r2, [pc, #232]	; (8003288 <HAL_TIM_Base_MspInit+0x158>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d116      	bne.n	80031d0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	4b36      	ldr	r3, [pc, #216]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a35      	ldr	r2, [pc, #212]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 80031ac:	f043 0304 	orr.w	r3, r3, #4
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b33      	ldr	r3, [pc, #204]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80031be:	2200      	movs	r2, #0
 80031c0:	2100      	movs	r1, #0
 80031c2:	201e      	movs	r0, #30
 80031c4:	f001 fa52 	bl	800466c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80031c8:	201e      	movs	r0, #30
 80031ca:	f001 fa6b 	bl	80046a4 <HAL_NVIC_EnableIRQ>
}
 80031ce:	e052      	b.n	8003276 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM6)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a2d      	ldr	r2, [pc, #180]	; (800328c <HAL_TIM_Base_MspInit+0x15c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d116      	bne.n	8003208 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	4a27      	ldr	r2, [pc, #156]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 80031e4:	f043 0310 	orr.w	r3, r3, #16
 80031e8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ea:	4b25      	ldr	r3, [pc, #148]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	613b      	str	r3, [r7, #16]
 80031f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	2036      	movs	r0, #54	; 0x36
 80031fc:	f001 fa36 	bl	800466c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003200:	2036      	movs	r0, #54	; 0x36
 8003202:	f001 fa4f 	bl	80046a4 <HAL_NVIC_EnableIRQ>
}
 8003206:	e036      	b.n	8003276 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM7)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a20      	ldr	r2, [pc, #128]	; (8003290 <HAL_TIM_Base_MspInit+0x160>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d116      	bne.n	8003240 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	4a19      	ldr	r2, [pc, #100]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 800321c:	f043 0320 	orr.w	r3, r3, #32
 8003220:	6413      	str	r3, [r2, #64]	; 0x40
 8003222:	4b17      	ldr	r3, [pc, #92]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800322e:	2200      	movs	r2, #0
 8003230:	2100      	movs	r1, #0
 8003232:	2037      	movs	r0, #55	; 0x37
 8003234:	f001 fa1a 	bl	800466c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003238:	2037      	movs	r0, #55	; 0x37
 800323a:	f001 fa33 	bl	80046a4 <HAL_NVIC_EnableIRQ>
}
 800323e:	e01a      	b.n	8003276 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM10)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a13      	ldr	r2, [pc, #76]	; (8003294 <HAL_TIM_Base_MspInit+0x164>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d115      	bne.n	8003276 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	4a0b      	ldr	r2, [pc, #44]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 8003254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003258:	6453      	str	r3, [r2, #68]	; 0x44
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <HAL_TIM_Base_MspInit+0x150>)
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003266:	2200      	movs	r2, #0
 8003268:	2100      	movs	r1, #0
 800326a:	2019      	movs	r0, #25
 800326c:	f001 f9fe 	bl	800466c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003270:	2019      	movs	r0, #25
 8003272:	f001 fa17 	bl	80046a4 <HAL_NVIC_EnableIRQ>
}
 8003276:	bf00      	nop
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023800 	.word	0x40023800
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800
 800328c:	40001000 	.word	0x40001000
 8003290:	40001400 	.word	0x40001400
 8003294:	40014400 	.word	0x40014400

08003298 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08c      	sub	sp, #48	; 0x30
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a0:	f107 031c 	add.w	r3, r7, #28
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a68      	ldr	r2, [pc, #416]	; (8003458 <HAL_UART_MspInit+0x1c0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d163      	bne.n	8003382 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	4b67      	ldr	r3, [pc, #412]	; (800345c <HAL_UART_MspInit+0x1c4>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a66      	ldr	r2, [pc, #408]	; (800345c <HAL_UART_MspInit+0x1c4>)
 80032c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b64      	ldr	r3, [pc, #400]	; (800345c <HAL_UART_MspInit+0x1c4>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	4b60      	ldr	r3, [pc, #384]	; (800345c <HAL_UART_MspInit+0x1c4>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a5f      	ldr	r2, [pc, #380]	; (800345c <HAL_UART_MspInit+0x1c4>)
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b5d      	ldr	r3, [pc, #372]	; (800345c <HAL_UART_MspInit+0x1c4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f8:	2302      	movs	r3, #2
 80032fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003300:	2303      	movs	r3, #3
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003304:	2307      	movs	r3, #7
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003308:	f107 031c 	add.w	r3, r7, #28
 800330c:	4619      	mov	r1, r3
 800330e:	4854      	ldr	r0, [pc, #336]	; (8003460 <HAL_UART_MspInit+0x1c8>)
 8003310:	f002 f8a0 	bl	8005454 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003314:	4b53      	ldr	r3, [pc, #332]	; (8003464 <HAL_UART_MspInit+0x1cc>)
 8003316:	4a54      	ldr	r2, [pc, #336]	; (8003468 <HAL_UART_MspInit+0x1d0>)
 8003318:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800331a:	4b52      	ldr	r3, [pc, #328]	; (8003464 <HAL_UART_MspInit+0x1cc>)
 800331c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003320:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003322:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_UART_MspInit+0x1cc>)
 8003324:	2240      	movs	r2, #64	; 0x40
 8003326:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003328:	4b4e      	ldr	r3, [pc, #312]	; (8003464 <HAL_UART_MspInit+0x1cc>)
 800332a:	2200      	movs	r2, #0
 800332c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800332e:	4b4d      	ldr	r3, [pc, #308]	; (8003464 <HAL_UART_MspInit+0x1cc>)
 8003330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003334:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003336:	4b4b      	ldr	r3, [pc, #300]	; (8003464 <HAL_UART_MspInit+0x1cc>)
 8003338:	2200      	movs	r2, #0
 800333a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800333c:	4b49      	ldr	r3, [pc, #292]	; (8003464 <HAL_UART_MspInit+0x1cc>)
 800333e:	2200      	movs	r2, #0
 8003340:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003342:	4b48      	ldr	r3, [pc, #288]	; (8003464 <HAL_UART_MspInit+0x1cc>)
 8003344:	2200      	movs	r2, #0
 8003346:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003348:	4b46      	ldr	r3, [pc, #280]	; (8003464 <HAL_UART_MspInit+0x1cc>)
 800334a:	2200      	movs	r2, #0
 800334c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800334e:	4b45      	ldr	r3, [pc, #276]	; (8003464 <HAL_UART_MspInit+0x1cc>)
 8003350:	2200      	movs	r2, #0
 8003352:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003354:	4843      	ldr	r0, [pc, #268]	; (8003464 <HAL_UART_MspInit+0x1cc>)
 8003356:	f001 fc03 	bl	8004b60 <HAL_DMA_Init>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003360:	f7ff fc48 	bl	8002bf4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a3f      	ldr	r2, [pc, #252]	; (8003464 <HAL_UART_MspInit+0x1cc>)
 8003368:	635a      	str	r2, [r3, #52]	; 0x34
 800336a:	4a3e      	ldr	r2, [pc, #248]	; (8003464 <HAL_UART_MspInit+0x1cc>)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003370:	2200      	movs	r2, #0
 8003372:	2100      	movs	r1, #0
 8003374:	2027      	movs	r0, #39	; 0x27
 8003376:	f001 f979 	bl	800466c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800337a:	2027      	movs	r0, #39	; 0x27
 800337c:	f001 f992 	bl	80046a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003380:	e066      	b.n	8003450 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a39      	ldr	r2, [pc, #228]	; (800346c <HAL_UART_MspInit+0x1d4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d161      	bne.n	8003450 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 800338c:	2300      	movs	r3, #0
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	4b32      	ldr	r3, [pc, #200]	; (800345c <HAL_UART_MspInit+0x1c4>)
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	4a31      	ldr	r2, [pc, #196]	; (800345c <HAL_UART_MspInit+0x1c4>)
 8003396:	f043 0320 	orr.w	r3, r3, #32
 800339a:	6453      	str	r3, [r2, #68]	; 0x44
 800339c:	4b2f      	ldr	r3, [pc, #188]	; (800345c <HAL_UART_MspInit+0x1c4>)
 800339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	4b2b      	ldr	r3, [pc, #172]	; (800345c <HAL_UART_MspInit+0x1c4>)
 80033ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b0:	4a2a      	ldr	r2, [pc, #168]	; (800345c <HAL_UART_MspInit+0x1c4>)
 80033b2:	f043 0304 	orr.w	r3, r3, #4
 80033b6:	6313      	str	r3, [r2, #48]	; 0x30
 80033b8:	4b28      	ldr	r3, [pc, #160]	; (800345c <HAL_UART_MspInit+0x1c4>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033c4:	23c0      	movs	r3, #192	; 0xc0
 80033c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c8:	2302      	movs	r3, #2
 80033ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033d0:	2303      	movs	r3, #3
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80033d4:	2308      	movs	r3, #8
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d8:	f107 031c 	add.w	r3, r7, #28
 80033dc:	4619      	mov	r1, r3
 80033de:	4824      	ldr	r0, [pc, #144]	; (8003470 <HAL_UART_MspInit+0x1d8>)
 80033e0:	f002 f838 	bl	8005454 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80033e4:	4b23      	ldr	r3, [pc, #140]	; (8003474 <HAL_UART_MspInit+0x1dc>)
 80033e6:	4a24      	ldr	r2, [pc, #144]	; (8003478 <HAL_UART_MspInit+0x1e0>)
 80033e8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80033ea:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_UART_MspInit+0x1dc>)
 80033ec:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80033f0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033f2:	4b20      	ldr	r3, [pc, #128]	; (8003474 <HAL_UART_MspInit+0x1dc>)
 80033f4:	2240      	movs	r2, #64	; 0x40
 80033f6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f8:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <HAL_UART_MspInit+0x1dc>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033fe:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HAL_UART_MspInit+0x1dc>)
 8003400:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003404:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003406:	4b1b      	ldr	r3, [pc, #108]	; (8003474 <HAL_UART_MspInit+0x1dc>)
 8003408:	2200      	movs	r2, #0
 800340a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800340c:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_UART_MspInit+0x1dc>)
 800340e:	2200      	movs	r2, #0
 8003410:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003412:	4b18      	ldr	r3, [pc, #96]	; (8003474 <HAL_UART_MspInit+0x1dc>)
 8003414:	2200      	movs	r2, #0
 8003416:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003418:	4b16      	ldr	r3, [pc, #88]	; (8003474 <HAL_UART_MspInit+0x1dc>)
 800341a:	2200      	movs	r2, #0
 800341c:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <HAL_UART_MspInit+0x1dc>)
 8003420:	2200      	movs	r2, #0
 8003422:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003424:	4813      	ldr	r0, [pc, #76]	; (8003474 <HAL_UART_MspInit+0x1dc>)
 8003426:	f001 fb9b 	bl	8004b60 <HAL_DMA_Init>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8003430:	f7ff fbe0 	bl	8002bf4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a0f      	ldr	r2, [pc, #60]	; (8003474 <HAL_UART_MspInit+0x1dc>)
 8003438:	635a      	str	r2, [r3, #52]	; 0x34
 800343a:	4a0e      	ldr	r2, [pc, #56]	; (8003474 <HAL_UART_MspInit+0x1dc>)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003440:	2200      	movs	r2, #0
 8003442:	2100      	movs	r1, #0
 8003444:	2047      	movs	r0, #71	; 0x47
 8003446:	f001 f911 	bl	800466c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800344a:	2047      	movs	r0, #71	; 0x47
 800344c:	f001 f92a 	bl	80046a4 <HAL_NVIC_EnableIRQ>
}
 8003450:	bf00      	nop
 8003452:	3730      	adds	r7, #48	; 0x30
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40004800 	.word	0x40004800
 800345c:	40023800 	.word	0x40023800
 8003460:	40020400 	.word	0x40020400
 8003464:	20000750 	.word	0x20000750
 8003468:	40026058 	.word	0x40026058
 800346c:	40011400 	.word	0x40011400
 8003470:	40020800 	.word	0x40020800
 8003474:	200007b0 	.word	0x200007b0
 8003478:	400264a0 	.word	0x400264a0

0800347c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08c      	sub	sp, #48	; 0x30
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003488:	2300      	movs	r3, #0
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800348c:	2200      	movs	r2, #0
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	2019      	movs	r0, #25
 8003492:	f001 f8eb 	bl	800466c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003496:	2019      	movs	r0, #25
 8003498:	f001 f904 	bl	80046a4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	4b1f      	ldr	r3, [pc, #124]	; (8003520 <HAL_InitTick+0xa4>)
 80034a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a4:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <HAL_InitTick+0xa4>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6453      	str	r3, [r2, #68]	; 0x44
 80034ac:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <HAL_InitTick+0xa4>)
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034b8:	f107 0210 	add.w	r2, r7, #16
 80034bc:	f107 0314 	add.w	r3, r7, #20
 80034c0:	4611      	mov	r1, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f005 fea6 	bl	8009214 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80034c8:	f005 fe90 	bl	80091ec <HAL_RCC_GetPCLK2Freq>
 80034cc:	4603      	mov	r3, r0
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d4:	4a13      	ldr	r2, [pc, #76]	; (8003524 <HAL_InitTick+0xa8>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	0c9b      	lsrs	r3, r3, #18
 80034dc:	3b01      	subs	r3, #1
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <HAL_InitTick+0xac>)
 80034e2:	4a12      	ldr	r2, [pc, #72]	; (800352c <HAL_InitTick+0xb0>)
 80034e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80034e6:	4b10      	ldr	r3, [pc, #64]	; (8003528 <HAL_InitTick+0xac>)
 80034e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80034ee:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <HAL_InitTick+0xac>)
 80034f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <HAL_InitTick+0xac>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034fa:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <HAL_InitTick+0xac>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003500:	4809      	ldr	r0, [pc, #36]	; (8003528 <HAL_InitTick+0xac>)
 8003502:	f005 feb9 	bl	8009278 <HAL_TIM_Base_Init>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800350c:	4806      	ldr	r0, [pc, #24]	; (8003528 <HAL_InitTick+0xac>)
 800350e:	f005 ff03 	bl	8009318 <HAL_TIM_Base_Start_IT>
 8003512:	4603      	mov	r3, r0
 8003514:	e000      	b.n	8003518 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
}
 8003518:	4618      	mov	r0, r3
 800351a:	3730      	adds	r7, #48	; 0x30
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40023800 	.word	0x40023800
 8003524:	431bde83 	.word	0x431bde83
 8003528:	20005afc 	.word	0x20005afc
 800352c:	40010000 	.word	0x40010000

08003530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003534:	e7fe      	b.n	8003534 <NMI_Handler+0x4>

08003536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003536:	b480      	push	{r7}
 8003538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800353a:	e7fe      	b.n	800353a <HardFault_Handler+0x4>

0800353c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003540:	e7fe      	b.n	8003540 <MemManage_Handler+0x4>

08003542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003542:	b480      	push	{r7}
 8003544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003546:	e7fe      	b.n	8003546 <BusFault_Handler+0x4>

08003548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800354c:	e7fe      	b.n	800354c <UsageFault_Handler+0x4>

0800354e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800354e:	b480      	push	{r7}
 8003550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800358a:	2004      	movs	r0, #4
 800358c:	f002 fa14 	bl	80059b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003590:	bf00      	nop
 8003592:	bd80      	pop	{r7, pc}

08003594 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003598:	2008      	movs	r0, #8
 800359a:	f002 fa0d 	bl	80059b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80035a6:	2010      	movs	r0, #16
 80035a8:	f002 fa06 	bl	80059b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <DMA1_Stream0_IRQHandler+0x10>)
 80035b6:	f001 fcc9 	bl	8004f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200004b8 	.word	0x200004b8

080035c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <DMA1_Stream3_IRQHandler+0x10>)
 80035ca:	f001 fcbf 	bl	8004f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000750 	.word	0x20000750

080035d8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <DMA1_Stream5_IRQHandler+0x10>)
 80035de:	f001 fcb5 	bl	8004f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200003a4 	.word	0x200003a4

080035ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <DMA1_Stream6_IRQHandler+0x10>)
 80035f2:	f001 fcab 	bl	8004f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000404 	.word	0x20000404

08003600 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003604:	4803      	ldr	r0, [pc, #12]	; (8003614 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003606:	f005 ff26 	bl	8009456 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800360a:	4803      	ldr	r0, [pc, #12]	; (8003618 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800360c:	f005 ff23 	bl	8009456 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20005afc 	.word	0x20005afc
 8003618:	20000680 	.word	0x20000680

0800361c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003620:	4802      	ldr	r0, [pc, #8]	; (800362c <TIM3_IRQHandler+0x10>)
 8003622:	f005 ff18 	bl	8009456 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000560 	.word	0x20000560

08003630 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003634:	4802      	ldr	r0, [pc, #8]	; (8003640 <TIM4_IRQHandler+0x10>)
 8003636:	f005 ff0e 	bl	8009456 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	200005a8 	.word	0x200005a8

08003644 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003648:	4802      	ldr	r0, [pc, #8]	; (8003654 <I2C1_EV_IRQHandler+0x10>)
 800364a:	f003 f923 	bl	8006894 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800364e:	bf00      	nop
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	20000464 	.word	0x20000464

08003658 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800365c:	4802      	ldr	r0, [pc, #8]	; (8003668 <USART3_IRQHandler+0x10>)
 800365e:	f006 fc19 	bl	8009e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	200006c8 	.word	0x200006c8

0800366c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003670:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003674:	f002 f9a0 	bl	80059b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003678:	bf00      	nop
 800367a:	bd80      	pop	{r7, pc}

0800367c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8003680:	4803      	ldr	r0, [pc, #12]	; (8003690 <TIM6_DAC_IRQHandler+0x14>)
 8003682:	f001 f91b 	bl	80048bc <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8003686:	4803      	ldr	r0, [pc, #12]	; (8003694 <TIM6_DAC_IRQHandler+0x18>)
 8003688:	f005 fee5 	bl	8009456 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800368c:	bf00      	nop
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000390 	.word	0x20000390
 8003694:	200005f0 	.word	0x200005f0

08003698 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <TIM7_IRQHandler+0x10>)
 800369e:	f005 feda 	bl	8009456 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000638 	.word	0x20000638

080036ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036b0:	4802      	ldr	r0, [pc, #8]	; (80036bc <DMA2_Stream0_IRQHandler+0x10>)
 80036b2:	f001 fc4b 	bl	8004f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200002d0 	.word	0x200002d0

080036c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80036c4:	4802      	ldr	r0, [pc, #8]	; (80036d0 <DMA2_Stream2_IRQHandler+0x10>)
 80036c6:	f001 fc41 	bl	8004f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000330 	.word	0x20000330

080036d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80036d8:	4802      	ldr	r0, [pc, #8]	; (80036e4 <DMA2_Stream6_IRQHandler+0x10>)
 80036da:	f001 fc37 	bl	8004f4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	200007b0 	.word	0x200007b0

080036e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80036ec:	4802      	ldr	r0, [pc, #8]	; (80036f8 <USART6_IRQHandler+0x10>)
 80036ee:	f006 fbd1 	bl	8009e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	2000070c 	.word	0x2000070c

080036fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
	return 1;
 8003700:	2301      	movs	r3, #1
}
 8003702:	4618      	mov	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <_kill>:

int _kill(int pid, int sig)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003716:	f007 fbbf 	bl	800ae98 <__errno>
 800371a:	4603      	mov	r3, r0
 800371c:	2216      	movs	r2, #22
 800371e:	601a      	str	r2, [r3, #0]
	return -1;
 8003720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <_exit>:

void _exit (int status)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff ffe7 	bl	800370c <_kill>
	while (1) {}		/* Make sure we hang here */
 800373e:	e7fe      	b.n	800373e <_exit+0x12>

08003740 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	e00a      	b.n	8003768 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003752:	f3af 8000 	nop.w
 8003756:	4601      	mov	r1, r0
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	60ba      	str	r2, [r7, #8]
 800375e:	b2ca      	uxtb	r2, r1
 8003760:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	3301      	adds	r3, #1
 8003766:	617b      	str	r3, [r7, #20]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	429a      	cmp	r2, r3
 800376e:	dbf0      	blt.n	8003752 <_read+0x12>
	}

return len;
 8003770:	687b      	ldr	r3, [r7, #4]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	60f8      	str	r0, [r7, #12]
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e009      	b.n	80037a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	60ba      	str	r2, [r7, #8]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	3301      	adds	r3, #1
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	dbf1      	blt.n	800378c <_write+0x12>
	}
	return len;
 80037a8:	687b      	ldr	r3, [r7, #4]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <_close>:

int _close(int file)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
	return -1;
 80037ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037da:	605a      	str	r2, [r3, #4]
	return 0;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <_isatty>:

int _isatty(int file)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
	return 1;
 80037f2:	2301      	movs	r3, #1
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
	return 0;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <_sbrk+0x5c>)
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <_sbrk+0x60>)
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003830:	4b13      	ldr	r3, [pc, #76]	; (8003880 <_sbrk+0x64>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d102      	bne.n	800383e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003838:	4b11      	ldr	r3, [pc, #68]	; (8003880 <_sbrk+0x64>)
 800383a:	4a12      	ldr	r2, [pc, #72]	; (8003884 <_sbrk+0x68>)
 800383c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <_sbrk+0x64>)
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	429a      	cmp	r2, r3
 800384a:	d207      	bcs.n	800385c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800384c:	f007 fb24 	bl	800ae98 <__errno>
 8003850:	4603      	mov	r3, r0
 8003852:	220c      	movs	r2, #12
 8003854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003856:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800385a:	e009      	b.n	8003870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800385c:	4b08      	ldr	r3, [pc, #32]	; (8003880 <_sbrk+0x64>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003862:	4b07      	ldr	r3, [pc, #28]	; (8003880 <_sbrk+0x64>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4413      	add	r3, r2
 800386a:	4a05      	ldr	r2, [pc, #20]	; (8003880 <_sbrk+0x64>)
 800386c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800386e:	68fb      	ldr	r3, [r7, #12]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	20020000 	.word	0x20020000
 800387c:	00000400 	.word	0x00000400
 8003880:	20005b44 	.word	0x20005b44
 8003884:	20005b60 	.word	0x20005b60

08003888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800388c:	4b06      	ldr	r3, [pc, #24]	; (80038a8 <SystemInit+0x20>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003892:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <SystemInit+0x20>)
 8003894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80038ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038b0:	480d      	ldr	r0, [pc, #52]	; (80038e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038b2:	490e      	ldr	r1, [pc, #56]	; (80038ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038b4:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038b8:	e002      	b.n	80038c0 <LoopCopyDataInit>

080038ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038be:	3304      	adds	r3, #4

080038c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038c4:	d3f9      	bcc.n	80038ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038c6:	4a0b      	ldr	r2, [pc, #44]	; (80038f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80038c8:	4c0b      	ldr	r4, [pc, #44]	; (80038f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80038ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038cc:	e001      	b.n	80038d2 <LoopFillZerobss>

080038ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038d0:	3204      	adds	r2, #4

080038d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038d4:	d3fb      	bcc.n	80038ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80038d6:	f7ff ffd7 	bl	8003888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80038da:	f007 fae3 	bl	800aea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038de:	f7fe fb61 	bl	8001fa4 <main>
  bx  lr    
 80038e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80038e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80038f0:	0800e344 	.word	0x0800e344
  ldr r2, =_sbss
 80038f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80038f8:	20005b5c 	.word	0x20005b5c

080038fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038fc:	e7fe      	b.n	80038fc <ADC_IRQHandler>
	...

08003900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003904:	4b0e      	ldr	r3, [pc, #56]	; (8003940 <HAL_Init+0x40>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a0d      	ldr	r2, [pc, #52]	; (8003940 <HAL_Init+0x40>)
 800390a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800390e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_Init+0x40>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <HAL_Init+0x40>)
 8003916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800391a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_Init+0x40>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a07      	ldr	r2, [pc, #28]	; (8003940 <HAL_Init+0x40>)
 8003922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003928:	2003      	movs	r0, #3
 800392a:	f000 fe94 	bl	8004656 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800392e:	2000      	movs	r0, #0
 8003930:	f7ff fda4 	bl	800347c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003934:	f7ff f964 	bl	8002c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40023c00 	.word	0x40023c00

08003944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003948:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_IncTick+0x20>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	461a      	mov	r2, r3
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_IncTick+0x24>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4413      	add	r3, r2
 8003954:	4a04      	ldr	r2, [pc, #16]	; (8003968 <HAL_IncTick+0x24>)
 8003956:	6013      	str	r3, [r2, #0]
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000008 	.word	0x20000008
 8003968:	20005b48 	.word	0x20005b48

0800396c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return uwTick;
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <HAL_GetTick+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20005b48 	.word	0x20005b48

08003984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800398c:	f7ff ffee 	bl	800396c <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800399c:	d005      	beq.n	80039aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <HAL_Delay+0x44>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039aa:	bf00      	nop
 80039ac:	f7ff ffde 	bl	800396c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d8f7      	bhi.n	80039ac <HAL_Delay+0x28>
  {
  }
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000008 	.word	0x20000008

080039cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e033      	b.n	8003a4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff f930 	bl	8002c50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d118      	bne.n	8003a3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a12:	f023 0302 	bic.w	r3, r3, #2
 8003a16:	f043 0202 	orr.w	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fbca 	bl	80041b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f023 0303 	bic.w	r3, r3, #3
 8003a32:	f043 0201 	orr.w	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40
 8003a3a:	e001      	b.n	8003a40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_Start+0x1a>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e0b2      	b.n	8003bd4 <HAL_ADC_Start+0x180>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d018      	beq.n	8003ab6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a94:	4b52      	ldr	r3, [pc, #328]	; (8003be0 <HAL_ADC_Start+0x18c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a52      	ldr	r2, [pc, #328]	; (8003be4 <HAL_ADC_Start+0x190>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	0c9a      	lsrs	r2, r3, #18
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003aa8:	e002      	b.n	8003ab0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f9      	bne.n	8003aaa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d17a      	bne.n	8003bba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d007      	beq.n	8003af6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003aee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b02:	d106      	bne.n	8003b12 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b08:	f023 0206 	bic.w	r2, r3, #6
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	645a      	str	r2, [r3, #68]	; 0x44
 8003b10:	e002      	b.n	8003b18 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b20:	4b31      	ldr	r3, [pc, #196]	; (8003be8 <HAL_ADC_Start+0x194>)
 8003b22:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003b2c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 031f 	and.w	r3, r3, #31
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d12a      	bne.n	8003b90 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a2b      	ldr	r2, [pc, #172]	; (8003bec <HAL_ADC_Start+0x198>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d015      	beq.n	8003b70 <HAL_ADC_Start+0x11c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a29      	ldr	r2, [pc, #164]	; (8003bf0 <HAL_ADC_Start+0x19c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d105      	bne.n	8003b5a <HAL_ADC_Start+0x106>
 8003b4e:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <HAL_ADC_Start+0x194>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a25      	ldr	r2, [pc, #148]	; (8003bf4 <HAL_ADC_Start+0x1a0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d136      	bne.n	8003bd2 <HAL_ADC_Start+0x17e>
 8003b64:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <HAL_ADC_Start+0x194>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d130      	bne.n	8003bd2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d129      	bne.n	8003bd2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	e020      	b.n	8003bd2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a15      	ldr	r2, [pc, #84]	; (8003bec <HAL_ADC_Start+0x198>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d11b      	bne.n	8003bd2 <HAL_ADC_Start+0x17e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d114      	bne.n	8003bd2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bb6:	609a      	str	r2, [r3, #8]
 8003bb8:	e00b      	b.n	8003bd2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	f043 0210 	orr.w	r2, r3, #16
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	f043 0201 	orr.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	20000000 	.word	0x20000000
 8003be4:	431bde83 	.word	0x431bde83
 8003be8:	40012300 	.word	0x40012300
 8003bec:	40012000 	.word	0x40012000
 8003bf0:	40012100 	.word	0x40012100
 8003bf4:	40012200 	.word	0x40012200

08003bf8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c14:	d113      	bne.n	8003c3e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c24:	d10b      	bne.n	8003c3e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f043 0220 	orr.w	r2, r3, #32
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e063      	b.n	8003d06 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003c3e:	f7ff fe95 	bl	800396c <HAL_GetTick>
 8003c42:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c44:	e021      	b.n	8003c8a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c4c:	d01d      	beq.n	8003c8a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <HAL_ADC_PollForConversion+0x6c>
 8003c54:	f7ff fe8a 	bl	800396c <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d212      	bcs.n	8003c8a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d00b      	beq.n	8003c8a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f043 0204 	orr.w	r2, r3, #4
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e03d      	b.n	8003d06 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d1d6      	bne.n	8003c46 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0212 	mvn.w	r2, #18
 8003ca0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d123      	bne.n	8003d04 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d11f      	bne.n	8003d04 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d006      	beq.n	8003ce0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d111      	bne.n	8003d04 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d105      	bne.n	8003d04 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_ADC_Start_DMA+0x1e>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e0e9      	b.n	8003f02 <HAL_ADC_Start_DMA+0x1f2>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d018      	beq.n	8003d76 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d54:	4b6d      	ldr	r3, [pc, #436]	; (8003f0c <HAL_ADC_Start_DMA+0x1fc>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a6d      	ldr	r2, [pc, #436]	; (8003f10 <HAL_ADC_Start_DMA+0x200>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	0c9a      	lsrs	r2, r3, #18
 8003d60:	4613      	mov	r3, r2
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	4413      	add	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003d68:	e002      	b.n	8003d70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f9      	bne.n	8003d6a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d84:	d107      	bne.n	8003d96 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d94:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 0301 	and.w	r3, r3, #1
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	f040 80a1 	bne.w	8003ee8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d007      	beq.n	8003dd8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de4:	d106      	bne.n	8003df4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	f023 0206 	bic.w	r2, r3, #6
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	645a      	str	r2, [r3, #68]	; 0x44
 8003df2:	e002      	b.n	8003dfa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e02:	4b44      	ldr	r3, [pc, #272]	; (8003f14 <HAL_ADC_Start_DMA+0x204>)
 8003e04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	4a43      	ldr	r2, [pc, #268]	; (8003f18 <HAL_ADC_Start_DMA+0x208>)
 8003e0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	4a42      	ldr	r2, [pc, #264]	; (8003f1c <HAL_ADC_Start_DMA+0x20c>)
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	4a41      	ldr	r2, [pc, #260]	; (8003f20 <HAL_ADC_Start_DMA+0x210>)
 8003e1c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003e36:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e46:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	334c      	adds	r3, #76	; 0x4c
 8003e52:	4619      	mov	r1, r3
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f000 ff8e 	bl	8004d78 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d12a      	bne.n	8003ebe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2d      	ldr	r2, [pc, #180]	; (8003f24 <HAL_ADC_Start_DMA+0x214>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d015      	beq.n	8003e9e <HAL_ADC_Start_DMA+0x18e>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a2c      	ldr	r2, [pc, #176]	; (8003f28 <HAL_ADC_Start_DMA+0x218>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d105      	bne.n	8003e88 <HAL_ADC_Start_DMA+0x178>
 8003e7c:	4b25      	ldr	r3, [pc, #148]	; (8003f14 <HAL_ADC_Start_DMA+0x204>)
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f003 031f 	and.w	r3, r3, #31
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a27      	ldr	r2, [pc, #156]	; (8003f2c <HAL_ADC_Start_DMA+0x21c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d136      	bne.n	8003f00 <HAL_ADC_Start_DMA+0x1f0>
 8003e92:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <HAL_ADC_Start_DMA+0x204>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d130      	bne.n	8003f00 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d129      	bne.n	8003f00 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	e020      	b.n	8003f00 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a18      	ldr	r2, [pc, #96]	; (8003f24 <HAL_ADC_Start_DMA+0x214>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d11b      	bne.n	8003f00 <HAL_ADC_Start_DMA+0x1f0>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d114      	bne.n	8003f00 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	e00b      	b.n	8003f00 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	f043 0210 	orr.w	r2, r3, #16
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	f043 0201 	orr.w	r2, r3, #1
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000000 	.word	0x20000000
 8003f10:	431bde83 	.word	0x431bde83
 8003f14:	40012300 	.word	0x40012300
 8003f18:	080043b1 	.word	0x080043b1
 8003f1c:	0800446b 	.word	0x0800446b
 8003f20:	08004487 	.word	0x08004487
 8003f24:	40012000 	.word	0x40012000
 8003f28:	40012100 	.word	0x40012100
 8003f2c:	40012200 	.word	0x40012200

08003f30 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
	...

08003f74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_ADC_ConfigChannel+0x1c>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e105      	b.n	800419c <HAL_ADC_ConfigChannel+0x228>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b09      	cmp	r3, #9
 8003f9e:	d925      	bls.n	8003fec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68d9      	ldr	r1, [r3, #12]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3b1e      	subs	r3, #30
 8003fb6:	2207      	movs	r2, #7
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43da      	mvns	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	400a      	ands	r2, r1
 8003fc4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68d9      	ldr	r1, [r3, #12]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	4603      	mov	r3, r0
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4403      	add	r3, r0
 8003fde:	3b1e      	subs	r3, #30
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	60da      	str	r2, [r3, #12]
 8003fea:	e022      	b.n	8004032 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6919      	ldr	r1, [r3, #16]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	4413      	add	r3, r2
 8004000:	2207      	movs	r2, #7
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	43da      	mvns	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	400a      	ands	r2, r1
 800400e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6919      	ldr	r1, [r3, #16]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	4618      	mov	r0, r3
 8004022:	4603      	mov	r3, r0
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4403      	add	r3, r0
 8004028:	409a      	lsls	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b06      	cmp	r3, #6
 8004038:	d824      	bhi.n	8004084 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	3b05      	subs	r3, #5
 800404c:	221f      	movs	r2, #31
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43da      	mvns	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	400a      	ands	r2, r1
 800405a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	b29b      	uxth	r3, r3
 8004068:	4618      	mov	r0, r3
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	3b05      	subs	r3, #5
 8004076:	fa00 f203 	lsl.w	r2, r0, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	635a      	str	r2, [r3, #52]	; 0x34
 8004082:	e04c      	b.n	800411e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b0c      	cmp	r3, #12
 800408a:	d824      	bhi.n	80040d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	3b23      	subs	r3, #35	; 0x23
 800409e:	221f      	movs	r2, #31
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43da      	mvns	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	400a      	ands	r2, r1
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	4618      	mov	r0, r3
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	3b23      	subs	r3, #35	; 0x23
 80040c8:	fa00 f203 	lsl.w	r2, r0, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30
 80040d4:	e023      	b.n	800411e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	3b41      	subs	r3, #65	; 0x41
 80040e8:	221f      	movs	r2, #31
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	43da      	mvns	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	400a      	ands	r2, r1
 80040f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	4618      	mov	r0, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	3b41      	subs	r3, #65	; 0x41
 8004112:	fa00 f203 	lsl.w	r2, r0, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800411e:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <HAL_ADC_ConfigChannel+0x234>)
 8004120:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a21      	ldr	r2, [pc, #132]	; (80041ac <HAL_ADC_ConfigChannel+0x238>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d109      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x1cc>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b12      	cmp	r3, #18
 8004132:	d105      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a19      	ldr	r2, [pc, #100]	; (80041ac <HAL_ADC_ConfigChannel+0x238>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d123      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x21e>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b10      	cmp	r3, #16
 8004150:	d003      	beq.n	800415a <HAL_ADC_ConfigChannel+0x1e6>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b11      	cmp	r3, #17
 8004158:	d11b      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b10      	cmp	r3, #16
 800416c:	d111      	bne.n	8004192 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800416e:	4b10      	ldr	r3, [pc, #64]	; (80041b0 <HAL_ADC_ConfigChannel+0x23c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a10      	ldr	r2, [pc, #64]	; (80041b4 <HAL_ADC_ConfigChannel+0x240>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	0c9a      	lsrs	r2, r3, #18
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004184:	e002      	b.n	800418c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	3b01      	subs	r3, #1
 800418a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f9      	bne.n	8004186 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	40012300 	.word	0x40012300
 80041ac:	40012000 	.word	0x40012000
 80041b0:	20000000 	.word	0x20000000
 80041b4:	431bde83 	.word	0x431bde83

080041b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041c0:	4b79      	ldr	r3, [pc, #484]	; (80043a8 <ADC_Init+0x1f0>)
 80041c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	431a      	orrs	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6859      	ldr	r1, [r3, #4]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	021a      	lsls	r2, r3, #8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004210:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6859      	ldr	r1, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004232:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	6899      	ldr	r1, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	4a58      	ldr	r2, [pc, #352]	; (80043ac <ADC_Init+0x1f4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d022      	beq.n	8004296 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800425e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6899      	ldr	r1, [r3, #8]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004280:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6899      	ldr	r1, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	e00f      	b.n	80042b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0202 	bic.w	r2, r2, #2
 80042c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6899      	ldr	r1, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	7e1b      	ldrb	r3, [r3, #24]
 80042d0:	005a      	lsls	r2, r3, #1
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01b      	beq.n	800431c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004302:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6859      	ldr	r1, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	3b01      	subs	r3, #1
 8004310:	035a      	lsls	r2, r3, #13
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
 800431a:	e007      	b.n	800432c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800432a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	3b01      	subs	r3, #1
 8004348:	051a      	lsls	r2, r3, #20
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004360:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6899      	ldr	r1, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800436e:	025a      	lsls	r2, r3, #9
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6899      	ldr	r1, [r3, #8]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	029a      	lsls	r2, r3, #10
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	40012300 	.word	0x40012300
 80043ac:	0f000001 	.word	0x0f000001

080043b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d13c      	bne.n	8004444 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d12b      	bne.n	800443c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d127      	bne.n	800443c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d006      	beq.n	8004408 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004404:	2b00      	cmp	r3, #0
 8004406:	d119      	bne.n	800443c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f022 0220 	bic.w	r2, r2, #32
 8004416:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d105      	bne.n	800443c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004434:	f043 0201 	orr.w	r2, r3, #1
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f7ff fd84 	bl	8003f4a <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004442:	e00e      	b.n	8004462 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f7ff fd84 	bl	8003f5e <HAL_ADC_ErrorCallback>
}
 8004456:	e004      	b.n	8004462 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4798      	blx	r3
}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7fd fa5f 	bl	800193c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2240      	movs	r2, #64	; 0x40
 8004498:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f043 0204 	orr.w	r2, r3, #4
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7ff fd59 	bl	8003f5e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c4:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <__NVIC_SetPriorityGrouping+0x44>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044d0:	4013      	ands	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044e6:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <__NVIC_SetPriorityGrouping+0x44>)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	60d3      	str	r3, [r2, #12]
}
 80044ec:	bf00      	nop
 80044ee:	3714      	adds	r7, #20
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	e000ed00 	.word	0xe000ed00

080044fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004500:	4b04      	ldr	r3, [pc, #16]	; (8004514 <__NVIC_GetPriorityGrouping+0x18>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	0a1b      	lsrs	r3, r3, #8
 8004506:	f003 0307 	and.w	r3, r3, #7
}
 800450a:	4618      	mov	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	e000ed00 	.word	0xe000ed00

08004518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004526:	2b00      	cmp	r3, #0
 8004528:	db0b      	blt.n	8004542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	f003 021f 	and.w	r2, r3, #31
 8004530:	4907      	ldr	r1, [pc, #28]	; (8004550 <__NVIC_EnableIRQ+0x38>)
 8004532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	2001      	movs	r0, #1
 800453a:	fa00 f202 	lsl.w	r2, r0, r2
 800453e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	e000e100 	.word	0xe000e100

08004554 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	2b00      	cmp	r3, #0
 8004564:	db12      	blt.n	800458c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	f003 021f 	and.w	r2, r3, #31
 800456c:	490a      	ldr	r1, [pc, #40]	; (8004598 <__NVIC_DisableIRQ+0x44>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2001      	movs	r0, #1
 8004576:	fa00 f202 	lsl.w	r2, r0, r2
 800457a:	3320      	adds	r3, #32
 800457c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004580:	f3bf 8f4f 	dsb	sy
}
 8004584:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004586:	f3bf 8f6f 	isb	sy
}
 800458a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	e000e100 	.word	0xe000e100

0800459c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	6039      	str	r1, [r7, #0]
 80045a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	db0a      	blt.n	80045c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	b2da      	uxtb	r2, r3
 80045b4:	490c      	ldr	r1, [pc, #48]	; (80045e8 <__NVIC_SetPriority+0x4c>)
 80045b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ba:	0112      	lsls	r2, r2, #4
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	440b      	add	r3, r1
 80045c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045c4:	e00a      	b.n	80045dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	4908      	ldr	r1, [pc, #32]	; (80045ec <__NVIC_SetPriority+0x50>)
 80045cc:	79fb      	ldrb	r3, [r7, #7]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	3b04      	subs	r3, #4
 80045d4:	0112      	lsls	r2, r2, #4
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	440b      	add	r3, r1
 80045da:	761a      	strb	r2, [r3, #24]
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	e000e100 	.word	0xe000e100
 80045ec:	e000ed00 	.word	0xe000ed00

080045f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b089      	sub	sp, #36	; 0x24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f1c3 0307 	rsb	r3, r3, #7
 800460a:	2b04      	cmp	r3, #4
 800460c:	bf28      	it	cs
 800460e:	2304      	movcs	r3, #4
 8004610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3304      	adds	r3, #4
 8004616:	2b06      	cmp	r3, #6
 8004618:	d902      	bls.n	8004620 <NVIC_EncodePriority+0x30>
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	3b03      	subs	r3, #3
 800461e:	e000      	b.n	8004622 <NVIC_EncodePriority+0x32>
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	fa02 f303 	lsl.w	r3, r2, r3
 800462e:	43da      	mvns	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	401a      	ands	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004638:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	fa01 f303 	lsl.w	r3, r1, r3
 8004642:	43d9      	mvns	r1, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004648:	4313      	orrs	r3, r2
         );
}
 800464a:	4618      	mov	r0, r3
 800464c:	3724      	adds	r7, #36	; 0x24
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff ff28 	bl	80044b4 <__NVIC_SetPriorityGrouping>
}
 8004664:	bf00      	nop
 8004666:	3708      	adds	r7, #8
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800467e:	f7ff ff3d 	bl	80044fc <__NVIC_GetPriorityGrouping>
 8004682:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	68b9      	ldr	r1, [r7, #8]
 8004688:	6978      	ldr	r0, [r7, #20]
 800468a:	f7ff ffb1 	bl	80045f0 <NVIC_EncodePriority>
 800468e:	4602      	mov	r2, r0
 8004690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff ff80 	bl	800459c <__NVIC_SetPriority>
}
 800469c:	bf00      	nop
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	4603      	mov	r3, r0
 80046ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ff30 	bl	8004518 <__NVIC_EnableIRQ>
}
 80046b8:	bf00      	nop
 80046ba:	3708      	adds	r7, #8
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff ff40 	bl	8004554 <__NVIC_DisableIRQ>
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e014      	b.n	8004718 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	791b      	ldrb	r3, [r3, #4]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d105      	bne.n	8004704 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fe fbb4 	bl	8002e6c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800472e:	2300      	movs	r3, #0
 8004730:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	795b      	ldrb	r3, [r3, #5]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_DAC_Start_DMA+0x22>
 800473e:	2302      	movs	r3, #2
 8004740:	e0ab      	b.n	800489a <HAL_DAC_Start_DMA+0x17a>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2202      	movs	r2, #2
 800474c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d12f      	bne.n	80047b4 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4a52      	ldr	r2, [pc, #328]	; (80048a4 <HAL_DAC_Start_DMA+0x184>)
 800475a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	4a51      	ldr	r2, [pc, #324]	; (80048a8 <HAL_DAC_Start_DMA+0x188>)
 8004762:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4a50      	ldr	r2, [pc, #320]	; (80048ac <HAL_DAC_Start_DMA+0x18c>)
 800476a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800477a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	2b08      	cmp	r3, #8
 8004780:	d013      	beq.n	80047aa <HAL_DAC_Start_DMA+0x8a>
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d845      	bhi.n	8004814 <HAL_DAC_Start_DMA+0xf4>
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_DAC_Start_DMA+0x76>
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d005      	beq.n	80047a0 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004794:	e03e      	b.n	8004814 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3308      	adds	r3, #8
 800479c:	613b      	str	r3, [r7, #16]
        break;
 800479e:	e03c      	b.n	800481a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	613b      	str	r3, [r7, #16]
        break;
 80047a8:	e037      	b.n	800481a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	3310      	adds	r3, #16
 80047b0:	613b      	str	r3, [r7, #16]
        break;
 80047b2:	e032      	b.n	800481a <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4a3d      	ldr	r2, [pc, #244]	; (80048b0 <HAL_DAC_Start_DMA+0x190>)
 80047ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a3c      	ldr	r2, [pc, #240]	; (80048b4 <HAL_DAC_Start_DMA+0x194>)
 80047c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4a3b      	ldr	r2, [pc, #236]	; (80048b8 <HAL_DAC_Start_DMA+0x198>)
 80047ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047da:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d013      	beq.n	800480a <HAL_DAC_Start_DMA+0xea>
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d817      	bhi.n	8004818 <HAL_DAC_Start_DMA+0xf8>
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_DAC_Start_DMA+0xd6>
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d005      	beq.n	8004800 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80047f4:	e010      	b.n	8004818 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3314      	adds	r3, #20
 80047fc:	613b      	str	r3, [r7, #16]
        break;
 80047fe:	e00c      	b.n	800481a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3318      	adds	r3, #24
 8004806:	613b      	str	r3, [r7, #16]
        break;
 8004808:	e007      	b.n	800481a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	331c      	adds	r3, #28
 8004810:	613b      	str	r3, [r7, #16]
        break;
 8004812:	e002      	b.n	800481a <HAL_DAC_Start_DMA+0xfa>
        break;
 8004814:	bf00      	nop
 8004816:	e000      	b.n	800481a <HAL_DAC_Start_DMA+0xfa>
        break;
 8004818:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d111      	bne.n	8004844 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800482e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6898      	ldr	r0, [r3, #8]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	f000 fa9d 	bl	8004d78 <HAL_DMA_Start_IT>
 800483e:	4603      	mov	r3, r0
 8004840:	75fb      	strb	r3, [r7, #23]
 8004842:	e010      	b.n	8004866 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004852:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68d8      	ldr	r0, [r3, #12]
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	f000 fa8b 	bl	8004d78 <HAL_DMA_Start_IT>
 8004862:	4603      	mov	r3, r0
 8004864:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800486c:	7dfb      	ldrb	r3, [r7, #23]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10c      	bne.n	800488c <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6819      	ldr	r1, [r3, #0]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2201      	movs	r2, #1
 8004880:	409a      	lsls	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	e005      	b.n	8004898 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	f043 0204 	orr.w	r2, r3, #4
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004898:	7dfb      	ldrb	r3, [r7, #23]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	08004a4b 	.word	0x08004a4b
 80048a8:	08004a6d 	.word	0x08004a6d
 80048ac:	08004a89 	.word	0x08004a89
 80048b0:	08004af3 	.word	0x08004af3
 80048b4:	08004b15 	.word	0x08004b15
 80048b8:	08004b31 	.word	0x08004b31

080048bc <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048d2:	d120      	bne.n	8004916 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e2:	d118      	bne.n	8004916 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2204      	movs	r2, #4
 80048e8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f043 0201 	orr.w	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800490e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f841 	bl	8004998 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004924:	d120      	bne.n	8004968 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004934:	d118      	bne.n	8004968 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2204      	movs	r2, #4
 800493a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	f043 0202 	orr.w	r2, r3, #2
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004950:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004960:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f8bb 	bl	8004ade <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8004968:	bf00      	nop
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	795b      	ldrb	r3, [r3, #5]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <HAL_DAC_ConfigChannel+0x18>
 80049c0:	2302      	movs	r3, #2
 80049c2:	e03c      	b.n	8004a3e <HAL_DAC_ConfigChannel+0x92>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2201      	movs	r2, #1
 80049c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2202      	movs	r2, #2
 80049ce:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f003 0310 	and.w	r3, r3, #16
 80049de:	f640 72fe 	movw	r2, #4094	; 0xffe
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	4013      	ands	r3, r2
 80049ec:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6819      	ldr	r1, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	22c0      	movs	r2, #192	; 0xc0
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43da      	mvns	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	400a      	ands	r2, r1
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2201      	movs	r2, #1
 8004a34:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7fc ffad 	bl	80019b8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	711a      	strb	r2, [r3, #4]
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff ff78 	bl	8004970 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f043 0204 	orr.w	r2, r3, #4
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff ff6e 	bl	8004984 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	711a      	strb	r2, [r3, #4]
}
 8004aae:	bf00      	nop
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7fc ff77 	bl	80019f4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	711a      	strb	r2, [r3, #4]
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f7ff ffc7 	bl	8004ab6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	f043 0204 	orr.w	r2, r3, #4
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7ff ffbd 	bl	8004aca <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	711a      	strb	r2, [r3, #4]
}
 8004b56:	bf00      	nop
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b6c:	f7fe fefe 	bl	800396c <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e099      	b.n	8004cb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0201 	bic.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b9c:	e00f      	b.n	8004bbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b9e:	f7fe fee5 	bl	800396c <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b05      	cmp	r3, #5
 8004baa:	d908      	bls.n	8004bbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e078      	b.n	8004cb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e8      	bne.n	8004b9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4b38      	ldr	r3, [pc, #224]	; (8004cb8 <HAL_DMA_Init+0x158>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d107      	bne.n	8004c28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	4313      	orrs	r3, r2
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f023 0307 	bic.w	r3, r3, #7
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d117      	bne.n	8004c82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00e      	beq.n	8004c82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fb79 	bl	800535c <DMA_CheckFifoParam>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2240      	movs	r2, #64	; 0x40
 8004c74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e016      	b.n	8004cb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fb30 	bl	80052f0 <DMA_CalcBaseAndBitshift>
 8004c90:	4603      	mov	r3, r0
 8004c92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c98:	223f      	movs	r2, #63	; 0x3f
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	f010803f 	.word	0xf010803f

08004cbc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e050      	b.n	8004d70 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d101      	bne.n	8004cde <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e048      	b.n	8004d70 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0201 	bic.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2221      	movs	r2, #33	; 0x21
 8004d1c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fae6 	bl	80052f0 <DMA_CalcBaseAndBitshift>
 8004d24:	4603      	mov	r3, r0
 8004d26:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d50:	223f      	movs	r2, #63	; 0x3f
 8004d52:	409a      	lsls	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d101      	bne.n	8004d9e <HAL_DMA_Start_IT+0x26>
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	e040      	b.n	8004e20 <HAL_DMA_Start_IT+0xa8>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d12f      	bne.n	8004e12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 fa64 	bl	8005294 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd0:	223f      	movs	r2, #63	; 0x3f
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0216 	orr.w	r2, r2, #22
 8004de6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0208 	orr.w	r2, r2, #8
 8004dfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0201 	orr.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	e005      	b.n	8004e1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e36:	f7fe fd99 	bl	800396c <HAL_GetTick>
 8004e3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d008      	beq.n	8004e5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2280      	movs	r2, #128	; 0x80
 8004e4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e052      	b.n	8004f00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0216 	bic.w	r2, r2, #22
 8004e68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d103      	bne.n	8004e8a <HAL_DMA_Abort+0x62>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 0208 	bic.w	r2, r2, #8
 8004e98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0201 	bic.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004eaa:	e013      	b.n	8004ed4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004eac:	f7fe fd5e 	bl	800396c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d90c      	bls.n	8004ed4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2203      	movs	r2, #3
 8004ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e015      	b.n	8004f00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e4      	bne.n	8004eac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	223f      	movs	r2, #63	; 0x3f
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d004      	beq.n	8004f26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2280      	movs	r2, #128	; 0x80
 8004f20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e00c      	b.n	8004f40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2205      	movs	r2, #5
 8004f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0201 	bic.w	r2, r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f58:	4b8e      	ldr	r3, [pc, #568]	; (8005194 <HAL_DMA_IRQHandler+0x248>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a8e      	ldr	r2, [pc, #568]	; (8005198 <HAL_DMA_IRQHandler+0x24c>)
 8004f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f62:	0a9b      	lsrs	r3, r3, #10
 8004f64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f76:	2208      	movs	r2, #8
 8004f78:	409a      	lsls	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d01a      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d013      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0204 	bic.w	r2, r2, #4
 8004f9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	409a      	lsls	r2, r3
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb0:	f043 0201 	orr.w	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	409a      	lsls	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d012      	beq.n	8004fee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00b      	beq.n	8004fee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fda:	2201      	movs	r2, #1
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe6:	f043 0202 	orr.w	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	409a      	lsls	r2, r3
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d012      	beq.n	8005024 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00b      	beq.n	8005024 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005010:	2204      	movs	r2, #4
 8005012:	409a      	lsls	r2, r3
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501c:	f043 0204 	orr.w	r2, r3, #4
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005028:	2210      	movs	r2, #16
 800502a:	409a      	lsls	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4013      	ands	r3, r2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d043      	beq.n	80050bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0308 	and.w	r3, r3, #8
 800503e:	2b00      	cmp	r3, #0
 8005040:	d03c      	beq.n	80050bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005046:	2210      	movs	r2, #16
 8005048:	409a      	lsls	r2, r3
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d018      	beq.n	800508e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d108      	bne.n	800507c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d024      	beq.n	80050bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
 800507a:	e01f      	b.n	80050bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005080:	2b00      	cmp	r3, #0
 8005082:	d01b      	beq.n	80050bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	4798      	blx	r3
 800508c:	e016      	b.n	80050bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005098:	2b00      	cmp	r3, #0
 800509a:	d107      	bne.n	80050ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0208 	bic.w	r2, r2, #8
 80050aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c0:	2220      	movs	r2, #32
 80050c2:	409a      	lsls	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4013      	ands	r3, r2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 808f 	beq.w	80051ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8087 	beq.w	80051ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050e2:	2220      	movs	r2, #32
 80050e4:	409a      	lsls	r2, r3
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b05      	cmp	r3, #5
 80050f4:	d136      	bne.n	8005164 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0216 	bic.w	r2, r2, #22
 8005104:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005114:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	2b00      	cmp	r3, #0
 800511c:	d103      	bne.n	8005126 <HAL_DMA_IRQHandler+0x1da>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0208 	bic.w	r2, r2, #8
 8005134:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513a:	223f      	movs	r2, #63	; 0x3f
 800513c:	409a      	lsls	r2, r3
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005156:	2b00      	cmp	r3, #0
 8005158:	d07e      	beq.n	8005258 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	4798      	blx	r3
        }
        return;
 8005162:	e079      	b.n	8005258 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01d      	beq.n	80051ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10d      	bne.n	800519c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005184:	2b00      	cmp	r3, #0
 8005186:	d031      	beq.n	80051ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	4798      	blx	r3
 8005190:	e02c      	b.n	80051ec <HAL_DMA_IRQHandler+0x2a0>
 8005192:	bf00      	nop
 8005194:	20000000 	.word	0x20000000
 8005198:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d023      	beq.n	80051ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	4798      	blx	r3
 80051ac:	e01e      	b.n	80051ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10f      	bne.n	80051dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0210 	bic.w	r2, r2, #16
 80051ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d032      	beq.n	800525a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d022      	beq.n	8005246 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2205      	movs	r2, #5
 8005204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 0201 	bic.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	3301      	adds	r3, #1
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	429a      	cmp	r2, r3
 8005222:	d307      	bcc.n	8005234 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1f2      	bne.n	8005218 <HAL_DMA_IRQHandler+0x2cc>
 8005232:	e000      	b.n	8005236 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005234:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	4798      	blx	r3
 8005256:	e000      	b.n	800525a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005258:	bf00      	nop
    }
  }
}
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800526e:	b2db      	uxtb	r3, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d108      	bne.n	80052d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052d2:	e007      	b.n	80052e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	60da      	str	r2, [r3, #12]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	3b10      	subs	r3, #16
 8005300:	4a14      	ldr	r2, [pc, #80]	; (8005354 <DMA_CalcBaseAndBitshift+0x64>)
 8005302:	fba2 2303 	umull	r2, r3, r2, r3
 8005306:	091b      	lsrs	r3, r3, #4
 8005308:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800530a:	4a13      	ldr	r2, [pc, #76]	; (8005358 <DMA_CalcBaseAndBitshift+0x68>)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2b03      	cmp	r3, #3
 800531c:	d909      	bls.n	8005332 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	1d1a      	adds	r2, r3, #4
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	659a      	str	r2, [r3, #88]	; 0x58
 8005330:	e007      	b.n	8005342 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800533a:	f023 0303 	bic.w	r3, r3, #3
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	aaaaaaab 	.word	0xaaaaaaab
 8005358:	0800df54 	.word	0x0800df54

0800535c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005364:	2300      	movs	r3, #0
 8005366:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d11f      	bne.n	80053b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b03      	cmp	r3, #3
 800537a:	d856      	bhi.n	800542a <DMA_CheckFifoParam+0xce>
 800537c:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <DMA_CheckFifoParam+0x28>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	08005395 	.word	0x08005395
 8005388:	080053a7 	.word	0x080053a7
 800538c:	08005395 	.word	0x08005395
 8005390:	0800542b 	.word	0x0800542b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d046      	beq.n	800542e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053a4:	e043      	b.n	800542e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053ae:	d140      	bne.n	8005432 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053b4:	e03d      	b.n	8005432 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053be:	d121      	bne.n	8005404 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	d837      	bhi.n	8005436 <DMA_CheckFifoParam+0xda>
 80053c6:	a201      	add	r2, pc, #4	; (adr r2, 80053cc <DMA_CheckFifoParam+0x70>)
 80053c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053cc:	080053dd 	.word	0x080053dd
 80053d0:	080053e3 	.word	0x080053e3
 80053d4:	080053dd 	.word	0x080053dd
 80053d8:	080053f5 	.word	0x080053f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
      break;
 80053e0:	e030      	b.n	8005444 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d025      	beq.n	800543a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f2:	e022      	b.n	800543a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053fc:	d11f      	bne.n	800543e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005402:	e01c      	b.n	800543e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b02      	cmp	r3, #2
 8005408:	d903      	bls.n	8005412 <DMA_CheckFifoParam+0xb6>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b03      	cmp	r3, #3
 800540e:	d003      	beq.n	8005418 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005410:	e018      	b.n	8005444 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	73fb      	strb	r3, [r7, #15]
      break;
 8005416:	e015      	b.n	8005444 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00e      	beq.n	8005442 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	73fb      	strb	r3, [r7, #15]
      break;
 8005428:	e00b      	b.n	8005442 <DMA_CheckFifoParam+0xe6>
      break;
 800542a:	bf00      	nop
 800542c:	e00a      	b.n	8005444 <DMA_CheckFifoParam+0xe8>
      break;
 800542e:	bf00      	nop
 8005430:	e008      	b.n	8005444 <DMA_CheckFifoParam+0xe8>
      break;
 8005432:	bf00      	nop
 8005434:	e006      	b.n	8005444 <DMA_CheckFifoParam+0xe8>
      break;
 8005436:	bf00      	nop
 8005438:	e004      	b.n	8005444 <DMA_CheckFifoParam+0xe8>
      break;
 800543a:	bf00      	nop
 800543c:	e002      	b.n	8005444 <DMA_CheckFifoParam+0xe8>
      break;   
 800543e:	bf00      	nop
 8005440:	e000      	b.n	8005444 <DMA_CheckFifoParam+0xe8>
      break;
 8005442:	bf00      	nop
    }
  } 
  
  return status; 
 8005444:	7bfb      	ldrb	r3, [r7, #15]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop

08005454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005454:	b480      	push	{r7}
 8005456:	b089      	sub	sp, #36	; 0x24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005462:	2300      	movs	r3, #0
 8005464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005466:	2300      	movs	r3, #0
 8005468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	e16b      	b.n	8005748 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005470:	2201      	movs	r2, #1
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4013      	ands	r3, r2
 8005482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	429a      	cmp	r2, r3
 800548a:	f040 815a 	bne.w	8005742 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b01      	cmp	r3, #1
 8005498:	d005      	beq.n	80054a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d130      	bne.n	8005508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	2203      	movs	r2, #3
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43db      	mvns	r3, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4013      	ands	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054dc:	2201      	movs	r2, #1
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4013      	ands	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	091b      	lsrs	r3, r3, #4
 80054f2:	f003 0201 	and.w	r2, r3, #1
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4313      	orrs	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f003 0303 	and.w	r3, r3, #3
 8005510:	2b03      	cmp	r3, #3
 8005512:	d017      	beq.n	8005544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	2203      	movs	r2, #3
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	43db      	mvns	r3, r3
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	4013      	ands	r3, r2
 800552a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	005b      	lsls	r3, r3, #1
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	4313      	orrs	r3, r2
 800553c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d123      	bne.n	8005598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	08da      	lsrs	r2, r3, #3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3208      	adds	r2, #8
 8005558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	220f      	movs	r2, #15
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	43db      	mvns	r3, r3
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4013      	ands	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4313      	orrs	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	08da      	lsrs	r2, r3, #3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3208      	adds	r2, #8
 8005592:	69b9      	ldr	r1, [r7, #24]
 8005594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	2203      	movs	r2, #3
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	43db      	mvns	r3, r3
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	4013      	ands	r3, r2
 80055ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f003 0203 	and.w	r2, r3, #3
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	fa02 f303 	lsl.w	r3, r2, r3
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80b4 	beq.w	8005742 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	4b60      	ldr	r3, [pc, #384]	; (8005760 <HAL_GPIO_Init+0x30c>)
 80055e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e2:	4a5f      	ldr	r2, [pc, #380]	; (8005760 <HAL_GPIO_Init+0x30c>)
 80055e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055e8:	6453      	str	r3, [r2, #68]	; 0x44
 80055ea:	4b5d      	ldr	r3, [pc, #372]	; (8005760 <HAL_GPIO_Init+0x30c>)
 80055ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055f6:	4a5b      	ldr	r2, [pc, #364]	; (8005764 <HAL_GPIO_Init+0x310>)
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	089b      	lsrs	r3, r3, #2
 80055fc:	3302      	adds	r3, #2
 80055fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f003 0303 	and.w	r3, r3, #3
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	220f      	movs	r2, #15
 800560e:	fa02 f303 	lsl.w	r3, r2, r3
 8005612:	43db      	mvns	r3, r3
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	4013      	ands	r3, r2
 8005618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a52      	ldr	r2, [pc, #328]	; (8005768 <HAL_GPIO_Init+0x314>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d02b      	beq.n	800567a <HAL_GPIO_Init+0x226>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a51      	ldr	r2, [pc, #324]	; (800576c <HAL_GPIO_Init+0x318>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d025      	beq.n	8005676 <HAL_GPIO_Init+0x222>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a50      	ldr	r2, [pc, #320]	; (8005770 <HAL_GPIO_Init+0x31c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01f      	beq.n	8005672 <HAL_GPIO_Init+0x21e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a4f      	ldr	r2, [pc, #316]	; (8005774 <HAL_GPIO_Init+0x320>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d019      	beq.n	800566e <HAL_GPIO_Init+0x21a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a4e      	ldr	r2, [pc, #312]	; (8005778 <HAL_GPIO_Init+0x324>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d013      	beq.n	800566a <HAL_GPIO_Init+0x216>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a4d      	ldr	r2, [pc, #308]	; (800577c <HAL_GPIO_Init+0x328>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00d      	beq.n	8005666 <HAL_GPIO_Init+0x212>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a4c      	ldr	r2, [pc, #304]	; (8005780 <HAL_GPIO_Init+0x32c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d007      	beq.n	8005662 <HAL_GPIO_Init+0x20e>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a4b      	ldr	r2, [pc, #300]	; (8005784 <HAL_GPIO_Init+0x330>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d101      	bne.n	800565e <HAL_GPIO_Init+0x20a>
 800565a:	2307      	movs	r3, #7
 800565c:	e00e      	b.n	800567c <HAL_GPIO_Init+0x228>
 800565e:	2308      	movs	r3, #8
 8005660:	e00c      	b.n	800567c <HAL_GPIO_Init+0x228>
 8005662:	2306      	movs	r3, #6
 8005664:	e00a      	b.n	800567c <HAL_GPIO_Init+0x228>
 8005666:	2305      	movs	r3, #5
 8005668:	e008      	b.n	800567c <HAL_GPIO_Init+0x228>
 800566a:	2304      	movs	r3, #4
 800566c:	e006      	b.n	800567c <HAL_GPIO_Init+0x228>
 800566e:	2303      	movs	r3, #3
 8005670:	e004      	b.n	800567c <HAL_GPIO_Init+0x228>
 8005672:	2302      	movs	r3, #2
 8005674:	e002      	b.n	800567c <HAL_GPIO_Init+0x228>
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <HAL_GPIO_Init+0x228>
 800567a:	2300      	movs	r3, #0
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	f002 0203 	and.w	r2, r2, #3
 8005682:	0092      	lsls	r2, r2, #2
 8005684:	4093      	lsls	r3, r2
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4313      	orrs	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800568c:	4935      	ldr	r1, [pc, #212]	; (8005764 <HAL_GPIO_Init+0x310>)
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	089b      	lsrs	r3, r3, #2
 8005692:	3302      	adds	r3, #2
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800569a:	4b3b      	ldr	r3, [pc, #236]	; (8005788 <HAL_GPIO_Init+0x334>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	43db      	mvns	r3, r3
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	4013      	ands	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056be:	4a32      	ldr	r2, [pc, #200]	; (8005788 <HAL_GPIO_Init+0x334>)
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056c4:	4b30      	ldr	r3, [pc, #192]	; (8005788 <HAL_GPIO_Init+0x334>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	69ba      	ldr	r2, [r7, #24]
 80056d0:	4013      	ands	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056e8:	4a27      	ldr	r2, [pc, #156]	; (8005788 <HAL_GPIO_Init+0x334>)
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056ee:	4b26      	ldr	r3, [pc, #152]	; (8005788 <HAL_GPIO_Init+0x334>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	43db      	mvns	r3, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	4013      	ands	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005712:	4a1d      	ldr	r2, [pc, #116]	; (8005788 <HAL_GPIO_Init+0x334>)
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005718:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <HAL_GPIO_Init+0x334>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	43db      	mvns	r3, r3
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4013      	ands	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800573c:	4a12      	ldr	r2, [pc, #72]	; (8005788 <HAL_GPIO_Init+0x334>)
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	3301      	adds	r3, #1
 8005746:	61fb      	str	r3, [r7, #28]
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	2b0f      	cmp	r3, #15
 800574c:	f67f ae90 	bls.w	8005470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	3724      	adds	r7, #36	; 0x24
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40023800 	.word	0x40023800
 8005764:	40013800 	.word	0x40013800
 8005768:	40020000 	.word	0x40020000
 800576c:	40020400 	.word	0x40020400
 8005770:	40020800 	.word	0x40020800
 8005774:	40020c00 	.word	0x40020c00
 8005778:	40021000 	.word	0x40021000
 800577c:	40021400 	.word	0x40021400
 8005780:	40021800 	.word	0x40021800
 8005784:	40021c00 	.word	0x40021c00
 8005788:	40013c00 	.word	0x40013c00

0800578c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005796:	2300      	movs	r3, #0
 8005798:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800579e:	2300      	movs	r3, #0
 80057a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e0cd      	b.n	8005944 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057a8:	2201      	movs	r2, #1
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4013      	ands	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	429a      	cmp	r2, r3
 80057c0:	f040 80bd 	bne.w	800593e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80057c4:	4a65      	ldr	r2, [pc, #404]	; (800595c <HAL_GPIO_DeInit+0x1d0>)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	089b      	lsrs	r3, r3, #2
 80057ca:	3302      	adds	r3, #2
 80057cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	220f      	movs	r2, #15
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	4013      	ands	r3, r2
 80057e4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a5d      	ldr	r2, [pc, #372]	; (8005960 <HAL_GPIO_DeInit+0x1d4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d02b      	beq.n	8005846 <HAL_GPIO_DeInit+0xba>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a5c      	ldr	r2, [pc, #368]	; (8005964 <HAL_GPIO_DeInit+0x1d8>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d025      	beq.n	8005842 <HAL_GPIO_DeInit+0xb6>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a5b      	ldr	r2, [pc, #364]	; (8005968 <HAL_GPIO_DeInit+0x1dc>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d01f      	beq.n	800583e <HAL_GPIO_DeInit+0xb2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a5a      	ldr	r2, [pc, #360]	; (800596c <HAL_GPIO_DeInit+0x1e0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d019      	beq.n	800583a <HAL_GPIO_DeInit+0xae>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a59      	ldr	r2, [pc, #356]	; (8005970 <HAL_GPIO_DeInit+0x1e4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <HAL_GPIO_DeInit+0xaa>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a58      	ldr	r2, [pc, #352]	; (8005974 <HAL_GPIO_DeInit+0x1e8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00d      	beq.n	8005832 <HAL_GPIO_DeInit+0xa6>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a57      	ldr	r2, [pc, #348]	; (8005978 <HAL_GPIO_DeInit+0x1ec>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d007      	beq.n	800582e <HAL_GPIO_DeInit+0xa2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a56      	ldr	r2, [pc, #344]	; (800597c <HAL_GPIO_DeInit+0x1f0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d101      	bne.n	800582a <HAL_GPIO_DeInit+0x9e>
 8005826:	2307      	movs	r3, #7
 8005828:	e00e      	b.n	8005848 <HAL_GPIO_DeInit+0xbc>
 800582a:	2308      	movs	r3, #8
 800582c:	e00c      	b.n	8005848 <HAL_GPIO_DeInit+0xbc>
 800582e:	2306      	movs	r3, #6
 8005830:	e00a      	b.n	8005848 <HAL_GPIO_DeInit+0xbc>
 8005832:	2305      	movs	r3, #5
 8005834:	e008      	b.n	8005848 <HAL_GPIO_DeInit+0xbc>
 8005836:	2304      	movs	r3, #4
 8005838:	e006      	b.n	8005848 <HAL_GPIO_DeInit+0xbc>
 800583a:	2303      	movs	r3, #3
 800583c:	e004      	b.n	8005848 <HAL_GPIO_DeInit+0xbc>
 800583e:	2302      	movs	r3, #2
 8005840:	e002      	b.n	8005848 <HAL_GPIO_DeInit+0xbc>
 8005842:	2301      	movs	r3, #1
 8005844:	e000      	b.n	8005848 <HAL_GPIO_DeInit+0xbc>
 8005846:	2300      	movs	r3, #0
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	f002 0203 	and.w	r2, r2, #3
 800584e:	0092      	lsls	r2, r2, #2
 8005850:	4093      	lsls	r3, r2
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	429a      	cmp	r2, r3
 8005856:	d132      	bne.n	80058be <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005858:	4b49      	ldr	r3, [pc, #292]	; (8005980 <HAL_GPIO_DeInit+0x1f4>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	43db      	mvns	r3, r3
 8005860:	4947      	ldr	r1, [pc, #284]	; (8005980 <HAL_GPIO_DeInit+0x1f4>)
 8005862:	4013      	ands	r3, r2
 8005864:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005866:	4b46      	ldr	r3, [pc, #280]	; (8005980 <HAL_GPIO_DeInit+0x1f4>)
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	43db      	mvns	r3, r3
 800586e:	4944      	ldr	r1, [pc, #272]	; (8005980 <HAL_GPIO_DeInit+0x1f4>)
 8005870:	4013      	ands	r3, r2
 8005872:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005874:	4b42      	ldr	r3, [pc, #264]	; (8005980 <HAL_GPIO_DeInit+0x1f4>)
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	43db      	mvns	r3, r3
 800587c:	4940      	ldr	r1, [pc, #256]	; (8005980 <HAL_GPIO_DeInit+0x1f4>)
 800587e:	4013      	ands	r3, r2
 8005880:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005882:	4b3f      	ldr	r3, [pc, #252]	; (8005980 <HAL_GPIO_DeInit+0x1f4>)
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	43db      	mvns	r3, r3
 800588a:	493d      	ldr	r1, [pc, #244]	; (8005980 <HAL_GPIO_DeInit+0x1f4>)
 800588c:	4013      	ands	r3, r2
 800588e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	220f      	movs	r2, #15
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80058a0:	4a2e      	ldr	r2, [pc, #184]	; (800595c <HAL_GPIO_DeInit+0x1d0>)
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	089b      	lsrs	r3, r3, #2
 80058a6:	3302      	adds	r3, #2
 80058a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	43da      	mvns	r2, r3
 80058b0:	482a      	ldr	r0, [pc, #168]	; (800595c <HAL_GPIO_DeInit+0x1d0>)
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	089b      	lsrs	r3, r3, #2
 80058b6:	400a      	ands	r2, r1
 80058b8:	3302      	adds	r3, #2
 80058ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	2103      	movs	r1, #3
 80058c8:	fa01 f303 	lsl.w	r3, r1, r3
 80058cc:	43db      	mvns	r3, r3
 80058ce:	401a      	ands	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	08da      	lsrs	r2, r3, #3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3208      	adds	r2, #8
 80058dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	220f      	movs	r2, #15
 80058ea:	fa02 f303 	lsl.w	r3, r2, r3
 80058ee:	43db      	mvns	r3, r3
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	08d2      	lsrs	r2, r2, #3
 80058f4:	4019      	ands	r1, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	3208      	adds	r2, #8
 80058fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68da      	ldr	r2, [r3, #12]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	2103      	movs	r1, #3
 8005908:	fa01 f303 	lsl.w	r3, r1, r3
 800590c:	43db      	mvns	r3, r3
 800590e:	401a      	ands	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	2101      	movs	r1, #1
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	fa01 f303 	lsl.w	r3, r1, r3
 8005920:	43db      	mvns	r3, r3
 8005922:	401a      	ands	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	2103      	movs	r1, #3
 8005932:	fa01 f303 	lsl.w	r3, r1, r3
 8005936:	43db      	mvns	r3, r3
 8005938:	401a      	ands	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	3301      	adds	r3, #1
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2b0f      	cmp	r3, #15
 8005948:	f67f af2e 	bls.w	80057a8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800594c:	bf00      	nop
 800594e:	bf00      	nop
 8005950:	371c      	adds	r7, #28
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40013800 	.word	0x40013800
 8005960:	40020000 	.word	0x40020000
 8005964:	40020400 	.word	0x40020400
 8005968:	40020800 	.word	0x40020800
 800596c:	40020c00 	.word	0x40020c00
 8005970:	40021000 	.word	0x40021000
 8005974:	40021400 	.word	0x40021400
 8005978:	40021800 	.word	0x40021800
 800597c:	40021c00 	.word	0x40021c00
 8005980:	40013c00 	.word	0x40013c00

08005984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	807b      	strh	r3, [r7, #2]
 8005990:	4613      	mov	r3, r2
 8005992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005994:	787b      	ldrb	r3, [r7, #1]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800599a:	887a      	ldrh	r2, [r7, #2]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80059a0:	e003      	b.n	80059aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80059a2:	887b      	ldrh	r3, [r7, #2]
 80059a4:	041a      	lsls	r2, r3, #16
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	619a      	str	r2, [r3, #24]
}
 80059aa:	bf00      	nop
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
	...

080059b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	4603      	mov	r3, r0
 80059c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d006      	beq.n	80059dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80059ce:	4a05      	ldr	r2, [pc, #20]	; (80059e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80059d4:	88fb      	ldrh	r3, [r7, #6]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fb feec 	bl	80017b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80059dc:	bf00      	nop
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40013c00 	.word	0x40013c00

080059e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e12b      	b.n	8005c52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fd fae2 	bl	8002fd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2224      	movs	r2, #36	; 0x24
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 0201 	bic.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a4c:	f003 fbba 	bl	80091c4 <HAL_RCC_GetPCLK1Freq>
 8005a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	4a81      	ldr	r2, [pc, #516]	; (8005c5c <HAL_I2C_Init+0x274>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d807      	bhi.n	8005a6c <HAL_I2C_Init+0x84>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4a80      	ldr	r2, [pc, #512]	; (8005c60 <HAL_I2C_Init+0x278>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	bf94      	ite	ls
 8005a64:	2301      	movls	r3, #1
 8005a66:	2300      	movhi	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e006      	b.n	8005a7a <HAL_I2C_Init+0x92>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4a7d      	ldr	r2, [pc, #500]	; (8005c64 <HAL_I2C_Init+0x27c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	bf94      	ite	ls
 8005a74:	2301      	movls	r3, #1
 8005a76:	2300      	movhi	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e0e7      	b.n	8005c52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4a78      	ldr	r2, [pc, #480]	; (8005c68 <HAL_I2C_Init+0x280>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	0c9b      	lsrs	r3, r3, #18
 8005a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	4a6a      	ldr	r2, [pc, #424]	; (8005c5c <HAL_I2C_Init+0x274>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d802      	bhi.n	8005abc <HAL_I2C_Init+0xd4>
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	e009      	b.n	8005ad0 <HAL_I2C_Init+0xe8>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	4a69      	ldr	r2, [pc, #420]	; (8005c6c <HAL_I2C_Init+0x284>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	099b      	lsrs	r3, r3, #6
 8005ace:	3301      	adds	r3, #1
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6812      	ldr	r2, [r2, #0]
 8005ad4:	430b      	orrs	r3, r1
 8005ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ae2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	495c      	ldr	r1, [pc, #368]	; (8005c5c <HAL_I2C_Init+0x274>)
 8005aec:	428b      	cmp	r3, r1
 8005aee:	d819      	bhi.n	8005b24 <HAL_I2C_Init+0x13c>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	1e59      	subs	r1, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8005afe:	1c59      	adds	r1, r3, #1
 8005b00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b04:	400b      	ands	r3, r1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_I2C_Init+0x138>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1e59      	subs	r1, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b18:	3301      	adds	r3, #1
 8005b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b1e:	e051      	b.n	8005bc4 <HAL_I2C_Init+0x1dc>
 8005b20:	2304      	movs	r3, #4
 8005b22:	e04f      	b.n	8005bc4 <HAL_I2C_Init+0x1dc>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d111      	bne.n	8005b50 <HAL_I2C_Init+0x168>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	1e58      	subs	r0, r3, #1
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6859      	ldr	r1, [r3, #4]
 8005b34:	460b      	mov	r3, r1
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	440b      	add	r3, r1
 8005b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b3e:	3301      	adds	r3, #1
 8005b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	bf0c      	ite	eq
 8005b48:	2301      	moveq	r3, #1
 8005b4a:	2300      	movne	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	e012      	b.n	8005b76 <HAL_I2C_Init+0x18e>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	1e58      	subs	r0, r3, #1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6859      	ldr	r1, [r3, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	0099      	lsls	r1, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b66:	3301      	adds	r3, #1
 8005b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	bf0c      	ite	eq
 8005b70:	2301      	moveq	r3, #1
 8005b72:	2300      	movne	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_I2C_Init+0x196>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e022      	b.n	8005bc4 <HAL_I2C_Init+0x1dc>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10e      	bne.n	8005ba4 <HAL_I2C_Init+0x1bc>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1e58      	subs	r0, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6859      	ldr	r1, [r3, #4]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	440b      	add	r3, r1
 8005b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b98:	3301      	adds	r3, #1
 8005b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba2:	e00f      	b.n	8005bc4 <HAL_I2C_Init+0x1dc>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	1e58      	subs	r0, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6859      	ldr	r1, [r3, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	440b      	add	r3, r1
 8005bb2:	0099      	lsls	r1, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bba:	3301      	adds	r3, #1
 8005bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	6809      	ldr	r1, [r1, #0]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	69da      	ldr	r2, [r3, #28]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6911      	ldr	r1, [r2, #16]
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	68d2      	ldr	r2, [r2, #12]
 8005bfe:	4311      	orrs	r1, r2
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6812      	ldr	r2, [r2, #0]
 8005c04:	430b      	orrs	r3, r1
 8005c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	000186a0 	.word	0x000186a0
 8005c60:	001e847f 	.word	0x001e847f
 8005c64:	003d08ff 	.word	0x003d08ff
 8005c68:	431bde83 	.word	0x431bde83
 8005c6c:	10624dd3 	.word	0x10624dd3

08005c70 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e021      	b.n	8005cc6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2224      	movs	r2, #36	; 0x24
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f022 0201 	bic.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fd fa1e 	bl	80030dc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
	...

08005cd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	4608      	mov	r0, r1
 8005cda:	4611      	mov	r1, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	817b      	strh	r3, [r7, #10]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	813b      	strh	r3, [r7, #8]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cea:	f7fd fe3f 	bl	800396c <HAL_GetTick>
 8005cee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	f040 80d9 	bne.w	8005eb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	2319      	movs	r3, #25
 8005d04:	2201      	movs	r2, #1
 8005d06:	496d      	ldr	r1, [pc, #436]	; (8005ebc <HAL_I2C_Mem_Write+0x1ec>)
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f002 fbc1 	bl	8008490 <I2C_WaitOnFlagUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005d14:	2302      	movs	r3, #2
 8005d16:	e0cc      	b.n	8005eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d101      	bne.n	8005d26 <HAL_I2C_Mem_Write+0x56>
 8005d22:	2302      	movs	r3, #2
 8005d24:	e0c5      	b.n	8005eb2 <HAL_I2C_Mem_Write+0x1e2>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d007      	beq.n	8005d4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2221      	movs	r2, #33	; 0x21
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2240      	movs	r2, #64	; 0x40
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4a4d      	ldr	r2, [pc, #308]	; (8005ec0 <HAL_I2C_Mem_Write+0x1f0>)
 8005d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d8e:	88f8      	ldrh	r0, [r7, #6]
 8005d90:	893a      	ldrh	r2, [r7, #8]
 8005d92:	8979      	ldrh	r1, [r7, #10]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f002 f83e 	bl	8007e20 <I2C_RequestMemoryWrite>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d052      	beq.n	8005e50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e081      	b.n	8005eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f002 fc42 	bl	800863c <I2C_WaitOnTXEFlagUntilTimeout>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00d      	beq.n	8005dda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	2b04      	cmp	r3, #4
 8005dc4:	d107      	bne.n	8005dd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e06b      	b.n	8005eb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	781a      	ldrb	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d11b      	bne.n	8005e50 <HAL_I2C_Mem_Write+0x180>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d017      	beq.n	8005e50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	781a      	ldrb	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1aa      	bne.n	8005dae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f002 fc2e 	bl	80086be <I2C_WaitOnBTFFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00d      	beq.n	8005e84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d107      	bne.n	8005e80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e016      	b.n	8005eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	e000      	b.n	8005eb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005eb0:	2302      	movs	r3, #2
  }
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	00100002 	.word	0x00100002
 8005ec0:	ffff0000 	.word	0xffff0000

08005ec4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08c      	sub	sp, #48	; 0x30
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	4608      	mov	r0, r1
 8005ece:	4611      	mov	r1, r2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	817b      	strh	r3, [r7, #10]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	813b      	strh	r3, [r7, #8]
 8005eda:	4613      	mov	r3, r2
 8005edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ede:	f7fd fd45 	bl	800396c <HAL_GetTick>
 8005ee2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	f040 8208 	bne.w	8006302 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	2319      	movs	r3, #25
 8005ef8:	2201      	movs	r2, #1
 8005efa:	497b      	ldr	r1, [pc, #492]	; (80060e8 <HAL_I2C_Mem_Read+0x224>)
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f002 fac7 	bl	8008490 <I2C_WaitOnFlagUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e1fb      	b.n	8006304 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_I2C_Mem_Read+0x56>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e1f4      	b.n	8006304 <HAL_I2C_Mem_Read+0x440>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d007      	beq.n	8005f40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2222      	movs	r2, #34	; 0x22
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2240      	movs	r2, #64	; 0x40
 8005f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	4a5b      	ldr	r2, [pc, #364]	; (80060ec <HAL_I2C_Mem_Read+0x228>)
 8005f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f82:	88f8      	ldrh	r0, [r7, #6]
 8005f84:	893a      	ldrh	r2, [r7, #8]
 8005f86:	8979      	ldrh	r1, [r7, #10]
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	4603      	mov	r3, r0
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f001 ffda 	bl	8007f4c <I2C_RequestMemoryRead>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e1b0      	b.n	8006304 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d113      	bne.n	8005fd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005faa:	2300      	movs	r3, #0
 8005fac:	623b      	str	r3, [r7, #32]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	623b      	str	r3, [r7, #32]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	623b      	str	r3, [r7, #32]
 8005fbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	e184      	b.n	80062dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d11b      	bne.n	8006012 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	61fb      	str	r3, [r7, #28]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	61fb      	str	r3, [r7, #28]
 8005ffe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e164      	b.n	80062dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006016:	2b02      	cmp	r3, #2
 8006018:	d11b      	bne.n	8006052 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006028:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800603a:	2300      	movs	r3, #0
 800603c:	61bb      	str	r3, [r7, #24]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	61bb      	str	r3, [r7, #24]
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	e144      	b.n	80062dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	617b      	str	r3, [r7, #20]
 8006066:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006068:	e138      	b.n	80062dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606e:	2b03      	cmp	r3, #3
 8006070:	f200 80f1 	bhi.w	8006256 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006078:	2b01      	cmp	r3, #1
 800607a:	d123      	bne.n	80060c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800607c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f002 fb8f 	bl	80087a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e139      	b.n	8006304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691a      	ldr	r2, [r3, #16]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060c2:	e10b      	b.n	80062dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d14e      	bne.n	800616a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	2200      	movs	r2, #0
 80060d4:	4906      	ldr	r1, [pc, #24]	; (80060f0 <HAL_I2C_Mem_Read+0x22c>)
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f002 f9da 	bl	8008490 <I2C_WaitOnFlagUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e10e      	b.n	8006304 <HAL_I2C_Mem_Read+0x440>
 80060e6:	bf00      	nop
 80060e8:	00100002 	.word	0x00100002
 80060ec:	ffff0000 	.word	0xffff0000
 80060f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691a      	ldr	r2, [r3, #16]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006120:	3b01      	subs	r3, #1
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006140:	b2d2      	uxtb	r2, r2
 8006142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006148:	1c5a      	adds	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615e:	b29b      	uxth	r3, r3
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006168:	e0b8      	b.n	80062dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006170:	2200      	movs	r2, #0
 8006172:	4966      	ldr	r1, [pc, #408]	; (800630c <HAL_I2C_Mem_Read+0x448>)
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f002 f98b 	bl	8008490 <I2C_WaitOnFlagUntilTimeout>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e0bf      	b.n	8006304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691a      	ldr	r2, [r3, #16]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b0:	3b01      	subs	r3, #1
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061cc:	2200      	movs	r2, #0
 80061ce:	494f      	ldr	r1, [pc, #316]	; (800630c <HAL_I2C_Mem_Read+0x448>)
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f002 f95d 	bl	8008490 <I2C_WaitOnFlagUntilTimeout>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e091      	b.n	8006304 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691a      	ldr	r2, [r3, #16]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fa:	b2d2      	uxtb	r2, r2
 80061fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691a      	ldr	r2, [r3, #16]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623e:	3b01      	subs	r3, #1
 8006240:	b29a      	uxth	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624a:	b29b      	uxth	r3, r3
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006254:	e042      	b.n	80062dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006258:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f002 faa2 	bl	80087a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e04c      	b.n	8006304 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691a      	ldr	r2, [r3, #16]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006286:	3b01      	subs	r3, #1
 8006288:	b29a      	uxth	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006292:	b29b      	uxth	r3, r3
 8006294:	3b01      	subs	r3, #1
 8006296:	b29a      	uxth	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d118      	bne.n	80062dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	1c5a      	adds	r2, r3, #1
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f47f aec2 	bne.w	800606a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	e000      	b.n	8006304 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006302:	2302      	movs	r3, #2
  }
}
 8006304:	4618      	mov	r0, r3
 8006306:	3728      	adds	r7, #40	; 0x28
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	00010004 	.word	0x00010004

08006310 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b08c      	sub	sp, #48	; 0x30
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	4608      	mov	r0, r1
 800631a:	4611      	mov	r1, r2
 800631c:	461a      	mov	r2, r3
 800631e:	4603      	mov	r3, r0
 8006320:	817b      	strh	r3, [r7, #10]
 8006322:	460b      	mov	r3, r1
 8006324:	813b      	strh	r3, [r7, #8]
 8006326:	4613      	mov	r3, r2
 8006328:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800632a:	f7fd fb1f 	bl	800396c <HAL_GetTick>
 800632e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b20      	cmp	r3, #32
 800633e:	f040 8176 	bne.w	800662e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006342:	4b95      	ldr	r3, [pc, #596]	; (8006598 <HAL_I2C_Mem_Read_DMA+0x288>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	08db      	lsrs	r3, r3, #3
 8006348:	4a94      	ldr	r2, [pc, #592]	; (800659c <HAL_I2C_Mem_Read_DMA+0x28c>)
 800634a:	fba2 2303 	umull	r2, r3, r2, r3
 800634e:	0a1a      	lsrs	r2, r3, #8
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	009a      	lsls	r2, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3b01      	subs	r3, #1
 8006360:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d116      	bne.n	8006396 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2220      	movs	r2, #32
 8006372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	f043 0220 	orr.w	r2, r3, #32
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e14c      	b.n	8006630 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d0db      	beq.n	800635c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_I2C_Mem_Read_DMA+0xa2>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e13e      	b.n	8006630 <HAL_I2C_Mem_Read_DMA+0x320>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d007      	beq.n	80063d8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2222      	movs	r2, #34	; 0x22
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2240      	movs	r2, #64	; 0x40
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006402:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006408:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a62      	ldr	r2, [pc, #392]	; (80065a0 <HAL_I2C_Mem_Read_DMA+0x290>)
 8006418:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800641a:	897a      	ldrh	r2, [r7, #10]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8006420:	893a      	ldrh	r2, [r7, #8]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 80cc 	beq.w	80065d4 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	2b00      	cmp	r3, #0
 8006442:	d02d      	beq.n	80064a0 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	4a56      	ldr	r2, [pc, #344]	; (80065a4 <HAL_I2C_Mem_Read_DMA+0x294>)
 800644a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	4a55      	ldr	r2, [pc, #340]	; (80065a8 <HAL_I2C_Mem_Read_DMA+0x298>)
 8006452:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006458:	2200      	movs	r2, #0
 800645a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	2200      	movs	r2, #0
 8006462:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006468:	2200      	movs	r2, #0
 800646a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	2200      	movs	r2, #0
 8006472:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3310      	adds	r3, #16
 800647e:	4619      	mov	r1, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	461a      	mov	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648a:	f7fe fc75 	bl	8004d78 <HAL_DMA_Start_IT>
 800648e:	4603      	mov	r3, r0
 8006490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006498:	2b00      	cmp	r3, #0
 800649a:	f040 8087 	bne.w	80065ac <HAL_I2C_Mem_Read_DMA+0x29c>
 800649e:	e013      	b.n	80064c8 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e0b3      	b.n	8006630 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80064c8:	88f8      	ldrh	r0, [r7, #6]
 80064ca:	893a      	ldrh	r2, [r7, #8]
 80064cc:	8979      	ldrh	r1, [r7, #10]
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	2323      	movs	r3, #35	; 0x23
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	4603      	mov	r3, r0
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f001 fd37 	bl	8007f4c <I2C_RequestMemoryRead>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d023      	beq.n	800652c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe fd0d 	bl	8004f08 <HAL_DMA_Abort_IT>
 80064ee:	4603      	mov	r3, r0
 80064f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	2200      	movs	r2, #0
 80064fa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800650a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2200      	movs	r2, #0
 8006510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0201 	bic.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e081      	b.n	8006630 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006530:	2b01      	cmp	r3, #1
 8006532:	d108      	bne.n	8006546 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006542:	601a      	str	r2, [r3, #0]
 8006544:	e007      	b.n	8006556 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006554:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006556:	2300      	movs	r3, #0
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	61bb      	str	r3, [r7, #24]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	61bb      	str	r3, [r7, #24]
 800656a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685a      	ldr	r2, [r3, #4]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006582:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006592:	605a      	str	r2, [r3, #4]
 8006594:	e049      	b.n	800662a <HAL_I2C_Mem_Read_DMA+0x31a>
 8006596:	bf00      	nop
 8006598:	20000000 	.word	0x20000000
 800659c:	14f8b589 	.word	0x14f8b589
 80065a0:	ffff0000 	.word	0xffff0000
 80065a4:	0800811d 	.word	0x0800811d
 80065a8:	080082c7 	.word	0x080082c7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	f043 0210 	orr.w	r2, r3, #16
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e02d      	b.n	8006630 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80065d4:	88f8      	ldrh	r0, [r7, #6]
 80065d6:	893a      	ldrh	r2, [r7, #8]
 80065d8:	8979      	ldrh	r1, [r7, #10]
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	9301      	str	r3, [sp, #4]
 80065de:	2323      	movs	r3, #35	; 0x23
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	4603      	mov	r3, r0
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f001 fcb1 	bl	8007f4c <I2C_RequestMemoryRead>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e01d      	b.n	8006630 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f4:	2300      	movs	r3, #0
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	617b      	str	r3, [r7, #20]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	617b      	str	r3, [r7, #20]
 8006608:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006618:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2220      	movs	r2, #32
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	e000      	b.n	8006630 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800662e:	2302      	movs	r3, #2
  }
}
 8006630:	4618      	mov	r0, r3
 8006632:	3728      	adds	r7, #40	; 0x28
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	; 0x28
 800663c:	af02      	add	r7, sp, #8
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	607a      	str	r2, [r7, #4]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	460b      	mov	r3, r1
 8006646:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006648:	f7fd f990 	bl	800396c <HAL_GetTick>
 800664c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006658:	b2db      	uxtb	r3, r3
 800665a:	2b20      	cmp	r3, #32
 800665c:	f040 8111 	bne.w	8006882 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	2319      	movs	r3, #25
 8006666:	2201      	movs	r2, #1
 8006668:	4988      	ldr	r1, [pc, #544]	; (800688c <HAL_I2C_IsDeviceReady+0x254>)
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f001 ff10 	bl	8008490 <I2C_WaitOnFlagUntilTimeout>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006676:	2302      	movs	r3, #2
 8006678:	e104      	b.n	8006884 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_I2C_IsDeviceReady+0x50>
 8006684:	2302      	movs	r3, #2
 8006686:	e0fd      	b.n	8006884 <HAL_I2C_IsDeviceReady+0x24c>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b01      	cmp	r3, #1
 800669c:	d007      	beq.n	80066ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f042 0201 	orr.w	r2, r2, #1
 80066ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2224      	movs	r2, #36	; 0x24
 80066c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4a70      	ldr	r2, [pc, #448]	; (8006890 <HAL_I2C_IsDeviceReady+0x258>)
 80066d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f001 fece 	bl	8008490 <I2C_WaitOnFlagUntilTimeout>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006708:	d103      	bne.n	8006712 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006710:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e0b6      	b.n	8006884 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006716:	897b      	ldrh	r3, [r7, #10]
 8006718:	b2db      	uxtb	r3, r3
 800671a:	461a      	mov	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006724:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006726:	f7fd f921 	bl	800396c <HAL_GetTick>
 800672a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b02      	cmp	r3, #2
 8006738:	bf0c      	ite	eq
 800673a:	2301      	moveq	r3, #1
 800673c:	2300      	movne	r3, #0
 800673e:	b2db      	uxtb	r3, r3
 8006740:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800674c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006750:	bf0c      	ite	eq
 8006752:	2301      	moveq	r3, #1
 8006754:	2300      	movne	r3, #0
 8006756:	b2db      	uxtb	r3, r3
 8006758:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800675a:	e025      	b.n	80067a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800675c:	f7fd f906 	bl	800396c <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	683a      	ldr	r2, [r7, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d302      	bcc.n	8006772 <HAL_I2C_IsDeviceReady+0x13a>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d103      	bne.n	800677a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	22a0      	movs	r2, #160	; 0xa0
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b02      	cmp	r3, #2
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800679a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679e:	bf0c      	ite	eq
 80067a0:	2301      	moveq	r3, #1
 80067a2:	2300      	movne	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2ba0      	cmp	r3, #160	; 0xa0
 80067b2:	d005      	beq.n	80067c0 <HAL_I2C_IsDeviceReady+0x188>
 80067b4:	7dfb      	ldrb	r3, [r7, #23]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d102      	bne.n	80067c0 <HAL_I2C_IsDeviceReady+0x188>
 80067ba:	7dbb      	ldrb	r3, [r7, #22]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0cd      	beq.n	800675c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d129      	bne.n	800682a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e6:	2300      	movs	r3, #0
 80067e8:	613b      	str	r3, [r7, #16]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	613b      	str	r3, [r7, #16]
 80067fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	2319      	movs	r3, #25
 8006802:	2201      	movs	r2, #1
 8006804:	4921      	ldr	r1, [pc, #132]	; (800688c <HAL_I2C_IsDeviceReady+0x254>)
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f001 fe42 	bl	8008490 <I2C_WaitOnFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e036      	b.n	8006884 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2220      	movs	r2, #32
 800681a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006826:	2300      	movs	r3, #0
 8006828:	e02c      	b.n	8006884 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006838:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006842:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	2319      	movs	r3, #25
 800684a:	2201      	movs	r2, #1
 800684c:	490f      	ldr	r1, [pc, #60]	; (800688c <HAL_I2C_IsDeviceReady+0x254>)
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f001 fe1e 	bl	8008490 <I2C_WaitOnFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e012      	b.n	8006884 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	3301      	adds	r3, #1
 8006862:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	429a      	cmp	r2, r3
 800686a:	f4ff af32 	bcc.w	80066d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006882:	2302      	movs	r3, #2
  }
}
 8006884:	4618      	mov	r0, r3
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	00100002 	.word	0x00100002
 8006890:	ffff0000 	.word	0xffff0000

08006894 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068b4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068bc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	2b10      	cmp	r3, #16
 80068c2:	d003      	beq.n	80068cc <HAL_I2C_EV_IRQHandler+0x38>
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	2b40      	cmp	r3, #64	; 0x40
 80068c8:	f040 80c1 	bne.w	8006a4e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10d      	bne.n	8006902 <HAL_I2C_EV_IRQHandler+0x6e>
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80068ec:	d003      	beq.n	80068f6 <HAL_I2C_EV_IRQHandler+0x62>
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80068f4:	d101      	bne.n	80068fa <HAL_I2C_EV_IRQHandler+0x66>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <HAL_I2C_EV_IRQHandler+0x68>
 80068fa:	2300      	movs	r3, #0
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	f000 8132 	beq.w	8006b66 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00c      	beq.n	8006926 <HAL_I2C_EV_IRQHandler+0x92>
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	0a5b      	lsrs	r3, r3, #9
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b00      	cmp	r3, #0
 8006916:	d006      	beq.n	8006926 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 ffc8 	bl	80088ae <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fcd2 	bl	80072c8 <I2C_Master_SB>
 8006924:	e092      	b.n	8006a4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	08db      	lsrs	r3, r3, #3
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <HAL_I2C_EV_IRQHandler+0xb2>
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	0a5b      	lsrs	r3, r3, #9
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fd48 	bl	80073d4 <I2C_Master_ADD10>
 8006944:	e082      	b.n	8006a4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	085b      	lsrs	r3, r3, #1
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d009      	beq.n	8006966 <HAL_I2C_EV_IRQHandler+0xd2>
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	0a5b      	lsrs	r3, r3, #9
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fd62 	bl	8007428 <I2C_Master_ADDR>
 8006964:	e072      	b.n	8006a4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	089b      	lsrs	r3, r3, #2
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d03b      	beq.n	80069ea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800697c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006980:	f000 80f3 	beq.w	8006b6a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	09db      	lsrs	r3, r3, #7
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00f      	beq.n	80069b0 <HAL_I2C_EV_IRQHandler+0x11c>
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	0a9b      	lsrs	r3, r3, #10
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d009      	beq.n	80069b0 <HAL_I2C_EV_IRQHandler+0x11c>
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	089b      	lsrs	r3, r3, #2
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d103      	bne.n	80069b0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f942 	bl	8006c32 <I2C_MasterTransmit_TXE>
 80069ae:	e04d      	b.n	8006a4c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	089b      	lsrs	r3, r3, #2
 80069b4:	f003 0301 	and.w	r3, r3, #1
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 80d6 	beq.w	8006b6a <HAL_I2C_EV_IRQHandler+0x2d6>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	0a5b      	lsrs	r3, r3, #9
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 80cf 	beq.w	8006b6a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80069cc:	7bbb      	ldrb	r3, [r7, #14]
 80069ce:	2b21      	cmp	r3, #33	; 0x21
 80069d0:	d103      	bne.n	80069da <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f9c9 	bl	8006d6a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069d8:	e0c7      	b.n	8006b6a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	2b40      	cmp	r3, #64	; 0x40
 80069de:	f040 80c4 	bne.w	8006b6a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fa37 	bl	8006e56 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069e8:	e0bf      	b.n	8006b6a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f8:	f000 80b7 	beq.w	8006b6a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	099b      	lsrs	r3, r3, #6
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00f      	beq.n	8006a28 <HAL_I2C_EV_IRQHandler+0x194>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	0a9b      	lsrs	r3, r3, #10
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <HAL_I2C_EV_IRQHandler+0x194>
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	089b      	lsrs	r3, r3, #2
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d103      	bne.n	8006a28 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 faac 	bl	8006f7e <I2C_MasterReceive_RXNE>
 8006a26:	e011      	b.n	8006a4c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	089b      	lsrs	r3, r3, #2
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 809a 	beq.w	8006b6a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	0a5b      	lsrs	r3, r3, #9
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f000 8093 	beq.w	8006b6a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fb55 	bl	80070f4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a4a:	e08e      	b.n	8006b6a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006a4c:	e08d      	b.n	8006b6a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	e007      	b.n	8006a70 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d012      	beq.n	8006aa2 <HAL_I2C_EV_IRQHandler+0x20e>
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	0a5b      	lsrs	r3, r3, #9
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00c      	beq.n	8006aa2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006a98:	69b9      	ldr	r1, [r7, #24]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 ff13 	bl	80078c6 <I2C_Slave_ADDR>
 8006aa0:	e066      	b.n	8006b70 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	091b      	lsrs	r3, r3, #4
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <HAL_I2C_EV_IRQHandler+0x22e>
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	0a5b      	lsrs	r3, r3, #9
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 ff4e 	bl	800795c <I2C_Slave_STOPF>
 8006ac0:	e056      	b.n	8006b70 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006ac2:	7bbb      	ldrb	r3, [r7, #14]
 8006ac4:	2b21      	cmp	r3, #33	; 0x21
 8006ac6:	d002      	beq.n	8006ace <HAL_I2C_EV_IRQHandler+0x23a>
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	2b29      	cmp	r3, #41	; 0x29
 8006acc:	d125      	bne.n	8006b1a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	09db      	lsrs	r3, r3, #7
 8006ad2:	f003 0301 	and.w	r3, r3, #1
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00f      	beq.n	8006afa <HAL_I2C_EV_IRQHandler+0x266>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	0a9b      	lsrs	r3, r3, #10
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d009      	beq.n	8006afa <HAL_I2C_EV_IRQHandler+0x266>
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	089b      	lsrs	r3, r3, #2
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d103      	bne.n	8006afa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fe29 	bl	800774a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006af8:	e039      	b.n	8006b6e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	089b      	lsrs	r3, r3, #2
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d033      	beq.n	8006b6e <HAL_I2C_EV_IRQHandler+0x2da>
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	0a5b      	lsrs	r3, r3, #9
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d02d      	beq.n	8006b6e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fe56 	bl	80077c4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b18:	e029      	b.n	8006b6e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	099b      	lsrs	r3, r3, #6
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00f      	beq.n	8006b46 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	0a9b      	lsrs	r3, r3, #10
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d009      	beq.n	8006b46 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	089b      	lsrs	r3, r3, #2
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d103      	bne.n	8006b46 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fe61 	bl	8007806 <I2C_SlaveReceive_RXNE>
 8006b44:	e014      	b.n	8006b70 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	089b      	lsrs	r3, r3, #2
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00e      	beq.n	8006b70 <HAL_I2C_EV_IRQHandler+0x2dc>
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	0a5b      	lsrs	r3, r3, #9
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d008      	beq.n	8006b70 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fe8f 	bl	8007882 <I2C_SlaveReceive_BTF>
 8006b64:	e004      	b.n	8006b70 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8006b66:	bf00      	nop
 8006b68:	e002      	b.n	8006b70 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006b6a:	bf00      	nop
 8006b6c:	e000      	b.n	8006b70 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006b6e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006b70:	3720      	adds	r7, #32
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b083      	sub	sp, #12
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr

08006bb2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006bba:	bf00      	nop
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	460b      	mov	r3, r1
 8006bd0:	70fb      	strb	r3, [r7, #3]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006bea:	bf00      	nop
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr

08006bf6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006bfe:	bf00      	nop
 8006c00:	370c      	adds	r7, #12
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006c12:	bf00      	nop
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006c26:	bf00      	nop
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b084      	sub	sp, #16
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c48:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d150      	bne.n	8006cfa <I2C_MasterTransmit_TXE+0xc8>
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	2b21      	cmp	r3, #33	; 0x21
 8006c5c:	d14d      	bne.n	8006cfa <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d01d      	beq.n	8006ca0 <I2C_MasterTransmit_TXE+0x6e>
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d01a      	beq.n	8006ca0 <I2C_MasterTransmit_TXE+0x6e>
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c70:	d016      	beq.n	8006ca0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c80:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2211      	movs	r2, #17
 8006c86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2220      	movs	r2, #32
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7ff ff6c 	bl	8006b76 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c9e:	e060      	b.n	8006d62 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cae:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cbe:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d107      	bne.n	8006cea <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff ff87 	bl	8006bf6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ce8:	e03b      	b.n	8006d62 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7ff ff3f 	bl	8006b76 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cf8:	e033      	b.n	8006d62 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	2b21      	cmp	r3, #33	; 0x21
 8006cfe:	d005      	beq.n	8006d0c <I2C_MasterTransmit_TXE+0xda>
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	2b40      	cmp	r3, #64	; 0x40
 8006d04:	d12d      	bne.n	8006d62 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006d06:	7bfb      	ldrb	r3, [r7, #15]
 8006d08:	2b22      	cmp	r3, #34	; 0x22
 8006d0a:	d12a      	bne.n	8006d62 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d108      	bne.n	8006d28 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d24:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006d26:	e01c      	b.n	8006d62 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b40      	cmp	r3, #64	; 0x40
 8006d32:	d103      	bne.n	8006d3c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f88e 	bl	8006e56 <I2C_MemoryTransmit_TXE_BTF>
}
 8006d3a:	e012      	b.n	8006d62 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d40:	781a      	ldrb	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d60:	e7ff      	b.n	8006d62 <I2C_MasterTransmit_TXE+0x130>
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d76:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b21      	cmp	r3, #33	; 0x21
 8006d82:	d164      	bne.n	8006e4e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d012      	beq.n	8006db4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9e:	1c5a      	adds	r2, r3, #1
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	3b01      	subs	r3, #1
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006db2:	e04c      	b.n	8006e4e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b08      	cmp	r3, #8
 8006db8:	d01d      	beq.n	8006df6 <I2C_MasterTransmit_BTF+0x8c>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	d01a      	beq.n	8006df6 <I2C_MasterTransmit_BTF+0x8c>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006dc6:	d016      	beq.n	8006df6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006dd6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2211      	movs	r2, #17
 8006ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff fec1 	bl	8006b76 <HAL_I2C_MasterTxCpltCallback>
}
 8006df4:	e02b      	b.n	8006e4e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e04:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e14:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2220      	movs	r2, #32
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b40      	cmp	r3, #64	; 0x40
 8006e2e:	d107      	bne.n	8006e40 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff fedc 	bl	8006bf6 <HAL_I2C_MemTxCpltCallback>
}
 8006e3e:	e006      	b.n	8006e4e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7ff fe94 	bl	8006b76 <HAL_I2C_MasterTxCpltCallback>
}
 8006e4e:	bf00      	nop
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e64:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d11d      	bne.n	8006eaa <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d10b      	bne.n	8006e8e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e86:	1c9a      	adds	r2, r3, #2
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006e8c:	e073      	b.n	8006f76 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	121b      	asrs	r3, r3, #8
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ea8:	e065      	b.n	8006f76 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d10b      	bne.n	8006eca <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ec8:	e055      	b.n	8006f76 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d151      	bne.n	8006f76 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b22      	cmp	r3, #34	; 0x22
 8006ed6:	d10d      	bne.n	8006ef4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ee6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006ef2:	e040      	b.n	8006f76 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d015      	beq.n	8006f2a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	2b21      	cmp	r3, #33	; 0x21
 8006f02:	d112      	bne.n	8006f2a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	781a      	ldrb	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f28:	e025      	b.n	8006f76 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d120      	bne.n	8006f76 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	2b21      	cmp	r3, #33	; 0x21
 8006f38:	d11d      	bne.n	8006f76 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f48:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f58:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff fe40 	bl	8006bf6 <HAL_I2C_MemTxCpltCallback>
}
 8006f76:	bf00      	nop
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b22      	cmp	r3, #34	; 0x22
 8006f90:	f040 80ac 	bne.w	80070ec <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d921      	bls.n	8006fe6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	691a      	ldr	r2, [r3, #16]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	f040 808c 	bne.w	80070ec <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fe2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006fe4:	e082      	b.n	80070ec <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d075      	beq.n	80070da <I2C_MasterReceive_RXNE+0x15c>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d002      	beq.n	8006ffa <I2C_MasterReceive_RXNE+0x7c>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d16f      	bne.n	80070da <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 fba0 	bl	8008740 <I2C_WaitOnSTOPRequestThroughIT>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d142      	bne.n	800708c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007014:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007024:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691a      	ldr	r2, [r3, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	b2d2      	uxtb	r2, r2
 8007032:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007042:	b29b      	uxth	r3, r3
 8007044:	3b01      	subs	r3, #1
 8007046:	b29a      	uxth	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b40      	cmp	r3, #64	; 0x40
 800705e:	d10a      	bne.n	8007076 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fa fb2e 	bl	80016d0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007074:	e03a      	b.n	80070ec <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2212      	movs	r2, #18
 8007082:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff fd80 	bl	8006b8a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800708a:	e02f      	b.n	80070ec <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800709a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	691a      	ldr	r2, [r3, #16]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	1c5a      	adds	r2, r3, #1
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff fd99 	bl	8006c0a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80070d8:	e008      	b.n	80070ec <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070e8:	605a      	str	r2, [r3, #4]
}
 80070ea:	e7ff      	b.n	80070ec <I2C_MasterReceive_RXNE+0x16e>
 80070ec:	bf00      	nop
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007106:	b29b      	uxth	r3, r3
 8007108:	2b04      	cmp	r3, #4
 800710a:	d11b      	bne.n	8007144 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800711a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	691a      	ldr	r2, [r3, #16]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	1c5a      	adds	r2, r3, #1
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	b29a      	uxth	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007142:	e0bd      	b.n	80072c0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b03      	cmp	r3, #3
 800714c:	d129      	bne.n	80071a2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800715c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b04      	cmp	r3, #4
 8007162:	d00a      	beq.n	800717a <I2C_MasterReceive_BTF+0x86>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b02      	cmp	r3, #2
 8007168:	d007      	beq.n	800717a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007178:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691a      	ldr	r2, [r3, #16]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	b2d2      	uxtb	r2, r2
 8007186:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	1c5a      	adds	r2, r3, #1
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007196:	b29b      	uxth	r3, r3
 8007198:	3b01      	subs	r3, #1
 800719a:	b29a      	uxth	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80071a0:	e08e      	b.n	80072c0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d176      	bne.n	800729a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d002      	beq.n	80071b8 <I2C_MasterReceive_BTF+0xc4>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b10      	cmp	r3, #16
 80071b6:	d108      	bne.n	80071ca <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	e019      	b.n	80071fe <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d002      	beq.n	80071d6 <I2C_MasterReceive_BTF+0xe2>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d108      	bne.n	80071e8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	e00a      	b.n	80071fe <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d007      	beq.n	80071fe <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071fc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	691a      	ldr	r2, [r3, #16]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	b2d2      	uxtb	r2, r2
 800720a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800721a:	b29b      	uxth	r3, r3
 800721c:	3b01      	subs	r3, #1
 800721e:	b29a      	uxth	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691a      	ldr	r2, [r3, #16]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	b2d2      	uxtb	r2, r2
 8007230:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007240:	b29b      	uxth	r3, r3
 8007242:	3b01      	subs	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007258:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b40      	cmp	r3, #64	; 0x40
 800726c:	d10a      	bne.n	8007284 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7fa fa27 	bl	80016d0 <HAL_I2C_MemRxCpltCallback>
}
 8007282:	e01d      	b.n	80072c0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2212      	movs	r2, #18
 8007290:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff fc79 	bl	8006b8a <HAL_I2C_MasterRxCpltCallback>
}
 8007298:	e012      	b.n	80072c0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	691a      	ldr	r2, [r3, #16]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80072c0:	bf00      	nop
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b40      	cmp	r3, #64	; 0x40
 80072da:	d117      	bne.n	800730c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d109      	bne.n	80072f8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	461a      	mov	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072f4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80072f6:	e067      	b.n	80073c8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	f043 0301 	orr.w	r3, r3, #1
 8007302:	b2da      	uxtb	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	611a      	str	r2, [r3, #16]
}
 800730a:	e05d      	b.n	80073c8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007314:	d133      	bne.n	800737e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b21      	cmp	r3, #33	; 0x21
 8007320:	d109      	bne.n	8007336 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007326:	b2db      	uxtb	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007332:	611a      	str	r2, [r3, #16]
 8007334:	e008      	b.n	8007348 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f043 0301 	orr.w	r3, r3, #1
 8007340:	b2da      	uxtb	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800734c:	2b00      	cmp	r3, #0
 800734e:	d004      	beq.n	800735a <I2C_Master_SB+0x92>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007356:	2b00      	cmp	r3, #0
 8007358:	d108      	bne.n	800736c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	2b00      	cmp	r3, #0
 8007360:	d032      	beq.n	80073c8 <I2C_Master_SB+0x100>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d02d      	beq.n	80073c8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800737a:	605a      	str	r2, [r3, #4]
}
 800737c:	e024      	b.n	80073c8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10e      	bne.n	80073a4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	b29b      	uxth	r3, r3
 800738c:	11db      	asrs	r3, r3, #7
 800738e:	b2db      	uxtb	r3, r3
 8007390:	f003 0306 	and.w	r3, r3, #6
 8007394:	b2db      	uxtb	r3, r3
 8007396:	f063 030f 	orn	r3, r3, #15
 800739a:	b2da      	uxtb	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	611a      	str	r2, [r3, #16]
}
 80073a2:	e011      	b.n	80073c8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d10d      	bne.n	80073c8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	11db      	asrs	r3, r3, #7
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	f003 0306 	and.w	r3, r3, #6
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	f063 030e 	orn	r3, r3, #14
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	611a      	str	r2, [r3, #16]
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d004      	beq.n	80073fa <I2C_Master_ADD10+0x26>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d108      	bne.n	800740c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00c      	beq.n	800741c <I2C_Master_ADD10+0x48>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d007      	beq.n	800741c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685a      	ldr	r2, [r3, #4]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800741a:	605a      	str	r2, [r3, #4]
  }
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007428:	b480      	push	{r7}
 800742a:	b091      	sub	sp, #68	; 0x44
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007436:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007444:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b22      	cmp	r3, #34	; 0x22
 8007450:	f040 8169 	bne.w	8007726 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10f      	bne.n	800747c <I2C_Master_ADDR+0x54>
 800745c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007460:	2b40      	cmp	r3, #64	; 0x40
 8007462:	d10b      	bne.n	800747c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007464:	2300      	movs	r3, #0
 8007466:	633b      	str	r3, [r7, #48]	; 0x30
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	633b      	str	r3, [r7, #48]	; 0x30
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	633b      	str	r3, [r7, #48]	; 0x30
 8007478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747a:	e160      	b.n	800773e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007480:	2b00      	cmp	r3, #0
 8007482:	d11d      	bne.n	80074c0 <I2C_Master_ADDR+0x98>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800748c:	d118      	bne.n	80074c0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800748e:	2300      	movs	r3, #0
 8007490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074b2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	651a      	str	r2, [r3, #80]	; 0x50
 80074be:	e13e      	b.n	800773e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d113      	bne.n	80074f2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ca:	2300      	movs	r3, #0
 80074cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	e115      	b.n	800771e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	f040 808a 	bne.w	8007612 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80074fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007500:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007504:	d137      	bne.n	8007576 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007514:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007524:	d113      	bne.n	800754e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007534:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007536:	2300      	movs	r3, #0
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	e0e7      	b.n	800771e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800754e:	2300      	movs	r3, #0
 8007550:	623b      	str	r3, [r7, #32]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	623b      	str	r3, [r7, #32]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	623b      	str	r3, [r7, #32]
 8007562:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	e0d3      	b.n	800771e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007578:	2b08      	cmp	r3, #8
 800757a:	d02e      	beq.n	80075da <I2C_Master_ADDR+0x1b2>
 800757c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800757e:	2b20      	cmp	r3, #32
 8007580:	d02b      	beq.n	80075da <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007584:	2b12      	cmp	r3, #18
 8007586:	d102      	bne.n	800758e <I2C_Master_ADDR+0x166>
 8007588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758a:	2b01      	cmp	r3, #1
 800758c:	d125      	bne.n	80075da <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007590:	2b04      	cmp	r3, #4
 8007592:	d00e      	beq.n	80075b2 <I2C_Master_ADDR+0x18a>
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	2b02      	cmp	r3, #2
 8007598:	d00b      	beq.n	80075b2 <I2C_Master_ADDR+0x18a>
 800759a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759c:	2b10      	cmp	r3, #16
 800759e:	d008      	beq.n	80075b2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	e007      	b.n	80075c2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80075c0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075c2:	2300      	movs	r3, #0
 80075c4:	61fb      	str	r3, [r7, #28]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	61fb      	str	r3, [r7, #28]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	699b      	ldr	r3, [r3, #24]
 80075d4:	61fb      	str	r3, [r7, #28]
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	e0a1      	b.n	800771e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075e8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075ea:	2300      	movs	r3, #0
 80075ec:	61bb      	str	r3, [r7, #24]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	61bb      	str	r3, [r7, #24]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	61bb      	str	r3, [r7, #24]
 80075fe:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	e085      	b.n	800771e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007616:	b29b      	uxth	r3, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d14d      	bne.n	80076b8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800761c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761e:	2b04      	cmp	r3, #4
 8007620:	d016      	beq.n	8007650 <I2C_Master_ADDR+0x228>
 8007622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007624:	2b02      	cmp	r3, #2
 8007626:	d013      	beq.n	8007650 <I2C_Master_ADDR+0x228>
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	2b10      	cmp	r3, #16
 800762c:	d010      	beq.n	8007650 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800763c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e007      	b.n	8007660 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800765e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800766a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800766e:	d117      	bne.n	80076a0 <I2C_Master_ADDR+0x278>
 8007670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007672:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007676:	d00b      	beq.n	8007690 <I2C_Master_ADDR+0x268>
 8007678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767a:	2b01      	cmp	r3, #1
 800767c:	d008      	beq.n	8007690 <I2C_Master_ADDR+0x268>
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	2b08      	cmp	r3, #8
 8007682:	d005      	beq.n	8007690 <I2C_Master_ADDR+0x268>
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	2b10      	cmp	r3, #16
 8007688:	d002      	beq.n	8007690 <I2C_Master_ADDR+0x268>
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	2b20      	cmp	r3, #32
 800768e:	d107      	bne.n	80076a0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800769e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076a0:	2300      	movs	r3, #0
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	617b      	str	r3, [r7, #20]
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	e032      	b.n	800771e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80076c6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076d6:	d117      	bne.n	8007708 <I2C_Master_ADDR+0x2e0>
 80076d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076de:	d00b      	beq.n	80076f8 <I2C_Master_ADDR+0x2d0>
 80076e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d008      	beq.n	80076f8 <I2C_Master_ADDR+0x2d0>
 80076e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d005      	beq.n	80076f8 <I2C_Master_ADDR+0x2d0>
 80076ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ee:	2b10      	cmp	r3, #16
 80076f0:	d002      	beq.n	80076f8 <I2C_Master_ADDR+0x2d0>
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d107      	bne.n	8007708 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007706:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007708:	2300      	movs	r3, #0
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	613b      	str	r3, [r7, #16]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	613b      	str	r3, [r7, #16]
 800771c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007724:	e00b      	b.n	800773e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	68fb      	ldr	r3, [r7, #12]
}
 800773c:	e7ff      	b.n	800773e <I2C_Master_ADDR+0x316>
 800773e:	bf00      	nop
 8007740:	3744      	adds	r7, #68	; 0x44
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b084      	sub	sp, #16
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007758:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775e:	b29b      	uxth	r3, r3
 8007760:	2b00      	cmp	r3, #0
 8007762:	d02b      	beq.n	80077bc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	781a      	ldrb	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777e:	b29b      	uxth	r3, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778c:	b29b      	uxth	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d114      	bne.n	80077bc <I2C_SlaveTransmit_TXE+0x72>
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	2b29      	cmp	r3, #41	; 0x29
 8007796:	d111      	bne.n	80077bc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2221      	movs	r2, #33	; 0x21
 80077ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2228      	movs	r2, #40	; 0x28
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7ff f9f1 	bl	8006b9e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80077bc:	bf00      	nop
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d011      	beq.n	80077fa <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077da:	781a      	ldrb	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	1c5a      	adds	r2, r3, #1
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077f0:	b29b      	uxth	r3, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007814:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800781a:	b29b      	uxth	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d02c      	beq.n	800787a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	691a      	ldr	r2, [r3, #16]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007832:	1c5a      	adds	r2, r3, #1
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800783c:	b29b      	uxth	r3, r3
 800783e:	3b01      	subs	r3, #1
 8007840:	b29a      	uxth	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800784a:	b29b      	uxth	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d114      	bne.n	800787a <I2C_SlaveReceive_RXNE+0x74>
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	2b2a      	cmp	r3, #42	; 0x2a
 8007854:	d111      	bne.n	800787a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007864:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2222      	movs	r2, #34	; 0x22
 800786a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2228      	movs	r2, #40	; 0x28
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff f99c 	bl	8006bb2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788e:	b29b      	uxth	r3, r3
 8007890:	2b00      	cmp	r3, #0
 8007892:	d012      	beq.n	80078ba <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80078e0:	2b28      	cmp	r3, #40	; 0x28
 80078e2:	d127      	bne.n	8007934 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078f2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	089b      	lsrs	r3, r3, #2
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007900:	2301      	movs	r3, #1
 8007902:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	09db      	lsrs	r3, r3, #7
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d103      	bne.n	8007918 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	81bb      	strh	r3, [r7, #12]
 8007916:	e002      	b.n	800791e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007926:	89ba      	ldrh	r2, [r7, #12]
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	4619      	mov	r1, r3
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff f94a 	bl	8006bc6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007932:	e00e      	b.n	8007952 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007934:	2300      	movs	r3, #0
 8007936:	60bb      	str	r3, [r7, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	60bb      	str	r3, [r7, #8]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	60bb      	str	r3, [r7, #8]
 8007948:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007952:	bf00      	nop
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800796a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800797a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800797c:	2300      	movs	r3, #0
 800797e:	60bb      	str	r3, [r7, #8]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695b      	ldr	r3, [r3, #20]
 8007986:	60bb      	str	r3, [r7, #8]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079a8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b8:	d172      	bne.n	8007aa0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
 80079bc:	2b22      	cmp	r3, #34	; 0x22
 80079be:	d002      	beq.n	80079c6 <I2C_Slave_STOPF+0x6a>
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	2b2a      	cmp	r3, #42	; 0x2a
 80079c4:	d135      	bne.n	8007a32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d8:	b29b      	uxth	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d005      	beq.n	80079ea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e2:	f043 0204 	orr.w	r2, r3, #4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685a      	ldr	r2, [r3, #4]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079f8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fd fc2e 	bl	8005260 <HAL_DMA_GetState>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d049      	beq.n	8007a9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0e:	4a69      	ldr	r2, [pc, #420]	; (8007bb4 <I2C_Slave_STOPF+0x258>)
 8007a10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fd fa76 	bl	8004f08 <HAL_DMA_Abort_IT>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d03d      	beq.n	8007a9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a30:	e035      	b.n	8007a9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d005      	beq.n	8007a56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4e:	f043 0204 	orr.w	r2, r3, #4
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fd fbf8 	bl	8005260 <HAL_DMA_GetState>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d014      	beq.n	8007aa0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7a:	4a4e      	ldr	r2, [pc, #312]	; (8007bb4 <I2C_Slave_STOPF+0x258>)
 8007a7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fd fa40 	bl	8004f08 <HAL_DMA_Abort_IT>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d008      	beq.n	8007aa0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a98:	4610      	mov	r0, r2
 8007a9a:	4798      	blx	r3
 8007a9c:	e000      	b.n	8007aa0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d03e      	beq.n	8007b28 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	f003 0304 	and.w	r3, r3, #4
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d112      	bne.n	8007ade <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	691a      	ldr	r2, [r3, #16]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac2:	b2d2      	uxtb	r2, r2
 8007ac4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	1c5a      	adds	r2, r3, #1
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ae8:	2b40      	cmp	r3, #64	; 0x40
 8007aea:	d112      	bne.n	8007b12 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691a      	ldr	r2, [r3, #16]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af6:	b2d2      	uxtb	r2, r2
 8007af8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	1c5a      	adds	r2, r3, #1
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d005      	beq.n	8007b28 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b20:	f043 0204 	orr.w	r2, r3, #4
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d003      	beq.n	8007b38 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f843 	bl	8007bbc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007b36:	e039      	b.n	8007bac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b3c:	d109      	bne.n	8007b52 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2228      	movs	r2, #40	; 0x28
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f7ff f830 	bl	8006bb2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b28      	cmp	r3, #40	; 0x28
 8007b5c:	d111      	bne.n	8007b82 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a15      	ldr	r2, [pc, #84]	; (8007bb8 <I2C_Slave_STOPF+0x25c>)
 8007b62:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2220      	movs	r2, #32
 8007b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f7ff f831 	bl	8006be2 <HAL_I2C_ListenCpltCallback>
}
 8007b80:	e014      	b.n	8007bac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b86:	2b22      	cmp	r3, #34	; 0x22
 8007b88:	d002      	beq.n	8007b90 <I2C_Slave_STOPF+0x234>
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	2b22      	cmp	r3, #34	; 0x22
 8007b8e:	d10d      	bne.n	8007bac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2220      	movs	r2, #32
 8007b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff f803 	bl	8006bb2 <HAL_I2C_SlaveRxCpltCallback>
}
 8007bac:	bf00      	nop
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	08008341 	.word	0x08008341
 8007bb8:	ffff0000 	.word	0xffff0000

08007bbc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bd2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d002      	beq.n	8007be0 <I2C_ITError+0x24>
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
 8007bdc:	2b40      	cmp	r3, #64	; 0x40
 8007bde:	d10a      	bne.n	8007bf6 <I2C_ITError+0x3a>
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
 8007be2:	2b22      	cmp	r3, #34	; 0x22
 8007be4:	d107      	bne.n	8007bf6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bf4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007bfc:	2b28      	cmp	r3, #40	; 0x28
 8007bfe:	d107      	bne.n	8007c10 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2228      	movs	r2, #40	; 0x28
 8007c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007c0e:	e015      	b.n	8007c3c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c1e:	d00a      	beq.n	8007c36 <I2C_ITError+0x7a>
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	2b60      	cmp	r3, #96	; 0x60
 8007c24:	d007      	beq.n	8007c36 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c4a:	d162      	bne.n	8007d12 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c5a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d020      	beq.n	8007cac <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6e:	4a6a      	ldr	r2, [pc, #424]	; (8007e18 <I2C_ITError+0x25c>)
 8007c70:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fd f946 	bl	8004f08 <HAL_DMA_Abort_IT>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 8089 	beq.w	8007d96 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 0201 	bic.w	r2, r2, #1
 8007c92:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	4798      	blx	r3
 8007caa:	e074      	b.n	8007d96 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	4a59      	ldr	r2, [pc, #356]	; (8007e18 <I2C_ITError+0x25c>)
 8007cb2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fd f925 	bl	8004f08 <HAL_DMA_Abort_IT>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d068      	beq.n	8007d96 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cce:	2b40      	cmp	r3, #64	; 0x40
 8007cd0:	d10b      	bne.n	8007cea <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691a      	ldr	r2, [r3, #16]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	b2d2      	uxtb	r2, r2
 8007cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	1c5a      	adds	r2, r3, #1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 0201 	bic.w	r2, r2, #1
 8007cf8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
 8007d10:	e041      	b.n	8007d96 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b60      	cmp	r3, #96	; 0x60
 8007d1c:	d125      	bne.n	8007d6a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d36:	2b40      	cmp	r3, #64	; 0x40
 8007d38:	d10b      	bne.n	8007d52 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691a      	ldr	r2, [r3, #16]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	b2d2      	uxtb	r2, r2
 8007d46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 0201 	bic.w	r2, r2, #1
 8007d60:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7fe ff5b 	bl	8006c1e <HAL_I2C_AbortCpltCallback>
 8007d68:	e015      	b.n	8007d96 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d74:	2b40      	cmp	r3, #64	; 0x40
 8007d76:	d10b      	bne.n	8007d90 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	691a      	ldr	r2, [r3, #16]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	b2d2      	uxtb	r2, r2
 8007d84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7fe ff3a 	bl	8006c0a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10e      	bne.n	8007dc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d109      	bne.n	8007dc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d104      	bne.n	8007dc4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d007      	beq.n	8007dd4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007dd2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dda:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de0:	f003 0304 	and.w	r3, r3, #4
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	d113      	bne.n	8007e10 <I2C_ITError+0x254>
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	2b28      	cmp	r3, #40	; 0x28
 8007dec:	d110      	bne.n	8007e10 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a0a      	ldr	r2, [pc, #40]	; (8007e1c <I2C_ITError+0x260>)
 8007df2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7fe fee9 	bl	8006be2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e10:	bf00      	nop
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	08008341 	.word	0x08008341
 8007e1c:	ffff0000 	.word	0xffff0000

08007e20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af02      	add	r7, sp, #8
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	4608      	mov	r0, r1
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	4603      	mov	r3, r0
 8007e30:	817b      	strh	r3, [r7, #10]
 8007e32:	460b      	mov	r3, r1
 8007e34:	813b      	strh	r3, [r7, #8]
 8007e36:	4613      	mov	r3, r2
 8007e38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f000 fb1a 	bl	8008490 <I2C_WaitOnFlagUntilTimeout>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00d      	beq.n	8007e7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e70:	d103      	bne.n	8007e7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e05f      	b.n	8007f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e7e:	897b      	ldrh	r3, [r7, #10]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	461a      	mov	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e90:	6a3a      	ldr	r2, [r7, #32]
 8007e92:	492d      	ldr	r1, [pc, #180]	; (8007f48 <I2C_RequestMemoryWrite+0x128>)
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fb52 	bl	800853e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e04c      	b.n	8007f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	617b      	str	r3, [r7, #20]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	617b      	str	r3, [r7, #20]
 8007eb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ebc:	6a39      	ldr	r1, [r7, #32]
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f000 fbbc 	bl	800863c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00d      	beq.n	8007ee6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	2b04      	cmp	r3, #4
 8007ed0:	d107      	bne.n	8007ee2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ee0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e02b      	b.n	8007f3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ee6:	88fb      	ldrh	r3, [r7, #6]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d105      	bne.n	8007ef8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007eec:	893b      	ldrh	r3, [r7, #8]
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	611a      	str	r2, [r3, #16]
 8007ef6:	e021      	b.n	8007f3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007ef8:	893b      	ldrh	r3, [r7, #8]
 8007efa:	0a1b      	lsrs	r3, r3, #8
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f08:	6a39      	ldr	r1, [r7, #32]
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 fb96 	bl	800863c <I2C_WaitOnTXEFlagUntilTimeout>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00d      	beq.n	8007f32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d107      	bne.n	8007f2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e005      	b.n	8007f3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007f32:	893b      	ldrh	r3, [r7, #8]
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	00010002 	.word	0x00010002

08007f4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af02      	add	r7, sp, #8
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	4608      	mov	r0, r1
 8007f56:	4611      	mov	r1, r2
 8007f58:	461a      	mov	r2, r3
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	817b      	strh	r3, [r7, #10]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	813b      	strh	r3, [r7, #8]
 8007f62:	4613      	mov	r3, r2
 8007f64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f000 fa7c 	bl	8008490 <I2C_WaitOnFlagUntilTimeout>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00d      	beq.n	8007fba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fac:	d103      	bne.n	8007fb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e0aa      	b.n	8008110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007fba:	897b      	ldrh	r3, [r7, #10]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007fc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	6a3a      	ldr	r2, [r7, #32]
 8007fce:	4952      	ldr	r1, [pc, #328]	; (8008118 <I2C_RequestMemoryRead+0x1cc>)
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 fab4 	bl	800853e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e097      	b.n	8008110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	617b      	str	r3, [r7, #20]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	617b      	str	r3, [r7, #20]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	617b      	str	r3, [r7, #20]
 8007ff4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff8:	6a39      	ldr	r1, [r7, #32]
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 fb1e 	bl	800863c <I2C_WaitOnTXEFlagUntilTimeout>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00d      	beq.n	8008022 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	2b04      	cmp	r3, #4
 800800c:	d107      	bne.n	800801e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800801c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e076      	b.n	8008110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d105      	bne.n	8008034 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008028:	893b      	ldrh	r3, [r7, #8]
 800802a:	b2da      	uxtb	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	611a      	str	r2, [r3, #16]
 8008032:	e021      	b.n	8008078 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008034:	893b      	ldrh	r3, [r7, #8]
 8008036:	0a1b      	lsrs	r3, r3, #8
 8008038:	b29b      	uxth	r3, r3
 800803a:	b2da      	uxtb	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008044:	6a39      	ldr	r1, [r7, #32]
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 faf8 	bl	800863c <I2C_WaitOnTXEFlagUntilTimeout>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00d      	beq.n	800806e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008056:	2b04      	cmp	r3, #4
 8008058:	d107      	bne.n	800806a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008068:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e050      	b.n	8008110 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800806e:	893b      	ldrh	r3, [r7, #8]
 8008070:	b2da      	uxtb	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807a:	6a39      	ldr	r1, [r7, #32]
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 fadd 	bl	800863c <I2C_WaitOnTXEFlagUntilTimeout>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00d      	beq.n	80080a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808c:	2b04      	cmp	r3, #4
 800808e:	d107      	bne.n	80080a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800809e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e035      	b.n	8008110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f000 f9e5 	bl	8008490 <I2C_WaitOnFlagUntilTimeout>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00d      	beq.n	80080e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080da:	d103      	bne.n	80080e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e013      	b.n	8008110 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80080e8:	897b      	ldrh	r3, [r7, #10]
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	f043 0301 	orr.w	r3, r3, #1
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	6a3a      	ldr	r2, [r7, #32]
 80080fc:	4906      	ldr	r1, [pc, #24]	; (8008118 <I2C_RequestMemoryRead+0x1cc>)
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f000 fa1d 	bl	800853e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	e000      	b.n	8008110 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	00010002 	.word	0x00010002

0800811c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008128:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008130:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008138:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	685a      	ldr	r2, [r3, #4]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800814e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815c:	2200      	movs	r2, #0
 800815e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	2200      	movs	r2, #0
 800816e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8008170:	7cfb      	ldrb	r3, [r7, #19]
 8008172:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008176:	2b21      	cmp	r3, #33	; 0x21
 8008178:	d007      	beq.n	800818a <I2C_DMAXferCplt+0x6e>
 800817a:	7cfb      	ldrb	r3, [r7, #19]
 800817c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8008180:	2b22      	cmp	r3, #34	; 0x22
 8008182:	d131      	bne.n	80081e8 <I2C_DMAXferCplt+0xcc>
 8008184:	7cbb      	ldrb	r3, [r7, #18]
 8008186:	2b20      	cmp	r3, #32
 8008188:	d12e      	bne.n	80081e8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008198:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2200      	movs	r2, #0
 800819e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80081a0:	7cfb      	ldrb	r3, [r7, #19]
 80081a2:	2b29      	cmp	r3, #41	; 0x29
 80081a4:	d10a      	bne.n	80081bc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2221      	movs	r2, #33	; 0x21
 80081aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	2228      	movs	r2, #40	; 0x28
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80081b4:	6978      	ldr	r0, [r7, #20]
 80081b6:	f7fe fcf2 	bl	8006b9e <HAL_I2C_SlaveTxCpltCallback>
 80081ba:	e00c      	b.n	80081d6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081bc:	7cfb      	ldrb	r3, [r7, #19]
 80081be:	2b2a      	cmp	r3, #42	; 0x2a
 80081c0:	d109      	bne.n	80081d6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	2222      	movs	r2, #34	; 0x22
 80081c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	2228      	movs	r2, #40	; 0x28
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081d0:	6978      	ldr	r0, [r7, #20]
 80081d2:	f7fe fcee 	bl	8006bb2 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80081e4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80081e6:	e06a      	b.n	80082be <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d064      	beq.n	80082be <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d107      	bne.n	800820e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800820c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800821c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008224:	d009      	beq.n	800823a <I2C_DMAXferCplt+0x11e>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b08      	cmp	r3, #8
 800822a:	d006      	beq.n	800823a <I2C_DMAXferCplt+0x11e>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008232:	d002      	beq.n	800823a <I2C_DMAXferCplt+0x11e>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2b20      	cmp	r3, #32
 8008238:	d107      	bne.n	800824a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008248:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008258:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008268:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2200      	movs	r2, #0
 800826e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8008278:	6978      	ldr	r0, [r7, #20]
 800827a:	f7fe fcc6 	bl	8006c0a <HAL_I2C_ErrorCallback>
}
 800827e:	e01e      	b.n	80082be <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2220      	movs	r2, #32
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2b40      	cmp	r3, #64	; 0x40
 8008292:	d10a      	bne.n	80082aa <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	2200      	movs	r2, #0
 8008298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	2200      	movs	r2, #0
 80082a0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80082a2:	6978      	ldr	r0, [r7, #20]
 80082a4:	f7f9 fa14 	bl	80016d0 <HAL_I2C_MemRxCpltCallback>
}
 80082a8:	e009      	b.n	80082be <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2212      	movs	r2, #18
 80082b6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80082b8:	6978      	ldr	r0, [r7, #20]
 80082ba:	f7fe fc66 	bl	8006b8a <HAL_I2C_MasterRxCpltCallback>
}
 80082be:	bf00      	nop
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e0:	2200      	movs	r2, #0
 80082e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f0:	2200      	movs	r2, #0
 80082f2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7fc ffc1 	bl	800527c <HAL_DMA_GetError>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d01b      	beq.n	8008338 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800830e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2220      	movs	r2, #32
 800831a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	f043 0210 	orr.w	r2, r3, #16
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f7fe fc69 	bl	8006c0a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008338:	bf00      	nop
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008350:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008358:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800835a:	4b4b      	ldr	r3, [pc, #300]	; (8008488 <I2C_DMAAbort+0x148>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	08db      	lsrs	r3, r3, #3
 8008360:	4a4a      	ldr	r2, [pc, #296]	; (800848c <I2C_DMAAbort+0x14c>)
 8008362:	fba2 2303 	umull	r2, r3, r2, r3
 8008366:	0a1a      	lsrs	r2, r3, #8
 8008368:	4613      	mov	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	00da      	lsls	r2, r3, #3
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d106      	bne.n	8008388 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	f043 0220 	orr.w	r2, r3, #32
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008386:	e00a      	b.n	800839e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	3b01      	subs	r3, #1
 800838c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800839c:	d0ea      	beq.n	8008374 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083aa:	2200      	movs	r2, #0
 80083ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d003      	beq.n	80083be <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ba:	2200      	movs	r2, #0
 80083bc:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083cc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	2200      	movs	r2, #0
 80083d2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e0:	2200      	movs	r2, #0
 80083e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d003      	beq.n	80083f4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f0:	2200      	movs	r2, #0
 80083f2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0201 	bic.w	r2, r2, #1
 8008402:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b60      	cmp	r3, #96	; 0x60
 800840e:	d10e      	bne.n	800842e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2220      	movs	r2, #32
 8008414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2200      	movs	r2, #0
 8008424:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008426:	6978      	ldr	r0, [r7, #20]
 8008428:	f7fe fbf9 	bl	8006c1e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800842c:	e027      	b.n	800847e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800842e:	7cfb      	ldrb	r3, [r7, #19]
 8008430:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008434:	2b28      	cmp	r3, #40	; 0x28
 8008436:	d117      	bne.n	8008468 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0201 	orr.w	r2, r2, #1
 8008446:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008456:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	2200      	movs	r2, #0
 800845c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2228      	movs	r2, #40	; 0x28
 8008462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008466:	e007      	b.n	8008478 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2220      	movs	r2, #32
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	2200      	movs	r2, #0
 8008474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008478:	6978      	ldr	r0, [r7, #20]
 800847a:	f7fe fbc6 	bl	8006c0a <HAL_I2C_ErrorCallback>
}
 800847e:	bf00      	nop
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	20000000 	.word	0x20000000
 800848c:	14f8b589 	.word	0x14f8b589

08008490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	603b      	str	r3, [r7, #0]
 800849c:	4613      	mov	r3, r2
 800849e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084a0:	e025      	b.n	80084ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a8:	d021      	beq.n	80084ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084aa:	f7fb fa5f 	bl	800396c <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d302      	bcc.n	80084c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d116      	bne.n	80084ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2220      	movs	r2, #32
 80084ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084da:	f043 0220 	orr.w	r2, r3, #32
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e023      	b.n	8008536 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	0c1b      	lsrs	r3, r3, #16
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d10d      	bne.n	8008514 <I2C_WaitOnFlagUntilTimeout+0x84>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	43da      	mvns	r2, r3
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	4013      	ands	r3, r2
 8008504:	b29b      	uxth	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	bf0c      	ite	eq
 800850a:	2301      	moveq	r3, #1
 800850c:	2300      	movne	r3, #0
 800850e:	b2db      	uxtb	r3, r3
 8008510:	461a      	mov	r2, r3
 8008512:	e00c      	b.n	800852e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	43da      	mvns	r2, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	4013      	ands	r3, r2
 8008520:	b29b      	uxth	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	bf0c      	ite	eq
 8008526:	2301      	moveq	r3, #1
 8008528:	2300      	movne	r3, #0
 800852a:	b2db      	uxtb	r3, r3
 800852c:	461a      	mov	r2, r3
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	429a      	cmp	r2, r3
 8008532:	d0b6      	beq.n	80084a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
 800854a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800854c:	e051      	b.n	80085f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	695b      	ldr	r3, [r3, #20]
 8008554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800855c:	d123      	bne.n	80085a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800856c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008576:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2220      	movs	r2, #32
 8008582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	f043 0204 	orr.w	r2, r3, #4
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e046      	b.n	8008634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085ac:	d021      	beq.n	80085f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085ae:	f7fb f9dd 	bl	800396c <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d302      	bcc.n	80085c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d116      	bne.n	80085f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	f043 0220 	orr.w	r2, r3, #32
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e020      	b.n	8008634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	0c1b      	lsrs	r3, r3, #16
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d10c      	bne.n	8008616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	43da      	mvns	r2, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	4013      	ands	r3, r2
 8008608:	b29b      	uxth	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	bf14      	ite	ne
 800860e:	2301      	movne	r3, #1
 8008610:	2300      	moveq	r3, #0
 8008612:	b2db      	uxtb	r3, r3
 8008614:	e00b      	b.n	800862e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	43da      	mvns	r2, r3
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	4013      	ands	r3, r2
 8008622:	b29b      	uxth	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	bf14      	ite	ne
 8008628:	2301      	movne	r3, #1
 800862a:	2300      	moveq	r3, #0
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d18d      	bne.n	800854e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008648:	e02d      	b.n	80086a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 f900 	bl	8008850 <I2C_IsAcknowledgeFailed>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d001      	beq.n	800865a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e02d      	b.n	80086b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008660:	d021      	beq.n	80086a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008662:	f7fb f983 	bl	800396c <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	429a      	cmp	r2, r3
 8008670:	d302      	bcc.n	8008678 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d116      	bne.n	80086a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2220      	movs	r2, #32
 8008682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	f043 0220 	orr.w	r2, r3, #32
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e007      	b.n	80086b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b0:	2b80      	cmp	r3, #128	; 0x80
 80086b2:	d1ca      	bne.n	800864a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b084      	sub	sp, #16
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086ca:	e02d      	b.n	8008728 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 f8bf 	bl	8008850 <I2C_IsAcknowledgeFailed>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d001      	beq.n	80086dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086d8:	2301      	movs	r3, #1
 80086da:	e02d      	b.n	8008738 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086e2:	d021      	beq.n	8008728 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086e4:	f7fb f942 	bl	800396c <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d302      	bcc.n	80086fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d116      	bne.n	8008728 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008714:	f043 0220 	orr.w	r2, r3, #32
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e007      	b.n	8008738 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	f003 0304 	and.w	r3, r3, #4
 8008732:	2b04      	cmp	r3, #4
 8008734:	d1ca      	bne.n	80086cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800874c:	4b13      	ldr	r3, [pc, #76]	; (800879c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	08db      	lsrs	r3, r3, #3
 8008752:	4a13      	ldr	r2, [pc, #76]	; (80087a0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008754:	fba2 2303 	umull	r2, r3, r2, r3
 8008758:	0a1a      	lsrs	r2, r3, #8
 800875a:	4613      	mov	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	4413      	add	r3, r2
 8008760:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3b01      	subs	r3, #1
 8008766:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d107      	bne.n	800877e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008772:	f043 0220 	orr.w	r2, r3, #32
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e008      	b.n	8008790 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800878c:	d0e9      	beq.n	8008762 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	20000000 	.word	0x20000000
 80087a0:	14f8b589 	.word	0x14f8b589

080087a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087b0:	e042      	b.n	8008838 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	f003 0310 	and.w	r3, r3, #16
 80087bc:	2b10      	cmp	r3, #16
 80087be:	d119      	bne.n	80087f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f06f 0210 	mvn.w	r2, #16
 80087c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2220      	movs	r2, #32
 80087d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	e029      	b.n	8008848 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087f4:	f7fb f8ba 	bl	800396c <HAL_GetTick>
 80087f8:	4602      	mov	r2, r0
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	429a      	cmp	r2, r3
 8008802:	d302      	bcc.n	800880a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d116      	bne.n	8008838 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2220      	movs	r2, #32
 8008814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008824:	f043 0220 	orr.w	r2, r3, #32
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e007      	b.n	8008848 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008842:	2b40      	cmp	r3, #64	; 0x40
 8008844:	d1b5      	bne.n	80087b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008866:	d11b      	bne.n	80088a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008870:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2220      	movs	r2, #32
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888c:	f043 0204 	orr.w	r2, r3, #4
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e000      	b.n	80088a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80088a0:	2300      	movs	r3, #0
}
 80088a2:	4618      	mov	r0, r3
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ba:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80088be:	d103      	bne.n	80088c8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80088c6:	e007      	b.n	80088d8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80088d0:	d102      	bne.n	80088d8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2208      	movs	r2, #8
 80088d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e267      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d075      	beq.n	80089ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008902:	4b88      	ldr	r3, [pc, #544]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f003 030c 	and.w	r3, r3, #12
 800890a:	2b04      	cmp	r3, #4
 800890c:	d00c      	beq.n	8008928 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800890e:	4b85      	ldr	r3, [pc, #532]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008916:	2b08      	cmp	r3, #8
 8008918:	d112      	bne.n	8008940 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800891a:	4b82      	ldr	r3, [pc, #520]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008926:	d10b      	bne.n	8008940 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008928:	4b7e      	ldr	r3, [pc, #504]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d05b      	beq.n	80089ec <HAL_RCC_OscConfig+0x108>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d157      	bne.n	80089ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e242      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008948:	d106      	bne.n	8008958 <HAL_RCC_OscConfig+0x74>
 800894a:	4b76      	ldr	r3, [pc, #472]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a75      	ldr	r2, [pc, #468]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	e01d      	b.n	8008994 <HAL_RCC_OscConfig+0xb0>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008960:	d10c      	bne.n	800897c <HAL_RCC_OscConfig+0x98>
 8008962:	4b70      	ldr	r3, [pc, #448]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a6f      	ldr	r2, [pc, #444]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800896c:	6013      	str	r3, [r2, #0]
 800896e:	4b6d      	ldr	r3, [pc, #436]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a6c      	ldr	r2, [pc, #432]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008978:	6013      	str	r3, [r2, #0]
 800897a:	e00b      	b.n	8008994 <HAL_RCC_OscConfig+0xb0>
 800897c:	4b69      	ldr	r3, [pc, #420]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a68      	ldr	r2, [pc, #416]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	4b66      	ldr	r3, [pc, #408]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a65      	ldr	r2, [pc, #404]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 800898e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d013      	beq.n	80089c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800899c:	f7fa ffe6 	bl	800396c <HAL_GetTick>
 80089a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089a2:	e008      	b.n	80089b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089a4:	f7fa ffe2 	bl	800396c <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b64      	cmp	r3, #100	; 0x64
 80089b0:	d901      	bls.n	80089b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e207      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089b6:	4b5b      	ldr	r3, [pc, #364]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0f0      	beq.n	80089a4 <HAL_RCC_OscConfig+0xc0>
 80089c2:	e014      	b.n	80089ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089c4:	f7fa ffd2 	bl	800396c <HAL_GetTick>
 80089c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089ca:	e008      	b.n	80089de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80089cc:	f7fa ffce 	bl	800396c <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	2b64      	cmp	r3, #100	; 0x64
 80089d8:	d901      	bls.n	80089de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e1f3      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089de:	4b51      	ldr	r3, [pc, #324]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1f0      	bne.n	80089cc <HAL_RCC_OscConfig+0xe8>
 80089ea:	e000      	b.n	80089ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0302 	and.w	r3, r3, #2
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d063      	beq.n	8008ac2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80089fa:	4b4a      	ldr	r3, [pc, #296]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f003 030c 	and.w	r3, r3, #12
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00b      	beq.n	8008a1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a06:	4b47      	ldr	r3, [pc, #284]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008a0e:	2b08      	cmp	r3, #8
 8008a10:	d11c      	bne.n	8008a4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a12:	4b44      	ldr	r3, [pc, #272]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d116      	bne.n	8008a4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a1e:	4b41      	ldr	r3, [pc, #260]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d005      	beq.n	8008a36 <HAL_RCC_OscConfig+0x152>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d001      	beq.n	8008a36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e1c7      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a36:	4b3b      	ldr	r3, [pc, #236]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	4937      	ldr	r1, [pc, #220]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a4a:	e03a      	b.n	8008ac2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d020      	beq.n	8008a96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a54:	4b34      	ldr	r3, [pc, #208]	; (8008b28 <HAL_RCC_OscConfig+0x244>)
 8008a56:	2201      	movs	r2, #1
 8008a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a5a:	f7fa ff87 	bl	800396c <HAL_GetTick>
 8008a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a60:	e008      	b.n	8008a74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008a62:	f7fa ff83 	bl	800396c <HAL_GetTick>
 8008a66:	4602      	mov	r2, r0
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	d901      	bls.n	8008a74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008a70:	2303      	movs	r3, #3
 8008a72:	e1a8      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a74:	4b2b      	ldr	r3, [pc, #172]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d0f0      	beq.n	8008a62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a80:	4b28      	ldr	r3, [pc, #160]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	00db      	lsls	r3, r3, #3
 8008a8e:	4925      	ldr	r1, [pc, #148]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008a90:	4313      	orrs	r3, r2
 8008a92:	600b      	str	r3, [r1, #0]
 8008a94:	e015      	b.n	8008ac2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a96:	4b24      	ldr	r3, [pc, #144]	; (8008b28 <HAL_RCC_OscConfig+0x244>)
 8008a98:	2200      	movs	r2, #0
 8008a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a9c:	f7fa ff66 	bl	800396c <HAL_GetTick>
 8008aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008aa2:	e008      	b.n	8008ab6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008aa4:	f7fa ff62 	bl	800396c <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d901      	bls.n	8008ab6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e187      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ab6:	4b1b      	ldr	r3, [pc, #108]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f003 0302 	and.w	r3, r3, #2
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1f0      	bne.n	8008aa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0308 	and.w	r3, r3, #8
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d036      	beq.n	8008b3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d016      	beq.n	8008b04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ad6:	4b15      	ldr	r3, [pc, #84]	; (8008b2c <HAL_RCC_OscConfig+0x248>)
 8008ad8:	2201      	movs	r2, #1
 8008ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008adc:	f7fa ff46 	bl	800396c <HAL_GetTick>
 8008ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ae2:	e008      	b.n	8008af6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ae4:	f7fa ff42 	bl	800396c <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d901      	bls.n	8008af6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e167      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008af6:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <HAL_RCC_OscConfig+0x240>)
 8008af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008afa:	f003 0302 	and.w	r3, r3, #2
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0f0      	beq.n	8008ae4 <HAL_RCC_OscConfig+0x200>
 8008b02:	e01b      	b.n	8008b3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b04:	4b09      	ldr	r3, [pc, #36]	; (8008b2c <HAL_RCC_OscConfig+0x248>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b0a:	f7fa ff2f 	bl	800396c <HAL_GetTick>
 8008b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b10:	e00e      	b.n	8008b30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b12:	f7fa ff2b 	bl	800396c <HAL_GetTick>
 8008b16:	4602      	mov	r2, r0
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d907      	bls.n	8008b30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e150      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
 8008b24:	40023800 	.word	0x40023800
 8008b28:	42470000 	.word	0x42470000
 8008b2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b30:	4b88      	ldr	r3, [pc, #544]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1ea      	bne.n	8008b12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0304 	and.w	r3, r3, #4
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 8097 	beq.w	8008c78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b4e:	4b81      	ldr	r3, [pc, #516]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d10f      	bne.n	8008b7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60bb      	str	r3, [r7, #8]
 8008b5e:	4b7d      	ldr	r3, [pc, #500]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b62:	4a7c      	ldr	r2, [pc, #496]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b68:	6413      	str	r3, [r2, #64]	; 0x40
 8008b6a:	4b7a      	ldr	r3, [pc, #488]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b72:	60bb      	str	r3, [r7, #8]
 8008b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b76:	2301      	movs	r3, #1
 8008b78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b7a:	4b77      	ldr	r3, [pc, #476]	; (8008d58 <HAL_RCC_OscConfig+0x474>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d118      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008b86:	4b74      	ldr	r3, [pc, #464]	; (8008d58 <HAL_RCC_OscConfig+0x474>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a73      	ldr	r2, [pc, #460]	; (8008d58 <HAL_RCC_OscConfig+0x474>)
 8008b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b92:	f7fa feeb 	bl	800396c <HAL_GetTick>
 8008b96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b98:	e008      	b.n	8008bac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b9a:	f7fa fee7 	bl	800396c <HAL_GetTick>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	d901      	bls.n	8008bac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e10c      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bac:	4b6a      	ldr	r3, [pc, #424]	; (8008d58 <HAL_RCC_OscConfig+0x474>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d0f0      	beq.n	8008b9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d106      	bne.n	8008bce <HAL_RCC_OscConfig+0x2ea>
 8008bc0:	4b64      	ldr	r3, [pc, #400]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc4:	4a63      	ldr	r2, [pc, #396]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008bc6:	f043 0301 	orr.w	r3, r3, #1
 8008bca:	6713      	str	r3, [r2, #112]	; 0x70
 8008bcc:	e01c      	b.n	8008c08 <HAL_RCC_OscConfig+0x324>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	2b05      	cmp	r3, #5
 8008bd4:	d10c      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x30c>
 8008bd6:	4b5f      	ldr	r3, [pc, #380]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bda:	4a5e      	ldr	r2, [pc, #376]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008bdc:	f043 0304 	orr.w	r3, r3, #4
 8008be0:	6713      	str	r3, [r2, #112]	; 0x70
 8008be2:	4b5c      	ldr	r3, [pc, #368]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be6:	4a5b      	ldr	r2, [pc, #364]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008be8:	f043 0301 	orr.w	r3, r3, #1
 8008bec:	6713      	str	r3, [r2, #112]	; 0x70
 8008bee:	e00b      	b.n	8008c08 <HAL_RCC_OscConfig+0x324>
 8008bf0:	4b58      	ldr	r3, [pc, #352]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf4:	4a57      	ldr	r2, [pc, #348]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008bf6:	f023 0301 	bic.w	r3, r3, #1
 8008bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8008bfc:	4b55      	ldr	r3, [pc, #340]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c00:	4a54      	ldr	r2, [pc, #336]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008c02:	f023 0304 	bic.w	r3, r3, #4
 8008c06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d015      	beq.n	8008c3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c10:	f7fa feac 	bl	800396c <HAL_GetTick>
 8008c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c16:	e00a      	b.n	8008c2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c18:	f7fa fea8 	bl	800396c <HAL_GetTick>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	1ad3      	subs	r3, r2, r3
 8008c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d901      	bls.n	8008c2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e0cb      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c2e:	4b49      	ldr	r3, [pc, #292]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d0ee      	beq.n	8008c18 <HAL_RCC_OscConfig+0x334>
 8008c3a:	e014      	b.n	8008c66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c3c:	f7fa fe96 	bl	800396c <HAL_GetTick>
 8008c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c42:	e00a      	b.n	8008c5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008c44:	f7fa fe92 	bl	800396c <HAL_GetTick>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	1ad3      	subs	r3, r2, r3
 8008c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e0b5      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c5a:	4b3e      	ldr	r3, [pc, #248]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c5e:	f003 0302 	and.w	r3, r3, #2
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d1ee      	bne.n	8008c44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c66:	7dfb      	ldrb	r3, [r7, #23]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d105      	bne.n	8008c78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c6c:	4b39      	ldr	r3, [pc, #228]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c70:	4a38      	ldr	r2, [pc, #224]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 80a1 	beq.w	8008dc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c82:	4b34      	ldr	r3, [pc, #208]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f003 030c 	and.w	r3, r3, #12
 8008c8a:	2b08      	cmp	r3, #8
 8008c8c:	d05c      	beq.n	8008d48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d141      	bne.n	8008d1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c96:	4b31      	ldr	r3, [pc, #196]	; (8008d5c <HAL_RCC_OscConfig+0x478>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c9c:	f7fa fe66 	bl	800396c <HAL_GetTick>
 8008ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ca2:	e008      	b.n	8008cb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ca4:	f7fa fe62 	bl	800396c <HAL_GetTick>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d901      	bls.n	8008cb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e087      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cb6:	4b27      	ldr	r3, [pc, #156]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1f0      	bne.n	8008ca4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	69da      	ldr	r2, [r3, #28]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	019b      	lsls	r3, r3, #6
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd8:	085b      	lsrs	r3, r3, #1
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	041b      	lsls	r3, r3, #16
 8008cde:	431a      	orrs	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce4:	061b      	lsls	r3, r3, #24
 8008ce6:	491b      	ldr	r1, [pc, #108]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cec:	4b1b      	ldr	r3, [pc, #108]	; (8008d5c <HAL_RCC_OscConfig+0x478>)
 8008cee:	2201      	movs	r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cf2:	f7fa fe3b 	bl	800396c <HAL_GetTick>
 8008cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cf8:	e008      	b.n	8008d0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008cfa:	f7fa fe37 	bl	800396c <HAL_GetTick>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	2b02      	cmp	r3, #2
 8008d06:	d901      	bls.n	8008d0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e05c      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d0c:	4b11      	ldr	r3, [pc, #68]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d0f0      	beq.n	8008cfa <HAL_RCC_OscConfig+0x416>
 8008d18:	e054      	b.n	8008dc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d1a:	4b10      	ldr	r3, [pc, #64]	; (8008d5c <HAL_RCC_OscConfig+0x478>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d20:	f7fa fe24 	bl	800396c <HAL_GetTick>
 8008d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d26:	e008      	b.n	8008d3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d28:	f7fa fe20 	bl	800396c <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d901      	bls.n	8008d3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e045      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d3a:	4b06      	ldr	r3, [pc, #24]	; (8008d54 <HAL_RCC_OscConfig+0x470>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1f0      	bne.n	8008d28 <HAL_RCC_OscConfig+0x444>
 8008d46:	e03d      	b.n	8008dc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d107      	bne.n	8008d60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008d50:	2301      	movs	r3, #1
 8008d52:	e038      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
 8008d54:	40023800 	.word	0x40023800
 8008d58:	40007000 	.word	0x40007000
 8008d5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008d60:	4b1b      	ldr	r3, [pc, #108]	; (8008dd0 <HAL_RCC_OscConfig+0x4ec>)
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d028      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d121      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d11a      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008d8a:	68fa      	ldr	r2, [r7, #12]
 8008d8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008d90:	4013      	ands	r3, r2
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d111      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	3b01      	subs	r3, #1
 8008daa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d107      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d001      	beq.n	8008dc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e000      	b.n	8008dc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	40023800 	.word	0x40023800

08008dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e0cc      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008de8:	4b68      	ldr	r3, [pc, #416]	; (8008f8c <HAL_RCC_ClockConfig+0x1b8>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	683a      	ldr	r2, [r7, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d90c      	bls.n	8008e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008df6:	4b65      	ldr	r3, [pc, #404]	; (8008f8c <HAL_RCC_ClockConfig+0x1b8>)
 8008df8:	683a      	ldr	r2, [r7, #0]
 8008dfa:	b2d2      	uxtb	r2, r2
 8008dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dfe:	4b63      	ldr	r3, [pc, #396]	; (8008f8c <HAL_RCC_ClockConfig+0x1b8>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d001      	beq.n	8008e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e0b8      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d020      	beq.n	8008e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0304 	and.w	r3, r3, #4
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d005      	beq.n	8008e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e28:	4b59      	ldr	r3, [pc, #356]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	4a58      	ldr	r2, [pc, #352]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008e2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008e32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0308 	and.w	r3, r3, #8
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d005      	beq.n	8008e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e40:	4b53      	ldr	r3, [pc, #332]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	4a52      	ldr	r2, [pc, #328]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008e46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e4c:	4b50      	ldr	r3, [pc, #320]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	494d      	ldr	r1, [pc, #308]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d044      	beq.n	8008ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d107      	bne.n	8008e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e72:	4b47      	ldr	r3, [pc, #284]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d119      	bne.n	8008eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e07f      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d003      	beq.n	8008e92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d107      	bne.n	8008ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e92:	4b3f      	ldr	r3, [pc, #252]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d109      	bne.n	8008eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e06f      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ea2:	4b3b      	ldr	r3, [pc, #236]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e067      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008eb2:	4b37      	ldr	r3, [pc, #220]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f023 0203 	bic.w	r2, r3, #3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	4934      	ldr	r1, [pc, #208]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ec4:	f7fa fd52 	bl	800396c <HAL_GetTick>
 8008ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eca:	e00a      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ecc:	f7fa fd4e 	bl	800396c <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e04f      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ee2:	4b2b      	ldr	r3, [pc, #172]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f003 020c 	and.w	r2, r3, #12
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d1eb      	bne.n	8008ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ef4:	4b25      	ldr	r3, [pc, #148]	; (8008f8c <HAL_RCC_ClockConfig+0x1b8>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d20c      	bcs.n	8008f1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f02:	4b22      	ldr	r3, [pc, #136]	; (8008f8c <HAL_RCC_ClockConfig+0x1b8>)
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f0a:	4b20      	ldr	r3, [pc, #128]	; (8008f8c <HAL_RCC_ClockConfig+0x1b8>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0307 	and.w	r3, r3, #7
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d001      	beq.n	8008f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e032      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d008      	beq.n	8008f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f28:	4b19      	ldr	r3, [pc, #100]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	4916      	ldr	r1, [pc, #88]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0308 	and.w	r3, r3, #8
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d009      	beq.n	8008f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f46:	4b12      	ldr	r3, [pc, #72]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	490e      	ldr	r1, [pc, #56]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008f5a:	f000 f821 	bl	8008fa0 <HAL_RCC_GetSysClockFreq>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <HAL_RCC_ClockConfig+0x1bc>)
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	091b      	lsrs	r3, r3, #4
 8008f66:	f003 030f 	and.w	r3, r3, #15
 8008f6a:	490a      	ldr	r1, [pc, #40]	; (8008f94 <HAL_RCC_ClockConfig+0x1c0>)
 8008f6c:	5ccb      	ldrb	r3, [r1, r3]
 8008f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f72:	4a09      	ldr	r2, [pc, #36]	; (8008f98 <HAL_RCC_ClockConfig+0x1c4>)
 8008f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008f76:	4b09      	ldr	r3, [pc, #36]	; (8008f9c <HAL_RCC_ClockConfig+0x1c8>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fa fa7e 	bl	800347c <HAL_InitTick>

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	40023c00 	.word	0x40023c00
 8008f90:	40023800 	.word	0x40023800
 8008f94:	0800df3c 	.word	0x0800df3c
 8008f98:	20000000 	.word	0x20000000
 8008f9c:	20000004 	.word	0x20000004

08008fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fa4:	b094      	sub	sp, #80	; 0x50
 8008fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	647b      	str	r3, [r7, #68]	; 0x44
 8008fac:	2300      	movs	r3, #0
 8008fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fb8:	4b79      	ldr	r3, [pc, #484]	; (80091a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	f003 030c 	and.w	r3, r3, #12
 8008fc0:	2b08      	cmp	r3, #8
 8008fc2:	d00d      	beq.n	8008fe0 <HAL_RCC_GetSysClockFreq+0x40>
 8008fc4:	2b08      	cmp	r3, #8
 8008fc6:	f200 80e1 	bhi.w	800918c <HAL_RCC_GetSysClockFreq+0x1ec>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d003      	beq.n	8008fda <HAL_RCC_GetSysClockFreq+0x3a>
 8008fd2:	e0db      	b.n	800918c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008fd4:	4b73      	ldr	r3, [pc, #460]	; (80091a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008fd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008fd8:	e0db      	b.n	8009192 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008fda:	4b73      	ldr	r3, [pc, #460]	; (80091a8 <HAL_RCC_GetSysClockFreq+0x208>)
 8008fdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fde:	e0d8      	b.n	8009192 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008fe0:	4b6f      	ldr	r3, [pc, #444]	; (80091a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008fe8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008fea:	4b6d      	ldr	r3, [pc, #436]	; (80091a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d063      	beq.n	80090be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ff6:	4b6a      	ldr	r3, [pc, #424]	; (80091a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	099b      	lsrs	r3, r3, #6
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	63bb      	str	r3, [r7, #56]	; 0x38
 8009000:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009008:	633b      	str	r3, [r7, #48]	; 0x30
 800900a:	2300      	movs	r3, #0
 800900c:	637b      	str	r3, [r7, #52]	; 0x34
 800900e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009012:	4622      	mov	r2, r4
 8009014:	462b      	mov	r3, r5
 8009016:	f04f 0000 	mov.w	r0, #0
 800901a:	f04f 0100 	mov.w	r1, #0
 800901e:	0159      	lsls	r1, r3, #5
 8009020:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009024:	0150      	lsls	r0, r2, #5
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4621      	mov	r1, r4
 800902c:	1a51      	subs	r1, r2, r1
 800902e:	6139      	str	r1, [r7, #16]
 8009030:	4629      	mov	r1, r5
 8009032:	eb63 0301 	sbc.w	r3, r3, r1
 8009036:	617b      	str	r3, [r7, #20]
 8009038:	f04f 0200 	mov.w	r2, #0
 800903c:	f04f 0300 	mov.w	r3, #0
 8009040:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009044:	4659      	mov	r1, fp
 8009046:	018b      	lsls	r3, r1, #6
 8009048:	4651      	mov	r1, sl
 800904a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800904e:	4651      	mov	r1, sl
 8009050:	018a      	lsls	r2, r1, #6
 8009052:	4651      	mov	r1, sl
 8009054:	ebb2 0801 	subs.w	r8, r2, r1
 8009058:	4659      	mov	r1, fp
 800905a:	eb63 0901 	sbc.w	r9, r3, r1
 800905e:	f04f 0200 	mov.w	r2, #0
 8009062:	f04f 0300 	mov.w	r3, #0
 8009066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800906a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800906e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009072:	4690      	mov	r8, r2
 8009074:	4699      	mov	r9, r3
 8009076:	4623      	mov	r3, r4
 8009078:	eb18 0303 	adds.w	r3, r8, r3
 800907c:	60bb      	str	r3, [r7, #8]
 800907e:	462b      	mov	r3, r5
 8009080:	eb49 0303 	adc.w	r3, r9, r3
 8009084:	60fb      	str	r3, [r7, #12]
 8009086:	f04f 0200 	mov.w	r2, #0
 800908a:	f04f 0300 	mov.w	r3, #0
 800908e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009092:	4629      	mov	r1, r5
 8009094:	024b      	lsls	r3, r1, #9
 8009096:	4621      	mov	r1, r4
 8009098:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800909c:	4621      	mov	r1, r4
 800909e:	024a      	lsls	r2, r1, #9
 80090a0:	4610      	mov	r0, r2
 80090a2:	4619      	mov	r1, r3
 80090a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090a6:	2200      	movs	r2, #0
 80090a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80090aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80090b0:	f7f7 fdca 	bl	8000c48 <__aeabi_uldivmod>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4613      	mov	r3, r2
 80090ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090bc:	e058      	b.n	8009170 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090be:	4b38      	ldr	r3, [pc, #224]	; (80091a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	099b      	lsrs	r3, r3, #6
 80090c4:	2200      	movs	r2, #0
 80090c6:	4618      	mov	r0, r3
 80090c8:	4611      	mov	r1, r2
 80090ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80090ce:	623b      	str	r3, [r7, #32]
 80090d0:	2300      	movs	r3, #0
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
 80090d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80090d8:	4642      	mov	r2, r8
 80090da:	464b      	mov	r3, r9
 80090dc:	f04f 0000 	mov.w	r0, #0
 80090e0:	f04f 0100 	mov.w	r1, #0
 80090e4:	0159      	lsls	r1, r3, #5
 80090e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090ea:	0150      	lsls	r0, r2, #5
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4641      	mov	r1, r8
 80090f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80090f6:	4649      	mov	r1, r9
 80090f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80090fc:	f04f 0200 	mov.w	r2, #0
 8009100:	f04f 0300 	mov.w	r3, #0
 8009104:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009108:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800910c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009110:	ebb2 040a 	subs.w	r4, r2, sl
 8009114:	eb63 050b 	sbc.w	r5, r3, fp
 8009118:	f04f 0200 	mov.w	r2, #0
 800911c:	f04f 0300 	mov.w	r3, #0
 8009120:	00eb      	lsls	r3, r5, #3
 8009122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009126:	00e2      	lsls	r2, r4, #3
 8009128:	4614      	mov	r4, r2
 800912a:	461d      	mov	r5, r3
 800912c:	4643      	mov	r3, r8
 800912e:	18e3      	adds	r3, r4, r3
 8009130:	603b      	str	r3, [r7, #0]
 8009132:	464b      	mov	r3, r9
 8009134:	eb45 0303 	adc.w	r3, r5, r3
 8009138:	607b      	str	r3, [r7, #4]
 800913a:	f04f 0200 	mov.w	r2, #0
 800913e:	f04f 0300 	mov.w	r3, #0
 8009142:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009146:	4629      	mov	r1, r5
 8009148:	028b      	lsls	r3, r1, #10
 800914a:	4621      	mov	r1, r4
 800914c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009150:	4621      	mov	r1, r4
 8009152:	028a      	lsls	r2, r1, #10
 8009154:	4610      	mov	r0, r2
 8009156:	4619      	mov	r1, r3
 8009158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800915a:	2200      	movs	r2, #0
 800915c:	61bb      	str	r3, [r7, #24]
 800915e:	61fa      	str	r2, [r7, #28]
 8009160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009164:	f7f7 fd70 	bl	8000c48 <__aeabi_uldivmod>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4613      	mov	r3, r2
 800916e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009170:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	0c1b      	lsrs	r3, r3, #16
 8009176:	f003 0303 	and.w	r3, r3, #3
 800917a:	3301      	adds	r3, #1
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009180:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009184:	fbb2 f3f3 	udiv	r3, r2, r3
 8009188:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800918a:	e002      	b.n	8009192 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800918c:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800918e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009194:	4618      	mov	r0, r3
 8009196:	3750      	adds	r7, #80	; 0x50
 8009198:	46bd      	mov	sp, r7
 800919a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800919e:	bf00      	nop
 80091a0:	40023800 	.word	0x40023800
 80091a4:	00f42400 	.word	0x00f42400
 80091a8:	007a1200 	.word	0x007a1200

080091ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091b0:	4b03      	ldr	r3, [pc, #12]	; (80091c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80091b2:	681b      	ldr	r3, [r3, #0]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	20000000 	.word	0x20000000

080091c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80091c8:	f7ff fff0 	bl	80091ac <HAL_RCC_GetHCLKFreq>
 80091cc:	4602      	mov	r2, r0
 80091ce:	4b05      	ldr	r3, [pc, #20]	; (80091e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	0a9b      	lsrs	r3, r3, #10
 80091d4:	f003 0307 	and.w	r3, r3, #7
 80091d8:	4903      	ldr	r1, [pc, #12]	; (80091e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091da:	5ccb      	ldrb	r3, [r1, r3]
 80091dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	40023800 	.word	0x40023800
 80091e8:	0800df4c 	.word	0x0800df4c

080091ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80091f0:	f7ff ffdc 	bl	80091ac <HAL_RCC_GetHCLKFreq>
 80091f4:	4602      	mov	r2, r0
 80091f6:	4b05      	ldr	r3, [pc, #20]	; (800920c <HAL_RCC_GetPCLK2Freq+0x20>)
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	0b5b      	lsrs	r3, r3, #13
 80091fc:	f003 0307 	and.w	r3, r3, #7
 8009200:	4903      	ldr	r1, [pc, #12]	; (8009210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009202:	5ccb      	ldrb	r3, [r1, r3]
 8009204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009208:	4618      	mov	r0, r3
 800920a:	bd80      	pop	{r7, pc}
 800920c:	40023800 	.word	0x40023800
 8009210:	0800df4c 	.word	0x0800df4c

08009214 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	220f      	movs	r2, #15
 8009222:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009224:	4b12      	ldr	r3, [pc, #72]	; (8009270 <HAL_RCC_GetClockConfig+0x5c>)
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f003 0203 	and.w	r2, r3, #3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009230:	4b0f      	ldr	r3, [pc, #60]	; (8009270 <HAL_RCC_GetClockConfig+0x5c>)
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800923c:	4b0c      	ldr	r3, [pc, #48]	; (8009270 <HAL_RCC_GetClockConfig+0x5c>)
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009248:	4b09      	ldr	r3, [pc, #36]	; (8009270 <HAL_RCC_GetClockConfig+0x5c>)
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	08db      	lsrs	r3, r3, #3
 800924e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009256:	4b07      	ldr	r3, [pc, #28]	; (8009274 <HAL_RCC_GetClockConfig+0x60>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0207 	and.w	r2, r3, #7
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	601a      	str	r2, [r3, #0]
}
 8009262:	bf00      	nop
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	40023800 	.word	0x40023800
 8009274:	40023c00 	.word	0x40023c00

08009278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d101      	bne.n	800928a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e041      	b.n	800930e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009290:	b2db      	uxtb	r3, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d106      	bne.n	80092a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f7f9 ff46 	bl	8003130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	3304      	adds	r3, #4
 80092b4:	4619      	mov	r1, r3
 80092b6:	4610      	mov	r0, r2
 80092b8:	f000 fac4 	bl	8009844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2201      	movs	r2, #1
 8009300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b01      	cmp	r3, #1
 800932a:	d001      	beq.n	8009330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e04e      	b.n	80093ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2202      	movs	r2, #2
 8009334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68da      	ldr	r2, [r3, #12]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f042 0201 	orr.w	r2, r2, #1
 8009346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a23      	ldr	r2, [pc, #140]	; (80093dc <HAL_TIM_Base_Start_IT+0xc4>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d022      	beq.n	8009398 <HAL_TIM_Base_Start_IT+0x80>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800935a:	d01d      	beq.n	8009398 <HAL_TIM_Base_Start_IT+0x80>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a1f      	ldr	r2, [pc, #124]	; (80093e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d018      	beq.n	8009398 <HAL_TIM_Base_Start_IT+0x80>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a1e      	ldr	r2, [pc, #120]	; (80093e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d013      	beq.n	8009398 <HAL_TIM_Base_Start_IT+0x80>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4a1c      	ldr	r2, [pc, #112]	; (80093e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d00e      	beq.n	8009398 <HAL_TIM_Base_Start_IT+0x80>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4a1b      	ldr	r2, [pc, #108]	; (80093ec <HAL_TIM_Base_Start_IT+0xd4>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d009      	beq.n	8009398 <HAL_TIM_Base_Start_IT+0x80>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a19      	ldr	r2, [pc, #100]	; (80093f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d004      	beq.n	8009398 <HAL_TIM_Base_Start_IT+0x80>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a18      	ldr	r2, [pc, #96]	; (80093f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d111      	bne.n	80093bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	f003 0307 	and.w	r3, r3, #7
 80093a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2b06      	cmp	r3, #6
 80093a8:	d010      	beq.n	80093cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f042 0201 	orr.w	r2, r2, #1
 80093b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ba:	e007      	b.n	80093cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f042 0201 	orr.w	r2, r2, #1
 80093ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3714      	adds	r7, #20
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	40010000 	.word	0x40010000
 80093e0:	40000400 	.word	0x40000400
 80093e4:	40000800 	.word	0x40000800
 80093e8:	40000c00 	.word	0x40000c00
 80093ec:	40010400 	.word	0x40010400
 80093f0:	40014000 	.word	0x40014000
 80093f4:	40001800 	.word	0x40001800

080093f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b083      	sub	sp, #12
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68da      	ldr	r2, [r3, #12]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f022 0201 	bic.w	r2, r2, #1
 800940e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6a1a      	ldr	r2, [r3, #32]
 8009416:	f241 1311 	movw	r3, #4369	; 0x1111
 800941a:	4013      	ands	r3, r2
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10f      	bne.n	8009440 <HAL_TIM_Base_Stop_IT+0x48>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6a1a      	ldr	r2, [r3, #32]
 8009426:	f240 4344 	movw	r3, #1092	; 0x444
 800942a:	4013      	ands	r3, r2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d107      	bne.n	8009440 <HAL_TIM_Base_Stop_IT+0x48>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f022 0201 	bic.w	r2, r2, #1
 800943e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	370c      	adds	r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	f003 0302 	and.w	r3, r3, #2
 8009468:	2b02      	cmp	r3, #2
 800946a:	d122      	bne.n	80094b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b02      	cmp	r3, #2
 8009478:	d11b      	bne.n	80094b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f06f 0202 	mvn.w	r2, #2
 8009482:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	f003 0303 	and.w	r3, r3, #3
 8009494:	2b00      	cmp	r3, #0
 8009496:	d003      	beq.n	80094a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f9b5 	bl	8009808 <HAL_TIM_IC_CaptureCallback>
 800949e:	e005      	b.n	80094ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f9a7 	bl	80097f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f9b8 	bl	800981c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	f003 0304 	and.w	r3, r3, #4
 80094bc:	2b04      	cmp	r3, #4
 80094be:	d122      	bne.n	8009506 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	f003 0304 	and.w	r3, r3, #4
 80094ca:	2b04      	cmp	r3, #4
 80094cc:	d11b      	bne.n	8009506 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f06f 0204 	mvn.w	r2, #4
 80094d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2202      	movs	r2, #2
 80094dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f98b 	bl	8009808 <HAL_TIM_IC_CaptureCallback>
 80094f2:	e005      	b.n	8009500 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f97d 	bl	80097f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f98e 	bl	800981c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	f003 0308 	and.w	r3, r3, #8
 8009510:	2b08      	cmp	r3, #8
 8009512:	d122      	bne.n	800955a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	f003 0308 	and.w	r3, r3, #8
 800951e:	2b08      	cmp	r3, #8
 8009520:	d11b      	bne.n	800955a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f06f 0208 	mvn.w	r2, #8
 800952a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2204      	movs	r2, #4
 8009530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	69db      	ldr	r3, [r3, #28]
 8009538:	f003 0303 	and.w	r3, r3, #3
 800953c:	2b00      	cmp	r3, #0
 800953e:	d003      	beq.n	8009548 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 f961 	bl	8009808 <HAL_TIM_IC_CaptureCallback>
 8009546:	e005      	b.n	8009554 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f953 	bl	80097f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f964 	bl	800981c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	f003 0310 	and.w	r3, r3, #16
 8009564:	2b10      	cmp	r3, #16
 8009566:	d122      	bne.n	80095ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	f003 0310 	and.w	r3, r3, #16
 8009572:	2b10      	cmp	r3, #16
 8009574:	d11b      	bne.n	80095ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f06f 0210 	mvn.w	r2, #16
 800957e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2208      	movs	r2, #8
 8009584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	69db      	ldr	r3, [r3, #28]
 800958c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009590:	2b00      	cmp	r3, #0
 8009592:	d003      	beq.n	800959c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f937 	bl	8009808 <HAL_TIM_IC_CaptureCallback>
 800959a:	e005      	b.n	80095a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 f929 	bl	80097f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f93a 	bl	800981c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d10e      	bne.n	80095da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d107      	bne.n	80095da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f06f 0201 	mvn.w	r2, #1
 80095d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7f9 fa87 	bl	8002ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e4:	2b80      	cmp	r3, #128	; 0x80
 80095e6:	d10e      	bne.n	8009606 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f2:	2b80      	cmp	r3, #128	; 0x80
 80095f4:	d107      	bne.n	8009606 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fadf 	bl	8009bc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	691b      	ldr	r3, [r3, #16]
 800960c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009610:	2b40      	cmp	r3, #64	; 0x40
 8009612:	d10e      	bne.n	8009632 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961e:	2b40      	cmp	r3, #64	; 0x40
 8009620:	d107      	bne.n	8009632 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800962a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f8ff 	bl	8009830 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	f003 0320 	and.w	r3, r3, #32
 800963c:	2b20      	cmp	r3, #32
 800963e:	d10e      	bne.n	800965e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	f003 0320 	and.w	r3, r3, #32
 800964a:	2b20      	cmp	r3, #32
 800964c:	d107      	bne.n	800965e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f06f 0220 	mvn.w	r2, #32
 8009656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 faa9 	bl	8009bb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800965e:	bf00      	nop
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
 800966e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800967a:	2b01      	cmp	r3, #1
 800967c:	d101      	bne.n	8009682 <HAL_TIM_ConfigClockSource+0x1c>
 800967e:	2302      	movs	r3, #2
 8009680:	e0b4      	b.n	80097ec <HAL_TIM_ConfigClockSource+0x186>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2202      	movs	r2, #2
 800968e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80096a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096a8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ba:	d03e      	beq.n	800973a <HAL_TIM_ConfigClockSource+0xd4>
 80096bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096c0:	f200 8087 	bhi.w	80097d2 <HAL_TIM_ConfigClockSource+0x16c>
 80096c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096c8:	f000 8086 	beq.w	80097d8 <HAL_TIM_ConfigClockSource+0x172>
 80096cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096d0:	d87f      	bhi.n	80097d2 <HAL_TIM_ConfigClockSource+0x16c>
 80096d2:	2b70      	cmp	r3, #112	; 0x70
 80096d4:	d01a      	beq.n	800970c <HAL_TIM_ConfigClockSource+0xa6>
 80096d6:	2b70      	cmp	r3, #112	; 0x70
 80096d8:	d87b      	bhi.n	80097d2 <HAL_TIM_ConfigClockSource+0x16c>
 80096da:	2b60      	cmp	r3, #96	; 0x60
 80096dc:	d050      	beq.n	8009780 <HAL_TIM_ConfigClockSource+0x11a>
 80096de:	2b60      	cmp	r3, #96	; 0x60
 80096e0:	d877      	bhi.n	80097d2 <HAL_TIM_ConfigClockSource+0x16c>
 80096e2:	2b50      	cmp	r3, #80	; 0x50
 80096e4:	d03c      	beq.n	8009760 <HAL_TIM_ConfigClockSource+0xfa>
 80096e6:	2b50      	cmp	r3, #80	; 0x50
 80096e8:	d873      	bhi.n	80097d2 <HAL_TIM_ConfigClockSource+0x16c>
 80096ea:	2b40      	cmp	r3, #64	; 0x40
 80096ec:	d058      	beq.n	80097a0 <HAL_TIM_ConfigClockSource+0x13a>
 80096ee:	2b40      	cmp	r3, #64	; 0x40
 80096f0:	d86f      	bhi.n	80097d2 <HAL_TIM_ConfigClockSource+0x16c>
 80096f2:	2b30      	cmp	r3, #48	; 0x30
 80096f4:	d064      	beq.n	80097c0 <HAL_TIM_ConfigClockSource+0x15a>
 80096f6:	2b30      	cmp	r3, #48	; 0x30
 80096f8:	d86b      	bhi.n	80097d2 <HAL_TIM_ConfigClockSource+0x16c>
 80096fa:	2b20      	cmp	r3, #32
 80096fc:	d060      	beq.n	80097c0 <HAL_TIM_ConfigClockSource+0x15a>
 80096fe:	2b20      	cmp	r3, #32
 8009700:	d867      	bhi.n	80097d2 <HAL_TIM_ConfigClockSource+0x16c>
 8009702:	2b00      	cmp	r3, #0
 8009704:	d05c      	beq.n	80097c0 <HAL_TIM_ConfigClockSource+0x15a>
 8009706:	2b10      	cmp	r3, #16
 8009708:	d05a      	beq.n	80097c0 <HAL_TIM_ConfigClockSource+0x15a>
 800970a:	e062      	b.n	80097d2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6818      	ldr	r0, [r3, #0]
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	6899      	ldr	r1, [r3, #8]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	685a      	ldr	r2, [r3, #4]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f000 f9ac 	bl	8009a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800972e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	609a      	str	r2, [r3, #8]
      break;
 8009738:	e04f      	b.n	80097da <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6818      	ldr	r0, [r3, #0]
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	6899      	ldr	r1, [r3, #8]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	f000 f995 	bl	8009a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	689a      	ldr	r2, [r3, #8]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800975c:	609a      	str	r2, [r3, #8]
      break;
 800975e:	e03c      	b.n	80097da <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	6859      	ldr	r1, [r3, #4]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	461a      	mov	r2, r3
 800976e:	f000 f909 	bl	8009984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2150      	movs	r1, #80	; 0x50
 8009778:	4618      	mov	r0, r3
 800977a:	f000 f962 	bl	8009a42 <TIM_ITRx_SetConfig>
      break;
 800977e:	e02c      	b.n	80097da <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	6859      	ldr	r1, [r3, #4]
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	461a      	mov	r2, r3
 800978e:	f000 f928 	bl	80099e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2160      	movs	r1, #96	; 0x60
 8009798:	4618      	mov	r0, r3
 800979a:	f000 f952 	bl	8009a42 <TIM_ITRx_SetConfig>
      break;
 800979e:	e01c      	b.n	80097da <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6818      	ldr	r0, [r3, #0]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	6859      	ldr	r1, [r3, #4]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	461a      	mov	r2, r3
 80097ae:	f000 f8e9 	bl	8009984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2140      	movs	r1, #64	; 0x40
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 f942 	bl	8009a42 <TIM_ITRx_SetConfig>
      break;
 80097be:	e00c      	b.n	80097da <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4619      	mov	r1, r3
 80097ca:	4610      	mov	r0, r2
 80097cc:	f000 f939 	bl	8009a42 <TIM_ITRx_SetConfig>
      break;
 80097d0:	e003      	b.n	80097da <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	73fb      	strb	r3, [r7, #15]
      break;
 80097d6:	e000      	b.n	80097da <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a40      	ldr	r2, [pc, #256]	; (8009958 <TIM_Base_SetConfig+0x114>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d013      	beq.n	8009884 <TIM_Base_SetConfig+0x40>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009862:	d00f      	beq.n	8009884 <TIM_Base_SetConfig+0x40>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a3d      	ldr	r2, [pc, #244]	; (800995c <TIM_Base_SetConfig+0x118>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d00b      	beq.n	8009884 <TIM_Base_SetConfig+0x40>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a3c      	ldr	r2, [pc, #240]	; (8009960 <TIM_Base_SetConfig+0x11c>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d007      	beq.n	8009884 <TIM_Base_SetConfig+0x40>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a3b      	ldr	r2, [pc, #236]	; (8009964 <TIM_Base_SetConfig+0x120>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d003      	beq.n	8009884 <TIM_Base_SetConfig+0x40>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a3a      	ldr	r2, [pc, #232]	; (8009968 <TIM_Base_SetConfig+0x124>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d108      	bne.n	8009896 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800988a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	4313      	orrs	r3, r2
 8009894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a2f      	ldr	r2, [pc, #188]	; (8009958 <TIM_Base_SetConfig+0x114>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d02b      	beq.n	80098f6 <TIM_Base_SetConfig+0xb2>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098a4:	d027      	beq.n	80098f6 <TIM_Base_SetConfig+0xb2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a2c      	ldr	r2, [pc, #176]	; (800995c <TIM_Base_SetConfig+0x118>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d023      	beq.n	80098f6 <TIM_Base_SetConfig+0xb2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a2b      	ldr	r2, [pc, #172]	; (8009960 <TIM_Base_SetConfig+0x11c>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d01f      	beq.n	80098f6 <TIM_Base_SetConfig+0xb2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a2a      	ldr	r2, [pc, #168]	; (8009964 <TIM_Base_SetConfig+0x120>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d01b      	beq.n	80098f6 <TIM_Base_SetConfig+0xb2>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a29      	ldr	r2, [pc, #164]	; (8009968 <TIM_Base_SetConfig+0x124>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d017      	beq.n	80098f6 <TIM_Base_SetConfig+0xb2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a28      	ldr	r2, [pc, #160]	; (800996c <TIM_Base_SetConfig+0x128>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d013      	beq.n	80098f6 <TIM_Base_SetConfig+0xb2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a27      	ldr	r2, [pc, #156]	; (8009970 <TIM_Base_SetConfig+0x12c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d00f      	beq.n	80098f6 <TIM_Base_SetConfig+0xb2>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a26      	ldr	r2, [pc, #152]	; (8009974 <TIM_Base_SetConfig+0x130>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d00b      	beq.n	80098f6 <TIM_Base_SetConfig+0xb2>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a25      	ldr	r2, [pc, #148]	; (8009978 <TIM_Base_SetConfig+0x134>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d007      	beq.n	80098f6 <TIM_Base_SetConfig+0xb2>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a24      	ldr	r2, [pc, #144]	; (800997c <TIM_Base_SetConfig+0x138>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d003      	beq.n	80098f6 <TIM_Base_SetConfig+0xb2>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a23      	ldr	r2, [pc, #140]	; (8009980 <TIM_Base_SetConfig+0x13c>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d108      	bne.n	8009908 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	4313      	orrs	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	695b      	ldr	r3, [r3, #20]
 8009912:	4313      	orrs	r3, r2
 8009914:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	689a      	ldr	r2, [r3, #8]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a0a      	ldr	r2, [pc, #40]	; (8009958 <TIM_Base_SetConfig+0x114>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d003      	beq.n	800993c <TIM_Base_SetConfig+0xf8>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a0c      	ldr	r2, [pc, #48]	; (8009968 <TIM_Base_SetConfig+0x124>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d103      	bne.n	8009944 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	691a      	ldr	r2, [r3, #16]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2201      	movs	r2, #1
 8009948:	615a      	str	r2, [r3, #20]
}
 800994a:	bf00      	nop
 800994c:	3714      	adds	r7, #20
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop
 8009958:	40010000 	.word	0x40010000
 800995c:	40000400 	.word	0x40000400
 8009960:	40000800 	.word	0x40000800
 8009964:	40000c00 	.word	0x40000c00
 8009968:	40010400 	.word	0x40010400
 800996c:	40014000 	.word	0x40014000
 8009970:	40014400 	.word	0x40014400
 8009974:	40014800 	.word	0x40014800
 8009978:	40001800 	.word	0x40001800
 800997c:	40001c00 	.word	0x40001c00
 8009980:	40002000 	.word	0x40002000

08009984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6a1b      	ldr	r3, [r3, #32]
 8009994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	f023 0201 	bic.w	r2, r3, #1
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	011b      	lsls	r3, r3, #4
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f023 030a 	bic.w	r3, r3, #10
 80099c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	697a      	ldr	r2, [r7, #20]
 80099d4:	621a      	str	r2, [r3, #32]
}
 80099d6:	bf00      	nop
 80099d8:	371c      	adds	r7, #28
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099e2:	b480      	push	{r7}
 80099e4:	b087      	sub	sp, #28
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	60f8      	str	r0, [r7, #12]
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	f023 0210 	bic.w	r2, r3, #16
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6a1b      	ldr	r3, [r3, #32]
 8009a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	031b      	lsls	r3, r3, #12
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	011b      	lsls	r3, r3, #4
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	621a      	str	r2, [r3, #32]
}
 8009a36:	bf00      	nop
 8009a38:	371c      	adds	r7, #28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b085      	sub	sp, #20
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a5a:	683a      	ldr	r2, [r7, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	f043 0307 	orr.w	r3, r3, #7
 8009a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	609a      	str	r2, [r3, #8]
}
 8009a6c:	bf00      	nop
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	607a      	str	r2, [r7, #4]
 8009a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	021a      	lsls	r2, r3, #8
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	431a      	orrs	r2, r3
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	609a      	str	r2, [r3, #8]
}
 8009aac:	bf00      	nop
 8009aae:	371c      	adds	r7, #28
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d101      	bne.n	8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009acc:	2302      	movs	r3, #2
 8009ace:	e05a      	b.n	8009b86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009af6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	4313      	orrs	r3, r2
 8009b00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a21      	ldr	r2, [pc, #132]	; (8009b94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d022      	beq.n	8009b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b1c:	d01d      	beq.n	8009b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a1d      	ldr	r2, [pc, #116]	; (8009b98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d018      	beq.n	8009b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a1b      	ldr	r2, [pc, #108]	; (8009b9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d013      	beq.n	8009b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a1a      	ldr	r2, [pc, #104]	; (8009ba0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d00e      	beq.n	8009b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a18      	ldr	r2, [pc, #96]	; (8009ba4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d009      	beq.n	8009b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a17      	ldr	r2, [pc, #92]	; (8009ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d004      	beq.n	8009b5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a15      	ldr	r2, [pc, #84]	; (8009bac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d10c      	bne.n	8009b74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b84:	2300      	movs	r3, #0
}
 8009b86:	4618      	mov	r0, r3
 8009b88:	3714      	adds	r7, #20
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop
 8009b94:	40010000 	.word	0x40010000
 8009b98:	40000400 	.word	0x40000400
 8009b9c:	40000800 	.word	0x40000800
 8009ba0:	40000c00 	.word	0x40000c00
 8009ba4:	40010400 	.word	0x40010400
 8009ba8:	40014000 	.word	0x40014000
 8009bac:	40001800 	.word	0x40001800

08009bb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr

08009bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e03f      	b.n	8009c6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d106      	bne.n	8009c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7f9 fb4a 	bl	8003298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2224      	movs	r2, #36	; 0x24
 8009c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68da      	ldr	r2, [r3, #12]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fec7 	bl	800a9b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	691a      	ldr	r2, [r3, #16]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	695a      	ldr	r2, [r3, #20]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68da      	ldr	r2, [r3, #12]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2220      	movs	r2, #32
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2220      	movs	r2, #32
 8009c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}

08009c72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c72:	b580      	push	{r7, lr}
 8009c74:	b08a      	sub	sp, #40	; 0x28
 8009c76:	af02      	add	r7, sp, #8
 8009c78:	60f8      	str	r0, [r7, #12]
 8009c7a:	60b9      	str	r1, [r7, #8]
 8009c7c:	603b      	str	r3, [r7, #0]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c82:	2300      	movs	r3, #0
 8009c84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b20      	cmp	r3, #32
 8009c90:	d17c      	bne.n	8009d8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <HAL_UART_Transmit+0x2c>
 8009c98:	88fb      	ldrh	r3, [r7, #6]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d101      	bne.n	8009ca2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	e075      	b.n	8009d8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d101      	bne.n	8009cb0 <HAL_UART_Transmit+0x3e>
 8009cac:	2302      	movs	r3, #2
 8009cae:	e06e      	b.n	8009d8e <HAL_UART_Transmit+0x11c>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2221      	movs	r2, #33	; 0x21
 8009cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009cc6:	f7f9 fe51 	bl	800396c <HAL_GetTick>
 8009cca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	88fa      	ldrh	r2, [r7, #6]
 8009cd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	88fa      	ldrh	r2, [r7, #6]
 8009cd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce0:	d108      	bne.n	8009cf4 <HAL_UART_Transmit+0x82>
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d104      	bne.n	8009cf4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009cea:	2300      	movs	r3, #0
 8009cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	61bb      	str	r3, [r7, #24]
 8009cf2:	e003      	b.n	8009cfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009d04:	e02a      	b.n	8009d5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2180      	movs	r1, #128	; 0x80
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 fc1c 	bl	800a54e <UART_WaitOnFlagUntilTimeout>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e036      	b.n	8009d8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10b      	bne.n	8009d3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009d26:	69bb      	ldr	r3, [r7, #24]
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	3302      	adds	r3, #2
 8009d3a:	61bb      	str	r3, [r7, #24]
 8009d3c:	e007      	b.n	8009d4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	781a      	ldrb	r2, [r3, #0]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	3b01      	subs	r3, #1
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1cf      	bne.n	8009d06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	9300      	str	r3, [sp, #0]
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	2140      	movs	r1, #64	; 0x40
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f000 fbec 	bl	800a54e <UART_WaitOnFlagUntilTimeout>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e006      	b.n	8009d8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2220      	movs	r2, #32
 8009d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	e000      	b.n	8009d8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009d8c:	2302      	movs	r3, #2
  }
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3720      	adds	r7, #32
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b08c      	sub	sp, #48	; 0x30
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	4613      	mov	r3, r2
 8009da4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b20      	cmp	r3, #32
 8009db0:	d165      	bne.n	8009e7e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <HAL_UART_Transmit_DMA+0x26>
 8009db8:	88fb      	ldrh	r3, [r7, #6]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d101      	bne.n	8009dc2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e05e      	b.n	8009e80 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d101      	bne.n	8009dd0 <HAL_UART_Transmit_DMA+0x38>
 8009dcc:	2302      	movs	r3, #2
 8009dce:	e057      	b.n	8009e80 <HAL_UART_Transmit_DMA+0xe8>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	88fa      	ldrh	r2, [r7, #6]
 8009de2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	88fa      	ldrh	r2, [r7, #6]
 8009de8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2221      	movs	r2, #33	; 0x21
 8009df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfc:	4a22      	ldr	r2, [pc, #136]	; (8009e88 <HAL_UART_Transmit_DMA+0xf0>)
 8009dfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e04:	4a21      	ldr	r2, [pc, #132]	; (8009e8c <HAL_UART_Transmit_DMA+0xf4>)
 8009e06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0c:	4a20      	ldr	r2, [pc, #128]	; (8009e90 <HAL_UART_Transmit_DMA+0xf8>)
 8009e0e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e14:	2200      	movs	r2, #0
 8009e16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009e18:	f107 0308 	add.w	r3, r7, #8
 8009e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	6819      	ldr	r1, [r3, #0]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	88fb      	ldrh	r3, [r7, #6]
 8009e30:	f7fa ffa2 	bl	8004d78 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e3c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	3314      	adds	r3, #20
 8009e4c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	e853 3f00 	ldrex	r3, [r3]
 8009e54:	617b      	str	r3, [r7, #20]
   return(result);
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3314      	adds	r3, #20
 8009e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e66:	627a      	str	r2, [r7, #36]	; 0x24
 8009e68:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6a:	6a39      	ldr	r1, [r7, #32]
 8009e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e6e:	e841 2300 	strex	r3, r2, [r1]
 8009e72:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1e5      	bne.n	8009e46 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	e000      	b.n	8009e80 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009e7e:	2302      	movs	r3, #2
  }
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3730      	adds	r7, #48	; 0x30
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	0800a405 	.word	0x0800a405
 8009e8c:	0800a49f 	.word	0x0800a49f
 8009e90:	0800a4bb 	.word	0x0800a4bb

08009e94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b0ba      	sub	sp, #232	; 0xe8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eca:	f003 030f 	and.w	r3, r3, #15
 8009ece:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10f      	bne.n	8009efa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ede:	f003 0320 	and.w	r3, r3, #32
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d009      	beq.n	8009efa <HAL_UART_IRQHandler+0x66>
 8009ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eea:	f003 0320 	and.w	r3, r3, #32
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d003      	beq.n	8009efa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 fca0 	bl	800a838 <UART_Receive_IT>
      return;
 8009ef8:	e256      	b.n	800a3a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	f000 80de 	beq.w	800a0c0 <HAL_UART_IRQHandler+0x22c>
 8009f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d106      	bne.n	8009f1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	f000 80d1 	beq.w	800a0c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00b      	beq.n	8009f42 <HAL_UART_IRQHandler+0xae>
 8009f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d005      	beq.n	8009f42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3a:	f043 0201 	orr.w	r2, r3, #1
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00b      	beq.n	8009f66 <HAL_UART_IRQHandler+0xd2>
 8009f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d005      	beq.n	8009f66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5e:	f043 0202 	orr.w	r2, r3, #2
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f6a:	f003 0302 	and.w	r3, r3, #2
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00b      	beq.n	8009f8a <HAL_UART_IRQHandler+0xf6>
 8009f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d005      	beq.n	8009f8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f82:	f043 0204 	orr.w	r2, r3, #4
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f8e:	f003 0308 	and.w	r3, r3, #8
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d011      	beq.n	8009fba <HAL_UART_IRQHandler+0x126>
 8009f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d105      	bne.n	8009fae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fa6:	f003 0301 	and.w	r3, r3, #1
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d005      	beq.n	8009fba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb2:	f043 0208 	orr.w	r2, r3, #8
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f000 81ed 	beq.w	800a39e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fc8:	f003 0320 	and.w	r3, r3, #32
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d008      	beq.n	8009fe2 <HAL_UART_IRQHandler+0x14e>
 8009fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fd4:	f003 0320 	and.w	r3, r3, #32
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d002      	beq.n	8009fe2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 fc2b 	bl	800a838 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fec:	2b40      	cmp	r3, #64	; 0x40
 8009fee:	bf0c      	ite	eq
 8009ff0:	2301      	moveq	r3, #1
 8009ff2:	2300      	movne	r3, #0
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffe:	f003 0308 	and.w	r3, r3, #8
 800a002:	2b00      	cmp	r3, #0
 800a004:	d103      	bne.n	800a00e <HAL_UART_IRQHandler+0x17a>
 800a006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d04f      	beq.n	800a0ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fb33 	bl	800a67a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01e:	2b40      	cmp	r3, #64	; 0x40
 800a020:	d141      	bne.n	800a0a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	3314      	adds	r3, #20
 800a028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a030:	e853 3f00 	ldrex	r3, [r3]
 800a034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a038:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a03c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a040:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3314      	adds	r3, #20
 800a04a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a04e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a056:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a05a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a05e:	e841 2300 	strex	r3, r2, [r1]
 800a062:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d1d9      	bne.n	800a022 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a072:	2b00      	cmp	r3, #0
 800a074:	d013      	beq.n	800a09e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a07a:	4a7d      	ldr	r2, [pc, #500]	; (800a270 <HAL_UART_IRQHandler+0x3dc>)
 800a07c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a082:	4618      	mov	r0, r3
 800a084:	f7fa ff40 	bl	8004f08 <HAL_DMA_Abort_IT>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d016      	beq.n	800a0bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a098:	4610      	mov	r0, r2
 800a09a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a09c:	e00e      	b.n	800a0bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 f99a 	bl	800a3d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a4:	e00a      	b.n	800a0bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f996 	bl	800a3d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ac:	e006      	b.n	800a0bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f992 	bl	800a3d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a0ba:	e170      	b.n	800a39e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0bc:	bf00      	nop
    return;
 800a0be:	e16e      	b.n	800a39e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	f040 814a 	bne.w	800a35e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0ce:	f003 0310 	and.w	r3, r3, #16
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f000 8143 	beq.w	800a35e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a0d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0dc:	f003 0310 	and.w	r3, r3, #16
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 813c 	beq.w	800a35e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	60bb      	str	r3, [r7, #8]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	60bb      	str	r3, [r7, #8]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	60bb      	str	r3, [r7, #8]
 800a0fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a106:	2b40      	cmp	r3, #64	; 0x40
 800a108:	f040 80b4 	bne.w	800a274 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a118:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	f000 8140 	beq.w	800a3a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a12a:	429a      	cmp	r2, r3
 800a12c:	f080 8139 	bcs.w	800a3a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a136:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a142:	f000 8088 	beq.w	800a256 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	330c      	adds	r3, #12
 800a14c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a150:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a15c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a164:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	330c      	adds	r3, #12
 800a16e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a172:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a17e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a18a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1d9      	bne.n	800a146 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3314      	adds	r3, #20
 800a198:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a19c:	e853 3f00 	ldrex	r3, [r3]
 800a1a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a1a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1a4:	f023 0301 	bic.w	r3, r3, #1
 800a1a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	3314      	adds	r3, #20
 800a1b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a1b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a1ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a1be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a1c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e1      	bne.n	800a192 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3314      	adds	r3, #20
 800a1d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1d8:	e853 3f00 	ldrex	r3, [r3]
 800a1dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a1de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3314      	adds	r3, #20
 800a1ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a1f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a1f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a1f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a1fa:	e841 2300 	strex	r3, r2, [r1]
 800a1fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1e3      	bne.n	800a1ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2220      	movs	r2, #32
 800a20a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	330c      	adds	r3, #12
 800a21a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a21e:	e853 3f00 	ldrex	r3, [r3]
 800a222:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a226:	f023 0310 	bic.w	r3, r3, #16
 800a22a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	330c      	adds	r3, #12
 800a234:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a238:	65ba      	str	r2, [r7, #88]	; 0x58
 800a23a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a23e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a240:	e841 2300 	strex	r3, r2, [r1]
 800a244:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1e3      	bne.n	800a214 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a250:	4618      	mov	r0, r3
 800a252:	f7fa fde9 	bl	8004e28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a25e:	b29b      	uxth	r3, r3
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	b29b      	uxth	r3, r3
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 f8c0 	bl	800a3ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a26c:	e099      	b.n	800a3a2 <HAL_UART_IRQHandler+0x50e>
 800a26e:	bf00      	nop
 800a270:	0800a741 	.word	0x0800a741
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a288:	b29b      	uxth	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	f000 808b 	beq.w	800a3a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a294:	2b00      	cmp	r3, #0
 800a296:	f000 8086 	beq.w	800a3a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	330c      	adds	r3, #12
 800a2a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	e853 3f00 	ldrex	r3, [r3]
 800a2a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	330c      	adds	r3, #12
 800a2ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a2be:	647a      	str	r2, [r7, #68]	; 0x44
 800a2c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2c6:	e841 2300 	strex	r3, r2, [r1]
 800a2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1e3      	bne.n	800a29a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3314      	adds	r3, #20
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	e853 3f00 	ldrex	r3, [r3]
 800a2e0:	623b      	str	r3, [r7, #32]
   return(result);
 800a2e2:	6a3b      	ldr	r3, [r7, #32]
 800a2e4:	f023 0301 	bic.w	r3, r3, #1
 800a2e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	3314      	adds	r3, #20
 800a2f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a2f6:	633a      	str	r2, [r7, #48]	; 0x30
 800a2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2fe:	e841 2300 	strex	r3, r2, [r1]
 800a302:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1e3      	bne.n	800a2d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2220      	movs	r2, #32
 800a30e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	330c      	adds	r3, #12
 800a31e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	e853 3f00 	ldrex	r3, [r3]
 800a326:	60fb      	str	r3, [r7, #12]
   return(result);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	f023 0310 	bic.w	r3, r3, #16
 800a32e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	330c      	adds	r3, #12
 800a338:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a33c:	61fa      	str	r2, [r7, #28]
 800a33e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a340:	69b9      	ldr	r1, [r7, #24]
 800a342:	69fa      	ldr	r2, [r7, #28]
 800a344:	e841 2300 	strex	r3, r2, [r1]
 800a348:	617b      	str	r3, [r7, #20]
   return(result);
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d1e3      	bne.n	800a318 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a354:	4619      	mov	r1, r3
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f848 	bl	800a3ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a35c:	e023      	b.n	800a3a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a35e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a366:	2b00      	cmp	r3, #0
 800a368:	d009      	beq.n	800a37e <HAL_UART_IRQHandler+0x4ea>
 800a36a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a372:	2b00      	cmp	r3, #0
 800a374:	d003      	beq.n	800a37e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f9f6 	bl	800a768 <UART_Transmit_IT>
    return;
 800a37c:	e014      	b.n	800a3a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a37e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00e      	beq.n	800a3a8 <HAL_UART_IRQHandler+0x514>
 800a38a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a38e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a392:	2b00      	cmp	r3, #0
 800a394:	d008      	beq.n	800a3a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 fa36 	bl	800a808 <UART_EndTransmit_IT>
    return;
 800a39c:	e004      	b.n	800a3a8 <HAL_UART_IRQHandler+0x514>
    return;
 800a39e:	bf00      	nop
 800a3a0:	e002      	b.n	800a3a8 <HAL_UART_IRQHandler+0x514>
      return;
 800a3a2:	bf00      	nop
 800a3a4:	e000      	b.n	800a3a8 <HAL_UART_IRQHandler+0x514>
      return;
 800a3a6:	bf00      	nop
  }
}
 800a3a8:	37e8      	adds	r7, #232	; 0xe8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop

0800a3b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a3e0:	bf00      	nop
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b090      	sub	sp, #64	; 0x40
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a410:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d137      	bne.n	800a490 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a422:	2200      	movs	r2, #0
 800a424:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3314      	adds	r3, #20
 800a42c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	e853 3f00 	ldrex	r3, [r3]
 800a434:	623b      	str	r3, [r7, #32]
   return(result);
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a43c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a43e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3314      	adds	r3, #20
 800a444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a446:	633a      	str	r2, [r7, #48]	; 0x30
 800a448:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a44a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a44c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a44e:	e841 2300 	strex	r3, r2, [r1]
 800a452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1e5      	bne.n	800a426 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	330c      	adds	r3, #12
 800a460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	e853 3f00 	ldrex	r3, [r3]
 800a468:	60fb      	str	r3, [r7, #12]
   return(result);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a470:	637b      	str	r3, [r7, #52]	; 0x34
 800a472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	330c      	adds	r3, #12
 800a478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a47a:	61fa      	str	r2, [r7, #28]
 800a47c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47e:	69b9      	ldr	r1, [r7, #24]
 800a480:	69fa      	ldr	r2, [r7, #28]
 800a482:	e841 2300 	strex	r3, r2, [r1]
 800a486:	617b      	str	r3, [r7, #20]
   return(result);
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d1e5      	bne.n	800a45a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a48e:	e002      	b.n	800a496 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a490:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a492:	f7f7 f933 	bl	80016fc <HAL_UART_TxCpltCallback>
}
 800a496:	bf00      	nop
 800a498:	3740      	adds	r7, #64	; 0x40
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f7ff ff7f 	bl	800a3b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4b2:	bf00      	nop
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b084      	sub	sp, #16
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	695b      	ldr	r3, [r3, #20]
 800a4d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4d6:	2b80      	cmp	r3, #128	; 0x80
 800a4d8:	bf0c      	ite	eq
 800a4da:	2301      	moveq	r3, #1
 800a4dc:	2300      	movne	r3, #0
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b21      	cmp	r3, #33	; 0x21
 800a4ec:	d108      	bne.n	800a500 <UART_DMAError+0x46>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d005      	beq.n	800a500 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a4fa:	68b8      	ldr	r0, [r7, #8]
 800a4fc:	f000 f895 	bl	800a62a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	695b      	ldr	r3, [r3, #20]
 800a506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a50a:	2b40      	cmp	r3, #64	; 0x40
 800a50c:	bf0c      	ite	eq
 800a50e:	2301      	moveq	r3, #1
 800a510:	2300      	movne	r3, #0
 800a512:	b2db      	uxtb	r3, r3
 800a514:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b22      	cmp	r3, #34	; 0x22
 800a520:	d108      	bne.n	800a534 <UART_DMAError+0x7a>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d005      	beq.n	800a534 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	2200      	movs	r2, #0
 800a52c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a52e:	68b8      	ldr	r0, [r7, #8]
 800a530:	f000 f8a3 	bl	800a67a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a538:	f043 0210 	orr.w	r2, r3, #16
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a540:	68b8      	ldr	r0, [r7, #8]
 800a542:	f7ff ff49 	bl	800a3d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a546:	bf00      	nop
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b090      	sub	sp, #64	; 0x40
 800a552:	af00      	add	r7, sp, #0
 800a554:	60f8      	str	r0, [r7, #12]
 800a556:	60b9      	str	r1, [r7, #8]
 800a558:	603b      	str	r3, [r7, #0]
 800a55a:	4613      	mov	r3, r2
 800a55c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a55e:	e050      	b.n	800a602 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a566:	d04c      	beq.n	800a602 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d007      	beq.n	800a57e <UART_WaitOnFlagUntilTimeout+0x30>
 800a56e:	f7f9 f9fd 	bl	800396c <HAL_GetTick>
 800a572:	4602      	mov	r2, r0
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	1ad3      	subs	r3, r2, r3
 800a578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d241      	bcs.n	800a602 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	330c      	adds	r3, #12
 800a584:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a588:	e853 3f00 	ldrex	r3, [r3]
 800a58c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a594:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	330c      	adds	r3, #12
 800a59c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a59e:	637a      	str	r2, [r7, #52]	; 0x34
 800a5a0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5a6:	e841 2300 	strex	r3, r2, [r1]
 800a5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1e5      	bne.n	800a57e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3314      	adds	r3, #20
 800a5b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	e853 3f00 	ldrex	r3, [r3]
 800a5c0:	613b      	str	r3, [r7, #16]
   return(result);
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	f023 0301 	bic.w	r3, r3, #1
 800a5c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	3314      	adds	r3, #20
 800a5d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5d2:	623a      	str	r2, [r7, #32]
 800a5d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d6:	69f9      	ldr	r1, [r7, #28]
 800a5d8:	6a3a      	ldr	r2, [r7, #32]
 800a5da:	e841 2300 	strex	r3, r2, [r1]
 800a5de:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d1e5      	bne.n	800a5b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2220      	movs	r2, #32
 800a5ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a5fe:	2303      	movs	r3, #3
 800a600:	e00f      	b.n	800a622 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	4013      	ands	r3, r2
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	429a      	cmp	r2, r3
 800a610:	bf0c      	ite	eq
 800a612:	2301      	moveq	r3, #1
 800a614:	2300      	movne	r3, #0
 800a616:	b2db      	uxtb	r3, r3
 800a618:	461a      	mov	r2, r3
 800a61a:	79fb      	ldrb	r3, [r7, #7]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d09f      	beq.n	800a560 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3740      	adds	r7, #64	; 0x40
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a62a:	b480      	push	{r7}
 800a62c:	b089      	sub	sp, #36	; 0x24
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	330c      	adds	r3, #12
 800a638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	e853 3f00 	ldrex	r3, [r3]
 800a640:	60bb      	str	r3, [r7, #8]
   return(result);
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a648:	61fb      	str	r3, [r7, #28]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	330c      	adds	r3, #12
 800a650:	69fa      	ldr	r2, [r7, #28]
 800a652:	61ba      	str	r2, [r7, #24]
 800a654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a656:	6979      	ldr	r1, [r7, #20]
 800a658:	69ba      	ldr	r2, [r7, #24]
 800a65a:	e841 2300 	strex	r3, r2, [r1]
 800a65e:	613b      	str	r3, [r7, #16]
   return(result);
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1e5      	bne.n	800a632 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2220      	movs	r2, #32
 800a66a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a66e:	bf00      	nop
 800a670:	3724      	adds	r7, #36	; 0x24
 800a672:	46bd      	mov	sp, r7
 800a674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a678:	4770      	bx	lr

0800a67a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b095      	sub	sp, #84	; 0x54
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	330c      	adds	r3, #12
 800a688:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68c:	e853 3f00 	ldrex	r3, [r3]
 800a690:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a698:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	330c      	adds	r3, #12
 800a6a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6a2:	643a      	str	r2, [r7, #64]	; 0x40
 800a6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a6a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6aa:	e841 2300 	strex	r3, r2, [r1]
 800a6ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1e5      	bne.n	800a682 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	3314      	adds	r3, #20
 800a6bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	e853 3f00 	ldrex	r3, [r3]
 800a6c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	f023 0301 	bic.w	r3, r3, #1
 800a6cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	3314      	adds	r3, #20
 800a6d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6de:	e841 2300 	strex	r3, r2, [r1]
 800a6e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1e5      	bne.n	800a6b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d119      	bne.n	800a726 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	330c      	adds	r3, #12
 800a6f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	60bb      	str	r3, [r7, #8]
   return(result);
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	f023 0310 	bic.w	r3, r3, #16
 800a708:	647b      	str	r3, [r7, #68]	; 0x44
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	330c      	adds	r3, #12
 800a710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a712:	61ba      	str	r2, [r7, #24]
 800a714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	6979      	ldr	r1, [r7, #20]
 800a718:	69ba      	ldr	r2, [r7, #24]
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	613b      	str	r3, [r7, #16]
   return(result);
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e5      	bne.n	800a6f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2220      	movs	r2, #32
 800a72a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a734:	bf00      	nop
 800a736:	3754      	adds	r7, #84	; 0x54
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2200      	movs	r2, #0
 800a758:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a75a:	68f8      	ldr	r0, [r7, #12]
 800a75c:	f7ff fe3c 	bl	800a3d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a760:	bf00      	nop
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a776:	b2db      	uxtb	r3, r3
 800a778:	2b21      	cmp	r3, #33	; 0x21
 800a77a:	d13e      	bne.n	800a7fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a784:	d114      	bne.n	800a7b0 <UART_Transmit_IT+0x48>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d110      	bne.n	800a7b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	881b      	ldrh	r3, [r3, #0]
 800a798:	461a      	mov	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a1b      	ldr	r3, [r3, #32]
 800a7a8:	1c9a      	adds	r2, r3, #2
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	621a      	str	r2, [r3, #32]
 800a7ae:	e008      	b.n	800a7c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6a1b      	ldr	r3, [r3, #32]
 800a7b4:	1c59      	adds	r1, r3, #1
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	6211      	str	r1, [r2, #32]
 800a7ba:	781a      	ldrb	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a7c6:	b29b      	uxth	r3, r3
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	b29b      	uxth	r3, r3
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d10f      	bne.n	800a7f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	68da      	ldr	r2, [r3, #12]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68da      	ldr	r2, [r3, #12]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	e000      	b.n	800a7fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a7fa:	2302      	movs	r3, #2
  }
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3714      	adds	r7, #20
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	68da      	ldr	r2, [r3, #12]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a81e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2220      	movs	r2, #32
 800a824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f7f6 ff67 	bl	80016fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b08c      	sub	sp, #48	; 0x30
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a846:	b2db      	uxtb	r3, r3
 800a848:	2b22      	cmp	r3, #34	; 0x22
 800a84a:	f040 80ab 	bne.w	800a9a4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a856:	d117      	bne.n	800a888 <UART_Receive_IT+0x50>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d113      	bne.n	800a888 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a860:	2300      	movs	r3, #0
 800a862:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a868:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	b29b      	uxth	r3, r3
 800a872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a876:	b29a      	uxth	r2, r3
 800a878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a87a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a880:	1c9a      	adds	r2, r3, #2
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	629a      	str	r2, [r3, #40]	; 0x28
 800a886:	e026      	b.n	800a8d6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a88e:	2300      	movs	r3, #0
 800a890:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a89a:	d007      	beq.n	800a8ac <UART_Receive_IT+0x74>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10a      	bne.n	800a8ba <UART_Receive_IT+0x82>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	691b      	ldr	r3, [r3, #16]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d106      	bne.n	800a8ba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	b2da      	uxtb	r2, r3
 800a8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b6:	701a      	strb	r2, [r3, #0]
 800a8b8:	e008      	b.n	800a8cc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8c6:	b2da      	uxtb	r2, r3
 800a8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d0:	1c5a      	adds	r2, r3, #1
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d15a      	bne.n	800a9a0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68da      	ldr	r2, [r3, #12]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 0220 	bic.w	r2, r2, #32
 800a8f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68da      	ldr	r2, [r3, #12]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a908:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	695a      	ldr	r2, [r3, #20]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f022 0201 	bic.w	r2, r2, #1
 800a918:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2220      	movs	r2, #32
 800a91e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a926:	2b01      	cmp	r3, #1
 800a928:	d135      	bne.n	800a996 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	330c      	adds	r3, #12
 800a936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	e853 3f00 	ldrex	r3, [r3]
 800a93e:	613b      	str	r3, [r7, #16]
   return(result);
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	f023 0310 	bic.w	r3, r3, #16
 800a946:	627b      	str	r3, [r7, #36]	; 0x24
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	330c      	adds	r3, #12
 800a94e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a950:	623a      	str	r2, [r7, #32]
 800a952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a954:	69f9      	ldr	r1, [r7, #28]
 800a956:	6a3a      	ldr	r2, [r7, #32]
 800a958:	e841 2300 	strex	r3, r2, [r1]
 800a95c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d1e5      	bne.n	800a930 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 0310 	and.w	r3, r3, #16
 800a96e:	2b10      	cmp	r3, #16
 800a970:	d10a      	bne.n	800a988 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a972:	2300      	movs	r3, #0
 800a974:	60fb      	str	r3, [r7, #12]
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	60fb      	str	r3, [r7, #12]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	60fb      	str	r3, [r7, #12]
 800a986:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a98c:	4619      	mov	r1, r3
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7ff fd2c 	bl	800a3ec <HAL_UARTEx_RxEventCallback>
 800a994:	e002      	b.n	800a99c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f7ff fd14 	bl	800a3c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a99c:	2300      	movs	r3, #0
 800a99e:	e002      	b.n	800a9a6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	e000      	b.n	800a9a6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a9a4:	2302      	movs	r3, #2
  }
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3730      	adds	r7, #48	; 0x30
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9b4:	b0c0      	sub	sp, #256	; 0x100
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	691b      	ldr	r3, [r3, #16]
 800a9c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9cc:	68d9      	ldr	r1, [r3, #12]
 800a9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	ea40 0301 	orr.w	r3, r0, r1
 800a9d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a9da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9de:	689a      	ldr	r2, [r3, #8]
 800a9e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e4:	691b      	ldr	r3, [r3, #16]
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9f4:	69db      	ldr	r3, [r3, #28]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a9fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aa08:	f021 010c 	bic.w	r1, r1, #12
 800aa0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa16:	430b      	orrs	r3, r1
 800aa18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aa26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa2a:	6999      	ldr	r1, [r3, #24]
 800aa2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	ea40 0301 	orr.w	r3, r0, r1
 800aa36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	4b8f      	ldr	r3, [pc, #572]	; (800ac7c <UART_SetConfig+0x2cc>)
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d005      	beq.n	800aa50 <UART_SetConfig+0xa0>
 800aa44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	4b8d      	ldr	r3, [pc, #564]	; (800ac80 <UART_SetConfig+0x2d0>)
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	d104      	bne.n	800aa5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa50:	f7fe fbcc 	bl	80091ec <HAL_RCC_GetPCLK2Freq>
 800aa54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800aa58:	e003      	b.n	800aa62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa5a:	f7fe fbb3 	bl	80091c4 <HAL_RCC_GetPCLK1Freq>
 800aa5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa66:	69db      	ldr	r3, [r3, #28]
 800aa68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa6c:	f040 810c 	bne.w	800ac88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa74:	2200      	movs	r2, #0
 800aa76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aa7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800aa7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800aa82:	4622      	mov	r2, r4
 800aa84:	462b      	mov	r3, r5
 800aa86:	1891      	adds	r1, r2, r2
 800aa88:	65b9      	str	r1, [r7, #88]	; 0x58
 800aa8a:	415b      	adcs	r3, r3
 800aa8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800aa92:	4621      	mov	r1, r4
 800aa94:	eb12 0801 	adds.w	r8, r2, r1
 800aa98:	4629      	mov	r1, r5
 800aa9a:	eb43 0901 	adc.w	r9, r3, r1
 800aa9e:	f04f 0200 	mov.w	r2, #0
 800aaa2:	f04f 0300 	mov.w	r3, #0
 800aaa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aaaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aaae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aab2:	4690      	mov	r8, r2
 800aab4:	4699      	mov	r9, r3
 800aab6:	4623      	mov	r3, r4
 800aab8:	eb18 0303 	adds.w	r3, r8, r3
 800aabc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aac0:	462b      	mov	r3, r5
 800aac2:	eb49 0303 	adc.w	r3, r9, r3
 800aac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aaca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	2200      	movs	r2, #0
 800aad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aad6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800aada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800aade:	460b      	mov	r3, r1
 800aae0:	18db      	adds	r3, r3, r3
 800aae2:	653b      	str	r3, [r7, #80]	; 0x50
 800aae4:	4613      	mov	r3, r2
 800aae6:	eb42 0303 	adc.w	r3, r2, r3
 800aaea:	657b      	str	r3, [r7, #84]	; 0x54
 800aaec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800aaf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800aaf4:	f7f6 f8a8 	bl	8000c48 <__aeabi_uldivmod>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	460b      	mov	r3, r1
 800aafc:	4b61      	ldr	r3, [pc, #388]	; (800ac84 <UART_SetConfig+0x2d4>)
 800aafe:	fba3 2302 	umull	r2, r3, r3, r2
 800ab02:	095b      	lsrs	r3, r3, #5
 800ab04:	011c      	lsls	r4, r3, #4
 800ab06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ab10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800ab14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800ab18:	4642      	mov	r2, r8
 800ab1a:	464b      	mov	r3, r9
 800ab1c:	1891      	adds	r1, r2, r2
 800ab1e:	64b9      	str	r1, [r7, #72]	; 0x48
 800ab20:	415b      	adcs	r3, r3
 800ab22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ab28:	4641      	mov	r1, r8
 800ab2a:	eb12 0a01 	adds.w	sl, r2, r1
 800ab2e:	4649      	mov	r1, r9
 800ab30:	eb43 0b01 	adc.w	fp, r3, r1
 800ab34:	f04f 0200 	mov.w	r2, #0
 800ab38:	f04f 0300 	mov.w	r3, #0
 800ab3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ab40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ab44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab48:	4692      	mov	sl, r2
 800ab4a:	469b      	mov	fp, r3
 800ab4c:	4643      	mov	r3, r8
 800ab4e:	eb1a 0303 	adds.w	r3, sl, r3
 800ab52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab56:	464b      	mov	r3, r9
 800ab58:	eb4b 0303 	adc.w	r3, fp, r3
 800ab5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ab60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ab6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ab70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ab74:	460b      	mov	r3, r1
 800ab76:	18db      	adds	r3, r3, r3
 800ab78:	643b      	str	r3, [r7, #64]	; 0x40
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	eb42 0303 	adc.w	r3, r2, r3
 800ab80:	647b      	str	r3, [r7, #68]	; 0x44
 800ab82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ab86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ab8a:	f7f6 f85d 	bl	8000c48 <__aeabi_uldivmod>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	460b      	mov	r3, r1
 800ab92:	4611      	mov	r1, r2
 800ab94:	4b3b      	ldr	r3, [pc, #236]	; (800ac84 <UART_SetConfig+0x2d4>)
 800ab96:	fba3 2301 	umull	r2, r3, r3, r1
 800ab9a:	095b      	lsrs	r3, r3, #5
 800ab9c:	2264      	movs	r2, #100	; 0x64
 800ab9e:	fb02 f303 	mul.w	r3, r2, r3
 800aba2:	1acb      	subs	r3, r1, r3
 800aba4:	00db      	lsls	r3, r3, #3
 800aba6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800abaa:	4b36      	ldr	r3, [pc, #216]	; (800ac84 <UART_SetConfig+0x2d4>)
 800abac:	fba3 2302 	umull	r2, r3, r3, r2
 800abb0:	095b      	lsrs	r3, r3, #5
 800abb2:	005b      	lsls	r3, r3, #1
 800abb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800abb8:	441c      	add	r4, r3
 800abba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abbe:	2200      	movs	r2, #0
 800abc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800abc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800abc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800abcc:	4642      	mov	r2, r8
 800abce:	464b      	mov	r3, r9
 800abd0:	1891      	adds	r1, r2, r2
 800abd2:	63b9      	str	r1, [r7, #56]	; 0x38
 800abd4:	415b      	adcs	r3, r3
 800abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800abdc:	4641      	mov	r1, r8
 800abde:	1851      	adds	r1, r2, r1
 800abe0:	6339      	str	r1, [r7, #48]	; 0x30
 800abe2:	4649      	mov	r1, r9
 800abe4:	414b      	adcs	r3, r1
 800abe6:	637b      	str	r3, [r7, #52]	; 0x34
 800abe8:	f04f 0200 	mov.w	r2, #0
 800abec:	f04f 0300 	mov.w	r3, #0
 800abf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800abf4:	4659      	mov	r1, fp
 800abf6:	00cb      	lsls	r3, r1, #3
 800abf8:	4651      	mov	r1, sl
 800abfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abfe:	4651      	mov	r1, sl
 800ac00:	00ca      	lsls	r2, r1, #3
 800ac02:	4610      	mov	r0, r2
 800ac04:	4619      	mov	r1, r3
 800ac06:	4603      	mov	r3, r0
 800ac08:	4642      	mov	r2, r8
 800ac0a:	189b      	adds	r3, r3, r2
 800ac0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ac10:	464b      	mov	r3, r9
 800ac12:	460a      	mov	r2, r1
 800ac14:	eb42 0303 	adc.w	r3, r2, r3
 800ac18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ac1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ac28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ac2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ac30:	460b      	mov	r3, r1
 800ac32:	18db      	adds	r3, r3, r3
 800ac34:	62bb      	str	r3, [r7, #40]	; 0x28
 800ac36:	4613      	mov	r3, r2
 800ac38:	eb42 0303 	adc.w	r3, r2, r3
 800ac3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ac42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ac46:	f7f5 ffff 	bl	8000c48 <__aeabi_uldivmod>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4b0d      	ldr	r3, [pc, #52]	; (800ac84 <UART_SetConfig+0x2d4>)
 800ac50:	fba3 1302 	umull	r1, r3, r3, r2
 800ac54:	095b      	lsrs	r3, r3, #5
 800ac56:	2164      	movs	r1, #100	; 0x64
 800ac58:	fb01 f303 	mul.w	r3, r1, r3
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	00db      	lsls	r3, r3, #3
 800ac60:	3332      	adds	r3, #50	; 0x32
 800ac62:	4a08      	ldr	r2, [pc, #32]	; (800ac84 <UART_SetConfig+0x2d4>)
 800ac64:	fba2 2303 	umull	r2, r3, r2, r3
 800ac68:	095b      	lsrs	r3, r3, #5
 800ac6a:	f003 0207 	and.w	r2, r3, #7
 800ac6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4422      	add	r2, r4
 800ac76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ac78:	e105      	b.n	800ae86 <UART_SetConfig+0x4d6>
 800ac7a:	bf00      	nop
 800ac7c:	40011000 	.word	0x40011000
 800ac80:	40011400 	.word	0x40011400
 800ac84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ac92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ac9a:	4642      	mov	r2, r8
 800ac9c:	464b      	mov	r3, r9
 800ac9e:	1891      	adds	r1, r2, r2
 800aca0:	6239      	str	r1, [r7, #32]
 800aca2:	415b      	adcs	r3, r3
 800aca4:	627b      	str	r3, [r7, #36]	; 0x24
 800aca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800acaa:	4641      	mov	r1, r8
 800acac:	1854      	adds	r4, r2, r1
 800acae:	4649      	mov	r1, r9
 800acb0:	eb43 0501 	adc.w	r5, r3, r1
 800acb4:	f04f 0200 	mov.w	r2, #0
 800acb8:	f04f 0300 	mov.w	r3, #0
 800acbc:	00eb      	lsls	r3, r5, #3
 800acbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800acc2:	00e2      	lsls	r2, r4, #3
 800acc4:	4614      	mov	r4, r2
 800acc6:	461d      	mov	r5, r3
 800acc8:	4643      	mov	r3, r8
 800acca:	18e3      	adds	r3, r4, r3
 800accc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800acd0:	464b      	mov	r3, r9
 800acd2:	eb45 0303 	adc.w	r3, r5, r3
 800acd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800acda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ace6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800acea:	f04f 0200 	mov.w	r2, #0
 800acee:	f04f 0300 	mov.w	r3, #0
 800acf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800acf6:	4629      	mov	r1, r5
 800acf8:	008b      	lsls	r3, r1, #2
 800acfa:	4621      	mov	r1, r4
 800acfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad00:	4621      	mov	r1, r4
 800ad02:	008a      	lsls	r2, r1, #2
 800ad04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ad08:	f7f5 ff9e 	bl	8000c48 <__aeabi_uldivmod>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	4b60      	ldr	r3, [pc, #384]	; (800ae94 <UART_SetConfig+0x4e4>)
 800ad12:	fba3 2302 	umull	r2, r3, r3, r2
 800ad16:	095b      	lsrs	r3, r3, #5
 800ad18:	011c      	lsls	r4, r3, #4
 800ad1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ad24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ad28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ad2c:	4642      	mov	r2, r8
 800ad2e:	464b      	mov	r3, r9
 800ad30:	1891      	adds	r1, r2, r2
 800ad32:	61b9      	str	r1, [r7, #24]
 800ad34:	415b      	adcs	r3, r3
 800ad36:	61fb      	str	r3, [r7, #28]
 800ad38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad3c:	4641      	mov	r1, r8
 800ad3e:	1851      	adds	r1, r2, r1
 800ad40:	6139      	str	r1, [r7, #16]
 800ad42:	4649      	mov	r1, r9
 800ad44:	414b      	adcs	r3, r1
 800ad46:	617b      	str	r3, [r7, #20]
 800ad48:	f04f 0200 	mov.w	r2, #0
 800ad4c:	f04f 0300 	mov.w	r3, #0
 800ad50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ad54:	4659      	mov	r1, fp
 800ad56:	00cb      	lsls	r3, r1, #3
 800ad58:	4651      	mov	r1, sl
 800ad5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad5e:	4651      	mov	r1, sl
 800ad60:	00ca      	lsls	r2, r1, #3
 800ad62:	4610      	mov	r0, r2
 800ad64:	4619      	mov	r1, r3
 800ad66:	4603      	mov	r3, r0
 800ad68:	4642      	mov	r2, r8
 800ad6a:	189b      	adds	r3, r3, r2
 800ad6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad70:	464b      	mov	r3, r9
 800ad72:	460a      	mov	r2, r1
 800ad74:	eb42 0303 	adc.w	r3, r2, r3
 800ad78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ad7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad86:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ad88:	f04f 0200 	mov.w	r2, #0
 800ad8c:	f04f 0300 	mov.w	r3, #0
 800ad90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ad94:	4649      	mov	r1, r9
 800ad96:	008b      	lsls	r3, r1, #2
 800ad98:	4641      	mov	r1, r8
 800ad9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad9e:	4641      	mov	r1, r8
 800ada0:	008a      	lsls	r2, r1, #2
 800ada2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ada6:	f7f5 ff4f 	bl	8000c48 <__aeabi_uldivmod>
 800adaa:	4602      	mov	r2, r0
 800adac:	460b      	mov	r3, r1
 800adae:	4b39      	ldr	r3, [pc, #228]	; (800ae94 <UART_SetConfig+0x4e4>)
 800adb0:	fba3 1302 	umull	r1, r3, r3, r2
 800adb4:	095b      	lsrs	r3, r3, #5
 800adb6:	2164      	movs	r1, #100	; 0x64
 800adb8:	fb01 f303 	mul.w	r3, r1, r3
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	011b      	lsls	r3, r3, #4
 800adc0:	3332      	adds	r3, #50	; 0x32
 800adc2:	4a34      	ldr	r2, [pc, #208]	; (800ae94 <UART_SetConfig+0x4e4>)
 800adc4:	fba2 2303 	umull	r2, r3, r2, r3
 800adc8:	095b      	lsrs	r3, r3, #5
 800adca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adce:	441c      	add	r4, r3
 800add0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800add4:	2200      	movs	r2, #0
 800add6:	673b      	str	r3, [r7, #112]	; 0x70
 800add8:	677a      	str	r2, [r7, #116]	; 0x74
 800adda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800adde:	4642      	mov	r2, r8
 800ade0:	464b      	mov	r3, r9
 800ade2:	1891      	adds	r1, r2, r2
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	415b      	adcs	r3, r3
 800ade8:	60fb      	str	r3, [r7, #12]
 800adea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800adee:	4641      	mov	r1, r8
 800adf0:	1851      	adds	r1, r2, r1
 800adf2:	6039      	str	r1, [r7, #0]
 800adf4:	4649      	mov	r1, r9
 800adf6:	414b      	adcs	r3, r1
 800adf8:	607b      	str	r3, [r7, #4]
 800adfa:	f04f 0200 	mov.w	r2, #0
 800adfe:	f04f 0300 	mov.w	r3, #0
 800ae02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ae06:	4659      	mov	r1, fp
 800ae08:	00cb      	lsls	r3, r1, #3
 800ae0a:	4651      	mov	r1, sl
 800ae0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae10:	4651      	mov	r1, sl
 800ae12:	00ca      	lsls	r2, r1, #3
 800ae14:	4610      	mov	r0, r2
 800ae16:	4619      	mov	r1, r3
 800ae18:	4603      	mov	r3, r0
 800ae1a:	4642      	mov	r2, r8
 800ae1c:	189b      	adds	r3, r3, r2
 800ae1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae20:	464b      	mov	r3, r9
 800ae22:	460a      	mov	r2, r1
 800ae24:	eb42 0303 	adc.w	r3, r2, r3
 800ae28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	663b      	str	r3, [r7, #96]	; 0x60
 800ae34:	667a      	str	r2, [r7, #100]	; 0x64
 800ae36:	f04f 0200 	mov.w	r2, #0
 800ae3a:	f04f 0300 	mov.w	r3, #0
 800ae3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ae42:	4649      	mov	r1, r9
 800ae44:	008b      	lsls	r3, r1, #2
 800ae46:	4641      	mov	r1, r8
 800ae48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae4c:	4641      	mov	r1, r8
 800ae4e:	008a      	lsls	r2, r1, #2
 800ae50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ae54:	f7f5 fef8 	bl	8000c48 <__aeabi_uldivmod>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4b0d      	ldr	r3, [pc, #52]	; (800ae94 <UART_SetConfig+0x4e4>)
 800ae5e:	fba3 1302 	umull	r1, r3, r3, r2
 800ae62:	095b      	lsrs	r3, r3, #5
 800ae64:	2164      	movs	r1, #100	; 0x64
 800ae66:	fb01 f303 	mul.w	r3, r1, r3
 800ae6a:	1ad3      	subs	r3, r2, r3
 800ae6c:	011b      	lsls	r3, r3, #4
 800ae6e:	3332      	adds	r3, #50	; 0x32
 800ae70:	4a08      	ldr	r2, [pc, #32]	; (800ae94 <UART_SetConfig+0x4e4>)
 800ae72:	fba2 2303 	umull	r2, r3, r2, r3
 800ae76:	095b      	lsrs	r3, r3, #5
 800ae78:	f003 020f 	and.w	r2, r3, #15
 800ae7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4422      	add	r2, r4
 800ae84:	609a      	str	r2, [r3, #8]
}
 800ae86:	bf00      	nop
 800ae88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae92:	bf00      	nop
 800ae94:	51eb851f 	.word	0x51eb851f

0800ae98 <__errno>:
 800ae98:	4b01      	ldr	r3, [pc, #4]	; (800aea0 <__errno+0x8>)
 800ae9a:	6818      	ldr	r0, [r3, #0]
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	2000000c 	.word	0x2000000c

0800aea4 <__libc_init_array>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	4d0d      	ldr	r5, [pc, #52]	; (800aedc <__libc_init_array+0x38>)
 800aea8:	4c0d      	ldr	r4, [pc, #52]	; (800aee0 <__libc_init_array+0x3c>)
 800aeaa:	1b64      	subs	r4, r4, r5
 800aeac:	10a4      	asrs	r4, r4, #2
 800aeae:	2600      	movs	r6, #0
 800aeb0:	42a6      	cmp	r6, r4
 800aeb2:	d109      	bne.n	800aec8 <__libc_init_array+0x24>
 800aeb4:	4d0b      	ldr	r5, [pc, #44]	; (800aee4 <__libc_init_array+0x40>)
 800aeb6:	4c0c      	ldr	r4, [pc, #48]	; (800aee8 <__libc_init_array+0x44>)
 800aeb8:	f002 ffe0 	bl	800de7c <_init>
 800aebc:	1b64      	subs	r4, r4, r5
 800aebe:	10a4      	asrs	r4, r4, #2
 800aec0:	2600      	movs	r6, #0
 800aec2:	42a6      	cmp	r6, r4
 800aec4:	d105      	bne.n	800aed2 <__libc_init_array+0x2e>
 800aec6:	bd70      	pop	{r4, r5, r6, pc}
 800aec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800aecc:	4798      	blx	r3
 800aece:	3601      	adds	r6, #1
 800aed0:	e7ee      	b.n	800aeb0 <__libc_init_array+0xc>
 800aed2:	f855 3b04 	ldr.w	r3, [r5], #4
 800aed6:	4798      	blx	r3
 800aed8:	3601      	adds	r6, #1
 800aeda:	e7f2      	b.n	800aec2 <__libc_init_array+0x1e>
 800aedc:	0800e33c 	.word	0x0800e33c
 800aee0:	0800e33c 	.word	0x0800e33c
 800aee4:	0800e33c 	.word	0x0800e33c
 800aee8:	0800e340 	.word	0x0800e340

0800aeec <memset>:
 800aeec:	4402      	add	r2, r0
 800aeee:	4603      	mov	r3, r0
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d100      	bne.n	800aef6 <memset+0xa>
 800aef4:	4770      	bx	lr
 800aef6:	f803 1b01 	strb.w	r1, [r3], #1
 800aefa:	e7f9      	b.n	800aef0 <memset+0x4>

0800aefc <__cvt>:
 800aefc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af00:	ec55 4b10 	vmov	r4, r5, d0
 800af04:	2d00      	cmp	r5, #0
 800af06:	460e      	mov	r6, r1
 800af08:	4619      	mov	r1, r3
 800af0a:	462b      	mov	r3, r5
 800af0c:	bfbb      	ittet	lt
 800af0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800af12:	461d      	movlt	r5, r3
 800af14:	2300      	movge	r3, #0
 800af16:	232d      	movlt	r3, #45	; 0x2d
 800af18:	700b      	strb	r3, [r1, #0]
 800af1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800af20:	4691      	mov	r9, r2
 800af22:	f023 0820 	bic.w	r8, r3, #32
 800af26:	bfbc      	itt	lt
 800af28:	4622      	movlt	r2, r4
 800af2a:	4614      	movlt	r4, r2
 800af2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af30:	d005      	beq.n	800af3e <__cvt+0x42>
 800af32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af36:	d100      	bne.n	800af3a <__cvt+0x3e>
 800af38:	3601      	adds	r6, #1
 800af3a:	2102      	movs	r1, #2
 800af3c:	e000      	b.n	800af40 <__cvt+0x44>
 800af3e:	2103      	movs	r1, #3
 800af40:	ab03      	add	r3, sp, #12
 800af42:	9301      	str	r3, [sp, #4]
 800af44:	ab02      	add	r3, sp, #8
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	ec45 4b10 	vmov	d0, r4, r5
 800af4c:	4653      	mov	r3, sl
 800af4e:	4632      	mov	r2, r6
 800af50:	f000 fcea 	bl	800b928 <_dtoa_r>
 800af54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af58:	4607      	mov	r7, r0
 800af5a:	d102      	bne.n	800af62 <__cvt+0x66>
 800af5c:	f019 0f01 	tst.w	r9, #1
 800af60:	d022      	beq.n	800afa8 <__cvt+0xac>
 800af62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af66:	eb07 0906 	add.w	r9, r7, r6
 800af6a:	d110      	bne.n	800af8e <__cvt+0x92>
 800af6c:	783b      	ldrb	r3, [r7, #0]
 800af6e:	2b30      	cmp	r3, #48	; 0x30
 800af70:	d10a      	bne.n	800af88 <__cvt+0x8c>
 800af72:	2200      	movs	r2, #0
 800af74:	2300      	movs	r3, #0
 800af76:	4620      	mov	r0, r4
 800af78:	4629      	mov	r1, r5
 800af7a:	f7f5 fda5 	bl	8000ac8 <__aeabi_dcmpeq>
 800af7e:	b918      	cbnz	r0, 800af88 <__cvt+0x8c>
 800af80:	f1c6 0601 	rsb	r6, r6, #1
 800af84:	f8ca 6000 	str.w	r6, [sl]
 800af88:	f8da 3000 	ldr.w	r3, [sl]
 800af8c:	4499      	add	r9, r3
 800af8e:	2200      	movs	r2, #0
 800af90:	2300      	movs	r3, #0
 800af92:	4620      	mov	r0, r4
 800af94:	4629      	mov	r1, r5
 800af96:	f7f5 fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 800af9a:	b108      	cbz	r0, 800afa0 <__cvt+0xa4>
 800af9c:	f8cd 900c 	str.w	r9, [sp, #12]
 800afa0:	2230      	movs	r2, #48	; 0x30
 800afa2:	9b03      	ldr	r3, [sp, #12]
 800afa4:	454b      	cmp	r3, r9
 800afa6:	d307      	bcc.n	800afb8 <__cvt+0xbc>
 800afa8:	9b03      	ldr	r3, [sp, #12]
 800afaa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afac:	1bdb      	subs	r3, r3, r7
 800afae:	4638      	mov	r0, r7
 800afb0:	6013      	str	r3, [r2, #0]
 800afb2:	b004      	add	sp, #16
 800afb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb8:	1c59      	adds	r1, r3, #1
 800afba:	9103      	str	r1, [sp, #12]
 800afbc:	701a      	strb	r2, [r3, #0]
 800afbe:	e7f0      	b.n	800afa2 <__cvt+0xa6>

0800afc0 <__exponent>:
 800afc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afc2:	4603      	mov	r3, r0
 800afc4:	2900      	cmp	r1, #0
 800afc6:	bfb8      	it	lt
 800afc8:	4249      	neglt	r1, r1
 800afca:	f803 2b02 	strb.w	r2, [r3], #2
 800afce:	bfb4      	ite	lt
 800afd0:	222d      	movlt	r2, #45	; 0x2d
 800afd2:	222b      	movge	r2, #43	; 0x2b
 800afd4:	2909      	cmp	r1, #9
 800afd6:	7042      	strb	r2, [r0, #1]
 800afd8:	dd2a      	ble.n	800b030 <__exponent+0x70>
 800afda:	f10d 0407 	add.w	r4, sp, #7
 800afde:	46a4      	mov	ip, r4
 800afe0:	270a      	movs	r7, #10
 800afe2:	46a6      	mov	lr, r4
 800afe4:	460a      	mov	r2, r1
 800afe6:	fb91 f6f7 	sdiv	r6, r1, r7
 800afea:	fb07 1516 	mls	r5, r7, r6, r1
 800afee:	3530      	adds	r5, #48	; 0x30
 800aff0:	2a63      	cmp	r2, #99	; 0x63
 800aff2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800aff6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800affa:	4631      	mov	r1, r6
 800affc:	dcf1      	bgt.n	800afe2 <__exponent+0x22>
 800affe:	3130      	adds	r1, #48	; 0x30
 800b000:	f1ae 0502 	sub.w	r5, lr, #2
 800b004:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b008:	1c44      	adds	r4, r0, #1
 800b00a:	4629      	mov	r1, r5
 800b00c:	4561      	cmp	r1, ip
 800b00e:	d30a      	bcc.n	800b026 <__exponent+0x66>
 800b010:	f10d 0209 	add.w	r2, sp, #9
 800b014:	eba2 020e 	sub.w	r2, r2, lr
 800b018:	4565      	cmp	r5, ip
 800b01a:	bf88      	it	hi
 800b01c:	2200      	movhi	r2, #0
 800b01e:	4413      	add	r3, r2
 800b020:	1a18      	subs	r0, r3, r0
 800b022:	b003      	add	sp, #12
 800b024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b026:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b02a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b02e:	e7ed      	b.n	800b00c <__exponent+0x4c>
 800b030:	2330      	movs	r3, #48	; 0x30
 800b032:	3130      	adds	r1, #48	; 0x30
 800b034:	7083      	strb	r3, [r0, #2]
 800b036:	70c1      	strb	r1, [r0, #3]
 800b038:	1d03      	adds	r3, r0, #4
 800b03a:	e7f1      	b.n	800b020 <__exponent+0x60>

0800b03c <_printf_float>:
 800b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b040:	ed2d 8b02 	vpush	{d8}
 800b044:	b08d      	sub	sp, #52	; 0x34
 800b046:	460c      	mov	r4, r1
 800b048:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b04c:	4616      	mov	r6, r2
 800b04e:	461f      	mov	r7, r3
 800b050:	4605      	mov	r5, r0
 800b052:	f001 fa57 	bl	800c504 <_localeconv_r>
 800b056:	f8d0 a000 	ldr.w	sl, [r0]
 800b05a:	4650      	mov	r0, sl
 800b05c:	f7f5 f8b8 	bl	80001d0 <strlen>
 800b060:	2300      	movs	r3, #0
 800b062:	930a      	str	r3, [sp, #40]	; 0x28
 800b064:	6823      	ldr	r3, [r4, #0]
 800b066:	9305      	str	r3, [sp, #20]
 800b068:	f8d8 3000 	ldr.w	r3, [r8]
 800b06c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b070:	3307      	adds	r3, #7
 800b072:	f023 0307 	bic.w	r3, r3, #7
 800b076:	f103 0208 	add.w	r2, r3, #8
 800b07a:	f8c8 2000 	str.w	r2, [r8]
 800b07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b082:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b086:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b08a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b08e:	9307      	str	r3, [sp, #28]
 800b090:	f8cd 8018 	str.w	r8, [sp, #24]
 800b094:	ee08 0a10 	vmov	s16, r0
 800b098:	4b9f      	ldr	r3, [pc, #636]	; (800b318 <_printf_float+0x2dc>)
 800b09a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b09e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0a2:	f7f5 fd43 	bl	8000b2c <__aeabi_dcmpun>
 800b0a6:	bb88      	cbnz	r0, 800b10c <_printf_float+0xd0>
 800b0a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0ac:	4b9a      	ldr	r3, [pc, #616]	; (800b318 <_printf_float+0x2dc>)
 800b0ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0b2:	f7f5 fd1d 	bl	8000af0 <__aeabi_dcmple>
 800b0b6:	bb48      	cbnz	r0, 800b10c <_printf_float+0xd0>
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	4640      	mov	r0, r8
 800b0be:	4649      	mov	r1, r9
 800b0c0:	f7f5 fd0c 	bl	8000adc <__aeabi_dcmplt>
 800b0c4:	b110      	cbz	r0, 800b0cc <_printf_float+0x90>
 800b0c6:	232d      	movs	r3, #45	; 0x2d
 800b0c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0cc:	4b93      	ldr	r3, [pc, #588]	; (800b31c <_printf_float+0x2e0>)
 800b0ce:	4894      	ldr	r0, [pc, #592]	; (800b320 <_printf_float+0x2e4>)
 800b0d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b0d4:	bf94      	ite	ls
 800b0d6:	4698      	movls	r8, r3
 800b0d8:	4680      	movhi	r8, r0
 800b0da:	2303      	movs	r3, #3
 800b0dc:	6123      	str	r3, [r4, #16]
 800b0de:	9b05      	ldr	r3, [sp, #20]
 800b0e0:	f023 0204 	bic.w	r2, r3, #4
 800b0e4:	6022      	str	r2, [r4, #0]
 800b0e6:	f04f 0900 	mov.w	r9, #0
 800b0ea:	9700      	str	r7, [sp, #0]
 800b0ec:	4633      	mov	r3, r6
 800b0ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800b0f0:	4621      	mov	r1, r4
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	f000 f9d8 	bl	800b4a8 <_printf_common>
 800b0f8:	3001      	adds	r0, #1
 800b0fa:	f040 8090 	bne.w	800b21e <_printf_float+0x1e2>
 800b0fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b102:	b00d      	add	sp, #52	; 0x34
 800b104:	ecbd 8b02 	vpop	{d8}
 800b108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10c:	4642      	mov	r2, r8
 800b10e:	464b      	mov	r3, r9
 800b110:	4640      	mov	r0, r8
 800b112:	4649      	mov	r1, r9
 800b114:	f7f5 fd0a 	bl	8000b2c <__aeabi_dcmpun>
 800b118:	b140      	cbz	r0, 800b12c <_printf_float+0xf0>
 800b11a:	464b      	mov	r3, r9
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	bfbc      	itt	lt
 800b120:	232d      	movlt	r3, #45	; 0x2d
 800b122:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b126:	487f      	ldr	r0, [pc, #508]	; (800b324 <_printf_float+0x2e8>)
 800b128:	4b7f      	ldr	r3, [pc, #508]	; (800b328 <_printf_float+0x2ec>)
 800b12a:	e7d1      	b.n	800b0d0 <_printf_float+0x94>
 800b12c:	6863      	ldr	r3, [r4, #4]
 800b12e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b132:	9206      	str	r2, [sp, #24]
 800b134:	1c5a      	adds	r2, r3, #1
 800b136:	d13f      	bne.n	800b1b8 <_printf_float+0x17c>
 800b138:	2306      	movs	r3, #6
 800b13a:	6063      	str	r3, [r4, #4]
 800b13c:	9b05      	ldr	r3, [sp, #20]
 800b13e:	6861      	ldr	r1, [r4, #4]
 800b140:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b144:	2300      	movs	r3, #0
 800b146:	9303      	str	r3, [sp, #12]
 800b148:	ab0a      	add	r3, sp, #40	; 0x28
 800b14a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b14e:	ab09      	add	r3, sp, #36	; 0x24
 800b150:	ec49 8b10 	vmov	d0, r8, r9
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	6022      	str	r2, [r4, #0]
 800b158:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b15c:	4628      	mov	r0, r5
 800b15e:	f7ff fecd 	bl	800aefc <__cvt>
 800b162:	9b06      	ldr	r3, [sp, #24]
 800b164:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b166:	2b47      	cmp	r3, #71	; 0x47
 800b168:	4680      	mov	r8, r0
 800b16a:	d108      	bne.n	800b17e <_printf_float+0x142>
 800b16c:	1cc8      	adds	r0, r1, #3
 800b16e:	db02      	blt.n	800b176 <_printf_float+0x13a>
 800b170:	6863      	ldr	r3, [r4, #4]
 800b172:	4299      	cmp	r1, r3
 800b174:	dd41      	ble.n	800b1fa <_printf_float+0x1be>
 800b176:	f1ab 0b02 	sub.w	fp, fp, #2
 800b17a:	fa5f fb8b 	uxtb.w	fp, fp
 800b17e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b182:	d820      	bhi.n	800b1c6 <_printf_float+0x18a>
 800b184:	3901      	subs	r1, #1
 800b186:	465a      	mov	r2, fp
 800b188:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b18c:	9109      	str	r1, [sp, #36]	; 0x24
 800b18e:	f7ff ff17 	bl	800afc0 <__exponent>
 800b192:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b194:	1813      	adds	r3, r2, r0
 800b196:	2a01      	cmp	r2, #1
 800b198:	4681      	mov	r9, r0
 800b19a:	6123      	str	r3, [r4, #16]
 800b19c:	dc02      	bgt.n	800b1a4 <_printf_float+0x168>
 800b19e:	6822      	ldr	r2, [r4, #0]
 800b1a0:	07d2      	lsls	r2, r2, #31
 800b1a2:	d501      	bpl.n	800b1a8 <_printf_float+0x16c>
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	6123      	str	r3, [r4, #16]
 800b1a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d09c      	beq.n	800b0ea <_printf_float+0xae>
 800b1b0:	232d      	movs	r3, #45	; 0x2d
 800b1b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1b6:	e798      	b.n	800b0ea <_printf_float+0xae>
 800b1b8:	9a06      	ldr	r2, [sp, #24]
 800b1ba:	2a47      	cmp	r2, #71	; 0x47
 800b1bc:	d1be      	bne.n	800b13c <_printf_float+0x100>
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d1bc      	bne.n	800b13c <_printf_float+0x100>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e7b9      	b.n	800b13a <_printf_float+0xfe>
 800b1c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b1ca:	d118      	bne.n	800b1fe <_printf_float+0x1c2>
 800b1cc:	2900      	cmp	r1, #0
 800b1ce:	6863      	ldr	r3, [r4, #4]
 800b1d0:	dd0b      	ble.n	800b1ea <_printf_float+0x1ae>
 800b1d2:	6121      	str	r1, [r4, #16]
 800b1d4:	b913      	cbnz	r3, 800b1dc <_printf_float+0x1a0>
 800b1d6:	6822      	ldr	r2, [r4, #0]
 800b1d8:	07d0      	lsls	r0, r2, #31
 800b1da:	d502      	bpl.n	800b1e2 <_printf_float+0x1a6>
 800b1dc:	3301      	adds	r3, #1
 800b1de:	440b      	add	r3, r1
 800b1e0:	6123      	str	r3, [r4, #16]
 800b1e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1e4:	f04f 0900 	mov.w	r9, #0
 800b1e8:	e7de      	b.n	800b1a8 <_printf_float+0x16c>
 800b1ea:	b913      	cbnz	r3, 800b1f2 <_printf_float+0x1b6>
 800b1ec:	6822      	ldr	r2, [r4, #0]
 800b1ee:	07d2      	lsls	r2, r2, #31
 800b1f0:	d501      	bpl.n	800b1f6 <_printf_float+0x1ba>
 800b1f2:	3302      	adds	r3, #2
 800b1f4:	e7f4      	b.n	800b1e0 <_printf_float+0x1a4>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e7f2      	b.n	800b1e0 <_printf_float+0x1a4>
 800b1fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b200:	4299      	cmp	r1, r3
 800b202:	db05      	blt.n	800b210 <_printf_float+0x1d4>
 800b204:	6823      	ldr	r3, [r4, #0]
 800b206:	6121      	str	r1, [r4, #16]
 800b208:	07d8      	lsls	r0, r3, #31
 800b20a:	d5ea      	bpl.n	800b1e2 <_printf_float+0x1a6>
 800b20c:	1c4b      	adds	r3, r1, #1
 800b20e:	e7e7      	b.n	800b1e0 <_printf_float+0x1a4>
 800b210:	2900      	cmp	r1, #0
 800b212:	bfd4      	ite	le
 800b214:	f1c1 0202 	rsble	r2, r1, #2
 800b218:	2201      	movgt	r2, #1
 800b21a:	4413      	add	r3, r2
 800b21c:	e7e0      	b.n	800b1e0 <_printf_float+0x1a4>
 800b21e:	6823      	ldr	r3, [r4, #0]
 800b220:	055a      	lsls	r2, r3, #21
 800b222:	d407      	bmi.n	800b234 <_printf_float+0x1f8>
 800b224:	6923      	ldr	r3, [r4, #16]
 800b226:	4642      	mov	r2, r8
 800b228:	4631      	mov	r1, r6
 800b22a:	4628      	mov	r0, r5
 800b22c:	47b8      	blx	r7
 800b22e:	3001      	adds	r0, #1
 800b230:	d12c      	bne.n	800b28c <_printf_float+0x250>
 800b232:	e764      	b.n	800b0fe <_printf_float+0xc2>
 800b234:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b238:	f240 80e0 	bls.w	800b3fc <_printf_float+0x3c0>
 800b23c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b240:	2200      	movs	r2, #0
 800b242:	2300      	movs	r3, #0
 800b244:	f7f5 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d034      	beq.n	800b2b6 <_printf_float+0x27a>
 800b24c:	4a37      	ldr	r2, [pc, #220]	; (800b32c <_printf_float+0x2f0>)
 800b24e:	2301      	movs	r3, #1
 800b250:	4631      	mov	r1, r6
 800b252:	4628      	mov	r0, r5
 800b254:	47b8      	blx	r7
 800b256:	3001      	adds	r0, #1
 800b258:	f43f af51 	beq.w	800b0fe <_printf_float+0xc2>
 800b25c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b260:	429a      	cmp	r2, r3
 800b262:	db02      	blt.n	800b26a <_printf_float+0x22e>
 800b264:	6823      	ldr	r3, [r4, #0]
 800b266:	07d8      	lsls	r0, r3, #31
 800b268:	d510      	bpl.n	800b28c <_printf_float+0x250>
 800b26a:	ee18 3a10 	vmov	r3, s16
 800b26e:	4652      	mov	r2, sl
 800b270:	4631      	mov	r1, r6
 800b272:	4628      	mov	r0, r5
 800b274:	47b8      	blx	r7
 800b276:	3001      	adds	r0, #1
 800b278:	f43f af41 	beq.w	800b0fe <_printf_float+0xc2>
 800b27c:	f04f 0800 	mov.w	r8, #0
 800b280:	f104 091a 	add.w	r9, r4, #26
 800b284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b286:	3b01      	subs	r3, #1
 800b288:	4543      	cmp	r3, r8
 800b28a:	dc09      	bgt.n	800b2a0 <_printf_float+0x264>
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	079b      	lsls	r3, r3, #30
 800b290:	f100 8105 	bmi.w	800b49e <_printf_float+0x462>
 800b294:	68e0      	ldr	r0, [r4, #12]
 800b296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b298:	4298      	cmp	r0, r3
 800b29a:	bfb8      	it	lt
 800b29c:	4618      	movlt	r0, r3
 800b29e:	e730      	b.n	800b102 <_printf_float+0xc6>
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	464a      	mov	r2, r9
 800b2a4:	4631      	mov	r1, r6
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	47b8      	blx	r7
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	f43f af27 	beq.w	800b0fe <_printf_float+0xc2>
 800b2b0:	f108 0801 	add.w	r8, r8, #1
 800b2b4:	e7e6      	b.n	800b284 <_printf_float+0x248>
 800b2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	dc39      	bgt.n	800b330 <_printf_float+0x2f4>
 800b2bc:	4a1b      	ldr	r2, [pc, #108]	; (800b32c <_printf_float+0x2f0>)
 800b2be:	2301      	movs	r3, #1
 800b2c0:	4631      	mov	r1, r6
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	47b8      	blx	r7
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	f43f af19 	beq.w	800b0fe <_printf_float+0xc2>
 800b2cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	d102      	bne.n	800b2da <_printf_float+0x29e>
 800b2d4:	6823      	ldr	r3, [r4, #0]
 800b2d6:	07d9      	lsls	r1, r3, #31
 800b2d8:	d5d8      	bpl.n	800b28c <_printf_float+0x250>
 800b2da:	ee18 3a10 	vmov	r3, s16
 800b2de:	4652      	mov	r2, sl
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	47b8      	blx	r7
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	f43f af09 	beq.w	800b0fe <_printf_float+0xc2>
 800b2ec:	f04f 0900 	mov.w	r9, #0
 800b2f0:	f104 0a1a 	add.w	sl, r4, #26
 800b2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f6:	425b      	negs	r3, r3
 800b2f8:	454b      	cmp	r3, r9
 800b2fa:	dc01      	bgt.n	800b300 <_printf_float+0x2c4>
 800b2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2fe:	e792      	b.n	800b226 <_printf_float+0x1ea>
 800b300:	2301      	movs	r3, #1
 800b302:	4652      	mov	r2, sl
 800b304:	4631      	mov	r1, r6
 800b306:	4628      	mov	r0, r5
 800b308:	47b8      	blx	r7
 800b30a:	3001      	adds	r0, #1
 800b30c:	f43f aef7 	beq.w	800b0fe <_printf_float+0xc2>
 800b310:	f109 0901 	add.w	r9, r9, #1
 800b314:	e7ee      	b.n	800b2f4 <_printf_float+0x2b8>
 800b316:	bf00      	nop
 800b318:	7fefffff 	.word	0x7fefffff
 800b31c:	0800df60 	.word	0x0800df60
 800b320:	0800df64 	.word	0x0800df64
 800b324:	0800df6c 	.word	0x0800df6c
 800b328:	0800df68 	.word	0x0800df68
 800b32c:	0800df70 	.word	0x0800df70
 800b330:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b334:	429a      	cmp	r2, r3
 800b336:	bfa8      	it	ge
 800b338:	461a      	movge	r2, r3
 800b33a:	2a00      	cmp	r2, #0
 800b33c:	4691      	mov	r9, r2
 800b33e:	dc37      	bgt.n	800b3b0 <_printf_float+0x374>
 800b340:	f04f 0b00 	mov.w	fp, #0
 800b344:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b348:	f104 021a 	add.w	r2, r4, #26
 800b34c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b34e:	9305      	str	r3, [sp, #20]
 800b350:	eba3 0309 	sub.w	r3, r3, r9
 800b354:	455b      	cmp	r3, fp
 800b356:	dc33      	bgt.n	800b3c0 <_printf_float+0x384>
 800b358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b35c:	429a      	cmp	r2, r3
 800b35e:	db3b      	blt.n	800b3d8 <_printf_float+0x39c>
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	07da      	lsls	r2, r3, #31
 800b364:	d438      	bmi.n	800b3d8 <_printf_float+0x39c>
 800b366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b368:	9a05      	ldr	r2, [sp, #20]
 800b36a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b36c:	1a9a      	subs	r2, r3, r2
 800b36e:	eba3 0901 	sub.w	r9, r3, r1
 800b372:	4591      	cmp	r9, r2
 800b374:	bfa8      	it	ge
 800b376:	4691      	movge	r9, r2
 800b378:	f1b9 0f00 	cmp.w	r9, #0
 800b37c:	dc35      	bgt.n	800b3ea <_printf_float+0x3ae>
 800b37e:	f04f 0800 	mov.w	r8, #0
 800b382:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b386:	f104 0a1a 	add.w	sl, r4, #26
 800b38a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b38e:	1a9b      	subs	r3, r3, r2
 800b390:	eba3 0309 	sub.w	r3, r3, r9
 800b394:	4543      	cmp	r3, r8
 800b396:	f77f af79 	ble.w	800b28c <_printf_float+0x250>
 800b39a:	2301      	movs	r3, #1
 800b39c:	4652      	mov	r2, sl
 800b39e:	4631      	mov	r1, r6
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	47b8      	blx	r7
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	f43f aeaa 	beq.w	800b0fe <_printf_float+0xc2>
 800b3aa:	f108 0801 	add.w	r8, r8, #1
 800b3ae:	e7ec      	b.n	800b38a <_printf_float+0x34e>
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	4642      	mov	r2, r8
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	47b8      	blx	r7
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	d1c0      	bne.n	800b340 <_printf_float+0x304>
 800b3be:	e69e      	b.n	800b0fe <_printf_float+0xc2>
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	9205      	str	r2, [sp, #20]
 800b3c8:	47b8      	blx	r7
 800b3ca:	3001      	adds	r0, #1
 800b3cc:	f43f ae97 	beq.w	800b0fe <_printf_float+0xc2>
 800b3d0:	9a05      	ldr	r2, [sp, #20]
 800b3d2:	f10b 0b01 	add.w	fp, fp, #1
 800b3d6:	e7b9      	b.n	800b34c <_printf_float+0x310>
 800b3d8:	ee18 3a10 	vmov	r3, s16
 800b3dc:	4652      	mov	r2, sl
 800b3de:	4631      	mov	r1, r6
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	47b8      	blx	r7
 800b3e4:	3001      	adds	r0, #1
 800b3e6:	d1be      	bne.n	800b366 <_printf_float+0x32a>
 800b3e8:	e689      	b.n	800b0fe <_printf_float+0xc2>
 800b3ea:	9a05      	ldr	r2, [sp, #20]
 800b3ec:	464b      	mov	r3, r9
 800b3ee:	4442      	add	r2, r8
 800b3f0:	4631      	mov	r1, r6
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	47b8      	blx	r7
 800b3f6:	3001      	adds	r0, #1
 800b3f8:	d1c1      	bne.n	800b37e <_printf_float+0x342>
 800b3fa:	e680      	b.n	800b0fe <_printf_float+0xc2>
 800b3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3fe:	2a01      	cmp	r2, #1
 800b400:	dc01      	bgt.n	800b406 <_printf_float+0x3ca>
 800b402:	07db      	lsls	r3, r3, #31
 800b404:	d538      	bpl.n	800b478 <_printf_float+0x43c>
 800b406:	2301      	movs	r3, #1
 800b408:	4642      	mov	r2, r8
 800b40a:	4631      	mov	r1, r6
 800b40c:	4628      	mov	r0, r5
 800b40e:	47b8      	blx	r7
 800b410:	3001      	adds	r0, #1
 800b412:	f43f ae74 	beq.w	800b0fe <_printf_float+0xc2>
 800b416:	ee18 3a10 	vmov	r3, s16
 800b41a:	4652      	mov	r2, sl
 800b41c:	4631      	mov	r1, r6
 800b41e:	4628      	mov	r0, r5
 800b420:	47b8      	blx	r7
 800b422:	3001      	adds	r0, #1
 800b424:	f43f ae6b 	beq.w	800b0fe <_printf_float+0xc2>
 800b428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b42c:	2200      	movs	r2, #0
 800b42e:	2300      	movs	r3, #0
 800b430:	f7f5 fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b434:	b9d8      	cbnz	r0, 800b46e <_printf_float+0x432>
 800b436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b438:	f108 0201 	add.w	r2, r8, #1
 800b43c:	3b01      	subs	r3, #1
 800b43e:	4631      	mov	r1, r6
 800b440:	4628      	mov	r0, r5
 800b442:	47b8      	blx	r7
 800b444:	3001      	adds	r0, #1
 800b446:	d10e      	bne.n	800b466 <_printf_float+0x42a>
 800b448:	e659      	b.n	800b0fe <_printf_float+0xc2>
 800b44a:	2301      	movs	r3, #1
 800b44c:	4652      	mov	r2, sl
 800b44e:	4631      	mov	r1, r6
 800b450:	4628      	mov	r0, r5
 800b452:	47b8      	blx	r7
 800b454:	3001      	adds	r0, #1
 800b456:	f43f ae52 	beq.w	800b0fe <_printf_float+0xc2>
 800b45a:	f108 0801 	add.w	r8, r8, #1
 800b45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b460:	3b01      	subs	r3, #1
 800b462:	4543      	cmp	r3, r8
 800b464:	dcf1      	bgt.n	800b44a <_printf_float+0x40e>
 800b466:	464b      	mov	r3, r9
 800b468:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b46c:	e6dc      	b.n	800b228 <_printf_float+0x1ec>
 800b46e:	f04f 0800 	mov.w	r8, #0
 800b472:	f104 0a1a 	add.w	sl, r4, #26
 800b476:	e7f2      	b.n	800b45e <_printf_float+0x422>
 800b478:	2301      	movs	r3, #1
 800b47a:	4642      	mov	r2, r8
 800b47c:	e7df      	b.n	800b43e <_printf_float+0x402>
 800b47e:	2301      	movs	r3, #1
 800b480:	464a      	mov	r2, r9
 800b482:	4631      	mov	r1, r6
 800b484:	4628      	mov	r0, r5
 800b486:	47b8      	blx	r7
 800b488:	3001      	adds	r0, #1
 800b48a:	f43f ae38 	beq.w	800b0fe <_printf_float+0xc2>
 800b48e:	f108 0801 	add.w	r8, r8, #1
 800b492:	68e3      	ldr	r3, [r4, #12]
 800b494:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b496:	1a5b      	subs	r3, r3, r1
 800b498:	4543      	cmp	r3, r8
 800b49a:	dcf0      	bgt.n	800b47e <_printf_float+0x442>
 800b49c:	e6fa      	b.n	800b294 <_printf_float+0x258>
 800b49e:	f04f 0800 	mov.w	r8, #0
 800b4a2:	f104 0919 	add.w	r9, r4, #25
 800b4a6:	e7f4      	b.n	800b492 <_printf_float+0x456>

0800b4a8 <_printf_common>:
 800b4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4ac:	4616      	mov	r6, r2
 800b4ae:	4699      	mov	r9, r3
 800b4b0:	688a      	ldr	r2, [r1, #8]
 800b4b2:	690b      	ldr	r3, [r1, #16]
 800b4b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	bfb8      	it	lt
 800b4bc:	4613      	movlt	r3, r2
 800b4be:	6033      	str	r3, [r6, #0]
 800b4c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4c4:	4607      	mov	r7, r0
 800b4c6:	460c      	mov	r4, r1
 800b4c8:	b10a      	cbz	r2, 800b4ce <_printf_common+0x26>
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	6033      	str	r3, [r6, #0]
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	0699      	lsls	r1, r3, #26
 800b4d2:	bf42      	ittt	mi
 800b4d4:	6833      	ldrmi	r3, [r6, #0]
 800b4d6:	3302      	addmi	r3, #2
 800b4d8:	6033      	strmi	r3, [r6, #0]
 800b4da:	6825      	ldr	r5, [r4, #0]
 800b4dc:	f015 0506 	ands.w	r5, r5, #6
 800b4e0:	d106      	bne.n	800b4f0 <_printf_common+0x48>
 800b4e2:	f104 0a19 	add.w	sl, r4, #25
 800b4e6:	68e3      	ldr	r3, [r4, #12]
 800b4e8:	6832      	ldr	r2, [r6, #0]
 800b4ea:	1a9b      	subs	r3, r3, r2
 800b4ec:	42ab      	cmp	r3, r5
 800b4ee:	dc26      	bgt.n	800b53e <_printf_common+0x96>
 800b4f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4f4:	1e13      	subs	r3, r2, #0
 800b4f6:	6822      	ldr	r2, [r4, #0]
 800b4f8:	bf18      	it	ne
 800b4fa:	2301      	movne	r3, #1
 800b4fc:	0692      	lsls	r2, r2, #26
 800b4fe:	d42b      	bmi.n	800b558 <_printf_common+0xb0>
 800b500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b504:	4649      	mov	r1, r9
 800b506:	4638      	mov	r0, r7
 800b508:	47c0      	blx	r8
 800b50a:	3001      	adds	r0, #1
 800b50c:	d01e      	beq.n	800b54c <_printf_common+0xa4>
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	68e5      	ldr	r5, [r4, #12]
 800b512:	6832      	ldr	r2, [r6, #0]
 800b514:	f003 0306 	and.w	r3, r3, #6
 800b518:	2b04      	cmp	r3, #4
 800b51a:	bf08      	it	eq
 800b51c:	1aad      	subeq	r5, r5, r2
 800b51e:	68a3      	ldr	r3, [r4, #8]
 800b520:	6922      	ldr	r2, [r4, #16]
 800b522:	bf0c      	ite	eq
 800b524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b528:	2500      	movne	r5, #0
 800b52a:	4293      	cmp	r3, r2
 800b52c:	bfc4      	itt	gt
 800b52e:	1a9b      	subgt	r3, r3, r2
 800b530:	18ed      	addgt	r5, r5, r3
 800b532:	2600      	movs	r6, #0
 800b534:	341a      	adds	r4, #26
 800b536:	42b5      	cmp	r5, r6
 800b538:	d11a      	bne.n	800b570 <_printf_common+0xc8>
 800b53a:	2000      	movs	r0, #0
 800b53c:	e008      	b.n	800b550 <_printf_common+0xa8>
 800b53e:	2301      	movs	r3, #1
 800b540:	4652      	mov	r2, sl
 800b542:	4649      	mov	r1, r9
 800b544:	4638      	mov	r0, r7
 800b546:	47c0      	blx	r8
 800b548:	3001      	adds	r0, #1
 800b54a:	d103      	bne.n	800b554 <_printf_common+0xac>
 800b54c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b554:	3501      	adds	r5, #1
 800b556:	e7c6      	b.n	800b4e6 <_printf_common+0x3e>
 800b558:	18e1      	adds	r1, r4, r3
 800b55a:	1c5a      	adds	r2, r3, #1
 800b55c:	2030      	movs	r0, #48	; 0x30
 800b55e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b562:	4422      	add	r2, r4
 800b564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b56c:	3302      	adds	r3, #2
 800b56e:	e7c7      	b.n	800b500 <_printf_common+0x58>
 800b570:	2301      	movs	r3, #1
 800b572:	4622      	mov	r2, r4
 800b574:	4649      	mov	r1, r9
 800b576:	4638      	mov	r0, r7
 800b578:	47c0      	blx	r8
 800b57a:	3001      	adds	r0, #1
 800b57c:	d0e6      	beq.n	800b54c <_printf_common+0xa4>
 800b57e:	3601      	adds	r6, #1
 800b580:	e7d9      	b.n	800b536 <_printf_common+0x8e>
	...

0800b584 <_printf_i>:
 800b584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b588:	7e0f      	ldrb	r7, [r1, #24]
 800b58a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b58c:	2f78      	cmp	r7, #120	; 0x78
 800b58e:	4691      	mov	r9, r2
 800b590:	4680      	mov	r8, r0
 800b592:	460c      	mov	r4, r1
 800b594:	469a      	mov	sl, r3
 800b596:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b59a:	d807      	bhi.n	800b5ac <_printf_i+0x28>
 800b59c:	2f62      	cmp	r7, #98	; 0x62
 800b59e:	d80a      	bhi.n	800b5b6 <_printf_i+0x32>
 800b5a0:	2f00      	cmp	r7, #0
 800b5a2:	f000 80d8 	beq.w	800b756 <_printf_i+0x1d2>
 800b5a6:	2f58      	cmp	r7, #88	; 0x58
 800b5a8:	f000 80a3 	beq.w	800b6f2 <_printf_i+0x16e>
 800b5ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5b4:	e03a      	b.n	800b62c <_printf_i+0xa8>
 800b5b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5ba:	2b15      	cmp	r3, #21
 800b5bc:	d8f6      	bhi.n	800b5ac <_printf_i+0x28>
 800b5be:	a101      	add	r1, pc, #4	; (adr r1, 800b5c4 <_printf_i+0x40>)
 800b5c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5c4:	0800b61d 	.word	0x0800b61d
 800b5c8:	0800b631 	.word	0x0800b631
 800b5cc:	0800b5ad 	.word	0x0800b5ad
 800b5d0:	0800b5ad 	.word	0x0800b5ad
 800b5d4:	0800b5ad 	.word	0x0800b5ad
 800b5d8:	0800b5ad 	.word	0x0800b5ad
 800b5dc:	0800b631 	.word	0x0800b631
 800b5e0:	0800b5ad 	.word	0x0800b5ad
 800b5e4:	0800b5ad 	.word	0x0800b5ad
 800b5e8:	0800b5ad 	.word	0x0800b5ad
 800b5ec:	0800b5ad 	.word	0x0800b5ad
 800b5f0:	0800b73d 	.word	0x0800b73d
 800b5f4:	0800b661 	.word	0x0800b661
 800b5f8:	0800b71f 	.word	0x0800b71f
 800b5fc:	0800b5ad 	.word	0x0800b5ad
 800b600:	0800b5ad 	.word	0x0800b5ad
 800b604:	0800b75f 	.word	0x0800b75f
 800b608:	0800b5ad 	.word	0x0800b5ad
 800b60c:	0800b661 	.word	0x0800b661
 800b610:	0800b5ad 	.word	0x0800b5ad
 800b614:	0800b5ad 	.word	0x0800b5ad
 800b618:	0800b727 	.word	0x0800b727
 800b61c:	682b      	ldr	r3, [r5, #0]
 800b61e:	1d1a      	adds	r2, r3, #4
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	602a      	str	r2, [r5, #0]
 800b624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b62c:	2301      	movs	r3, #1
 800b62e:	e0a3      	b.n	800b778 <_printf_i+0x1f4>
 800b630:	6820      	ldr	r0, [r4, #0]
 800b632:	6829      	ldr	r1, [r5, #0]
 800b634:	0606      	lsls	r6, r0, #24
 800b636:	f101 0304 	add.w	r3, r1, #4
 800b63a:	d50a      	bpl.n	800b652 <_printf_i+0xce>
 800b63c:	680e      	ldr	r6, [r1, #0]
 800b63e:	602b      	str	r3, [r5, #0]
 800b640:	2e00      	cmp	r6, #0
 800b642:	da03      	bge.n	800b64c <_printf_i+0xc8>
 800b644:	232d      	movs	r3, #45	; 0x2d
 800b646:	4276      	negs	r6, r6
 800b648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b64c:	485e      	ldr	r0, [pc, #376]	; (800b7c8 <_printf_i+0x244>)
 800b64e:	230a      	movs	r3, #10
 800b650:	e019      	b.n	800b686 <_printf_i+0x102>
 800b652:	680e      	ldr	r6, [r1, #0]
 800b654:	602b      	str	r3, [r5, #0]
 800b656:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b65a:	bf18      	it	ne
 800b65c:	b236      	sxthne	r6, r6
 800b65e:	e7ef      	b.n	800b640 <_printf_i+0xbc>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	6820      	ldr	r0, [r4, #0]
 800b664:	1d19      	adds	r1, r3, #4
 800b666:	6029      	str	r1, [r5, #0]
 800b668:	0601      	lsls	r1, r0, #24
 800b66a:	d501      	bpl.n	800b670 <_printf_i+0xec>
 800b66c:	681e      	ldr	r6, [r3, #0]
 800b66e:	e002      	b.n	800b676 <_printf_i+0xf2>
 800b670:	0646      	lsls	r6, r0, #25
 800b672:	d5fb      	bpl.n	800b66c <_printf_i+0xe8>
 800b674:	881e      	ldrh	r6, [r3, #0]
 800b676:	4854      	ldr	r0, [pc, #336]	; (800b7c8 <_printf_i+0x244>)
 800b678:	2f6f      	cmp	r7, #111	; 0x6f
 800b67a:	bf0c      	ite	eq
 800b67c:	2308      	moveq	r3, #8
 800b67e:	230a      	movne	r3, #10
 800b680:	2100      	movs	r1, #0
 800b682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b686:	6865      	ldr	r5, [r4, #4]
 800b688:	60a5      	str	r5, [r4, #8]
 800b68a:	2d00      	cmp	r5, #0
 800b68c:	bfa2      	ittt	ge
 800b68e:	6821      	ldrge	r1, [r4, #0]
 800b690:	f021 0104 	bicge.w	r1, r1, #4
 800b694:	6021      	strge	r1, [r4, #0]
 800b696:	b90e      	cbnz	r6, 800b69c <_printf_i+0x118>
 800b698:	2d00      	cmp	r5, #0
 800b69a:	d04d      	beq.n	800b738 <_printf_i+0x1b4>
 800b69c:	4615      	mov	r5, r2
 800b69e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b6a2:	fb03 6711 	mls	r7, r3, r1, r6
 800b6a6:	5dc7      	ldrb	r7, [r0, r7]
 800b6a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b6ac:	4637      	mov	r7, r6
 800b6ae:	42bb      	cmp	r3, r7
 800b6b0:	460e      	mov	r6, r1
 800b6b2:	d9f4      	bls.n	800b69e <_printf_i+0x11a>
 800b6b4:	2b08      	cmp	r3, #8
 800b6b6:	d10b      	bne.n	800b6d0 <_printf_i+0x14c>
 800b6b8:	6823      	ldr	r3, [r4, #0]
 800b6ba:	07de      	lsls	r6, r3, #31
 800b6bc:	d508      	bpl.n	800b6d0 <_printf_i+0x14c>
 800b6be:	6923      	ldr	r3, [r4, #16]
 800b6c0:	6861      	ldr	r1, [r4, #4]
 800b6c2:	4299      	cmp	r1, r3
 800b6c4:	bfde      	ittt	le
 800b6c6:	2330      	movle	r3, #48	; 0x30
 800b6c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b6d0:	1b52      	subs	r2, r2, r5
 800b6d2:	6122      	str	r2, [r4, #16]
 800b6d4:	f8cd a000 	str.w	sl, [sp]
 800b6d8:	464b      	mov	r3, r9
 800b6da:	aa03      	add	r2, sp, #12
 800b6dc:	4621      	mov	r1, r4
 800b6de:	4640      	mov	r0, r8
 800b6e0:	f7ff fee2 	bl	800b4a8 <_printf_common>
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	d14c      	bne.n	800b782 <_printf_i+0x1fe>
 800b6e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6ec:	b004      	add	sp, #16
 800b6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f2:	4835      	ldr	r0, [pc, #212]	; (800b7c8 <_printf_i+0x244>)
 800b6f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b6f8:	6829      	ldr	r1, [r5, #0]
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b700:	6029      	str	r1, [r5, #0]
 800b702:	061d      	lsls	r5, r3, #24
 800b704:	d514      	bpl.n	800b730 <_printf_i+0x1ac>
 800b706:	07df      	lsls	r7, r3, #31
 800b708:	bf44      	itt	mi
 800b70a:	f043 0320 	orrmi.w	r3, r3, #32
 800b70e:	6023      	strmi	r3, [r4, #0]
 800b710:	b91e      	cbnz	r6, 800b71a <_printf_i+0x196>
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	f023 0320 	bic.w	r3, r3, #32
 800b718:	6023      	str	r3, [r4, #0]
 800b71a:	2310      	movs	r3, #16
 800b71c:	e7b0      	b.n	800b680 <_printf_i+0xfc>
 800b71e:	6823      	ldr	r3, [r4, #0]
 800b720:	f043 0320 	orr.w	r3, r3, #32
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	2378      	movs	r3, #120	; 0x78
 800b728:	4828      	ldr	r0, [pc, #160]	; (800b7cc <_printf_i+0x248>)
 800b72a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b72e:	e7e3      	b.n	800b6f8 <_printf_i+0x174>
 800b730:	0659      	lsls	r1, r3, #25
 800b732:	bf48      	it	mi
 800b734:	b2b6      	uxthmi	r6, r6
 800b736:	e7e6      	b.n	800b706 <_printf_i+0x182>
 800b738:	4615      	mov	r5, r2
 800b73a:	e7bb      	b.n	800b6b4 <_printf_i+0x130>
 800b73c:	682b      	ldr	r3, [r5, #0]
 800b73e:	6826      	ldr	r6, [r4, #0]
 800b740:	6961      	ldr	r1, [r4, #20]
 800b742:	1d18      	adds	r0, r3, #4
 800b744:	6028      	str	r0, [r5, #0]
 800b746:	0635      	lsls	r5, r6, #24
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	d501      	bpl.n	800b750 <_printf_i+0x1cc>
 800b74c:	6019      	str	r1, [r3, #0]
 800b74e:	e002      	b.n	800b756 <_printf_i+0x1d2>
 800b750:	0670      	lsls	r0, r6, #25
 800b752:	d5fb      	bpl.n	800b74c <_printf_i+0x1c8>
 800b754:	8019      	strh	r1, [r3, #0]
 800b756:	2300      	movs	r3, #0
 800b758:	6123      	str	r3, [r4, #16]
 800b75a:	4615      	mov	r5, r2
 800b75c:	e7ba      	b.n	800b6d4 <_printf_i+0x150>
 800b75e:	682b      	ldr	r3, [r5, #0]
 800b760:	1d1a      	adds	r2, r3, #4
 800b762:	602a      	str	r2, [r5, #0]
 800b764:	681d      	ldr	r5, [r3, #0]
 800b766:	6862      	ldr	r2, [r4, #4]
 800b768:	2100      	movs	r1, #0
 800b76a:	4628      	mov	r0, r5
 800b76c:	f7f4 fd38 	bl	80001e0 <memchr>
 800b770:	b108      	cbz	r0, 800b776 <_printf_i+0x1f2>
 800b772:	1b40      	subs	r0, r0, r5
 800b774:	6060      	str	r0, [r4, #4]
 800b776:	6863      	ldr	r3, [r4, #4]
 800b778:	6123      	str	r3, [r4, #16]
 800b77a:	2300      	movs	r3, #0
 800b77c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b780:	e7a8      	b.n	800b6d4 <_printf_i+0x150>
 800b782:	6923      	ldr	r3, [r4, #16]
 800b784:	462a      	mov	r2, r5
 800b786:	4649      	mov	r1, r9
 800b788:	4640      	mov	r0, r8
 800b78a:	47d0      	blx	sl
 800b78c:	3001      	adds	r0, #1
 800b78e:	d0ab      	beq.n	800b6e8 <_printf_i+0x164>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	079b      	lsls	r3, r3, #30
 800b794:	d413      	bmi.n	800b7be <_printf_i+0x23a>
 800b796:	68e0      	ldr	r0, [r4, #12]
 800b798:	9b03      	ldr	r3, [sp, #12]
 800b79a:	4298      	cmp	r0, r3
 800b79c:	bfb8      	it	lt
 800b79e:	4618      	movlt	r0, r3
 800b7a0:	e7a4      	b.n	800b6ec <_printf_i+0x168>
 800b7a2:	2301      	movs	r3, #1
 800b7a4:	4632      	mov	r2, r6
 800b7a6:	4649      	mov	r1, r9
 800b7a8:	4640      	mov	r0, r8
 800b7aa:	47d0      	blx	sl
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	d09b      	beq.n	800b6e8 <_printf_i+0x164>
 800b7b0:	3501      	adds	r5, #1
 800b7b2:	68e3      	ldr	r3, [r4, #12]
 800b7b4:	9903      	ldr	r1, [sp, #12]
 800b7b6:	1a5b      	subs	r3, r3, r1
 800b7b8:	42ab      	cmp	r3, r5
 800b7ba:	dcf2      	bgt.n	800b7a2 <_printf_i+0x21e>
 800b7bc:	e7eb      	b.n	800b796 <_printf_i+0x212>
 800b7be:	2500      	movs	r5, #0
 800b7c0:	f104 0619 	add.w	r6, r4, #25
 800b7c4:	e7f5      	b.n	800b7b2 <_printf_i+0x22e>
 800b7c6:	bf00      	nop
 800b7c8:	0800df72 	.word	0x0800df72
 800b7cc:	0800df83 	.word	0x0800df83

0800b7d0 <siprintf>:
 800b7d0:	b40e      	push	{r1, r2, r3}
 800b7d2:	b500      	push	{lr}
 800b7d4:	b09c      	sub	sp, #112	; 0x70
 800b7d6:	ab1d      	add	r3, sp, #116	; 0x74
 800b7d8:	9002      	str	r0, [sp, #8]
 800b7da:	9006      	str	r0, [sp, #24]
 800b7dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7e0:	4809      	ldr	r0, [pc, #36]	; (800b808 <siprintf+0x38>)
 800b7e2:	9107      	str	r1, [sp, #28]
 800b7e4:	9104      	str	r1, [sp, #16]
 800b7e6:	4909      	ldr	r1, [pc, #36]	; (800b80c <siprintf+0x3c>)
 800b7e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ec:	9105      	str	r1, [sp, #20]
 800b7ee:	6800      	ldr	r0, [r0, #0]
 800b7f0:	9301      	str	r3, [sp, #4]
 800b7f2:	a902      	add	r1, sp, #8
 800b7f4:	f001 fb76 	bl	800cee4 <_svfiprintf_r>
 800b7f8:	9b02      	ldr	r3, [sp, #8]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	701a      	strb	r2, [r3, #0]
 800b7fe:	b01c      	add	sp, #112	; 0x70
 800b800:	f85d eb04 	ldr.w	lr, [sp], #4
 800b804:	b003      	add	sp, #12
 800b806:	4770      	bx	lr
 800b808:	2000000c 	.word	0x2000000c
 800b80c:	ffff0208 	.word	0xffff0208

0800b810 <quorem>:
 800b810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b814:	6903      	ldr	r3, [r0, #16]
 800b816:	690c      	ldr	r4, [r1, #16]
 800b818:	42a3      	cmp	r3, r4
 800b81a:	4607      	mov	r7, r0
 800b81c:	f2c0 8081 	blt.w	800b922 <quorem+0x112>
 800b820:	3c01      	subs	r4, #1
 800b822:	f101 0814 	add.w	r8, r1, #20
 800b826:	f100 0514 	add.w	r5, r0, #20
 800b82a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b82e:	9301      	str	r3, [sp, #4]
 800b830:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b834:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b838:	3301      	adds	r3, #1
 800b83a:	429a      	cmp	r2, r3
 800b83c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b840:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b844:	fbb2 f6f3 	udiv	r6, r2, r3
 800b848:	d331      	bcc.n	800b8ae <quorem+0x9e>
 800b84a:	f04f 0e00 	mov.w	lr, #0
 800b84e:	4640      	mov	r0, r8
 800b850:	46ac      	mov	ip, r5
 800b852:	46f2      	mov	sl, lr
 800b854:	f850 2b04 	ldr.w	r2, [r0], #4
 800b858:	b293      	uxth	r3, r2
 800b85a:	fb06 e303 	mla	r3, r6, r3, lr
 800b85e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b862:	b29b      	uxth	r3, r3
 800b864:	ebaa 0303 	sub.w	r3, sl, r3
 800b868:	f8dc a000 	ldr.w	sl, [ip]
 800b86c:	0c12      	lsrs	r2, r2, #16
 800b86e:	fa13 f38a 	uxtah	r3, r3, sl
 800b872:	fb06 e202 	mla	r2, r6, r2, lr
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	9b00      	ldr	r3, [sp, #0]
 800b87a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b87e:	b292      	uxth	r2, r2
 800b880:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b888:	f8bd 3000 	ldrh.w	r3, [sp]
 800b88c:	4581      	cmp	r9, r0
 800b88e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b892:	f84c 3b04 	str.w	r3, [ip], #4
 800b896:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b89a:	d2db      	bcs.n	800b854 <quorem+0x44>
 800b89c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b8a0:	b92b      	cbnz	r3, 800b8ae <quorem+0x9e>
 800b8a2:	9b01      	ldr	r3, [sp, #4]
 800b8a4:	3b04      	subs	r3, #4
 800b8a6:	429d      	cmp	r5, r3
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	d32e      	bcc.n	800b90a <quorem+0xfa>
 800b8ac:	613c      	str	r4, [r7, #16]
 800b8ae:	4638      	mov	r0, r7
 800b8b0:	f001 f8c4 	bl	800ca3c <__mcmp>
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	db24      	blt.n	800b902 <quorem+0xf2>
 800b8b8:	3601      	adds	r6, #1
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	f04f 0c00 	mov.w	ip, #0
 800b8c0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8c4:	f8d0 e000 	ldr.w	lr, [r0]
 800b8c8:	b293      	uxth	r3, r2
 800b8ca:	ebac 0303 	sub.w	r3, ip, r3
 800b8ce:	0c12      	lsrs	r2, r2, #16
 800b8d0:	fa13 f38e 	uxtah	r3, r3, lr
 800b8d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b8d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8e2:	45c1      	cmp	r9, r8
 800b8e4:	f840 3b04 	str.w	r3, [r0], #4
 800b8e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b8ec:	d2e8      	bcs.n	800b8c0 <quorem+0xb0>
 800b8ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8f6:	b922      	cbnz	r2, 800b902 <quorem+0xf2>
 800b8f8:	3b04      	subs	r3, #4
 800b8fa:	429d      	cmp	r5, r3
 800b8fc:	461a      	mov	r2, r3
 800b8fe:	d30a      	bcc.n	800b916 <quorem+0x106>
 800b900:	613c      	str	r4, [r7, #16]
 800b902:	4630      	mov	r0, r6
 800b904:	b003      	add	sp, #12
 800b906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b90a:	6812      	ldr	r2, [r2, #0]
 800b90c:	3b04      	subs	r3, #4
 800b90e:	2a00      	cmp	r2, #0
 800b910:	d1cc      	bne.n	800b8ac <quorem+0x9c>
 800b912:	3c01      	subs	r4, #1
 800b914:	e7c7      	b.n	800b8a6 <quorem+0x96>
 800b916:	6812      	ldr	r2, [r2, #0]
 800b918:	3b04      	subs	r3, #4
 800b91a:	2a00      	cmp	r2, #0
 800b91c:	d1f0      	bne.n	800b900 <quorem+0xf0>
 800b91e:	3c01      	subs	r4, #1
 800b920:	e7eb      	b.n	800b8fa <quorem+0xea>
 800b922:	2000      	movs	r0, #0
 800b924:	e7ee      	b.n	800b904 <quorem+0xf4>
	...

0800b928 <_dtoa_r>:
 800b928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b92c:	ed2d 8b04 	vpush	{d8-d9}
 800b930:	ec57 6b10 	vmov	r6, r7, d0
 800b934:	b093      	sub	sp, #76	; 0x4c
 800b936:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b938:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b93c:	9106      	str	r1, [sp, #24]
 800b93e:	ee10 aa10 	vmov	sl, s0
 800b942:	4604      	mov	r4, r0
 800b944:	9209      	str	r2, [sp, #36]	; 0x24
 800b946:	930c      	str	r3, [sp, #48]	; 0x30
 800b948:	46bb      	mov	fp, r7
 800b94a:	b975      	cbnz	r5, 800b96a <_dtoa_r+0x42>
 800b94c:	2010      	movs	r0, #16
 800b94e:	f000 fddd 	bl	800c50c <malloc>
 800b952:	4602      	mov	r2, r0
 800b954:	6260      	str	r0, [r4, #36]	; 0x24
 800b956:	b920      	cbnz	r0, 800b962 <_dtoa_r+0x3a>
 800b958:	4ba7      	ldr	r3, [pc, #668]	; (800bbf8 <_dtoa_r+0x2d0>)
 800b95a:	21ea      	movs	r1, #234	; 0xea
 800b95c:	48a7      	ldr	r0, [pc, #668]	; (800bbfc <_dtoa_r+0x2d4>)
 800b95e:	f001 fbd1 	bl	800d104 <__assert_func>
 800b962:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b966:	6005      	str	r5, [r0, #0]
 800b968:	60c5      	str	r5, [r0, #12]
 800b96a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b96c:	6819      	ldr	r1, [r3, #0]
 800b96e:	b151      	cbz	r1, 800b986 <_dtoa_r+0x5e>
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	604a      	str	r2, [r1, #4]
 800b974:	2301      	movs	r3, #1
 800b976:	4093      	lsls	r3, r2
 800b978:	608b      	str	r3, [r1, #8]
 800b97a:	4620      	mov	r0, r4
 800b97c:	f000 fe1c 	bl	800c5b8 <_Bfree>
 800b980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b982:	2200      	movs	r2, #0
 800b984:	601a      	str	r2, [r3, #0]
 800b986:	1e3b      	subs	r3, r7, #0
 800b988:	bfaa      	itet	ge
 800b98a:	2300      	movge	r3, #0
 800b98c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b990:	f8c8 3000 	strge.w	r3, [r8]
 800b994:	4b9a      	ldr	r3, [pc, #616]	; (800bc00 <_dtoa_r+0x2d8>)
 800b996:	bfbc      	itt	lt
 800b998:	2201      	movlt	r2, #1
 800b99a:	f8c8 2000 	strlt.w	r2, [r8]
 800b99e:	ea33 030b 	bics.w	r3, r3, fp
 800b9a2:	d11b      	bne.n	800b9dc <_dtoa_r+0xb4>
 800b9a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9aa:	6013      	str	r3, [r2, #0]
 800b9ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9b0:	4333      	orrs	r3, r6
 800b9b2:	f000 8592 	beq.w	800c4da <_dtoa_r+0xbb2>
 800b9b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9b8:	b963      	cbnz	r3, 800b9d4 <_dtoa_r+0xac>
 800b9ba:	4b92      	ldr	r3, [pc, #584]	; (800bc04 <_dtoa_r+0x2dc>)
 800b9bc:	e022      	b.n	800ba04 <_dtoa_r+0xdc>
 800b9be:	4b92      	ldr	r3, [pc, #584]	; (800bc08 <_dtoa_r+0x2e0>)
 800b9c0:	9301      	str	r3, [sp, #4]
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	9801      	ldr	r0, [sp, #4]
 800b9ca:	b013      	add	sp, #76	; 0x4c
 800b9cc:	ecbd 8b04 	vpop	{d8-d9}
 800b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d4:	4b8b      	ldr	r3, [pc, #556]	; (800bc04 <_dtoa_r+0x2dc>)
 800b9d6:	9301      	str	r3, [sp, #4]
 800b9d8:	3303      	adds	r3, #3
 800b9da:	e7f3      	b.n	800b9c4 <_dtoa_r+0x9c>
 800b9dc:	2200      	movs	r2, #0
 800b9de:	2300      	movs	r3, #0
 800b9e0:	4650      	mov	r0, sl
 800b9e2:	4659      	mov	r1, fp
 800b9e4:	f7f5 f870 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9e8:	ec4b ab19 	vmov	d9, sl, fp
 800b9ec:	4680      	mov	r8, r0
 800b9ee:	b158      	cbz	r0, 800ba08 <_dtoa_r+0xe0>
 800b9f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	6013      	str	r3, [r2, #0]
 800b9f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 856b 	beq.w	800c4d4 <_dtoa_r+0xbac>
 800b9fe:	4883      	ldr	r0, [pc, #524]	; (800bc0c <_dtoa_r+0x2e4>)
 800ba00:	6018      	str	r0, [r3, #0]
 800ba02:	1e43      	subs	r3, r0, #1
 800ba04:	9301      	str	r3, [sp, #4]
 800ba06:	e7df      	b.n	800b9c8 <_dtoa_r+0xa0>
 800ba08:	ec4b ab10 	vmov	d0, sl, fp
 800ba0c:	aa10      	add	r2, sp, #64	; 0x40
 800ba0e:	a911      	add	r1, sp, #68	; 0x44
 800ba10:	4620      	mov	r0, r4
 800ba12:	f001 f8b9 	bl	800cb88 <__d2b>
 800ba16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ba1a:	ee08 0a10 	vmov	s16, r0
 800ba1e:	2d00      	cmp	r5, #0
 800ba20:	f000 8084 	beq.w	800bb2c <_dtoa_r+0x204>
 800ba24:	ee19 3a90 	vmov	r3, s19
 800ba28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ba30:	4656      	mov	r6, sl
 800ba32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ba36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ba3e:	4b74      	ldr	r3, [pc, #464]	; (800bc10 <_dtoa_r+0x2e8>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	4630      	mov	r0, r6
 800ba44:	4639      	mov	r1, r7
 800ba46:	f7f4 fc1f 	bl	8000288 <__aeabi_dsub>
 800ba4a:	a365      	add	r3, pc, #404	; (adr r3, 800bbe0 <_dtoa_r+0x2b8>)
 800ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba50:	f7f4 fdd2 	bl	80005f8 <__aeabi_dmul>
 800ba54:	a364      	add	r3, pc, #400	; (adr r3, 800bbe8 <_dtoa_r+0x2c0>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	f7f4 fc17 	bl	800028c <__adddf3>
 800ba5e:	4606      	mov	r6, r0
 800ba60:	4628      	mov	r0, r5
 800ba62:	460f      	mov	r7, r1
 800ba64:	f7f4 fd5e 	bl	8000524 <__aeabi_i2d>
 800ba68:	a361      	add	r3, pc, #388	; (adr r3, 800bbf0 <_dtoa_r+0x2c8>)
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	f7f4 fdc3 	bl	80005f8 <__aeabi_dmul>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4630      	mov	r0, r6
 800ba78:	4639      	mov	r1, r7
 800ba7a:	f7f4 fc07 	bl	800028c <__adddf3>
 800ba7e:	4606      	mov	r6, r0
 800ba80:	460f      	mov	r7, r1
 800ba82:	f7f5 f869 	bl	8000b58 <__aeabi_d2iz>
 800ba86:	2200      	movs	r2, #0
 800ba88:	9000      	str	r0, [sp, #0]
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	4639      	mov	r1, r7
 800ba90:	f7f5 f824 	bl	8000adc <__aeabi_dcmplt>
 800ba94:	b150      	cbz	r0, 800baac <_dtoa_r+0x184>
 800ba96:	9800      	ldr	r0, [sp, #0]
 800ba98:	f7f4 fd44 	bl	8000524 <__aeabi_i2d>
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	463b      	mov	r3, r7
 800baa0:	f7f5 f812 	bl	8000ac8 <__aeabi_dcmpeq>
 800baa4:	b910      	cbnz	r0, 800baac <_dtoa_r+0x184>
 800baa6:	9b00      	ldr	r3, [sp, #0]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	9300      	str	r3, [sp, #0]
 800baac:	9b00      	ldr	r3, [sp, #0]
 800baae:	2b16      	cmp	r3, #22
 800bab0:	d85a      	bhi.n	800bb68 <_dtoa_r+0x240>
 800bab2:	9a00      	ldr	r2, [sp, #0]
 800bab4:	4b57      	ldr	r3, [pc, #348]	; (800bc14 <_dtoa_r+0x2ec>)
 800bab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	ec51 0b19 	vmov	r0, r1, d9
 800bac2:	f7f5 f80b 	bl	8000adc <__aeabi_dcmplt>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	d050      	beq.n	800bb6c <_dtoa_r+0x244>
 800baca:	9b00      	ldr	r3, [sp, #0]
 800bacc:	3b01      	subs	r3, #1
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	2300      	movs	r3, #0
 800bad2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bad6:	1b5d      	subs	r5, r3, r5
 800bad8:	1e6b      	subs	r3, r5, #1
 800bada:	9305      	str	r3, [sp, #20]
 800badc:	bf45      	ittet	mi
 800bade:	f1c5 0301 	rsbmi	r3, r5, #1
 800bae2:	9304      	strmi	r3, [sp, #16]
 800bae4:	2300      	movpl	r3, #0
 800bae6:	2300      	movmi	r3, #0
 800bae8:	bf4c      	ite	mi
 800baea:	9305      	strmi	r3, [sp, #20]
 800baec:	9304      	strpl	r3, [sp, #16]
 800baee:	9b00      	ldr	r3, [sp, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	db3d      	blt.n	800bb70 <_dtoa_r+0x248>
 800baf4:	9b05      	ldr	r3, [sp, #20]
 800baf6:	9a00      	ldr	r2, [sp, #0]
 800baf8:	920a      	str	r2, [sp, #40]	; 0x28
 800bafa:	4413      	add	r3, r2
 800bafc:	9305      	str	r3, [sp, #20]
 800bafe:	2300      	movs	r3, #0
 800bb00:	9307      	str	r3, [sp, #28]
 800bb02:	9b06      	ldr	r3, [sp, #24]
 800bb04:	2b09      	cmp	r3, #9
 800bb06:	f200 8089 	bhi.w	800bc1c <_dtoa_r+0x2f4>
 800bb0a:	2b05      	cmp	r3, #5
 800bb0c:	bfc4      	itt	gt
 800bb0e:	3b04      	subgt	r3, #4
 800bb10:	9306      	strgt	r3, [sp, #24]
 800bb12:	9b06      	ldr	r3, [sp, #24]
 800bb14:	f1a3 0302 	sub.w	r3, r3, #2
 800bb18:	bfcc      	ite	gt
 800bb1a:	2500      	movgt	r5, #0
 800bb1c:	2501      	movle	r5, #1
 800bb1e:	2b03      	cmp	r3, #3
 800bb20:	f200 8087 	bhi.w	800bc32 <_dtoa_r+0x30a>
 800bb24:	e8df f003 	tbb	[pc, r3]
 800bb28:	59383a2d 	.word	0x59383a2d
 800bb2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bb30:	441d      	add	r5, r3
 800bb32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb36:	2b20      	cmp	r3, #32
 800bb38:	bfc1      	itttt	gt
 800bb3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bb42:	fa0b f303 	lslgt.w	r3, fp, r3
 800bb46:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bb4a:	bfda      	itte	le
 800bb4c:	f1c3 0320 	rsble	r3, r3, #32
 800bb50:	fa06 f003 	lslle.w	r0, r6, r3
 800bb54:	4318      	orrgt	r0, r3
 800bb56:	f7f4 fcd5 	bl	8000504 <__aeabi_ui2d>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	4606      	mov	r6, r0
 800bb5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bb62:	3d01      	subs	r5, #1
 800bb64:	930e      	str	r3, [sp, #56]	; 0x38
 800bb66:	e76a      	b.n	800ba3e <_dtoa_r+0x116>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e7b2      	b.n	800bad2 <_dtoa_r+0x1aa>
 800bb6c:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb6e:	e7b1      	b.n	800bad4 <_dtoa_r+0x1ac>
 800bb70:	9b04      	ldr	r3, [sp, #16]
 800bb72:	9a00      	ldr	r2, [sp, #0]
 800bb74:	1a9b      	subs	r3, r3, r2
 800bb76:	9304      	str	r3, [sp, #16]
 800bb78:	4253      	negs	r3, r2
 800bb7a:	9307      	str	r3, [sp, #28]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	930a      	str	r3, [sp, #40]	; 0x28
 800bb80:	e7bf      	b.n	800bb02 <_dtoa_r+0x1da>
 800bb82:	2300      	movs	r3, #0
 800bb84:	9308      	str	r3, [sp, #32]
 800bb86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	dc55      	bgt.n	800bc38 <_dtoa_r+0x310>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb92:	461a      	mov	r2, r3
 800bb94:	9209      	str	r2, [sp, #36]	; 0x24
 800bb96:	e00c      	b.n	800bbb2 <_dtoa_r+0x28a>
 800bb98:	2301      	movs	r3, #1
 800bb9a:	e7f3      	b.n	800bb84 <_dtoa_r+0x25c>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bba0:	9308      	str	r3, [sp, #32]
 800bba2:	9b00      	ldr	r3, [sp, #0]
 800bba4:	4413      	add	r3, r2
 800bba6:	9302      	str	r3, [sp, #8]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	9303      	str	r3, [sp, #12]
 800bbae:	bfb8      	it	lt
 800bbb0:	2301      	movlt	r3, #1
 800bbb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	6042      	str	r2, [r0, #4]
 800bbb8:	2204      	movs	r2, #4
 800bbba:	f102 0614 	add.w	r6, r2, #20
 800bbbe:	429e      	cmp	r6, r3
 800bbc0:	6841      	ldr	r1, [r0, #4]
 800bbc2:	d93d      	bls.n	800bc40 <_dtoa_r+0x318>
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f000 fcb7 	bl	800c538 <_Balloc>
 800bbca:	9001      	str	r0, [sp, #4]
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	d13b      	bne.n	800bc48 <_dtoa_r+0x320>
 800bbd0:	4b11      	ldr	r3, [pc, #68]	; (800bc18 <_dtoa_r+0x2f0>)
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bbd8:	e6c0      	b.n	800b95c <_dtoa_r+0x34>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e7df      	b.n	800bb9e <_dtoa_r+0x276>
 800bbde:	bf00      	nop
 800bbe0:	636f4361 	.word	0x636f4361
 800bbe4:	3fd287a7 	.word	0x3fd287a7
 800bbe8:	8b60c8b3 	.word	0x8b60c8b3
 800bbec:	3fc68a28 	.word	0x3fc68a28
 800bbf0:	509f79fb 	.word	0x509f79fb
 800bbf4:	3fd34413 	.word	0x3fd34413
 800bbf8:	0800dfa1 	.word	0x0800dfa1
 800bbfc:	0800dfb8 	.word	0x0800dfb8
 800bc00:	7ff00000 	.word	0x7ff00000
 800bc04:	0800df9d 	.word	0x0800df9d
 800bc08:	0800df94 	.word	0x0800df94
 800bc0c:	0800df71 	.word	0x0800df71
 800bc10:	3ff80000 	.word	0x3ff80000
 800bc14:	0800e0a8 	.word	0x0800e0a8
 800bc18:	0800e013 	.word	0x0800e013
 800bc1c:	2501      	movs	r5, #1
 800bc1e:	2300      	movs	r3, #0
 800bc20:	9306      	str	r3, [sp, #24]
 800bc22:	9508      	str	r5, [sp, #32]
 800bc24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2312      	movs	r3, #18
 800bc30:	e7b0      	b.n	800bb94 <_dtoa_r+0x26c>
 800bc32:	2301      	movs	r3, #1
 800bc34:	9308      	str	r3, [sp, #32]
 800bc36:	e7f5      	b.n	800bc24 <_dtoa_r+0x2fc>
 800bc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc3e:	e7b8      	b.n	800bbb2 <_dtoa_r+0x28a>
 800bc40:	3101      	adds	r1, #1
 800bc42:	6041      	str	r1, [r0, #4]
 800bc44:	0052      	lsls	r2, r2, #1
 800bc46:	e7b8      	b.n	800bbba <_dtoa_r+0x292>
 800bc48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc4a:	9a01      	ldr	r2, [sp, #4]
 800bc4c:	601a      	str	r2, [r3, #0]
 800bc4e:	9b03      	ldr	r3, [sp, #12]
 800bc50:	2b0e      	cmp	r3, #14
 800bc52:	f200 809d 	bhi.w	800bd90 <_dtoa_r+0x468>
 800bc56:	2d00      	cmp	r5, #0
 800bc58:	f000 809a 	beq.w	800bd90 <_dtoa_r+0x468>
 800bc5c:	9b00      	ldr	r3, [sp, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	dd32      	ble.n	800bcc8 <_dtoa_r+0x3a0>
 800bc62:	4ab7      	ldr	r2, [pc, #732]	; (800bf40 <_dtoa_r+0x618>)
 800bc64:	f003 030f 	and.w	r3, r3, #15
 800bc68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc70:	9b00      	ldr	r3, [sp, #0]
 800bc72:	05d8      	lsls	r0, r3, #23
 800bc74:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bc78:	d516      	bpl.n	800bca8 <_dtoa_r+0x380>
 800bc7a:	4bb2      	ldr	r3, [pc, #712]	; (800bf44 <_dtoa_r+0x61c>)
 800bc7c:	ec51 0b19 	vmov	r0, r1, d9
 800bc80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc84:	f7f4 fde2 	bl	800084c <__aeabi_ddiv>
 800bc88:	f007 070f 	and.w	r7, r7, #15
 800bc8c:	4682      	mov	sl, r0
 800bc8e:	468b      	mov	fp, r1
 800bc90:	2503      	movs	r5, #3
 800bc92:	4eac      	ldr	r6, [pc, #688]	; (800bf44 <_dtoa_r+0x61c>)
 800bc94:	b957      	cbnz	r7, 800bcac <_dtoa_r+0x384>
 800bc96:	4642      	mov	r2, r8
 800bc98:	464b      	mov	r3, r9
 800bc9a:	4650      	mov	r0, sl
 800bc9c:	4659      	mov	r1, fp
 800bc9e:	f7f4 fdd5 	bl	800084c <__aeabi_ddiv>
 800bca2:	4682      	mov	sl, r0
 800bca4:	468b      	mov	fp, r1
 800bca6:	e028      	b.n	800bcfa <_dtoa_r+0x3d2>
 800bca8:	2502      	movs	r5, #2
 800bcaa:	e7f2      	b.n	800bc92 <_dtoa_r+0x36a>
 800bcac:	07f9      	lsls	r1, r7, #31
 800bcae:	d508      	bpl.n	800bcc2 <_dtoa_r+0x39a>
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	4649      	mov	r1, r9
 800bcb4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcb8:	f7f4 fc9e 	bl	80005f8 <__aeabi_dmul>
 800bcbc:	3501      	adds	r5, #1
 800bcbe:	4680      	mov	r8, r0
 800bcc0:	4689      	mov	r9, r1
 800bcc2:	107f      	asrs	r7, r7, #1
 800bcc4:	3608      	adds	r6, #8
 800bcc6:	e7e5      	b.n	800bc94 <_dtoa_r+0x36c>
 800bcc8:	f000 809b 	beq.w	800be02 <_dtoa_r+0x4da>
 800bccc:	9b00      	ldr	r3, [sp, #0]
 800bcce:	4f9d      	ldr	r7, [pc, #628]	; (800bf44 <_dtoa_r+0x61c>)
 800bcd0:	425e      	negs	r6, r3
 800bcd2:	4b9b      	ldr	r3, [pc, #620]	; (800bf40 <_dtoa_r+0x618>)
 800bcd4:	f006 020f 	and.w	r2, r6, #15
 800bcd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce0:	ec51 0b19 	vmov	r0, r1, d9
 800bce4:	f7f4 fc88 	bl	80005f8 <__aeabi_dmul>
 800bce8:	1136      	asrs	r6, r6, #4
 800bcea:	4682      	mov	sl, r0
 800bcec:	468b      	mov	fp, r1
 800bcee:	2300      	movs	r3, #0
 800bcf0:	2502      	movs	r5, #2
 800bcf2:	2e00      	cmp	r6, #0
 800bcf4:	d17a      	bne.n	800bdec <_dtoa_r+0x4c4>
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1d3      	bne.n	800bca2 <_dtoa_r+0x37a>
 800bcfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 8082 	beq.w	800be06 <_dtoa_r+0x4de>
 800bd02:	4b91      	ldr	r3, [pc, #580]	; (800bf48 <_dtoa_r+0x620>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	4650      	mov	r0, sl
 800bd08:	4659      	mov	r1, fp
 800bd0a:	f7f4 fee7 	bl	8000adc <__aeabi_dcmplt>
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	d079      	beq.n	800be06 <_dtoa_r+0x4de>
 800bd12:	9b03      	ldr	r3, [sp, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d076      	beq.n	800be06 <_dtoa_r+0x4de>
 800bd18:	9b02      	ldr	r3, [sp, #8]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	dd36      	ble.n	800bd8c <_dtoa_r+0x464>
 800bd1e:	9b00      	ldr	r3, [sp, #0]
 800bd20:	4650      	mov	r0, sl
 800bd22:	4659      	mov	r1, fp
 800bd24:	1e5f      	subs	r7, r3, #1
 800bd26:	2200      	movs	r2, #0
 800bd28:	4b88      	ldr	r3, [pc, #544]	; (800bf4c <_dtoa_r+0x624>)
 800bd2a:	f7f4 fc65 	bl	80005f8 <__aeabi_dmul>
 800bd2e:	9e02      	ldr	r6, [sp, #8]
 800bd30:	4682      	mov	sl, r0
 800bd32:	468b      	mov	fp, r1
 800bd34:	3501      	adds	r5, #1
 800bd36:	4628      	mov	r0, r5
 800bd38:	f7f4 fbf4 	bl	8000524 <__aeabi_i2d>
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	465b      	mov	r3, fp
 800bd40:	f7f4 fc5a 	bl	80005f8 <__aeabi_dmul>
 800bd44:	4b82      	ldr	r3, [pc, #520]	; (800bf50 <_dtoa_r+0x628>)
 800bd46:	2200      	movs	r2, #0
 800bd48:	f7f4 faa0 	bl	800028c <__adddf3>
 800bd4c:	46d0      	mov	r8, sl
 800bd4e:	46d9      	mov	r9, fp
 800bd50:	4682      	mov	sl, r0
 800bd52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bd56:	2e00      	cmp	r6, #0
 800bd58:	d158      	bne.n	800be0c <_dtoa_r+0x4e4>
 800bd5a:	4b7e      	ldr	r3, [pc, #504]	; (800bf54 <_dtoa_r+0x62c>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	4640      	mov	r0, r8
 800bd60:	4649      	mov	r1, r9
 800bd62:	f7f4 fa91 	bl	8000288 <__aeabi_dsub>
 800bd66:	4652      	mov	r2, sl
 800bd68:	465b      	mov	r3, fp
 800bd6a:	4680      	mov	r8, r0
 800bd6c:	4689      	mov	r9, r1
 800bd6e:	f7f4 fed3 	bl	8000b18 <__aeabi_dcmpgt>
 800bd72:	2800      	cmp	r0, #0
 800bd74:	f040 8295 	bne.w	800c2a2 <_dtoa_r+0x97a>
 800bd78:	4652      	mov	r2, sl
 800bd7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bd7e:	4640      	mov	r0, r8
 800bd80:	4649      	mov	r1, r9
 800bd82:	f7f4 feab 	bl	8000adc <__aeabi_dcmplt>
 800bd86:	2800      	cmp	r0, #0
 800bd88:	f040 8289 	bne.w	800c29e <_dtoa_r+0x976>
 800bd8c:	ec5b ab19 	vmov	sl, fp, d9
 800bd90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	f2c0 8148 	blt.w	800c028 <_dtoa_r+0x700>
 800bd98:	9a00      	ldr	r2, [sp, #0]
 800bd9a:	2a0e      	cmp	r2, #14
 800bd9c:	f300 8144 	bgt.w	800c028 <_dtoa_r+0x700>
 800bda0:	4b67      	ldr	r3, [pc, #412]	; (800bf40 <_dtoa_r+0x618>)
 800bda2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bda6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f280 80d5 	bge.w	800bf5c <_dtoa_r+0x634>
 800bdb2:	9b03      	ldr	r3, [sp, #12]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f300 80d1 	bgt.w	800bf5c <_dtoa_r+0x634>
 800bdba:	f040 826f 	bne.w	800c29c <_dtoa_r+0x974>
 800bdbe:	4b65      	ldr	r3, [pc, #404]	; (800bf54 <_dtoa_r+0x62c>)
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	4640      	mov	r0, r8
 800bdc4:	4649      	mov	r1, r9
 800bdc6:	f7f4 fc17 	bl	80005f8 <__aeabi_dmul>
 800bdca:	4652      	mov	r2, sl
 800bdcc:	465b      	mov	r3, fp
 800bdce:	f7f4 fe99 	bl	8000b04 <__aeabi_dcmpge>
 800bdd2:	9e03      	ldr	r6, [sp, #12]
 800bdd4:	4637      	mov	r7, r6
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	f040 8245 	bne.w	800c266 <_dtoa_r+0x93e>
 800bddc:	9d01      	ldr	r5, [sp, #4]
 800bdde:	2331      	movs	r3, #49	; 0x31
 800bde0:	f805 3b01 	strb.w	r3, [r5], #1
 800bde4:	9b00      	ldr	r3, [sp, #0]
 800bde6:	3301      	adds	r3, #1
 800bde8:	9300      	str	r3, [sp, #0]
 800bdea:	e240      	b.n	800c26e <_dtoa_r+0x946>
 800bdec:	07f2      	lsls	r2, r6, #31
 800bdee:	d505      	bpl.n	800bdfc <_dtoa_r+0x4d4>
 800bdf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdf4:	f7f4 fc00 	bl	80005f8 <__aeabi_dmul>
 800bdf8:	3501      	adds	r5, #1
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	1076      	asrs	r6, r6, #1
 800bdfe:	3708      	adds	r7, #8
 800be00:	e777      	b.n	800bcf2 <_dtoa_r+0x3ca>
 800be02:	2502      	movs	r5, #2
 800be04:	e779      	b.n	800bcfa <_dtoa_r+0x3d2>
 800be06:	9f00      	ldr	r7, [sp, #0]
 800be08:	9e03      	ldr	r6, [sp, #12]
 800be0a:	e794      	b.n	800bd36 <_dtoa_r+0x40e>
 800be0c:	9901      	ldr	r1, [sp, #4]
 800be0e:	4b4c      	ldr	r3, [pc, #304]	; (800bf40 <_dtoa_r+0x618>)
 800be10:	4431      	add	r1, r6
 800be12:	910d      	str	r1, [sp, #52]	; 0x34
 800be14:	9908      	ldr	r1, [sp, #32]
 800be16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be1e:	2900      	cmp	r1, #0
 800be20:	d043      	beq.n	800beaa <_dtoa_r+0x582>
 800be22:	494d      	ldr	r1, [pc, #308]	; (800bf58 <_dtoa_r+0x630>)
 800be24:	2000      	movs	r0, #0
 800be26:	f7f4 fd11 	bl	800084c <__aeabi_ddiv>
 800be2a:	4652      	mov	r2, sl
 800be2c:	465b      	mov	r3, fp
 800be2e:	f7f4 fa2b 	bl	8000288 <__aeabi_dsub>
 800be32:	9d01      	ldr	r5, [sp, #4]
 800be34:	4682      	mov	sl, r0
 800be36:	468b      	mov	fp, r1
 800be38:	4649      	mov	r1, r9
 800be3a:	4640      	mov	r0, r8
 800be3c:	f7f4 fe8c 	bl	8000b58 <__aeabi_d2iz>
 800be40:	4606      	mov	r6, r0
 800be42:	f7f4 fb6f 	bl	8000524 <__aeabi_i2d>
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	4640      	mov	r0, r8
 800be4c:	4649      	mov	r1, r9
 800be4e:	f7f4 fa1b 	bl	8000288 <__aeabi_dsub>
 800be52:	3630      	adds	r6, #48	; 0x30
 800be54:	f805 6b01 	strb.w	r6, [r5], #1
 800be58:	4652      	mov	r2, sl
 800be5a:	465b      	mov	r3, fp
 800be5c:	4680      	mov	r8, r0
 800be5e:	4689      	mov	r9, r1
 800be60:	f7f4 fe3c 	bl	8000adc <__aeabi_dcmplt>
 800be64:	2800      	cmp	r0, #0
 800be66:	d163      	bne.n	800bf30 <_dtoa_r+0x608>
 800be68:	4642      	mov	r2, r8
 800be6a:	464b      	mov	r3, r9
 800be6c:	4936      	ldr	r1, [pc, #216]	; (800bf48 <_dtoa_r+0x620>)
 800be6e:	2000      	movs	r0, #0
 800be70:	f7f4 fa0a 	bl	8000288 <__aeabi_dsub>
 800be74:	4652      	mov	r2, sl
 800be76:	465b      	mov	r3, fp
 800be78:	f7f4 fe30 	bl	8000adc <__aeabi_dcmplt>
 800be7c:	2800      	cmp	r0, #0
 800be7e:	f040 80b5 	bne.w	800bfec <_dtoa_r+0x6c4>
 800be82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be84:	429d      	cmp	r5, r3
 800be86:	d081      	beq.n	800bd8c <_dtoa_r+0x464>
 800be88:	4b30      	ldr	r3, [pc, #192]	; (800bf4c <_dtoa_r+0x624>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	4650      	mov	r0, sl
 800be8e:	4659      	mov	r1, fp
 800be90:	f7f4 fbb2 	bl	80005f8 <__aeabi_dmul>
 800be94:	4b2d      	ldr	r3, [pc, #180]	; (800bf4c <_dtoa_r+0x624>)
 800be96:	4682      	mov	sl, r0
 800be98:	468b      	mov	fp, r1
 800be9a:	4640      	mov	r0, r8
 800be9c:	4649      	mov	r1, r9
 800be9e:	2200      	movs	r2, #0
 800bea0:	f7f4 fbaa 	bl	80005f8 <__aeabi_dmul>
 800bea4:	4680      	mov	r8, r0
 800bea6:	4689      	mov	r9, r1
 800bea8:	e7c6      	b.n	800be38 <_dtoa_r+0x510>
 800beaa:	4650      	mov	r0, sl
 800beac:	4659      	mov	r1, fp
 800beae:	f7f4 fba3 	bl	80005f8 <__aeabi_dmul>
 800beb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800beb4:	9d01      	ldr	r5, [sp, #4]
 800beb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800beb8:	4682      	mov	sl, r0
 800beba:	468b      	mov	fp, r1
 800bebc:	4649      	mov	r1, r9
 800bebe:	4640      	mov	r0, r8
 800bec0:	f7f4 fe4a 	bl	8000b58 <__aeabi_d2iz>
 800bec4:	4606      	mov	r6, r0
 800bec6:	f7f4 fb2d 	bl	8000524 <__aeabi_i2d>
 800beca:	3630      	adds	r6, #48	; 0x30
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	4640      	mov	r0, r8
 800bed2:	4649      	mov	r1, r9
 800bed4:	f7f4 f9d8 	bl	8000288 <__aeabi_dsub>
 800bed8:	f805 6b01 	strb.w	r6, [r5], #1
 800bedc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bede:	429d      	cmp	r5, r3
 800bee0:	4680      	mov	r8, r0
 800bee2:	4689      	mov	r9, r1
 800bee4:	f04f 0200 	mov.w	r2, #0
 800bee8:	d124      	bne.n	800bf34 <_dtoa_r+0x60c>
 800beea:	4b1b      	ldr	r3, [pc, #108]	; (800bf58 <_dtoa_r+0x630>)
 800beec:	4650      	mov	r0, sl
 800beee:	4659      	mov	r1, fp
 800bef0:	f7f4 f9cc 	bl	800028c <__adddf3>
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	4640      	mov	r0, r8
 800befa:	4649      	mov	r1, r9
 800befc:	f7f4 fe0c 	bl	8000b18 <__aeabi_dcmpgt>
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d173      	bne.n	800bfec <_dtoa_r+0x6c4>
 800bf04:	4652      	mov	r2, sl
 800bf06:	465b      	mov	r3, fp
 800bf08:	4913      	ldr	r1, [pc, #76]	; (800bf58 <_dtoa_r+0x630>)
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	f7f4 f9bc 	bl	8000288 <__aeabi_dsub>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4640      	mov	r0, r8
 800bf16:	4649      	mov	r1, r9
 800bf18:	f7f4 fde0 	bl	8000adc <__aeabi_dcmplt>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	f43f af35 	beq.w	800bd8c <_dtoa_r+0x464>
 800bf22:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf24:	1e6b      	subs	r3, r5, #1
 800bf26:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf28:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf2c:	2b30      	cmp	r3, #48	; 0x30
 800bf2e:	d0f8      	beq.n	800bf22 <_dtoa_r+0x5fa>
 800bf30:	9700      	str	r7, [sp, #0]
 800bf32:	e049      	b.n	800bfc8 <_dtoa_r+0x6a0>
 800bf34:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <_dtoa_r+0x624>)
 800bf36:	f7f4 fb5f 	bl	80005f8 <__aeabi_dmul>
 800bf3a:	4680      	mov	r8, r0
 800bf3c:	4689      	mov	r9, r1
 800bf3e:	e7bd      	b.n	800bebc <_dtoa_r+0x594>
 800bf40:	0800e0a8 	.word	0x0800e0a8
 800bf44:	0800e080 	.word	0x0800e080
 800bf48:	3ff00000 	.word	0x3ff00000
 800bf4c:	40240000 	.word	0x40240000
 800bf50:	401c0000 	.word	0x401c0000
 800bf54:	40140000 	.word	0x40140000
 800bf58:	3fe00000 	.word	0x3fe00000
 800bf5c:	9d01      	ldr	r5, [sp, #4]
 800bf5e:	4656      	mov	r6, sl
 800bf60:	465f      	mov	r7, fp
 800bf62:	4642      	mov	r2, r8
 800bf64:	464b      	mov	r3, r9
 800bf66:	4630      	mov	r0, r6
 800bf68:	4639      	mov	r1, r7
 800bf6a:	f7f4 fc6f 	bl	800084c <__aeabi_ddiv>
 800bf6e:	f7f4 fdf3 	bl	8000b58 <__aeabi_d2iz>
 800bf72:	4682      	mov	sl, r0
 800bf74:	f7f4 fad6 	bl	8000524 <__aeabi_i2d>
 800bf78:	4642      	mov	r2, r8
 800bf7a:	464b      	mov	r3, r9
 800bf7c:	f7f4 fb3c 	bl	80005f8 <__aeabi_dmul>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	4630      	mov	r0, r6
 800bf86:	4639      	mov	r1, r7
 800bf88:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bf8c:	f7f4 f97c 	bl	8000288 <__aeabi_dsub>
 800bf90:	f805 6b01 	strb.w	r6, [r5], #1
 800bf94:	9e01      	ldr	r6, [sp, #4]
 800bf96:	9f03      	ldr	r7, [sp, #12]
 800bf98:	1bae      	subs	r6, r5, r6
 800bf9a:	42b7      	cmp	r7, r6
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	d135      	bne.n	800c00e <_dtoa_r+0x6e6>
 800bfa2:	f7f4 f973 	bl	800028c <__adddf3>
 800bfa6:	4642      	mov	r2, r8
 800bfa8:	464b      	mov	r3, r9
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460f      	mov	r7, r1
 800bfae:	f7f4 fdb3 	bl	8000b18 <__aeabi_dcmpgt>
 800bfb2:	b9d0      	cbnz	r0, 800bfea <_dtoa_r+0x6c2>
 800bfb4:	4642      	mov	r2, r8
 800bfb6:	464b      	mov	r3, r9
 800bfb8:	4630      	mov	r0, r6
 800bfba:	4639      	mov	r1, r7
 800bfbc:	f7f4 fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfc0:	b110      	cbz	r0, 800bfc8 <_dtoa_r+0x6a0>
 800bfc2:	f01a 0f01 	tst.w	sl, #1
 800bfc6:	d110      	bne.n	800bfea <_dtoa_r+0x6c2>
 800bfc8:	4620      	mov	r0, r4
 800bfca:	ee18 1a10 	vmov	r1, s16
 800bfce:	f000 faf3 	bl	800c5b8 <_Bfree>
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	9800      	ldr	r0, [sp, #0]
 800bfd6:	702b      	strb	r3, [r5, #0]
 800bfd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfda:	3001      	adds	r0, #1
 800bfdc:	6018      	str	r0, [r3, #0]
 800bfde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f43f acf1 	beq.w	800b9c8 <_dtoa_r+0xa0>
 800bfe6:	601d      	str	r5, [r3, #0]
 800bfe8:	e4ee      	b.n	800b9c8 <_dtoa_r+0xa0>
 800bfea:	9f00      	ldr	r7, [sp, #0]
 800bfec:	462b      	mov	r3, r5
 800bfee:	461d      	mov	r5, r3
 800bff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bff4:	2a39      	cmp	r2, #57	; 0x39
 800bff6:	d106      	bne.n	800c006 <_dtoa_r+0x6de>
 800bff8:	9a01      	ldr	r2, [sp, #4]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d1f7      	bne.n	800bfee <_dtoa_r+0x6c6>
 800bffe:	9901      	ldr	r1, [sp, #4]
 800c000:	2230      	movs	r2, #48	; 0x30
 800c002:	3701      	adds	r7, #1
 800c004:	700a      	strb	r2, [r1, #0]
 800c006:	781a      	ldrb	r2, [r3, #0]
 800c008:	3201      	adds	r2, #1
 800c00a:	701a      	strb	r2, [r3, #0]
 800c00c:	e790      	b.n	800bf30 <_dtoa_r+0x608>
 800c00e:	4ba6      	ldr	r3, [pc, #664]	; (800c2a8 <_dtoa_r+0x980>)
 800c010:	2200      	movs	r2, #0
 800c012:	f7f4 faf1 	bl	80005f8 <__aeabi_dmul>
 800c016:	2200      	movs	r2, #0
 800c018:	2300      	movs	r3, #0
 800c01a:	4606      	mov	r6, r0
 800c01c:	460f      	mov	r7, r1
 800c01e:	f7f4 fd53 	bl	8000ac8 <__aeabi_dcmpeq>
 800c022:	2800      	cmp	r0, #0
 800c024:	d09d      	beq.n	800bf62 <_dtoa_r+0x63a>
 800c026:	e7cf      	b.n	800bfc8 <_dtoa_r+0x6a0>
 800c028:	9a08      	ldr	r2, [sp, #32]
 800c02a:	2a00      	cmp	r2, #0
 800c02c:	f000 80d7 	beq.w	800c1de <_dtoa_r+0x8b6>
 800c030:	9a06      	ldr	r2, [sp, #24]
 800c032:	2a01      	cmp	r2, #1
 800c034:	f300 80ba 	bgt.w	800c1ac <_dtoa_r+0x884>
 800c038:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c03a:	2a00      	cmp	r2, #0
 800c03c:	f000 80b2 	beq.w	800c1a4 <_dtoa_r+0x87c>
 800c040:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c044:	9e07      	ldr	r6, [sp, #28]
 800c046:	9d04      	ldr	r5, [sp, #16]
 800c048:	9a04      	ldr	r2, [sp, #16]
 800c04a:	441a      	add	r2, r3
 800c04c:	9204      	str	r2, [sp, #16]
 800c04e:	9a05      	ldr	r2, [sp, #20]
 800c050:	2101      	movs	r1, #1
 800c052:	441a      	add	r2, r3
 800c054:	4620      	mov	r0, r4
 800c056:	9205      	str	r2, [sp, #20]
 800c058:	f000 fb66 	bl	800c728 <__i2b>
 800c05c:	4607      	mov	r7, r0
 800c05e:	2d00      	cmp	r5, #0
 800c060:	dd0c      	ble.n	800c07c <_dtoa_r+0x754>
 800c062:	9b05      	ldr	r3, [sp, #20]
 800c064:	2b00      	cmp	r3, #0
 800c066:	dd09      	ble.n	800c07c <_dtoa_r+0x754>
 800c068:	42ab      	cmp	r3, r5
 800c06a:	9a04      	ldr	r2, [sp, #16]
 800c06c:	bfa8      	it	ge
 800c06e:	462b      	movge	r3, r5
 800c070:	1ad2      	subs	r2, r2, r3
 800c072:	9204      	str	r2, [sp, #16]
 800c074:	9a05      	ldr	r2, [sp, #20]
 800c076:	1aed      	subs	r5, r5, r3
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	9305      	str	r3, [sp, #20]
 800c07c:	9b07      	ldr	r3, [sp, #28]
 800c07e:	b31b      	cbz	r3, 800c0c8 <_dtoa_r+0x7a0>
 800c080:	9b08      	ldr	r3, [sp, #32]
 800c082:	2b00      	cmp	r3, #0
 800c084:	f000 80af 	beq.w	800c1e6 <_dtoa_r+0x8be>
 800c088:	2e00      	cmp	r6, #0
 800c08a:	dd13      	ble.n	800c0b4 <_dtoa_r+0x78c>
 800c08c:	4639      	mov	r1, r7
 800c08e:	4632      	mov	r2, r6
 800c090:	4620      	mov	r0, r4
 800c092:	f000 fc09 	bl	800c8a8 <__pow5mult>
 800c096:	ee18 2a10 	vmov	r2, s16
 800c09a:	4601      	mov	r1, r0
 800c09c:	4607      	mov	r7, r0
 800c09e:	4620      	mov	r0, r4
 800c0a0:	f000 fb58 	bl	800c754 <__multiply>
 800c0a4:	ee18 1a10 	vmov	r1, s16
 800c0a8:	4680      	mov	r8, r0
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f000 fa84 	bl	800c5b8 <_Bfree>
 800c0b0:	ee08 8a10 	vmov	s16, r8
 800c0b4:	9b07      	ldr	r3, [sp, #28]
 800c0b6:	1b9a      	subs	r2, r3, r6
 800c0b8:	d006      	beq.n	800c0c8 <_dtoa_r+0x7a0>
 800c0ba:	ee18 1a10 	vmov	r1, s16
 800c0be:	4620      	mov	r0, r4
 800c0c0:	f000 fbf2 	bl	800c8a8 <__pow5mult>
 800c0c4:	ee08 0a10 	vmov	s16, r0
 800c0c8:	2101      	movs	r1, #1
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f000 fb2c 	bl	800c728 <__i2b>
 800c0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	4606      	mov	r6, r0
 800c0d6:	f340 8088 	ble.w	800c1ea <_dtoa_r+0x8c2>
 800c0da:	461a      	mov	r2, r3
 800c0dc:	4601      	mov	r1, r0
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f000 fbe2 	bl	800c8a8 <__pow5mult>
 800c0e4:	9b06      	ldr	r3, [sp, #24]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	4606      	mov	r6, r0
 800c0ea:	f340 8081 	ble.w	800c1f0 <_dtoa_r+0x8c8>
 800c0ee:	f04f 0800 	mov.w	r8, #0
 800c0f2:	6933      	ldr	r3, [r6, #16]
 800c0f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c0f8:	6918      	ldr	r0, [r3, #16]
 800c0fa:	f000 fac5 	bl	800c688 <__hi0bits>
 800c0fe:	f1c0 0020 	rsb	r0, r0, #32
 800c102:	9b05      	ldr	r3, [sp, #20]
 800c104:	4418      	add	r0, r3
 800c106:	f010 001f 	ands.w	r0, r0, #31
 800c10a:	f000 8092 	beq.w	800c232 <_dtoa_r+0x90a>
 800c10e:	f1c0 0320 	rsb	r3, r0, #32
 800c112:	2b04      	cmp	r3, #4
 800c114:	f340 808a 	ble.w	800c22c <_dtoa_r+0x904>
 800c118:	f1c0 001c 	rsb	r0, r0, #28
 800c11c:	9b04      	ldr	r3, [sp, #16]
 800c11e:	4403      	add	r3, r0
 800c120:	9304      	str	r3, [sp, #16]
 800c122:	9b05      	ldr	r3, [sp, #20]
 800c124:	4403      	add	r3, r0
 800c126:	4405      	add	r5, r0
 800c128:	9305      	str	r3, [sp, #20]
 800c12a:	9b04      	ldr	r3, [sp, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	dd07      	ble.n	800c140 <_dtoa_r+0x818>
 800c130:	ee18 1a10 	vmov	r1, s16
 800c134:	461a      	mov	r2, r3
 800c136:	4620      	mov	r0, r4
 800c138:	f000 fc10 	bl	800c95c <__lshift>
 800c13c:	ee08 0a10 	vmov	s16, r0
 800c140:	9b05      	ldr	r3, [sp, #20]
 800c142:	2b00      	cmp	r3, #0
 800c144:	dd05      	ble.n	800c152 <_dtoa_r+0x82a>
 800c146:	4631      	mov	r1, r6
 800c148:	461a      	mov	r2, r3
 800c14a:	4620      	mov	r0, r4
 800c14c:	f000 fc06 	bl	800c95c <__lshift>
 800c150:	4606      	mov	r6, r0
 800c152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c154:	2b00      	cmp	r3, #0
 800c156:	d06e      	beq.n	800c236 <_dtoa_r+0x90e>
 800c158:	ee18 0a10 	vmov	r0, s16
 800c15c:	4631      	mov	r1, r6
 800c15e:	f000 fc6d 	bl	800ca3c <__mcmp>
 800c162:	2800      	cmp	r0, #0
 800c164:	da67      	bge.n	800c236 <_dtoa_r+0x90e>
 800c166:	9b00      	ldr	r3, [sp, #0]
 800c168:	3b01      	subs	r3, #1
 800c16a:	ee18 1a10 	vmov	r1, s16
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	220a      	movs	r2, #10
 800c172:	2300      	movs	r3, #0
 800c174:	4620      	mov	r0, r4
 800c176:	f000 fa41 	bl	800c5fc <__multadd>
 800c17a:	9b08      	ldr	r3, [sp, #32]
 800c17c:	ee08 0a10 	vmov	s16, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	f000 81b1 	beq.w	800c4e8 <_dtoa_r+0xbc0>
 800c186:	2300      	movs	r3, #0
 800c188:	4639      	mov	r1, r7
 800c18a:	220a      	movs	r2, #10
 800c18c:	4620      	mov	r0, r4
 800c18e:	f000 fa35 	bl	800c5fc <__multadd>
 800c192:	9b02      	ldr	r3, [sp, #8]
 800c194:	2b00      	cmp	r3, #0
 800c196:	4607      	mov	r7, r0
 800c198:	f300 808e 	bgt.w	800c2b8 <_dtoa_r+0x990>
 800c19c:	9b06      	ldr	r3, [sp, #24]
 800c19e:	2b02      	cmp	r3, #2
 800c1a0:	dc51      	bgt.n	800c246 <_dtoa_r+0x91e>
 800c1a2:	e089      	b.n	800c2b8 <_dtoa_r+0x990>
 800c1a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c1aa:	e74b      	b.n	800c044 <_dtoa_r+0x71c>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	1e5e      	subs	r6, r3, #1
 800c1b0:	9b07      	ldr	r3, [sp, #28]
 800c1b2:	42b3      	cmp	r3, r6
 800c1b4:	bfbf      	itttt	lt
 800c1b6:	9b07      	ldrlt	r3, [sp, #28]
 800c1b8:	9607      	strlt	r6, [sp, #28]
 800c1ba:	1af2      	sublt	r2, r6, r3
 800c1bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c1be:	bfb6      	itet	lt
 800c1c0:	189b      	addlt	r3, r3, r2
 800c1c2:	1b9e      	subge	r6, r3, r6
 800c1c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c1c6:	9b03      	ldr	r3, [sp, #12]
 800c1c8:	bfb8      	it	lt
 800c1ca:	2600      	movlt	r6, #0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	bfb7      	itett	lt
 800c1d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c1d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c1d8:	1a9d      	sublt	r5, r3, r2
 800c1da:	2300      	movlt	r3, #0
 800c1dc:	e734      	b.n	800c048 <_dtoa_r+0x720>
 800c1de:	9e07      	ldr	r6, [sp, #28]
 800c1e0:	9d04      	ldr	r5, [sp, #16]
 800c1e2:	9f08      	ldr	r7, [sp, #32]
 800c1e4:	e73b      	b.n	800c05e <_dtoa_r+0x736>
 800c1e6:	9a07      	ldr	r2, [sp, #28]
 800c1e8:	e767      	b.n	800c0ba <_dtoa_r+0x792>
 800c1ea:	9b06      	ldr	r3, [sp, #24]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	dc18      	bgt.n	800c222 <_dtoa_r+0x8fa>
 800c1f0:	f1ba 0f00 	cmp.w	sl, #0
 800c1f4:	d115      	bne.n	800c222 <_dtoa_r+0x8fa>
 800c1f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1fa:	b993      	cbnz	r3, 800c222 <_dtoa_r+0x8fa>
 800c1fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c200:	0d1b      	lsrs	r3, r3, #20
 800c202:	051b      	lsls	r3, r3, #20
 800c204:	b183      	cbz	r3, 800c228 <_dtoa_r+0x900>
 800c206:	9b04      	ldr	r3, [sp, #16]
 800c208:	3301      	adds	r3, #1
 800c20a:	9304      	str	r3, [sp, #16]
 800c20c:	9b05      	ldr	r3, [sp, #20]
 800c20e:	3301      	adds	r3, #1
 800c210:	9305      	str	r3, [sp, #20]
 800c212:	f04f 0801 	mov.w	r8, #1
 800c216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f47f af6a 	bne.w	800c0f2 <_dtoa_r+0x7ca>
 800c21e:	2001      	movs	r0, #1
 800c220:	e76f      	b.n	800c102 <_dtoa_r+0x7da>
 800c222:	f04f 0800 	mov.w	r8, #0
 800c226:	e7f6      	b.n	800c216 <_dtoa_r+0x8ee>
 800c228:	4698      	mov	r8, r3
 800c22a:	e7f4      	b.n	800c216 <_dtoa_r+0x8ee>
 800c22c:	f43f af7d 	beq.w	800c12a <_dtoa_r+0x802>
 800c230:	4618      	mov	r0, r3
 800c232:	301c      	adds	r0, #28
 800c234:	e772      	b.n	800c11c <_dtoa_r+0x7f4>
 800c236:	9b03      	ldr	r3, [sp, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	dc37      	bgt.n	800c2ac <_dtoa_r+0x984>
 800c23c:	9b06      	ldr	r3, [sp, #24]
 800c23e:	2b02      	cmp	r3, #2
 800c240:	dd34      	ble.n	800c2ac <_dtoa_r+0x984>
 800c242:	9b03      	ldr	r3, [sp, #12]
 800c244:	9302      	str	r3, [sp, #8]
 800c246:	9b02      	ldr	r3, [sp, #8]
 800c248:	b96b      	cbnz	r3, 800c266 <_dtoa_r+0x93e>
 800c24a:	4631      	mov	r1, r6
 800c24c:	2205      	movs	r2, #5
 800c24e:	4620      	mov	r0, r4
 800c250:	f000 f9d4 	bl	800c5fc <__multadd>
 800c254:	4601      	mov	r1, r0
 800c256:	4606      	mov	r6, r0
 800c258:	ee18 0a10 	vmov	r0, s16
 800c25c:	f000 fbee 	bl	800ca3c <__mcmp>
 800c260:	2800      	cmp	r0, #0
 800c262:	f73f adbb 	bgt.w	800bddc <_dtoa_r+0x4b4>
 800c266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c268:	9d01      	ldr	r5, [sp, #4]
 800c26a:	43db      	mvns	r3, r3
 800c26c:	9300      	str	r3, [sp, #0]
 800c26e:	f04f 0800 	mov.w	r8, #0
 800c272:	4631      	mov	r1, r6
 800c274:	4620      	mov	r0, r4
 800c276:	f000 f99f 	bl	800c5b8 <_Bfree>
 800c27a:	2f00      	cmp	r7, #0
 800c27c:	f43f aea4 	beq.w	800bfc8 <_dtoa_r+0x6a0>
 800c280:	f1b8 0f00 	cmp.w	r8, #0
 800c284:	d005      	beq.n	800c292 <_dtoa_r+0x96a>
 800c286:	45b8      	cmp	r8, r7
 800c288:	d003      	beq.n	800c292 <_dtoa_r+0x96a>
 800c28a:	4641      	mov	r1, r8
 800c28c:	4620      	mov	r0, r4
 800c28e:	f000 f993 	bl	800c5b8 <_Bfree>
 800c292:	4639      	mov	r1, r7
 800c294:	4620      	mov	r0, r4
 800c296:	f000 f98f 	bl	800c5b8 <_Bfree>
 800c29a:	e695      	b.n	800bfc8 <_dtoa_r+0x6a0>
 800c29c:	2600      	movs	r6, #0
 800c29e:	4637      	mov	r7, r6
 800c2a0:	e7e1      	b.n	800c266 <_dtoa_r+0x93e>
 800c2a2:	9700      	str	r7, [sp, #0]
 800c2a4:	4637      	mov	r7, r6
 800c2a6:	e599      	b.n	800bddc <_dtoa_r+0x4b4>
 800c2a8:	40240000 	.word	0x40240000
 800c2ac:	9b08      	ldr	r3, [sp, #32]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 80ca 	beq.w	800c448 <_dtoa_r+0xb20>
 800c2b4:	9b03      	ldr	r3, [sp, #12]
 800c2b6:	9302      	str	r3, [sp, #8]
 800c2b8:	2d00      	cmp	r5, #0
 800c2ba:	dd05      	ble.n	800c2c8 <_dtoa_r+0x9a0>
 800c2bc:	4639      	mov	r1, r7
 800c2be:	462a      	mov	r2, r5
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 fb4b 	bl	800c95c <__lshift>
 800c2c6:	4607      	mov	r7, r0
 800c2c8:	f1b8 0f00 	cmp.w	r8, #0
 800c2cc:	d05b      	beq.n	800c386 <_dtoa_r+0xa5e>
 800c2ce:	6879      	ldr	r1, [r7, #4]
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f000 f931 	bl	800c538 <_Balloc>
 800c2d6:	4605      	mov	r5, r0
 800c2d8:	b928      	cbnz	r0, 800c2e6 <_dtoa_r+0x9be>
 800c2da:	4b87      	ldr	r3, [pc, #540]	; (800c4f8 <_dtoa_r+0xbd0>)
 800c2dc:	4602      	mov	r2, r0
 800c2de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c2e2:	f7ff bb3b 	b.w	800b95c <_dtoa_r+0x34>
 800c2e6:	693a      	ldr	r2, [r7, #16]
 800c2e8:	3202      	adds	r2, #2
 800c2ea:	0092      	lsls	r2, r2, #2
 800c2ec:	f107 010c 	add.w	r1, r7, #12
 800c2f0:	300c      	adds	r0, #12
 800c2f2:	f000 f913 	bl	800c51c <memcpy>
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f000 fb2e 	bl	800c95c <__lshift>
 800c300:	9b01      	ldr	r3, [sp, #4]
 800c302:	f103 0901 	add.w	r9, r3, #1
 800c306:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c30a:	4413      	add	r3, r2
 800c30c:	9305      	str	r3, [sp, #20]
 800c30e:	f00a 0301 	and.w	r3, sl, #1
 800c312:	46b8      	mov	r8, r7
 800c314:	9304      	str	r3, [sp, #16]
 800c316:	4607      	mov	r7, r0
 800c318:	4631      	mov	r1, r6
 800c31a:	ee18 0a10 	vmov	r0, s16
 800c31e:	f7ff fa77 	bl	800b810 <quorem>
 800c322:	4641      	mov	r1, r8
 800c324:	9002      	str	r0, [sp, #8]
 800c326:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c32a:	ee18 0a10 	vmov	r0, s16
 800c32e:	f000 fb85 	bl	800ca3c <__mcmp>
 800c332:	463a      	mov	r2, r7
 800c334:	9003      	str	r0, [sp, #12]
 800c336:	4631      	mov	r1, r6
 800c338:	4620      	mov	r0, r4
 800c33a:	f000 fb9b 	bl	800ca74 <__mdiff>
 800c33e:	68c2      	ldr	r2, [r0, #12]
 800c340:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c344:	4605      	mov	r5, r0
 800c346:	bb02      	cbnz	r2, 800c38a <_dtoa_r+0xa62>
 800c348:	4601      	mov	r1, r0
 800c34a:	ee18 0a10 	vmov	r0, s16
 800c34e:	f000 fb75 	bl	800ca3c <__mcmp>
 800c352:	4602      	mov	r2, r0
 800c354:	4629      	mov	r1, r5
 800c356:	4620      	mov	r0, r4
 800c358:	9207      	str	r2, [sp, #28]
 800c35a:	f000 f92d 	bl	800c5b8 <_Bfree>
 800c35e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c362:	ea43 0102 	orr.w	r1, r3, r2
 800c366:	9b04      	ldr	r3, [sp, #16]
 800c368:	430b      	orrs	r3, r1
 800c36a:	464d      	mov	r5, r9
 800c36c:	d10f      	bne.n	800c38e <_dtoa_r+0xa66>
 800c36e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c372:	d02a      	beq.n	800c3ca <_dtoa_r+0xaa2>
 800c374:	9b03      	ldr	r3, [sp, #12]
 800c376:	2b00      	cmp	r3, #0
 800c378:	dd02      	ble.n	800c380 <_dtoa_r+0xa58>
 800c37a:	9b02      	ldr	r3, [sp, #8]
 800c37c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c380:	f88b a000 	strb.w	sl, [fp]
 800c384:	e775      	b.n	800c272 <_dtoa_r+0x94a>
 800c386:	4638      	mov	r0, r7
 800c388:	e7ba      	b.n	800c300 <_dtoa_r+0x9d8>
 800c38a:	2201      	movs	r2, #1
 800c38c:	e7e2      	b.n	800c354 <_dtoa_r+0xa2c>
 800c38e:	9b03      	ldr	r3, [sp, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	db04      	blt.n	800c39e <_dtoa_r+0xa76>
 800c394:	9906      	ldr	r1, [sp, #24]
 800c396:	430b      	orrs	r3, r1
 800c398:	9904      	ldr	r1, [sp, #16]
 800c39a:	430b      	orrs	r3, r1
 800c39c:	d122      	bne.n	800c3e4 <_dtoa_r+0xabc>
 800c39e:	2a00      	cmp	r2, #0
 800c3a0:	ddee      	ble.n	800c380 <_dtoa_r+0xa58>
 800c3a2:	ee18 1a10 	vmov	r1, s16
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	4620      	mov	r0, r4
 800c3aa:	f000 fad7 	bl	800c95c <__lshift>
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	ee08 0a10 	vmov	s16, r0
 800c3b4:	f000 fb42 	bl	800ca3c <__mcmp>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	dc03      	bgt.n	800c3c4 <_dtoa_r+0xa9c>
 800c3bc:	d1e0      	bne.n	800c380 <_dtoa_r+0xa58>
 800c3be:	f01a 0f01 	tst.w	sl, #1
 800c3c2:	d0dd      	beq.n	800c380 <_dtoa_r+0xa58>
 800c3c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3c8:	d1d7      	bne.n	800c37a <_dtoa_r+0xa52>
 800c3ca:	2339      	movs	r3, #57	; 0x39
 800c3cc:	f88b 3000 	strb.w	r3, [fp]
 800c3d0:	462b      	mov	r3, r5
 800c3d2:	461d      	mov	r5, r3
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3da:	2a39      	cmp	r2, #57	; 0x39
 800c3dc:	d071      	beq.n	800c4c2 <_dtoa_r+0xb9a>
 800c3de:	3201      	adds	r2, #1
 800c3e0:	701a      	strb	r2, [r3, #0]
 800c3e2:	e746      	b.n	800c272 <_dtoa_r+0x94a>
 800c3e4:	2a00      	cmp	r2, #0
 800c3e6:	dd07      	ble.n	800c3f8 <_dtoa_r+0xad0>
 800c3e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3ec:	d0ed      	beq.n	800c3ca <_dtoa_r+0xaa2>
 800c3ee:	f10a 0301 	add.w	r3, sl, #1
 800c3f2:	f88b 3000 	strb.w	r3, [fp]
 800c3f6:	e73c      	b.n	800c272 <_dtoa_r+0x94a>
 800c3f8:	9b05      	ldr	r3, [sp, #20]
 800c3fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c3fe:	4599      	cmp	r9, r3
 800c400:	d047      	beq.n	800c492 <_dtoa_r+0xb6a>
 800c402:	ee18 1a10 	vmov	r1, s16
 800c406:	2300      	movs	r3, #0
 800c408:	220a      	movs	r2, #10
 800c40a:	4620      	mov	r0, r4
 800c40c:	f000 f8f6 	bl	800c5fc <__multadd>
 800c410:	45b8      	cmp	r8, r7
 800c412:	ee08 0a10 	vmov	s16, r0
 800c416:	f04f 0300 	mov.w	r3, #0
 800c41a:	f04f 020a 	mov.w	r2, #10
 800c41e:	4641      	mov	r1, r8
 800c420:	4620      	mov	r0, r4
 800c422:	d106      	bne.n	800c432 <_dtoa_r+0xb0a>
 800c424:	f000 f8ea 	bl	800c5fc <__multadd>
 800c428:	4680      	mov	r8, r0
 800c42a:	4607      	mov	r7, r0
 800c42c:	f109 0901 	add.w	r9, r9, #1
 800c430:	e772      	b.n	800c318 <_dtoa_r+0x9f0>
 800c432:	f000 f8e3 	bl	800c5fc <__multadd>
 800c436:	4639      	mov	r1, r7
 800c438:	4680      	mov	r8, r0
 800c43a:	2300      	movs	r3, #0
 800c43c:	220a      	movs	r2, #10
 800c43e:	4620      	mov	r0, r4
 800c440:	f000 f8dc 	bl	800c5fc <__multadd>
 800c444:	4607      	mov	r7, r0
 800c446:	e7f1      	b.n	800c42c <_dtoa_r+0xb04>
 800c448:	9b03      	ldr	r3, [sp, #12]
 800c44a:	9302      	str	r3, [sp, #8]
 800c44c:	9d01      	ldr	r5, [sp, #4]
 800c44e:	ee18 0a10 	vmov	r0, s16
 800c452:	4631      	mov	r1, r6
 800c454:	f7ff f9dc 	bl	800b810 <quorem>
 800c458:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c45c:	9b01      	ldr	r3, [sp, #4]
 800c45e:	f805 ab01 	strb.w	sl, [r5], #1
 800c462:	1aea      	subs	r2, r5, r3
 800c464:	9b02      	ldr	r3, [sp, #8]
 800c466:	4293      	cmp	r3, r2
 800c468:	dd09      	ble.n	800c47e <_dtoa_r+0xb56>
 800c46a:	ee18 1a10 	vmov	r1, s16
 800c46e:	2300      	movs	r3, #0
 800c470:	220a      	movs	r2, #10
 800c472:	4620      	mov	r0, r4
 800c474:	f000 f8c2 	bl	800c5fc <__multadd>
 800c478:	ee08 0a10 	vmov	s16, r0
 800c47c:	e7e7      	b.n	800c44e <_dtoa_r+0xb26>
 800c47e:	9b02      	ldr	r3, [sp, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	bfc8      	it	gt
 800c484:	461d      	movgt	r5, r3
 800c486:	9b01      	ldr	r3, [sp, #4]
 800c488:	bfd8      	it	le
 800c48a:	2501      	movle	r5, #1
 800c48c:	441d      	add	r5, r3
 800c48e:	f04f 0800 	mov.w	r8, #0
 800c492:	ee18 1a10 	vmov	r1, s16
 800c496:	2201      	movs	r2, #1
 800c498:	4620      	mov	r0, r4
 800c49a:	f000 fa5f 	bl	800c95c <__lshift>
 800c49e:	4631      	mov	r1, r6
 800c4a0:	ee08 0a10 	vmov	s16, r0
 800c4a4:	f000 faca 	bl	800ca3c <__mcmp>
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	dc91      	bgt.n	800c3d0 <_dtoa_r+0xaa8>
 800c4ac:	d102      	bne.n	800c4b4 <_dtoa_r+0xb8c>
 800c4ae:	f01a 0f01 	tst.w	sl, #1
 800c4b2:	d18d      	bne.n	800c3d0 <_dtoa_r+0xaa8>
 800c4b4:	462b      	mov	r3, r5
 800c4b6:	461d      	mov	r5, r3
 800c4b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4bc:	2a30      	cmp	r2, #48	; 0x30
 800c4be:	d0fa      	beq.n	800c4b6 <_dtoa_r+0xb8e>
 800c4c0:	e6d7      	b.n	800c272 <_dtoa_r+0x94a>
 800c4c2:	9a01      	ldr	r2, [sp, #4]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d184      	bne.n	800c3d2 <_dtoa_r+0xaaa>
 800c4c8:	9b00      	ldr	r3, [sp, #0]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	2331      	movs	r3, #49	; 0x31
 800c4d0:	7013      	strb	r3, [r2, #0]
 800c4d2:	e6ce      	b.n	800c272 <_dtoa_r+0x94a>
 800c4d4:	4b09      	ldr	r3, [pc, #36]	; (800c4fc <_dtoa_r+0xbd4>)
 800c4d6:	f7ff ba95 	b.w	800ba04 <_dtoa_r+0xdc>
 800c4da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f47f aa6e 	bne.w	800b9be <_dtoa_r+0x96>
 800c4e2:	4b07      	ldr	r3, [pc, #28]	; (800c500 <_dtoa_r+0xbd8>)
 800c4e4:	f7ff ba8e 	b.w	800ba04 <_dtoa_r+0xdc>
 800c4e8:	9b02      	ldr	r3, [sp, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	dcae      	bgt.n	800c44c <_dtoa_r+0xb24>
 800c4ee:	9b06      	ldr	r3, [sp, #24]
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	f73f aea8 	bgt.w	800c246 <_dtoa_r+0x91e>
 800c4f6:	e7a9      	b.n	800c44c <_dtoa_r+0xb24>
 800c4f8:	0800e013 	.word	0x0800e013
 800c4fc:	0800df70 	.word	0x0800df70
 800c500:	0800df94 	.word	0x0800df94

0800c504 <_localeconv_r>:
 800c504:	4800      	ldr	r0, [pc, #0]	; (800c508 <_localeconv_r+0x4>)
 800c506:	4770      	bx	lr
 800c508:	20000160 	.word	0x20000160

0800c50c <malloc>:
 800c50c:	4b02      	ldr	r3, [pc, #8]	; (800c518 <malloc+0xc>)
 800c50e:	4601      	mov	r1, r0
 800c510:	6818      	ldr	r0, [r3, #0]
 800c512:	f000 bc17 	b.w	800cd44 <_malloc_r>
 800c516:	bf00      	nop
 800c518:	2000000c 	.word	0x2000000c

0800c51c <memcpy>:
 800c51c:	440a      	add	r2, r1
 800c51e:	4291      	cmp	r1, r2
 800c520:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c524:	d100      	bne.n	800c528 <memcpy+0xc>
 800c526:	4770      	bx	lr
 800c528:	b510      	push	{r4, lr}
 800c52a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c52e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c532:	4291      	cmp	r1, r2
 800c534:	d1f9      	bne.n	800c52a <memcpy+0xe>
 800c536:	bd10      	pop	{r4, pc}

0800c538 <_Balloc>:
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c53c:	4604      	mov	r4, r0
 800c53e:	460d      	mov	r5, r1
 800c540:	b976      	cbnz	r6, 800c560 <_Balloc+0x28>
 800c542:	2010      	movs	r0, #16
 800c544:	f7ff ffe2 	bl	800c50c <malloc>
 800c548:	4602      	mov	r2, r0
 800c54a:	6260      	str	r0, [r4, #36]	; 0x24
 800c54c:	b920      	cbnz	r0, 800c558 <_Balloc+0x20>
 800c54e:	4b18      	ldr	r3, [pc, #96]	; (800c5b0 <_Balloc+0x78>)
 800c550:	4818      	ldr	r0, [pc, #96]	; (800c5b4 <_Balloc+0x7c>)
 800c552:	2166      	movs	r1, #102	; 0x66
 800c554:	f000 fdd6 	bl	800d104 <__assert_func>
 800c558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c55c:	6006      	str	r6, [r0, #0]
 800c55e:	60c6      	str	r6, [r0, #12]
 800c560:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c562:	68f3      	ldr	r3, [r6, #12]
 800c564:	b183      	cbz	r3, 800c588 <_Balloc+0x50>
 800c566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c56e:	b9b8      	cbnz	r0, 800c5a0 <_Balloc+0x68>
 800c570:	2101      	movs	r1, #1
 800c572:	fa01 f605 	lsl.w	r6, r1, r5
 800c576:	1d72      	adds	r2, r6, #5
 800c578:	0092      	lsls	r2, r2, #2
 800c57a:	4620      	mov	r0, r4
 800c57c:	f000 fb60 	bl	800cc40 <_calloc_r>
 800c580:	b160      	cbz	r0, 800c59c <_Balloc+0x64>
 800c582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c586:	e00e      	b.n	800c5a6 <_Balloc+0x6e>
 800c588:	2221      	movs	r2, #33	; 0x21
 800c58a:	2104      	movs	r1, #4
 800c58c:	4620      	mov	r0, r4
 800c58e:	f000 fb57 	bl	800cc40 <_calloc_r>
 800c592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c594:	60f0      	str	r0, [r6, #12]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d1e4      	bne.n	800c566 <_Balloc+0x2e>
 800c59c:	2000      	movs	r0, #0
 800c59e:	bd70      	pop	{r4, r5, r6, pc}
 800c5a0:	6802      	ldr	r2, [r0, #0]
 800c5a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5ac:	e7f7      	b.n	800c59e <_Balloc+0x66>
 800c5ae:	bf00      	nop
 800c5b0:	0800dfa1 	.word	0x0800dfa1
 800c5b4:	0800e024 	.word	0x0800e024

0800c5b8 <_Bfree>:
 800c5b8:	b570      	push	{r4, r5, r6, lr}
 800c5ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c5bc:	4605      	mov	r5, r0
 800c5be:	460c      	mov	r4, r1
 800c5c0:	b976      	cbnz	r6, 800c5e0 <_Bfree+0x28>
 800c5c2:	2010      	movs	r0, #16
 800c5c4:	f7ff ffa2 	bl	800c50c <malloc>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	6268      	str	r0, [r5, #36]	; 0x24
 800c5cc:	b920      	cbnz	r0, 800c5d8 <_Bfree+0x20>
 800c5ce:	4b09      	ldr	r3, [pc, #36]	; (800c5f4 <_Bfree+0x3c>)
 800c5d0:	4809      	ldr	r0, [pc, #36]	; (800c5f8 <_Bfree+0x40>)
 800c5d2:	218a      	movs	r1, #138	; 0x8a
 800c5d4:	f000 fd96 	bl	800d104 <__assert_func>
 800c5d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c5dc:	6006      	str	r6, [r0, #0]
 800c5de:	60c6      	str	r6, [r0, #12]
 800c5e0:	b13c      	cbz	r4, 800c5f2 <_Bfree+0x3a>
 800c5e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c5e4:	6862      	ldr	r2, [r4, #4]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c5ec:	6021      	str	r1, [r4, #0]
 800c5ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
 800c5f4:	0800dfa1 	.word	0x0800dfa1
 800c5f8:	0800e024 	.word	0x0800e024

0800c5fc <__multadd>:
 800c5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c600:	690d      	ldr	r5, [r1, #16]
 800c602:	4607      	mov	r7, r0
 800c604:	460c      	mov	r4, r1
 800c606:	461e      	mov	r6, r3
 800c608:	f101 0c14 	add.w	ip, r1, #20
 800c60c:	2000      	movs	r0, #0
 800c60e:	f8dc 3000 	ldr.w	r3, [ip]
 800c612:	b299      	uxth	r1, r3
 800c614:	fb02 6101 	mla	r1, r2, r1, r6
 800c618:	0c1e      	lsrs	r6, r3, #16
 800c61a:	0c0b      	lsrs	r3, r1, #16
 800c61c:	fb02 3306 	mla	r3, r2, r6, r3
 800c620:	b289      	uxth	r1, r1
 800c622:	3001      	adds	r0, #1
 800c624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c628:	4285      	cmp	r5, r0
 800c62a:	f84c 1b04 	str.w	r1, [ip], #4
 800c62e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c632:	dcec      	bgt.n	800c60e <__multadd+0x12>
 800c634:	b30e      	cbz	r6, 800c67a <__multadd+0x7e>
 800c636:	68a3      	ldr	r3, [r4, #8]
 800c638:	42ab      	cmp	r3, r5
 800c63a:	dc19      	bgt.n	800c670 <__multadd+0x74>
 800c63c:	6861      	ldr	r1, [r4, #4]
 800c63e:	4638      	mov	r0, r7
 800c640:	3101      	adds	r1, #1
 800c642:	f7ff ff79 	bl	800c538 <_Balloc>
 800c646:	4680      	mov	r8, r0
 800c648:	b928      	cbnz	r0, 800c656 <__multadd+0x5a>
 800c64a:	4602      	mov	r2, r0
 800c64c:	4b0c      	ldr	r3, [pc, #48]	; (800c680 <__multadd+0x84>)
 800c64e:	480d      	ldr	r0, [pc, #52]	; (800c684 <__multadd+0x88>)
 800c650:	21b5      	movs	r1, #181	; 0xb5
 800c652:	f000 fd57 	bl	800d104 <__assert_func>
 800c656:	6922      	ldr	r2, [r4, #16]
 800c658:	3202      	adds	r2, #2
 800c65a:	f104 010c 	add.w	r1, r4, #12
 800c65e:	0092      	lsls	r2, r2, #2
 800c660:	300c      	adds	r0, #12
 800c662:	f7ff ff5b 	bl	800c51c <memcpy>
 800c666:	4621      	mov	r1, r4
 800c668:	4638      	mov	r0, r7
 800c66a:	f7ff ffa5 	bl	800c5b8 <_Bfree>
 800c66e:	4644      	mov	r4, r8
 800c670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c674:	3501      	adds	r5, #1
 800c676:	615e      	str	r6, [r3, #20]
 800c678:	6125      	str	r5, [r4, #16]
 800c67a:	4620      	mov	r0, r4
 800c67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c680:	0800e013 	.word	0x0800e013
 800c684:	0800e024 	.word	0x0800e024

0800c688 <__hi0bits>:
 800c688:	0c03      	lsrs	r3, r0, #16
 800c68a:	041b      	lsls	r3, r3, #16
 800c68c:	b9d3      	cbnz	r3, 800c6c4 <__hi0bits+0x3c>
 800c68e:	0400      	lsls	r0, r0, #16
 800c690:	2310      	movs	r3, #16
 800c692:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c696:	bf04      	itt	eq
 800c698:	0200      	lsleq	r0, r0, #8
 800c69a:	3308      	addeq	r3, #8
 800c69c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c6a0:	bf04      	itt	eq
 800c6a2:	0100      	lsleq	r0, r0, #4
 800c6a4:	3304      	addeq	r3, #4
 800c6a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c6aa:	bf04      	itt	eq
 800c6ac:	0080      	lsleq	r0, r0, #2
 800c6ae:	3302      	addeq	r3, #2
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	db05      	blt.n	800c6c0 <__hi0bits+0x38>
 800c6b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c6b8:	f103 0301 	add.w	r3, r3, #1
 800c6bc:	bf08      	it	eq
 800c6be:	2320      	moveq	r3, #32
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	4770      	bx	lr
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	e7e4      	b.n	800c692 <__hi0bits+0xa>

0800c6c8 <__lo0bits>:
 800c6c8:	6803      	ldr	r3, [r0, #0]
 800c6ca:	f013 0207 	ands.w	r2, r3, #7
 800c6ce:	4601      	mov	r1, r0
 800c6d0:	d00b      	beq.n	800c6ea <__lo0bits+0x22>
 800c6d2:	07da      	lsls	r2, r3, #31
 800c6d4:	d423      	bmi.n	800c71e <__lo0bits+0x56>
 800c6d6:	0798      	lsls	r0, r3, #30
 800c6d8:	bf49      	itett	mi
 800c6da:	085b      	lsrmi	r3, r3, #1
 800c6dc:	089b      	lsrpl	r3, r3, #2
 800c6de:	2001      	movmi	r0, #1
 800c6e0:	600b      	strmi	r3, [r1, #0]
 800c6e2:	bf5c      	itt	pl
 800c6e4:	600b      	strpl	r3, [r1, #0]
 800c6e6:	2002      	movpl	r0, #2
 800c6e8:	4770      	bx	lr
 800c6ea:	b298      	uxth	r0, r3
 800c6ec:	b9a8      	cbnz	r0, 800c71a <__lo0bits+0x52>
 800c6ee:	0c1b      	lsrs	r3, r3, #16
 800c6f0:	2010      	movs	r0, #16
 800c6f2:	b2da      	uxtb	r2, r3
 800c6f4:	b90a      	cbnz	r2, 800c6fa <__lo0bits+0x32>
 800c6f6:	3008      	adds	r0, #8
 800c6f8:	0a1b      	lsrs	r3, r3, #8
 800c6fa:	071a      	lsls	r2, r3, #28
 800c6fc:	bf04      	itt	eq
 800c6fe:	091b      	lsreq	r3, r3, #4
 800c700:	3004      	addeq	r0, #4
 800c702:	079a      	lsls	r2, r3, #30
 800c704:	bf04      	itt	eq
 800c706:	089b      	lsreq	r3, r3, #2
 800c708:	3002      	addeq	r0, #2
 800c70a:	07da      	lsls	r2, r3, #31
 800c70c:	d403      	bmi.n	800c716 <__lo0bits+0x4e>
 800c70e:	085b      	lsrs	r3, r3, #1
 800c710:	f100 0001 	add.w	r0, r0, #1
 800c714:	d005      	beq.n	800c722 <__lo0bits+0x5a>
 800c716:	600b      	str	r3, [r1, #0]
 800c718:	4770      	bx	lr
 800c71a:	4610      	mov	r0, r2
 800c71c:	e7e9      	b.n	800c6f2 <__lo0bits+0x2a>
 800c71e:	2000      	movs	r0, #0
 800c720:	4770      	bx	lr
 800c722:	2020      	movs	r0, #32
 800c724:	4770      	bx	lr
	...

0800c728 <__i2b>:
 800c728:	b510      	push	{r4, lr}
 800c72a:	460c      	mov	r4, r1
 800c72c:	2101      	movs	r1, #1
 800c72e:	f7ff ff03 	bl	800c538 <_Balloc>
 800c732:	4602      	mov	r2, r0
 800c734:	b928      	cbnz	r0, 800c742 <__i2b+0x1a>
 800c736:	4b05      	ldr	r3, [pc, #20]	; (800c74c <__i2b+0x24>)
 800c738:	4805      	ldr	r0, [pc, #20]	; (800c750 <__i2b+0x28>)
 800c73a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c73e:	f000 fce1 	bl	800d104 <__assert_func>
 800c742:	2301      	movs	r3, #1
 800c744:	6144      	str	r4, [r0, #20]
 800c746:	6103      	str	r3, [r0, #16]
 800c748:	bd10      	pop	{r4, pc}
 800c74a:	bf00      	nop
 800c74c:	0800e013 	.word	0x0800e013
 800c750:	0800e024 	.word	0x0800e024

0800c754 <__multiply>:
 800c754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	4691      	mov	r9, r2
 800c75a:	690a      	ldr	r2, [r1, #16]
 800c75c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c760:	429a      	cmp	r2, r3
 800c762:	bfb8      	it	lt
 800c764:	460b      	movlt	r3, r1
 800c766:	460c      	mov	r4, r1
 800c768:	bfbc      	itt	lt
 800c76a:	464c      	movlt	r4, r9
 800c76c:	4699      	movlt	r9, r3
 800c76e:	6927      	ldr	r7, [r4, #16]
 800c770:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c774:	68a3      	ldr	r3, [r4, #8]
 800c776:	6861      	ldr	r1, [r4, #4]
 800c778:	eb07 060a 	add.w	r6, r7, sl
 800c77c:	42b3      	cmp	r3, r6
 800c77e:	b085      	sub	sp, #20
 800c780:	bfb8      	it	lt
 800c782:	3101      	addlt	r1, #1
 800c784:	f7ff fed8 	bl	800c538 <_Balloc>
 800c788:	b930      	cbnz	r0, 800c798 <__multiply+0x44>
 800c78a:	4602      	mov	r2, r0
 800c78c:	4b44      	ldr	r3, [pc, #272]	; (800c8a0 <__multiply+0x14c>)
 800c78e:	4845      	ldr	r0, [pc, #276]	; (800c8a4 <__multiply+0x150>)
 800c790:	f240 115d 	movw	r1, #349	; 0x15d
 800c794:	f000 fcb6 	bl	800d104 <__assert_func>
 800c798:	f100 0514 	add.w	r5, r0, #20
 800c79c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7a0:	462b      	mov	r3, r5
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	4543      	cmp	r3, r8
 800c7a6:	d321      	bcc.n	800c7ec <__multiply+0x98>
 800c7a8:	f104 0314 	add.w	r3, r4, #20
 800c7ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c7b0:	f109 0314 	add.w	r3, r9, #20
 800c7b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c7b8:	9202      	str	r2, [sp, #8]
 800c7ba:	1b3a      	subs	r2, r7, r4
 800c7bc:	3a15      	subs	r2, #21
 800c7be:	f022 0203 	bic.w	r2, r2, #3
 800c7c2:	3204      	adds	r2, #4
 800c7c4:	f104 0115 	add.w	r1, r4, #21
 800c7c8:	428f      	cmp	r7, r1
 800c7ca:	bf38      	it	cc
 800c7cc:	2204      	movcc	r2, #4
 800c7ce:	9201      	str	r2, [sp, #4]
 800c7d0:	9a02      	ldr	r2, [sp, #8]
 800c7d2:	9303      	str	r3, [sp, #12]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d80c      	bhi.n	800c7f2 <__multiply+0x9e>
 800c7d8:	2e00      	cmp	r6, #0
 800c7da:	dd03      	ble.n	800c7e4 <__multiply+0x90>
 800c7dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d05a      	beq.n	800c89a <__multiply+0x146>
 800c7e4:	6106      	str	r6, [r0, #16]
 800c7e6:	b005      	add	sp, #20
 800c7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ec:	f843 2b04 	str.w	r2, [r3], #4
 800c7f0:	e7d8      	b.n	800c7a4 <__multiply+0x50>
 800c7f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7f6:	f1ba 0f00 	cmp.w	sl, #0
 800c7fa:	d024      	beq.n	800c846 <__multiply+0xf2>
 800c7fc:	f104 0e14 	add.w	lr, r4, #20
 800c800:	46a9      	mov	r9, r5
 800c802:	f04f 0c00 	mov.w	ip, #0
 800c806:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c80a:	f8d9 1000 	ldr.w	r1, [r9]
 800c80e:	fa1f fb82 	uxth.w	fp, r2
 800c812:	b289      	uxth	r1, r1
 800c814:	fb0a 110b 	mla	r1, sl, fp, r1
 800c818:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c81c:	f8d9 2000 	ldr.w	r2, [r9]
 800c820:	4461      	add	r1, ip
 800c822:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c826:	fb0a c20b 	mla	r2, sl, fp, ip
 800c82a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c82e:	b289      	uxth	r1, r1
 800c830:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c834:	4577      	cmp	r7, lr
 800c836:	f849 1b04 	str.w	r1, [r9], #4
 800c83a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c83e:	d8e2      	bhi.n	800c806 <__multiply+0xb2>
 800c840:	9a01      	ldr	r2, [sp, #4]
 800c842:	f845 c002 	str.w	ip, [r5, r2]
 800c846:	9a03      	ldr	r2, [sp, #12]
 800c848:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c84c:	3304      	adds	r3, #4
 800c84e:	f1b9 0f00 	cmp.w	r9, #0
 800c852:	d020      	beq.n	800c896 <__multiply+0x142>
 800c854:	6829      	ldr	r1, [r5, #0]
 800c856:	f104 0c14 	add.w	ip, r4, #20
 800c85a:	46ae      	mov	lr, r5
 800c85c:	f04f 0a00 	mov.w	sl, #0
 800c860:	f8bc b000 	ldrh.w	fp, [ip]
 800c864:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c868:	fb09 220b 	mla	r2, r9, fp, r2
 800c86c:	4492      	add	sl, r2
 800c86e:	b289      	uxth	r1, r1
 800c870:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c874:	f84e 1b04 	str.w	r1, [lr], #4
 800c878:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c87c:	f8be 1000 	ldrh.w	r1, [lr]
 800c880:	0c12      	lsrs	r2, r2, #16
 800c882:	fb09 1102 	mla	r1, r9, r2, r1
 800c886:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c88a:	4567      	cmp	r7, ip
 800c88c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c890:	d8e6      	bhi.n	800c860 <__multiply+0x10c>
 800c892:	9a01      	ldr	r2, [sp, #4]
 800c894:	50a9      	str	r1, [r5, r2]
 800c896:	3504      	adds	r5, #4
 800c898:	e79a      	b.n	800c7d0 <__multiply+0x7c>
 800c89a:	3e01      	subs	r6, #1
 800c89c:	e79c      	b.n	800c7d8 <__multiply+0x84>
 800c89e:	bf00      	nop
 800c8a0:	0800e013 	.word	0x0800e013
 800c8a4:	0800e024 	.word	0x0800e024

0800c8a8 <__pow5mult>:
 800c8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8ac:	4615      	mov	r5, r2
 800c8ae:	f012 0203 	ands.w	r2, r2, #3
 800c8b2:	4606      	mov	r6, r0
 800c8b4:	460f      	mov	r7, r1
 800c8b6:	d007      	beq.n	800c8c8 <__pow5mult+0x20>
 800c8b8:	4c25      	ldr	r4, [pc, #148]	; (800c950 <__pow5mult+0xa8>)
 800c8ba:	3a01      	subs	r2, #1
 800c8bc:	2300      	movs	r3, #0
 800c8be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8c2:	f7ff fe9b 	bl	800c5fc <__multadd>
 800c8c6:	4607      	mov	r7, r0
 800c8c8:	10ad      	asrs	r5, r5, #2
 800c8ca:	d03d      	beq.n	800c948 <__pow5mult+0xa0>
 800c8cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c8ce:	b97c      	cbnz	r4, 800c8f0 <__pow5mult+0x48>
 800c8d0:	2010      	movs	r0, #16
 800c8d2:	f7ff fe1b 	bl	800c50c <malloc>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	6270      	str	r0, [r6, #36]	; 0x24
 800c8da:	b928      	cbnz	r0, 800c8e8 <__pow5mult+0x40>
 800c8dc:	4b1d      	ldr	r3, [pc, #116]	; (800c954 <__pow5mult+0xac>)
 800c8de:	481e      	ldr	r0, [pc, #120]	; (800c958 <__pow5mult+0xb0>)
 800c8e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c8e4:	f000 fc0e 	bl	800d104 <__assert_func>
 800c8e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8ec:	6004      	str	r4, [r0, #0]
 800c8ee:	60c4      	str	r4, [r0, #12]
 800c8f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c8f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8f8:	b94c      	cbnz	r4, 800c90e <__pow5mult+0x66>
 800c8fa:	f240 2171 	movw	r1, #625	; 0x271
 800c8fe:	4630      	mov	r0, r6
 800c900:	f7ff ff12 	bl	800c728 <__i2b>
 800c904:	2300      	movs	r3, #0
 800c906:	f8c8 0008 	str.w	r0, [r8, #8]
 800c90a:	4604      	mov	r4, r0
 800c90c:	6003      	str	r3, [r0, #0]
 800c90e:	f04f 0900 	mov.w	r9, #0
 800c912:	07eb      	lsls	r3, r5, #31
 800c914:	d50a      	bpl.n	800c92c <__pow5mult+0x84>
 800c916:	4639      	mov	r1, r7
 800c918:	4622      	mov	r2, r4
 800c91a:	4630      	mov	r0, r6
 800c91c:	f7ff ff1a 	bl	800c754 <__multiply>
 800c920:	4639      	mov	r1, r7
 800c922:	4680      	mov	r8, r0
 800c924:	4630      	mov	r0, r6
 800c926:	f7ff fe47 	bl	800c5b8 <_Bfree>
 800c92a:	4647      	mov	r7, r8
 800c92c:	106d      	asrs	r5, r5, #1
 800c92e:	d00b      	beq.n	800c948 <__pow5mult+0xa0>
 800c930:	6820      	ldr	r0, [r4, #0]
 800c932:	b938      	cbnz	r0, 800c944 <__pow5mult+0x9c>
 800c934:	4622      	mov	r2, r4
 800c936:	4621      	mov	r1, r4
 800c938:	4630      	mov	r0, r6
 800c93a:	f7ff ff0b 	bl	800c754 <__multiply>
 800c93e:	6020      	str	r0, [r4, #0]
 800c940:	f8c0 9000 	str.w	r9, [r0]
 800c944:	4604      	mov	r4, r0
 800c946:	e7e4      	b.n	800c912 <__pow5mult+0x6a>
 800c948:	4638      	mov	r0, r7
 800c94a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c94e:	bf00      	nop
 800c950:	0800e170 	.word	0x0800e170
 800c954:	0800dfa1 	.word	0x0800dfa1
 800c958:	0800e024 	.word	0x0800e024

0800c95c <__lshift>:
 800c95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c960:	460c      	mov	r4, r1
 800c962:	6849      	ldr	r1, [r1, #4]
 800c964:	6923      	ldr	r3, [r4, #16]
 800c966:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c96a:	68a3      	ldr	r3, [r4, #8]
 800c96c:	4607      	mov	r7, r0
 800c96e:	4691      	mov	r9, r2
 800c970:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c974:	f108 0601 	add.w	r6, r8, #1
 800c978:	42b3      	cmp	r3, r6
 800c97a:	db0b      	blt.n	800c994 <__lshift+0x38>
 800c97c:	4638      	mov	r0, r7
 800c97e:	f7ff fddb 	bl	800c538 <_Balloc>
 800c982:	4605      	mov	r5, r0
 800c984:	b948      	cbnz	r0, 800c99a <__lshift+0x3e>
 800c986:	4602      	mov	r2, r0
 800c988:	4b2a      	ldr	r3, [pc, #168]	; (800ca34 <__lshift+0xd8>)
 800c98a:	482b      	ldr	r0, [pc, #172]	; (800ca38 <__lshift+0xdc>)
 800c98c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c990:	f000 fbb8 	bl	800d104 <__assert_func>
 800c994:	3101      	adds	r1, #1
 800c996:	005b      	lsls	r3, r3, #1
 800c998:	e7ee      	b.n	800c978 <__lshift+0x1c>
 800c99a:	2300      	movs	r3, #0
 800c99c:	f100 0114 	add.w	r1, r0, #20
 800c9a0:	f100 0210 	add.w	r2, r0, #16
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	4553      	cmp	r3, sl
 800c9a8:	db37      	blt.n	800ca1a <__lshift+0xbe>
 800c9aa:	6920      	ldr	r0, [r4, #16]
 800c9ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9b0:	f104 0314 	add.w	r3, r4, #20
 800c9b4:	f019 091f 	ands.w	r9, r9, #31
 800c9b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c9c0:	d02f      	beq.n	800ca22 <__lshift+0xc6>
 800c9c2:	f1c9 0e20 	rsb	lr, r9, #32
 800c9c6:	468a      	mov	sl, r1
 800c9c8:	f04f 0c00 	mov.w	ip, #0
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	fa02 f209 	lsl.w	r2, r2, r9
 800c9d2:	ea42 020c 	orr.w	r2, r2, ip
 800c9d6:	f84a 2b04 	str.w	r2, [sl], #4
 800c9da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9de:	4298      	cmp	r0, r3
 800c9e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c9e4:	d8f2      	bhi.n	800c9cc <__lshift+0x70>
 800c9e6:	1b03      	subs	r3, r0, r4
 800c9e8:	3b15      	subs	r3, #21
 800c9ea:	f023 0303 	bic.w	r3, r3, #3
 800c9ee:	3304      	adds	r3, #4
 800c9f0:	f104 0215 	add.w	r2, r4, #21
 800c9f4:	4290      	cmp	r0, r2
 800c9f6:	bf38      	it	cc
 800c9f8:	2304      	movcc	r3, #4
 800c9fa:	f841 c003 	str.w	ip, [r1, r3]
 800c9fe:	f1bc 0f00 	cmp.w	ip, #0
 800ca02:	d001      	beq.n	800ca08 <__lshift+0xac>
 800ca04:	f108 0602 	add.w	r6, r8, #2
 800ca08:	3e01      	subs	r6, #1
 800ca0a:	4638      	mov	r0, r7
 800ca0c:	612e      	str	r6, [r5, #16]
 800ca0e:	4621      	mov	r1, r4
 800ca10:	f7ff fdd2 	bl	800c5b8 <_Bfree>
 800ca14:	4628      	mov	r0, r5
 800ca16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca1e:	3301      	adds	r3, #1
 800ca20:	e7c1      	b.n	800c9a6 <__lshift+0x4a>
 800ca22:	3904      	subs	r1, #4
 800ca24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca28:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca2c:	4298      	cmp	r0, r3
 800ca2e:	d8f9      	bhi.n	800ca24 <__lshift+0xc8>
 800ca30:	e7ea      	b.n	800ca08 <__lshift+0xac>
 800ca32:	bf00      	nop
 800ca34:	0800e013 	.word	0x0800e013
 800ca38:	0800e024 	.word	0x0800e024

0800ca3c <__mcmp>:
 800ca3c:	b530      	push	{r4, r5, lr}
 800ca3e:	6902      	ldr	r2, [r0, #16]
 800ca40:	690c      	ldr	r4, [r1, #16]
 800ca42:	1b12      	subs	r2, r2, r4
 800ca44:	d10e      	bne.n	800ca64 <__mcmp+0x28>
 800ca46:	f100 0314 	add.w	r3, r0, #20
 800ca4a:	3114      	adds	r1, #20
 800ca4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca5c:	42a5      	cmp	r5, r4
 800ca5e:	d003      	beq.n	800ca68 <__mcmp+0x2c>
 800ca60:	d305      	bcc.n	800ca6e <__mcmp+0x32>
 800ca62:	2201      	movs	r2, #1
 800ca64:	4610      	mov	r0, r2
 800ca66:	bd30      	pop	{r4, r5, pc}
 800ca68:	4283      	cmp	r3, r0
 800ca6a:	d3f3      	bcc.n	800ca54 <__mcmp+0x18>
 800ca6c:	e7fa      	b.n	800ca64 <__mcmp+0x28>
 800ca6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca72:	e7f7      	b.n	800ca64 <__mcmp+0x28>

0800ca74 <__mdiff>:
 800ca74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca78:	460c      	mov	r4, r1
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	4611      	mov	r1, r2
 800ca7e:	4620      	mov	r0, r4
 800ca80:	4690      	mov	r8, r2
 800ca82:	f7ff ffdb 	bl	800ca3c <__mcmp>
 800ca86:	1e05      	subs	r5, r0, #0
 800ca88:	d110      	bne.n	800caac <__mdiff+0x38>
 800ca8a:	4629      	mov	r1, r5
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f7ff fd53 	bl	800c538 <_Balloc>
 800ca92:	b930      	cbnz	r0, 800caa2 <__mdiff+0x2e>
 800ca94:	4b3a      	ldr	r3, [pc, #232]	; (800cb80 <__mdiff+0x10c>)
 800ca96:	4602      	mov	r2, r0
 800ca98:	f240 2132 	movw	r1, #562	; 0x232
 800ca9c:	4839      	ldr	r0, [pc, #228]	; (800cb84 <__mdiff+0x110>)
 800ca9e:	f000 fb31 	bl	800d104 <__assert_func>
 800caa2:	2301      	movs	r3, #1
 800caa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800caa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caac:	bfa4      	itt	ge
 800caae:	4643      	movge	r3, r8
 800cab0:	46a0      	movge	r8, r4
 800cab2:	4630      	mov	r0, r6
 800cab4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cab8:	bfa6      	itte	ge
 800caba:	461c      	movge	r4, r3
 800cabc:	2500      	movge	r5, #0
 800cabe:	2501      	movlt	r5, #1
 800cac0:	f7ff fd3a 	bl	800c538 <_Balloc>
 800cac4:	b920      	cbnz	r0, 800cad0 <__mdiff+0x5c>
 800cac6:	4b2e      	ldr	r3, [pc, #184]	; (800cb80 <__mdiff+0x10c>)
 800cac8:	4602      	mov	r2, r0
 800caca:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cace:	e7e5      	b.n	800ca9c <__mdiff+0x28>
 800cad0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cad4:	6926      	ldr	r6, [r4, #16]
 800cad6:	60c5      	str	r5, [r0, #12]
 800cad8:	f104 0914 	add.w	r9, r4, #20
 800cadc:	f108 0514 	add.w	r5, r8, #20
 800cae0:	f100 0e14 	add.w	lr, r0, #20
 800cae4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cae8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800caec:	f108 0210 	add.w	r2, r8, #16
 800caf0:	46f2      	mov	sl, lr
 800caf2:	2100      	movs	r1, #0
 800caf4:	f859 3b04 	ldr.w	r3, [r9], #4
 800caf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cafc:	fa1f f883 	uxth.w	r8, r3
 800cb00:	fa11 f18b 	uxtah	r1, r1, fp
 800cb04:	0c1b      	lsrs	r3, r3, #16
 800cb06:	eba1 0808 	sub.w	r8, r1, r8
 800cb0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cb0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cb12:	fa1f f888 	uxth.w	r8, r8
 800cb16:	1419      	asrs	r1, r3, #16
 800cb18:	454e      	cmp	r6, r9
 800cb1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cb1e:	f84a 3b04 	str.w	r3, [sl], #4
 800cb22:	d8e7      	bhi.n	800caf4 <__mdiff+0x80>
 800cb24:	1b33      	subs	r3, r6, r4
 800cb26:	3b15      	subs	r3, #21
 800cb28:	f023 0303 	bic.w	r3, r3, #3
 800cb2c:	3304      	adds	r3, #4
 800cb2e:	3415      	adds	r4, #21
 800cb30:	42a6      	cmp	r6, r4
 800cb32:	bf38      	it	cc
 800cb34:	2304      	movcc	r3, #4
 800cb36:	441d      	add	r5, r3
 800cb38:	4473      	add	r3, lr
 800cb3a:	469e      	mov	lr, r3
 800cb3c:	462e      	mov	r6, r5
 800cb3e:	4566      	cmp	r6, ip
 800cb40:	d30e      	bcc.n	800cb60 <__mdiff+0xec>
 800cb42:	f10c 0203 	add.w	r2, ip, #3
 800cb46:	1b52      	subs	r2, r2, r5
 800cb48:	f022 0203 	bic.w	r2, r2, #3
 800cb4c:	3d03      	subs	r5, #3
 800cb4e:	45ac      	cmp	ip, r5
 800cb50:	bf38      	it	cc
 800cb52:	2200      	movcc	r2, #0
 800cb54:	441a      	add	r2, r3
 800cb56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cb5a:	b17b      	cbz	r3, 800cb7c <__mdiff+0x108>
 800cb5c:	6107      	str	r7, [r0, #16]
 800cb5e:	e7a3      	b.n	800caa8 <__mdiff+0x34>
 800cb60:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb64:	fa11 f288 	uxtah	r2, r1, r8
 800cb68:	1414      	asrs	r4, r2, #16
 800cb6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb6e:	b292      	uxth	r2, r2
 800cb70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb74:	f84e 2b04 	str.w	r2, [lr], #4
 800cb78:	1421      	asrs	r1, r4, #16
 800cb7a:	e7e0      	b.n	800cb3e <__mdiff+0xca>
 800cb7c:	3f01      	subs	r7, #1
 800cb7e:	e7ea      	b.n	800cb56 <__mdiff+0xe2>
 800cb80:	0800e013 	.word	0x0800e013
 800cb84:	0800e024 	.word	0x0800e024

0800cb88 <__d2b>:
 800cb88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cb8c:	4689      	mov	r9, r1
 800cb8e:	2101      	movs	r1, #1
 800cb90:	ec57 6b10 	vmov	r6, r7, d0
 800cb94:	4690      	mov	r8, r2
 800cb96:	f7ff fccf 	bl	800c538 <_Balloc>
 800cb9a:	4604      	mov	r4, r0
 800cb9c:	b930      	cbnz	r0, 800cbac <__d2b+0x24>
 800cb9e:	4602      	mov	r2, r0
 800cba0:	4b25      	ldr	r3, [pc, #148]	; (800cc38 <__d2b+0xb0>)
 800cba2:	4826      	ldr	r0, [pc, #152]	; (800cc3c <__d2b+0xb4>)
 800cba4:	f240 310a 	movw	r1, #778	; 0x30a
 800cba8:	f000 faac 	bl	800d104 <__assert_func>
 800cbac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cbb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cbb4:	bb35      	cbnz	r5, 800cc04 <__d2b+0x7c>
 800cbb6:	2e00      	cmp	r6, #0
 800cbb8:	9301      	str	r3, [sp, #4]
 800cbba:	d028      	beq.n	800cc0e <__d2b+0x86>
 800cbbc:	4668      	mov	r0, sp
 800cbbe:	9600      	str	r6, [sp, #0]
 800cbc0:	f7ff fd82 	bl	800c6c8 <__lo0bits>
 800cbc4:	9900      	ldr	r1, [sp, #0]
 800cbc6:	b300      	cbz	r0, 800cc0a <__d2b+0x82>
 800cbc8:	9a01      	ldr	r2, [sp, #4]
 800cbca:	f1c0 0320 	rsb	r3, r0, #32
 800cbce:	fa02 f303 	lsl.w	r3, r2, r3
 800cbd2:	430b      	orrs	r3, r1
 800cbd4:	40c2      	lsrs	r2, r0
 800cbd6:	6163      	str	r3, [r4, #20]
 800cbd8:	9201      	str	r2, [sp, #4]
 800cbda:	9b01      	ldr	r3, [sp, #4]
 800cbdc:	61a3      	str	r3, [r4, #24]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	bf14      	ite	ne
 800cbe2:	2202      	movne	r2, #2
 800cbe4:	2201      	moveq	r2, #1
 800cbe6:	6122      	str	r2, [r4, #16]
 800cbe8:	b1d5      	cbz	r5, 800cc20 <__d2b+0x98>
 800cbea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cbee:	4405      	add	r5, r0
 800cbf0:	f8c9 5000 	str.w	r5, [r9]
 800cbf4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cbf8:	f8c8 0000 	str.w	r0, [r8]
 800cbfc:	4620      	mov	r0, r4
 800cbfe:	b003      	add	sp, #12
 800cc00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cc08:	e7d5      	b.n	800cbb6 <__d2b+0x2e>
 800cc0a:	6161      	str	r1, [r4, #20]
 800cc0c:	e7e5      	b.n	800cbda <__d2b+0x52>
 800cc0e:	a801      	add	r0, sp, #4
 800cc10:	f7ff fd5a 	bl	800c6c8 <__lo0bits>
 800cc14:	9b01      	ldr	r3, [sp, #4]
 800cc16:	6163      	str	r3, [r4, #20]
 800cc18:	2201      	movs	r2, #1
 800cc1a:	6122      	str	r2, [r4, #16]
 800cc1c:	3020      	adds	r0, #32
 800cc1e:	e7e3      	b.n	800cbe8 <__d2b+0x60>
 800cc20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cc24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cc28:	f8c9 0000 	str.w	r0, [r9]
 800cc2c:	6918      	ldr	r0, [r3, #16]
 800cc2e:	f7ff fd2b 	bl	800c688 <__hi0bits>
 800cc32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cc36:	e7df      	b.n	800cbf8 <__d2b+0x70>
 800cc38:	0800e013 	.word	0x0800e013
 800cc3c:	0800e024 	.word	0x0800e024

0800cc40 <_calloc_r>:
 800cc40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc42:	fba1 2402 	umull	r2, r4, r1, r2
 800cc46:	b94c      	cbnz	r4, 800cc5c <_calloc_r+0x1c>
 800cc48:	4611      	mov	r1, r2
 800cc4a:	9201      	str	r2, [sp, #4]
 800cc4c:	f000 f87a 	bl	800cd44 <_malloc_r>
 800cc50:	9a01      	ldr	r2, [sp, #4]
 800cc52:	4605      	mov	r5, r0
 800cc54:	b930      	cbnz	r0, 800cc64 <_calloc_r+0x24>
 800cc56:	4628      	mov	r0, r5
 800cc58:	b003      	add	sp, #12
 800cc5a:	bd30      	pop	{r4, r5, pc}
 800cc5c:	220c      	movs	r2, #12
 800cc5e:	6002      	str	r2, [r0, #0]
 800cc60:	2500      	movs	r5, #0
 800cc62:	e7f8      	b.n	800cc56 <_calloc_r+0x16>
 800cc64:	4621      	mov	r1, r4
 800cc66:	f7fe f941 	bl	800aeec <memset>
 800cc6a:	e7f4      	b.n	800cc56 <_calloc_r+0x16>

0800cc6c <_free_r>:
 800cc6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc6e:	2900      	cmp	r1, #0
 800cc70:	d044      	beq.n	800ccfc <_free_r+0x90>
 800cc72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc76:	9001      	str	r0, [sp, #4]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f1a1 0404 	sub.w	r4, r1, #4
 800cc7e:	bfb8      	it	lt
 800cc80:	18e4      	addlt	r4, r4, r3
 800cc82:	f000 fa9b 	bl	800d1bc <__malloc_lock>
 800cc86:	4a1e      	ldr	r2, [pc, #120]	; (800cd00 <_free_r+0x94>)
 800cc88:	9801      	ldr	r0, [sp, #4]
 800cc8a:	6813      	ldr	r3, [r2, #0]
 800cc8c:	b933      	cbnz	r3, 800cc9c <_free_r+0x30>
 800cc8e:	6063      	str	r3, [r4, #4]
 800cc90:	6014      	str	r4, [r2, #0]
 800cc92:	b003      	add	sp, #12
 800cc94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc98:	f000 ba96 	b.w	800d1c8 <__malloc_unlock>
 800cc9c:	42a3      	cmp	r3, r4
 800cc9e:	d908      	bls.n	800ccb2 <_free_r+0x46>
 800cca0:	6825      	ldr	r5, [r4, #0]
 800cca2:	1961      	adds	r1, r4, r5
 800cca4:	428b      	cmp	r3, r1
 800cca6:	bf01      	itttt	eq
 800cca8:	6819      	ldreq	r1, [r3, #0]
 800ccaa:	685b      	ldreq	r3, [r3, #4]
 800ccac:	1949      	addeq	r1, r1, r5
 800ccae:	6021      	streq	r1, [r4, #0]
 800ccb0:	e7ed      	b.n	800cc8e <_free_r+0x22>
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	b10b      	cbz	r3, 800ccbc <_free_r+0x50>
 800ccb8:	42a3      	cmp	r3, r4
 800ccba:	d9fa      	bls.n	800ccb2 <_free_r+0x46>
 800ccbc:	6811      	ldr	r1, [r2, #0]
 800ccbe:	1855      	adds	r5, r2, r1
 800ccc0:	42a5      	cmp	r5, r4
 800ccc2:	d10b      	bne.n	800ccdc <_free_r+0x70>
 800ccc4:	6824      	ldr	r4, [r4, #0]
 800ccc6:	4421      	add	r1, r4
 800ccc8:	1854      	adds	r4, r2, r1
 800ccca:	42a3      	cmp	r3, r4
 800cccc:	6011      	str	r1, [r2, #0]
 800ccce:	d1e0      	bne.n	800cc92 <_free_r+0x26>
 800ccd0:	681c      	ldr	r4, [r3, #0]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	6053      	str	r3, [r2, #4]
 800ccd6:	4421      	add	r1, r4
 800ccd8:	6011      	str	r1, [r2, #0]
 800ccda:	e7da      	b.n	800cc92 <_free_r+0x26>
 800ccdc:	d902      	bls.n	800cce4 <_free_r+0x78>
 800ccde:	230c      	movs	r3, #12
 800cce0:	6003      	str	r3, [r0, #0]
 800cce2:	e7d6      	b.n	800cc92 <_free_r+0x26>
 800cce4:	6825      	ldr	r5, [r4, #0]
 800cce6:	1961      	adds	r1, r4, r5
 800cce8:	428b      	cmp	r3, r1
 800ccea:	bf04      	itt	eq
 800ccec:	6819      	ldreq	r1, [r3, #0]
 800ccee:	685b      	ldreq	r3, [r3, #4]
 800ccf0:	6063      	str	r3, [r4, #4]
 800ccf2:	bf04      	itt	eq
 800ccf4:	1949      	addeq	r1, r1, r5
 800ccf6:	6021      	streq	r1, [r4, #0]
 800ccf8:	6054      	str	r4, [r2, #4]
 800ccfa:	e7ca      	b.n	800cc92 <_free_r+0x26>
 800ccfc:	b003      	add	sp, #12
 800ccfe:	bd30      	pop	{r4, r5, pc}
 800cd00:	20005b4c 	.word	0x20005b4c

0800cd04 <sbrk_aligned>:
 800cd04:	b570      	push	{r4, r5, r6, lr}
 800cd06:	4e0e      	ldr	r6, [pc, #56]	; (800cd40 <sbrk_aligned+0x3c>)
 800cd08:	460c      	mov	r4, r1
 800cd0a:	6831      	ldr	r1, [r6, #0]
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	b911      	cbnz	r1, 800cd16 <sbrk_aligned+0x12>
 800cd10:	f000 f9e8 	bl	800d0e4 <_sbrk_r>
 800cd14:	6030      	str	r0, [r6, #0]
 800cd16:	4621      	mov	r1, r4
 800cd18:	4628      	mov	r0, r5
 800cd1a:	f000 f9e3 	bl	800d0e4 <_sbrk_r>
 800cd1e:	1c43      	adds	r3, r0, #1
 800cd20:	d00a      	beq.n	800cd38 <sbrk_aligned+0x34>
 800cd22:	1cc4      	adds	r4, r0, #3
 800cd24:	f024 0403 	bic.w	r4, r4, #3
 800cd28:	42a0      	cmp	r0, r4
 800cd2a:	d007      	beq.n	800cd3c <sbrk_aligned+0x38>
 800cd2c:	1a21      	subs	r1, r4, r0
 800cd2e:	4628      	mov	r0, r5
 800cd30:	f000 f9d8 	bl	800d0e4 <_sbrk_r>
 800cd34:	3001      	adds	r0, #1
 800cd36:	d101      	bne.n	800cd3c <sbrk_aligned+0x38>
 800cd38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	bd70      	pop	{r4, r5, r6, pc}
 800cd40:	20005b50 	.word	0x20005b50

0800cd44 <_malloc_r>:
 800cd44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd48:	1ccd      	adds	r5, r1, #3
 800cd4a:	f025 0503 	bic.w	r5, r5, #3
 800cd4e:	3508      	adds	r5, #8
 800cd50:	2d0c      	cmp	r5, #12
 800cd52:	bf38      	it	cc
 800cd54:	250c      	movcc	r5, #12
 800cd56:	2d00      	cmp	r5, #0
 800cd58:	4607      	mov	r7, r0
 800cd5a:	db01      	blt.n	800cd60 <_malloc_r+0x1c>
 800cd5c:	42a9      	cmp	r1, r5
 800cd5e:	d905      	bls.n	800cd6c <_malloc_r+0x28>
 800cd60:	230c      	movs	r3, #12
 800cd62:	603b      	str	r3, [r7, #0]
 800cd64:	2600      	movs	r6, #0
 800cd66:	4630      	mov	r0, r6
 800cd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd6c:	4e2e      	ldr	r6, [pc, #184]	; (800ce28 <_malloc_r+0xe4>)
 800cd6e:	f000 fa25 	bl	800d1bc <__malloc_lock>
 800cd72:	6833      	ldr	r3, [r6, #0]
 800cd74:	461c      	mov	r4, r3
 800cd76:	bb34      	cbnz	r4, 800cdc6 <_malloc_r+0x82>
 800cd78:	4629      	mov	r1, r5
 800cd7a:	4638      	mov	r0, r7
 800cd7c:	f7ff ffc2 	bl	800cd04 <sbrk_aligned>
 800cd80:	1c43      	adds	r3, r0, #1
 800cd82:	4604      	mov	r4, r0
 800cd84:	d14d      	bne.n	800ce22 <_malloc_r+0xde>
 800cd86:	6834      	ldr	r4, [r6, #0]
 800cd88:	4626      	mov	r6, r4
 800cd8a:	2e00      	cmp	r6, #0
 800cd8c:	d140      	bne.n	800ce10 <_malloc_r+0xcc>
 800cd8e:	6823      	ldr	r3, [r4, #0]
 800cd90:	4631      	mov	r1, r6
 800cd92:	4638      	mov	r0, r7
 800cd94:	eb04 0803 	add.w	r8, r4, r3
 800cd98:	f000 f9a4 	bl	800d0e4 <_sbrk_r>
 800cd9c:	4580      	cmp	r8, r0
 800cd9e:	d13a      	bne.n	800ce16 <_malloc_r+0xd2>
 800cda0:	6821      	ldr	r1, [r4, #0]
 800cda2:	3503      	adds	r5, #3
 800cda4:	1a6d      	subs	r5, r5, r1
 800cda6:	f025 0503 	bic.w	r5, r5, #3
 800cdaa:	3508      	adds	r5, #8
 800cdac:	2d0c      	cmp	r5, #12
 800cdae:	bf38      	it	cc
 800cdb0:	250c      	movcc	r5, #12
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	4638      	mov	r0, r7
 800cdb6:	f7ff ffa5 	bl	800cd04 <sbrk_aligned>
 800cdba:	3001      	adds	r0, #1
 800cdbc:	d02b      	beq.n	800ce16 <_malloc_r+0xd2>
 800cdbe:	6823      	ldr	r3, [r4, #0]
 800cdc0:	442b      	add	r3, r5
 800cdc2:	6023      	str	r3, [r4, #0]
 800cdc4:	e00e      	b.n	800cde4 <_malloc_r+0xa0>
 800cdc6:	6822      	ldr	r2, [r4, #0]
 800cdc8:	1b52      	subs	r2, r2, r5
 800cdca:	d41e      	bmi.n	800ce0a <_malloc_r+0xc6>
 800cdcc:	2a0b      	cmp	r2, #11
 800cdce:	d916      	bls.n	800cdfe <_malloc_r+0xba>
 800cdd0:	1961      	adds	r1, r4, r5
 800cdd2:	42a3      	cmp	r3, r4
 800cdd4:	6025      	str	r5, [r4, #0]
 800cdd6:	bf18      	it	ne
 800cdd8:	6059      	strne	r1, [r3, #4]
 800cdda:	6863      	ldr	r3, [r4, #4]
 800cddc:	bf08      	it	eq
 800cdde:	6031      	streq	r1, [r6, #0]
 800cde0:	5162      	str	r2, [r4, r5]
 800cde2:	604b      	str	r3, [r1, #4]
 800cde4:	4638      	mov	r0, r7
 800cde6:	f104 060b 	add.w	r6, r4, #11
 800cdea:	f000 f9ed 	bl	800d1c8 <__malloc_unlock>
 800cdee:	f026 0607 	bic.w	r6, r6, #7
 800cdf2:	1d23      	adds	r3, r4, #4
 800cdf4:	1af2      	subs	r2, r6, r3
 800cdf6:	d0b6      	beq.n	800cd66 <_malloc_r+0x22>
 800cdf8:	1b9b      	subs	r3, r3, r6
 800cdfa:	50a3      	str	r3, [r4, r2]
 800cdfc:	e7b3      	b.n	800cd66 <_malloc_r+0x22>
 800cdfe:	6862      	ldr	r2, [r4, #4]
 800ce00:	42a3      	cmp	r3, r4
 800ce02:	bf0c      	ite	eq
 800ce04:	6032      	streq	r2, [r6, #0]
 800ce06:	605a      	strne	r2, [r3, #4]
 800ce08:	e7ec      	b.n	800cde4 <_malloc_r+0xa0>
 800ce0a:	4623      	mov	r3, r4
 800ce0c:	6864      	ldr	r4, [r4, #4]
 800ce0e:	e7b2      	b.n	800cd76 <_malloc_r+0x32>
 800ce10:	4634      	mov	r4, r6
 800ce12:	6876      	ldr	r6, [r6, #4]
 800ce14:	e7b9      	b.n	800cd8a <_malloc_r+0x46>
 800ce16:	230c      	movs	r3, #12
 800ce18:	603b      	str	r3, [r7, #0]
 800ce1a:	4638      	mov	r0, r7
 800ce1c:	f000 f9d4 	bl	800d1c8 <__malloc_unlock>
 800ce20:	e7a1      	b.n	800cd66 <_malloc_r+0x22>
 800ce22:	6025      	str	r5, [r4, #0]
 800ce24:	e7de      	b.n	800cde4 <_malloc_r+0xa0>
 800ce26:	bf00      	nop
 800ce28:	20005b4c 	.word	0x20005b4c

0800ce2c <__ssputs_r>:
 800ce2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce30:	688e      	ldr	r6, [r1, #8]
 800ce32:	429e      	cmp	r6, r3
 800ce34:	4682      	mov	sl, r0
 800ce36:	460c      	mov	r4, r1
 800ce38:	4690      	mov	r8, r2
 800ce3a:	461f      	mov	r7, r3
 800ce3c:	d838      	bhi.n	800ceb0 <__ssputs_r+0x84>
 800ce3e:	898a      	ldrh	r2, [r1, #12]
 800ce40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce44:	d032      	beq.n	800ceac <__ssputs_r+0x80>
 800ce46:	6825      	ldr	r5, [r4, #0]
 800ce48:	6909      	ldr	r1, [r1, #16]
 800ce4a:	eba5 0901 	sub.w	r9, r5, r1
 800ce4e:	6965      	ldr	r5, [r4, #20]
 800ce50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce58:	3301      	adds	r3, #1
 800ce5a:	444b      	add	r3, r9
 800ce5c:	106d      	asrs	r5, r5, #1
 800ce5e:	429d      	cmp	r5, r3
 800ce60:	bf38      	it	cc
 800ce62:	461d      	movcc	r5, r3
 800ce64:	0553      	lsls	r3, r2, #21
 800ce66:	d531      	bpl.n	800cecc <__ssputs_r+0xa0>
 800ce68:	4629      	mov	r1, r5
 800ce6a:	f7ff ff6b 	bl	800cd44 <_malloc_r>
 800ce6e:	4606      	mov	r6, r0
 800ce70:	b950      	cbnz	r0, 800ce88 <__ssputs_r+0x5c>
 800ce72:	230c      	movs	r3, #12
 800ce74:	f8ca 3000 	str.w	r3, [sl]
 800ce78:	89a3      	ldrh	r3, [r4, #12]
 800ce7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce7e:	81a3      	strh	r3, [r4, #12]
 800ce80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce88:	6921      	ldr	r1, [r4, #16]
 800ce8a:	464a      	mov	r2, r9
 800ce8c:	f7ff fb46 	bl	800c51c <memcpy>
 800ce90:	89a3      	ldrh	r3, [r4, #12]
 800ce92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce9a:	81a3      	strh	r3, [r4, #12]
 800ce9c:	6126      	str	r6, [r4, #16]
 800ce9e:	6165      	str	r5, [r4, #20]
 800cea0:	444e      	add	r6, r9
 800cea2:	eba5 0509 	sub.w	r5, r5, r9
 800cea6:	6026      	str	r6, [r4, #0]
 800cea8:	60a5      	str	r5, [r4, #8]
 800ceaa:	463e      	mov	r6, r7
 800ceac:	42be      	cmp	r6, r7
 800ceae:	d900      	bls.n	800ceb2 <__ssputs_r+0x86>
 800ceb0:	463e      	mov	r6, r7
 800ceb2:	6820      	ldr	r0, [r4, #0]
 800ceb4:	4632      	mov	r2, r6
 800ceb6:	4641      	mov	r1, r8
 800ceb8:	f000 f966 	bl	800d188 <memmove>
 800cebc:	68a3      	ldr	r3, [r4, #8]
 800cebe:	1b9b      	subs	r3, r3, r6
 800cec0:	60a3      	str	r3, [r4, #8]
 800cec2:	6823      	ldr	r3, [r4, #0]
 800cec4:	4433      	add	r3, r6
 800cec6:	6023      	str	r3, [r4, #0]
 800cec8:	2000      	movs	r0, #0
 800ceca:	e7db      	b.n	800ce84 <__ssputs_r+0x58>
 800cecc:	462a      	mov	r2, r5
 800cece:	f000 f981 	bl	800d1d4 <_realloc_r>
 800ced2:	4606      	mov	r6, r0
 800ced4:	2800      	cmp	r0, #0
 800ced6:	d1e1      	bne.n	800ce9c <__ssputs_r+0x70>
 800ced8:	6921      	ldr	r1, [r4, #16]
 800ceda:	4650      	mov	r0, sl
 800cedc:	f7ff fec6 	bl	800cc6c <_free_r>
 800cee0:	e7c7      	b.n	800ce72 <__ssputs_r+0x46>
	...

0800cee4 <_svfiprintf_r>:
 800cee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee8:	4698      	mov	r8, r3
 800ceea:	898b      	ldrh	r3, [r1, #12]
 800ceec:	061b      	lsls	r3, r3, #24
 800ceee:	b09d      	sub	sp, #116	; 0x74
 800cef0:	4607      	mov	r7, r0
 800cef2:	460d      	mov	r5, r1
 800cef4:	4614      	mov	r4, r2
 800cef6:	d50e      	bpl.n	800cf16 <_svfiprintf_r+0x32>
 800cef8:	690b      	ldr	r3, [r1, #16]
 800cefa:	b963      	cbnz	r3, 800cf16 <_svfiprintf_r+0x32>
 800cefc:	2140      	movs	r1, #64	; 0x40
 800cefe:	f7ff ff21 	bl	800cd44 <_malloc_r>
 800cf02:	6028      	str	r0, [r5, #0]
 800cf04:	6128      	str	r0, [r5, #16]
 800cf06:	b920      	cbnz	r0, 800cf12 <_svfiprintf_r+0x2e>
 800cf08:	230c      	movs	r3, #12
 800cf0a:	603b      	str	r3, [r7, #0]
 800cf0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf10:	e0d1      	b.n	800d0b6 <_svfiprintf_r+0x1d2>
 800cf12:	2340      	movs	r3, #64	; 0x40
 800cf14:	616b      	str	r3, [r5, #20]
 800cf16:	2300      	movs	r3, #0
 800cf18:	9309      	str	r3, [sp, #36]	; 0x24
 800cf1a:	2320      	movs	r3, #32
 800cf1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf20:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf24:	2330      	movs	r3, #48	; 0x30
 800cf26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d0d0 <_svfiprintf_r+0x1ec>
 800cf2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf2e:	f04f 0901 	mov.w	r9, #1
 800cf32:	4623      	mov	r3, r4
 800cf34:	469a      	mov	sl, r3
 800cf36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf3a:	b10a      	cbz	r2, 800cf40 <_svfiprintf_r+0x5c>
 800cf3c:	2a25      	cmp	r2, #37	; 0x25
 800cf3e:	d1f9      	bne.n	800cf34 <_svfiprintf_r+0x50>
 800cf40:	ebba 0b04 	subs.w	fp, sl, r4
 800cf44:	d00b      	beq.n	800cf5e <_svfiprintf_r+0x7a>
 800cf46:	465b      	mov	r3, fp
 800cf48:	4622      	mov	r2, r4
 800cf4a:	4629      	mov	r1, r5
 800cf4c:	4638      	mov	r0, r7
 800cf4e:	f7ff ff6d 	bl	800ce2c <__ssputs_r>
 800cf52:	3001      	adds	r0, #1
 800cf54:	f000 80aa 	beq.w	800d0ac <_svfiprintf_r+0x1c8>
 800cf58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf5a:	445a      	add	r2, fp
 800cf5c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf5e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	f000 80a2 	beq.w	800d0ac <_svfiprintf_r+0x1c8>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf72:	f10a 0a01 	add.w	sl, sl, #1
 800cf76:	9304      	str	r3, [sp, #16]
 800cf78:	9307      	str	r3, [sp, #28]
 800cf7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf7e:	931a      	str	r3, [sp, #104]	; 0x68
 800cf80:	4654      	mov	r4, sl
 800cf82:	2205      	movs	r2, #5
 800cf84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf88:	4851      	ldr	r0, [pc, #324]	; (800d0d0 <_svfiprintf_r+0x1ec>)
 800cf8a:	f7f3 f929 	bl	80001e0 <memchr>
 800cf8e:	9a04      	ldr	r2, [sp, #16]
 800cf90:	b9d8      	cbnz	r0, 800cfca <_svfiprintf_r+0xe6>
 800cf92:	06d0      	lsls	r0, r2, #27
 800cf94:	bf44      	itt	mi
 800cf96:	2320      	movmi	r3, #32
 800cf98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf9c:	0711      	lsls	r1, r2, #28
 800cf9e:	bf44      	itt	mi
 800cfa0:	232b      	movmi	r3, #43	; 0x2b
 800cfa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfa6:	f89a 3000 	ldrb.w	r3, [sl]
 800cfaa:	2b2a      	cmp	r3, #42	; 0x2a
 800cfac:	d015      	beq.n	800cfda <_svfiprintf_r+0xf6>
 800cfae:	9a07      	ldr	r2, [sp, #28]
 800cfb0:	4654      	mov	r4, sl
 800cfb2:	2000      	movs	r0, #0
 800cfb4:	f04f 0c0a 	mov.w	ip, #10
 800cfb8:	4621      	mov	r1, r4
 800cfba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfbe:	3b30      	subs	r3, #48	; 0x30
 800cfc0:	2b09      	cmp	r3, #9
 800cfc2:	d94e      	bls.n	800d062 <_svfiprintf_r+0x17e>
 800cfc4:	b1b0      	cbz	r0, 800cff4 <_svfiprintf_r+0x110>
 800cfc6:	9207      	str	r2, [sp, #28]
 800cfc8:	e014      	b.n	800cff4 <_svfiprintf_r+0x110>
 800cfca:	eba0 0308 	sub.w	r3, r0, r8
 800cfce:	fa09 f303 	lsl.w	r3, r9, r3
 800cfd2:	4313      	orrs	r3, r2
 800cfd4:	9304      	str	r3, [sp, #16]
 800cfd6:	46a2      	mov	sl, r4
 800cfd8:	e7d2      	b.n	800cf80 <_svfiprintf_r+0x9c>
 800cfda:	9b03      	ldr	r3, [sp, #12]
 800cfdc:	1d19      	adds	r1, r3, #4
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	9103      	str	r1, [sp, #12]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	bfbb      	ittet	lt
 800cfe6:	425b      	neglt	r3, r3
 800cfe8:	f042 0202 	orrlt.w	r2, r2, #2
 800cfec:	9307      	strge	r3, [sp, #28]
 800cfee:	9307      	strlt	r3, [sp, #28]
 800cff0:	bfb8      	it	lt
 800cff2:	9204      	strlt	r2, [sp, #16]
 800cff4:	7823      	ldrb	r3, [r4, #0]
 800cff6:	2b2e      	cmp	r3, #46	; 0x2e
 800cff8:	d10c      	bne.n	800d014 <_svfiprintf_r+0x130>
 800cffa:	7863      	ldrb	r3, [r4, #1]
 800cffc:	2b2a      	cmp	r3, #42	; 0x2a
 800cffe:	d135      	bne.n	800d06c <_svfiprintf_r+0x188>
 800d000:	9b03      	ldr	r3, [sp, #12]
 800d002:	1d1a      	adds	r2, r3, #4
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	9203      	str	r2, [sp, #12]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	bfb8      	it	lt
 800d00c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d010:	3402      	adds	r4, #2
 800d012:	9305      	str	r3, [sp, #20]
 800d014:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0e0 <_svfiprintf_r+0x1fc>
 800d018:	7821      	ldrb	r1, [r4, #0]
 800d01a:	2203      	movs	r2, #3
 800d01c:	4650      	mov	r0, sl
 800d01e:	f7f3 f8df 	bl	80001e0 <memchr>
 800d022:	b140      	cbz	r0, 800d036 <_svfiprintf_r+0x152>
 800d024:	2340      	movs	r3, #64	; 0x40
 800d026:	eba0 000a 	sub.w	r0, r0, sl
 800d02a:	fa03 f000 	lsl.w	r0, r3, r0
 800d02e:	9b04      	ldr	r3, [sp, #16]
 800d030:	4303      	orrs	r3, r0
 800d032:	3401      	adds	r4, #1
 800d034:	9304      	str	r3, [sp, #16]
 800d036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d03a:	4826      	ldr	r0, [pc, #152]	; (800d0d4 <_svfiprintf_r+0x1f0>)
 800d03c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d040:	2206      	movs	r2, #6
 800d042:	f7f3 f8cd 	bl	80001e0 <memchr>
 800d046:	2800      	cmp	r0, #0
 800d048:	d038      	beq.n	800d0bc <_svfiprintf_r+0x1d8>
 800d04a:	4b23      	ldr	r3, [pc, #140]	; (800d0d8 <_svfiprintf_r+0x1f4>)
 800d04c:	bb1b      	cbnz	r3, 800d096 <_svfiprintf_r+0x1b2>
 800d04e:	9b03      	ldr	r3, [sp, #12]
 800d050:	3307      	adds	r3, #7
 800d052:	f023 0307 	bic.w	r3, r3, #7
 800d056:	3308      	adds	r3, #8
 800d058:	9303      	str	r3, [sp, #12]
 800d05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d05c:	4433      	add	r3, r6
 800d05e:	9309      	str	r3, [sp, #36]	; 0x24
 800d060:	e767      	b.n	800cf32 <_svfiprintf_r+0x4e>
 800d062:	fb0c 3202 	mla	r2, ip, r2, r3
 800d066:	460c      	mov	r4, r1
 800d068:	2001      	movs	r0, #1
 800d06a:	e7a5      	b.n	800cfb8 <_svfiprintf_r+0xd4>
 800d06c:	2300      	movs	r3, #0
 800d06e:	3401      	adds	r4, #1
 800d070:	9305      	str	r3, [sp, #20]
 800d072:	4619      	mov	r1, r3
 800d074:	f04f 0c0a 	mov.w	ip, #10
 800d078:	4620      	mov	r0, r4
 800d07a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d07e:	3a30      	subs	r2, #48	; 0x30
 800d080:	2a09      	cmp	r2, #9
 800d082:	d903      	bls.n	800d08c <_svfiprintf_r+0x1a8>
 800d084:	2b00      	cmp	r3, #0
 800d086:	d0c5      	beq.n	800d014 <_svfiprintf_r+0x130>
 800d088:	9105      	str	r1, [sp, #20]
 800d08a:	e7c3      	b.n	800d014 <_svfiprintf_r+0x130>
 800d08c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d090:	4604      	mov	r4, r0
 800d092:	2301      	movs	r3, #1
 800d094:	e7f0      	b.n	800d078 <_svfiprintf_r+0x194>
 800d096:	ab03      	add	r3, sp, #12
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	462a      	mov	r2, r5
 800d09c:	4b0f      	ldr	r3, [pc, #60]	; (800d0dc <_svfiprintf_r+0x1f8>)
 800d09e:	a904      	add	r1, sp, #16
 800d0a0:	4638      	mov	r0, r7
 800d0a2:	f7fd ffcb 	bl	800b03c <_printf_float>
 800d0a6:	1c42      	adds	r2, r0, #1
 800d0a8:	4606      	mov	r6, r0
 800d0aa:	d1d6      	bne.n	800d05a <_svfiprintf_r+0x176>
 800d0ac:	89ab      	ldrh	r3, [r5, #12]
 800d0ae:	065b      	lsls	r3, r3, #25
 800d0b0:	f53f af2c 	bmi.w	800cf0c <_svfiprintf_r+0x28>
 800d0b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0b6:	b01d      	add	sp, #116	; 0x74
 800d0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0bc:	ab03      	add	r3, sp, #12
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	462a      	mov	r2, r5
 800d0c2:	4b06      	ldr	r3, [pc, #24]	; (800d0dc <_svfiprintf_r+0x1f8>)
 800d0c4:	a904      	add	r1, sp, #16
 800d0c6:	4638      	mov	r0, r7
 800d0c8:	f7fe fa5c 	bl	800b584 <_printf_i>
 800d0cc:	e7eb      	b.n	800d0a6 <_svfiprintf_r+0x1c2>
 800d0ce:	bf00      	nop
 800d0d0:	0800e17c 	.word	0x0800e17c
 800d0d4:	0800e186 	.word	0x0800e186
 800d0d8:	0800b03d 	.word	0x0800b03d
 800d0dc:	0800ce2d 	.word	0x0800ce2d
 800d0e0:	0800e182 	.word	0x0800e182

0800d0e4 <_sbrk_r>:
 800d0e4:	b538      	push	{r3, r4, r5, lr}
 800d0e6:	4d06      	ldr	r5, [pc, #24]	; (800d100 <_sbrk_r+0x1c>)
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	4608      	mov	r0, r1
 800d0ee:	602b      	str	r3, [r5, #0]
 800d0f0:	f7f6 fb94 	bl	800381c <_sbrk>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	d102      	bne.n	800d0fe <_sbrk_r+0x1a>
 800d0f8:	682b      	ldr	r3, [r5, #0]
 800d0fa:	b103      	cbz	r3, 800d0fe <_sbrk_r+0x1a>
 800d0fc:	6023      	str	r3, [r4, #0]
 800d0fe:	bd38      	pop	{r3, r4, r5, pc}
 800d100:	20005b54 	.word	0x20005b54

0800d104 <__assert_func>:
 800d104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d106:	4614      	mov	r4, r2
 800d108:	461a      	mov	r2, r3
 800d10a:	4b09      	ldr	r3, [pc, #36]	; (800d130 <__assert_func+0x2c>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4605      	mov	r5, r0
 800d110:	68d8      	ldr	r0, [r3, #12]
 800d112:	b14c      	cbz	r4, 800d128 <__assert_func+0x24>
 800d114:	4b07      	ldr	r3, [pc, #28]	; (800d134 <__assert_func+0x30>)
 800d116:	9100      	str	r1, [sp, #0]
 800d118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d11c:	4906      	ldr	r1, [pc, #24]	; (800d138 <__assert_func+0x34>)
 800d11e:	462b      	mov	r3, r5
 800d120:	f000 f80e 	bl	800d140 <fiprintf>
 800d124:	f000 faac 	bl	800d680 <abort>
 800d128:	4b04      	ldr	r3, [pc, #16]	; (800d13c <__assert_func+0x38>)
 800d12a:	461c      	mov	r4, r3
 800d12c:	e7f3      	b.n	800d116 <__assert_func+0x12>
 800d12e:	bf00      	nop
 800d130:	2000000c 	.word	0x2000000c
 800d134:	0800e18d 	.word	0x0800e18d
 800d138:	0800e19a 	.word	0x0800e19a
 800d13c:	0800e1c8 	.word	0x0800e1c8

0800d140 <fiprintf>:
 800d140:	b40e      	push	{r1, r2, r3}
 800d142:	b503      	push	{r0, r1, lr}
 800d144:	4601      	mov	r1, r0
 800d146:	ab03      	add	r3, sp, #12
 800d148:	4805      	ldr	r0, [pc, #20]	; (800d160 <fiprintf+0x20>)
 800d14a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d14e:	6800      	ldr	r0, [r0, #0]
 800d150:	9301      	str	r3, [sp, #4]
 800d152:	f000 f897 	bl	800d284 <_vfiprintf_r>
 800d156:	b002      	add	sp, #8
 800d158:	f85d eb04 	ldr.w	lr, [sp], #4
 800d15c:	b003      	add	sp, #12
 800d15e:	4770      	bx	lr
 800d160:	2000000c 	.word	0x2000000c

0800d164 <__ascii_mbtowc>:
 800d164:	b082      	sub	sp, #8
 800d166:	b901      	cbnz	r1, 800d16a <__ascii_mbtowc+0x6>
 800d168:	a901      	add	r1, sp, #4
 800d16a:	b142      	cbz	r2, 800d17e <__ascii_mbtowc+0x1a>
 800d16c:	b14b      	cbz	r3, 800d182 <__ascii_mbtowc+0x1e>
 800d16e:	7813      	ldrb	r3, [r2, #0]
 800d170:	600b      	str	r3, [r1, #0]
 800d172:	7812      	ldrb	r2, [r2, #0]
 800d174:	1e10      	subs	r0, r2, #0
 800d176:	bf18      	it	ne
 800d178:	2001      	movne	r0, #1
 800d17a:	b002      	add	sp, #8
 800d17c:	4770      	bx	lr
 800d17e:	4610      	mov	r0, r2
 800d180:	e7fb      	b.n	800d17a <__ascii_mbtowc+0x16>
 800d182:	f06f 0001 	mvn.w	r0, #1
 800d186:	e7f8      	b.n	800d17a <__ascii_mbtowc+0x16>

0800d188 <memmove>:
 800d188:	4288      	cmp	r0, r1
 800d18a:	b510      	push	{r4, lr}
 800d18c:	eb01 0402 	add.w	r4, r1, r2
 800d190:	d902      	bls.n	800d198 <memmove+0x10>
 800d192:	4284      	cmp	r4, r0
 800d194:	4623      	mov	r3, r4
 800d196:	d807      	bhi.n	800d1a8 <memmove+0x20>
 800d198:	1e43      	subs	r3, r0, #1
 800d19a:	42a1      	cmp	r1, r4
 800d19c:	d008      	beq.n	800d1b0 <memmove+0x28>
 800d19e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1a6:	e7f8      	b.n	800d19a <memmove+0x12>
 800d1a8:	4402      	add	r2, r0
 800d1aa:	4601      	mov	r1, r0
 800d1ac:	428a      	cmp	r2, r1
 800d1ae:	d100      	bne.n	800d1b2 <memmove+0x2a>
 800d1b0:	bd10      	pop	{r4, pc}
 800d1b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d1b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d1ba:	e7f7      	b.n	800d1ac <memmove+0x24>

0800d1bc <__malloc_lock>:
 800d1bc:	4801      	ldr	r0, [pc, #4]	; (800d1c4 <__malloc_lock+0x8>)
 800d1be:	f000 bc1f 	b.w	800da00 <__retarget_lock_acquire_recursive>
 800d1c2:	bf00      	nop
 800d1c4:	20005b58 	.word	0x20005b58

0800d1c8 <__malloc_unlock>:
 800d1c8:	4801      	ldr	r0, [pc, #4]	; (800d1d0 <__malloc_unlock+0x8>)
 800d1ca:	f000 bc1a 	b.w	800da02 <__retarget_lock_release_recursive>
 800d1ce:	bf00      	nop
 800d1d0:	20005b58 	.word	0x20005b58

0800d1d4 <_realloc_r>:
 800d1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1d8:	4680      	mov	r8, r0
 800d1da:	4614      	mov	r4, r2
 800d1dc:	460e      	mov	r6, r1
 800d1de:	b921      	cbnz	r1, 800d1ea <_realloc_r+0x16>
 800d1e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1e4:	4611      	mov	r1, r2
 800d1e6:	f7ff bdad 	b.w	800cd44 <_malloc_r>
 800d1ea:	b92a      	cbnz	r2, 800d1f8 <_realloc_r+0x24>
 800d1ec:	f7ff fd3e 	bl	800cc6c <_free_r>
 800d1f0:	4625      	mov	r5, r4
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1f8:	f000 fc6a 	bl	800dad0 <_malloc_usable_size_r>
 800d1fc:	4284      	cmp	r4, r0
 800d1fe:	4607      	mov	r7, r0
 800d200:	d802      	bhi.n	800d208 <_realloc_r+0x34>
 800d202:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d206:	d812      	bhi.n	800d22e <_realloc_r+0x5a>
 800d208:	4621      	mov	r1, r4
 800d20a:	4640      	mov	r0, r8
 800d20c:	f7ff fd9a 	bl	800cd44 <_malloc_r>
 800d210:	4605      	mov	r5, r0
 800d212:	2800      	cmp	r0, #0
 800d214:	d0ed      	beq.n	800d1f2 <_realloc_r+0x1e>
 800d216:	42bc      	cmp	r4, r7
 800d218:	4622      	mov	r2, r4
 800d21a:	4631      	mov	r1, r6
 800d21c:	bf28      	it	cs
 800d21e:	463a      	movcs	r2, r7
 800d220:	f7ff f97c 	bl	800c51c <memcpy>
 800d224:	4631      	mov	r1, r6
 800d226:	4640      	mov	r0, r8
 800d228:	f7ff fd20 	bl	800cc6c <_free_r>
 800d22c:	e7e1      	b.n	800d1f2 <_realloc_r+0x1e>
 800d22e:	4635      	mov	r5, r6
 800d230:	e7df      	b.n	800d1f2 <_realloc_r+0x1e>

0800d232 <__sfputc_r>:
 800d232:	6893      	ldr	r3, [r2, #8]
 800d234:	3b01      	subs	r3, #1
 800d236:	2b00      	cmp	r3, #0
 800d238:	b410      	push	{r4}
 800d23a:	6093      	str	r3, [r2, #8]
 800d23c:	da08      	bge.n	800d250 <__sfputc_r+0x1e>
 800d23e:	6994      	ldr	r4, [r2, #24]
 800d240:	42a3      	cmp	r3, r4
 800d242:	db01      	blt.n	800d248 <__sfputc_r+0x16>
 800d244:	290a      	cmp	r1, #10
 800d246:	d103      	bne.n	800d250 <__sfputc_r+0x1e>
 800d248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d24c:	f000 b94a 	b.w	800d4e4 <__swbuf_r>
 800d250:	6813      	ldr	r3, [r2, #0]
 800d252:	1c58      	adds	r0, r3, #1
 800d254:	6010      	str	r0, [r2, #0]
 800d256:	7019      	strb	r1, [r3, #0]
 800d258:	4608      	mov	r0, r1
 800d25a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <__sfputs_r>:
 800d260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d262:	4606      	mov	r6, r0
 800d264:	460f      	mov	r7, r1
 800d266:	4614      	mov	r4, r2
 800d268:	18d5      	adds	r5, r2, r3
 800d26a:	42ac      	cmp	r4, r5
 800d26c:	d101      	bne.n	800d272 <__sfputs_r+0x12>
 800d26e:	2000      	movs	r0, #0
 800d270:	e007      	b.n	800d282 <__sfputs_r+0x22>
 800d272:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d276:	463a      	mov	r2, r7
 800d278:	4630      	mov	r0, r6
 800d27a:	f7ff ffda 	bl	800d232 <__sfputc_r>
 800d27e:	1c43      	adds	r3, r0, #1
 800d280:	d1f3      	bne.n	800d26a <__sfputs_r+0xa>
 800d282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d284 <_vfiprintf_r>:
 800d284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d288:	460d      	mov	r5, r1
 800d28a:	b09d      	sub	sp, #116	; 0x74
 800d28c:	4614      	mov	r4, r2
 800d28e:	4698      	mov	r8, r3
 800d290:	4606      	mov	r6, r0
 800d292:	b118      	cbz	r0, 800d29c <_vfiprintf_r+0x18>
 800d294:	6983      	ldr	r3, [r0, #24]
 800d296:	b90b      	cbnz	r3, 800d29c <_vfiprintf_r+0x18>
 800d298:	f000 fb14 	bl	800d8c4 <__sinit>
 800d29c:	4b89      	ldr	r3, [pc, #548]	; (800d4c4 <_vfiprintf_r+0x240>)
 800d29e:	429d      	cmp	r5, r3
 800d2a0:	d11b      	bne.n	800d2da <_vfiprintf_r+0x56>
 800d2a2:	6875      	ldr	r5, [r6, #4]
 800d2a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2a6:	07d9      	lsls	r1, r3, #31
 800d2a8:	d405      	bmi.n	800d2b6 <_vfiprintf_r+0x32>
 800d2aa:	89ab      	ldrh	r3, [r5, #12]
 800d2ac:	059a      	lsls	r2, r3, #22
 800d2ae:	d402      	bmi.n	800d2b6 <_vfiprintf_r+0x32>
 800d2b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2b2:	f000 fba5 	bl	800da00 <__retarget_lock_acquire_recursive>
 800d2b6:	89ab      	ldrh	r3, [r5, #12]
 800d2b8:	071b      	lsls	r3, r3, #28
 800d2ba:	d501      	bpl.n	800d2c0 <_vfiprintf_r+0x3c>
 800d2bc:	692b      	ldr	r3, [r5, #16]
 800d2be:	b9eb      	cbnz	r3, 800d2fc <_vfiprintf_r+0x78>
 800d2c0:	4629      	mov	r1, r5
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	f000 f96e 	bl	800d5a4 <__swsetup_r>
 800d2c8:	b1c0      	cbz	r0, 800d2fc <_vfiprintf_r+0x78>
 800d2ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2cc:	07dc      	lsls	r4, r3, #31
 800d2ce:	d50e      	bpl.n	800d2ee <_vfiprintf_r+0x6a>
 800d2d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2d4:	b01d      	add	sp, #116	; 0x74
 800d2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2da:	4b7b      	ldr	r3, [pc, #492]	; (800d4c8 <_vfiprintf_r+0x244>)
 800d2dc:	429d      	cmp	r5, r3
 800d2de:	d101      	bne.n	800d2e4 <_vfiprintf_r+0x60>
 800d2e0:	68b5      	ldr	r5, [r6, #8]
 800d2e2:	e7df      	b.n	800d2a4 <_vfiprintf_r+0x20>
 800d2e4:	4b79      	ldr	r3, [pc, #484]	; (800d4cc <_vfiprintf_r+0x248>)
 800d2e6:	429d      	cmp	r5, r3
 800d2e8:	bf08      	it	eq
 800d2ea:	68f5      	ldreq	r5, [r6, #12]
 800d2ec:	e7da      	b.n	800d2a4 <_vfiprintf_r+0x20>
 800d2ee:	89ab      	ldrh	r3, [r5, #12]
 800d2f0:	0598      	lsls	r0, r3, #22
 800d2f2:	d4ed      	bmi.n	800d2d0 <_vfiprintf_r+0x4c>
 800d2f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2f6:	f000 fb84 	bl	800da02 <__retarget_lock_release_recursive>
 800d2fa:	e7e9      	b.n	800d2d0 <_vfiprintf_r+0x4c>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d300:	2320      	movs	r3, #32
 800d302:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d306:	f8cd 800c 	str.w	r8, [sp, #12]
 800d30a:	2330      	movs	r3, #48	; 0x30
 800d30c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d4d0 <_vfiprintf_r+0x24c>
 800d310:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d314:	f04f 0901 	mov.w	r9, #1
 800d318:	4623      	mov	r3, r4
 800d31a:	469a      	mov	sl, r3
 800d31c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d320:	b10a      	cbz	r2, 800d326 <_vfiprintf_r+0xa2>
 800d322:	2a25      	cmp	r2, #37	; 0x25
 800d324:	d1f9      	bne.n	800d31a <_vfiprintf_r+0x96>
 800d326:	ebba 0b04 	subs.w	fp, sl, r4
 800d32a:	d00b      	beq.n	800d344 <_vfiprintf_r+0xc0>
 800d32c:	465b      	mov	r3, fp
 800d32e:	4622      	mov	r2, r4
 800d330:	4629      	mov	r1, r5
 800d332:	4630      	mov	r0, r6
 800d334:	f7ff ff94 	bl	800d260 <__sfputs_r>
 800d338:	3001      	adds	r0, #1
 800d33a:	f000 80aa 	beq.w	800d492 <_vfiprintf_r+0x20e>
 800d33e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d340:	445a      	add	r2, fp
 800d342:	9209      	str	r2, [sp, #36]	; 0x24
 800d344:	f89a 3000 	ldrb.w	r3, [sl]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	f000 80a2 	beq.w	800d492 <_vfiprintf_r+0x20e>
 800d34e:	2300      	movs	r3, #0
 800d350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d358:	f10a 0a01 	add.w	sl, sl, #1
 800d35c:	9304      	str	r3, [sp, #16]
 800d35e:	9307      	str	r3, [sp, #28]
 800d360:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d364:	931a      	str	r3, [sp, #104]	; 0x68
 800d366:	4654      	mov	r4, sl
 800d368:	2205      	movs	r2, #5
 800d36a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d36e:	4858      	ldr	r0, [pc, #352]	; (800d4d0 <_vfiprintf_r+0x24c>)
 800d370:	f7f2 ff36 	bl	80001e0 <memchr>
 800d374:	9a04      	ldr	r2, [sp, #16]
 800d376:	b9d8      	cbnz	r0, 800d3b0 <_vfiprintf_r+0x12c>
 800d378:	06d1      	lsls	r1, r2, #27
 800d37a:	bf44      	itt	mi
 800d37c:	2320      	movmi	r3, #32
 800d37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d382:	0713      	lsls	r3, r2, #28
 800d384:	bf44      	itt	mi
 800d386:	232b      	movmi	r3, #43	; 0x2b
 800d388:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d38c:	f89a 3000 	ldrb.w	r3, [sl]
 800d390:	2b2a      	cmp	r3, #42	; 0x2a
 800d392:	d015      	beq.n	800d3c0 <_vfiprintf_r+0x13c>
 800d394:	9a07      	ldr	r2, [sp, #28]
 800d396:	4654      	mov	r4, sl
 800d398:	2000      	movs	r0, #0
 800d39a:	f04f 0c0a 	mov.w	ip, #10
 800d39e:	4621      	mov	r1, r4
 800d3a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3a4:	3b30      	subs	r3, #48	; 0x30
 800d3a6:	2b09      	cmp	r3, #9
 800d3a8:	d94e      	bls.n	800d448 <_vfiprintf_r+0x1c4>
 800d3aa:	b1b0      	cbz	r0, 800d3da <_vfiprintf_r+0x156>
 800d3ac:	9207      	str	r2, [sp, #28]
 800d3ae:	e014      	b.n	800d3da <_vfiprintf_r+0x156>
 800d3b0:	eba0 0308 	sub.w	r3, r0, r8
 800d3b4:	fa09 f303 	lsl.w	r3, r9, r3
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	9304      	str	r3, [sp, #16]
 800d3bc:	46a2      	mov	sl, r4
 800d3be:	e7d2      	b.n	800d366 <_vfiprintf_r+0xe2>
 800d3c0:	9b03      	ldr	r3, [sp, #12]
 800d3c2:	1d19      	adds	r1, r3, #4
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	9103      	str	r1, [sp, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	bfbb      	ittet	lt
 800d3cc:	425b      	neglt	r3, r3
 800d3ce:	f042 0202 	orrlt.w	r2, r2, #2
 800d3d2:	9307      	strge	r3, [sp, #28]
 800d3d4:	9307      	strlt	r3, [sp, #28]
 800d3d6:	bfb8      	it	lt
 800d3d8:	9204      	strlt	r2, [sp, #16]
 800d3da:	7823      	ldrb	r3, [r4, #0]
 800d3dc:	2b2e      	cmp	r3, #46	; 0x2e
 800d3de:	d10c      	bne.n	800d3fa <_vfiprintf_r+0x176>
 800d3e0:	7863      	ldrb	r3, [r4, #1]
 800d3e2:	2b2a      	cmp	r3, #42	; 0x2a
 800d3e4:	d135      	bne.n	800d452 <_vfiprintf_r+0x1ce>
 800d3e6:	9b03      	ldr	r3, [sp, #12]
 800d3e8:	1d1a      	adds	r2, r3, #4
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	9203      	str	r2, [sp, #12]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	bfb8      	it	lt
 800d3f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d3f6:	3402      	adds	r4, #2
 800d3f8:	9305      	str	r3, [sp, #20]
 800d3fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4e0 <_vfiprintf_r+0x25c>
 800d3fe:	7821      	ldrb	r1, [r4, #0]
 800d400:	2203      	movs	r2, #3
 800d402:	4650      	mov	r0, sl
 800d404:	f7f2 feec 	bl	80001e0 <memchr>
 800d408:	b140      	cbz	r0, 800d41c <_vfiprintf_r+0x198>
 800d40a:	2340      	movs	r3, #64	; 0x40
 800d40c:	eba0 000a 	sub.w	r0, r0, sl
 800d410:	fa03 f000 	lsl.w	r0, r3, r0
 800d414:	9b04      	ldr	r3, [sp, #16]
 800d416:	4303      	orrs	r3, r0
 800d418:	3401      	adds	r4, #1
 800d41a:	9304      	str	r3, [sp, #16]
 800d41c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d420:	482c      	ldr	r0, [pc, #176]	; (800d4d4 <_vfiprintf_r+0x250>)
 800d422:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d426:	2206      	movs	r2, #6
 800d428:	f7f2 feda 	bl	80001e0 <memchr>
 800d42c:	2800      	cmp	r0, #0
 800d42e:	d03f      	beq.n	800d4b0 <_vfiprintf_r+0x22c>
 800d430:	4b29      	ldr	r3, [pc, #164]	; (800d4d8 <_vfiprintf_r+0x254>)
 800d432:	bb1b      	cbnz	r3, 800d47c <_vfiprintf_r+0x1f8>
 800d434:	9b03      	ldr	r3, [sp, #12]
 800d436:	3307      	adds	r3, #7
 800d438:	f023 0307 	bic.w	r3, r3, #7
 800d43c:	3308      	adds	r3, #8
 800d43e:	9303      	str	r3, [sp, #12]
 800d440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d442:	443b      	add	r3, r7
 800d444:	9309      	str	r3, [sp, #36]	; 0x24
 800d446:	e767      	b.n	800d318 <_vfiprintf_r+0x94>
 800d448:	fb0c 3202 	mla	r2, ip, r2, r3
 800d44c:	460c      	mov	r4, r1
 800d44e:	2001      	movs	r0, #1
 800d450:	e7a5      	b.n	800d39e <_vfiprintf_r+0x11a>
 800d452:	2300      	movs	r3, #0
 800d454:	3401      	adds	r4, #1
 800d456:	9305      	str	r3, [sp, #20]
 800d458:	4619      	mov	r1, r3
 800d45a:	f04f 0c0a 	mov.w	ip, #10
 800d45e:	4620      	mov	r0, r4
 800d460:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d464:	3a30      	subs	r2, #48	; 0x30
 800d466:	2a09      	cmp	r2, #9
 800d468:	d903      	bls.n	800d472 <_vfiprintf_r+0x1ee>
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d0c5      	beq.n	800d3fa <_vfiprintf_r+0x176>
 800d46e:	9105      	str	r1, [sp, #20]
 800d470:	e7c3      	b.n	800d3fa <_vfiprintf_r+0x176>
 800d472:	fb0c 2101 	mla	r1, ip, r1, r2
 800d476:	4604      	mov	r4, r0
 800d478:	2301      	movs	r3, #1
 800d47a:	e7f0      	b.n	800d45e <_vfiprintf_r+0x1da>
 800d47c:	ab03      	add	r3, sp, #12
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	462a      	mov	r2, r5
 800d482:	4b16      	ldr	r3, [pc, #88]	; (800d4dc <_vfiprintf_r+0x258>)
 800d484:	a904      	add	r1, sp, #16
 800d486:	4630      	mov	r0, r6
 800d488:	f7fd fdd8 	bl	800b03c <_printf_float>
 800d48c:	4607      	mov	r7, r0
 800d48e:	1c78      	adds	r0, r7, #1
 800d490:	d1d6      	bne.n	800d440 <_vfiprintf_r+0x1bc>
 800d492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d494:	07d9      	lsls	r1, r3, #31
 800d496:	d405      	bmi.n	800d4a4 <_vfiprintf_r+0x220>
 800d498:	89ab      	ldrh	r3, [r5, #12]
 800d49a:	059a      	lsls	r2, r3, #22
 800d49c:	d402      	bmi.n	800d4a4 <_vfiprintf_r+0x220>
 800d49e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4a0:	f000 faaf 	bl	800da02 <__retarget_lock_release_recursive>
 800d4a4:	89ab      	ldrh	r3, [r5, #12]
 800d4a6:	065b      	lsls	r3, r3, #25
 800d4a8:	f53f af12 	bmi.w	800d2d0 <_vfiprintf_r+0x4c>
 800d4ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4ae:	e711      	b.n	800d2d4 <_vfiprintf_r+0x50>
 800d4b0:	ab03      	add	r3, sp, #12
 800d4b2:	9300      	str	r3, [sp, #0]
 800d4b4:	462a      	mov	r2, r5
 800d4b6:	4b09      	ldr	r3, [pc, #36]	; (800d4dc <_vfiprintf_r+0x258>)
 800d4b8:	a904      	add	r1, sp, #16
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	f7fe f862 	bl	800b584 <_printf_i>
 800d4c0:	e7e4      	b.n	800d48c <_vfiprintf_r+0x208>
 800d4c2:	bf00      	nop
 800d4c4:	0800e2f4 	.word	0x0800e2f4
 800d4c8:	0800e314 	.word	0x0800e314
 800d4cc:	0800e2d4 	.word	0x0800e2d4
 800d4d0:	0800e17c 	.word	0x0800e17c
 800d4d4:	0800e186 	.word	0x0800e186
 800d4d8:	0800b03d 	.word	0x0800b03d
 800d4dc:	0800d261 	.word	0x0800d261
 800d4e0:	0800e182 	.word	0x0800e182

0800d4e4 <__swbuf_r>:
 800d4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4e6:	460e      	mov	r6, r1
 800d4e8:	4614      	mov	r4, r2
 800d4ea:	4605      	mov	r5, r0
 800d4ec:	b118      	cbz	r0, 800d4f6 <__swbuf_r+0x12>
 800d4ee:	6983      	ldr	r3, [r0, #24]
 800d4f0:	b90b      	cbnz	r3, 800d4f6 <__swbuf_r+0x12>
 800d4f2:	f000 f9e7 	bl	800d8c4 <__sinit>
 800d4f6:	4b21      	ldr	r3, [pc, #132]	; (800d57c <__swbuf_r+0x98>)
 800d4f8:	429c      	cmp	r4, r3
 800d4fa:	d12b      	bne.n	800d554 <__swbuf_r+0x70>
 800d4fc:	686c      	ldr	r4, [r5, #4]
 800d4fe:	69a3      	ldr	r3, [r4, #24]
 800d500:	60a3      	str	r3, [r4, #8]
 800d502:	89a3      	ldrh	r3, [r4, #12]
 800d504:	071a      	lsls	r2, r3, #28
 800d506:	d52f      	bpl.n	800d568 <__swbuf_r+0x84>
 800d508:	6923      	ldr	r3, [r4, #16]
 800d50a:	b36b      	cbz	r3, 800d568 <__swbuf_r+0x84>
 800d50c:	6923      	ldr	r3, [r4, #16]
 800d50e:	6820      	ldr	r0, [r4, #0]
 800d510:	1ac0      	subs	r0, r0, r3
 800d512:	6963      	ldr	r3, [r4, #20]
 800d514:	b2f6      	uxtb	r6, r6
 800d516:	4283      	cmp	r3, r0
 800d518:	4637      	mov	r7, r6
 800d51a:	dc04      	bgt.n	800d526 <__swbuf_r+0x42>
 800d51c:	4621      	mov	r1, r4
 800d51e:	4628      	mov	r0, r5
 800d520:	f000 f93c 	bl	800d79c <_fflush_r>
 800d524:	bb30      	cbnz	r0, 800d574 <__swbuf_r+0x90>
 800d526:	68a3      	ldr	r3, [r4, #8]
 800d528:	3b01      	subs	r3, #1
 800d52a:	60a3      	str	r3, [r4, #8]
 800d52c:	6823      	ldr	r3, [r4, #0]
 800d52e:	1c5a      	adds	r2, r3, #1
 800d530:	6022      	str	r2, [r4, #0]
 800d532:	701e      	strb	r6, [r3, #0]
 800d534:	6963      	ldr	r3, [r4, #20]
 800d536:	3001      	adds	r0, #1
 800d538:	4283      	cmp	r3, r0
 800d53a:	d004      	beq.n	800d546 <__swbuf_r+0x62>
 800d53c:	89a3      	ldrh	r3, [r4, #12]
 800d53e:	07db      	lsls	r3, r3, #31
 800d540:	d506      	bpl.n	800d550 <__swbuf_r+0x6c>
 800d542:	2e0a      	cmp	r6, #10
 800d544:	d104      	bne.n	800d550 <__swbuf_r+0x6c>
 800d546:	4621      	mov	r1, r4
 800d548:	4628      	mov	r0, r5
 800d54a:	f000 f927 	bl	800d79c <_fflush_r>
 800d54e:	b988      	cbnz	r0, 800d574 <__swbuf_r+0x90>
 800d550:	4638      	mov	r0, r7
 800d552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d554:	4b0a      	ldr	r3, [pc, #40]	; (800d580 <__swbuf_r+0x9c>)
 800d556:	429c      	cmp	r4, r3
 800d558:	d101      	bne.n	800d55e <__swbuf_r+0x7a>
 800d55a:	68ac      	ldr	r4, [r5, #8]
 800d55c:	e7cf      	b.n	800d4fe <__swbuf_r+0x1a>
 800d55e:	4b09      	ldr	r3, [pc, #36]	; (800d584 <__swbuf_r+0xa0>)
 800d560:	429c      	cmp	r4, r3
 800d562:	bf08      	it	eq
 800d564:	68ec      	ldreq	r4, [r5, #12]
 800d566:	e7ca      	b.n	800d4fe <__swbuf_r+0x1a>
 800d568:	4621      	mov	r1, r4
 800d56a:	4628      	mov	r0, r5
 800d56c:	f000 f81a 	bl	800d5a4 <__swsetup_r>
 800d570:	2800      	cmp	r0, #0
 800d572:	d0cb      	beq.n	800d50c <__swbuf_r+0x28>
 800d574:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d578:	e7ea      	b.n	800d550 <__swbuf_r+0x6c>
 800d57a:	bf00      	nop
 800d57c:	0800e2f4 	.word	0x0800e2f4
 800d580:	0800e314 	.word	0x0800e314
 800d584:	0800e2d4 	.word	0x0800e2d4

0800d588 <__ascii_wctomb>:
 800d588:	b149      	cbz	r1, 800d59e <__ascii_wctomb+0x16>
 800d58a:	2aff      	cmp	r2, #255	; 0xff
 800d58c:	bf85      	ittet	hi
 800d58e:	238a      	movhi	r3, #138	; 0x8a
 800d590:	6003      	strhi	r3, [r0, #0]
 800d592:	700a      	strbls	r2, [r1, #0]
 800d594:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d598:	bf98      	it	ls
 800d59a:	2001      	movls	r0, #1
 800d59c:	4770      	bx	lr
 800d59e:	4608      	mov	r0, r1
 800d5a0:	4770      	bx	lr
	...

0800d5a4 <__swsetup_r>:
 800d5a4:	4b32      	ldr	r3, [pc, #200]	; (800d670 <__swsetup_r+0xcc>)
 800d5a6:	b570      	push	{r4, r5, r6, lr}
 800d5a8:	681d      	ldr	r5, [r3, #0]
 800d5aa:	4606      	mov	r6, r0
 800d5ac:	460c      	mov	r4, r1
 800d5ae:	b125      	cbz	r5, 800d5ba <__swsetup_r+0x16>
 800d5b0:	69ab      	ldr	r3, [r5, #24]
 800d5b2:	b913      	cbnz	r3, 800d5ba <__swsetup_r+0x16>
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	f000 f985 	bl	800d8c4 <__sinit>
 800d5ba:	4b2e      	ldr	r3, [pc, #184]	; (800d674 <__swsetup_r+0xd0>)
 800d5bc:	429c      	cmp	r4, r3
 800d5be:	d10f      	bne.n	800d5e0 <__swsetup_r+0x3c>
 800d5c0:	686c      	ldr	r4, [r5, #4]
 800d5c2:	89a3      	ldrh	r3, [r4, #12]
 800d5c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5c8:	0719      	lsls	r1, r3, #28
 800d5ca:	d42c      	bmi.n	800d626 <__swsetup_r+0x82>
 800d5cc:	06dd      	lsls	r5, r3, #27
 800d5ce:	d411      	bmi.n	800d5f4 <__swsetup_r+0x50>
 800d5d0:	2309      	movs	r3, #9
 800d5d2:	6033      	str	r3, [r6, #0]
 800d5d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d5d8:	81a3      	strh	r3, [r4, #12]
 800d5da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5de:	e03e      	b.n	800d65e <__swsetup_r+0xba>
 800d5e0:	4b25      	ldr	r3, [pc, #148]	; (800d678 <__swsetup_r+0xd4>)
 800d5e2:	429c      	cmp	r4, r3
 800d5e4:	d101      	bne.n	800d5ea <__swsetup_r+0x46>
 800d5e6:	68ac      	ldr	r4, [r5, #8]
 800d5e8:	e7eb      	b.n	800d5c2 <__swsetup_r+0x1e>
 800d5ea:	4b24      	ldr	r3, [pc, #144]	; (800d67c <__swsetup_r+0xd8>)
 800d5ec:	429c      	cmp	r4, r3
 800d5ee:	bf08      	it	eq
 800d5f0:	68ec      	ldreq	r4, [r5, #12]
 800d5f2:	e7e6      	b.n	800d5c2 <__swsetup_r+0x1e>
 800d5f4:	0758      	lsls	r0, r3, #29
 800d5f6:	d512      	bpl.n	800d61e <__swsetup_r+0x7a>
 800d5f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5fa:	b141      	cbz	r1, 800d60e <__swsetup_r+0x6a>
 800d5fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d600:	4299      	cmp	r1, r3
 800d602:	d002      	beq.n	800d60a <__swsetup_r+0x66>
 800d604:	4630      	mov	r0, r6
 800d606:	f7ff fb31 	bl	800cc6c <_free_r>
 800d60a:	2300      	movs	r3, #0
 800d60c:	6363      	str	r3, [r4, #52]	; 0x34
 800d60e:	89a3      	ldrh	r3, [r4, #12]
 800d610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d614:	81a3      	strh	r3, [r4, #12]
 800d616:	2300      	movs	r3, #0
 800d618:	6063      	str	r3, [r4, #4]
 800d61a:	6923      	ldr	r3, [r4, #16]
 800d61c:	6023      	str	r3, [r4, #0]
 800d61e:	89a3      	ldrh	r3, [r4, #12]
 800d620:	f043 0308 	orr.w	r3, r3, #8
 800d624:	81a3      	strh	r3, [r4, #12]
 800d626:	6923      	ldr	r3, [r4, #16]
 800d628:	b94b      	cbnz	r3, 800d63e <__swsetup_r+0x9a>
 800d62a:	89a3      	ldrh	r3, [r4, #12]
 800d62c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d634:	d003      	beq.n	800d63e <__swsetup_r+0x9a>
 800d636:	4621      	mov	r1, r4
 800d638:	4630      	mov	r0, r6
 800d63a:	f000 fa09 	bl	800da50 <__smakebuf_r>
 800d63e:	89a0      	ldrh	r0, [r4, #12]
 800d640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d644:	f010 0301 	ands.w	r3, r0, #1
 800d648:	d00a      	beq.n	800d660 <__swsetup_r+0xbc>
 800d64a:	2300      	movs	r3, #0
 800d64c:	60a3      	str	r3, [r4, #8]
 800d64e:	6963      	ldr	r3, [r4, #20]
 800d650:	425b      	negs	r3, r3
 800d652:	61a3      	str	r3, [r4, #24]
 800d654:	6923      	ldr	r3, [r4, #16]
 800d656:	b943      	cbnz	r3, 800d66a <__swsetup_r+0xc6>
 800d658:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d65c:	d1ba      	bne.n	800d5d4 <__swsetup_r+0x30>
 800d65e:	bd70      	pop	{r4, r5, r6, pc}
 800d660:	0781      	lsls	r1, r0, #30
 800d662:	bf58      	it	pl
 800d664:	6963      	ldrpl	r3, [r4, #20]
 800d666:	60a3      	str	r3, [r4, #8]
 800d668:	e7f4      	b.n	800d654 <__swsetup_r+0xb0>
 800d66a:	2000      	movs	r0, #0
 800d66c:	e7f7      	b.n	800d65e <__swsetup_r+0xba>
 800d66e:	bf00      	nop
 800d670:	2000000c 	.word	0x2000000c
 800d674:	0800e2f4 	.word	0x0800e2f4
 800d678:	0800e314 	.word	0x0800e314
 800d67c:	0800e2d4 	.word	0x0800e2d4

0800d680 <abort>:
 800d680:	b508      	push	{r3, lr}
 800d682:	2006      	movs	r0, #6
 800d684:	f000 fa54 	bl	800db30 <raise>
 800d688:	2001      	movs	r0, #1
 800d68a:	f7f6 f84f 	bl	800372c <_exit>
	...

0800d690 <__sflush_r>:
 800d690:	898a      	ldrh	r2, [r1, #12]
 800d692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d696:	4605      	mov	r5, r0
 800d698:	0710      	lsls	r0, r2, #28
 800d69a:	460c      	mov	r4, r1
 800d69c:	d458      	bmi.n	800d750 <__sflush_r+0xc0>
 800d69e:	684b      	ldr	r3, [r1, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	dc05      	bgt.n	800d6b0 <__sflush_r+0x20>
 800d6a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	dc02      	bgt.n	800d6b0 <__sflush_r+0x20>
 800d6aa:	2000      	movs	r0, #0
 800d6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6b2:	2e00      	cmp	r6, #0
 800d6b4:	d0f9      	beq.n	800d6aa <__sflush_r+0x1a>
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6bc:	682f      	ldr	r7, [r5, #0]
 800d6be:	602b      	str	r3, [r5, #0]
 800d6c0:	d032      	beq.n	800d728 <__sflush_r+0x98>
 800d6c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6c4:	89a3      	ldrh	r3, [r4, #12]
 800d6c6:	075a      	lsls	r2, r3, #29
 800d6c8:	d505      	bpl.n	800d6d6 <__sflush_r+0x46>
 800d6ca:	6863      	ldr	r3, [r4, #4]
 800d6cc:	1ac0      	subs	r0, r0, r3
 800d6ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6d0:	b10b      	cbz	r3, 800d6d6 <__sflush_r+0x46>
 800d6d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6d4:	1ac0      	subs	r0, r0, r3
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	4602      	mov	r2, r0
 800d6da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6dc:	6a21      	ldr	r1, [r4, #32]
 800d6de:	4628      	mov	r0, r5
 800d6e0:	47b0      	blx	r6
 800d6e2:	1c43      	adds	r3, r0, #1
 800d6e4:	89a3      	ldrh	r3, [r4, #12]
 800d6e6:	d106      	bne.n	800d6f6 <__sflush_r+0x66>
 800d6e8:	6829      	ldr	r1, [r5, #0]
 800d6ea:	291d      	cmp	r1, #29
 800d6ec:	d82c      	bhi.n	800d748 <__sflush_r+0xb8>
 800d6ee:	4a2a      	ldr	r2, [pc, #168]	; (800d798 <__sflush_r+0x108>)
 800d6f0:	40ca      	lsrs	r2, r1
 800d6f2:	07d6      	lsls	r6, r2, #31
 800d6f4:	d528      	bpl.n	800d748 <__sflush_r+0xb8>
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	6062      	str	r2, [r4, #4]
 800d6fa:	04d9      	lsls	r1, r3, #19
 800d6fc:	6922      	ldr	r2, [r4, #16]
 800d6fe:	6022      	str	r2, [r4, #0]
 800d700:	d504      	bpl.n	800d70c <__sflush_r+0x7c>
 800d702:	1c42      	adds	r2, r0, #1
 800d704:	d101      	bne.n	800d70a <__sflush_r+0x7a>
 800d706:	682b      	ldr	r3, [r5, #0]
 800d708:	b903      	cbnz	r3, 800d70c <__sflush_r+0x7c>
 800d70a:	6560      	str	r0, [r4, #84]	; 0x54
 800d70c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d70e:	602f      	str	r7, [r5, #0]
 800d710:	2900      	cmp	r1, #0
 800d712:	d0ca      	beq.n	800d6aa <__sflush_r+0x1a>
 800d714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d718:	4299      	cmp	r1, r3
 800d71a:	d002      	beq.n	800d722 <__sflush_r+0x92>
 800d71c:	4628      	mov	r0, r5
 800d71e:	f7ff faa5 	bl	800cc6c <_free_r>
 800d722:	2000      	movs	r0, #0
 800d724:	6360      	str	r0, [r4, #52]	; 0x34
 800d726:	e7c1      	b.n	800d6ac <__sflush_r+0x1c>
 800d728:	6a21      	ldr	r1, [r4, #32]
 800d72a:	2301      	movs	r3, #1
 800d72c:	4628      	mov	r0, r5
 800d72e:	47b0      	blx	r6
 800d730:	1c41      	adds	r1, r0, #1
 800d732:	d1c7      	bne.n	800d6c4 <__sflush_r+0x34>
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d0c4      	beq.n	800d6c4 <__sflush_r+0x34>
 800d73a:	2b1d      	cmp	r3, #29
 800d73c:	d001      	beq.n	800d742 <__sflush_r+0xb2>
 800d73e:	2b16      	cmp	r3, #22
 800d740:	d101      	bne.n	800d746 <__sflush_r+0xb6>
 800d742:	602f      	str	r7, [r5, #0]
 800d744:	e7b1      	b.n	800d6aa <__sflush_r+0x1a>
 800d746:	89a3      	ldrh	r3, [r4, #12]
 800d748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d74c:	81a3      	strh	r3, [r4, #12]
 800d74e:	e7ad      	b.n	800d6ac <__sflush_r+0x1c>
 800d750:	690f      	ldr	r7, [r1, #16]
 800d752:	2f00      	cmp	r7, #0
 800d754:	d0a9      	beq.n	800d6aa <__sflush_r+0x1a>
 800d756:	0793      	lsls	r3, r2, #30
 800d758:	680e      	ldr	r6, [r1, #0]
 800d75a:	bf08      	it	eq
 800d75c:	694b      	ldreq	r3, [r1, #20]
 800d75e:	600f      	str	r7, [r1, #0]
 800d760:	bf18      	it	ne
 800d762:	2300      	movne	r3, #0
 800d764:	eba6 0807 	sub.w	r8, r6, r7
 800d768:	608b      	str	r3, [r1, #8]
 800d76a:	f1b8 0f00 	cmp.w	r8, #0
 800d76e:	dd9c      	ble.n	800d6aa <__sflush_r+0x1a>
 800d770:	6a21      	ldr	r1, [r4, #32]
 800d772:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d774:	4643      	mov	r3, r8
 800d776:	463a      	mov	r2, r7
 800d778:	4628      	mov	r0, r5
 800d77a:	47b0      	blx	r6
 800d77c:	2800      	cmp	r0, #0
 800d77e:	dc06      	bgt.n	800d78e <__sflush_r+0xfe>
 800d780:	89a3      	ldrh	r3, [r4, #12]
 800d782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d786:	81a3      	strh	r3, [r4, #12]
 800d788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d78c:	e78e      	b.n	800d6ac <__sflush_r+0x1c>
 800d78e:	4407      	add	r7, r0
 800d790:	eba8 0800 	sub.w	r8, r8, r0
 800d794:	e7e9      	b.n	800d76a <__sflush_r+0xda>
 800d796:	bf00      	nop
 800d798:	20400001 	.word	0x20400001

0800d79c <_fflush_r>:
 800d79c:	b538      	push	{r3, r4, r5, lr}
 800d79e:	690b      	ldr	r3, [r1, #16]
 800d7a0:	4605      	mov	r5, r0
 800d7a2:	460c      	mov	r4, r1
 800d7a4:	b913      	cbnz	r3, 800d7ac <_fflush_r+0x10>
 800d7a6:	2500      	movs	r5, #0
 800d7a8:	4628      	mov	r0, r5
 800d7aa:	bd38      	pop	{r3, r4, r5, pc}
 800d7ac:	b118      	cbz	r0, 800d7b6 <_fflush_r+0x1a>
 800d7ae:	6983      	ldr	r3, [r0, #24]
 800d7b0:	b90b      	cbnz	r3, 800d7b6 <_fflush_r+0x1a>
 800d7b2:	f000 f887 	bl	800d8c4 <__sinit>
 800d7b6:	4b14      	ldr	r3, [pc, #80]	; (800d808 <_fflush_r+0x6c>)
 800d7b8:	429c      	cmp	r4, r3
 800d7ba:	d11b      	bne.n	800d7f4 <_fflush_r+0x58>
 800d7bc:	686c      	ldr	r4, [r5, #4]
 800d7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d0ef      	beq.n	800d7a6 <_fflush_r+0xa>
 800d7c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7c8:	07d0      	lsls	r0, r2, #31
 800d7ca:	d404      	bmi.n	800d7d6 <_fflush_r+0x3a>
 800d7cc:	0599      	lsls	r1, r3, #22
 800d7ce:	d402      	bmi.n	800d7d6 <_fflush_r+0x3a>
 800d7d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7d2:	f000 f915 	bl	800da00 <__retarget_lock_acquire_recursive>
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	4621      	mov	r1, r4
 800d7da:	f7ff ff59 	bl	800d690 <__sflush_r>
 800d7de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7e0:	07da      	lsls	r2, r3, #31
 800d7e2:	4605      	mov	r5, r0
 800d7e4:	d4e0      	bmi.n	800d7a8 <_fflush_r+0xc>
 800d7e6:	89a3      	ldrh	r3, [r4, #12]
 800d7e8:	059b      	lsls	r3, r3, #22
 800d7ea:	d4dd      	bmi.n	800d7a8 <_fflush_r+0xc>
 800d7ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ee:	f000 f908 	bl	800da02 <__retarget_lock_release_recursive>
 800d7f2:	e7d9      	b.n	800d7a8 <_fflush_r+0xc>
 800d7f4:	4b05      	ldr	r3, [pc, #20]	; (800d80c <_fflush_r+0x70>)
 800d7f6:	429c      	cmp	r4, r3
 800d7f8:	d101      	bne.n	800d7fe <_fflush_r+0x62>
 800d7fa:	68ac      	ldr	r4, [r5, #8]
 800d7fc:	e7df      	b.n	800d7be <_fflush_r+0x22>
 800d7fe:	4b04      	ldr	r3, [pc, #16]	; (800d810 <_fflush_r+0x74>)
 800d800:	429c      	cmp	r4, r3
 800d802:	bf08      	it	eq
 800d804:	68ec      	ldreq	r4, [r5, #12]
 800d806:	e7da      	b.n	800d7be <_fflush_r+0x22>
 800d808:	0800e2f4 	.word	0x0800e2f4
 800d80c:	0800e314 	.word	0x0800e314
 800d810:	0800e2d4 	.word	0x0800e2d4

0800d814 <std>:
 800d814:	2300      	movs	r3, #0
 800d816:	b510      	push	{r4, lr}
 800d818:	4604      	mov	r4, r0
 800d81a:	e9c0 3300 	strd	r3, r3, [r0]
 800d81e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d822:	6083      	str	r3, [r0, #8]
 800d824:	8181      	strh	r1, [r0, #12]
 800d826:	6643      	str	r3, [r0, #100]	; 0x64
 800d828:	81c2      	strh	r2, [r0, #14]
 800d82a:	6183      	str	r3, [r0, #24]
 800d82c:	4619      	mov	r1, r3
 800d82e:	2208      	movs	r2, #8
 800d830:	305c      	adds	r0, #92	; 0x5c
 800d832:	f7fd fb5b 	bl	800aeec <memset>
 800d836:	4b05      	ldr	r3, [pc, #20]	; (800d84c <std+0x38>)
 800d838:	6263      	str	r3, [r4, #36]	; 0x24
 800d83a:	4b05      	ldr	r3, [pc, #20]	; (800d850 <std+0x3c>)
 800d83c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d83e:	4b05      	ldr	r3, [pc, #20]	; (800d854 <std+0x40>)
 800d840:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d842:	4b05      	ldr	r3, [pc, #20]	; (800d858 <std+0x44>)
 800d844:	6224      	str	r4, [r4, #32]
 800d846:	6323      	str	r3, [r4, #48]	; 0x30
 800d848:	bd10      	pop	{r4, pc}
 800d84a:	bf00      	nop
 800d84c:	0800db69 	.word	0x0800db69
 800d850:	0800db8b 	.word	0x0800db8b
 800d854:	0800dbc3 	.word	0x0800dbc3
 800d858:	0800dbe7 	.word	0x0800dbe7

0800d85c <_cleanup_r>:
 800d85c:	4901      	ldr	r1, [pc, #4]	; (800d864 <_cleanup_r+0x8>)
 800d85e:	f000 b8af 	b.w	800d9c0 <_fwalk_reent>
 800d862:	bf00      	nop
 800d864:	0800d79d 	.word	0x0800d79d

0800d868 <__sfmoreglue>:
 800d868:	b570      	push	{r4, r5, r6, lr}
 800d86a:	2268      	movs	r2, #104	; 0x68
 800d86c:	1e4d      	subs	r5, r1, #1
 800d86e:	4355      	muls	r5, r2
 800d870:	460e      	mov	r6, r1
 800d872:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d876:	f7ff fa65 	bl	800cd44 <_malloc_r>
 800d87a:	4604      	mov	r4, r0
 800d87c:	b140      	cbz	r0, 800d890 <__sfmoreglue+0x28>
 800d87e:	2100      	movs	r1, #0
 800d880:	e9c0 1600 	strd	r1, r6, [r0]
 800d884:	300c      	adds	r0, #12
 800d886:	60a0      	str	r0, [r4, #8]
 800d888:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d88c:	f7fd fb2e 	bl	800aeec <memset>
 800d890:	4620      	mov	r0, r4
 800d892:	bd70      	pop	{r4, r5, r6, pc}

0800d894 <__sfp_lock_acquire>:
 800d894:	4801      	ldr	r0, [pc, #4]	; (800d89c <__sfp_lock_acquire+0x8>)
 800d896:	f000 b8b3 	b.w	800da00 <__retarget_lock_acquire_recursive>
 800d89a:	bf00      	nop
 800d89c:	20005b59 	.word	0x20005b59

0800d8a0 <__sfp_lock_release>:
 800d8a0:	4801      	ldr	r0, [pc, #4]	; (800d8a8 <__sfp_lock_release+0x8>)
 800d8a2:	f000 b8ae 	b.w	800da02 <__retarget_lock_release_recursive>
 800d8a6:	bf00      	nop
 800d8a8:	20005b59 	.word	0x20005b59

0800d8ac <__sinit_lock_acquire>:
 800d8ac:	4801      	ldr	r0, [pc, #4]	; (800d8b4 <__sinit_lock_acquire+0x8>)
 800d8ae:	f000 b8a7 	b.w	800da00 <__retarget_lock_acquire_recursive>
 800d8b2:	bf00      	nop
 800d8b4:	20005b5a 	.word	0x20005b5a

0800d8b8 <__sinit_lock_release>:
 800d8b8:	4801      	ldr	r0, [pc, #4]	; (800d8c0 <__sinit_lock_release+0x8>)
 800d8ba:	f000 b8a2 	b.w	800da02 <__retarget_lock_release_recursive>
 800d8be:	bf00      	nop
 800d8c0:	20005b5a 	.word	0x20005b5a

0800d8c4 <__sinit>:
 800d8c4:	b510      	push	{r4, lr}
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	f7ff fff0 	bl	800d8ac <__sinit_lock_acquire>
 800d8cc:	69a3      	ldr	r3, [r4, #24]
 800d8ce:	b11b      	cbz	r3, 800d8d8 <__sinit+0x14>
 800d8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8d4:	f7ff bff0 	b.w	800d8b8 <__sinit_lock_release>
 800d8d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d8dc:	6523      	str	r3, [r4, #80]	; 0x50
 800d8de:	4b13      	ldr	r3, [pc, #76]	; (800d92c <__sinit+0x68>)
 800d8e0:	4a13      	ldr	r2, [pc, #76]	; (800d930 <__sinit+0x6c>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d8e6:	42a3      	cmp	r3, r4
 800d8e8:	bf04      	itt	eq
 800d8ea:	2301      	moveq	r3, #1
 800d8ec:	61a3      	streq	r3, [r4, #24]
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	f000 f820 	bl	800d934 <__sfp>
 800d8f4:	6060      	str	r0, [r4, #4]
 800d8f6:	4620      	mov	r0, r4
 800d8f8:	f000 f81c 	bl	800d934 <__sfp>
 800d8fc:	60a0      	str	r0, [r4, #8]
 800d8fe:	4620      	mov	r0, r4
 800d900:	f000 f818 	bl	800d934 <__sfp>
 800d904:	2200      	movs	r2, #0
 800d906:	60e0      	str	r0, [r4, #12]
 800d908:	2104      	movs	r1, #4
 800d90a:	6860      	ldr	r0, [r4, #4]
 800d90c:	f7ff ff82 	bl	800d814 <std>
 800d910:	68a0      	ldr	r0, [r4, #8]
 800d912:	2201      	movs	r2, #1
 800d914:	2109      	movs	r1, #9
 800d916:	f7ff ff7d 	bl	800d814 <std>
 800d91a:	68e0      	ldr	r0, [r4, #12]
 800d91c:	2202      	movs	r2, #2
 800d91e:	2112      	movs	r1, #18
 800d920:	f7ff ff78 	bl	800d814 <std>
 800d924:	2301      	movs	r3, #1
 800d926:	61a3      	str	r3, [r4, #24]
 800d928:	e7d2      	b.n	800d8d0 <__sinit+0xc>
 800d92a:	bf00      	nop
 800d92c:	0800df5c 	.word	0x0800df5c
 800d930:	0800d85d 	.word	0x0800d85d

0800d934 <__sfp>:
 800d934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d936:	4607      	mov	r7, r0
 800d938:	f7ff ffac 	bl	800d894 <__sfp_lock_acquire>
 800d93c:	4b1e      	ldr	r3, [pc, #120]	; (800d9b8 <__sfp+0x84>)
 800d93e:	681e      	ldr	r6, [r3, #0]
 800d940:	69b3      	ldr	r3, [r6, #24]
 800d942:	b913      	cbnz	r3, 800d94a <__sfp+0x16>
 800d944:	4630      	mov	r0, r6
 800d946:	f7ff ffbd 	bl	800d8c4 <__sinit>
 800d94a:	3648      	adds	r6, #72	; 0x48
 800d94c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d950:	3b01      	subs	r3, #1
 800d952:	d503      	bpl.n	800d95c <__sfp+0x28>
 800d954:	6833      	ldr	r3, [r6, #0]
 800d956:	b30b      	cbz	r3, 800d99c <__sfp+0x68>
 800d958:	6836      	ldr	r6, [r6, #0]
 800d95a:	e7f7      	b.n	800d94c <__sfp+0x18>
 800d95c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d960:	b9d5      	cbnz	r5, 800d998 <__sfp+0x64>
 800d962:	4b16      	ldr	r3, [pc, #88]	; (800d9bc <__sfp+0x88>)
 800d964:	60e3      	str	r3, [r4, #12]
 800d966:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d96a:	6665      	str	r5, [r4, #100]	; 0x64
 800d96c:	f000 f847 	bl	800d9fe <__retarget_lock_init_recursive>
 800d970:	f7ff ff96 	bl	800d8a0 <__sfp_lock_release>
 800d974:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d978:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d97c:	6025      	str	r5, [r4, #0]
 800d97e:	61a5      	str	r5, [r4, #24]
 800d980:	2208      	movs	r2, #8
 800d982:	4629      	mov	r1, r5
 800d984:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d988:	f7fd fab0 	bl	800aeec <memset>
 800d98c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d990:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d994:	4620      	mov	r0, r4
 800d996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d998:	3468      	adds	r4, #104	; 0x68
 800d99a:	e7d9      	b.n	800d950 <__sfp+0x1c>
 800d99c:	2104      	movs	r1, #4
 800d99e:	4638      	mov	r0, r7
 800d9a0:	f7ff ff62 	bl	800d868 <__sfmoreglue>
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	6030      	str	r0, [r6, #0]
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	d1d5      	bne.n	800d958 <__sfp+0x24>
 800d9ac:	f7ff ff78 	bl	800d8a0 <__sfp_lock_release>
 800d9b0:	230c      	movs	r3, #12
 800d9b2:	603b      	str	r3, [r7, #0]
 800d9b4:	e7ee      	b.n	800d994 <__sfp+0x60>
 800d9b6:	bf00      	nop
 800d9b8:	0800df5c 	.word	0x0800df5c
 800d9bc:	ffff0001 	.word	0xffff0001

0800d9c0 <_fwalk_reent>:
 800d9c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9c4:	4606      	mov	r6, r0
 800d9c6:	4688      	mov	r8, r1
 800d9c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d9cc:	2700      	movs	r7, #0
 800d9ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9d2:	f1b9 0901 	subs.w	r9, r9, #1
 800d9d6:	d505      	bpl.n	800d9e4 <_fwalk_reent+0x24>
 800d9d8:	6824      	ldr	r4, [r4, #0]
 800d9da:	2c00      	cmp	r4, #0
 800d9dc:	d1f7      	bne.n	800d9ce <_fwalk_reent+0xe>
 800d9de:	4638      	mov	r0, r7
 800d9e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9e4:	89ab      	ldrh	r3, [r5, #12]
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d907      	bls.n	800d9fa <_fwalk_reent+0x3a>
 800d9ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	d003      	beq.n	800d9fa <_fwalk_reent+0x3a>
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	4630      	mov	r0, r6
 800d9f6:	47c0      	blx	r8
 800d9f8:	4307      	orrs	r7, r0
 800d9fa:	3568      	adds	r5, #104	; 0x68
 800d9fc:	e7e9      	b.n	800d9d2 <_fwalk_reent+0x12>

0800d9fe <__retarget_lock_init_recursive>:
 800d9fe:	4770      	bx	lr

0800da00 <__retarget_lock_acquire_recursive>:
 800da00:	4770      	bx	lr

0800da02 <__retarget_lock_release_recursive>:
 800da02:	4770      	bx	lr

0800da04 <__swhatbuf_r>:
 800da04:	b570      	push	{r4, r5, r6, lr}
 800da06:	460e      	mov	r6, r1
 800da08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da0c:	2900      	cmp	r1, #0
 800da0e:	b096      	sub	sp, #88	; 0x58
 800da10:	4614      	mov	r4, r2
 800da12:	461d      	mov	r5, r3
 800da14:	da08      	bge.n	800da28 <__swhatbuf_r+0x24>
 800da16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800da1a:	2200      	movs	r2, #0
 800da1c:	602a      	str	r2, [r5, #0]
 800da1e:	061a      	lsls	r2, r3, #24
 800da20:	d410      	bmi.n	800da44 <__swhatbuf_r+0x40>
 800da22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da26:	e00e      	b.n	800da46 <__swhatbuf_r+0x42>
 800da28:	466a      	mov	r2, sp
 800da2a:	f000 f903 	bl	800dc34 <_fstat_r>
 800da2e:	2800      	cmp	r0, #0
 800da30:	dbf1      	blt.n	800da16 <__swhatbuf_r+0x12>
 800da32:	9a01      	ldr	r2, [sp, #4]
 800da34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800da38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800da3c:	425a      	negs	r2, r3
 800da3e:	415a      	adcs	r2, r3
 800da40:	602a      	str	r2, [r5, #0]
 800da42:	e7ee      	b.n	800da22 <__swhatbuf_r+0x1e>
 800da44:	2340      	movs	r3, #64	; 0x40
 800da46:	2000      	movs	r0, #0
 800da48:	6023      	str	r3, [r4, #0]
 800da4a:	b016      	add	sp, #88	; 0x58
 800da4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800da50 <__smakebuf_r>:
 800da50:	898b      	ldrh	r3, [r1, #12]
 800da52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da54:	079d      	lsls	r5, r3, #30
 800da56:	4606      	mov	r6, r0
 800da58:	460c      	mov	r4, r1
 800da5a:	d507      	bpl.n	800da6c <__smakebuf_r+0x1c>
 800da5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da60:	6023      	str	r3, [r4, #0]
 800da62:	6123      	str	r3, [r4, #16]
 800da64:	2301      	movs	r3, #1
 800da66:	6163      	str	r3, [r4, #20]
 800da68:	b002      	add	sp, #8
 800da6a:	bd70      	pop	{r4, r5, r6, pc}
 800da6c:	ab01      	add	r3, sp, #4
 800da6e:	466a      	mov	r2, sp
 800da70:	f7ff ffc8 	bl	800da04 <__swhatbuf_r>
 800da74:	9900      	ldr	r1, [sp, #0]
 800da76:	4605      	mov	r5, r0
 800da78:	4630      	mov	r0, r6
 800da7a:	f7ff f963 	bl	800cd44 <_malloc_r>
 800da7e:	b948      	cbnz	r0, 800da94 <__smakebuf_r+0x44>
 800da80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da84:	059a      	lsls	r2, r3, #22
 800da86:	d4ef      	bmi.n	800da68 <__smakebuf_r+0x18>
 800da88:	f023 0303 	bic.w	r3, r3, #3
 800da8c:	f043 0302 	orr.w	r3, r3, #2
 800da90:	81a3      	strh	r3, [r4, #12]
 800da92:	e7e3      	b.n	800da5c <__smakebuf_r+0xc>
 800da94:	4b0d      	ldr	r3, [pc, #52]	; (800dacc <__smakebuf_r+0x7c>)
 800da96:	62b3      	str	r3, [r6, #40]	; 0x28
 800da98:	89a3      	ldrh	r3, [r4, #12]
 800da9a:	6020      	str	r0, [r4, #0]
 800da9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800daa0:	81a3      	strh	r3, [r4, #12]
 800daa2:	9b00      	ldr	r3, [sp, #0]
 800daa4:	6163      	str	r3, [r4, #20]
 800daa6:	9b01      	ldr	r3, [sp, #4]
 800daa8:	6120      	str	r0, [r4, #16]
 800daaa:	b15b      	cbz	r3, 800dac4 <__smakebuf_r+0x74>
 800daac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dab0:	4630      	mov	r0, r6
 800dab2:	f000 f8d1 	bl	800dc58 <_isatty_r>
 800dab6:	b128      	cbz	r0, 800dac4 <__smakebuf_r+0x74>
 800dab8:	89a3      	ldrh	r3, [r4, #12]
 800daba:	f023 0303 	bic.w	r3, r3, #3
 800dabe:	f043 0301 	orr.w	r3, r3, #1
 800dac2:	81a3      	strh	r3, [r4, #12]
 800dac4:	89a0      	ldrh	r0, [r4, #12]
 800dac6:	4305      	orrs	r5, r0
 800dac8:	81a5      	strh	r5, [r4, #12]
 800daca:	e7cd      	b.n	800da68 <__smakebuf_r+0x18>
 800dacc:	0800d85d 	.word	0x0800d85d

0800dad0 <_malloc_usable_size_r>:
 800dad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dad4:	1f18      	subs	r0, r3, #4
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	bfbc      	itt	lt
 800dada:	580b      	ldrlt	r3, [r1, r0]
 800dadc:	18c0      	addlt	r0, r0, r3
 800dade:	4770      	bx	lr

0800dae0 <_raise_r>:
 800dae0:	291f      	cmp	r1, #31
 800dae2:	b538      	push	{r3, r4, r5, lr}
 800dae4:	4604      	mov	r4, r0
 800dae6:	460d      	mov	r5, r1
 800dae8:	d904      	bls.n	800daf4 <_raise_r+0x14>
 800daea:	2316      	movs	r3, #22
 800daec:	6003      	str	r3, [r0, #0]
 800daee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800daf2:	bd38      	pop	{r3, r4, r5, pc}
 800daf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800daf6:	b112      	cbz	r2, 800dafe <_raise_r+0x1e>
 800daf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dafc:	b94b      	cbnz	r3, 800db12 <_raise_r+0x32>
 800dafe:	4620      	mov	r0, r4
 800db00:	f000 f830 	bl	800db64 <_getpid_r>
 800db04:	462a      	mov	r2, r5
 800db06:	4601      	mov	r1, r0
 800db08:	4620      	mov	r0, r4
 800db0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db0e:	f000 b817 	b.w	800db40 <_kill_r>
 800db12:	2b01      	cmp	r3, #1
 800db14:	d00a      	beq.n	800db2c <_raise_r+0x4c>
 800db16:	1c59      	adds	r1, r3, #1
 800db18:	d103      	bne.n	800db22 <_raise_r+0x42>
 800db1a:	2316      	movs	r3, #22
 800db1c:	6003      	str	r3, [r0, #0]
 800db1e:	2001      	movs	r0, #1
 800db20:	e7e7      	b.n	800daf2 <_raise_r+0x12>
 800db22:	2400      	movs	r4, #0
 800db24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db28:	4628      	mov	r0, r5
 800db2a:	4798      	blx	r3
 800db2c:	2000      	movs	r0, #0
 800db2e:	e7e0      	b.n	800daf2 <_raise_r+0x12>

0800db30 <raise>:
 800db30:	4b02      	ldr	r3, [pc, #8]	; (800db3c <raise+0xc>)
 800db32:	4601      	mov	r1, r0
 800db34:	6818      	ldr	r0, [r3, #0]
 800db36:	f7ff bfd3 	b.w	800dae0 <_raise_r>
 800db3a:	bf00      	nop
 800db3c:	2000000c 	.word	0x2000000c

0800db40 <_kill_r>:
 800db40:	b538      	push	{r3, r4, r5, lr}
 800db42:	4d07      	ldr	r5, [pc, #28]	; (800db60 <_kill_r+0x20>)
 800db44:	2300      	movs	r3, #0
 800db46:	4604      	mov	r4, r0
 800db48:	4608      	mov	r0, r1
 800db4a:	4611      	mov	r1, r2
 800db4c:	602b      	str	r3, [r5, #0]
 800db4e:	f7f5 fddd 	bl	800370c <_kill>
 800db52:	1c43      	adds	r3, r0, #1
 800db54:	d102      	bne.n	800db5c <_kill_r+0x1c>
 800db56:	682b      	ldr	r3, [r5, #0]
 800db58:	b103      	cbz	r3, 800db5c <_kill_r+0x1c>
 800db5a:	6023      	str	r3, [r4, #0]
 800db5c:	bd38      	pop	{r3, r4, r5, pc}
 800db5e:	bf00      	nop
 800db60:	20005b54 	.word	0x20005b54

0800db64 <_getpid_r>:
 800db64:	f7f5 bdca 	b.w	80036fc <_getpid>

0800db68 <__sread>:
 800db68:	b510      	push	{r4, lr}
 800db6a:	460c      	mov	r4, r1
 800db6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db70:	f000 f894 	bl	800dc9c <_read_r>
 800db74:	2800      	cmp	r0, #0
 800db76:	bfab      	itete	ge
 800db78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db7a:	89a3      	ldrhlt	r3, [r4, #12]
 800db7c:	181b      	addge	r3, r3, r0
 800db7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db82:	bfac      	ite	ge
 800db84:	6563      	strge	r3, [r4, #84]	; 0x54
 800db86:	81a3      	strhlt	r3, [r4, #12]
 800db88:	bd10      	pop	{r4, pc}

0800db8a <__swrite>:
 800db8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db8e:	461f      	mov	r7, r3
 800db90:	898b      	ldrh	r3, [r1, #12]
 800db92:	05db      	lsls	r3, r3, #23
 800db94:	4605      	mov	r5, r0
 800db96:	460c      	mov	r4, r1
 800db98:	4616      	mov	r6, r2
 800db9a:	d505      	bpl.n	800dba8 <__swrite+0x1e>
 800db9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dba0:	2302      	movs	r3, #2
 800dba2:	2200      	movs	r2, #0
 800dba4:	f000 f868 	bl	800dc78 <_lseek_r>
 800dba8:	89a3      	ldrh	r3, [r4, #12]
 800dbaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbb2:	81a3      	strh	r3, [r4, #12]
 800dbb4:	4632      	mov	r2, r6
 800dbb6:	463b      	mov	r3, r7
 800dbb8:	4628      	mov	r0, r5
 800dbba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbbe:	f000 b817 	b.w	800dbf0 <_write_r>

0800dbc2 <__sseek>:
 800dbc2:	b510      	push	{r4, lr}
 800dbc4:	460c      	mov	r4, r1
 800dbc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbca:	f000 f855 	bl	800dc78 <_lseek_r>
 800dbce:	1c43      	adds	r3, r0, #1
 800dbd0:	89a3      	ldrh	r3, [r4, #12]
 800dbd2:	bf15      	itete	ne
 800dbd4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dbd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dbda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dbde:	81a3      	strheq	r3, [r4, #12]
 800dbe0:	bf18      	it	ne
 800dbe2:	81a3      	strhne	r3, [r4, #12]
 800dbe4:	bd10      	pop	{r4, pc}

0800dbe6 <__sclose>:
 800dbe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbea:	f000 b813 	b.w	800dc14 <_close_r>
	...

0800dbf0 <_write_r>:
 800dbf0:	b538      	push	{r3, r4, r5, lr}
 800dbf2:	4d07      	ldr	r5, [pc, #28]	; (800dc10 <_write_r+0x20>)
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	4608      	mov	r0, r1
 800dbf8:	4611      	mov	r1, r2
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	602a      	str	r2, [r5, #0]
 800dbfe:	461a      	mov	r2, r3
 800dc00:	f7f5 fdbb 	bl	800377a <_write>
 800dc04:	1c43      	adds	r3, r0, #1
 800dc06:	d102      	bne.n	800dc0e <_write_r+0x1e>
 800dc08:	682b      	ldr	r3, [r5, #0]
 800dc0a:	b103      	cbz	r3, 800dc0e <_write_r+0x1e>
 800dc0c:	6023      	str	r3, [r4, #0]
 800dc0e:	bd38      	pop	{r3, r4, r5, pc}
 800dc10:	20005b54 	.word	0x20005b54

0800dc14 <_close_r>:
 800dc14:	b538      	push	{r3, r4, r5, lr}
 800dc16:	4d06      	ldr	r5, [pc, #24]	; (800dc30 <_close_r+0x1c>)
 800dc18:	2300      	movs	r3, #0
 800dc1a:	4604      	mov	r4, r0
 800dc1c:	4608      	mov	r0, r1
 800dc1e:	602b      	str	r3, [r5, #0]
 800dc20:	f7f5 fdc7 	bl	80037b2 <_close>
 800dc24:	1c43      	adds	r3, r0, #1
 800dc26:	d102      	bne.n	800dc2e <_close_r+0x1a>
 800dc28:	682b      	ldr	r3, [r5, #0]
 800dc2a:	b103      	cbz	r3, 800dc2e <_close_r+0x1a>
 800dc2c:	6023      	str	r3, [r4, #0]
 800dc2e:	bd38      	pop	{r3, r4, r5, pc}
 800dc30:	20005b54 	.word	0x20005b54

0800dc34 <_fstat_r>:
 800dc34:	b538      	push	{r3, r4, r5, lr}
 800dc36:	4d07      	ldr	r5, [pc, #28]	; (800dc54 <_fstat_r+0x20>)
 800dc38:	2300      	movs	r3, #0
 800dc3a:	4604      	mov	r4, r0
 800dc3c:	4608      	mov	r0, r1
 800dc3e:	4611      	mov	r1, r2
 800dc40:	602b      	str	r3, [r5, #0]
 800dc42:	f7f5 fdc2 	bl	80037ca <_fstat>
 800dc46:	1c43      	adds	r3, r0, #1
 800dc48:	d102      	bne.n	800dc50 <_fstat_r+0x1c>
 800dc4a:	682b      	ldr	r3, [r5, #0]
 800dc4c:	b103      	cbz	r3, 800dc50 <_fstat_r+0x1c>
 800dc4e:	6023      	str	r3, [r4, #0]
 800dc50:	bd38      	pop	{r3, r4, r5, pc}
 800dc52:	bf00      	nop
 800dc54:	20005b54 	.word	0x20005b54

0800dc58 <_isatty_r>:
 800dc58:	b538      	push	{r3, r4, r5, lr}
 800dc5a:	4d06      	ldr	r5, [pc, #24]	; (800dc74 <_isatty_r+0x1c>)
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	4604      	mov	r4, r0
 800dc60:	4608      	mov	r0, r1
 800dc62:	602b      	str	r3, [r5, #0]
 800dc64:	f7f5 fdc1 	bl	80037ea <_isatty>
 800dc68:	1c43      	adds	r3, r0, #1
 800dc6a:	d102      	bne.n	800dc72 <_isatty_r+0x1a>
 800dc6c:	682b      	ldr	r3, [r5, #0]
 800dc6e:	b103      	cbz	r3, 800dc72 <_isatty_r+0x1a>
 800dc70:	6023      	str	r3, [r4, #0]
 800dc72:	bd38      	pop	{r3, r4, r5, pc}
 800dc74:	20005b54 	.word	0x20005b54

0800dc78 <_lseek_r>:
 800dc78:	b538      	push	{r3, r4, r5, lr}
 800dc7a:	4d07      	ldr	r5, [pc, #28]	; (800dc98 <_lseek_r+0x20>)
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	4608      	mov	r0, r1
 800dc80:	4611      	mov	r1, r2
 800dc82:	2200      	movs	r2, #0
 800dc84:	602a      	str	r2, [r5, #0]
 800dc86:	461a      	mov	r2, r3
 800dc88:	f7f5 fdba 	bl	8003800 <_lseek>
 800dc8c:	1c43      	adds	r3, r0, #1
 800dc8e:	d102      	bne.n	800dc96 <_lseek_r+0x1e>
 800dc90:	682b      	ldr	r3, [r5, #0]
 800dc92:	b103      	cbz	r3, 800dc96 <_lseek_r+0x1e>
 800dc94:	6023      	str	r3, [r4, #0]
 800dc96:	bd38      	pop	{r3, r4, r5, pc}
 800dc98:	20005b54 	.word	0x20005b54

0800dc9c <_read_r>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	4d07      	ldr	r5, [pc, #28]	; (800dcbc <_read_r+0x20>)
 800dca0:	4604      	mov	r4, r0
 800dca2:	4608      	mov	r0, r1
 800dca4:	4611      	mov	r1, r2
 800dca6:	2200      	movs	r2, #0
 800dca8:	602a      	str	r2, [r5, #0]
 800dcaa:	461a      	mov	r2, r3
 800dcac:	f7f5 fd48 	bl	8003740 <_read>
 800dcb0:	1c43      	adds	r3, r0, #1
 800dcb2:	d102      	bne.n	800dcba <_read_r+0x1e>
 800dcb4:	682b      	ldr	r3, [r5, #0]
 800dcb6:	b103      	cbz	r3, 800dcba <_read_r+0x1e>
 800dcb8:	6023      	str	r3, [r4, #0]
 800dcba:	bd38      	pop	{r3, r4, r5, pc}
 800dcbc:	20005b54 	.word	0x20005b54

0800dcc0 <sqrt>:
 800dcc0:	b538      	push	{r3, r4, r5, lr}
 800dcc2:	ed2d 8b02 	vpush	{d8}
 800dcc6:	ec55 4b10 	vmov	r4, r5, d0
 800dcca:	f000 f825 	bl	800dd18 <__ieee754_sqrt>
 800dcce:	4622      	mov	r2, r4
 800dcd0:	462b      	mov	r3, r5
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	4629      	mov	r1, r5
 800dcd6:	eeb0 8a40 	vmov.f32	s16, s0
 800dcda:	eef0 8a60 	vmov.f32	s17, s1
 800dcde:	f7f2 ff25 	bl	8000b2c <__aeabi_dcmpun>
 800dce2:	b990      	cbnz	r0, 800dd0a <sqrt+0x4a>
 800dce4:	2200      	movs	r2, #0
 800dce6:	2300      	movs	r3, #0
 800dce8:	4620      	mov	r0, r4
 800dcea:	4629      	mov	r1, r5
 800dcec:	f7f2 fef6 	bl	8000adc <__aeabi_dcmplt>
 800dcf0:	b158      	cbz	r0, 800dd0a <sqrt+0x4a>
 800dcf2:	f7fd f8d1 	bl	800ae98 <__errno>
 800dcf6:	2321      	movs	r3, #33	; 0x21
 800dcf8:	6003      	str	r3, [r0, #0]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	4610      	mov	r0, r2
 800dd00:	4619      	mov	r1, r3
 800dd02:	f7f2 fda3 	bl	800084c <__aeabi_ddiv>
 800dd06:	ec41 0b18 	vmov	d8, r0, r1
 800dd0a:	eeb0 0a48 	vmov.f32	s0, s16
 800dd0e:	eef0 0a68 	vmov.f32	s1, s17
 800dd12:	ecbd 8b02 	vpop	{d8}
 800dd16:	bd38      	pop	{r3, r4, r5, pc}

0800dd18 <__ieee754_sqrt>:
 800dd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd1c:	ec55 4b10 	vmov	r4, r5, d0
 800dd20:	4e55      	ldr	r6, [pc, #340]	; (800de78 <__ieee754_sqrt+0x160>)
 800dd22:	43ae      	bics	r6, r5
 800dd24:	ee10 0a10 	vmov	r0, s0
 800dd28:	ee10 3a10 	vmov	r3, s0
 800dd2c:	462a      	mov	r2, r5
 800dd2e:	4629      	mov	r1, r5
 800dd30:	d110      	bne.n	800dd54 <__ieee754_sqrt+0x3c>
 800dd32:	ee10 2a10 	vmov	r2, s0
 800dd36:	462b      	mov	r3, r5
 800dd38:	f7f2 fc5e 	bl	80005f8 <__aeabi_dmul>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	460b      	mov	r3, r1
 800dd40:	4620      	mov	r0, r4
 800dd42:	4629      	mov	r1, r5
 800dd44:	f7f2 faa2 	bl	800028c <__adddf3>
 800dd48:	4604      	mov	r4, r0
 800dd4a:	460d      	mov	r5, r1
 800dd4c:	ec45 4b10 	vmov	d0, r4, r5
 800dd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd54:	2d00      	cmp	r5, #0
 800dd56:	dc10      	bgt.n	800dd7a <__ieee754_sqrt+0x62>
 800dd58:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dd5c:	4330      	orrs	r0, r6
 800dd5e:	d0f5      	beq.n	800dd4c <__ieee754_sqrt+0x34>
 800dd60:	b15d      	cbz	r5, 800dd7a <__ieee754_sqrt+0x62>
 800dd62:	ee10 2a10 	vmov	r2, s0
 800dd66:	462b      	mov	r3, r5
 800dd68:	ee10 0a10 	vmov	r0, s0
 800dd6c:	f7f2 fa8c 	bl	8000288 <__aeabi_dsub>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	f7f2 fd6a 	bl	800084c <__aeabi_ddiv>
 800dd78:	e7e6      	b.n	800dd48 <__ieee754_sqrt+0x30>
 800dd7a:	1512      	asrs	r2, r2, #20
 800dd7c:	d074      	beq.n	800de68 <__ieee754_sqrt+0x150>
 800dd7e:	07d4      	lsls	r4, r2, #31
 800dd80:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800dd84:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800dd88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800dd8c:	bf5e      	ittt	pl
 800dd8e:	0fda      	lsrpl	r2, r3, #31
 800dd90:	005b      	lslpl	r3, r3, #1
 800dd92:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800dd96:	2400      	movs	r4, #0
 800dd98:	0fda      	lsrs	r2, r3, #31
 800dd9a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800dd9e:	107f      	asrs	r7, r7, #1
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	2516      	movs	r5, #22
 800dda4:	4620      	mov	r0, r4
 800dda6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ddaa:	1886      	adds	r6, r0, r2
 800ddac:	428e      	cmp	r6, r1
 800ddae:	bfde      	ittt	le
 800ddb0:	1b89      	suble	r1, r1, r6
 800ddb2:	18b0      	addle	r0, r6, r2
 800ddb4:	18a4      	addle	r4, r4, r2
 800ddb6:	0049      	lsls	r1, r1, #1
 800ddb8:	3d01      	subs	r5, #1
 800ddba:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ddbe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ddc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ddc6:	d1f0      	bne.n	800ddaa <__ieee754_sqrt+0x92>
 800ddc8:	462a      	mov	r2, r5
 800ddca:	f04f 0e20 	mov.w	lr, #32
 800ddce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ddd2:	4281      	cmp	r1, r0
 800ddd4:	eb06 0c05 	add.w	ip, r6, r5
 800ddd8:	dc02      	bgt.n	800dde0 <__ieee754_sqrt+0xc8>
 800ddda:	d113      	bne.n	800de04 <__ieee754_sqrt+0xec>
 800dddc:	459c      	cmp	ip, r3
 800ddde:	d811      	bhi.n	800de04 <__ieee754_sqrt+0xec>
 800dde0:	f1bc 0f00 	cmp.w	ip, #0
 800dde4:	eb0c 0506 	add.w	r5, ip, r6
 800dde8:	da43      	bge.n	800de72 <__ieee754_sqrt+0x15a>
 800ddea:	2d00      	cmp	r5, #0
 800ddec:	db41      	blt.n	800de72 <__ieee754_sqrt+0x15a>
 800ddee:	f100 0801 	add.w	r8, r0, #1
 800ddf2:	1a09      	subs	r1, r1, r0
 800ddf4:	459c      	cmp	ip, r3
 800ddf6:	bf88      	it	hi
 800ddf8:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800ddfc:	eba3 030c 	sub.w	r3, r3, ip
 800de00:	4432      	add	r2, r6
 800de02:	4640      	mov	r0, r8
 800de04:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800de08:	f1be 0e01 	subs.w	lr, lr, #1
 800de0c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800de10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800de14:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800de18:	d1db      	bne.n	800ddd2 <__ieee754_sqrt+0xba>
 800de1a:	430b      	orrs	r3, r1
 800de1c:	d006      	beq.n	800de2c <__ieee754_sqrt+0x114>
 800de1e:	1c50      	adds	r0, r2, #1
 800de20:	bf13      	iteet	ne
 800de22:	3201      	addne	r2, #1
 800de24:	3401      	addeq	r4, #1
 800de26:	4672      	moveq	r2, lr
 800de28:	f022 0201 	bicne.w	r2, r2, #1
 800de2c:	1063      	asrs	r3, r4, #1
 800de2e:	0852      	lsrs	r2, r2, #1
 800de30:	07e1      	lsls	r1, r4, #31
 800de32:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800de36:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800de3a:	bf48      	it	mi
 800de3c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800de40:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800de44:	4614      	mov	r4, r2
 800de46:	e781      	b.n	800dd4c <__ieee754_sqrt+0x34>
 800de48:	0ad9      	lsrs	r1, r3, #11
 800de4a:	3815      	subs	r0, #21
 800de4c:	055b      	lsls	r3, r3, #21
 800de4e:	2900      	cmp	r1, #0
 800de50:	d0fa      	beq.n	800de48 <__ieee754_sqrt+0x130>
 800de52:	02cd      	lsls	r5, r1, #11
 800de54:	d50a      	bpl.n	800de6c <__ieee754_sqrt+0x154>
 800de56:	f1c2 0420 	rsb	r4, r2, #32
 800de5a:	fa23 f404 	lsr.w	r4, r3, r4
 800de5e:	1e55      	subs	r5, r2, #1
 800de60:	4093      	lsls	r3, r2
 800de62:	4321      	orrs	r1, r4
 800de64:	1b42      	subs	r2, r0, r5
 800de66:	e78a      	b.n	800dd7e <__ieee754_sqrt+0x66>
 800de68:	4610      	mov	r0, r2
 800de6a:	e7f0      	b.n	800de4e <__ieee754_sqrt+0x136>
 800de6c:	0049      	lsls	r1, r1, #1
 800de6e:	3201      	adds	r2, #1
 800de70:	e7ef      	b.n	800de52 <__ieee754_sqrt+0x13a>
 800de72:	4680      	mov	r8, r0
 800de74:	e7bd      	b.n	800ddf2 <__ieee754_sqrt+0xda>
 800de76:	bf00      	nop
 800de78:	7ff00000 	.word	0x7ff00000

0800de7c <_init>:
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	bf00      	nop
 800de80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de82:	bc08      	pop	{r3}
 800de84:	469e      	mov	lr, r3
 800de86:	4770      	bx	lr

0800de88 <_fini>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	bf00      	nop
 800de8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de8e:	bc08      	pop	{r3}
 800de90:	469e      	mov	lr, r3
 800de92:	4770      	bx	lr
