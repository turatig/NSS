
thermal_camera.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c338  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800c4c8  0800c4c8  0001c4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8e4  0800c8e4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8e4  0800c8e4  0001c8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8ec  0800c8ec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8ec  0800c8ec  0001c8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8f0  0800c8f0  0001c8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00001734  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001910  20001910  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016df7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dbf  00000000  00000000  00037003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  00039dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e0  00000000  00000000  0003b1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000247c7  00000000  00000000  0003c4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001789d  00000000  00000000  00060c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd735  00000000  00000000  0007850c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155c41  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006634  00000000  00000000  00155c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c4b0 	.word	0x0800c4b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800c4b0 	.word	0x0800c4b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <amg8833Init>:

#include "AMG8833.h"
#include "utils.h"
#include "stm32f4xx.h"

void amg8833Init(AMG8833 *inst,I2C_HandleTypeDef *hi2c,uint8_t ad_sel){
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	71fb      	strb	r3, [r7, #7]
	inst->adri2c= ad_sel ? ( AMG8833_I2C_BASE_ADR + 1 ) << 1 :
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <amg8833Init+0x18>
 8000ec0:	22d2      	movs	r2, #210	; 0xd2
 8000ec2:	e000      	b.n	8000ec6 <amg8833Init+0x1a>
 8000ec4:	22d0      	movs	r2, #208	; 0xd0
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	801a      	strh	r2, [r3, #0]
								AMG8833_I2C_BASE_ADR << 1;
	inst->hi2c=hi2c;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	68ba      	ldr	r2, [r7, #8]
 8000ece:	605a      	str	r2, [r3, #4]
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <amg8833IsReady>:

uint8_t amg8833IsReady(AMG8833 *inst){
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status=HAL_I2C_IsDeviceReady(inst->hi2c,inst->adri2c,5,10);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6858      	ldr	r0, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	8819      	ldrh	r1, [r3, #0]
 8000eec:	230a      	movs	r3, #10
 8000eee:	2205      	movs	r2, #5
 8000ef0:	f004 f9c4 	bl	800527c <HAL_I2C_IsDeviceReady>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	73fb      	strb	r3, [r7, #15]
	return (uint8_t)(status==HAL_OK);
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf0c      	ite	eq
 8000efe:	2301      	moveq	r3, #1
 8000f00:	2300      	movne	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <amg8833ReadDMA>:
	return status;


}

HAL_StatusTypeDef amg8833ReadDMA(AMG8833 *inst,uint8_t *data){
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af02      	add	r7, sp, #8
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;

	status=HAL_I2C_Mem_Read_DMA(inst->hi2c,(uint16_t)inst->adri2c,AMG8833_T01L,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6858      	ldr	r0, [r3, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	8819      	ldrh	r1, [r3, #0]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2301      	movs	r3, #1
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	f004 f813 	bl	8004f54 <HAL_I2C_Mem_Read_DMA>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]
			1,data,AMG8833_DS);

	return status;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <initJstick>:
#include "Jstick.h"
#include "stm32f4xx.h"
#include "utils.h"


void initJstick(Jstick *inst,ADC_HandleTypeDef *hadc,uint16_t errpin,GPIO_TypeDef *errport){
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	80fb      	strh	r3, [r7, #6]
	inst->hadc=hadc;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	601a      	str	r2, [r3, #0]
	inst->errpin=errpin;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	88fa      	ldrh	r2, [r7, #6]
 8000f56:	809a      	strh	r2, [r3, #4]
	inst->errport=errport;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	609a      	str	r2, [r3, #8]

}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <jstickGetDirPoll>:


JstickDir jstickGetDirPoll(Jstick *inst){
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b084      	sub	sp, #16
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
	uint16_t raw_val;
	HAL_StatusTypeDef status;

	status=HAL_ADC_PollForConversion(inst->hadc,50);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2132      	movs	r1, #50	; 0x32
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f002 f8f3 	bl	8003164 <HAL_ADC_PollForConversion>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]

	if(status==HAL_OK){
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d111      	bne.n	8000fac <jstickGetDirPoll+0x42>
		raw_val=HAL_ADC_GetValue(inst->hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fa85 	bl	800349c <HAL_ADC_GetValue>
 8000f92:	4603      	mov	r3, r0
 8000f94:	81bb      	strh	r3, [r7, #12]

		if(raw_val>4000) return LEFT;
 8000f96:	89bb      	ldrh	r3, [r7, #12]
 8000f98:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f9c:	d901      	bls.n	8000fa2 <jstickGetDirPoll+0x38>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e005      	b.n	8000fae <jstickGetDirPoll+0x44>
		if(raw_val<100) return RIGHT;
 8000fa2:	89bb      	ldrh	r3, [r7, #12]
 8000fa4:	2b63      	cmp	r3, #99	; 0x63
 8000fa6:	d801      	bhi.n	8000fac <jstickGetDirPoll+0x42>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e000      	b.n	8000fae <jstickGetDirPoll+0x44>
	}

	return CENTER;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <initStep>:
#include "Step.h"
#include "utils.h"
#include "stm32f4xx.h"

/*Init stepper motor data structure*/
void initStep(Step *inst,uint16_t p0,uint16_t p1,uint16_t p2,uint16_t p3,GPIO_TypeDef *port,StepMode mode,TIM_HandleTypeDef *htim){
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b084      	sub	sp, #16
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	4608      	mov	r0, r1
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	817b      	strh	r3, [r7, #10]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	813b      	strh	r3, [r7, #8]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	80fb      	strh	r3, [r7, #6]

	/*Assign gpio pins and port*/
	inst->pins[0]=p0;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	897a      	ldrh	r2, [r7, #10]
 8000fd4:	801a      	strh	r2, [r3, #0]
	inst->pins[1]=p1;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	893a      	ldrh	r2, [r7, #8]
 8000fda:	805a      	strh	r2, [r3, #2]
	inst->pins[2]=p2;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	88fa      	ldrh	r2, [r7, #6]
 8000fe0:	809a      	strh	r2, [r3, #4]
	inst->pins[3]=p3;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	8b3a      	ldrh	r2, [r7, #24]
 8000fe6:	80da      	strh	r2, [r3, #6]

	inst->port=port;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	609a      	str	r2, [r3, #8]

	initMode(inst,mode);
 8000fee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f80d 	bl	8001014 <initMode>
	rstAngle(inst);
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 f849 	bl	8001092 <rstAngle>

	inst->move_lock=0;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2200      	movs	r2, #0
 8001004:	771a      	strb	r2, [r3, #28]
	inst->htim=htim;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800100a:	619a      	str	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <initMode>:


void initMode(Step *inst,StepMode mode){
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	70fb      	strb	r3, [r7, #3]
	inst->mode=mode;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	78fa      	ldrb	r2, [r7, #3]
 8001024:	731a      	strb	r2, [r3, #12]
	inst->cur_step=0;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	735a      	strb	r2, [r3, #13]
	rstPins(inst);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f80f 	bl	8001050 <rstPins>

	/*BYJ-24 shaft (considering also torque factor) performs a complete rotation in 2038 steps*/
	if(mode==WAVE || mode==FULL)
 8001032:	78fb      	ldrb	r3, [r7, #3]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <initMode+0x2a>
 8001038:	78fb      	ldrb	r3, [r7, #3]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d102      	bne.n	8001044 <initMode+0x30>
		inst->res=360.0/2038.0;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a02      	ldr	r2, [pc, #8]	; (800104c <initMode+0x38>)
 8001042:	615a      	str	r2, [r3, #20]
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	3e34e21b 	.word	0x3e34e21b

08001050 <rstPins>:
void rstPins(Step *inst){
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	inst->port->ODR&=~( inst->pins[0] | inst->pins[1] | inst->pins[2] | inst->pins[3] );
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	695a      	ldr	r2, [r3, #20]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	8819      	ldrh	r1, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	885b      	ldrh	r3, [r3, #2]
 8001066:	430b      	orrs	r3, r1
 8001068:	b299      	uxth	r1, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	889b      	ldrh	r3, [r3, #4]
 800106e:	430b      	orrs	r3, r1
 8001070:	b299      	uxth	r1, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	88db      	ldrh	r3, [r3, #6]
 8001076:	430b      	orrs	r3, r1
 8001078:	b29b      	uxth	r3, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	4619      	mov	r1, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	400a      	ands	r2, r1
 8001084:	615a      	str	r2, [r3, #20]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <rstAngle>:

void rstAngle(Step *inst){
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
	inst->ang_idx=0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <waveStep>:
    |1  0  0  0|
    |0  1  0  0|
    |0  0  1  0|
    |0  0  0  1|
 */
void waveStep(Step *inst,uint8_t dir){
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70fb      	strb	r3, [r7, #3]

	/*Reset current step pin*/
	inst->port->ODR&= ~(inst->pins[ inst->cur_step ]);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7b5b      	ldrb	r3, [r3, #13]
 80010c2:	4619      	mov	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	4619      	mov	r1, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	400a      	ands	r2, r1
 80010d4:	615a      	str	r2, [r3, #20]

	/*Update current step and angular index according to given direction*/
	if(dir){
 80010d6:	78fb      	ldrb	r3, [r7, #3]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00e      	beq.n	80010fa <waveStep+0x4e>
		inst->cur_step=(inst->cur_step + 1) & 0x3;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7b5b      	ldrb	r3, [r3, #13]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	735a      	strb	r2, [r3, #13]
		inst->ang_idx ++;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	611a      	str	r2, [r3, #16]
 80010f8:	e010      	b.n	800111c <waveStep+0x70>
	}
	else{
		inst->cur_step= inst->cur_step ? (inst->cur_step - 1) : 0x3;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7b5b      	ldrb	r3, [r3, #13]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d004      	beq.n	800110c <waveStep+0x60>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7b5b      	ldrb	r3, [r3, #13]
 8001106:	3b01      	subs	r3, #1
 8001108:	b2da      	uxtb	r2, r3
 800110a:	e000      	b.n	800110e <waveStep+0x62>
 800110c:	2203      	movs	r2, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	735a      	strb	r2, [r3, #13]
		inst->ang_idx --;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	1e5a      	subs	r2, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	611a      	str	r2, [r3, #16]
	}

	/*Set updated current step pin*/
	inst->port->ODR|= inst->pins[ inst->cur_step ];
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	695a      	ldr	r2, [r3, #20]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7b5b      	ldrb	r3, [r3, #13]
 8001126:	4619      	mov	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800112e:	4619      	mov	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	430a      	orrs	r2, r1
 8001136:	615a      	str	r2, [r3, #20]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <fullStep>:
    |1  1  0  0|
    |0  1  1  0|
    |0  0  1  1|
    |1  0  0  1|
 */
void fullStep(Step *inst,uint8_t dir){
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	70fb      	strb	r3, [r7, #3]

	/*Update current step and angular index according to given direction*/
	if(dir){
 8001150:	78fb      	ldrb	r3, [r7, #3]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d01d      	beq.n	8001192 <fullStep+0x4e>
		/*Reset current step pin*/
		inst->port->ODR&= ~(inst->pins[ inst->cur_step ]);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	695a      	ldr	r2, [r3, #20]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	7b5b      	ldrb	r3, [r3, #13]
 8001160:	4619      	mov	r1, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001168:	43db      	mvns	r3, r3
 800116a:	4619      	mov	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	400a      	ands	r2, r1
 8001172:	615a      	str	r2, [r3, #20]

		inst->cur_step=(inst->cur_step + 1) & 0x3;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7b5b      	ldrb	r3, [r3, #13]
 8001178:	3301      	adds	r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	b2da      	uxtb	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	735a      	strb	r2, [r3, #13]
		inst->ang_idx ++;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	611a      	str	r2, [r3, #16]
 8001190:	e021      	b.n	80011d6 <fullStep+0x92>


	}
	else{
		/*Reset current step pin*/
		inst->port->ODR&= ~(inst->pins[ (inst->cur_step + 1) & 0x3 ]);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	695a      	ldr	r2, [r3, #20]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7b5b      	ldrb	r3, [r3, #13]
 800119c:	3301      	adds	r3, #1
 800119e:	f003 0103 	and.w	r1, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	4619      	mov	r1, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	400a      	ands	r2, r1
 80011b2:	615a      	str	r2, [r3, #20]
		inst->cur_step= inst->cur_step ? (inst->cur_step - 1) : 0x3;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7b5b      	ldrb	r3, [r3, #13]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <fullStep+0x82>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	7b5b      	ldrb	r3, [r3, #13]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	e000      	b.n	80011c8 <fullStep+0x84>
 80011c6:	2203      	movs	r2, #3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	735a      	strb	r2, [r3, #13]
		inst->ang_idx --;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	691b      	ldr	r3, [r3, #16]
 80011d0:	1e5a      	subs	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	611a      	str	r2, [r3, #16]
	}

	/*Set updated current step pin*/
	inst->port->ODR|= ( inst->pins[ inst->cur_step ] | inst->pins[ (inst->cur_step + 1) & 0x3] );
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	695a      	ldr	r2, [r3, #20]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7b5b      	ldrb	r3, [r3, #13]
 80011e0:	4619      	mov	r1, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7b5b      	ldrb	r3, [r3, #13]
 80011ec:	3301      	adds	r3, #1
 80011ee:	f003 0003 	and.w	r0, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80011f8:	430b      	orrs	r3, r1
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4619      	mov	r1, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	430a      	orrs	r2, r1
 8001204:	615a      	str	r2, [r3, #20]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <step>:
void halfStep(Step *inst,uint8_t dir){
	__NOP();
}

/*Perform one step according to drive mode*/
void step(Step *inst,uint8_t dir){
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	460b      	mov	r3, r1
 800121c:	70fb      	strb	r3, [r7, #3]
	switch(inst->mode){
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7b1b      	ldrb	r3, [r3, #12]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <step+0x1a>
 8001226:	2b01      	cmp	r3, #1
 8001228:	d005      	beq.n	8001236 <step+0x24>
	case WAVE:
		waveStep(inst,dir);
	case FULL:
		fullStep(inst,dir);
	}
}
 800122a:	e009      	b.n	8001240 <step+0x2e>
		waveStep(inst,dir);
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	4619      	mov	r1, r3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff3b 	bl	80010ac <waveStep>
		fullStep(inst,dir);
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	4619      	mov	r1, r3
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff82 	bl	8001144 <fullStep>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <stepIt>:

/*
 * Perform one step in interrupt mode
 * this function is meant to be called inside instance timer PeriodElapsed callback
 */
void stepIt(Step *inst){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	if( inst->destination_it > inst->ang_idx * inst->res ){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	ed93 7a08 	vldr	s14, [r3, #32]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	edd3 7a05 	vldr	s15, [r3, #20]
 8001268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800126c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001274:	dd21      	ble.n	80012ba <stepIt+0x72>

		if( inst->destination_it > ( inst->ang_idx + 1 ) * inst->res )
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	ed93 7a08 	vldr	s14, [r3, #32]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	691b      	ldr	r3, [r3, #16]
 8001280:	3301      	adds	r3, #1
 8001282:	ee07 3a90 	vmov	s15, r3
 8001286:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001290:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129c:	dd04      	ble.n	80012a8 <stepIt+0x60>
			step(inst,1);
 800129e:	2101      	movs	r1, #1
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ffb6 	bl	8001212 <step>
		else{
			HAL_TIM_Base_Stop_IT(inst->htim);
			inst->move_lock=0;
		}
	}
}
 80012a6:	e029      	b.n	80012fc <stepIt+0xb4>
			HAL_TIM_Base_Stop_IT(inst->htim);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f006 fd99 	bl	8007de4 <HAL_TIM_Base_Stop_IT>
			inst->move_lock=0;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	771a      	strb	r2, [r3, #28]
}
 80012b8:	e020      	b.n	80012fc <stepIt+0xb4>
		if( inst->destination_it < ( inst->ang_idx - 1 ) * inst->res )
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80012d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e0:	d504      	bpl.n	80012ec <stepIt+0xa4>
			step(inst,0);
 80012e2:	2100      	movs	r1, #0
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff94 	bl	8001212 <step>
}
 80012ea:	e007      	b.n	80012fc <stepIt+0xb4>
			HAL_TIM_Base_Stop_IT(inst->htim);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f006 fd77 	bl	8007de4 <HAL_TIM_Base_Stop_IT>
			inst->move_lock=0;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	771a      	strb	r2, [r3, #28]
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <moveToIt>:


/*Move motor from a starting position to a destination expressed in angle (degree)*/
void moveToIt(Step *inst,float angle){
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	ed87 0a00 	vstr	s0, [r7]

	if(!inst->move_lock){
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	7f1b      	ldrb	r3, [r3, #28]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d10a      	bne.n	800132e <moveToIt+0x2a>
		inst->move_lock=1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2201      	movs	r2, #1
 800131c:	771a      	strb	r2, [r3, #28]

		inst->destination_it=angle;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	621a      	str	r2, [r3, #32]
		HAL_TIM_Base_Start_IT( inst->htim );
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4618      	mov	r0, r3
 800132a:	f006 fceb 	bl	8007d04 <HAL_TIM_Base_Start_IT>
	}
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */

/*
 * Callback function to manage external interrupt push buttons pushed
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
	if( !EXTI_BUT_PUSH ){
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_GPIO_EXTI_Callback+0x28>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d105      	bne.n	8001356 <HAL_GPIO_EXTI_Callback+0x1e>
		EXTI_BUT_PUSH=1;
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_GPIO_EXTI_Callback+0x28>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
		//Start debounce timer: interrupt after 50 ms
		HAL_TIM_Base_Start_IT(&htim10);
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001352:	f006 fcd7 	bl	8007d04 <HAL_TIM_Base_Start_IT>
	}
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2200007c 	.word	0x2200007c
 8001364:	20000638 	.word	0x20000638

08001368 <HAL_I2C_MemRxCpltCallback>:
/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image reading is now complete
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a05      	ldr	r2, [pc, #20]	; (800138c <HAL_I2C_MemRxCpltCallback+0x24>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d102      	bne.n	8001380 <HAL_I2C_MemRxCpltCallback+0x18>
		AMG_RD_CPLT=1;
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_I2C_MemRxCpltCallback+0x28>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
	}
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40005400 	.word	0x40005400
 8001390:	22000018 	.word	0x22000018

08001394 <HAL_UART_TxCpltCallback>:

/*
 * Handler for thermal image DMA memory transfer cplt interrupt
 * Thermal image output is now complete
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <HAL_UART_TxCpltCallback+0x24>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d102      	bne.n	80013ac <HAL_UART_TxCpltCallback+0x18>
		AMG_OUT_CPLT=1;
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_UART_TxCpltCallback+0x28>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
	}
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	40004800 	.word	0x40004800
 80013bc:	22000014 	.word	0x22000014

080013c0 <HAL_ADC_ConvHalfCpltCallback>:
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_BUF_SZ sample were converted and put into audio_in_buf.
 * Main playback loop transfer from lower audio_in_buf to higher audio_out_buf
 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance==ADC1){
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0f      	ldr	r2, [pc, #60]	; (800140c <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d108      	bne.n	80013e4 <HAL_ADC_ConvHalfCpltCallback+0x24>
		audio_in_ptr1=&audio_in_buf1[0];
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 80013d4:	4a0f      	ldr	r2, [pc, #60]	; (8001414 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80013d6:	601a      	str	r2, [r3, #0]
		audio_out_ptr1=&audio_out_buf1[AUDIO_BUF_SZ];
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80013dc:	601a      	str	r2, [r3, #0]
		BUF1_CPLT=1;
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
	}

	if(hadc->Instance==ADC2){
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d108      	bne.n	8001400 <HAL_ADC_ConvHalfCpltCallback+0x40>
		audio_in_ptr2=&audio_in_buf2[0];
 80013ee:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 80013f0:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 80013f2:	601a      	str	r2, [r3, #0]
		audio_out_ptr2=&audio_out_buf2[AUDIO_BUF_SZ];
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 80013f8:	601a      	str	r2, [r3, #0]
		BUF2_CPLT=1;
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	601a      	str	r2, [r3, #0]
	}
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	40012000 	.word	0x40012000
 8001410:	2000189c 	.word	0x2000189c
 8001414:	2000089c 	.word	0x2000089c
 8001418:	200018a0 	.word	0x200018a0
 800141c:	20000e9c 	.word	0x20000e9c
 8001420:	2200005c 	.word	0x2200005c
 8001424:	40012100 	.word	0x40012100
 8001428:	200018a4 	.word	0x200018a4
 800142c:	2000109c 	.word	0x2000109c
 8001430:	200018a8 	.word	0x200018a8
 8001434:	2000169c 	.word	0x2000169c
 8001438:	22000058 	.word	0x22000058

0800143c <HAL_DAC_ConvCpltCallbackCh1>:
/*
 * Handler for audio input DMA memory transfer half-cplt interrupt
 * AUDIO_TOT_BUF_SZ sample were taken from audio out buf and fed into DAC.
 * Main playback loop transfer from higher audio_in_buf to lower audio_out_buf
 */
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	audio_in_ptr1=&audio_in_buf1[AUDIO_BUF_SZ];
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <HAL_DAC_ConvCpltCallbackCh1+0x28>)
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_DAC_ConvCpltCallbackCh1+0x2c>)
 8001448:	601a      	str	r2, [r3, #0]
	audio_out_ptr1=&audio_out_buf1[0];
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_DAC_ConvCpltCallbackCh1+0x30>)
 800144c:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_DAC_ConvCpltCallbackCh1+0x34>)
 800144e:	601a      	str	r2, [r3, #0]
	BUF1_CPLT=1;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_DAC_ConvCpltCallbackCh1+0x38>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	2000189c 	.word	0x2000189c
 8001468:	20000a9c 	.word	0x20000a9c
 800146c:	200018a0 	.word	0x200018a0
 8001470:	20000c9c 	.word	0x20000c9c
 8001474:	2200005c 	.word	0x2200005c

08001478 <HAL_DACEx_ConvCpltCallbackCh2>:

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac){
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	audio_in_ptr2=&audio_in_buf2[AUDIO_BUF_SZ];
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_DACEx_ConvCpltCallbackCh2+0x28>)
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_DACEx_ConvCpltCallbackCh2+0x2c>)
 8001484:	601a      	str	r2, [r3, #0]
	audio_out_ptr2=&audio_out_buf2[0];
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_DACEx_ConvCpltCallbackCh2+0x30>)
 8001488:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_DACEx_ConvCpltCallbackCh2+0x34>)
 800148a:	601a      	str	r2, [r3, #0]
	BUF2_CPLT=1;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_DACEx_ConvCpltCallbackCh2+0x38>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	200018a4 	.word	0x200018a4
 80014a4:	2000129c 	.word	0x2000129c
 80014a8:	200018a8 	.word	0x200018a8
 80014ac:	2000149c 	.word	0x2000149c
 80014b0:	22000058 	.word	0x22000058

080014b4 <audioPlayback>:
/*
 * Audio playback process.
 * Transfer audio sample from input buffer to output buffer using pointers set by ISR
 */

void audioPlayback(){
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
	uint32_t mean_ch1=0;
	uint32_t mean_ch2=0;
#endif

	/*If channel 1 and 2 conversion was completed*/
	if(BUF1_CPLT && BUF2_CPLT){
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <audioPlayback+0x74>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d02c      	beq.n	800151c <audioPlayback+0x68>
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <audioPlayback+0x78>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d028      	beq.n	800151c <audioPlayback+0x68>
		BUF1_CPLT=0;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <audioPlayback+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
		BUF2_CPLT=0;
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <audioPlayback+0x78>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]

		/*Transfer samples from input to output buffers*/
		for(int i=0;i<AUDIO_BUF_SZ;i++){
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	e01c      	b.n	8001516 <audioPlayback+0x62>
			audio_out_ptr1[i]=audio_in_ptr1[i];
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <audioPlayback+0x7c>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	441a      	add	r2, r3
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <audioPlayback+0x80>)
 80014e8:	6819      	ldr	r1, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	440b      	add	r3, r1
 80014f0:	8812      	ldrh	r2, [r2, #0]
 80014f2:	b292      	uxth	r2, r2
 80014f4:	801a      	strh	r2, [r3, #0]
			audio_out_ptr2[i]=audio_in_ptr2[i];
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <audioPlayback+0x84>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	441a      	add	r2, r3
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <audioPlayback+0x88>)
 8001502:	6819      	ldr	r1, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	440b      	add	r3, r1
 800150a:	8812      	ldrh	r2, [r2, #0]
 800150c:	b292      	uxth	r2, r2
 800150e:	801a      	strh	r2, [r3, #0]
		for(int i=0;i<AUDIO_BUF_SZ;i++){
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3301      	adds	r3, #1
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2bff      	cmp	r3, #255	; 0xff
 800151a:	dddf      	ble.n	80014dc <audioPlayback+0x28>
		sprintf(msg_buf,"Channel 1 mean: %hu\r\nChannel 2 mean:%hu\r\n\r\n\r\n",mean_ch1,mean_ch2);
		HAL_UART_Transmit_DMA(&huart6,(uint8_t*)msg_buf,strlen(msg_buf));

#endif
	}
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	2200005c 	.word	0x2200005c
 800152c:	22000058 	.word	0x22000058
 8001530:	2000189c 	.word	0x2000189c
 8001534:	200018a0 	.word	0x200018a0
 8001538:	200018a4 	.word	0x200018a4
 800153c:	200018a8 	.word	0x200018a8

08001540 <thermalImgFSM>:
 * Timer 6 ISR
 * DMA1 Stream 0 (Thermal image I2C Rx) Rx Cplt ISR
 * DMA1 Stream 6 (Thermal image USART2 Tx) Tx Cplt ISR
 * and subsequently manage Timer 6 reset and DMA transfer sequence
 */
void thermalImgFSM(){
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	  /*
	   * Thermal camera FSM
	   */
	  //If timer6 has expired
	  if(AMG_RD_START){
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <thermalImgFSM+0x6c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00e      	beq.n	800156a <thermalImgFSM+0x2a>

		  //Command DMA transfer from amg8833
		status=amg8833ReadDMA(&cam,img_buf);
 800154c:	4918      	ldr	r1, [pc, #96]	; (80015b0 <thermalImgFSM+0x70>)
 800154e:	4819      	ldr	r0, [pc, #100]	; (80015b4 <thermalImgFSM+0x74>)
 8001550:	f7ff fcdc 	bl	8000f0c <amg8833ReadDMA>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <thermalImgFSM+0x78>)
 800155a:	701a      	strb	r2, [r3, #0]
		if(status==HAL_OK)
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <thermalImgFSM+0x78>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <thermalImgFSM+0x2a>
			  //Clear ctrl bit
			  AMG_RD_START=0;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <thermalImgFSM+0x6c>)
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
	   }

	  //If DMA image reading was successful
	  if(AMG_RD_CPLT){
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <thermalImgFSM+0x7c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00f      	beq.n	8001592 <thermalImgFSM+0x52>

		 //Command DMA transfer to uart2
		 status=HAL_UART_Transmit_DMA(&huart3,img_buf,AMG8833_DS);
 8001572:	2280      	movs	r2, #128	; 0x80
 8001574:	490e      	ldr	r1, [pc, #56]	; (80015b0 <thermalImgFSM+0x70>)
 8001576:	4812      	ldr	r0, [pc, #72]	; (80015c0 <thermalImgFSM+0x80>)
 8001578:	f007 f872 	bl	8008660 <HAL_UART_Transmit_DMA>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <thermalImgFSM+0x78>)
 8001582:	701a      	strb	r2, [r3, #0]
		 if(status==HAL_OK){
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <thermalImgFSM+0x78>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <thermalImgFSM+0x52>
			 AMG_RD_CPLT=0;
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <thermalImgFSM+0x7c>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
		 }
	  }
	  //if latest data were consumed in output, restart timer6
	  if(AMG_OUT_CPLT){
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <thermalImgFSM+0x84>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <thermalImgFSM+0x66>
		  AMG_OUT_CPLT=0;
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <thermalImgFSM+0x84>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim6);
 80015a0:	4809      	ldr	r0, [pc, #36]	; (80015c8 <thermalImgFSM+0x88>)
 80015a2:	f006 fbaf 	bl	8007d04 <HAL_TIM_Base_Start_IT>
	  }
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2200001c 	.word	0x2200001c
 80015b0:	20000800 	.word	0x20000800
 80015b4:	200007c8 	.word	0x200007c8
 80015b8:	20000899 	.word	0x20000899
 80015bc:	22000018 	.word	0x22000018
 80015c0:	20000680 	.word	0x20000680
 80015c4:	22000014 	.word	0x22000014
 80015c8:	200005a8 	.word	0x200005a8

080015cc <logMotor>:

void logMotor(){
 80015cc:	b5b0      	push	{r4, r5, r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af04      	add	r7, sp, #16

	sprintf(msg_buf,"Motor position: %f %f %d \r\n\r\n\r\n",
								motor.ang_idx*motor.res,motor.res,motor.ang_idx);
 80015d2:	4b18      	ldr	r3, [pc, #96]	; (8001634 <logMotor+0x68>)
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <logMotor+0x68>)
 80015e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80015e4:	ee67 7a27 	vmul.f32	s15, s14, s15
	sprintf(msg_buf,"Motor position: %f %f %d \r\n\r\n\r\n",
 80015e8:	ee17 0a90 	vmov	r0, s15
 80015ec:	f7fe ffac 	bl	8000548 <__aeabi_f2d>
 80015f0:	4604      	mov	r4, r0
 80015f2:	460d      	mov	r5, r1
								motor.ang_idx*motor.res,motor.res,motor.ang_idx);
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <logMotor+0x68>)
 80015f6:	695b      	ldr	r3, [r3, #20]
	sprintf(msg_buf,"Motor position: %f %f %d \r\n\r\n\r\n",
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ffa5 	bl	8000548 <__aeabi_f2d>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	490c      	ldr	r1, [pc, #48]	; (8001634 <logMotor+0x68>)
 8001604:	6909      	ldr	r1, [r1, #16]
 8001606:	9102      	str	r1, [sp, #8]
 8001608:	e9cd 2300 	strd	r2, r3, [sp]
 800160c:	4622      	mov	r2, r4
 800160e:	462b      	mov	r3, r5
 8001610:	4909      	ldr	r1, [pc, #36]	; (8001638 <logMotor+0x6c>)
 8001612:	480a      	ldr	r0, [pc, #40]	; (800163c <logMotor+0x70>)
 8001614:	f008 fcd2 	bl	8009fbc <siprintf>
	HAL_UART_Transmit_DMA(&huart6,(uint8_t*)msg_buf,strlen(msg_buf));
 8001618:	4808      	ldr	r0, [pc, #32]	; (800163c <logMotor+0x70>)
 800161a:	f7fe fdd9 	bl	80001d0 <strlen>
 800161e:	4603      	mov	r3, r0
 8001620:	b29b      	uxth	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	4905      	ldr	r1, [pc, #20]	; (800163c <logMotor+0x70>)
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <logMotor+0x74>)
 8001628:	f007 f81a 	bl	8008660 <HAL_UART_Transmit_DMA>
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bdb0      	pop	{r4, r5, r7, pc}
 8001632:	bf00      	nop
 8001634:	200007d0 	.word	0x200007d0
 8001638:	0800c4c8 	.word	0x0800c4c8
 800163c:	20000880 	.word	0x20000880
 8001640:	200006c4 	.word	0x200006c4

08001644 <motorControl>:

/*Read joystick's position and EXTI buttons and perform one motor step according to joystick direction*/
void motorControl(){
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0

	JstickDir dir;

	if(MOTOR_MV){
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <motorControl+0x68>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d028      	beq.n	80016a4 <motorControl+0x60>
		MOTOR_MV=0;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <motorControl+0x68>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

		dir=jstickGetDirPoll(&js);
 8001658:	4815      	ldr	r0, [pc, #84]	; (80016b0 <motorControl+0x6c>)
 800165a:	f7ff fc86 	bl	8000f6a <jstickGetDirPoll>
 800165e:	4603      	mov	r3, r0
 8001660:	71fb      	strb	r3, [r7, #7]
		if(dir==LEFT || LEFT_BUT_PUSH){
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	2b01      	cmp	r3, #1
 8001666:	d003      	beq.n	8001670 <motorControl+0x2c>
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <motorControl+0x70>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d009      	beq.n	8001684 <motorControl+0x40>
			LEFT_BUT_PUSH=0;
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <motorControl+0x70>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
			step(&motor,0);
 8001676:	2100      	movs	r1, #0
 8001678:	480f      	ldr	r0, [pc, #60]	; (80016b8 <motorControl+0x74>)
 800167a:	f7ff fdca 	bl	8001212 <step>

			logMotor();
 800167e:	f7ff ffa5 	bl	80015cc <logMotor>

			logMotor();
		}
	}

}
 8001682:	e00f      	b.n	80016a4 <motorControl+0x60>
		else if(dir==RIGHT || RIGHT_BUT_PUSH){
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d003      	beq.n	8001692 <motorControl+0x4e>
 800168a:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <motorControl+0x78>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d008      	beq.n	80016a4 <motorControl+0x60>
			RIGHT_BUT_PUSH=0;
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <motorControl+0x78>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
			step(&motor,1);
 8001698:	2101      	movs	r1, #1
 800169a:	4807      	ldr	r0, [pc, #28]	; (80016b8 <motorControl+0x74>)
 800169c:	f7ff fdb9 	bl	8001212 <step>
			logMotor();
 80016a0:	f7ff ff94 	bl	80015cc <logMotor>
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2200003c 	.word	0x2200003c
 80016b0:	200007f4 	.word	0x200007f4
 80016b4:	22000074 	.word	0x22000074
 80016b8:	200007d0 	.word	0x200007d0
 80016bc:	22000070 	.word	0x22000070

080016c0 <initCalibration>:

/*Functions to init calibration/sound source localization mode*/
void initCalibration(){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af02      	add	r7, sp, #8
	  /*Start DMA request to playback audio through DAC channels 1 and 2*/
	  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_1,(uint32_t*)audio_out_buf1,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <initCalibration+0x3c>)
 80016d0:	2100      	movs	r1, #0
 80016d2:	480b      	ldr	r0, [pc, #44]	; (8001700 <initCalibration+0x40>)
 80016d4:	f002 faa8 	bl	8003c28 <HAL_DAC_Start_DMA>
	  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_2,(uint32_t*)audio_out_buf2,AUDIO_TOT_BUF_SZ,DAC_ALIGN_12B_R);
 80016d8:	2300      	movs	r3, #0
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e0:	4a08      	ldr	r2, [pc, #32]	; (8001704 <initCalibration+0x44>)
 80016e2:	2110      	movs	r1, #16
 80016e4:	4806      	ldr	r0, [pc, #24]	; (8001700 <initCalibration+0x40>)
 80016e6:	f002 fa9f 	bl	8003c28 <HAL_DAC_Start_DMA>

	  GPIOD->ODR&=~GPIO_PIN_15;
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <initCalibration+0x48>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a06      	ldr	r2, [pc, #24]	; (8001708 <initCalibration+0x48>)
 80016f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016f4:	6153      	str	r3, [r2, #20]
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000c9c 	.word	0x20000c9c
 8001700:	20000390 	.word	0x20000390
 8001704:	2000149c 	.word	0x2000149c
 8001708:	40020c00 	.word	0x40020c00

0800170c <initSSL>:

void initSSL(){
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	  /*Stop playback loop*/
	  HAL_DAC_Stop_DMA(&hdac,DAC_CHANNEL_1);
 8001710:	2100      	movs	r1, #0
 8001712:	480b      	ldr	r0, [pc, #44]	; (8001740 <initSSL+0x34>)
 8001714:	f002 fb56 	bl	8003dc4 <HAL_DAC_Stop_DMA>
	  HAL_DAC_Stop_DMA(&hdac,DAC_CHANNEL_2);
 8001718:	2110      	movs	r1, #16
 800171a:	4809      	ldr	r0, [pc, #36]	; (8001740 <initSSL+0x34>)
 800171c:	f002 fb52 	bl	8003dc4 <HAL_DAC_Stop_DMA>

	  /*Reset motor angle idx to set initial camera offset*/
	  rstAngle(&motor);
 8001720:	4808      	ldr	r0, [pc, #32]	; (8001744 <initSSL+0x38>)
 8001722:	f7ff fcb6 	bl	8001092 <rstAngle>
	  logMotor();
 8001726:	f7ff ff51 	bl	80015cc <logMotor>
	  mode=1;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <initSSL+0x3c>)
 800172c:	2201      	movs	r2, #1
 800172e:	701a      	strb	r2, [r3, #0]
	  GPIOD->ODR|=GPIO_PIN_15;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <initSSL+0x40>)
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	4a05      	ldr	r2, [pc, #20]	; (800174c <initSSL+0x40>)
 8001736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800173a:	6153      	str	r3, [r2, #20]
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000390 	.word	0x20000390
 8001744:	200007d0 	.word	0x200007d0
 8001748:	200018ac 	.word	0x200018ac
 800174c:	40020c00 	.word	0x40020c00

08001750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001756:	f001 fbad 	bl	8002eb4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800175a:	f000 f8d1 	bl	8001900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800175e:	f000 fc6d 	bl	800203c <MX_GPIO_Init>
  MX_TIM6_Init();
 8001762:	f000 fb29 	bl	8001db8 <MX_TIM6_Init>
  MX_DMA_Init();
 8001766:	f000 fc0b 	bl	8001f80 <MX_DMA_Init>
  MX_I2C1_Init();
 800176a:	f000 fa5d 	bl	8001c28 <MX_I2C1_Init>
  MX_ADC3_Init();
 800176e:	f000 f9d5 	bl	8001b1c <MX_ADC3_Init>
  MX_ADC1_Init();
 8001772:	f000 f92f 	bl	80019d4 <MX_ADC1_Init>
  MX_DAC_Init();
 8001776:	f000 fa23 	bl	8001bc0 <MX_DAC_Init>
  MX_TIM2_Init();
 800177a:	f000 fa83 	bl	8001c84 <MX_TIM2_Init>
  MX_ADC2_Init();
 800177e:	f000 f97b 	bl	8001a78 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8001782:	f000 fba9 	bl	8001ed8 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001786:	f000 fb4d 	bl	8001e24 <MX_TIM7_Init>
  MX_USART6_UART_Init();
 800178a:	f000 fbcf 	bl	8001f2c <MX_USART6_UART_Init>
  MX_TIM10_Init();
 800178e:	f000 fb7f 	bl	8001e90 <MX_TIM10_Init>
  MX_TIM4_Init();
 8001792:	f000 fac3 	bl	8001d1c <MX_TIM4_Init>
#endif

  /*
   * Init DMA handle data structures for thermal image in/out transfer
   */
  HAL_DMA_Init(&hdma_i2c1_rx);
 8001796:	4844      	ldr	r0, [pc, #272]	; (80018a8 <main+0x158>)
 8001798:	f002 fcae 	bl	80040f8 <HAL_DMA_Init>
  HAL_DMA_Init(&hdma_usart3_tx);
 800179c:	4843      	ldr	r0, [pc, #268]	; (80018ac <main+0x15c>)
 800179e:	f002 fcab 	bl	80040f8 <HAL_DMA_Init>

  /*Init amg8833 sensor with ad select pin connected to the ground*/
  amg8833Init(&cam,&hi2c1,0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	4942      	ldr	r1, [pc, #264]	; (80018b0 <main+0x160>)
 80017a6:	4843      	ldr	r0, [pc, #268]	; (80018b4 <main+0x164>)
 80017a8:	f7ff fb80 	bl	8000eac <amg8833Init>

  /*Wait until amg8833 is ready*/
  while(!amg8833IsReady(&cam)){
 80017ac:	e005      	b.n	80017ba <main+0x6a>
	  GPIOD->ODR|=GPIO_PIN_14;
 80017ae:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <main+0x168>)
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	4a41      	ldr	r2, [pc, #260]	; (80018b8 <main+0x168>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6153      	str	r3, [r2, #20]
  while(!amg8833IsReady(&cam)){
 80017ba:	483e      	ldr	r0, [pc, #248]	; (80018b4 <main+0x164>)
 80017bc:	f7ff fb8e 	bl	8000edc <amg8833IsReady>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f3      	beq.n	80017ae <main+0x5e>
  }

  GPIOD->ODR&=~GPIO_PIN_14;
 80017c6:	4b3c      	ldr	r3, [pc, #240]	; (80018b8 <main+0x168>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	4a3b      	ldr	r2, [pc, #236]	; (80018b8 <main+0x168>)
 80017cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017d0:	6153      	str	r3, [r2, #20]

  /*Start Timer 6 - Update event every 1/20 s for thermal camera reading*/
  HAL_TIM_Base_Start_IT(&htim6);
 80017d2:	483a      	ldr	r0, [pc, #232]	; (80018bc <main+0x16c>)
 80017d4:	f006 fa96 	bl	8007d04 <HAL_TIM_Base_Start_IT>
  /*Start Timer 7 - Update event every 1/10 s for motor control*/
  HAL_TIM_Base_Start_IT(&htim7);
 80017d8:	4839      	ldr	r0, [pc, #228]	; (80018c0 <main+0x170>)
 80017da:	f006 fa93 	bl	8007d04 <HAL_TIM_Base_Start_IT>

  /*
   * Start audio clock
   */
  HAL_TIM_Base_Start_IT(&htim2);
 80017de:	4839      	ldr	r0, [pc, #228]	; (80018c4 <main+0x174>)
 80017e0:	f006 fa90 	bl	8007d04 <HAL_TIM_Base_Start_IT>
  /*
   * Start audio DMA continous reading
   * ADC1 and DAC both works with htim2 conversion clock
   */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)audio_in_buf1,AUDIO_TOT_BUF_SZ);
 80017e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e8:	4937      	ldr	r1, [pc, #220]	; (80018c8 <main+0x178>)
 80017ea:	4838      	ldr	r0, [pc, #224]	; (80018cc <main+0x17c>)
 80017ec:	f001 fd46 	bl	800327c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint32_t*)audio_in_buf2,AUDIO_TOT_BUF_SZ);
 80017f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017f4:	4936      	ldr	r1, [pc, #216]	; (80018d0 <main+0x180>)
 80017f6:	4837      	ldr	r0, [pc, #220]	; (80018d4 <main+0x184>)
 80017f8:	f001 fd40 	bl	800327c <HAL_ADC_Start_DMA>

  /*Init step motor data structure*/
  initStep(&motor,GPIO_PIN_1,GPIO_PIN_2,GPIO_PIN_3,GPIO_PIN_4,GPIOD,FULL,&htim4);
 80017fc:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <main+0x188>)
 80017fe:	9303      	str	r3, [sp, #12]
 8001800:	2301      	movs	r3, #1
 8001802:	9302      	str	r3, [sp, #8]
 8001804:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <main+0x168>)
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	2310      	movs	r3, #16
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2308      	movs	r3, #8
 800180e:	2204      	movs	r2, #4
 8001810:	2102      	movs	r1, #2
 8001812:	4832      	ldr	r0, [pc, #200]	; (80018dc <main+0x18c>)
 8001814:	f7ff fbcf 	bl	8000fb6 <initStep>

  /*Init joystick img_buf structure with yellow error pin*/
  initJstick(&js,&hadc3,GPIO_PIN_12,GPIOD);
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <main+0x168>)
 800181a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800181e:	4930      	ldr	r1, [pc, #192]	; (80018e0 <main+0x190>)
 8001820:	4830      	ldr	r0, [pc, #192]	; (80018e4 <main+0x194>)
 8001822:	f7ff fb8b 	bl	8000f3c <initJstick>
  /*Start ADC3 associated with joystick*/
  HAL_ADC_Start(&hadc3);
 8001826:	482e      	ldr	r0, [pc, #184]	; (80018e0 <main+0x190>)
 8001828:	f001 fbca 	bl	8002fc0 <HAL_ADC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  MODE_TOGGLE=0;
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <main+0x198>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
  mode=1;
 8001832:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <main+0x19c>)
 8001834:	2201      	movs	r2, #1
 8001836:	701a      	strb	r2, [r3, #0]

  while (1)
  {
	  thermalImgFSM();
 8001838:	f7ff fe82 	bl	8001540 <thermalImgFSM>

	  /*MODE_TOGGLE bit is set by the EXTI4 button line debounce timer TIM10*/
	  if( !MODE_TOGGLE ){
 800183c:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <main+0x198>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d10d      	bne.n	8001860 <main+0x110>
		  /*
		   * Calibration mode:
		   * -microphones AD conversion can be tested connecting an oscilloscope or an amplifier to DAC channels 1/2
		   * -camera can be moved manually using joystick and buttons to set angular offset
		   */
		  if(mode){
 8001844:	4b29      	ldr	r3, [pc, #164]	; (80018ec <main+0x19c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d004      	beq.n	8001856 <main+0x106>
			  initCalibration();
 800184c:	f7ff ff38 	bl	80016c0 <initCalibration>
			  mode=0;
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <main+0x19c>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
		  }

		  audioPlayback();
 8001856:	f7ff fe2d 	bl	80014b4 <audioPlayback>
		  motorControl();
 800185a:	f7ff fef3 	bl	8001644 <motorControl>
 800185e:	e7eb      	b.n	8001838 <main+0xe8>
	  }
	  else{
		  if(!mode){
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <main+0x19c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d104      	bne.n	8001872 <main+0x122>
			  /*
			   * Sound Source Localization mode:
			   * motor movement tests
			   */
			  initSSL();
 8001868:	f7ff ff50 	bl	800170c <initSSL>
			  mode=1;
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <main+0x19c>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
		  }

		  if(LEFT_BUT_PUSH){
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <main+0x1a0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d008      	beq.n	800188c <main+0x13c>

			  LEFT_BUT_PUSH=0;
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <main+0x1a0>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
			  moveToIt(&motor,90.0);
 8001880:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80018f4 <main+0x1a4>
 8001884:	4815      	ldr	r0, [pc, #84]	; (80018dc <main+0x18c>)
 8001886:	f7ff fd3d 	bl	8001304 <moveToIt>
 800188a:	e7d5      	b.n	8001838 <main+0xe8>
		  }
		  else if(RIGHT_BUT_PUSH){
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <main+0x1a8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0d1      	beq.n	8001838 <main+0xe8>

			  RIGHT_BUT_PUSH=0;
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <main+0x1a8>)
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
			  moveToIt(&motor,-90.0);
 800189a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80018fc <main+0x1ac>
 800189e:	480f      	ldr	r0, [pc, #60]	; (80018dc <main+0x18c>)
 80018a0:	f7ff fd30 	bl	8001304 <moveToIt>
	  thermalImgFSM();
 80018a4:	e7c8      	b.n	8001838 <main+0xe8>
 80018a6:	bf00      	nop
 80018a8:	200004b8 	.word	0x200004b8
 80018ac:	20000708 	.word	0x20000708
 80018b0:	20000464 	.word	0x20000464
 80018b4:	200007c8 	.word	0x200007c8
 80018b8:	40020c00 	.word	0x40020c00
 80018bc:	200005a8 	.word	0x200005a8
 80018c0:	200005f0 	.word	0x200005f0
 80018c4:	20000518 	.word	0x20000518
 80018c8:	2000089c 	.word	0x2000089c
 80018cc:	200001f8 	.word	0x200001f8
 80018d0:	2000109c 	.word	0x2000109c
 80018d4:	20000240 	.word	0x20000240
 80018d8:	20000560 	.word	0x20000560
 80018dc:	200007d0 	.word	0x200007d0
 80018e0:	20000288 	.word	0x20000288
 80018e4:	200007f4 	.word	0x200007f4
 80018e8:	22000078 	.word	0x22000078
 80018ec:	200018ac 	.word	0x200018ac
 80018f0:	22000074 	.word	0x22000074
 80018f4:	42b40000 	.word	0x42b40000
 80018f8:	22000070 	.word	0x22000070
 80018fc:	c2b40000 	.word	0xc2b40000

08001900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b094      	sub	sp, #80	; 0x50
 8001904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001906:	f107 0320 	add.w	r3, r7, #32
 800190a:	2230      	movs	r2, #48	; 0x30
 800190c:	2100      	movs	r1, #0
 800190e:	4618      	mov	r0, r3
 8001910:	f007 fee2 	bl	80096d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001914:	f107 030c 	add.w	r3, r7, #12
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001924:	2300      	movs	r3, #0
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	4b28      	ldr	r3, [pc, #160]	; (80019cc <SystemClock_Config+0xcc>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	4a27      	ldr	r2, [pc, #156]	; (80019cc <SystemClock_Config+0xcc>)
 800192e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001932:	6413      	str	r3, [r2, #64]	; 0x40
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <SystemClock_Config+0xcc>)
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <SystemClock_Config+0xd0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a21      	ldr	r2, [pc, #132]	; (80019d0 <SystemClock_Config+0xd0>)
 800194a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <SystemClock_Config+0xd0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800195c:	2302      	movs	r3, #2
 800195e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001960:	2301      	movs	r3, #1
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001964:	2310      	movs	r3, #16
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001968:	2302      	movs	r3, #2
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800196c:	2300      	movs	r3, #0
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001970:	2308      	movs	r3, #8
 8001972:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001974:	2332      	movs	r3, #50	; 0x32
 8001976:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001978:	2302      	movs	r3, #2
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800197c:	2307      	movs	r3, #7
 800197e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	4618      	mov	r0, r3
 8001986:	f005 fca3 	bl	80072d0 <HAL_RCC_OscConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001990:	f000 fc64 	bl	800225c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001994:	230f      	movs	r3, #15
 8001996:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001998:	2302      	movs	r3, #2
 800199a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	2101      	movs	r1, #1
 80019b2:	4618      	mov	r0, r3
 80019b4:	f005 ff04 	bl	80077c0 <HAL_RCC_ClockConfig>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019be:	f000 fc4d 	bl	800225c <Error_Handler>
  }
}
 80019c2:	bf00      	nop
 80019c4:	3750      	adds	r7, #80	; 0x50
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40023800 	.word	0x40023800
 80019d0:	40007000 	.word	0x40007000

080019d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019da:	463b      	mov	r3, r7
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019e6:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <MX_ADC1_Init+0x9c>)
 80019e8:	4a22      	ldr	r2, [pc, #136]	; (8001a74 <MX_ADC1_Init+0xa0>)
 80019ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019ec:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <MX_ADC1_Init+0x9c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <MX_ADC1_Init+0x9c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <MX_ADC1_Init+0x9c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <MX_ADC1_Init+0x9c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <MX_ADC1_Init+0x9c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <MX_ADC1_Init+0x9c>)
 8001a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <MX_ADC1_Init+0x9c>)
 8001a16:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001a1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a1c:	4b14      	ldr	r3, [pc, #80]	; (8001a70 <MX_ADC1_Init+0x9c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <MX_ADC1_Init+0x9c>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_ADC1_Init+0x9c>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_ADC1_Init+0x9c>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a36:	480e      	ldr	r0, [pc, #56]	; (8001a70 <MX_ADC1_Init+0x9c>)
 8001a38:	f001 fa7e 	bl	8002f38 <HAL_ADC_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001a42:	f000 fc0b 	bl	800225c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001a46:	2308      	movs	r3, #8
 8001a48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a52:	463b      	mov	r3, r7
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	; (8001a70 <MX_ADC1_Init+0x9c>)
 8001a58:	f001 fd42 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001a62:	f000 fbfb 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200001f8 	.word	0x200001f8
 8001a74:	40012000 	.word	0x40012000

08001a78 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a7e:	463b      	mov	r3, r7
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a8a:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001a8c:	4a22      	ldr	r2, [pc, #136]	; (8001b18 <MX_ADC2_Init+0xa0>)
 8001a8e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001a90:	4b20      	ldr	r3, [pc, #128]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001a96:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001ab0:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001ab8:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001aba:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001acc:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001ada:	480e      	ldr	r0, [pc, #56]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001adc:	f001 fa2c 	bl	8002f38 <HAL_ADC_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8001ae6:	f000 fbb9 	bl	800225c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001aea:	2307      	movs	r3, #7
 8001aec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001aee:	2301      	movs	r3, #1
 8001af0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001af6:	463b      	mov	r3, r7
 8001af8:	4619      	mov	r1, r3
 8001afa:	4806      	ldr	r0, [pc, #24]	; (8001b14 <MX_ADC2_Init+0x9c>)
 8001afc:	f001 fcf0 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_ADC2_Init+0x92>
  {
    Error_Handler();
 8001b06:	f000 fba9 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000240 	.word	0x20000240
 8001b18:	40012100 	.word	0x40012100

08001b1c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b22:	463b      	mov	r3, r7
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001b2e:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b30:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <MX_ADC3_Init+0x9c>)
 8001b32:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b34:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b5c:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <MX_ADC3_Init+0xa0>)
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b7a:	480e      	ldr	r0, [pc, #56]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b7c:	f001 f9dc 	bl	8002f38 <HAL_ADC_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8001b86:	f000 fb69 	bl	800225c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <MX_ADC3_Init+0x98>)
 8001b9c:	f001 fca0 	bl	80034e0 <HAL_ADC_ConfigChannel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8001ba6:	f000 fb59 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000288 	.word	0x20000288
 8001bb8:	40012200 	.word	0x40012200
 8001bbc:	0f000001 	.word	0x0f000001

08001bc0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <MX_DAC_Init+0x60>)
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <MX_DAC_Init+0x64>)
 8001bd2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001bd4:	4812      	ldr	r0, [pc, #72]	; (8001c20 <MX_DAC_Init+0x60>)
 8001bd6:	f002 f805 	bl	8003be4 <HAL_DAC_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001be0:	f000 fb3c 	bl	800225c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001be4:	2324      	movs	r3, #36	; 0x24
 8001be6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001bec:	463b      	mov	r3, r7
 8001bee:	2200      	movs	r2, #0
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	480b      	ldr	r0, [pc, #44]	; (8001c20 <MX_DAC_Init+0x60>)
 8001bf4:	f002 f9a6 	bl	8003f44 <HAL_DAC_ConfigChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001bfe:	f000 fb2d 	bl	800225c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	2210      	movs	r2, #16
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_DAC_Init+0x60>)
 8001c0a:	f002 f99b 	bl	8003f44 <HAL_DAC_ConfigChannel>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8001c14:	f000 fb22 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000390 	.word	0x20000390
 8001c24:	40007400 	.word	0x40007400

08001c28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c2e:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <MX_I2C1_Init+0x54>)
 8001c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c32:	4b11      	ldr	r3, [pc, #68]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c34:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <MX_I2C1_Init+0x58>)
 8001c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c64:	4804      	ldr	r0, [pc, #16]	; (8001c78 <MX_I2C1_Init+0x50>)
 8001c66:	f003 f831 	bl	8004ccc <HAL_I2C_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c70:	f000 faf4 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000464 	.word	0x20000464
 8001c7c:	40005400 	.word	0x40005400
 8001c80:	00061a80 	.word	0x00061a80

08001c84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8a:	f107 0308 	add.w	r3, r7, #8
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c98:	463b      	mov	r3, r7
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001ca2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ca6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001cb6:	22ff      	movs	r2, #255	; 0xff
 8001cb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001cc2:	2280      	movs	r2, #128	; 0x80
 8001cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cc6:	4814      	ldr	r0, [pc, #80]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001cc8:	f005 ffcc 	bl	8007c64 <HAL_TIM_Base_Init>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001cd2:	f000 fac3 	bl	800225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cdc:	f107 0308 	add.w	r3, r7, #8
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480d      	ldr	r0, [pc, #52]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001ce4:	f006 f9b5 	bl	8008052 <HAL_TIM_ConfigClockSource>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001cee:	f000 fab5 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <MX_TIM2_Init+0x94>)
 8001d00:	f006 fbd0 	bl	80084a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001d0a:	f000 faa7 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000518 	.word	0x20000518

08001d1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d30:	463b      	mov	r3, r7
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <MX_TIM4_Init+0x94>)
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <MX_TIM4_Init+0x98>)
 8001d3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8001d3e:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <MX_TIM4_Init+0x94>)
 8001d40:	2263      	movs	r2, #99	; 0x63
 8001d42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d44:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <MX_TIM4_Init+0x94>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <MX_TIM4_Init+0x94>)
 8001d4c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001d50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <MX_TIM4_Init+0x94>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <MX_TIM4_Init+0x94>)
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d5e:	4814      	ldr	r0, [pc, #80]	; (8001db0 <MX_TIM4_Init+0x94>)
 8001d60:	f005 ff80 	bl	8007c64 <HAL_TIM_Base_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001d6a:	f000 fa77 	bl	800225c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480d      	ldr	r0, [pc, #52]	; (8001db0 <MX_TIM4_Init+0x94>)
 8001d7c:	f006 f969 	bl	8008052 <HAL_TIM_ConfigClockSource>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001d86:	f000 fa69 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d92:	463b      	mov	r3, r7
 8001d94:	4619      	mov	r1, r3
 8001d96:	4806      	ldr	r0, [pc, #24]	; (8001db0 <MX_TIM4_Init+0x94>)
 8001d98:	f006 fb84 	bl	80084a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001da2:	f000 fa5b 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000560 	.word	0x20000560
 8001db4:	40000800 	.word	0x40000800

08001db8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dc6:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <MX_TIM6_Init+0x64>)
 8001dc8:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <MX_TIM6_Init+0x68>)
 8001dca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9;
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <MX_TIM6_Init+0x64>)
 8001dce:	2209      	movs	r2, #9
 8001dd0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd2:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <MX_TIM6_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <MX_TIM6_Init+0x64>)
 8001dda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dde:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de0:	4b0e      	ldr	r3, [pc, #56]	; (8001e1c <MX_TIM6_Init+0x64>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001de6:	480d      	ldr	r0, [pc, #52]	; (8001e1c <MX_TIM6_Init+0x64>)
 8001de8:	f005 ff3c 	bl	8007c64 <HAL_TIM_Base_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001df2:	f000 fa33 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001dfe:	463b      	mov	r3, r7
 8001e00:	4619      	mov	r1, r3
 8001e02:	4806      	ldr	r0, [pc, #24]	; (8001e1c <MX_TIM6_Init+0x64>)
 8001e04:	f006 fb4e 	bl	80084a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001e0e:	f000 fa25 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200005a8 	.word	0x200005a8
 8001e20:	40001000 	.word	0x40001000

08001e24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <MX_TIM7_Init+0x64>)
 8001e34:	4a15      	ldr	r2, [pc, #84]	; (8001e8c <MX_TIM7_Init+0x68>)
 8001e36:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001e38:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <MX_TIM7_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <MX_TIM7_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 62499;
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <MX_TIM7_Init+0x64>)
 8001e46:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001e4a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_TIM7_Init+0x64>)
 8001e4e:	2280      	movs	r2, #128	; 0x80
 8001e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e52:	480d      	ldr	r0, [pc, #52]	; (8001e88 <MX_TIM7_Init+0x64>)
 8001e54:	f005 ff06 	bl	8007c64 <HAL_TIM_Base_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e5e:	f000 f9fd 	bl	800225c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e6a:	463b      	mov	r3, r7
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4806      	ldr	r0, [pc, #24]	; (8001e88 <MX_TIM7_Init+0x64>)
 8001e70:	f006 fb18 	bl	80084a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001e7a:	f000 f9ef 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200005f0 	.word	0x200005f0
 8001e8c:	40001400 	.word	0x40001400

08001e90 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001e96:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <MX_TIM10_Init+0x44>)
 8001e98:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001e9c:	2263      	movs	r2, #99	; 0x63
 8001e9e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2499;
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001ea8:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001eac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_TIM10_Init+0x40>)
 8001ebc:	f005 fed2 	bl	8007c64 <HAL_TIM_Base_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001ec6:	f000 f9c9 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000638 	.word	0x20000638
 8001ed4:	40014400 	.word	0x40014400

08001ed8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <MX_USART3_UART_Init+0x50>)
 8001ee0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ee8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001efe:	220c      	movs	r2, #12
 8001f00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f0e:	4805      	ldr	r0, [pc, #20]	; (8001f24 <MX_USART3_UART_Init+0x4c>)
 8001f10:	f006 fb58 	bl	80085c4 <HAL_UART_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f1a:	f000 f99f 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000680 	.word	0x20000680
 8001f28:	40004800 	.word	0x40004800

08001f2c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <MX_USART6_UART_Init+0x50>)
 8001f34:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f3c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f52:	220c      	movs	r2, #12
 8001f54:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_USART6_UART_Init+0x4c>)
 8001f64:	f006 fb2e 	bl	80085c4 <HAL_UART_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f6e:	f000 f975 	bl	800225c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200006c4 	.word	0x200006c4
 8001f7c:	40011400 	.word	0x40011400

08001f80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <MX_DMA_Init+0xb8>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a2a      	ldr	r2, [pc, #168]	; (8002038 <MX_DMA_Init+0xb8>)
 8001f90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b28      	ldr	r3, [pc, #160]	; (8002038 <MX_DMA_Init+0xb8>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9e:	607b      	str	r3, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4b24      	ldr	r3, [pc, #144]	; (8002038 <MX_DMA_Init+0xb8>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a23      	ldr	r2, [pc, #140]	; (8002038 <MX_DMA_Init+0xb8>)
 8001fac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b21      	ldr	r3, [pc, #132]	; (8002038 <MX_DMA_Init+0xb8>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	200b      	movs	r0, #11
 8001fc4:	f001 fde4 	bl	8003b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001fc8:	200b      	movs	r0, #11
 8001fca:	f001 fdfd 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	200e      	movs	r0, #14
 8001fd4:	f001 fddc 	bl	8003b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001fd8:	200e      	movs	r0, #14
 8001fda:	f001 fdf5 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2010      	movs	r0, #16
 8001fe4:	f001 fdd4 	bl	8003b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001fe8:	2010      	movs	r0, #16
 8001fea:	f001 fded 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	2011      	movs	r0, #17
 8001ff4:	f001 fdcc 	bl	8003b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001ff8:	2011      	movs	r0, #17
 8001ffa:	f001 fde5 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	2038      	movs	r0, #56	; 0x38
 8002004:	f001 fdc4 	bl	8003b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002008:	2038      	movs	r0, #56	; 0x38
 800200a:	f001 fddd 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800200e:	2200      	movs	r2, #0
 8002010:	2100      	movs	r1, #0
 8002012:	203a      	movs	r0, #58	; 0x3a
 8002014:	f001 fdbc 	bl	8003b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002018:	203a      	movs	r0, #58	; 0x3a
 800201a:	f001 fdd5 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2100      	movs	r1, #0
 8002022:	2045      	movs	r0, #69	; 0x45
 8002024:	f001 fdb4 	bl	8003b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002028:	2045      	movs	r0, #69	; 0x45
 800202a:	f001 fdcd 	bl	8003bc8 <HAL_NVIC_EnableIRQ>

}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800

0800203c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08a      	sub	sp, #40	; 0x28
 8002040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
 8002050:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b41      	ldr	r3, [pc, #260]	; (800215c <MX_GPIO_Init+0x120>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a40      	ldr	r2, [pc, #256]	; (800215c <MX_GPIO_Init+0x120>)
 800205c:	f043 0310 	orr.w	r3, r3, #16
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b3e      	ldr	r3, [pc, #248]	; (800215c <MX_GPIO_Init+0x120>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b3a      	ldr	r3, [pc, #232]	; (800215c <MX_GPIO_Init+0x120>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a39      	ldr	r2, [pc, #228]	; (800215c <MX_GPIO_Init+0x120>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b37      	ldr	r3, [pc, #220]	; (800215c <MX_GPIO_Init+0x120>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	4b33      	ldr	r3, [pc, #204]	; (800215c <MX_GPIO_Init+0x120>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a32      	ldr	r2, [pc, #200]	; (800215c <MX_GPIO_Init+0x120>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b30      	ldr	r3, [pc, #192]	; (800215c <MX_GPIO_Init+0x120>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	4b2c      	ldr	r3, [pc, #176]	; (800215c <MX_GPIO_Init+0x120>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a2b      	ldr	r2, [pc, #172]	; (800215c <MX_GPIO_Init+0x120>)
 80020b0:	f043 0308 	orr.w	r3, r3, #8
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b29      	ldr	r3, [pc, #164]	; (800215c <MX_GPIO_Init+0x120>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	4b25      	ldr	r3, [pc, #148]	; (800215c <MX_GPIO_Init+0x120>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a24      	ldr	r2, [pc, #144]	; (800215c <MX_GPIO_Init+0x120>)
 80020cc:	f043 0304 	orr.w	r3, r3, #4
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b22      	ldr	r3, [pc, #136]	; (800215c <MX_GPIO_Init+0x120>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80020de:	2200      	movs	r2, #0
 80020e0:	f24f 011e 	movw	r1, #61470	; 0xf01e
 80020e4:	481e      	ldr	r0, [pc, #120]	; (8002160 <MX_GPIO_Init+0x124>)
 80020e6:	f002 fdbf 	bl	8004c68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80020ea:	231c      	movs	r3, #28
 80020ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020f4:	2302      	movs	r3, #2
 80020f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	4619      	mov	r1, r3
 80020fe:	4819      	ldr	r0, [pc, #100]	; (8002164 <MX_GPIO_Init+0x128>)
 8002100:	f002 fc16 	bl	8004930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD1 PD2 PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8002104:	f24f 031e 	movw	r3, #61470	; 0xf01e
 8002108:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210a:	2301      	movs	r3, #1
 800210c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	4810      	ldr	r0, [pc, #64]	; (8002160 <MX_GPIO_Init+0x124>)
 800211e:	f002 fc07 	bl	8004930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002122:	2200      	movs	r2, #0
 8002124:	2100      	movs	r1, #0
 8002126:	2008      	movs	r0, #8
 8002128:	f001 fd32 	bl	8003b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800212c:	2008      	movs	r0, #8
 800212e:	f001 fd4b 	bl	8003bc8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002132:	2200      	movs	r2, #0
 8002134:	2100      	movs	r1, #0
 8002136:	2009      	movs	r0, #9
 8002138:	f001 fd2a 	bl	8003b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800213c:	2009      	movs	r0, #9
 800213e:	f001 fd43 	bl	8003bc8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	200a      	movs	r0, #10
 8002148:	f001 fd22 	bl	8003b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800214c:	200a      	movs	r0, #10
 800214e:	f001 fd3b 	bl	8003bc8 <HAL_NVIC_EnableIRQ>

}
 8002152:	bf00      	nop
 8002154:	3728      	adds	r7, #40	; 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
 8002160:	40020c00 	.word	0x40020c00
 8002164:	40021000 	.word	0x40021000

08002168 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a2c      	ldr	r2, [pc, #176]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d102      	bne.n	8002180 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800217a:	f000 febd 	bl	8002ef8 <HAL_IncTick>
	  EXTI_BUT_PUSH=0;

  }

  /* USER CODE END Callback 1 */
}
 800217e:	e04e      	b.n	800221e <HAL_TIM_PeriodElapsedCallback+0xb6>
  else if( htim->Instance == TIM4 ){
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a29      	ldr	r2, [pc, #164]	; (800222c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d103      	bne.n	8002192 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  stepIt(&motor);
 800218a:	4829      	ldr	r0, [pc, #164]	; (8002230 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800218c:	f7ff f85c 	bl	8001248 <stepIt>
}
 8002190:	e045      	b.n	800221e <HAL_TIM_PeriodElapsedCallback+0xb6>
  else if( htim->Instance == TIM6 ){
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a27      	ldr	r2, [pc, #156]	; (8002234 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d103      	bne.n	80021a4 <HAL_TIM_PeriodElapsedCallback+0x3c>
	  AMG_RD_START=1;
 800219c:	4b26      	ldr	r3, [pc, #152]	; (8002238 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
}
 80021a2:	e03c      	b.n	800221e <HAL_TIM_PeriodElapsedCallback+0xb6>
  else if( htim->Instance == TIM7 ){
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a24      	ldr	r2, [pc, #144]	; (800223c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d103      	bne.n	80021b6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	MOTOR_MV=1;
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]
}
 80021b4:	e033      	b.n	800221e <HAL_TIM_PeriodElapsedCallback+0xb6>
  else if( htim->Instance == TIM10 ){
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a22      	ldr	r2, [pc, #136]	; (8002244 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d12e      	bne.n	800221e <HAL_TIM_PeriodElapsedCallback+0xb6>
	  if( GPIOE->IDR & GPIO_PIN_2 && EXTI_BUT_PUSH  )
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <HAL_TIM_PeriodElapsedCallback+0x74>
 80021cc:	4b1f      	ldr	r3, [pc, #124]	; (800224c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_TIM_PeriodElapsedCallback+0x74>
		  RIGHT_BUT_PUSH=1;
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e01d      	b.n	8002218 <HAL_TIM_PeriodElapsedCallback+0xb0>
	  else if( GPIOE->IDR & GPIO_PIN_3  && EXTI_BUT_PUSH )
 80021dc:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_TIM_PeriodElapsedCallback+0x90>
 80021e8:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_TIM_PeriodElapsedCallback+0x90>
		  LEFT_BUT_PUSH=1;
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	e00f      	b.n	8002218 <HAL_TIM_PeriodElapsedCallback+0xb0>
	  else if( GPIOE->IDR & GPIO_PIN_4 && EXTI_BUT_PUSH )
 80021f8:	4b13      	ldr	r3, [pc, #76]	; (8002248 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b00      	cmp	r3, #0
 8002202:	d009      	beq.n	8002218 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8002204:	4b11      	ldr	r3, [pc, #68]	; (800224c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_TIM_PeriodElapsedCallback+0xb0>
		  MODE_TOGGLE^=1;
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002212:	f083 0301 	eor.w	r3, r3, #1
 8002216:	6013      	str	r3, [r2, #0]
	  EXTI_BUT_PUSH=0;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40010000 	.word	0x40010000
 800222c:	40000800 	.word	0x40000800
 8002230:	200007d0 	.word	0x200007d0
 8002234:	40001000 	.word	0x40001000
 8002238:	2200001c 	.word	0x2200001c
 800223c:	40001400 	.word	0x40001400
 8002240:	2200003c 	.word	0x2200003c
 8002244:	40014400 	.word	0x40014400
 8002248:	40021000 	.word	0x40021000
 800224c:	2200007c 	.word	0x2200007c
 8002250:	22000070 	.word	0x22000070
 8002254:	22000074 	.word	0x22000074
 8002258:	22000078 	.word	0x22000078

0800225c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002260:	b672      	cpsid	i
}
 8002262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002264:	e7fe      	b.n	8002264 <Error_Handler+0x8>
	...

08002268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	607b      	str	r3, [r7, #4]
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <HAL_MspInit+0x4c>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <HAL_MspInit+0x4c>)
 8002278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800227c:	6453      	str	r3, [r2, #68]	; 0x44
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <HAL_MspInit+0x4c>)
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <HAL_MspInit+0x4c>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a08      	ldr	r2, [pc, #32]	; (80022b4 <HAL_MspInit+0x4c>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_MspInit+0x4c>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08e      	sub	sp, #56	; 0x38
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a75      	ldr	r2, [pc, #468]	; (80024ac <HAL_ADC_MspInit+0x1f4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d158      	bne.n	800238c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
 80022de:	4b74      	ldr	r3, [pc, #464]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a73      	ldr	r2, [pc, #460]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ea:	4b71      	ldr	r3, [pc, #452]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	4b6d      	ldr	r3, [pc, #436]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a6c      	ldr	r2, [pc, #432]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	61fb      	str	r3, [r7, #28]
 8002310:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002312:	2301      	movs	r3, #1
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002316:	2303      	movs	r3, #3
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002322:	4619      	mov	r1, r3
 8002324:	4863      	ldr	r0, [pc, #396]	; (80024b4 <HAL_ADC_MspInit+0x1fc>)
 8002326:	f002 fb03 	bl	8004930 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_ADC_MspInit+0x200>)
 800232c:	4a63      	ldr	r2, [pc, #396]	; (80024bc <HAL_ADC_MspInit+0x204>)
 800232e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002330:	4b61      	ldr	r3, [pc, #388]	; (80024b8 <HAL_ADC_MspInit+0x200>)
 8002332:	2200      	movs	r2, #0
 8002334:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002336:	4b60      	ldr	r3, [pc, #384]	; (80024b8 <HAL_ADC_MspInit+0x200>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800233c:	4b5e      	ldr	r3, [pc, #376]	; (80024b8 <HAL_ADC_MspInit+0x200>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002342:	4b5d      	ldr	r3, [pc, #372]	; (80024b8 <HAL_ADC_MspInit+0x200>)
 8002344:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002348:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800234a:	4b5b      	ldr	r3, [pc, #364]	; (80024b8 <HAL_ADC_MspInit+0x200>)
 800234c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002350:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002352:	4b59      	ldr	r3, [pc, #356]	; (80024b8 <HAL_ADC_MspInit+0x200>)
 8002354:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002358:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800235a:	4b57      	ldr	r3, [pc, #348]	; (80024b8 <HAL_ADC_MspInit+0x200>)
 800235c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002360:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002362:	4b55      	ldr	r3, [pc, #340]	; (80024b8 <HAL_ADC_MspInit+0x200>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002368:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <HAL_ADC_MspInit+0x200>)
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800236e:	4852      	ldr	r0, [pc, #328]	; (80024b8 <HAL_ADC_MspInit+0x200>)
 8002370:	f001 fec2 	bl	80040f8 <HAL_DMA_Init>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800237a:	f7ff ff6f 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4d      	ldr	r2, [pc, #308]	; (80024b8 <HAL_ADC_MspInit+0x200>)
 8002382:	639a      	str	r2, [r3, #56]	; 0x38
 8002384:	4a4c      	ldr	r2, [pc, #304]	; (80024b8 <HAL_ADC_MspInit+0x200>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800238a:	e08b      	b.n	80024a4 <HAL_ADC_MspInit+0x1ec>
  else if(hadc->Instance==ADC2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a4b      	ldr	r2, [pc, #300]	; (80024c0 <HAL_ADC_MspInit+0x208>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d159      	bne.n	800244a <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	4b45      	ldr	r3, [pc, #276]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	4a44      	ldr	r2, [pc, #272]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 80023a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a4:	6453      	str	r3, [r2, #68]	; 0x44
 80023a6:	4b42      	ldr	r3, [pc, #264]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
 80023b6:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	4a3d      	ldr	r2, [pc, #244]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6313      	str	r3, [r2, #48]	; 0x30
 80023c2:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023ce:	2380      	movs	r3, #128	; 0x80
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023d2:	2303      	movs	r3, #3
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023de:	4619      	mov	r1, r3
 80023e0:	4838      	ldr	r0, [pc, #224]	; (80024c4 <HAL_ADC_MspInit+0x20c>)
 80023e2:	f002 faa5 	bl	8004930 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80023e6:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <HAL_ADC_MspInit+0x210>)
 80023e8:	4a38      	ldr	r2, [pc, #224]	; (80024cc <HAL_ADC_MspInit+0x214>)
 80023ea:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80023ec:	4b36      	ldr	r3, [pc, #216]	; (80024c8 <HAL_ADC_MspInit+0x210>)
 80023ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023f4:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <HAL_ADC_MspInit+0x210>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80023fa:	4b33      	ldr	r3, [pc, #204]	; (80024c8 <HAL_ADC_MspInit+0x210>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002400:	4b31      	ldr	r3, [pc, #196]	; (80024c8 <HAL_ADC_MspInit+0x210>)
 8002402:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002406:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002408:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <HAL_ADC_MspInit+0x210>)
 800240a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800240e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002410:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_ADC_MspInit+0x210>)
 8002412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002416:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_ADC_MspInit+0x210>)
 800241a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800241e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002420:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <HAL_ADC_MspInit+0x210>)
 8002422:	2200      	movs	r2, #0
 8002424:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002426:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <HAL_ADC_MspInit+0x210>)
 8002428:	2200      	movs	r2, #0
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800242c:	4826      	ldr	r0, [pc, #152]	; (80024c8 <HAL_ADC_MspInit+0x210>)
 800242e:	f001 fe63 	bl	80040f8 <HAL_DMA_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8002438:	f7ff ff10 	bl	800225c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a22      	ldr	r2, [pc, #136]	; (80024c8 <HAL_ADC_MspInit+0x210>)
 8002440:	639a      	str	r2, [r3, #56]	; 0x38
 8002442:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <HAL_ADC_MspInit+0x210>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002448:	e02c      	b.n	80024a4 <HAL_ADC_MspInit+0x1ec>
  else if(hadc->Instance==ADC3)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a20      	ldr	r2, [pc, #128]	; (80024d0 <HAL_ADC_MspInit+0x218>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d127      	bne.n	80024a4 <HAL_ADC_MspInit+0x1ec>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 800245e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002462:	6453      	str	r3, [r2, #68]	; 0x44
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6313      	str	r3, [r2, #48]	; 0x30
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_ADC_MspInit+0x1f8>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800248c:	2302      	movs	r3, #2
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002490:	2303      	movs	r3, #3
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800249c:	4619      	mov	r1, r3
 800249e:	4809      	ldr	r0, [pc, #36]	; (80024c4 <HAL_ADC_MspInit+0x20c>)
 80024a0:	f002 fa46 	bl	8004930 <HAL_GPIO_Init>
}
 80024a4:	bf00      	nop
 80024a6:	3738      	adds	r7, #56	; 0x38
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40012000 	.word	0x40012000
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020400 	.word	0x40020400
 80024b8:	200002d0 	.word	0x200002d0
 80024bc:	40026410 	.word	0x40026410
 80024c0:	40012100 	.word	0x40012100
 80024c4:	40020000 	.word	0x40020000
 80024c8:	20000330 	.word	0x20000330
 80024cc:	40026440 	.word	0x40026440
 80024d0:	40012200 	.word	0x40012200

080024d4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a4c      	ldr	r2, [pc, #304]	; (8002624 <HAL_DAC_MspInit+0x150>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	f040 8092 	bne.w	800261c <HAL_DAC_MspInit+0x148>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	4b4a      	ldr	r3, [pc, #296]	; (8002628 <HAL_DAC_MspInit+0x154>)
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	4a49      	ldr	r2, [pc, #292]	; (8002628 <HAL_DAC_MspInit+0x154>)
 8002502:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002506:	6413      	str	r3, [r2, #64]	; 0x40
 8002508:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_DAC_MspInit+0x154>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	4b43      	ldr	r3, [pc, #268]	; (8002628 <HAL_DAC_MspInit+0x154>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4a42      	ldr	r2, [pc, #264]	; (8002628 <HAL_DAC_MspInit+0x154>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6313      	str	r3, [r2, #48]	; 0x30
 8002524:	4b40      	ldr	r3, [pc, #256]	; (8002628 <HAL_DAC_MspInit+0x154>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002530:	2330      	movs	r3, #48	; 0x30
 8002532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002534:	2303      	movs	r3, #3
 8002536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	4619      	mov	r1, r3
 8002542:	483a      	ldr	r0, [pc, #232]	; (800262c <HAL_DAC_MspInit+0x158>)
 8002544:	f002 f9f4 	bl	8004930 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8002548:	4b39      	ldr	r3, [pc, #228]	; (8002630 <HAL_DAC_MspInit+0x15c>)
 800254a:	4a3a      	ldr	r2, [pc, #232]	; (8002634 <HAL_DAC_MspInit+0x160>)
 800254c:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800254e:	4b38      	ldr	r3, [pc, #224]	; (8002630 <HAL_DAC_MspInit+0x15c>)
 8002550:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002554:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002556:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_DAC_MspInit+0x15c>)
 8002558:	2240      	movs	r2, #64	; 0x40
 800255a:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800255c:	4b34      	ldr	r3, [pc, #208]	; (8002630 <HAL_DAC_MspInit+0x15c>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8002562:	4b33      	ldr	r3, [pc, #204]	; (8002630 <HAL_DAC_MspInit+0x15c>)
 8002564:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002568:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800256a:	4b31      	ldr	r3, [pc, #196]	; (8002630 <HAL_DAC_MspInit+0x15c>)
 800256c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002570:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002572:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_DAC_MspInit+0x15c>)
 8002574:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002578:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800257a:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_DAC_MspInit+0x15c>)
 800257c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002580:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8002582:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <HAL_DAC_MspInit+0x15c>)
 8002584:	2200      	movs	r2, #0
 8002586:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002588:	4b29      	ldr	r3, [pc, #164]	; (8002630 <HAL_DAC_MspInit+0x15c>)
 800258a:	2200      	movs	r2, #0
 800258c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800258e:	4828      	ldr	r0, [pc, #160]	; (8002630 <HAL_DAC_MspInit+0x15c>)
 8002590:	f001 fdb2 	bl	80040f8 <HAL_DMA_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800259a:	f7ff fe5f 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a23      	ldr	r2, [pc, #140]	; (8002630 <HAL_DAC_MspInit+0x15c>)
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	4a22      	ldr	r2, [pc, #136]	; (8002630 <HAL_DAC_MspInit+0x15c>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80025aa:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_DAC_MspInit+0x164>)
 80025ac:	4a23      	ldr	r2, [pc, #140]	; (800263c <HAL_DAC_MspInit+0x168>)
 80025ae:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <HAL_DAC_MspInit+0x164>)
 80025b2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80025b6:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025b8:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <HAL_DAC_MspInit+0x164>)
 80025ba:	2240      	movs	r2, #64	; 0x40
 80025bc:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HAL_DAC_MspInit+0x164>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80025c4:	4b1c      	ldr	r3, [pc, #112]	; (8002638 <HAL_DAC_MspInit+0x164>)
 80025c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ca:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025cc:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <HAL_DAC_MspInit+0x164>)
 80025ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025d2:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025d4:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_DAC_MspInit+0x164>)
 80025d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025da:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80025dc:	4b16      	ldr	r3, [pc, #88]	; (8002638 <HAL_DAC_MspInit+0x164>)
 80025de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e2:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_DAC_MspInit+0x164>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <HAL_DAC_MspInit+0x164>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80025f0:	4811      	ldr	r0, [pc, #68]	; (8002638 <HAL_DAC_MspInit+0x164>)
 80025f2:	f001 fd81 	bl	80040f8 <HAL_DMA_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80025fc:	f7ff fe2e 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a0d      	ldr	r2, [pc, #52]	; (8002638 <HAL_DAC_MspInit+0x164>)
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	4a0c      	ldr	r2, [pc, #48]	; (8002638 <HAL_DAC_MspInit+0x164>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800260c:	2200      	movs	r2, #0
 800260e:	2100      	movs	r1, #0
 8002610:	2036      	movs	r0, #54	; 0x36
 8002612:	f001 fabd 	bl	8003b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002616:	2036      	movs	r0, #54	; 0x36
 8002618:	f001 fad6 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800261c:	bf00      	nop
 800261e:	3728      	adds	r7, #40	; 0x28
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40007400 	.word	0x40007400
 8002628:	40023800 	.word	0x40023800
 800262c:	40020000 	.word	0x40020000
 8002630:	200003a4 	.word	0x200003a4
 8002634:	40026088 	.word	0x40026088
 8002638:	20000404 	.word	0x20000404
 800263c:	400260a0 	.word	0x400260a0

08002640 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a34      	ldr	r2, [pc, #208]	; (8002730 <HAL_I2C_MspInit+0xf0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d161      	bne.n	8002726 <HAL_I2C_MspInit+0xe6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	4b33      	ldr	r3, [pc, #204]	; (8002734 <HAL_I2C_MspInit+0xf4>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a32      	ldr	r2, [pc, #200]	; (8002734 <HAL_I2C_MspInit+0xf4>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b30      	ldr	r3, [pc, #192]	; (8002734 <HAL_I2C_MspInit+0xf4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800267e:	23c0      	movs	r3, #192	; 0xc0
 8002680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002682:	2312      	movs	r3, #18
 8002684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800268e:	2304      	movs	r3, #4
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	4619      	mov	r1, r3
 8002698:	4827      	ldr	r0, [pc, #156]	; (8002738 <HAL_I2C_MspInit+0xf8>)
 800269a:	f002 f949 	bl	8004930 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_I2C_MspInit+0xf4>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a23      	ldr	r2, [pc, #140]	; (8002734 <HAL_I2C_MspInit+0xf4>)
 80026a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b21      	ldr	r3, [pc, #132]	; (8002734 <HAL_I2C_MspInit+0xf4>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_I2C_MspInit+0xfc>)
 80026bc:	4a20      	ldr	r2, [pc, #128]	; (8002740 <HAL_I2C_MspInit+0x100>)
 80026be:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80026c0:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_I2C_MspInit+0xfc>)
 80026c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026c8:	4b1c      	ldr	r3, [pc, #112]	; (800273c <HAL_I2C_MspInit+0xfc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_I2C_MspInit+0xfc>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_I2C_MspInit+0xfc>)
 80026d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026da:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026dc:	4b17      	ldr	r3, [pc, #92]	; (800273c <HAL_I2C_MspInit+0xfc>)
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026e2:	4b16      	ldr	r3, [pc, #88]	; (800273c <HAL_I2C_MspInit+0xfc>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_I2C_MspInit+0xfc>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_I2C_MspInit+0xfc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <HAL_I2C_MspInit+0xfc>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80026fa:	4810      	ldr	r0, [pc, #64]	; (800273c <HAL_I2C_MspInit+0xfc>)
 80026fc:	f001 fcfc 	bl	80040f8 <HAL_DMA_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8002706:	f7ff fda9 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a0b      	ldr	r2, [pc, #44]	; (800273c <HAL_I2C_MspInit+0xfc>)
 800270e:	639a      	str	r2, [r3, #56]	; 0x38
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <HAL_I2C_MspInit+0xfc>)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2100      	movs	r1, #0
 800271a:	201f      	movs	r0, #31
 800271c:	f001 fa38 	bl	8003b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002720:	201f      	movs	r0, #31
 8002722:	f001 fa51 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	; 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	40005400 	.word	0x40005400
 8002734:	40023800 	.word	0x40023800
 8002738:	40020400 	.word	0x40020400
 800273c:	200004b8 	.word	0x200004b8
 8002740:	40026010 	.word	0x40026010

08002744 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
 800275a:	4b40      	ldr	r3, [pc, #256]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	4a3f      	ldr	r2, [pc, #252]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002772:	e06e      	b.n	8002852 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM4)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a39      	ldr	r2, [pc, #228]	; (8002860 <HAL_TIM_Base_MspInit+0x11c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d116      	bne.n	80027ac <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	4b36      	ldr	r3, [pc, #216]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	4a35      	ldr	r2, [pc, #212]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	6413      	str	r3, [r2, #64]	; 0x40
 800278e:	4b33      	ldr	r3, [pc, #204]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	201e      	movs	r0, #30
 80027a0:	f001 f9f6 	bl	8003b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80027a4:	201e      	movs	r0, #30
 80027a6:	f001 fa0f 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
}
 80027aa:	e052      	b.n	8002852 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM6)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a2c      	ldr	r2, [pc, #176]	; (8002864 <HAL_TIM_Base_MspInit+0x120>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d116      	bne.n	80027e4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a27      	ldr	r2, [pc, #156]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 80027c0:	f043 0310 	orr.w	r3, r3, #16
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b25      	ldr	r3, [pc, #148]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	2036      	movs	r0, #54	; 0x36
 80027d8:	f001 f9da 	bl	8003b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80027dc:	2036      	movs	r0, #54	; 0x36
 80027de:	f001 f9f3 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
}
 80027e2:	e036      	b.n	8002852 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1f      	ldr	r2, [pc, #124]	; (8002868 <HAL_TIM_Base_MspInit+0x124>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d116      	bne.n	800281c <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	4a19      	ldr	r2, [pc, #100]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 80027f8:	f043 0320 	orr.w	r3, r3, #32
 80027fc:	6413      	str	r3, [r2, #64]	; 0x40
 80027fe:	4b17      	ldr	r3, [pc, #92]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	2037      	movs	r0, #55	; 0x37
 8002810:	f001 f9be 	bl	8003b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002814:	2037      	movs	r0, #55	; 0x37
 8002816:	f001 f9d7 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
}
 800281a:	e01a      	b.n	8002852 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM10)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a12      	ldr	r2, [pc, #72]	; (800286c <HAL_TIM_Base_MspInit+0x128>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d115      	bne.n	8002852 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	4a0b      	ldr	r2, [pc, #44]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 8002830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002834:	6453      	str	r3, [r2, #68]	; 0x44
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_TIM_Base_MspInit+0x118>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2100      	movs	r1, #0
 8002846:	2019      	movs	r0, #25
 8002848:	f001 f9a2 	bl	8003b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800284c:	2019      	movs	r0, #25
 800284e:	f001 f9bb 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
}
 8002852:	bf00      	nop
 8002854:	3720      	adds	r7, #32
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	40000800 	.word	0x40000800
 8002864:	40001000 	.word	0x40001000
 8002868:	40001400 	.word	0x40001400
 800286c:	40014400 	.word	0x40014400

08002870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08c      	sub	sp, #48	; 0x30
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a68      	ldr	r2, [pc, #416]	; (8002a30 <HAL_UART_MspInit+0x1c0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d163      	bne.n	800295a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	4b67      	ldr	r3, [pc, #412]	; (8002a34 <HAL_UART_MspInit+0x1c4>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a66      	ldr	r2, [pc, #408]	; (8002a34 <HAL_UART_MspInit+0x1c4>)
 800289c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b64      	ldr	r3, [pc, #400]	; (8002a34 <HAL_UART_MspInit+0x1c4>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	4b60      	ldr	r3, [pc, #384]	; (8002a34 <HAL_UART_MspInit+0x1c4>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a5f      	ldr	r2, [pc, #380]	; (8002a34 <HAL_UART_MspInit+0x1c4>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b5d      	ldr	r3, [pc, #372]	; (8002a34 <HAL_UART_MspInit+0x1c4>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d8:	2303      	movs	r3, #3
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028dc:	2307      	movs	r3, #7
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	4619      	mov	r1, r3
 80028e6:	4854      	ldr	r0, [pc, #336]	; (8002a38 <HAL_UART_MspInit+0x1c8>)
 80028e8:	f002 f822 	bl	8004930 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80028ec:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <HAL_UART_MspInit+0x1cc>)
 80028ee:	4a54      	ldr	r2, [pc, #336]	; (8002a40 <HAL_UART_MspInit+0x1d0>)
 80028f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80028f2:	4b52      	ldr	r3, [pc, #328]	; (8002a3c <HAL_UART_MspInit+0x1cc>)
 80028f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028f8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028fa:	4b50      	ldr	r3, [pc, #320]	; (8002a3c <HAL_UART_MspInit+0x1cc>)
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002900:	4b4e      	ldr	r3, [pc, #312]	; (8002a3c <HAL_UART_MspInit+0x1cc>)
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002906:	4b4d      	ldr	r3, [pc, #308]	; (8002a3c <HAL_UART_MspInit+0x1cc>)
 8002908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800290c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800290e:	4b4b      	ldr	r3, [pc, #300]	; (8002a3c <HAL_UART_MspInit+0x1cc>)
 8002910:	2200      	movs	r2, #0
 8002912:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002914:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <HAL_UART_MspInit+0x1cc>)
 8002916:	2200      	movs	r2, #0
 8002918:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800291a:	4b48      	ldr	r3, [pc, #288]	; (8002a3c <HAL_UART_MspInit+0x1cc>)
 800291c:	2200      	movs	r2, #0
 800291e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002920:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <HAL_UART_MspInit+0x1cc>)
 8002922:	2200      	movs	r2, #0
 8002924:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002926:	4b45      	ldr	r3, [pc, #276]	; (8002a3c <HAL_UART_MspInit+0x1cc>)
 8002928:	2200      	movs	r2, #0
 800292a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800292c:	4843      	ldr	r0, [pc, #268]	; (8002a3c <HAL_UART_MspInit+0x1cc>)
 800292e:	f001 fbe3 	bl	80040f8 <HAL_DMA_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002938:	f7ff fc90 	bl	800225c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a3f      	ldr	r2, [pc, #252]	; (8002a3c <HAL_UART_MspInit+0x1cc>)
 8002940:	635a      	str	r2, [r3, #52]	; 0x34
 8002942:	4a3e      	ldr	r2, [pc, #248]	; (8002a3c <HAL_UART_MspInit+0x1cc>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002948:	2200      	movs	r2, #0
 800294a:	2100      	movs	r1, #0
 800294c:	2027      	movs	r0, #39	; 0x27
 800294e:	f001 f91f 	bl	8003b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002952:	2027      	movs	r0, #39	; 0x27
 8002954:	f001 f938 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002958:	e066      	b.n	8002a28 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a39      	ldr	r2, [pc, #228]	; (8002a44 <HAL_UART_MspInit+0x1d4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d161      	bne.n	8002a28 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002964:	2300      	movs	r3, #0
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	4b32      	ldr	r3, [pc, #200]	; (8002a34 <HAL_UART_MspInit+0x1c4>)
 800296a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296c:	4a31      	ldr	r2, [pc, #196]	; (8002a34 <HAL_UART_MspInit+0x1c4>)
 800296e:	f043 0320 	orr.w	r3, r3, #32
 8002972:	6453      	str	r3, [r2, #68]	; 0x44
 8002974:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <HAL_UART_MspInit+0x1c4>)
 8002976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <HAL_UART_MspInit+0x1c4>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	4a2a      	ldr	r2, [pc, #168]	; (8002a34 <HAL_UART_MspInit+0x1c4>)
 800298a:	f043 0304 	orr.w	r3, r3, #4
 800298e:	6313      	str	r3, [r2, #48]	; 0x30
 8002990:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <HAL_UART_MspInit+0x1c4>)
 8002992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800299c:	23c0      	movs	r3, #192	; 0xc0
 800299e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a0:	2302      	movs	r3, #2
 80029a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a8:	2303      	movs	r3, #3
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029ac:	2308      	movs	r3, #8
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	4619      	mov	r1, r3
 80029b6:	4824      	ldr	r0, [pc, #144]	; (8002a48 <HAL_UART_MspInit+0x1d8>)
 80029b8:	f001 ffba 	bl	8004930 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80029bc:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <HAL_UART_MspInit+0x1dc>)
 80029be:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <HAL_UART_MspInit+0x1e0>)
 80029c0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_UART_MspInit+0x1dc>)
 80029c4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80029c8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_UART_MspInit+0x1dc>)
 80029cc:	2240      	movs	r2, #64	; 0x40
 80029ce:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d0:	4b1e      	ldr	r3, [pc, #120]	; (8002a4c <HAL_UART_MspInit+0x1dc>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_UART_MspInit+0x1dc>)
 80029d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029dc:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <HAL_UART_MspInit+0x1dc>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_UART_MspInit+0x1dc>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80029ea:	4b18      	ldr	r3, [pc, #96]	; (8002a4c <HAL_UART_MspInit+0x1dc>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_UART_MspInit+0x1dc>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029f6:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <HAL_UART_MspInit+0x1dc>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80029fc:	4813      	ldr	r0, [pc, #76]	; (8002a4c <HAL_UART_MspInit+0x1dc>)
 80029fe:	f001 fb7b 	bl	80040f8 <HAL_DMA_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8002a08:	f7ff fc28 	bl	800225c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a0f      	ldr	r2, [pc, #60]	; (8002a4c <HAL_UART_MspInit+0x1dc>)
 8002a10:	635a      	str	r2, [r3, #52]	; 0x34
 8002a12:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <HAL_UART_MspInit+0x1dc>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2047      	movs	r0, #71	; 0x47
 8002a1e:	f001 f8b7 	bl	8003b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002a22:	2047      	movs	r0, #71	; 0x47
 8002a24:	f001 f8d0 	bl	8003bc8 <HAL_NVIC_EnableIRQ>
}
 8002a28:	bf00      	nop
 8002a2a:	3730      	adds	r7, #48	; 0x30
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40004800 	.word	0x40004800
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	20000708 	.word	0x20000708
 8002a40:	40026058 	.word	0x40026058
 8002a44:	40011400 	.word	0x40011400
 8002a48:	40020800 	.word	0x40020800
 8002a4c:	20000768 	.word	0x20000768
 8002a50:	400264a0 	.word	0x400264a0

08002a54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08c      	sub	sp, #48	; 0x30
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a60:	2300      	movs	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	2019      	movs	r0, #25
 8002a6a:	f001 f891 	bl	8003b90 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a6e:	2019      	movs	r0, #25
 8002a70:	f001 f8aa 	bl	8003bc8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <HAL_InitTick+0xa4>)
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7c:	4a1e      	ldr	r2, [pc, #120]	; (8002af8 <HAL_InitTick+0xa4>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6453      	str	r3, [r2, #68]	; 0x44
 8002a84:	4b1c      	ldr	r3, [pc, #112]	; (8002af8 <HAL_InitTick+0xa4>)
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a90:	f107 0210 	add.w	r2, r7, #16
 8002a94:	f107 0314 	add.w	r3, r7, #20
 8002a98:	4611      	mov	r1, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f005 f8b0 	bl	8007c00 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002aa0:	f005 f89a 	bl	8007bd8 <HAL_RCC_GetPCLK2Freq>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	4a13      	ldr	r2, [pc, #76]	; (8002afc <HAL_InitTick+0xa8>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	0c9b      	lsrs	r3, r3, #18
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002ab8:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <HAL_InitTick+0xac>)
 8002aba:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <HAL_InitTick+0xb0>)
 8002abc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_InitTick+0xac>)
 8002ac0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ac4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ac6:	4a0e      	ldr	r2, [pc, #56]	; (8002b00 <HAL_InitTick+0xac>)
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <HAL_InitTick+0xac>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_InitTick+0xac>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002ad8:	4809      	ldr	r0, [pc, #36]	; (8002b00 <HAL_InitTick+0xac>)
 8002ada:	f005 f8c3 	bl	8007c64 <HAL_TIM_Base_Init>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002ae4:	4806      	ldr	r0, [pc, #24]	; (8002b00 <HAL_InitTick+0xac>)
 8002ae6:	f005 f90d 	bl	8007d04 <HAL_TIM_Base_Start_IT>
 8002aea:	4603      	mov	r3, r0
 8002aec:	e000      	b.n	8002af0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3730      	adds	r7, #48	; 0x30
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800
 8002afc:	431bde83 	.word	0x431bde83
 8002b00:	200018b0 	.word	0x200018b0
 8002b04:	40010000 	.word	0x40010000

08002b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <NMI_Handler+0x4>

08002b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <HardFault_Handler+0x4>

08002b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <MemManage_Handler+0x4>

08002b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1e:	e7fe      	b.n	8002b1e <BusFault_Handler+0x4>

08002b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b24:	e7fe      	b.n	8002b24 <UsageFault_Handler+0x4>

08002b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002b62:	2004      	movs	r0, #4
 8002b64:	f002 f89a 	bl	8004c9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002b70:	2008      	movs	r0, #8
 8002b72:	f002 f893 	bl	8004c9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002b7e:	2010      	movs	r0, #16
 8002b80:	f002 f88c 	bl	8004c9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002b8c:	4802      	ldr	r0, [pc, #8]	; (8002b98 <DMA1_Stream0_IRQHandler+0x10>)
 8002b8e:	f001 fc4b 	bl	8004428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200004b8 	.word	0x200004b8

08002b9c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <DMA1_Stream3_IRQHandler+0x10>)
 8002ba2:	f001 fc41 	bl	8004428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000708 	.word	0x20000708

08002bb0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002bb4:	4802      	ldr	r0, [pc, #8]	; (8002bc0 <DMA1_Stream5_IRQHandler+0x10>)
 8002bb6:	f001 fc37 	bl	8004428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	200003a4 	.word	0x200003a4

08002bc4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8002bc8:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <DMA1_Stream6_IRQHandler+0x10>)
 8002bca:	f001 fc2d 	bl	8004428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000404 	.word	0x20000404

08002bd8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002bdc:	4803      	ldr	r0, [pc, #12]	; (8002bec <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002bde:	f005 f930 	bl	8007e42 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002be2:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002be4:	f005 f92d 	bl	8007e42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	200018b0 	.word	0x200018b0
 8002bf0:	20000638 	.word	0x20000638

08002bf4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002bf8:	4802      	ldr	r0, [pc, #8]	; (8002c04 <TIM4_IRQHandler+0x10>)
 8002bfa:	f005 f922 	bl	8007e42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000560 	.word	0x20000560

08002c08 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <I2C1_EV_IRQHandler+0x10>)
 8002c0e:	f002 fc63 	bl	80054d8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000464 	.word	0x20000464

08002c1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002c20:	4802      	ldr	r0, [pc, #8]	; (8002c2c <USART3_IRQHandler+0x10>)
 8002c22:	f005 fd9b 	bl	800875c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000680 	.word	0x20000680

08002c30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002c34:	4803      	ldr	r0, [pc, #12]	; (8002c44 <TIM6_DAC_IRQHandler+0x14>)
 8002c36:	f001 f90d 	bl	8003e54 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002c3a:	4803      	ldr	r0, [pc, #12]	; (8002c48 <TIM6_DAC_IRQHandler+0x18>)
 8002c3c:	f005 f901 	bl	8007e42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000390 	.word	0x20000390
 8002c48:	200005a8 	.word	0x200005a8

08002c4c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <TIM7_IRQHandler+0x10>)
 8002c52:	f005 f8f6 	bl	8007e42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200005f0 	.word	0x200005f0

08002c60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <DMA2_Stream0_IRQHandler+0x10>)
 8002c66:	f001 fbdf 	bl	8004428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200002d0 	.word	0x200002d0

08002c74 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <DMA2_Stream2_IRQHandler+0x10>)
 8002c7a:	f001 fbd5 	bl	8004428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000330 	.word	0x20000330

08002c88 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <DMA2_Stream6_IRQHandler+0x10>)
 8002c8e:	f001 fbcb 	bl	8004428 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000768 	.word	0x20000768

08002c9c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <USART6_IRQHandler+0x10>)
 8002ca2:	f005 fd5b 	bl	800875c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	200006c4 	.word	0x200006c4

08002cb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
	return 1;
 8002cb4:	2301      	movs	r3, #1
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <_kill>:

int _kill(int pid, int sig)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002cca:	f006 fcdb 	bl	8009684 <__errno>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2216      	movs	r2, #22
 8002cd2:	601a      	str	r2, [r3, #0]
	return -1;
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_exit>:

void _exit (int status)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ffe7 	bl	8002cc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cf2:	e7fe      	b.n	8002cf2 <_exit+0x12>

08002cf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e00a      	b.n	8002d1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d06:	f3af 8000 	nop.w
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	60ba      	str	r2, [r7, #8]
 8002d12:	b2ca      	uxtb	r2, r1
 8002d14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	dbf0      	blt.n	8002d06 <_read+0x12>
	}

return len;
 8002d24:	687b      	ldr	r3, [r7, #4]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e009      	b.n	8002d54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	60ba      	str	r2, [r7, #8]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	dbf1      	blt.n	8002d40 <_write+0x12>
	}
	return len;
 8002d5c:	687b      	ldr	r3, [r7, #4]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <_close>:

int _close(int file)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
	return -1;
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
 8002d86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d8e:	605a      	str	r2, [r3, #4]
	return 0;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr

08002d9e <_isatty>:

int _isatty(int file)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
	return 1;
 8002da6:	2301      	movs	r3, #1
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
	return 0;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd8:	4a14      	ldr	r2, [pc, #80]	; (8002e2c <_sbrk+0x5c>)
 8002dda:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <_sbrk+0x60>)
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002de4:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <_sbrk+0x64>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d102      	bne.n	8002df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <_sbrk+0x64>)
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <_sbrk+0x68>)
 8002df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <_sbrk+0x64>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4413      	add	r3, r2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d207      	bcs.n	8002e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e00:	f006 fc40 	bl	8009684 <__errno>
 8002e04:	4603      	mov	r3, r0
 8002e06:	220c      	movs	r2, #12
 8002e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e0e:	e009      	b.n	8002e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <_sbrk+0x64>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <_sbrk+0x64>)
 8002e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e22:	68fb      	ldr	r3, [r7, #12]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20020000 	.word	0x20020000
 8002e30:	00000400 	.word	0x00000400
 8002e34:	200018f8 	.word	0x200018f8
 8002e38:	20001910 	.word	0x20001910

08002e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <SystemInit+0x20>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	4a05      	ldr	r2, [pc, #20]	; (8002e5c <SystemInit+0x20>)
 8002e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e64:	480d      	ldr	r0, [pc, #52]	; (8002e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e66:	490e      	ldr	r1, [pc, #56]	; (8002ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e68:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e6c:	e002      	b.n	8002e74 <LoopCopyDataInit>

08002e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e72:	3304      	adds	r3, #4

08002e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e78:	d3f9      	bcc.n	8002e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e7c:	4c0b      	ldr	r4, [pc, #44]	; (8002eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e80:	e001      	b.n	8002e86 <LoopFillZerobss>

08002e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e84:	3204      	adds	r2, #4

08002e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e88:	d3fb      	bcc.n	8002e82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e8a:	f7ff ffd7 	bl	8002e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e8e:	f006 fbff 	bl	8009690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e92:	f7fe fc5d 	bl	8001750 <main>
  bx  lr    
 8002e96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002ea4:	0800c8f4 	.word	0x0800c8f4
  ldr r2, =_sbss
 8002ea8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002eac:	20001910 	.word	0x20001910

08002eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb0:	e7fe      	b.n	8002eb0 <ADC_IRQHandler>
	...

08002eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ef4 <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <HAL_Init+0x40>)
 8002ebe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_Init+0x40>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <HAL_Init+0x40>)
 8002eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_Init+0x40>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_Init+0x40>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f000 fe4c 	bl	8003b7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7ff fdb6 	bl	8002a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee8:	f7ff f9be 	bl	8002268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023c00 	.word	0x40023c00

08002ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_IncTick+0x20>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <HAL_IncTick+0x24>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	4a04      	ldr	r2, [pc, #16]	; (8002f1c <HAL_IncTick+0x24>)
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000008 	.word	0x20000008
 8002f1c:	200018fc 	.word	0x200018fc

08002f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return uwTick;
 8002f24:	4b03      	ldr	r3, [pc, #12]	; (8002f34 <HAL_GetTick+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	200018fc 	.word	0x200018fc

08002f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e033      	b.n	8002fb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff f9ae 	bl	80022b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d118      	bne.n	8002fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f7e:	f023 0302 	bic.w	r3, r3, #2
 8002f82:	f043 0202 	orr.w	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fbca 	bl	8003724 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f023 0303 	bic.w	r3, r3, #3
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa6:	e001      	b.n	8002fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_Start+0x1a>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e0b2      	b.n	8003140 <HAL_ADC_Start+0x180>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d018      	beq.n	8003022 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003000:	4b52      	ldr	r3, [pc, #328]	; (800314c <HAL_ADC_Start+0x18c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a52      	ldr	r2, [pc, #328]	; (8003150 <HAL_ADC_Start+0x190>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0c9a      	lsrs	r2, r3, #18
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003014:	e002      	b.n	800301c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3b01      	subs	r3, #1
 800301a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f9      	bne.n	8003016 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d17a      	bne.n	8003126 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800305a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306e:	d106      	bne.n	800307e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f023 0206 	bic.w	r2, r3, #6
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	645a      	str	r2, [r3, #68]	; 0x44
 800307c:	e002      	b.n	8003084 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800308c:	4b31      	ldr	r3, [pc, #196]	; (8003154 <HAL_ADC_Start+0x194>)
 800308e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003098:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d12a      	bne.n	80030fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a2b      	ldr	r2, [pc, #172]	; (8003158 <HAL_ADC_Start+0x198>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d015      	beq.n	80030dc <HAL_ADC_Start+0x11c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a29      	ldr	r2, [pc, #164]	; (800315c <HAL_ADC_Start+0x19c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d105      	bne.n	80030c6 <HAL_ADC_Start+0x106>
 80030ba:	4b26      	ldr	r3, [pc, #152]	; (8003154 <HAL_ADC_Start+0x194>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a25      	ldr	r2, [pc, #148]	; (8003160 <HAL_ADC_Start+0x1a0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d136      	bne.n	800313e <HAL_ADC_Start+0x17e>
 80030d0:	4b20      	ldr	r3, [pc, #128]	; (8003154 <HAL_ADC_Start+0x194>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d130      	bne.n	800313e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d129      	bne.n	800313e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030f8:	609a      	str	r2, [r3, #8]
 80030fa:	e020      	b.n	800313e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a15      	ldr	r2, [pc, #84]	; (8003158 <HAL_ADC_Start+0x198>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d11b      	bne.n	800313e <HAL_ADC_Start+0x17e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d114      	bne.n	800313e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	e00b      	b.n	800313e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3714      	adds	r7, #20
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	20000000 	.word	0x20000000
 8003150:	431bde83 	.word	0x431bde83
 8003154:	40012300 	.word	0x40012300
 8003158:	40012000 	.word	0x40012000
 800315c:	40012100 	.word	0x40012100
 8003160:	40012200 	.word	0x40012200

08003164 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003180:	d113      	bne.n	80031aa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800318c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003190:	d10b      	bne.n	80031aa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f043 0220 	orr.w	r2, r3, #32
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e063      	b.n	8003272 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80031aa:	f7ff feb9 	bl	8002f20 <HAL_GetTick>
 80031ae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031b0:	e021      	b.n	80031f6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b8:	d01d      	beq.n	80031f6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <HAL_ADC_PollForConversion+0x6c>
 80031c0:	f7ff feae 	bl	8002f20 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d212      	bcs.n	80031f6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d00b      	beq.n	80031f6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f043 0204 	orr.w	r2, r3, #4
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e03d      	b.n	8003272 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b02      	cmp	r3, #2
 8003202:	d1d6      	bne.n	80031b2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0212 	mvn.w	r2, #18
 800320c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d123      	bne.n	8003270 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800322c:	2b00      	cmp	r3, #0
 800322e:	d11f      	bne.n	8003270 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800323a:	2b00      	cmp	r3, #0
 800323c:	d006      	beq.n	800324c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003248:	2b00      	cmp	r3, #0
 800324a:	d111      	bne.n	8003270 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	f043 0201 	orr.w	r2, r3, #1
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
	...

0800327c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_ADC_Start_DMA+0x1e>
 8003296:	2302      	movs	r3, #2
 8003298:	e0e9      	b.n	800346e <HAL_ADC_Start_DMA+0x1f2>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d018      	beq.n	80032e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032c0:	4b6d      	ldr	r3, [pc, #436]	; (8003478 <HAL_ADC_Start_DMA+0x1fc>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a6d      	ldr	r2, [pc, #436]	; (800347c <HAL_ADC_Start_DMA+0x200>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	0c9a      	lsrs	r2, r3, #18
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80032d4:	e002      	b.n	80032dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	3b01      	subs	r3, #1
 80032da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f9      	bne.n	80032d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f0:	d107      	bne.n	8003302 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003300:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b01      	cmp	r3, #1
 800330e:	f040 80a1 	bne.w	8003454 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800333c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800334c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003350:	d106      	bne.n	8003360 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f023 0206 	bic.w	r2, r3, #6
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	645a      	str	r2, [r3, #68]	; 0x44
 800335e:	e002      	b.n	8003366 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800336e:	4b44      	ldr	r3, [pc, #272]	; (8003480 <HAL_ADC_Start_DMA+0x204>)
 8003370:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	4a43      	ldr	r2, [pc, #268]	; (8003484 <HAL_ADC_Start_DMA+0x208>)
 8003378:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	4a42      	ldr	r2, [pc, #264]	; (8003488 <HAL_ADC_Start_DMA+0x20c>)
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	4a41      	ldr	r2, [pc, #260]	; (800348c <HAL_ADC_Start_DMA+0x210>)
 8003388:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003392:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033a2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033b2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	334c      	adds	r3, #76	; 0x4c
 80033be:	4619      	mov	r1, r3
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f000 ff46 	bl	8004254 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d12a      	bne.n	800342a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a2d      	ldr	r2, [pc, #180]	; (8003490 <HAL_ADC_Start_DMA+0x214>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d015      	beq.n	800340a <HAL_ADC_Start_DMA+0x18e>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a2c      	ldr	r2, [pc, #176]	; (8003494 <HAL_ADC_Start_DMA+0x218>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d105      	bne.n	80033f4 <HAL_ADC_Start_DMA+0x178>
 80033e8:	4b25      	ldr	r3, [pc, #148]	; (8003480 <HAL_ADC_Start_DMA+0x204>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a27      	ldr	r2, [pc, #156]	; (8003498 <HAL_ADC_Start_DMA+0x21c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d136      	bne.n	800346c <HAL_ADC_Start_DMA+0x1f0>
 80033fe:	4b20      	ldr	r3, [pc, #128]	; (8003480 <HAL_ADC_Start_DMA+0x204>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d130      	bne.n	800346c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d129      	bne.n	800346c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	e020      	b.n	800346c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a18      	ldr	r2, [pc, #96]	; (8003490 <HAL_ADC_Start_DMA+0x214>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d11b      	bne.n	800346c <HAL_ADC_Start_DMA+0x1f0>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d114      	bne.n	800346c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	e00b      	b.n	800346c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f043 0210 	orr.w	r2, r3, #16
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003464:	f043 0201 	orr.w	r2, r3, #1
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000000 	.word	0x20000000
 800347c:	431bde83 	.word	0x431bde83
 8003480:	40012300 	.word	0x40012300
 8003484:	0800391d 	.word	0x0800391d
 8003488:	080039d7 	.word	0x080039d7
 800348c:	080039f3 	.word	0x080039f3
 8003490:	40012000 	.word	0x40012000
 8003494:	40012100 	.word	0x40012100
 8003498:	40012200 	.word	0x40012200

0800349c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x1c>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e105      	b.n	8003708 <HAL_ADC_ConfigChannel+0x228>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b09      	cmp	r3, #9
 800350a:	d925      	bls.n	8003558 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68d9      	ldr	r1, [r3, #12]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	4613      	mov	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	4413      	add	r3, r2
 8003520:	3b1e      	subs	r3, #30
 8003522:	2207      	movs	r2, #7
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43da      	mvns	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	400a      	ands	r2, r1
 8003530:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68d9      	ldr	r1, [r3, #12]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	b29b      	uxth	r3, r3
 8003542:	4618      	mov	r0, r3
 8003544:	4603      	mov	r3, r0
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4403      	add	r3, r0
 800354a:	3b1e      	subs	r3, #30
 800354c:	409a      	lsls	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	e022      	b.n	800359e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6919      	ldr	r1, [r3, #16]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	2207      	movs	r2, #7
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43da      	mvns	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	400a      	ands	r2, r1
 800357a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6919      	ldr	r1, [r3, #16]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	4618      	mov	r0, r3
 800358e:	4603      	mov	r3, r0
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4403      	add	r3, r0
 8003594:	409a      	lsls	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b06      	cmp	r3, #6
 80035a4:	d824      	bhi.n	80035f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	3b05      	subs	r3, #5
 80035b8:	221f      	movs	r2, #31
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43da      	mvns	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	400a      	ands	r2, r1
 80035c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4618      	mov	r0, r3
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	3b05      	subs	r3, #5
 80035e2:	fa00 f203 	lsl.w	r2, r0, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	635a      	str	r2, [r3, #52]	; 0x34
 80035ee:	e04c      	b.n	800368a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b0c      	cmp	r3, #12
 80035f6:	d824      	bhi.n	8003642 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	3b23      	subs	r3, #35	; 0x23
 800360a:	221f      	movs	r2, #31
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43da      	mvns	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	400a      	ands	r2, r1
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	4618      	mov	r0, r3
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	3b23      	subs	r3, #35	; 0x23
 8003634:	fa00 f203 	lsl.w	r2, r0, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	430a      	orrs	r2, r1
 800363e:	631a      	str	r2, [r3, #48]	; 0x30
 8003640:	e023      	b.n	800368a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	3b41      	subs	r3, #65	; 0x41
 8003654:	221f      	movs	r2, #31
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	400a      	ands	r2, r1
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	4618      	mov	r0, r3
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	3b41      	subs	r3, #65	; 0x41
 800367e:	fa00 f203 	lsl.w	r2, r0, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800368a:	4b22      	ldr	r3, [pc, #136]	; (8003714 <HAL_ADC_ConfigChannel+0x234>)
 800368c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a21      	ldr	r2, [pc, #132]	; (8003718 <HAL_ADC_ConfigChannel+0x238>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d109      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x1cc>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b12      	cmp	r3, #18
 800369e:	d105      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <HAL_ADC_ConfigChannel+0x238>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d123      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x21e>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d003      	beq.n	80036c6 <HAL_ADC_ConfigChannel+0x1e6>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b11      	cmp	r3, #17
 80036c4:	d11b      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	d111      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <HAL_ADC_ConfigChannel+0x23c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a10      	ldr	r2, [pc, #64]	; (8003720 <HAL_ADC_ConfigChannel+0x240>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	0c9a      	lsrs	r2, r3, #18
 80036e6:	4613      	mov	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036f0:	e002      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f9      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	40012300 	.word	0x40012300
 8003718:	40012000 	.word	0x40012000
 800371c:	20000000 	.word	0x20000000
 8003720:	431bde83 	.word	0x431bde83

08003724 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800372c:	4b79      	ldr	r3, [pc, #484]	; (8003914 <ADC_Init+0x1f0>)
 800372e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	431a      	orrs	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	021a      	lsls	r2, r3, #8
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800377c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800379e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6899      	ldr	r1, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	4a58      	ldr	r2, [pc, #352]	; (8003918 <ADC_Init+0x1f4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d022      	beq.n	8003802 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6899      	ldr	r1, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	e00f      	b.n	8003822 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003820:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0202 	bic.w	r2, r2, #2
 8003830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6899      	ldr	r1, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	7e1b      	ldrb	r3, [r3, #24]
 800383c:	005a      	lsls	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01b      	beq.n	8003888 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800385e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800386e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387a:	3b01      	subs	r3, #1
 800387c:	035a      	lsls	r2, r3, #13
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	e007      	b.n	8003898 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003896:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	051a      	lsls	r2, r3, #20
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6899      	ldr	r1, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038da:	025a      	lsls	r2, r3, #9
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6899      	ldr	r1, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	029a      	lsls	r2, r3, #10
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	609a      	str	r2, [r3, #8]
}
 8003908:	bf00      	nop
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	40012300 	.word	0x40012300
 8003918:	0f000001 	.word	0x0f000001

0800391c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003932:	2b00      	cmp	r3, #0
 8003934:	d13c      	bne.n	80039b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d12b      	bne.n	80039a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003954:	2b00      	cmp	r3, #0
 8003956:	d127      	bne.n	80039a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003962:	2b00      	cmp	r3, #0
 8003964:	d006      	beq.n	8003974 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003970:	2b00      	cmp	r3, #0
 8003972:	d119      	bne.n	80039a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0220 	bic.w	r2, r2, #32
 8003982:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d105      	bne.n	80039a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	f043 0201 	orr.w	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff fd84 	bl	80034b6 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039ae:	e00e      	b.n	80039ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff fd84 	bl	80034ca <HAL_ADC_ErrorCallback>
}
 80039c2:	e004      	b.n	80039ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f7fd fceb 	bl	80013c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2240      	movs	r2, #64	; 0x40
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	f043 0204 	orr.w	r2, r3, #4
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff fd59 	bl	80034ca <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a18:	bf00      	nop
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <__NVIC_SetPriorityGrouping+0x44>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a52:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <__NVIC_SetPriorityGrouping+0x44>)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	60d3      	str	r3, [r2, #12]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a6c:	4b04      	ldr	r3, [pc, #16]	; (8003a80 <__NVIC_GetPriorityGrouping+0x18>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	f003 0307 	and.w	r3, r3, #7
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	db0b      	blt.n	8003aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	f003 021f 	and.w	r2, r3, #31
 8003a9c:	4907      	ldr	r1, [pc, #28]	; (8003abc <__NVIC_EnableIRQ+0x38>)
 8003a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8003aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000e100 	.word	0xe000e100

08003ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	6039      	str	r1, [r7, #0]
 8003aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	db0a      	blt.n	8003aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	b2da      	uxtb	r2, r3
 8003ad8:	490c      	ldr	r1, [pc, #48]	; (8003b0c <__NVIC_SetPriority+0x4c>)
 8003ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ade:	0112      	lsls	r2, r2, #4
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae8:	e00a      	b.n	8003b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	4908      	ldr	r1, [pc, #32]	; (8003b10 <__NVIC_SetPriority+0x50>)
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	3b04      	subs	r3, #4
 8003af8:	0112      	lsls	r2, r2, #4
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	440b      	add	r3, r1
 8003afe:	761a      	strb	r2, [r3, #24]
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e000e100 	.word	0xe000e100
 8003b10:	e000ed00 	.word	0xe000ed00

08003b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b089      	sub	sp, #36	; 0x24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f1c3 0307 	rsb	r3, r3, #7
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	bf28      	it	cs
 8003b32:	2304      	movcs	r3, #4
 8003b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	2b06      	cmp	r3, #6
 8003b3c:	d902      	bls.n	8003b44 <NVIC_EncodePriority+0x30>
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3b03      	subs	r3, #3
 8003b42:	e000      	b.n	8003b46 <NVIC_EncodePriority+0x32>
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43da      	mvns	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	401a      	ands	r2, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	fa01 f303 	lsl.w	r3, r1, r3
 8003b66:	43d9      	mvns	r1, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b6c:	4313      	orrs	r3, r2
         );
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3724      	adds	r7, #36	; 0x24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff ff4c 	bl	8003a20 <__NVIC_SetPriorityGrouping>
}
 8003b88:	bf00      	nop
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ba2:	f7ff ff61 	bl	8003a68 <__NVIC_GetPriorityGrouping>
 8003ba6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	6978      	ldr	r0, [r7, #20]
 8003bae:	f7ff ffb1 	bl	8003b14 <NVIC_EncodePriority>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb8:	4611      	mov	r1, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7ff ff80 	bl	8003ac0 <__NVIC_SetPriority>
}
 8003bc0:	bf00      	nop
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff ff54 	bl	8003a84 <__NVIC_EnableIRQ>
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e014      	b.n	8003c20 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	791b      	ldrb	r3, [r3, #4]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fe fc64 	bl	80024d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
 8003c34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	795b      	ldrb	r3, [r3, #5]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_DAC_Start_DMA+0x22>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e0ab      	b.n	8003da2 <HAL_DAC_Start_DMA+0x17a>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2202      	movs	r2, #2
 8003c54:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d12f      	bne.n	8003cbc <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a52      	ldr	r2, [pc, #328]	; (8003dac <HAL_DAC_Start_DMA+0x184>)
 8003c62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a51      	ldr	r2, [pc, #324]	; (8003db0 <HAL_DAC_Start_DMA+0x188>)
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4a50      	ldr	r2, [pc, #320]	; (8003db4 <HAL_DAC_Start_DMA+0x18c>)
 8003c72:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c82:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d013      	beq.n	8003cb2 <HAL_DAC_Start_DMA+0x8a>
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	2b08      	cmp	r3, #8
 8003c8e:	d845      	bhi.n	8003d1c <HAL_DAC_Start_DMA+0xf4>
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <HAL_DAC_Start_DMA+0x76>
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d005      	beq.n	8003ca8 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8003c9c:	e03e      	b.n	8003d1c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	613b      	str	r3, [r7, #16]
        break;
 8003ca6:	e03c      	b.n	8003d22 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	330c      	adds	r3, #12
 8003cae:	613b      	str	r3, [r7, #16]
        break;
 8003cb0:	e037      	b.n	8003d22 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3310      	adds	r3, #16
 8003cb8:	613b      	str	r3, [r7, #16]
        break;
 8003cba:	e032      	b.n	8003d22 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a3d      	ldr	r2, [pc, #244]	; (8003db8 <HAL_DAC_Start_DMA+0x190>)
 8003cc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a3c      	ldr	r2, [pc, #240]	; (8003dbc <HAL_DAC_Start_DMA+0x194>)
 8003cca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	4a3b      	ldr	r2, [pc, #236]	; (8003dc0 <HAL_DAC_Start_DMA+0x198>)
 8003cd2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ce2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d013      	beq.n	8003d12 <HAL_DAC_Start_DMA+0xea>
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d817      	bhi.n	8003d20 <HAL_DAC_Start_DMA+0xf8>
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_DAC_Start_DMA+0xd6>
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d005      	beq.n	8003d08 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003cfc:	e010      	b.n	8003d20 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	3314      	adds	r3, #20
 8003d04:	613b      	str	r3, [r7, #16]
        break;
 8003d06:	e00c      	b.n	8003d22 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3318      	adds	r3, #24
 8003d0e:	613b      	str	r3, [r7, #16]
        break;
 8003d10:	e007      	b.n	8003d22 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	331c      	adds	r3, #28
 8003d18:	613b      	str	r3, [r7, #16]
        break;
 8003d1a:	e002      	b.n	8003d22 <HAL_DAC_Start_DMA+0xfa>
        break;
 8003d1c:	bf00      	nop
 8003d1e:	e000      	b.n	8003d22 <HAL_DAC_Start_DMA+0xfa>
        break;
 8003d20:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d111      	bne.n	8003d4c <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d36:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6898      	ldr	r0, [r3, #8]
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	f000 fa87 	bl	8004254 <HAL_DMA_Start_IT>
 8003d46:	4603      	mov	r3, r0
 8003d48:	75fb      	strb	r3, [r7, #23]
 8003d4a:	e010      	b.n	8003d6e <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	68d8      	ldr	r0, [r3, #12]
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	f000 fa75 	bl	8004254 <HAL_DMA_Start_IT>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003d74:	7dfb      	ldrb	r3, [r7, #23]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10c      	bne.n	8003d94 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2201      	movs	r2, #1
 8003d88:	409a      	lsls	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	e005      	b.n	8003da0 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	f043 0204 	orr.w	r2, r3, #4
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8003da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	08003fe3 	.word	0x08003fe3
 8003db0:	08004005 	.word	0x08004005
 8003db4:	08004021 	.word	0x08004021
 8003db8:	0800408b 	.word	0x0800408b
 8003dbc:	080040ad 	.word	0x080040ad
 8003dc0:	080040c9 	.word	0x080040c9

08003dc4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43da      	mvns	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	400a      	ands	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6819      	ldr	r1, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2201      	movs	r2, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	400a      	ands	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10d      	bne.n	8003e2a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fa76 	bl	8004304 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e00c      	b.n	8003e44 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fa68 	bl	8004304 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003e42:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e6a:	d120      	bne.n	8003eae <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e7a:	d118      	bne.n	8003eae <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2204      	movs	r2, #4
 8003e80:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f043 0201 	orr.w	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ea6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f841 	bl	8003f30 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ebc:	d120      	bne.n	8003f00 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ecc:	d118      	bne.n	8003f00 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f043 0202 	orr.w	r2, r3, #2
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003ee8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003ef8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f8bb 	bl	8004076 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	795b      	ldrb	r3, [r3, #5]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_DAC_ConfigChannel+0x18>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e03c      	b.n	8003fd6 <HAL_DAC_ConfigChannel+0x92>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2202      	movs	r2, #2
 8003f66:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4013      	ands	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6819      	ldr	r1, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	22c0      	movs	r2, #192	; 0xc0
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f7fd fa23 	bl	800143c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	711a      	strb	r2, [r3, #4]
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7ff ff78 	bl	8003f08 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f043 0204 	orr.w	r2, r3, #4
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7ff ff6e 	bl	8003f1c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	711a      	strb	r2, [r3, #4]
}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800406a:	bf00      	nop
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7fd f9ed 	bl	8001478 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	711a      	strb	r2, [r3, #4]
}
 80040a4:	bf00      	nop
 80040a6:	3710      	adds	r7, #16
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7ff ffc7 	bl	800404e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f043 0204 	orr.w	r2, r3, #4
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff ffbd 	bl	8004062 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2201      	movs	r2, #1
 80040ec:	711a      	strb	r2, [r3, #4]
}
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004104:	f7fe ff0c 	bl	8002f20 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e099      	b.n	8004248 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004134:	e00f      	b.n	8004156 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004136:	f7fe fef3 	bl	8002f20 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b05      	cmp	r3, #5
 8004142:	d908      	bls.n	8004156 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2220      	movs	r2, #32
 8004148:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2203      	movs	r2, #3
 800414e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e078      	b.n	8004248 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e8      	bne.n	8004136 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4b38      	ldr	r3, [pc, #224]	; (8004250 <HAL_DMA_Init+0x158>)
 8004170:	4013      	ands	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004182:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800418e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800419a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d107      	bne.n	80041c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	4313      	orrs	r3, r2
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	4313      	orrs	r3, r2
 80041be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f023 0307 	bic.w	r3, r3, #7
 80041d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d117      	bne.n	800421a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00e      	beq.n	800421a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fb1b 	bl	8004838 <DMA_CheckFifoParam>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d008      	beq.n	800421a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2240      	movs	r2, #64	; 0x40
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004216:	2301      	movs	r3, #1
 8004218:	e016      	b.n	8004248 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fad2 	bl	80047cc <DMA_CalcBaseAndBitshift>
 8004228:	4603      	mov	r3, r0
 800422a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	223f      	movs	r2, #63	; 0x3f
 8004232:	409a      	lsls	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	f010803f 	.word	0xf010803f

08004254 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_DMA_Start_IT+0x26>
 8004276:	2302      	movs	r3, #2
 8004278:	e040      	b.n	80042fc <HAL_DMA_Start_IT+0xa8>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b01      	cmp	r3, #1
 800428c:	d12f      	bne.n	80042ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fa64 	bl	8004770 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	223f      	movs	r2, #63	; 0x3f
 80042ae:	409a      	lsls	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0216 	orr.w	r2, r2, #22
 80042c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0208 	orr.w	r2, r2, #8
 80042da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0201 	orr.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	e005      	b.n	80042fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
 80042f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004310:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004312:	f7fe fe05 	bl	8002f20 <HAL_GetTick>
 8004316:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d008      	beq.n	8004336 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2280      	movs	r2, #128	; 0x80
 8004328:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e052      	b.n	80043dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0216 	bic.w	r2, r2, #22
 8004344:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004354:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <HAL_DMA_Abort+0x62>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0208 	bic.w	r2, r2, #8
 8004374:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004386:	e013      	b.n	80043b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004388:	f7fe fdca 	bl	8002f20 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b05      	cmp	r3, #5
 8004394:	d90c      	bls.n	80043b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2203      	movs	r2, #3
 80043a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e015      	b.n	80043dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e4      	bne.n	8004388 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	223f      	movs	r2, #63	; 0x3f
 80043c4:	409a      	lsls	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d004      	beq.n	8004402 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2280      	movs	r2, #128	; 0x80
 80043fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e00c      	b.n	800441c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2205      	movs	r2, #5
 8004406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004434:	4b8e      	ldr	r3, [pc, #568]	; (8004670 <HAL_DMA_IRQHandler+0x248>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a8e      	ldr	r2, [pc, #568]	; (8004674 <HAL_DMA_IRQHandler+0x24c>)
 800443a:	fba2 2303 	umull	r2, r3, r2, r3
 800443e:	0a9b      	lsrs	r3, r3, #10
 8004440:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004446:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004452:	2208      	movs	r2, #8
 8004454:	409a      	lsls	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	4013      	ands	r3, r2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01a      	beq.n	8004494 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d013      	beq.n	8004494 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f022 0204 	bic.w	r2, r2, #4
 800447a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004480:	2208      	movs	r2, #8
 8004482:	409a      	lsls	r2, r3
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	f043 0201 	orr.w	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	2201      	movs	r2, #1
 800449a:	409a      	lsls	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d012      	beq.n	80044ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b6:	2201      	movs	r2, #1
 80044b8:	409a      	lsls	r2, r3
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c2:	f043 0202 	orr.w	r2, r3, #2
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ce:	2204      	movs	r2, #4
 80044d0:	409a      	lsls	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d012      	beq.n	8004500 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00b      	beq.n	8004500 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ec:	2204      	movs	r2, #4
 80044ee:	409a      	lsls	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f8:	f043 0204 	orr.w	r2, r3, #4
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004504:	2210      	movs	r2, #16
 8004506:	409a      	lsls	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d043      	beq.n	8004598 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d03c      	beq.n	8004598 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004522:	2210      	movs	r2, #16
 8004524:	409a      	lsls	r2, r3
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d018      	beq.n	800456a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d108      	bne.n	8004558 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d024      	beq.n	8004598 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	4798      	blx	r3
 8004556:	e01f      	b.n	8004598 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01b      	beq.n	8004598 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4798      	blx	r3
 8004568:	e016      	b.n	8004598 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004574:	2b00      	cmp	r3, #0
 8004576:	d107      	bne.n	8004588 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0208 	bic.w	r2, r2, #8
 8004586:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459c:	2220      	movs	r2, #32
 800459e:	409a      	lsls	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 808f 	beq.w	80046c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8087 	beq.w	80046c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045be:	2220      	movs	r2, #32
 80045c0:	409a      	lsls	r2, r3
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b05      	cmp	r3, #5
 80045d0:	d136      	bne.n	8004640 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0216 	bic.w	r2, r2, #22
 80045e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d103      	bne.n	8004602 <HAL_DMA_IRQHandler+0x1da>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d007      	beq.n	8004612 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0208 	bic.w	r2, r2, #8
 8004610:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004616:	223f      	movs	r2, #63	; 0x3f
 8004618:	409a      	lsls	r2, r3
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004632:	2b00      	cmp	r3, #0
 8004634:	d07e      	beq.n	8004734 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
        }
        return;
 800463e:	e079      	b.n	8004734 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01d      	beq.n	800468a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10d      	bne.n	8004678 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004660:	2b00      	cmp	r3, #0
 8004662:	d031      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	4798      	blx	r3
 800466c:	e02c      	b.n	80046c8 <HAL_DMA_IRQHandler+0x2a0>
 800466e:	bf00      	nop
 8004670:	20000000 	.word	0x20000000
 8004674:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d023      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	4798      	blx	r3
 8004688:	e01e      	b.n	80046c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10f      	bne.n	80046b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0210 	bic.w	r2, r2, #16
 80046a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d032      	beq.n	8004736 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d4:	f003 0301 	and.w	r3, r3, #1
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d022      	beq.n	8004722 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2205      	movs	r2, #5
 80046e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	3301      	adds	r3, #1
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d307      	bcc.n	8004710 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1f2      	bne.n	80046f4 <HAL_DMA_IRQHandler+0x2cc>
 800470e:	e000      	b.n	8004712 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004710:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004726:	2b00      	cmp	r3, #0
 8004728:	d005      	beq.n	8004736 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	4798      	blx	r3
 8004732:	e000      	b.n	8004736 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004734:	bf00      	nop
    }
  }
}
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800474a:	b2db      	uxtb	r3, r3
}
 800474c:	4618      	mov	r0, r3
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800478c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	d108      	bne.n	80047b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047ae:	e007      	b.n	80047c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	60da      	str	r2, [r3, #12]
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	3b10      	subs	r3, #16
 80047dc:	4a14      	ldr	r2, [pc, #80]	; (8004830 <DMA_CalcBaseAndBitshift+0x64>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	091b      	lsrs	r3, r3, #4
 80047e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047e6:	4a13      	ldr	r2, [pc, #76]	; (8004834 <DMA_CalcBaseAndBitshift+0x68>)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d909      	bls.n	800480e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004802:	f023 0303 	bic.w	r3, r3, #3
 8004806:	1d1a      	adds	r2, r3, #4
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	659a      	str	r2, [r3, #88]	; 0x58
 800480c:	e007      	b.n	800481e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004816:	f023 0303 	bic.w	r3, r3, #3
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	aaaaaaab 	.word	0xaaaaaaab
 8004834:	0800c500 	.word	0x0800c500

08004838 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004848:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d11f      	bne.n	8004892 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2b03      	cmp	r3, #3
 8004856:	d856      	bhi.n	8004906 <DMA_CheckFifoParam+0xce>
 8004858:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <DMA_CheckFifoParam+0x28>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004871 	.word	0x08004871
 8004864:	08004883 	.word	0x08004883
 8004868:	08004871 	.word	0x08004871
 800486c:	08004907 	.word	0x08004907
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d046      	beq.n	800490a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004880:	e043      	b.n	800490a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800488a:	d140      	bne.n	800490e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004890:	e03d      	b.n	800490e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489a:	d121      	bne.n	80048e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b03      	cmp	r3, #3
 80048a0:	d837      	bhi.n	8004912 <DMA_CheckFifoParam+0xda>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <DMA_CheckFifoParam+0x70>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048b9 	.word	0x080048b9
 80048ac:	080048bf 	.word	0x080048bf
 80048b0:	080048b9 	.word	0x080048b9
 80048b4:	080048d1 	.word	0x080048d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	73fb      	strb	r3, [r7, #15]
      break;
 80048bc:	e030      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d025      	beq.n	8004916 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ce:	e022      	b.n	8004916 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048d8:	d11f      	bne.n	800491a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048de:	e01c      	b.n	800491a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d903      	bls.n	80048ee <DMA_CheckFifoParam+0xb6>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d003      	beq.n	80048f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048ec:	e018      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	73fb      	strb	r3, [r7, #15]
      break;
 80048f2:	e015      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00e      	beq.n	800491e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
      break;
 8004904:	e00b      	b.n	800491e <DMA_CheckFifoParam+0xe6>
      break;
 8004906:	bf00      	nop
 8004908:	e00a      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      break;
 800490a:	bf00      	nop
 800490c:	e008      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      break;
 800490e:	bf00      	nop
 8004910:	e006      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      break;
 8004912:	bf00      	nop
 8004914:	e004      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      break;
 8004916:	bf00      	nop
 8004918:	e002      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      break;   
 800491a:	bf00      	nop
 800491c:	e000      	b.n	8004920 <DMA_CheckFifoParam+0xe8>
      break;
 800491e:	bf00      	nop
    }
  } 
  
  return status; 
 8004920:	7bfb      	ldrb	r3, [r7, #15]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop

08004930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800493a:	2300      	movs	r3, #0
 800493c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004942:	2300      	movs	r3, #0
 8004944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	e16b      	b.n	8004c24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800494c:	2201      	movs	r2, #1
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4013      	ands	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	429a      	cmp	r2, r3
 8004966:	f040 815a 	bne.w	8004c1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	2b01      	cmp	r3, #1
 8004974:	d005      	beq.n	8004982 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800497e:	2b02      	cmp	r3, #2
 8004980:	d130      	bne.n	80049e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	2203      	movs	r2, #3
 800498e:	fa02 f303 	lsl.w	r3, r2, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	fa02 f303 	lsl.w	r3, r2, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049b8:	2201      	movs	r2, #1
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43db      	mvns	r3, r3
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	4013      	ands	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	091b      	lsrs	r3, r3, #4
 80049ce:	f003 0201 	and.w	r2, r3, #1
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4313      	orrs	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d017      	beq.n	8004a20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	2203      	movs	r2, #3
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 0303 	and.w	r3, r3, #3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d123      	bne.n	8004a74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	08da      	lsrs	r2, r3, #3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3208      	adds	r2, #8
 8004a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	220f      	movs	r2, #15
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	08da      	lsrs	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3208      	adds	r2, #8
 8004a6e:	69b9      	ldr	r1, [r7, #24]
 8004a70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	2203      	movs	r2, #3
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	43db      	mvns	r3, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 0203 	and.w	r2, r3, #3
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80b4 	beq.w	8004c1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	4b60      	ldr	r3, [pc, #384]	; (8004c3c <HAL_GPIO_Init+0x30c>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004abe:	4a5f      	ldr	r2, [pc, #380]	; (8004c3c <HAL_GPIO_Init+0x30c>)
 8004ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ac6:	4b5d      	ldr	r3, [pc, #372]	; (8004c3c <HAL_GPIO_Init+0x30c>)
 8004ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ad2:	4a5b      	ldr	r2, [pc, #364]	; (8004c40 <HAL_GPIO_Init+0x310>)
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	3302      	adds	r3, #2
 8004ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	220f      	movs	r2, #15
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a52      	ldr	r2, [pc, #328]	; (8004c44 <HAL_GPIO_Init+0x314>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d02b      	beq.n	8004b56 <HAL_GPIO_Init+0x226>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a51      	ldr	r2, [pc, #324]	; (8004c48 <HAL_GPIO_Init+0x318>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d025      	beq.n	8004b52 <HAL_GPIO_Init+0x222>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a50      	ldr	r2, [pc, #320]	; (8004c4c <HAL_GPIO_Init+0x31c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01f      	beq.n	8004b4e <HAL_GPIO_Init+0x21e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a4f      	ldr	r2, [pc, #316]	; (8004c50 <HAL_GPIO_Init+0x320>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d019      	beq.n	8004b4a <HAL_GPIO_Init+0x21a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a4e      	ldr	r2, [pc, #312]	; (8004c54 <HAL_GPIO_Init+0x324>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <HAL_GPIO_Init+0x216>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a4d      	ldr	r2, [pc, #308]	; (8004c58 <HAL_GPIO_Init+0x328>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00d      	beq.n	8004b42 <HAL_GPIO_Init+0x212>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a4c      	ldr	r2, [pc, #304]	; (8004c5c <HAL_GPIO_Init+0x32c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d007      	beq.n	8004b3e <HAL_GPIO_Init+0x20e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a4b      	ldr	r2, [pc, #300]	; (8004c60 <HAL_GPIO_Init+0x330>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d101      	bne.n	8004b3a <HAL_GPIO_Init+0x20a>
 8004b36:	2307      	movs	r3, #7
 8004b38:	e00e      	b.n	8004b58 <HAL_GPIO_Init+0x228>
 8004b3a:	2308      	movs	r3, #8
 8004b3c:	e00c      	b.n	8004b58 <HAL_GPIO_Init+0x228>
 8004b3e:	2306      	movs	r3, #6
 8004b40:	e00a      	b.n	8004b58 <HAL_GPIO_Init+0x228>
 8004b42:	2305      	movs	r3, #5
 8004b44:	e008      	b.n	8004b58 <HAL_GPIO_Init+0x228>
 8004b46:	2304      	movs	r3, #4
 8004b48:	e006      	b.n	8004b58 <HAL_GPIO_Init+0x228>
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e004      	b.n	8004b58 <HAL_GPIO_Init+0x228>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	e002      	b.n	8004b58 <HAL_GPIO_Init+0x228>
 8004b52:	2301      	movs	r3, #1
 8004b54:	e000      	b.n	8004b58 <HAL_GPIO_Init+0x228>
 8004b56:	2300      	movs	r3, #0
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	f002 0203 	and.w	r2, r2, #3
 8004b5e:	0092      	lsls	r2, r2, #2
 8004b60:	4093      	lsls	r3, r2
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b68:	4935      	ldr	r1, [pc, #212]	; (8004c40 <HAL_GPIO_Init+0x310>)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	089b      	lsrs	r3, r3, #2
 8004b6e:	3302      	adds	r3, #2
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b76:	4b3b      	ldr	r3, [pc, #236]	; (8004c64 <HAL_GPIO_Init+0x334>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b9a:	4a32      	ldr	r2, [pc, #200]	; (8004c64 <HAL_GPIO_Init+0x334>)
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ba0:	4b30      	ldr	r3, [pc, #192]	; (8004c64 <HAL_GPIO_Init+0x334>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d003      	beq.n	8004bc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bc4:	4a27      	ldr	r2, [pc, #156]	; (8004c64 <HAL_GPIO_Init+0x334>)
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bca:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <HAL_GPIO_Init+0x334>)
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bee:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <HAL_GPIO_Init+0x334>)
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <HAL_GPIO_Init+0x334>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4013      	ands	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c18:	4a12      	ldr	r2, [pc, #72]	; (8004c64 <HAL_GPIO_Init+0x334>)
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	3301      	adds	r3, #1
 8004c22:	61fb      	str	r3, [r7, #28]
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	2b0f      	cmp	r3, #15
 8004c28:	f67f ae90 	bls.w	800494c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	3724      	adds	r7, #36	; 0x24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	40013800 	.word	0x40013800
 8004c44:	40020000 	.word	0x40020000
 8004c48:	40020400 	.word	0x40020400
 8004c4c:	40020800 	.word	0x40020800
 8004c50:	40020c00 	.word	0x40020c00
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40021400 	.word	0x40021400
 8004c5c:	40021800 	.word	0x40021800
 8004c60:	40021c00 	.word	0x40021c00
 8004c64:	40013c00 	.word	0x40013c00

08004c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	807b      	strh	r3, [r7, #2]
 8004c74:	4613      	mov	r3, r2
 8004c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c78:	787b      	ldrb	r3, [r7, #1]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c7e:	887a      	ldrh	r2, [r7, #2]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c84:	e003      	b.n	8004c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c86:	887b      	ldrh	r3, [r7, #2]
 8004c88:	041a      	lsls	r2, r3, #16
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	619a      	str	r2, [r3, #24]
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ca6:	4b08      	ldr	r3, [pc, #32]	; (8004cc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ca8:	695a      	ldr	r2, [r3, #20]
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d006      	beq.n	8004cc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cb2:	4a05      	ldr	r2, [pc, #20]	; (8004cc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fc fb3c 	bl	8001338 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40013c00 	.word	0x40013c00

08004ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e12b      	b.n	8004f36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d106      	bne.n	8004cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fd fca4 	bl	8002640 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2224      	movs	r2, #36	; 0x24
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f022 0201 	bic.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d30:	f002 ff3e 	bl	8007bb0 <HAL_RCC_GetPCLK1Freq>
 8004d34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	4a81      	ldr	r2, [pc, #516]	; (8004f40 <HAL_I2C_Init+0x274>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d807      	bhi.n	8004d50 <HAL_I2C_Init+0x84>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4a80      	ldr	r2, [pc, #512]	; (8004f44 <HAL_I2C_Init+0x278>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	bf94      	ite	ls
 8004d48:	2301      	movls	r3, #1
 8004d4a:	2300      	movhi	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	e006      	b.n	8004d5e <HAL_I2C_Init+0x92>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4a7d      	ldr	r2, [pc, #500]	; (8004f48 <HAL_I2C_Init+0x27c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	bf94      	ite	ls
 8004d58:	2301      	movls	r3, #1
 8004d5a:	2300      	movhi	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e0e7      	b.n	8004f36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4a78      	ldr	r2, [pc, #480]	; (8004f4c <HAL_I2C_Init+0x280>)
 8004d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6e:	0c9b      	lsrs	r3, r3, #18
 8004d70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4a6a      	ldr	r2, [pc, #424]	; (8004f40 <HAL_I2C_Init+0x274>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d802      	bhi.n	8004da0 <HAL_I2C_Init+0xd4>
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	e009      	b.n	8004db4 <HAL_I2C_Init+0xe8>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004da6:	fb02 f303 	mul.w	r3, r2, r3
 8004daa:	4a69      	ldr	r2, [pc, #420]	; (8004f50 <HAL_I2C_Init+0x284>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	099b      	lsrs	r3, r3, #6
 8004db2:	3301      	adds	r3, #1
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	6812      	ldr	r2, [r2, #0]
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004dc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	495c      	ldr	r1, [pc, #368]	; (8004f40 <HAL_I2C_Init+0x274>)
 8004dd0:	428b      	cmp	r3, r1
 8004dd2:	d819      	bhi.n	8004e08 <HAL_I2C_Init+0x13c>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	1e59      	subs	r1, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	fbb1 f3f3 	udiv	r3, r1, r3
 8004de2:	1c59      	adds	r1, r3, #1
 8004de4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004de8:	400b      	ands	r3, r1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <HAL_I2C_Init+0x138>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	1e59      	subs	r1, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e02:	e051      	b.n	8004ea8 <HAL_I2C_Init+0x1dc>
 8004e04:	2304      	movs	r3, #4
 8004e06:	e04f      	b.n	8004ea8 <HAL_I2C_Init+0x1dc>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d111      	bne.n	8004e34 <HAL_I2C_Init+0x168>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	1e58      	subs	r0, r3, #1
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6859      	ldr	r1, [r3, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	440b      	add	r3, r1
 8004e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e22:	3301      	adds	r3, #1
 8004e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	bf0c      	ite	eq
 8004e2c:	2301      	moveq	r3, #1
 8004e2e:	2300      	movne	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	e012      	b.n	8004e5a <HAL_I2C_Init+0x18e>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	1e58      	subs	r0, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6859      	ldr	r1, [r3, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	0099      	lsls	r1, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_I2C_Init+0x196>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e022      	b.n	8004ea8 <HAL_I2C_Init+0x1dc>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10e      	bne.n	8004e88 <HAL_I2C_Init+0x1bc>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	1e58      	subs	r0, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6859      	ldr	r1, [r3, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	440b      	add	r3, r1
 8004e78:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e86:	e00f      	b.n	8004ea8 <HAL_I2C_Init+0x1dc>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	1e58      	subs	r0, r3, #1
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6859      	ldr	r1, [r3, #4]
 8004e90:	460b      	mov	r3, r1
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	0099      	lsls	r1, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ea4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	6809      	ldr	r1, [r1, #0]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69da      	ldr	r2, [r3, #28]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ed6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6911      	ldr	r1, [r2, #16]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	68d2      	ldr	r2, [r2, #12]
 8004ee2:	4311      	orrs	r1, r2
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695a      	ldr	r2, [r3, #20]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f042 0201 	orr.w	r2, r2, #1
 8004f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	000186a0 	.word	0x000186a0
 8004f44:	001e847f 	.word	0x001e847f
 8004f48:	003d08ff 	.word	0x003d08ff
 8004f4c:	431bde83 	.word	0x431bde83
 8004f50:	10624dd3 	.word	0x10624dd3

08004f54 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08c      	sub	sp, #48	; 0x30
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	4611      	mov	r1, r2
 8004f60:	461a      	mov	r2, r3
 8004f62:	4603      	mov	r3, r0
 8004f64:	817b      	strh	r3, [r7, #10]
 8004f66:	460b      	mov	r3, r1
 8004f68:	813b      	strh	r3, [r7, #8]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f6e:	f7fd ffd7 	bl	8002f20 <HAL_GetTick>
 8004f72:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	f040 8176 	bne.w	8005272 <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f86:	4b95      	ldr	r3, [pc, #596]	; (80051dc <HAL_I2C_Mem_Read_DMA+0x288>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	08db      	lsrs	r3, r3, #3
 8004f8c:	4a94      	ldr	r2, [pc, #592]	; (80051e0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	0a1a      	lsrs	r2, r3, #8
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	009a      	lsls	r2, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d116      	bne.n	8004fda <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	f043 0220 	orr.w	r2, r3, #32
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e14c      	b.n	8005274 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d0db      	beq.n	8004fa0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_I2C_Mem_Read_DMA+0xa2>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e13e      	b.n	8005274 <HAL_I2C_Mem_Read_DMA+0x320>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b01      	cmp	r3, #1
 800500a:	d007      	beq.n	800501c <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800502a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2222      	movs	r2, #34	; 0x22
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2240      	movs	r2, #64	; 0x40
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005046:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800504c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4a62      	ldr	r2, [pc, #392]	; (80051e4 <HAL_I2C_Mem_Read_DMA+0x290>)
 800505c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800505e:	897a      	ldrh	r2, [r7, #10]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8005064:	893a      	ldrh	r2, [r7, #8]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800506a:	88fa      	ldrh	r2, [r7, #6]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80cc 	beq.w	8005218 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	2b00      	cmp	r3, #0
 8005086:	d02d      	beq.n	80050e4 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	4a56      	ldr	r2, [pc, #344]	; (80051e8 <HAL_I2C_Mem_Read_DMA+0x294>)
 800508e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	4a55      	ldr	r2, [pc, #340]	; (80051ec <HAL_I2C_Mem_Read_DMA+0x298>)
 8005096:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509c:	2200      	movs	r2, #0
 800509e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	2200      	movs	r2, #0
 80050a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ac:	2200      	movs	r2, #0
 80050ae:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b4:	2200      	movs	r2, #0
 80050b6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3310      	adds	r3, #16
 80050c2:	4619      	mov	r1, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	461a      	mov	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ce:	f7ff f8c1 	bl	8004254 <HAL_DMA_Start_IT>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80050d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f040 8087 	bne.w	80051f0 <HAL_I2C_Mem_Read_DMA+0x29c>
 80050e2:	e013      	b.n	800510c <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e0b3      	b.n	8005274 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800510c:	88f8      	ldrh	r0, [r7, #6]
 800510e:	893a      	ldrh	r2, [r7, #8]
 8005110:	8979      	ldrh	r1, [r7, #10]
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	9301      	str	r3, [sp, #4]
 8005116:	2323      	movs	r3, #35	; 0x23
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	4603      	mov	r3, r0
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f001 fca1 	bl	8006a64 <I2C_RequestMemoryRead>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d023      	beq.n	8005170 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff f959 	bl	80043e4 <HAL_DMA_Abort_IT>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513c:	2200      	movs	r2, #0
 800513e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e081      	b.n	8005274 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005174:	2b01      	cmp	r3, #1
 8005176:	d108      	bne.n	800518a <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005186:	601a      	str	r2, [r3, #0]
 8005188:	e007      	b.n	800519a <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005198:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c6:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051d6:	605a      	str	r2, [r3, #4]
 80051d8:	e049      	b.n	800526e <HAL_I2C_Mem_Read_DMA+0x31a>
 80051da:	bf00      	nop
 80051dc:	20000000 	.word	0x20000000
 80051e0:	14f8b589 	.word	0x14f8b589
 80051e4:	ffff0000 	.word	0xffff0000
 80051e8:	08006c35 	.word	0x08006c35
 80051ec:	08006ddf 	.word	0x08006ddf
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	f043 0210 	orr.w	r2, r3, #16
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e02d      	b.n	8005274 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005218:	88f8      	ldrh	r0, [r7, #6]
 800521a:	893a      	ldrh	r2, [r7, #8]
 800521c:	8979      	ldrh	r1, [r7, #10]
 800521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005220:	9301      	str	r3, [sp, #4]
 8005222:	2323      	movs	r3, #35	; 0x23
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	4603      	mov	r3, r0
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f001 fc1b 	bl	8006a64 <I2C_RequestMemoryRead>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e01d      	b.n	8005274 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	699b      	ldr	r3, [r3, #24]
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525c:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e000      	b.n	8005274 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 8005272:	2302      	movs	r3, #2
  }
}
 8005274:	4618      	mov	r0, r3
 8005276:	3728      	adds	r7, #40	; 0x28
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	; 0x28
 8005280:	af02      	add	r7, sp, #8
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	607a      	str	r2, [r7, #4]
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	460b      	mov	r3, r1
 800528a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800528c:	f7fd fe48 	bl	8002f20 <HAL_GetTick>
 8005290:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b20      	cmp	r3, #32
 80052a0:	f040 8111 	bne.w	80054c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2319      	movs	r3, #25
 80052aa:	2201      	movs	r2, #1
 80052ac:	4988      	ldr	r1, [pc, #544]	; (80054d0 <HAL_I2C_IsDeviceReady+0x254>)
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f001 fe7a 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80052ba:	2302      	movs	r3, #2
 80052bc:	e104      	b.n	80054c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_I2C_IsDeviceReady+0x50>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e0fd      	b.n	80054c8 <HAL_I2C_IsDeviceReady+0x24c>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d007      	beq.n	80052f2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0201 	orr.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005300:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2224      	movs	r2, #36	; 0x24
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a70      	ldr	r2, [pc, #448]	; (80054d4 <HAL_I2C_IsDeviceReady+0x258>)
 8005314:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005324:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2200      	movs	r2, #0
 800532e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f001 fe38 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800534c:	d103      	bne.n	8005356 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005354:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e0b6      	b.n	80054c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800535a:	897b      	ldrh	r3, [r7, #10]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	461a      	mov	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005368:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800536a:	f7fd fdd9 	bl	8002f20 <HAL_GetTick>
 800536e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b02      	cmp	r3, #2
 800537c:	bf0c      	ite	eq
 800537e:	2301      	moveq	r3, #1
 8005380:	2300      	movne	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005394:	bf0c      	ite	eq
 8005396:	2301      	moveq	r3, #1
 8005398:	2300      	movne	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800539e:	e025      	b.n	80053ec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80053a0:	f7fd fdbe 	bl	8002f20 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d302      	bcc.n	80053b6 <HAL_I2C_IsDeviceReady+0x13a>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	22a0      	movs	r2, #160	; 0xa0
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	bf0c      	ite	eq
 80053cc:	2301      	moveq	r3, #1
 80053ce:	2300      	movne	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e2:	bf0c      	ite	eq
 80053e4:	2301      	moveq	r3, #1
 80053e6:	2300      	movne	r3, #0
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2ba0      	cmp	r3, #160	; 0xa0
 80053f6:	d005      	beq.n	8005404 <HAL_I2C_IsDeviceReady+0x188>
 80053f8:	7dfb      	ldrb	r3, [r7, #23]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d102      	bne.n	8005404 <HAL_I2C_IsDeviceReady+0x188>
 80053fe:	7dbb      	ldrb	r3, [r7, #22]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d0cd      	beq.n	80053a0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b02      	cmp	r3, #2
 8005418:	d129      	bne.n	800546e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005428:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800542a:	2300      	movs	r3, #0
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	9300      	str	r3, [sp, #0]
 8005444:	2319      	movs	r3, #25
 8005446:	2201      	movs	r2, #1
 8005448:	4921      	ldr	r1, [pc, #132]	; (80054d0 <HAL_I2C_IsDeviceReady+0x254>)
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f001 fdac 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e036      	b.n	80054c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	e02c      	b.n	80054c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800547c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005486:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	2319      	movs	r3, #25
 800548e:	2201      	movs	r2, #1
 8005490:	490f      	ldr	r1, [pc, #60]	; (80054d0 <HAL_I2C_IsDeviceReady+0x254>)
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f001 fd88 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e012      	b.n	80054c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	3301      	adds	r3, #1
 80054a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	f4ff af32 	bcc.w	8005316 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80054c6:	2302      	movs	r3, #2
  }
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3720      	adds	r7, #32
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	00100002 	.word	0x00100002
 80054d4:	ffff0000 	.word	0xffff0000

080054d8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054f8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005500:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	2b10      	cmp	r3, #16
 8005506:	d003      	beq.n	8005510 <HAL_I2C_EV_IRQHandler+0x38>
 8005508:	7bfb      	ldrb	r3, [r7, #15]
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	f040 80c1 	bne.w	8005692 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10d      	bne.n	8005546 <HAL_I2C_EV_IRQHandler+0x6e>
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005530:	d003      	beq.n	800553a <HAL_I2C_EV_IRQHandler+0x62>
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005538:	d101      	bne.n	800553e <HAL_I2C_EV_IRQHandler+0x66>
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_I2C_EV_IRQHandler+0x68>
 800553e:	2300      	movs	r3, #0
 8005540:	2b01      	cmp	r3, #1
 8005542:	f000 8132 	beq.w	80057aa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00c      	beq.n	800556a <HAL_I2C_EV_IRQHandler+0x92>
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	0a5b      	lsrs	r3, r3, #9
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d006      	beq.n	800556a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f001 fe9c 	bl	800729a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fcd2 	bl	8005f0c <I2C_Master_SB>
 8005568:	e092      	b.n	8005690 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	08db      	lsrs	r3, r3, #3
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <HAL_I2C_EV_IRQHandler+0xb2>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	0a5b      	lsrs	r3, r3, #9
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fd48 	bl	8006018 <I2C_Master_ADD10>
 8005588:	e082      	b.n	8005690 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	085b      	lsrs	r3, r3, #1
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <HAL_I2C_EV_IRQHandler+0xd2>
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	0a5b      	lsrs	r3, r3, #9
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fd62 	bl	800606c <I2C_Master_ADDR>
 80055a8:	e072      	b.n	8005690 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d03b      	beq.n	800562e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055c4:	f000 80f3 	beq.w	80057ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	09db      	lsrs	r3, r3, #7
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00f      	beq.n	80055f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	0a9b      	lsrs	r3, r3, #10
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <HAL_I2C_EV_IRQHandler+0x11c>
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	089b      	lsrs	r3, r3, #2
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f942 	bl	8005876 <I2C_MasterTransmit_TXE>
 80055f2:	e04d      	b.n	8005690 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	089b      	lsrs	r3, r3, #2
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80d6 	beq.w	80057ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	0a5b      	lsrs	r3, r3, #9
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 80cf 	beq.w	80057ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005610:	7bbb      	ldrb	r3, [r7, #14]
 8005612:	2b21      	cmp	r3, #33	; 0x21
 8005614:	d103      	bne.n	800561e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f9c9 	bl	80059ae <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800561c:	e0c7      	b.n	80057ae <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	2b40      	cmp	r3, #64	; 0x40
 8005622:	f040 80c4 	bne.w	80057ae <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fa37 	bl	8005a9a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800562c:	e0bf      	b.n	80057ae <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800563c:	f000 80b7 	beq.w	80057ae <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	099b      	lsrs	r3, r3, #6
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00f      	beq.n	800566c <HAL_I2C_EV_IRQHandler+0x194>
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	0a9b      	lsrs	r3, r3, #10
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d009      	beq.n	800566c <HAL_I2C_EV_IRQHandler+0x194>
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	089b      	lsrs	r3, r3, #2
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d103      	bne.n	800566c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 faac 	bl	8005bc2 <I2C_MasterReceive_RXNE>
 800566a:	e011      	b.n	8005690 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	089b      	lsrs	r3, r3, #2
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 809a 	beq.w	80057ae <HAL_I2C_EV_IRQHandler+0x2d6>
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	0a5b      	lsrs	r3, r3, #9
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 8093 	beq.w	80057ae <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fb55 	bl	8005d38 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800568e:	e08e      	b.n	80057ae <HAL_I2C_EV_IRQHandler+0x2d6>
 8005690:	e08d      	b.n	80057ae <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d004      	beq.n	80056a4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	61fb      	str	r3, [r7, #28]
 80056a2:	e007      	b.n	80056b4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	085b      	lsrs	r3, r3, #1
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d012      	beq.n	80056e6 <HAL_I2C_EV_IRQHandler+0x20e>
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	0a5b      	lsrs	r3, r3, #9
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00c      	beq.n	80056e6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80056dc:	69b9      	ldr	r1, [r7, #24]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 ff13 	bl	800650a <I2C_Slave_ADDR>
 80056e4:	e066      	b.n	80057b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	091b      	lsrs	r3, r3, #4
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <HAL_I2C_EV_IRQHandler+0x22e>
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	0a5b      	lsrs	r3, r3, #9
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 ff4e 	bl	80065a0 <I2C_Slave_STOPF>
 8005704:	e056      	b.n	80057b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005706:	7bbb      	ldrb	r3, [r7, #14]
 8005708:	2b21      	cmp	r3, #33	; 0x21
 800570a:	d002      	beq.n	8005712 <HAL_I2C_EV_IRQHandler+0x23a>
 800570c:	7bbb      	ldrb	r3, [r7, #14]
 800570e:	2b29      	cmp	r3, #41	; 0x29
 8005710:	d125      	bne.n	800575e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	09db      	lsrs	r3, r3, #7
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00f      	beq.n	800573e <HAL_I2C_EV_IRQHandler+0x266>
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	0a9b      	lsrs	r3, r3, #10
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d009      	beq.n	800573e <HAL_I2C_EV_IRQHandler+0x266>
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	089b      	lsrs	r3, r3, #2
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d103      	bne.n	800573e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fe29 	bl	800638e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800573c:	e039      	b.n	80057b2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	089b      	lsrs	r3, r3, #2
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d033      	beq.n	80057b2 <HAL_I2C_EV_IRQHandler+0x2da>
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	0a5b      	lsrs	r3, r3, #9
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d02d      	beq.n	80057b2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fe56 	bl	8006408 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800575c:	e029      	b.n	80057b2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	099b      	lsrs	r3, r3, #6
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00f      	beq.n	800578a <HAL_I2C_EV_IRQHandler+0x2b2>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	0a9b      	lsrs	r3, r3, #10
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	089b      	lsrs	r3, r3, #2
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fe61 	bl	800644a <I2C_SlaveReceive_RXNE>
 8005788:	e014      	b.n	80057b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	089b      	lsrs	r3, r3, #2
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00e      	beq.n	80057b4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	0a5b      	lsrs	r3, r3, #9
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d008      	beq.n	80057b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fe8f 	bl	80064c6 <I2C_SlaveReceive_BTF>
 80057a8:	e004      	b.n	80057b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80057aa:	bf00      	nop
 80057ac:	e002      	b.n	80057b4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ae:	bf00      	nop
 80057b0:	e000      	b.n	80057b4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057b2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80057b4:	3720      	adds	r7, #32
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80057c2:	bf00      	nop
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	460b      	mov	r3, r1
 8005814:	70fb      	strb	r3, [r7, #3]
 8005816:	4613      	mov	r3, r2
 8005818:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005884:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800588c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005892:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005898:	2b00      	cmp	r3, #0
 800589a:	d150      	bne.n	800593e <I2C_MasterTransmit_TXE+0xc8>
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	2b21      	cmp	r3, #33	; 0x21
 80058a0:	d14d      	bne.n	800593e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d01d      	beq.n	80058e4 <I2C_MasterTransmit_TXE+0x6e>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d01a      	beq.n	80058e4 <I2C_MasterTransmit_TXE+0x6e>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80058b4:	d016      	beq.n	80058e4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058c4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2211      	movs	r2, #17
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f7ff ff6c 	bl	80057ba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058e2:	e060      	b.n	80059a6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058f2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005902:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b40      	cmp	r3, #64	; 0x40
 800591c:	d107      	bne.n	800592e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7ff ff87 	bl	800583a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800592c:	e03b      	b.n	80059a6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7ff ff3f 	bl	80057ba <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800593c:	e033      	b.n	80059a6 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	2b21      	cmp	r3, #33	; 0x21
 8005942:	d005      	beq.n	8005950 <I2C_MasterTransmit_TXE+0xda>
 8005944:	7bbb      	ldrb	r3, [r7, #14]
 8005946:	2b40      	cmp	r3, #64	; 0x40
 8005948:	d12d      	bne.n	80059a6 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	2b22      	cmp	r3, #34	; 0x22
 800594e:	d12a      	bne.n	80059a6 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d108      	bne.n	800596c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005968:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800596a:	e01c      	b.n	80059a6 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	d103      	bne.n	8005980 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f88e 	bl	8005a9a <I2C_MemoryTransmit_TXE_BTF>
}
 800597e:	e012      	b.n	80059a6 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	781a      	ldrb	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	1c5a      	adds	r2, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80059a4:	e7ff      	b.n	80059a6 <I2C_MasterTransmit_TXE+0x130>
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b084      	sub	sp, #16
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b21      	cmp	r3, #33	; 0x21
 80059c6:	d164      	bne.n	8005a92 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d012      	beq.n	80059f8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d6:	781a      	ldrb	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80059f6:	e04c      	b.n	8005a92 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d01d      	beq.n	8005a3a <I2C_MasterTransmit_BTF+0x8c>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b20      	cmp	r3, #32
 8005a02:	d01a      	beq.n	8005a3a <I2C_MasterTransmit_BTF+0x8c>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a0a:	d016      	beq.n	8005a3a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a1a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2211      	movs	r2, #17
 8005a20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f7ff fec1 	bl	80057ba <HAL_I2C_MasterTxCpltCallback>
}
 8005a38:	e02b      	b.n	8005a92 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a48:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a58:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	d107      	bne.n	8005a84 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff fedc 	bl	800583a <HAL_I2C_MemTxCpltCallback>
}
 8005a82:	e006      	b.n	8005a92 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff fe94 	bl	80057ba <HAL_I2C_MasterTxCpltCallback>
}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d11d      	bne.n	8005aee <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d10b      	bne.n	8005ad2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aca:	1c9a      	adds	r2, r3, #2
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005ad0:	e073      	b.n	8005bba <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	121b      	asrs	r3, r3, #8
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005aec:	e065      	b.n	8005bba <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d10b      	bne.n	8005b0e <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b0c:	e055      	b.n	8005bba <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d151      	bne.n	8005bba <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	2b22      	cmp	r3, #34	; 0x22
 8005b1a:	d10d      	bne.n	8005b38 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b2a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005b36:	e040      	b.n	8005bba <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d015      	beq.n	8005b6e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005b42:	7bfb      	ldrb	r3, [r7, #15]
 8005b44:	2b21      	cmp	r3, #33	; 0x21
 8005b46:	d112      	bne.n	8005b6e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	781a      	ldrb	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005b6c:	e025      	b.n	8005bba <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d120      	bne.n	8005bba <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	2b21      	cmp	r3, #33	; 0x21
 8005b7c:	d11d      	bne.n	8005bba <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b8c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff fe40 	bl	800583a <HAL_I2C_MemTxCpltCallback>
}
 8005bba:	bf00      	nop
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b22      	cmp	r3, #34	; 0x22
 8005bd4:	f040 80ac 	bne.w	8005d30 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d921      	bls.n	8005c2a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	f040 808c 	bne.w	8005d30 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c26:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005c28:	e082      	b.n	8005d30 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d075      	beq.n	8005d1e <I2C_MasterReceive_RXNE+0x15c>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d002      	beq.n	8005c3e <I2C_MasterReceive_RXNE+0x7c>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d16f      	bne.n	8005d1e <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f001 faca 	bl	80071d8 <I2C_WaitOnSTOPRequestThroughIT>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d142      	bne.n	8005cd0 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c58:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c68:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	b2d2      	uxtb	r2, r2
 8005c76:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b40      	cmp	r3, #64	; 0x40
 8005ca2:	d10a      	bne.n	8005cba <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fb fb58 	bl	8001368 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005cb8:	e03a      	b.n	8005d30 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2212      	movs	r2, #18
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff fd80 	bl	80057ce <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005cce:	e02f      	b.n	8005d30 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005cde:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	b2d2      	uxtb	r2, r2
 8005cec:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	1c5a      	adds	r2, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff fd99 	bl	800584e <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005d1c:	e008      	b.n	8005d30 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d2c:	605a      	str	r2, [r3, #4]
}
 8005d2e:	e7ff      	b.n	8005d30 <I2C_MasterReceive_RXNE+0x16e>
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d11b      	bne.n	8005d88 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005d86:	e0bd      	b.n	8005f04 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d129      	bne.n	8005de6 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005da0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d00a      	beq.n	8005dbe <I2C_MasterReceive_BTF+0x86>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d007      	beq.n	8005dbe <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dbc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005de4:	e08e      	b.n	8005f04 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d176      	bne.n	8005ede <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d002      	beq.n	8005dfc <I2C_MasterReceive_BTF+0xc4>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b10      	cmp	r3, #16
 8005dfa:	d108      	bne.n	8005e0e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	e019      	b.n	8005e42 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d002      	beq.n	8005e1a <I2C_MasterReceive_BTF+0xe2>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d108      	bne.n	8005e2c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	e00a      	b.n	8005e42 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b10      	cmp	r3, #16
 8005e30:	d007      	beq.n	8005e42 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e40:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	1c5a      	adds	r2, r3, #1
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e9c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b40      	cmp	r3, #64	; 0x40
 8005eb0:	d10a      	bne.n	8005ec8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f7fb fa51 	bl	8001368 <HAL_I2C_MemRxCpltCallback>
}
 8005ec6:	e01d      	b.n	8005f04 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2212      	movs	r2, #18
 8005ed4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff fc79 	bl	80057ce <HAL_I2C_MasterRxCpltCallback>
}
 8005edc:	e012      	b.n	8005f04 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	1c5a      	adds	r2, r3, #1
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005f04:	bf00      	nop
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b40      	cmp	r3, #64	; 0x40
 8005f1e:	d117      	bne.n	8005f50 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d109      	bne.n	8005f3c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f38:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005f3a:	e067      	b.n	800600c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f043 0301 	orr.w	r3, r3, #1
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	611a      	str	r2, [r3, #16]
}
 8005f4e:	e05d      	b.n	800600c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f58:	d133      	bne.n	8005fc2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b21      	cmp	r3, #33	; 0x21
 8005f64:	d109      	bne.n	8005f7a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f76:	611a      	str	r2, [r3, #16]
 8005f78:	e008      	b.n	8005f8c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f043 0301 	orr.w	r3, r3, #1
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d004      	beq.n	8005f9e <I2C_Master_SB+0x92>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d108      	bne.n	8005fb0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d032      	beq.n	800600c <I2C_Master_SB+0x100>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d02d      	beq.n	800600c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fbe:	605a      	str	r2, [r3, #4]
}
 8005fc0:	e024      	b.n	800600c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10e      	bne.n	8005fe8 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	11db      	asrs	r3, r3, #7
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	f003 0306 	and.w	r3, r3, #6
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	f063 030f 	orn	r3, r3, #15
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	611a      	str	r2, [r3, #16]
}
 8005fe6:	e011      	b.n	800600c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d10d      	bne.n	800600c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	11db      	asrs	r3, r3, #7
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	f003 0306 	and.w	r3, r3, #6
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	f063 030e 	orn	r3, r3, #14
 8006004:	b2da      	uxtb	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	611a      	str	r2, [r3, #16]
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006018:	b480      	push	{r7}
 800601a:	b083      	sub	sp, #12
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006024:	b2da      	uxtb	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006030:	2b00      	cmp	r3, #0
 8006032:	d004      	beq.n	800603e <I2C_Master_ADD10+0x26>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800603a:	2b00      	cmp	r3, #0
 800603c:	d108      	bne.n	8006050 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00c      	beq.n	8006060 <I2C_Master_ADD10+0x48>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604c:	2b00      	cmp	r3, #0
 800604e:	d007      	beq.n	8006060 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800605e:	605a      	str	r2, [r3, #4]
  }
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800606c:	b480      	push	{r7}
 800606e:	b091      	sub	sp, #68	; 0x44
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800607a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006082:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006088:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006090:	b2db      	uxtb	r3, r3
 8006092:	2b22      	cmp	r3, #34	; 0x22
 8006094:	f040 8169 	bne.w	800636a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10f      	bne.n	80060c0 <I2C_Master_ADDR+0x54>
 80060a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	d10b      	bne.n	80060c0 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060a8:	2300      	movs	r3, #0
 80060aa:	633b      	str	r3, [r7, #48]	; 0x30
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	633b      	str	r3, [r7, #48]	; 0x30
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	633b      	str	r3, [r7, #48]	; 0x30
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	e160      	b.n	8006382 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d11d      	bne.n	8006104 <I2C_Master_ADDR+0x98>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80060d0:	d118      	bne.n	8006104 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d2:	2300      	movs	r3, #0
 80060d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060f6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	651a      	str	r2, [r3, #80]	; 0x50
 8006102:	e13e      	b.n	8006382 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d113      	bne.n	8006136 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800610e:	2300      	movs	r3, #0
 8006110:	62bb      	str	r3, [r7, #40]	; 0x28
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	62bb      	str	r3, [r7, #40]	; 0x28
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	e115      	b.n	8006362 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b01      	cmp	r3, #1
 800613e:	f040 808a 	bne.w	8006256 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006144:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006148:	d137      	bne.n	80061ba <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006158:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006168:	d113      	bne.n	8006192 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006178:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800617a:	2300      	movs	r3, #0
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	e0e7      	b.n	8006362 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006192:	2300      	movs	r3, #0
 8006194:	623b      	str	r3, [r7, #32]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	623b      	str	r3, [r7, #32]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	623b      	str	r3, [r7, #32]
 80061a6:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	e0d3      	b.n	8006362 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80061ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d02e      	beq.n	800621e <I2C_Master_ADDR+0x1b2>
 80061c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d02b      	beq.n	800621e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80061c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061c8:	2b12      	cmp	r3, #18
 80061ca:	d102      	bne.n	80061d2 <I2C_Master_ADDR+0x166>
 80061cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d125      	bne.n	800621e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80061d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d4:	2b04      	cmp	r3, #4
 80061d6:	d00e      	beq.n	80061f6 <I2C_Master_ADDR+0x18a>
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d00b      	beq.n	80061f6 <I2C_Master_ADDR+0x18a>
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d008      	beq.n	80061f6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e007      	b.n	8006206 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006204:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006206:	2300      	movs	r3, #0
 8006208:	61fb      	str	r3, [r7, #28]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	61fb      	str	r3, [r7, #28]
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	e0a1      	b.n	8006362 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800622c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800622e:	2300      	movs	r3, #0
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	61bb      	str	r3, [r7, #24]
 8006242:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	e085      	b.n	8006362 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b02      	cmp	r3, #2
 800625e:	d14d      	bne.n	80062fc <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	2b04      	cmp	r3, #4
 8006264:	d016      	beq.n	8006294 <I2C_Master_ADDR+0x228>
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006268:	2b02      	cmp	r3, #2
 800626a:	d013      	beq.n	8006294 <I2C_Master_ADDR+0x228>
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	2b10      	cmp	r3, #16
 8006270:	d010      	beq.n	8006294 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006280:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	e007      	b.n	80062a4 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062a2:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062b2:	d117      	bne.n	80062e4 <I2C_Master_ADDR+0x278>
 80062b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062ba:	d00b      	beq.n	80062d4 <I2C_Master_ADDR+0x268>
 80062bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d008      	beq.n	80062d4 <I2C_Master_ADDR+0x268>
 80062c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c4:	2b08      	cmp	r3, #8
 80062c6:	d005      	beq.n	80062d4 <I2C_Master_ADDR+0x268>
 80062c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ca:	2b10      	cmp	r3, #16
 80062cc:	d002      	beq.n	80062d4 <I2C_Master_ADDR+0x268>
 80062ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d0:	2b20      	cmp	r3, #32
 80062d2:	d107      	bne.n	80062e4 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062e2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	e032      	b.n	8006362 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800630a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800631a:	d117      	bne.n	800634c <I2C_Master_ADDR+0x2e0>
 800631c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006322:	d00b      	beq.n	800633c <I2C_Master_ADDR+0x2d0>
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	2b01      	cmp	r3, #1
 8006328:	d008      	beq.n	800633c <I2C_Master_ADDR+0x2d0>
 800632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632c:	2b08      	cmp	r3, #8
 800632e:	d005      	beq.n	800633c <I2C_Master_ADDR+0x2d0>
 8006330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006332:	2b10      	cmp	r3, #16
 8006334:	d002      	beq.n	800633c <I2C_Master_ADDR+0x2d0>
 8006336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006338:	2b20      	cmp	r3, #32
 800633a:	d107      	bne.n	800634c <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800634a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800634c:	2300      	movs	r3, #0
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006368:	e00b      	b.n	8006382 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	68fb      	ldr	r3, [r7, #12]
}
 8006380:	e7ff      	b.n	8006382 <I2C_Master_ADDR+0x316>
 8006382:	bf00      	nop
 8006384:	3744      	adds	r7, #68	; 0x44
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d02b      	beq.n	8006400 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	781a      	ldrb	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	3b01      	subs	r3, #1
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d114      	bne.n	8006400 <I2C_SlaveTransmit_TXE+0x72>
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	2b29      	cmp	r3, #41	; 0x29
 80063da:	d111      	bne.n	8006400 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2221      	movs	r2, #33	; 0x21
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2228      	movs	r2, #40	; 0x28
 80063f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff f9f1 	bl	80057e2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d011      	beq.n	800643e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	781a      	ldrb	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006434:	b29b      	uxth	r3, r3
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006458:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d02c      	beq.n	80064be <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691a      	ldr	r2, [r3, #16]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d114      	bne.n	80064be <I2C_SlaveReceive_RXNE+0x74>
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	2b2a      	cmp	r3, #42	; 0x2a
 8006498:	d111      	bne.n	80064be <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685a      	ldr	r2, [r3, #4]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2222      	movs	r2, #34	; 0x22
 80064ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2228      	movs	r2, #40	; 0x28
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f7ff f99c 	bl	80057f6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80064be:	bf00      	nop
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d012      	beq.n	80064fe <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006514:	2300      	movs	r3, #0
 8006516:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651e:	b2db      	uxtb	r3, r3
 8006520:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006524:	2b28      	cmp	r3, #40	; 0x28
 8006526:	d127      	bne.n	8006578 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006536:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	089b      	lsrs	r3, r3, #2
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006544:	2301      	movs	r3, #1
 8006546:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	09db      	lsrs	r3, r3, #7
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b00      	cmp	r3, #0
 8006552:	d103      	bne.n	800655c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	81bb      	strh	r3, [r7, #12]
 800655a:	e002      	b.n	8006562 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800656a:	89ba      	ldrh	r2, [r7, #12]
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff f94a 	bl	800580a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006576:	e00e      	b.n	8006596 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006578:	2300      	movs	r3, #0
 800657a:	60bb      	str	r3, [r7, #8]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	60bb      	str	r3, [r7, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	60bb      	str	r3, [r7, #8]
 800658c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006596:	bf00      	nop
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
	...

080065a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80065be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80065c0:	2300      	movs	r3, #0
 80065c2:	60bb      	str	r3, [r7, #8]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	60bb      	str	r3, [r7, #8]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065fc:	d172      	bne.n	80066e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	2b22      	cmp	r3, #34	; 0x22
 8006602:	d002      	beq.n	800660a <I2C_Slave_STOPF+0x6a>
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	2b2a      	cmp	r3, #42	; 0x2a
 8006608:	d135      	bne.n	8006676 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	b29a      	uxth	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661c:	b29b      	uxth	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d005      	beq.n	800662e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	f043 0204 	orr.w	r2, r3, #4
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800663c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe f87a 	bl	800473c <HAL_DMA_GetState>
 8006648:	4603      	mov	r3, r0
 800664a:	2b01      	cmp	r3, #1
 800664c:	d049      	beq.n	80066e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	4a69      	ldr	r2, [pc, #420]	; (80067f8 <I2C_Slave_STOPF+0x258>)
 8006654:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665a:	4618      	mov	r0, r3
 800665c:	f7fd fec2 	bl	80043e4 <HAL_DMA_Abort_IT>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d03d      	beq.n	80066e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006670:	4610      	mov	r0, r2
 8006672:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006674:	e035      	b.n	80066e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	b29a      	uxth	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	f043 0204 	orr.w	r2, r3, #4
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe f844 	bl	800473c <HAL_DMA_GetState>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d014      	beq.n	80066e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066be:	4a4e      	ldr	r2, [pc, #312]	; (80067f8 <I2C_Slave_STOPF+0x258>)
 80066c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fd fe8c 	bl	80043e4 <HAL_DMA_Abort_IT>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d008      	beq.n	80066e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80066dc:	4610      	mov	r0, r2
 80066de:	4798      	blx	r3
 80066e0:	e000      	b.n	80066e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80066e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e8:	b29b      	uxth	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d03e      	beq.n	800676c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d112      	bne.n	8006722 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691a      	ldr	r2, [r3, #16]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	b2d2      	uxtb	r2, r2
 8006708:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695b      	ldr	r3, [r3, #20]
 8006728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672c:	2b40      	cmp	r3, #64	; 0x40
 800672e:	d112      	bne.n	8006756 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691a      	ldr	r2, [r3, #16]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800674c:	b29b      	uxth	r3, r3
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800675a:	b29b      	uxth	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	f043 0204 	orr.w	r2, r3, #4
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 f843 	bl	8006800 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800677a:	e039      	b.n	80067f0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	2b2a      	cmp	r3, #42	; 0x2a
 8006780:	d109      	bne.n	8006796 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2228      	movs	r2, #40	; 0x28
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff f830 	bl	80057f6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b28      	cmp	r3, #40	; 0x28
 80067a0:	d111      	bne.n	80067c6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a15      	ldr	r2, [pc, #84]	; (80067fc <I2C_Slave_STOPF+0x25c>)
 80067a6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2220      	movs	r2, #32
 80067b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7ff f831 	bl	8005826 <HAL_I2C_ListenCpltCallback>
}
 80067c4:	e014      	b.n	80067f0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	2b22      	cmp	r3, #34	; 0x22
 80067cc:	d002      	beq.n	80067d4 <I2C_Slave_STOPF+0x234>
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	2b22      	cmp	r3, #34	; 0x22
 80067d2:	d10d      	bne.n	80067f0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff f803 	bl	80057f6 <HAL_I2C_SlaveRxCpltCallback>
}
 80067f0:	bf00      	nop
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	08006e59 	.word	0x08006e59
 80067fc:	ffff0000 	.word	0xffff0000

08006800 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800680e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006816:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	2b10      	cmp	r3, #16
 800681c:	d002      	beq.n	8006824 <I2C_ITError+0x24>
 800681e:	7bbb      	ldrb	r3, [r7, #14]
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d10a      	bne.n	800683a <I2C_ITError+0x3a>
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	2b22      	cmp	r3, #34	; 0x22
 8006828:	d107      	bne.n	800683a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006838:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800683a:	7bfb      	ldrb	r3, [r7, #15]
 800683c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006840:	2b28      	cmp	r3, #40	; 0x28
 8006842:	d107      	bne.n	8006854 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2228      	movs	r2, #40	; 0x28
 800684e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006852:	e015      	b.n	8006880 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800685e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006862:	d00a      	beq.n	800687a <I2C_ITError+0x7a>
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	2b60      	cmp	r3, #96	; 0x60
 8006868:	d007      	beq.n	800687a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800688a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800688e:	d162      	bne.n	8006956 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800689e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d020      	beq.n	80068f0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b2:	4a6a      	ldr	r2, [pc, #424]	; (8006a5c <I2C_ITError+0x25c>)
 80068b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fd fd92 	bl	80043e4 <HAL_DMA_Abort_IT>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f000 8089 	beq.w	80069da <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0201 	bic.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80068ea:	4610      	mov	r0, r2
 80068ec:	4798      	blx	r3
 80068ee:	e074      	b.n	80069da <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	4a59      	ldr	r2, [pc, #356]	; (8006a5c <I2C_ITError+0x25c>)
 80068f6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fd fd71 	bl	80043e4 <HAL_DMA_Abort_IT>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d068      	beq.n	80069da <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006912:	2b40      	cmp	r3, #64	; 0x40
 8006914:	d10b      	bne.n	800692e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0201 	bic.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006950:	4610      	mov	r0, r2
 8006952:	4798      	blx	r3
 8006954:	e041      	b.n	80069da <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b60      	cmp	r3, #96	; 0x60
 8006960:	d125      	bne.n	80069ae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2220      	movs	r2, #32
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697a:	2b40      	cmp	r3, #64	; 0x40
 800697c:	d10b      	bne.n	8006996 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	691a      	ldr	r2, [r3, #16]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006988:	b2d2      	uxtb	r2, r2
 800698a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0201 	bic.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7fe ff5b 	bl	8005862 <HAL_I2C_AbortCpltCallback>
 80069ac:	e015      	b.n	80069da <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b8:	2b40      	cmp	r3, #64	; 0x40
 80069ba:	d10b      	bne.n	80069d4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fe ff3a 	bl	800584e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069de:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10e      	bne.n	8006a08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d109      	bne.n	8006a08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d104      	bne.n	8006a08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a16:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a1e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a24:	f003 0304 	and.w	r3, r3, #4
 8006a28:	2b04      	cmp	r3, #4
 8006a2a:	d113      	bne.n	8006a54 <I2C_ITError+0x254>
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	2b28      	cmp	r3, #40	; 0x28
 8006a30:	d110      	bne.n	8006a54 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a0a      	ldr	r2, [pc, #40]	; (8006a60 <I2C_ITError+0x260>)
 8006a36:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fe fee9 	bl	8005826 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a54:	bf00      	nop
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	08006e59 	.word	0x08006e59
 8006a60:	ffff0000 	.word	0xffff0000

08006a64 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af02      	add	r7, sp, #8
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	4611      	mov	r1, r2
 8006a70:	461a      	mov	r2, r3
 8006a72:	4603      	mov	r3, r0
 8006a74:	817b      	strh	r3, [r7, #10]
 8006a76:	460b      	mov	r3, r1
 8006a78:	813b      	strh	r3, [r7, #8]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a8c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 fa7c 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00d      	beq.n	8006ad2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac4:	d103      	bne.n	8006ace <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006acc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e0aa      	b.n	8006c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ad2:	897b      	ldrh	r3, [r7, #10]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ae0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	6a3a      	ldr	r2, [r7, #32]
 8006ae6:	4952      	ldr	r1, [pc, #328]	; (8006c30 <I2C_RequestMemoryRead+0x1cc>)
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 fab4 	bl	8007056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d001      	beq.n	8006af8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e097      	b.n	8006c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	617b      	str	r3, [r7, #20]
 8006b0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b10:	6a39      	ldr	r1, [r7, #32]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 fb1e 	bl	8007154 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00d      	beq.n	8006b3a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d107      	bne.n	8006b36 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e076      	b.n	8006c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b3a:	88fb      	ldrh	r3, [r7, #6]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d105      	bne.n	8006b4c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b40:	893b      	ldrh	r3, [r7, #8]
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	611a      	str	r2, [r3, #16]
 8006b4a:	e021      	b.n	8006b90 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b4c:	893b      	ldrh	r3, [r7, #8]
 8006b4e:	0a1b      	lsrs	r3, r3, #8
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5c:	6a39      	ldr	r1, [r7, #32]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 faf8 	bl	8007154 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00d      	beq.n	8006b86 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d107      	bne.n	8006b82 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e050      	b.n	8006c28 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b86:	893b      	ldrh	r3, [r7, #8]
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b92:	6a39      	ldr	r1, [r7, #32]
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 fadd 	bl	8007154 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00d      	beq.n	8006bbc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba4:	2b04      	cmp	r3, #4
 8006ba6:	d107      	bne.n	8006bb8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e035      	b.n	8006c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006bd8:	68f8      	ldr	r0, [r7, #12]
 8006bda:	f000 f9e5 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00d      	beq.n	8006c00 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bf2:	d103      	bne.n	8006bfc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e013      	b.n	8006c28 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c00:	897b      	ldrh	r3, [r7, #10]
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	f043 0301 	orr.w	r3, r3, #1
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	6a3a      	ldr	r2, [r7, #32]
 8006c14:	4906      	ldr	r1, [pc, #24]	; (8006c30 <I2C_RequestMemoryRead+0x1cc>)
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 fa1d 	bl	8007056 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	00010002 	.word	0x00010002

08006c34 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c48:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c50:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006c66:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d003      	beq.n	8006c78 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c74:	2200      	movs	r2, #0
 8006c76:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c84:	2200      	movs	r2, #0
 8006c86:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006c88:	7cfb      	ldrb	r3, [r7, #19]
 8006c8a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006c8e:	2b21      	cmp	r3, #33	; 0x21
 8006c90:	d007      	beq.n	8006ca2 <I2C_DMAXferCplt+0x6e>
 8006c92:	7cfb      	ldrb	r3, [r7, #19]
 8006c94:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006c98:	2b22      	cmp	r3, #34	; 0x22
 8006c9a:	d131      	bne.n	8006d00 <I2C_DMAXferCplt+0xcc>
 8006c9c:	7cbb      	ldrb	r3, [r7, #18]
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d12e      	bne.n	8006d00 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cb0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006cb8:	7cfb      	ldrb	r3, [r7, #19]
 8006cba:	2b29      	cmp	r3, #41	; 0x29
 8006cbc:	d10a      	bne.n	8006cd4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2221      	movs	r2, #33	; 0x21
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	2228      	movs	r2, #40	; 0x28
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ccc:	6978      	ldr	r0, [r7, #20]
 8006cce:	f7fe fd88 	bl	80057e2 <HAL_I2C_SlaveTxCpltCallback>
 8006cd2:	e00c      	b.n	8006cee <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006cd4:	7cfb      	ldrb	r3, [r7, #19]
 8006cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006cd8:	d109      	bne.n	8006cee <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	2222      	movs	r2, #34	; 0x22
 8006cde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2228      	movs	r2, #40	; 0x28
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ce8:	6978      	ldr	r0, [r7, #20]
 8006cea:	f7fe fd84 	bl	80057f6 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685a      	ldr	r2, [r3, #4]
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006cfc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006cfe:	e06a      	b.n	8006dd6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d064      	beq.n	8006dd6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d107      	bne.n	8006d26 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d24:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006d34:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d3c:	d009      	beq.n	8006d52 <I2C_DMAXferCplt+0x11e>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d006      	beq.n	8006d52 <I2C_DMAXferCplt+0x11e>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006d4a:	d002      	beq.n	8006d52 <I2C_DMAXferCplt+0x11e>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d107      	bne.n	8006d62 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d60:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d70:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d80:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2200      	movs	r2, #0
 8006d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d003      	beq.n	8006d98 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006d90:	6978      	ldr	r0, [r7, #20]
 8006d92:	f7fe fd5c 	bl	800584e <HAL_I2C_ErrorCallback>
}
 8006d96:	e01e      	b.n	8006dd6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b40      	cmp	r3, #64	; 0x40
 8006daa:	d10a      	bne.n	8006dc2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2200      	movs	r2, #0
 8006db8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006dba:	6978      	ldr	r0, [r7, #20]
 8006dbc:	f7fa fad4 	bl	8001368 <HAL_I2C_MemRxCpltCallback>
}
 8006dc0:	e009      	b.n	8006dd6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	2212      	movs	r2, #18
 8006dce:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006dd0:	6978      	ldr	r0, [r7, #20]
 8006dd2:	f7fe fcfc 	bl	80057ce <HAL_I2C_MasterRxCpltCallback>
}
 8006dd6:	bf00      	nop
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d003      	beq.n	8006dfc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df8:	2200      	movs	r2, #0
 8006dfa:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e08:	2200      	movs	r2, #0
 8006e0a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7fd fca3 	bl	8004758 <HAL_DMA_GetError>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d01b      	beq.n	8006e50 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e26:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	f043 0210 	orr.w	r2, r3, #16
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006e4a:	68f8      	ldr	r0, [r7, #12]
 8006e4c:	f7fe fcff 	bl	800584e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e50:	bf00      	nop
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b086      	sub	sp, #24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e70:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e72:	4b4b      	ldr	r3, [pc, #300]	; (8006fa0 <I2C_DMAAbort+0x148>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	08db      	lsrs	r3, r3, #3
 8006e78:	4a4a      	ldr	r2, [pc, #296]	; (8006fa4 <I2C_DMAAbort+0x14c>)
 8006e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7e:	0a1a      	lsrs	r2, r3, #8
 8006e80:	4613      	mov	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4413      	add	r3, r2
 8006e86:	00da      	lsls	r2, r3, #3
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d106      	bne.n	8006ea0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e96:	f043 0220 	orr.w	r2, r3, #32
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006e9e:	e00a      	b.n	8006eb6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eb4:	d0ea      	beq.n	8006e8c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef8:	2200      	movs	r2, #0
 8006efa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f08:	2200      	movs	r2, #0
 8006f0a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0201 	bic.w	r2, r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b60      	cmp	r3, #96	; 0x60
 8006f26:	d10e      	bne.n	8006f46 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f3e:	6978      	ldr	r0, [r7, #20]
 8006f40:	f7fe fc8f 	bl	8005862 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f44:	e027      	b.n	8006f96 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f46:	7cfb      	ldrb	r3, [r7, #19]
 8006f48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f4c:	2b28      	cmp	r3, #40	; 0x28
 8006f4e:	d117      	bne.n	8006f80 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f042 0201 	orr.w	r2, r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2200      	movs	r2, #0
 8006f74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2228      	movs	r2, #40	; 0x28
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006f7e:	e007      	b.n	8006f90 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006f90:	6978      	ldr	r0, [r7, #20]
 8006f92:	f7fe fc5c 	bl	800584e <HAL_I2C_ErrorCallback>
}
 8006f96:	bf00      	nop
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000000 	.word	0x20000000
 8006fa4:	14f8b589 	.word	0x14f8b589

08006fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fb8:	e025      	b.n	8007006 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fc0:	d021      	beq.n	8007006 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc2:	f7fb ffad 	bl	8002f20 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d302      	bcc.n	8006fd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d116      	bne.n	8007006 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2220      	movs	r2, #32
 8006fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff2:	f043 0220 	orr.w	r2, r3, #32
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007002:	2301      	movs	r3, #1
 8007004:	e023      	b.n	800704e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	0c1b      	lsrs	r3, r3, #16
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b01      	cmp	r3, #1
 800700e:	d10d      	bne.n	800702c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	43da      	mvns	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	4013      	ands	r3, r2
 800701c:	b29b      	uxth	r3, r3
 800701e:	2b00      	cmp	r3, #0
 8007020:	bf0c      	ite	eq
 8007022:	2301      	moveq	r3, #1
 8007024:	2300      	movne	r3, #0
 8007026:	b2db      	uxtb	r3, r3
 8007028:	461a      	mov	r2, r3
 800702a:	e00c      	b.n	8007046 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	43da      	mvns	r2, r3
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4013      	ands	r3, r2
 8007038:	b29b      	uxth	r3, r3
 800703a:	2b00      	cmp	r3, #0
 800703c:	bf0c      	ite	eq
 800703e:	2301      	moveq	r3, #1
 8007040:	2300      	movne	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	429a      	cmp	r2, r3
 800704a:	d0b6      	beq.n	8006fba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	60f8      	str	r0, [r7, #12]
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
 8007062:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007064:	e051      	b.n	800710a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007074:	d123      	bne.n	80070be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007084:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800708e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	f043 0204 	orr.w	r2, r3, #4
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e046      	b.n	800714c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070c4:	d021      	beq.n	800710a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070c6:	f7fb ff2b 	bl	8002f20 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d302      	bcc.n	80070dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d116      	bne.n	800710a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2220      	movs	r2, #32
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	f043 0220 	orr.w	r2, r3, #32
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e020      	b.n	800714c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	0c1b      	lsrs	r3, r3, #16
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b01      	cmp	r3, #1
 8007112:	d10c      	bne.n	800712e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	43da      	mvns	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4013      	ands	r3, r2
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	bf14      	ite	ne
 8007126:	2301      	movne	r3, #1
 8007128:	2300      	moveq	r3, #0
 800712a:	b2db      	uxtb	r3, r3
 800712c:	e00b      	b.n	8007146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	43da      	mvns	r2, r3
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	4013      	ands	r3, r2
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	bf14      	ite	ne
 8007140:	2301      	movne	r3, #1
 8007142:	2300      	moveq	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d18d      	bne.n	8007066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3710      	adds	r7, #16
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007160:	e02d      	b.n	80071be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 f86a 	bl	800723c <I2C_IsAcknowledgeFailed>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e02d      	b.n	80071ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007178:	d021      	beq.n	80071be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800717a:	f7fb fed1 	bl	8002f20 <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	1ad3      	subs	r3, r2, r3
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	429a      	cmp	r2, r3
 8007188:	d302      	bcc.n	8007190 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d116      	bne.n	80071be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2220      	movs	r2, #32
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	f043 0220 	orr.w	r2, r3, #32
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e007      	b.n	80071ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c8:	2b80      	cmp	r3, #128	; 0x80
 80071ca:	d1ca      	bne.n	8007162 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80071e4:	4b13      	ldr	r3, [pc, #76]	; (8007234 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	08db      	lsrs	r3, r3, #3
 80071ea:	4a13      	ldr	r2, [pc, #76]	; (8007238 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80071ec:	fba2 2303 	umull	r2, r3, r2, r3
 80071f0:	0a1a      	lsrs	r2, r3, #8
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d107      	bne.n	8007216 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	f043 0220 	orr.w	r2, r3, #32
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e008      	b.n	8007228 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007224:	d0e9      	beq.n	80071fa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	20000000 	.word	0x20000000
 8007238:	14f8b589 	.word	0x14f8b589

0800723c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800724e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007252:	d11b      	bne.n	800728c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800725c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2220      	movs	r2, #32
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	f043 0204 	orr.w	r2, r3, #4
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e000      	b.n	800728e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80072aa:	d103      	bne.n	80072b4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80072b2:	e007      	b.n	80072c4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80072bc:	d102      	bne.n	80072c4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2208      	movs	r2, #8
 80072c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e267      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d075      	beq.n	80073da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80072ee:	4b88      	ldr	r3, [pc, #544]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f003 030c 	and.w	r3, r3, #12
 80072f6:	2b04      	cmp	r3, #4
 80072f8:	d00c      	beq.n	8007314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072fa:	4b85      	ldr	r3, [pc, #532]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007302:	2b08      	cmp	r3, #8
 8007304:	d112      	bne.n	800732c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007306:	4b82      	ldr	r3, [pc, #520]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800730e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007312:	d10b      	bne.n	800732c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007314:	4b7e      	ldr	r3, [pc, #504]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d05b      	beq.n	80073d8 <HAL_RCC_OscConfig+0x108>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d157      	bne.n	80073d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	e242      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007334:	d106      	bne.n	8007344 <HAL_RCC_OscConfig+0x74>
 8007336:	4b76      	ldr	r3, [pc, #472]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a75      	ldr	r2, [pc, #468]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800733c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	e01d      	b.n	8007380 <HAL_RCC_OscConfig+0xb0>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800734c:	d10c      	bne.n	8007368 <HAL_RCC_OscConfig+0x98>
 800734e:	4b70      	ldr	r3, [pc, #448]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a6f      	ldr	r2, [pc, #444]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	4b6d      	ldr	r3, [pc, #436]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a6c      	ldr	r2, [pc, #432]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	e00b      	b.n	8007380 <HAL_RCC_OscConfig+0xb0>
 8007368:	4b69      	ldr	r3, [pc, #420]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a68      	ldr	r2, [pc, #416]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800736e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007372:	6013      	str	r3, [r2, #0]
 8007374:	4b66      	ldr	r3, [pc, #408]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a65      	ldr	r2, [pc, #404]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800737a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800737e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d013      	beq.n	80073b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007388:	f7fb fdca 	bl	8002f20 <HAL_GetTick>
 800738c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800738e:	e008      	b.n	80073a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007390:	f7fb fdc6 	bl	8002f20 <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	2b64      	cmp	r3, #100	; 0x64
 800739c:	d901      	bls.n	80073a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e207      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073a2:	4b5b      	ldr	r3, [pc, #364]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0f0      	beq.n	8007390 <HAL_RCC_OscConfig+0xc0>
 80073ae:	e014      	b.n	80073da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b0:	f7fb fdb6 	bl	8002f20 <HAL_GetTick>
 80073b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073b6:	e008      	b.n	80073ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073b8:	f7fb fdb2 	bl	8002f20 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	2b64      	cmp	r3, #100	; 0x64
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e1f3      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073ca:	4b51      	ldr	r3, [pc, #324]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1f0      	bne.n	80073b8 <HAL_RCC_OscConfig+0xe8>
 80073d6:	e000      	b.n	80073da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d063      	beq.n	80074ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073e6:	4b4a      	ldr	r3, [pc, #296]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f003 030c 	and.w	r3, r3, #12
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00b      	beq.n	800740a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073f2:	4b47      	ldr	r3, [pc, #284]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	d11c      	bne.n	8007438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073fe:	4b44      	ldr	r3, [pc, #272]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d116      	bne.n	8007438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800740a:	4b41      	ldr	r3, [pc, #260]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d005      	beq.n	8007422 <HAL_RCC_OscConfig+0x152>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d001      	beq.n	8007422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e1c7      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007422:	4b3b      	ldr	r3, [pc, #236]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	4937      	ldr	r1, [pc, #220]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007432:	4313      	orrs	r3, r2
 8007434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007436:	e03a      	b.n	80074ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d020      	beq.n	8007482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007440:	4b34      	ldr	r3, [pc, #208]	; (8007514 <HAL_RCC_OscConfig+0x244>)
 8007442:	2201      	movs	r2, #1
 8007444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007446:	f7fb fd6b 	bl	8002f20 <HAL_GetTick>
 800744a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800744c:	e008      	b.n	8007460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800744e:	f7fb fd67 	bl	8002f20 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	2b02      	cmp	r3, #2
 800745a:	d901      	bls.n	8007460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e1a8      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007460:	4b2b      	ldr	r3, [pc, #172]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d0f0      	beq.n	800744e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800746c:	4b28      	ldr	r3, [pc, #160]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	4925      	ldr	r1, [pc, #148]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 800747c:	4313      	orrs	r3, r2
 800747e:	600b      	str	r3, [r1, #0]
 8007480:	e015      	b.n	80074ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007482:	4b24      	ldr	r3, [pc, #144]	; (8007514 <HAL_RCC_OscConfig+0x244>)
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007488:	f7fb fd4a 	bl	8002f20 <HAL_GetTick>
 800748c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800748e:	e008      	b.n	80074a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007490:	f7fb fd46 	bl	8002f20 <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	2b02      	cmp	r3, #2
 800749c:	d901      	bls.n	80074a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e187      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074a2:	4b1b      	ldr	r3, [pc, #108]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1f0      	bne.n	8007490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d036      	beq.n	8007528 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d016      	beq.n	80074f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074c2:	4b15      	ldr	r3, [pc, #84]	; (8007518 <HAL_RCC_OscConfig+0x248>)
 80074c4:	2201      	movs	r2, #1
 80074c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c8:	f7fb fd2a 	bl	8002f20 <HAL_GetTick>
 80074cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074d0:	f7fb fd26 	bl	8002f20 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e167      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074e2:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <HAL_RCC_OscConfig+0x240>)
 80074e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0f0      	beq.n	80074d0 <HAL_RCC_OscConfig+0x200>
 80074ee:	e01b      	b.n	8007528 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074f0:	4b09      	ldr	r3, [pc, #36]	; (8007518 <HAL_RCC_OscConfig+0x248>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074f6:	f7fb fd13 	bl	8002f20 <HAL_GetTick>
 80074fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074fc:	e00e      	b.n	800751c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074fe:	f7fb fd0f 	bl	8002f20 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b02      	cmp	r3, #2
 800750a:	d907      	bls.n	800751c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e150      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
 8007510:	40023800 	.word	0x40023800
 8007514:	42470000 	.word	0x42470000
 8007518:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800751c:	4b88      	ldr	r3, [pc, #544]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 800751e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007520:	f003 0302 	and.w	r3, r3, #2
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1ea      	bne.n	80074fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 8097 	beq.w	8007664 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007536:	2300      	movs	r3, #0
 8007538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800753a:	4b81      	ldr	r3, [pc, #516]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10f      	bne.n	8007566 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007546:	2300      	movs	r3, #0
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	4b7d      	ldr	r3, [pc, #500]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	4a7c      	ldr	r2, [pc, #496]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 8007550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007554:	6413      	str	r3, [r2, #64]	; 0x40
 8007556:	4b7a      	ldr	r3, [pc, #488]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755e:	60bb      	str	r3, [r7, #8]
 8007560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007562:	2301      	movs	r3, #1
 8007564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007566:	4b77      	ldr	r3, [pc, #476]	; (8007744 <HAL_RCC_OscConfig+0x474>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756e:	2b00      	cmp	r3, #0
 8007570:	d118      	bne.n	80075a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007572:	4b74      	ldr	r3, [pc, #464]	; (8007744 <HAL_RCC_OscConfig+0x474>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a73      	ldr	r2, [pc, #460]	; (8007744 <HAL_RCC_OscConfig+0x474>)
 8007578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800757c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800757e:	f7fb fccf 	bl	8002f20 <HAL_GetTick>
 8007582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007584:	e008      	b.n	8007598 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007586:	f7fb fccb 	bl	8002f20 <HAL_GetTick>
 800758a:	4602      	mov	r2, r0
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	1ad3      	subs	r3, r2, r3
 8007590:	2b02      	cmp	r3, #2
 8007592:	d901      	bls.n	8007598 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007594:	2303      	movs	r3, #3
 8007596:	e10c      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007598:	4b6a      	ldr	r3, [pc, #424]	; (8007744 <HAL_RCC_OscConfig+0x474>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d0f0      	beq.n	8007586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d106      	bne.n	80075ba <HAL_RCC_OscConfig+0x2ea>
 80075ac:	4b64      	ldr	r3, [pc, #400]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b0:	4a63      	ldr	r2, [pc, #396]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075b2:	f043 0301 	orr.w	r3, r3, #1
 80075b6:	6713      	str	r3, [r2, #112]	; 0x70
 80075b8:	e01c      	b.n	80075f4 <HAL_RCC_OscConfig+0x324>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	2b05      	cmp	r3, #5
 80075c0:	d10c      	bne.n	80075dc <HAL_RCC_OscConfig+0x30c>
 80075c2:	4b5f      	ldr	r3, [pc, #380]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c6:	4a5e      	ldr	r2, [pc, #376]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075c8:	f043 0304 	orr.w	r3, r3, #4
 80075cc:	6713      	str	r3, [r2, #112]	; 0x70
 80075ce:	4b5c      	ldr	r3, [pc, #368]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d2:	4a5b      	ldr	r2, [pc, #364]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075d4:	f043 0301 	orr.w	r3, r3, #1
 80075d8:	6713      	str	r3, [r2, #112]	; 0x70
 80075da:	e00b      	b.n	80075f4 <HAL_RCC_OscConfig+0x324>
 80075dc:	4b58      	ldr	r3, [pc, #352]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e0:	4a57      	ldr	r2, [pc, #348]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075e2:	f023 0301 	bic.w	r3, r3, #1
 80075e6:	6713      	str	r3, [r2, #112]	; 0x70
 80075e8:	4b55      	ldr	r3, [pc, #340]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ec:	4a54      	ldr	r2, [pc, #336]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80075ee:	f023 0304 	bic.w	r3, r3, #4
 80075f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d015      	beq.n	8007628 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075fc:	f7fb fc90 	bl	8002f20 <HAL_GetTick>
 8007600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007602:	e00a      	b.n	800761a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007604:	f7fb fc8c 	bl	8002f20 <HAL_GetTick>
 8007608:	4602      	mov	r2, r0
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007612:	4293      	cmp	r3, r2
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e0cb      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800761a:	4b49      	ldr	r3, [pc, #292]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 800761c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0ee      	beq.n	8007604 <HAL_RCC_OscConfig+0x334>
 8007626:	e014      	b.n	8007652 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007628:	f7fb fc7a 	bl	8002f20 <HAL_GetTick>
 800762c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800762e:	e00a      	b.n	8007646 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007630:	f7fb fc76 	bl	8002f20 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	f241 3288 	movw	r2, #5000	; 0x1388
 800763e:	4293      	cmp	r3, r2
 8007640:	d901      	bls.n	8007646 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e0b5      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007646:	4b3e      	ldr	r3, [pc, #248]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 8007648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1ee      	bne.n	8007630 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007652:	7dfb      	ldrb	r3, [r7, #23]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d105      	bne.n	8007664 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007658:	4b39      	ldr	r3, [pc, #228]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 800765a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765c:	4a38      	ldr	r2, [pc, #224]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 800765e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007662:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 80a1 	beq.w	80077b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800766e:	4b34      	ldr	r3, [pc, #208]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f003 030c 	and.w	r3, r3, #12
 8007676:	2b08      	cmp	r3, #8
 8007678:	d05c      	beq.n	8007734 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2b02      	cmp	r3, #2
 8007680:	d141      	bne.n	8007706 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007682:	4b31      	ldr	r3, [pc, #196]	; (8007748 <HAL_RCC_OscConfig+0x478>)
 8007684:	2200      	movs	r2, #0
 8007686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007688:	f7fb fc4a 	bl	8002f20 <HAL_GetTick>
 800768c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800768e:	e008      	b.n	80076a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007690:	f7fb fc46 	bl	8002f20 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b02      	cmp	r3, #2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e087      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076a2:	4b27      	ldr	r3, [pc, #156]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1f0      	bne.n	8007690 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69da      	ldr	r2, [r3, #28]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	019b      	lsls	r3, r3, #6
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	085b      	lsrs	r3, r3, #1
 80076c6:	3b01      	subs	r3, #1
 80076c8:	041b      	lsls	r3, r3, #16
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d0:	061b      	lsls	r3, r3, #24
 80076d2:	491b      	ldr	r1, [pc, #108]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076d8:	4b1b      	ldr	r3, [pc, #108]	; (8007748 <HAL_RCC_OscConfig+0x478>)
 80076da:	2201      	movs	r2, #1
 80076dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076de:	f7fb fc1f 	bl	8002f20 <HAL_GetTick>
 80076e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076e4:	e008      	b.n	80076f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076e6:	f7fb fc1b 	bl	8002f20 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d901      	bls.n	80076f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e05c      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076f8:	4b11      	ldr	r3, [pc, #68]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0f0      	beq.n	80076e6 <HAL_RCC_OscConfig+0x416>
 8007704:	e054      	b.n	80077b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007706:	4b10      	ldr	r3, [pc, #64]	; (8007748 <HAL_RCC_OscConfig+0x478>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800770c:	f7fb fc08 	bl	8002f20 <HAL_GetTick>
 8007710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007712:	e008      	b.n	8007726 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007714:	f7fb fc04 	bl	8002f20 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	2b02      	cmp	r3, #2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e045      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007726:	4b06      	ldr	r3, [pc, #24]	; (8007740 <HAL_RCC_OscConfig+0x470>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f0      	bne.n	8007714 <HAL_RCC_OscConfig+0x444>
 8007732:	e03d      	b.n	80077b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d107      	bne.n	800774c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	e038      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
 8007740:	40023800 	.word	0x40023800
 8007744:	40007000 	.word	0x40007000
 8007748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800774c:	4b1b      	ldr	r3, [pc, #108]	; (80077bc <HAL_RCC_OscConfig+0x4ec>)
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	2b01      	cmp	r3, #1
 8007758:	d028      	beq.n	80077ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007764:	429a      	cmp	r2, r3
 8007766:	d121      	bne.n	80077ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007772:	429a      	cmp	r2, r3
 8007774:	d11a      	bne.n	80077ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800777c:	4013      	ands	r3, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007784:	4293      	cmp	r3, r2
 8007786:	d111      	bne.n	80077ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	085b      	lsrs	r3, r3, #1
 8007794:	3b01      	subs	r3, #1
 8007796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007798:	429a      	cmp	r2, r3
 800779a:	d107      	bne.n	80077ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d001      	beq.n	80077b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e000      	b.n	80077b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	40023800 	.word	0x40023800

080077c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e0cc      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80077d4:	4b68      	ldr	r3, [pc, #416]	; (8007978 <HAL_RCC_ClockConfig+0x1b8>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0307 	and.w	r3, r3, #7
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d90c      	bls.n	80077fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077e2:	4b65      	ldr	r3, [pc, #404]	; (8007978 <HAL_RCC_ClockConfig+0x1b8>)
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	b2d2      	uxtb	r2, r2
 80077e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ea:	4b63      	ldr	r3, [pc, #396]	; (8007978 <HAL_RCC_ClockConfig+0x1b8>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d001      	beq.n	80077fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e0b8      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d020      	beq.n	800784a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0304 	and.w	r3, r3, #4
 8007810:	2b00      	cmp	r3, #0
 8007812:	d005      	beq.n	8007820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007814:	4b59      	ldr	r3, [pc, #356]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	4a58      	ldr	r2, [pc, #352]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 800781a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800781e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 0308 	and.w	r3, r3, #8
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800782c:	4b53      	ldr	r3, [pc, #332]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	4a52      	ldr	r2, [pc, #328]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007838:	4b50      	ldr	r3, [pc, #320]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	494d      	ldr	r1, [pc, #308]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007846:	4313      	orrs	r3, r2
 8007848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d044      	beq.n	80078e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d107      	bne.n	800786e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800785e:	4b47      	ldr	r3, [pc, #284]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d119      	bne.n	800789e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e07f      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d003      	beq.n	800787e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800787a:	2b03      	cmp	r3, #3
 800787c:	d107      	bne.n	800788e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800787e:	4b3f      	ldr	r3, [pc, #252]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d109      	bne.n	800789e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e06f      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800788e:	4b3b      	ldr	r3, [pc, #236]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e067      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800789e:	4b37      	ldr	r3, [pc, #220]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f023 0203 	bic.w	r2, r3, #3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	4934      	ldr	r1, [pc, #208]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078b0:	f7fb fb36 	bl	8002f20 <HAL_GetTick>
 80078b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b6:	e00a      	b.n	80078ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078b8:	f7fb fb32 	bl	8002f20 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e04f      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ce:	4b2b      	ldr	r3, [pc, #172]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	f003 020c 	and.w	r2, r3, #12
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	429a      	cmp	r2, r3
 80078de:	d1eb      	bne.n	80078b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80078e0:	4b25      	ldr	r3, [pc, #148]	; (8007978 <HAL_RCC_ClockConfig+0x1b8>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d20c      	bcs.n	8007908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ee:	4b22      	ldr	r3, [pc, #136]	; (8007978 <HAL_RCC_ClockConfig+0x1b8>)
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078f6:	4b20      	ldr	r3, [pc, #128]	; (8007978 <HAL_RCC_ClockConfig+0x1b8>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	d001      	beq.n	8007908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e032      	b.n	800796e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d008      	beq.n	8007926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007914:	4b19      	ldr	r3, [pc, #100]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	4916      	ldr	r1, [pc, #88]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007922:	4313      	orrs	r3, r2
 8007924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0308 	and.w	r3, r3, #8
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007932:	4b12      	ldr	r3, [pc, #72]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	490e      	ldr	r1, [pc, #56]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 8007942:	4313      	orrs	r3, r2
 8007944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007946:	f000 f821 	bl	800798c <HAL_RCC_GetSysClockFreq>
 800794a:	4602      	mov	r2, r0
 800794c:	4b0b      	ldr	r3, [pc, #44]	; (800797c <HAL_RCC_ClockConfig+0x1bc>)
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	091b      	lsrs	r3, r3, #4
 8007952:	f003 030f 	and.w	r3, r3, #15
 8007956:	490a      	ldr	r1, [pc, #40]	; (8007980 <HAL_RCC_ClockConfig+0x1c0>)
 8007958:	5ccb      	ldrb	r3, [r1, r3]
 800795a:	fa22 f303 	lsr.w	r3, r2, r3
 800795e:	4a09      	ldr	r2, [pc, #36]	; (8007984 <HAL_RCC_ClockConfig+0x1c4>)
 8007960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007962:	4b09      	ldr	r3, [pc, #36]	; (8007988 <HAL_RCC_ClockConfig+0x1c8>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f7fb f874 	bl	8002a54 <HAL_InitTick>

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	40023c00 	.word	0x40023c00
 800797c:	40023800 	.word	0x40023800
 8007980:	0800c4e8 	.word	0x0800c4e8
 8007984:	20000000 	.word	0x20000000
 8007988:	20000004 	.word	0x20000004

0800798c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800798c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007990:	b094      	sub	sp, #80	; 0x50
 8007992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	647b      	str	r3, [r7, #68]	; 0x44
 8007998:	2300      	movs	r3, #0
 800799a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800799c:	2300      	movs	r3, #0
 800799e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079a4:	4b79      	ldr	r3, [pc, #484]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 030c 	and.w	r3, r3, #12
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d00d      	beq.n	80079cc <HAL_RCC_GetSysClockFreq+0x40>
 80079b0:	2b08      	cmp	r3, #8
 80079b2:	f200 80e1 	bhi.w	8007b78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <HAL_RCC_GetSysClockFreq+0x34>
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	d003      	beq.n	80079c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80079be:	e0db      	b.n	8007b78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079c0:	4b73      	ldr	r3, [pc, #460]	; (8007b90 <HAL_RCC_GetSysClockFreq+0x204>)
 80079c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80079c4:	e0db      	b.n	8007b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079c6:	4b73      	ldr	r3, [pc, #460]	; (8007b94 <HAL_RCC_GetSysClockFreq+0x208>)
 80079c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079ca:	e0d8      	b.n	8007b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079cc:	4b6f      	ldr	r3, [pc, #444]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079d6:	4b6d      	ldr	r3, [pc, #436]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d063      	beq.n	8007aaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079e2:	4b6a      	ldr	r3, [pc, #424]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	099b      	lsrs	r3, r3, #6
 80079e8:	2200      	movs	r2, #0
 80079ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80079ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80079ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079f4:	633b      	str	r3, [r7, #48]	; 0x30
 80079f6:	2300      	movs	r3, #0
 80079f8:	637b      	str	r3, [r7, #52]	; 0x34
 80079fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80079fe:	4622      	mov	r2, r4
 8007a00:	462b      	mov	r3, r5
 8007a02:	f04f 0000 	mov.w	r0, #0
 8007a06:	f04f 0100 	mov.w	r1, #0
 8007a0a:	0159      	lsls	r1, r3, #5
 8007a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a10:	0150      	lsls	r0, r2, #5
 8007a12:	4602      	mov	r2, r0
 8007a14:	460b      	mov	r3, r1
 8007a16:	4621      	mov	r1, r4
 8007a18:	1a51      	subs	r1, r2, r1
 8007a1a:	6139      	str	r1, [r7, #16]
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	f04f 0300 	mov.w	r3, #0
 8007a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a30:	4659      	mov	r1, fp
 8007a32:	018b      	lsls	r3, r1, #6
 8007a34:	4651      	mov	r1, sl
 8007a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a3a:	4651      	mov	r1, sl
 8007a3c:	018a      	lsls	r2, r1, #6
 8007a3e:	4651      	mov	r1, sl
 8007a40:	ebb2 0801 	subs.w	r8, r2, r1
 8007a44:	4659      	mov	r1, fp
 8007a46:	eb63 0901 	sbc.w	r9, r3, r1
 8007a4a:	f04f 0200 	mov.w	r2, #0
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a5e:	4690      	mov	r8, r2
 8007a60:	4699      	mov	r9, r3
 8007a62:	4623      	mov	r3, r4
 8007a64:	eb18 0303 	adds.w	r3, r8, r3
 8007a68:	60bb      	str	r3, [r7, #8]
 8007a6a:	462b      	mov	r3, r5
 8007a6c:	eb49 0303 	adc.w	r3, r9, r3
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	f04f 0200 	mov.w	r2, #0
 8007a76:	f04f 0300 	mov.w	r3, #0
 8007a7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a7e:	4629      	mov	r1, r5
 8007a80:	024b      	lsls	r3, r1, #9
 8007a82:	4621      	mov	r1, r4
 8007a84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a88:	4621      	mov	r1, r4
 8007a8a:	024a      	lsls	r2, r1, #9
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a92:	2200      	movs	r2, #0
 8007a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007a9c:	f7f9 f884 	bl	8000ba8 <__aeabi_uldivmod>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aa8:	e058      	b.n	8007b5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aaa:	4b38      	ldr	r3, [pc, #224]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	099b      	lsrs	r3, r3, #6
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007aba:	623b      	str	r3, [r7, #32]
 8007abc:	2300      	movs	r3, #0
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ac4:	4642      	mov	r2, r8
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	f04f 0000 	mov.w	r0, #0
 8007acc:	f04f 0100 	mov.w	r1, #0
 8007ad0:	0159      	lsls	r1, r3, #5
 8007ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ad6:	0150      	lsls	r0, r2, #5
 8007ad8:	4602      	mov	r2, r0
 8007ada:	460b      	mov	r3, r1
 8007adc:	4641      	mov	r1, r8
 8007ade:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ae2:	4649      	mov	r1, r9
 8007ae4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ae8:	f04f 0200 	mov.w	r2, #0
 8007aec:	f04f 0300 	mov.w	r3, #0
 8007af0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007af4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007af8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007afc:	ebb2 040a 	subs.w	r4, r2, sl
 8007b00:	eb63 050b 	sbc.w	r5, r3, fp
 8007b04:	f04f 0200 	mov.w	r2, #0
 8007b08:	f04f 0300 	mov.w	r3, #0
 8007b0c:	00eb      	lsls	r3, r5, #3
 8007b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b12:	00e2      	lsls	r2, r4, #3
 8007b14:	4614      	mov	r4, r2
 8007b16:	461d      	mov	r5, r3
 8007b18:	4643      	mov	r3, r8
 8007b1a:	18e3      	adds	r3, r4, r3
 8007b1c:	603b      	str	r3, [r7, #0]
 8007b1e:	464b      	mov	r3, r9
 8007b20:	eb45 0303 	adc.w	r3, r5, r3
 8007b24:	607b      	str	r3, [r7, #4]
 8007b26:	f04f 0200 	mov.w	r2, #0
 8007b2a:	f04f 0300 	mov.w	r3, #0
 8007b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b32:	4629      	mov	r1, r5
 8007b34:	028b      	lsls	r3, r1, #10
 8007b36:	4621      	mov	r1, r4
 8007b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	028a      	lsls	r2, r1, #10
 8007b40:	4610      	mov	r0, r2
 8007b42:	4619      	mov	r1, r3
 8007b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b46:	2200      	movs	r2, #0
 8007b48:	61bb      	str	r3, [r7, #24]
 8007b4a:	61fa      	str	r2, [r7, #28]
 8007b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b50:	f7f9 f82a 	bl	8000ba8 <__aeabi_uldivmod>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	4613      	mov	r3, r2
 8007b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007b5c:	4b0b      	ldr	r3, [pc, #44]	; (8007b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	0c1b      	lsrs	r3, r3, #16
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	3301      	adds	r3, #1
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b76:	e002      	b.n	8007b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b78:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3750      	adds	r7, #80	; 0x50
 8007b84:	46bd      	mov	sp, r7
 8007b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b8a:	bf00      	nop
 8007b8c:	40023800 	.word	0x40023800
 8007b90:	00f42400 	.word	0x00f42400
 8007b94:	007a1200 	.word	0x007a1200

08007b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b9c:	4b03      	ldr	r3, [pc, #12]	; (8007bac <HAL_RCC_GetHCLKFreq+0x14>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	20000000 	.word	0x20000000

08007bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007bb4:	f7ff fff0 	bl	8007b98 <HAL_RCC_GetHCLKFreq>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	0a9b      	lsrs	r3, r3, #10
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	4903      	ldr	r1, [pc, #12]	; (8007bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bc6:	5ccb      	ldrb	r3, [r1, r3]
 8007bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	40023800 	.word	0x40023800
 8007bd4:	0800c4f8 	.word	0x0800c4f8

08007bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007bdc:	f7ff ffdc 	bl	8007b98 <HAL_RCC_GetHCLKFreq>
 8007be0:	4602      	mov	r2, r0
 8007be2:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	0b5b      	lsrs	r3, r3, #13
 8007be8:	f003 0307 	and.w	r3, r3, #7
 8007bec:	4903      	ldr	r1, [pc, #12]	; (8007bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bee:	5ccb      	ldrb	r3, [r1, r3]
 8007bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	0800c4f8 	.word	0x0800c4f8

08007c00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	220f      	movs	r2, #15
 8007c0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007c10:	4b12      	ldr	r3, [pc, #72]	; (8007c5c <HAL_RCC_GetClockConfig+0x5c>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f003 0203 	and.w	r2, r3, #3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007c1c:	4b0f      	ldr	r3, [pc, #60]	; (8007c5c <HAL_RCC_GetClockConfig+0x5c>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007c28:	4b0c      	ldr	r3, [pc, #48]	; (8007c5c <HAL_RCC_GetClockConfig+0x5c>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007c34:	4b09      	ldr	r3, [pc, #36]	; (8007c5c <HAL_RCC_GetClockConfig+0x5c>)
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	08db      	lsrs	r3, r3, #3
 8007c3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c42:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <HAL_RCC_GetClockConfig+0x60>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0207 	and.w	r2, r3, #7
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	601a      	str	r2, [r3, #0]
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	40023800 	.word	0x40023800
 8007c60:	40023c00 	.word	0x40023c00

08007c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e041      	b.n	8007cfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d106      	bne.n	8007c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7fa fd5a 	bl	8002744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2202      	movs	r2, #2
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	f000 fac4 	bl	8008230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
	...

08007d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d001      	beq.n	8007d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e04e      	b.n	8007dba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0201 	orr.w	r2, r2, #1
 8007d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a23      	ldr	r2, [pc, #140]	; (8007dc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d022      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d46:	d01d      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a1f      	ldr	r2, [pc, #124]	; (8007dcc <HAL_TIM_Base_Start_IT+0xc8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d018      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a1e      	ldr	r2, [pc, #120]	; (8007dd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d013      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a1c      	ldr	r2, [pc, #112]	; (8007dd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00e      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a1b      	ldr	r2, [pc, #108]	; (8007dd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d009      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a19      	ldr	r2, [pc, #100]	; (8007ddc <HAL_TIM_Base_Start_IT+0xd8>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d004      	beq.n	8007d84 <HAL_TIM_Base_Start_IT+0x80>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a18      	ldr	r2, [pc, #96]	; (8007de0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d111      	bne.n	8007da8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f003 0307 	and.w	r3, r3, #7
 8007d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b06      	cmp	r3, #6
 8007d94:	d010      	beq.n	8007db8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f042 0201 	orr.w	r2, r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da6:	e007      	b.n	8007db8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f042 0201 	orr.w	r2, r2, #1
 8007db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
 8007dc6:	bf00      	nop
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40000400 	.word	0x40000400
 8007dd0:	40000800 	.word	0x40000800
 8007dd4:	40000c00 	.word	0x40000c00
 8007dd8:	40010400 	.word	0x40010400
 8007ddc:	40014000 	.word	0x40014000
 8007de0:	40001800 	.word	0x40001800

08007de4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f022 0201 	bic.w	r2, r2, #1
 8007dfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6a1a      	ldr	r2, [r3, #32]
 8007e02:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e06:	4013      	ands	r3, r2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10f      	bne.n	8007e2c <HAL_TIM_Base_Stop_IT+0x48>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6a1a      	ldr	r2, [r3, #32]
 8007e12:	f240 4344 	movw	r3, #1092	; 0x444
 8007e16:	4013      	ands	r3, r2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d107      	bne.n	8007e2c <HAL_TIM_Base_Stop_IT+0x48>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f022 0201 	bic.w	r2, r2, #1
 8007e2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	f003 0302 	and.w	r3, r3, #2
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d122      	bne.n	8007e9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	f003 0302 	and.w	r3, r3, #2
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d11b      	bne.n	8007e9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f06f 0202 	mvn.w	r2, #2
 8007e6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	f003 0303 	and.w	r3, r3, #3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d003      	beq.n	8007e8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f9b5 	bl	80081f4 <HAL_TIM_IC_CaptureCallback>
 8007e8a:	e005      	b.n	8007e98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f9a7 	bl	80081e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f9b8 	bl	8008208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	691b      	ldr	r3, [r3, #16]
 8007ea4:	f003 0304 	and.w	r3, r3, #4
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d122      	bne.n	8007ef2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f003 0304 	and.w	r3, r3, #4
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d11b      	bne.n	8007ef2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f06f 0204 	mvn.w	r2, #4
 8007ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f98b 	bl	80081f4 <HAL_TIM_IC_CaptureCallback>
 8007ede:	e005      	b.n	8007eec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f97d 	bl	80081e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f98e 	bl	8008208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	f003 0308 	and.w	r3, r3, #8
 8007efc:	2b08      	cmp	r3, #8
 8007efe:	d122      	bne.n	8007f46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f003 0308 	and.w	r3, r3, #8
 8007f0a:	2b08      	cmp	r3, #8
 8007f0c:	d11b      	bne.n	8007f46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f06f 0208 	mvn.w	r2, #8
 8007f16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2204      	movs	r2, #4
 8007f1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	f003 0303 	and.w	r3, r3, #3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f961 	bl	80081f4 <HAL_TIM_IC_CaptureCallback>
 8007f32:	e005      	b.n	8007f40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f953 	bl	80081e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f964 	bl	8008208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	f003 0310 	and.w	r3, r3, #16
 8007f50:	2b10      	cmp	r3, #16
 8007f52:	d122      	bne.n	8007f9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f003 0310 	and.w	r3, r3, #16
 8007f5e:	2b10      	cmp	r3, #16
 8007f60:	d11b      	bne.n	8007f9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f06f 0210 	mvn.w	r2, #16
 8007f6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2208      	movs	r2, #8
 8007f70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	69db      	ldr	r3, [r3, #28]
 8007f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f937 	bl	80081f4 <HAL_TIM_IC_CaptureCallback>
 8007f86:	e005      	b.n	8007f94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f929 	bl	80081e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f93a 	bl	8008208 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	f003 0301 	and.w	r3, r3, #1
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d10e      	bne.n	8007fc6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d107      	bne.n	8007fc6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f06f 0201 	mvn.w	r2, #1
 8007fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7fa f8d1 	bl	8002168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd0:	2b80      	cmp	r3, #128	; 0x80
 8007fd2:	d10e      	bne.n	8007ff2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fde:	2b80      	cmp	r3, #128	; 0x80
 8007fe0:	d107      	bne.n	8007ff2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fadf 	bl	80085b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffc:	2b40      	cmp	r3, #64	; 0x40
 8007ffe:	d10e      	bne.n	800801e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800a:	2b40      	cmp	r3, #64	; 0x40
 800800c:	d107      	bne.n	800801e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f8ff 	bl	800821c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b20      	cmp	r3, #32
 800802a:	d10e      	bne.n	800804a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f003 0320 	and.w	r3, r3, #32
 8008036:	2b20      	cmp	r3, #32
 8008038:	d107      	bne.n	800804a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f06f 0220 	mvn.w	r2, #32
 8008042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 faa9 	bl	800859c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008066:	2b01      	cmp	r3, #1
 8008068:	d101      	bne.n	800806e <HAL_TIM_ConfigClockSource+0x1c>
 800806a:	2302      	movs	r3, #2
 800806c:	e0b4      	b.n	80081d8 <HAL_TIM_ConfigClockSource+0x186>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2202      	movs	r2, #2
 800807a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800808c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008094:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080a6:	d03e      	beq.n	8008126 <HAL_TIM_ConfigClockSource+0xd4>
 80080a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ac:	f200 8087 	bhi.w	80081be <HAL_TIM_ConfigClockSource+0x16c>
 80080b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b4:	f000 8086 	beq.w	80081c4 <HAL_TIM_ConfigClockSource+0x172>
 80080b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080bc:	d87f      	bhi.n	80081be <HAL_TIM_ConfigClockSource+0x16c>
 80080be:	2b70      	cmp	r3, #112	; 0x70
 80080c0:	d01a      	beq.n	80080f8 <HAL_TIM_ConfigClockSource+0xa6>
 80080c2:	2b70      	cmp	r3, #112	; 0x70
 80080c4:	d87b      	bhi.n	80081be <HAL_TIM_ConfigClockSource+0x16c>
 80080c6:	2b60      	cmp	r3, #96	; 0x60
 80080c8:	d050      	beq.n	800816c <HAL_TIM_ConfigClockSource+0x11a>
 80080ca:	2b60      	cmp	r3, #96	; 0x60
 80080cc:	d877      	bhi.n	80081be <HAL_TIM_ConfigClockSource+0x16c>
 80080ce:	2b50      	cmp	r3, #80	; 0x50
 80080d0:	d03c      	beq.n	800814c <HAL_TIM_ConfigClockSource+0xfa>
 80080d2:	2b50      	cmp	r3, #80	; 0x50
 80080d4:	d873      	bhi.n	80081be <HAL_TIM_ConfigClockSource+0x16c>
 80080d6:	2b40      	cmp	r3, #64	; 0x40
 80080d8:	d058      	beq.n	800818c <HAL_TIM_ConfigClockSource+0x13a>
 80080da:	2b40      	cmp	r3, #64	; 0x40
 80080dc:	d86f      	bhi.n	80081be <HAL_TIM_ConfigClockSource+0x16c>
 80080de:	2b30      	cmp	r3, #48	; 0x30
 80080e0:	d064      	beq.n	80081ac <HAL_TIM_ConfigClockSource+0x15a>
 80080e2:	2b30      	cmp	r3, #48	; 0x30
 80080e4:	d86b      	bhi.n	80081be <HAL_TIM_ConfigClockSource+0x16c>
 80080e6:	2b20      	cmp	r3, #32
 80080e8:	d060      	beq.n	80081ac <HAL_TIM_ConfigClockSource+0x15a>
 80080ea:	2b20      	cmp	r3, #32
 80080ec:	d867      	bhi.n	80081be <HAL_TIM_ConfigClockSource+0x16c>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d05c      	beq.n	80081ac <HAL_TIM_ConfigClockSource+0x15a>
 80080f2:	2b10      	cmp	r3, #16
 80080f4:	d05a      	beq.n	80081ac <HAL_TIM_ConfigClockSource+0x15a>
 80080f6:	e062      	b.n	80081be <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	6899      	ldr	r1, [r3, #8]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685a      	ldr	r2, [r3, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f000 f9ac 	bl	8008464 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800811a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	609a      	str	r2, [r3, #8]
      break;
 8008124:	e04f      	b.n	80081c6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6818      	ldr	r0, [r3, #0]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	6899      	ldr	r1, [r3, #8]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	f000 f995 	bl	8008464 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008148:	609a      	str	r2, [r3, #8]
      break;
 800814a:	e03c      	b.n	80081c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	6859      	ldr	r1, [r3, #4]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	461a      	mov	r2, r3
 800815a:	f000 f909 	bl	8008370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2150      	movs	r1, #80	; 0x50
 8008164:	4618      	mov	r0, r3
 8008166:	f000 f962 	bl	800842e <TIM_ITRx_SetConfig>
      break;
 800816a:	e02c      	b.n	80081c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6818      	ldr	r0, [r3, #0]
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	6859      	ldr	r1, [r3, #4]
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	461a      	mov	r2, r3
 800817a:	f000 f928 	bl	80083ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2160      	movs	r1, #96	; 0x60
 8008184:	4618      	mov	r0, r3
 8008186:	f000 f952 	bl	800842e <TIM_ITRx_SetConfig>
      break;
 800818a:	e01c      	b.n	80081c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6818      	ldr	r0, [r3, #0]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	6859      	ldr	r1, [r3, #4]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	461a      	mov	r2, r3
 800819a:	f000 f8e9 	bl	8008370 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2140      	movs	r1, #64	; 0x40
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 f942 	bl	800842e <TIM_ITRx_SetConfig>
      break;
 80081aa:	e00c      	b.n	80081c6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4619      	mov	r1, r3
 80081b6:	4610      	mov	r0, r2
 80081b8:	f000 f939 	bl	800842e <TIM_ITRx_SetConfig>
      break;
 80081bc:	e003      	b.n	80081c6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	73fb      	strb	r3, [r7, #15]
      break;
 80081c2:	e000      	b.n	80081c6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a40      	ldr	r2, [pc, #256]	; (8008344 <TIM_Base_SetConfig+0x114>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d013      	beq.n	8008270 <TIM_Base_SetConfig+0x40>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800824e:	d00f      	beq.n	8008270 <TIM_Base_SetConfig+0x40>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a3d      	ldr	r2, [pc, #244]	; (8008348 <TIM_Base_SetConfig+0x118>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d00b      	beq.n	8008270 <TIM_Base_SetConfig+0x40>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a3c      	ldr	r2, [pc, #240]	; (800834c <TIM_Base_SetConfig+0x11c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d007      	beq.n	8008270 <TIM_Base_SetConfig+0x40>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a3b      	ldr	r2, [pc, #236]	; (8008350 <TIM_Base_SetConfig+0x120>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d003      	beq.n	8008270 <TIM_Base_SetConfig+0x40>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a3a      	ldr	r2, [pc, #232]	; (8008354 <TIM_Base_SetConfig+0x124>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d108      	bne.n	8008282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	4313      	orrs	r3, r2
 8008280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a2f      	ldr	r2, [pc, #188]	; (8008344 <TIM_Base_SetConfig+0x114>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d02b      	beq.n	80082e2 <TIM_Base_SetConfig+0xb2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008290:	d027      	beq.n	80082e2 <TIM_Base_SetConfig+0xb2>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a2c      	ldr	r2, [pc, #176]	; (8008348 <TIM_Base_SetConfig+0x118>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d023      	beq.n	80082e2 <TIM_Base_SetConfig+0xb2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a2b      	ldr	r2, [pc, #172]	; (800834c <TIM_Base_SetConfig+0x11c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d01f      	beq.n	80082e2 <TIM_Base_SetConfig+0xb2>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a2a      	ldr	r2, [pc, #168]	; (8008350 <TIM_Base_SetConfig+0x120>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d01b      	beq.n	80082e2 <TIM_Base_SetConfig+0xb2>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a29      	ldr	r2, [pc, #164]	; (8008354 <TIM_Base_SetConfig+0x124>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d017      	beq.n	80082e2 <TIM_Base_SetConfig+0xb2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a28      	ldr	r2, [pc, #160]	; (8008358 <TIM_Base_SetConfig+0x128>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d013      	beq.n	80082e2 <TIM_Base_SetConfig+0xb2>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a27      	ldr	r2, [pc, #156]	; (800835c <TIM_Base_SetConfig+0x12c>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d00f      	beq.n	80082e2 <TIM_Base_SetConfig+0xb2>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a26      	ldr	r2, [pc, #152]	; (8008360 <TIM_Base_SetConfig+0x130>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d00b      	beq.n	80082e2 <TIM_Base_SetConfig+0xb2>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a25      	ldr	r2, [pc, #148]	; (8008364 <TIM_Base_SetConfig+0x134>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d007      	beq.n	80082e2 <TIM_Base_SetConfig+0xb2>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a24      	ldr	r2, [pc, #144]	; (8008368 <TIM_Base_SetConfig+0x138>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d003      	beq.n	80082e2 <TIM_Base_SetConfig+0xb2>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a23      	ldr	r2, [pc, #140]	; (800836c <TIM_Base_SetConfig+0x13c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d108      	bne.n	80082f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	689a      	ldr	r2, [r3, #8]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a0a      	ldr	r2, [pc, #40]	; (8008344 <TIM_Base_SetConfig+0x114>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d003      	beq.n	8008328 <TIM_Base_SetConfig+0xf8>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	4a0c      	ldr	r2, [pc, #48]	; (8008354 <TIM_Base_SetConfig+0x124>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d103      	bne.n	8008330 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	691a      	ldr	r2, [r3, #16]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	615a      	str	r2, [r3, #20]
}
 8008336:	bf00      	nop
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	40010000 	.word	0x40010000
 8008348:	40000400 	.word	0x40000400
 800834c:	40000800 	.word	0x40000800
 8008350:	40000c00 	.word	0x40000c00
 8008354:	40010400 	.word	0x40010400
 8008358:	40014000 	.word	0x40014000
 800835c:	40014400 	.word	0x40014400
 8008360:	40014800 	.word	0x40014800
 8008364:	40001800 	.word	0x40001800
 8008368:	40001c00 	.word	0x40001c00
 800836c:	40002000 	.word	0x40002000

08008370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6a1b      	ldr	r3, [r3, #32]
 8008380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	f023 0201 	bic.w	r2, r3, #1
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	699b      	ldr	r3, [r3, #24]
 8008392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800839a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f023 030a 	bic.w	r3, r3, #10
 80083ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	621a      	str	r2, [r3, #32]
}
 80083c2:	bf00      	nop
 80083c4:	371c      	adds	r7, #28
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b087      	sub	sp, #28
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	60f8      	str	r0, [r7, #12]
 80083d6:	60b9      	str	r1, [r7, #8]
 80083d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	f023 0210 	bic.w	r2, r3, #16
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	031b      	lsls	r3, r3, #12
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	4313      	orrs	r3, r2
 8008402:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800840a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	011b      	lsls	r3, r3, #4
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	4313      	orrs	r3, r2
 8008414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	697a      	ldr	r2, [r7, #20]
 800841a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	621a      	str	r2, [r3, #32]
}
 8008422:	bf00      	nop
 8008424:	371c      	adds	r7, #28
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800842e:	b480      	push	{r7}
 8008430:	b085      	sub	sp, #20
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008444:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	4313      	orrs	r3, r2
 800844c:	f043 0307 	orr.w	r3, r3, #7
 8008450:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	609a      	str	r2, [r3, #8]
}
 8008458:	bf00      	nop
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008464:	b480      	push	{r7}
 8008466:	b087      	sub	sp, #28
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800847e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	021a      	lsls	r2, r3, #8
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	431a      	orrs	r2, r3
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	4313      	orrs	r3, r2
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	4313      	orrs	r3, r2
 8008490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	609a      	str	r2, [r3, #8]
}
 8008498:	bf00      	nop
 800849a:	371c      	adds	r7, #28
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d101      	bne.n	80084bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084b8:	2302      	movs	r3, #2
 80084ba:	e05a      	b.n	8008572 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2202      	movs	r2, #2
 80084c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a21      	ldr	r2, [pc, #132]	; (8008580 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d022      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008508:	d01d      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a1d      	ldr	r2, [pc, #116]	; (8008584 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d018      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a1b      	ldr	r2, [pc, #108]	; (8008588 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d013      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a1a      	ldr	r2, [pc, #104]	; (800858c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d00e      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a18      	ldr	r2, [pc, #96]	; (8008590 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d009      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a17      	ldr	r2, [pc, #92]	; (8008594 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d004      	beq.n	8008546 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a15      	ldr	r2, [pc, #84]	; (8008598 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d10c      	bne.n	8008560 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800854c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	68ba      	ldr	r2, [r7, #8]
 8008554:	4313      	orrs	r3, r2
 8008556:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	40010000 	.word	0x40010000
 8008584:	40000400 	.word	0x40000400
 8008588:	40000800 	.word	0x40000800
 800858c:	40000c00 	.word	0x40000c00
 8008590:	40010400 	.word	0x40010400
 8008594:	40014000 	.word	0x40014000
 8008598:	40001800 	.word	0x40001800

0800859c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d101      	bne.n	80085d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e03f      	b.n	8008656 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d106      	bne.n	80085f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f7fa f940 	bl	8002870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2224      	movs	r2, #36	; 0x24
 80085f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68da      	ldr	r2, [r3, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fdc7 	bl	800919c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	691a      	ldr	r2, [r3, #16]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800861c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	695a      	ldr	r2, [r3, #20]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800862c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800863c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2220      	movs	r2, #32
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2220      	movs	r2, #32
 8008650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b08c      	sub	sp, #48	; 0x30
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	4613      	mov	r3, r2
 800866c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008674:	b2db      	uxtb	r3, r3
 8008676:	2b20      	cmp	r3, #32
 8008678:	d165      	bne.n	8008746 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <HAL_UART_Transmit_DMA+0x26>
 8008680:	88fb      	ldrh	r3, [r7, #6]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d101      	bne.n	800868a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e05e      	b.n	8008748 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_UART_Transmit_DMA+0x38>
 8008694:	2302      	movs	r3, #2
 8008696:	e057      	b.n	8008748 <HAL_UART_Transmit_DMA+0xe8>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	88fa      	ldrh	r2, [r7, #6]
 80086aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	88fa      	ldrh	r2, [r7, #6]
 80086b0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2221      	movs	r2, #33	; 0x21
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086c4:	4a22      	ldr	r2, [pc, #136]	; (8008750 <HAL_UART_Transmit_DMA+0xf0>)
 80086c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086cc:	4a21      	ldr	r2, [pc, #132]	; (8008754 <HAL_UART_Transmit_DMA+0xf4>)
 80086ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d4:	4a20      	ldr	r2, [pc, #128]	; (8008758 <HAL_UART_Transmit_DMA+0xf8>)
 80086d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086dc:	2200      	movs	r2, #0
 80086de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80086e0:	f107 0308 	add.w	r3, r7, #8
 80086e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	6819      	ldr	r1, [r3, #0]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	3304      	adds	r3, #4
 80086f4:	461a      	mov	r2, r3
 80086f6:	88fb      	ldrh	r3, [r7, #6]
 80086f8:	f7fb fdac 	bl	8004254 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008704:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3314      	adds	r3, #20
 8008714:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	e853 3f00 	ldrex	r3, [r3]
 800871c:	617b      	str	r3, [r7, #20]
   return(result);
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008724:	62bb      	str	r3, [r7, #40]	; 0x28
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3314      	adds	r3, #20
 800872c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800872e:	627a      	str	r2, [r7, #36]	; 0x24
 8008730:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008732:	6a39      	ldr	r1, [r7, #32]
 8008734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008736:	e841 2300 	strex	r3, r2, [r1]
 800873a:	61fb      	str	r3, [r7, #28]
   return(result);
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1e5      	bne.n	800870e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	e000      	b.n	8008748 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008746:	2302      	movs	r3, #2
  }
}
 8008748:	4618      	mov	r0, r3
 800874a:	3730      	adds	r7, #48	; 0x30
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	08008ccd 	.word	0x08008ccd
 8008754:	08008d67 	.word	0x08008d67
 8008758:	08008d83 	.word	0x08008d83

0800875c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b0ba      	sub	sp, #232	; 0xe8
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008782:	2300      	movs	r3, #0
 8008784:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008788:	2300      	movs	r3, #0
 800878a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800878e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008792:	f003 030f 	and.w	r3, r3, #15
 8008796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800879a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10f      	bne.n	80087c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a6:	f003 0320 	and.w	r3, r3, #32
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d009      	beq.n	80087c2 <HAL_UART_IRQHandler+0x66>
 80087ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fc32 	bl	8009024 <UART_Receive_IT>
      return;
 80087c0:	e256      	b.n	8008c70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 80de 	beq.w	8008988 <HAL_UART_IRQHandler+0x22c>
 80087cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d106      	bne.n	80087e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 80d1 	beq.w	8008988 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00b      	beq.n	800880a <HAL_UART_IRQHandler+0xae>
 80087f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d005      	beq.n	800880a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	f043 0201 	orr.w	r2, r3, #1
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800880a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800880e:	f003 0304 	and.w	r3, r3, #4
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00b      	beq.n	800882e <HAL_UART_IRQHandler+0xd2>
 8008816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d005      	beq.n	800882e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008826:	f043 0202 	orr.w	r2, r3, #2
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800882e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00b      	beq.n	8008852 <HAL_UART_IRQHandler+0xf6>
 800883a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b00      	cmp	r3, #0
 8008844:	d005      	beq.n	8008852 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	f043 0204 	orr.w	r2, r3, #4
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008856:	f003 0308 	and.w	r3, r3, #8
 800885a:	2b00      	cmp	r3, #0
 800885c:	d011      	beq.n	8008882 <HAL_UART_IRQHandler+0x126>
 800885e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008862:	f003 0320 	and.w	r3, r3, #32
 8008866:	2b00      	cmp	r3, #0
 8008868:	d105      	bne.n	8008876 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800886a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	f043 0208 	orr.w	r2, r3, #8
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 81ed 	beq.w	8008c66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800888c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008890:	f003 0320 	and.w	r3, r3, #32
 8008894:	2b00      	cmp	r3, #0
 8008896:	d008      	beq.n	80088aa <HAL_UART_IRQHandler+0x14e>
 8008898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fbbd 	bl	8009024 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b4:	2b40      	cmp	r3, #64	; 0x40
 80088b6:	bf0c      	ite	eq
 80088b8:	2301      	moveq	r3, #1
 80088ba:	2300      	movne	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	f003 0308 	and.w	r3, r3, #8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d103      	bne.n	80088d6 <HAL_UART_IRQHandler+0x17a>
 80088ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d04f      	beq.n	8008976 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fac5 	bl	8008e66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e6:	2b40      	cmp	r3, #64	; 0x40
 80088e8:	d141      	bne.n	800896e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3314      	adds	r3, #20
 80088f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008900:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008908:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3314      	adds	r3, #20
 8008912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008916:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800891a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008926:	e841 2300 	strex	r3, r2, [r1]
 800892a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800892e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1d9      	bne.n	80088ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893a:	2b00      	cmp	r3, #0
 800893c:	d013      	beq.n	8008966 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008942:	4a7d      	ldr	r2, [pc, #500]	; (8008b38 <HAL_UART_IRQHandler+0x3dc>)
 8008944:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894a:	4618      	mov	r0, r3
 800894c:	f7fb fd4a 	bl	80043e4 <HAL_DMA_Abort_IT>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d016      	beq.n	8008984 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008960:	4610      	mov	r0, r2
 8008962:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008964:	e00e      	b.n	8008984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f99a 	bl	8008ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800896c:	e00a      	b.n	8008984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f996 	bl	8008ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008974:	e006      	b.n	8008984 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f992 	bl	8008ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008982:	e170      	b.n	8008c66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008984:	bf00      	nop
    return;
 8008986:	e16e      	b.n	8008c66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898c:	2b01      	cmp	r3, #1
 800898e:	f040 814a 	bne.w	8008c26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008996:	f003 0310 	and.w	r3, r3, #16
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 8143 	beq.w	8008c26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089a4:	f003 0310 	and.w	r3, r3, #16
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 813c 	beq.w	8008c26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089ae:	2300      	movs	r3, #0
 80089b0:	60bb      	str	r3, [r7, #8]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	60bb      	str	r3, [r7, #8]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	60bb      	str	r3, [r7, #8]
 80089c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ce:	2b40      	cmp	r3, #64	; 0x40
 80089d0:	f040 80b4 	bne.w	8008b3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f000 8140 	beq.w	8008c6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089f2:	429a      	cmp	r2, r3
 80089f4:	f080 8139 	bcs.w	8008c6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a04:	69db      	ldr	r3, [r3, #28]
 8008a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a0a:	f000 8088 	beq.w	8008b1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	330c      	adds	r3, #12
 8008a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	330c      	adds	r3, #12
 8008a36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1d9      	bne.n	8008a0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3314      	adds	r3, #20
 8008a7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e1      	bne.n	8008a5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3314      	adds	r3, #20
 8008a9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3314      	adds	r3, #20
 8008ab6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008aba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008abc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008abe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ac0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ac2:	e841 2300 	strex	r3, r2, [r1]
 8008ac6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e3      	bne.n	8008a96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2220      	movs	r2, #32
 8008ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	330c      	adds	r3, #12
 8008ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aee:	f023 0310 	bic.w	r3, r3, #16
 8008af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	330c      	adds	r3, #12
 8008afc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b00:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e3      	bne.n	8008adc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fb fbf3 	bl	8004304 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	1ad3      	subs	r3, r2, r3
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f8c0 	bl	8008cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b34:	e099      	b.n	8008c6a <HAL_UART_IRQHandler+0x50e>
 8008b36:	bf00      	nop
 8008b38:	08008f2d 	.word	0x08008f2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	1ad3      	subs	r3, r2, r3
 8008b48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	f000 808b 	beq.w	8008c6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 8086 	beq.w	8008c6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	330c      	adds	r3, #12
 8008b68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	330c      	adds	r3, #12
 8008b82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008b86:	647a      	str	r2, [r7, #68]	; 0x44
 8008b88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b8e:	e841 2300 	strex	r3, r2, [r1]
 8008b92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e3      	bne.n	8008b62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3314      	adds	r3, #20
 8008ba0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	f023 0301 	bic.w	r3, r3, #1
 8008bb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3314      	adds	r3, #20
 8008bba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bbe:	633a      	str	r2, [r7, #48]	; 0x30
 8008bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bc6:	e841 2300 	strex	r3, r2, [r1]
 8008bca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d1e3      	bne.n	8008b9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	330c      	adds	r3, #12
 8008be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	e853 3f00 	ldrex	r3, [r3]
 8008bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f023 0310 	bic.w	r3, r3, #16
 8008bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	330c      	adds	r3, #12
 8008c00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c04:	61fa      	str	r2, [r7, #28]
 8008c06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c08:	69b9      	ldr	r1, [r7, #24]
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	e841 2300 	strex	r3, r2, [r1]
 8008c10:	617b      	str	r3, [r7, #20]
   return(result);
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1e3      	bne.n	8008be0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f848 	bl	8008cb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c24:	e023      	b.n	8008c6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d009      	beq.n	8008c46 <HAL_UART_IRQHandler+0x4ea>
 8008c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f988 	bl	8008f54 <UART_Transmit_IT>
    return;
 8008c44:	e014      	b.n	8008c70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00e      	beq.n	8008c70 <HAL_UART_IRQHandler+0x514>
 8008c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d008      	beq.n	8008c70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 f9c8 	bl	8008ff4 <UART_EndTransmit_IT>
    return;
 8008c64:	e004      	b.n	8008c70 <HAL_UART_IRQHandler+0x514>
    return;
 8008c66:	bf00      	nop
 8008c68:	e002      	b.n	8008c70 <HAL_UART_IRQHandler+0x514>
      return;
 8008c6a:	bf00      	nop
 8008c6c:	e000      	b.n	8008c70 <HAL_UART_IRQHandler+0x514>
      return;
 8008c6e:	bf00      	nop
  }
}
 8008c70:	37e8      	adds	r7, #232	; 0xe8
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop

08008c78 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b090      	sub	sp, #64	; 0x40
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d137      	bne.n	8008d58 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cea:	2200      	movs	r2, #0
 8008cec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3314      	adds	r3, #20
 8008cf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	e853 3f00 	ldrex	r3, [r3]
 8008cfc:	623b      	str	r3, [r7, #32]
   return(result);
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d04:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3314      	adds	r3, #20
 8008d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d0e:	633a      	str	r2, [r7, #48]	; 0x30
 8008d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d16:	e841 2300 	strex	r3, r2, [r1]
 8008d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1e5      	bne.n	8008cee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	330c      	adds	r3, #12
 8008d28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	e853 3f00 	ldrex	r3, [r3]
 8008d30:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d38:	637b      	str	r3, [r7, #52]	; 0x34
 8008d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	330c      	adds	r3, #12
 8008d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d42:	61fa      	str	r2, [r7, #28]
 8008d44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	69b9      	ldr	r1, [r7, #24]
 8008d48:	69fa      	ldr	r2, [r7, #28]
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e5      	bne.n	8008d22 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d56:	e002      	b.n	8008d5e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008d58:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008d5a:	f7f8 fb1b 	bl	8001394 <HAL_UART_TxCpltCallback>
}
 8008d5e:	bf00      	nop
 8008d60:	3740      	adds	r7, #64	; 0x40
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d72:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f7ff ff7f 	bl	8008c78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d7a:	bf00      	nop
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d92:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d9e:	2b80      	cmp	r3, #128	; 0x80
 8008da0:	bf0c      	ite	eq
 8008da2:	2301      	moveq	r3, #1
 8008da4:	2300      	movne	r3, #0
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b21      	cmp	r3, #33	; 0x21
 8008db4:	d108      	bne.n	8008dc8 <UART_DMAError+0x46>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d005      	beq.n	8008dc8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008dc2:	68b8      	ldr	r0, [r7, #8]
 8008dc4:	f000 f827 	bl	8008e16 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	695b      	ldr	r3, [r3, #20]
 8008dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd2:	2b40      	cmp	r3, #64	; 0x40
 8008dd4:	bf0c      	ite	eq
 8008dd6:	2301      	moveq	r3, #1
 8008dd8:	2300      	movne	r3, #0
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b22      	cmp	r3, #34	; 0x22
 8008de8:	d108      	bne.n	8008dfc <UART_DMAError+0x7a>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d005      	beq.n	8008dfc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	2200      	movs	r2, #0
 8008df4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008df6:	68b8      	ldr	r0, [r7, #8]
 8008df8:	f000 f835 	bl	8008e66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e00:	f043 0210 	orr.w	r2, r3, #16
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e08:	68b8      	ldr	r0, [r7, #8]
 8008e0a:	f7ff ff49 	bl	8008ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e0e:	bf00      	nop
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b089      	sub	sp, #36	; 0x24
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	330c      	adds	r3, #12
 8008e24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	e853 3f00 	ldrex	r3, [r3]
 8008e2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e34:	61fb      	str	r3, [r7, #28]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	330c      	adds	r3, #12
 8008e3c:	69fa      	ldr	r2, [r7, #28]
 8008e3e:	61ba      	str	r2, [r7, #24]
 8008e40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e42:	6979      	ldr	r1, [r7, #20]
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	e841 2300 	strex	r3, r2, [r1]
 8008e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1e5      	bne.n	8008e1e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2220      	movs	r2, #32
 8008e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008e5a:	bf00      	nop
 8008e5c:	3724      	adds	r7, #36	; 0x24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b095      	sub	sp, #84	; 0x54
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	330c      	adds	r3, #12
 8008e74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	330c      	adds	r3, #12
 8008e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e8e:	643a      	str	r2, [r7, #64]	; 0x40
 8008e90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e96:	e841 2300 	strex	r3, r2, [r1]
 8008e9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1e5      	bne.n	8008e6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3314      	adds	r3, #20
 8008ea8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eaa:	6a3b      	ldr	r3, [r7, #32]
 8008eac:	e853 3f00 	ldrex	r3, [r3]
 8008eb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	f023 0301 	bic.w	r3, r3, #1
 8008eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3314      	adds	r3, #20
 8008ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ec2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ec4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008eca:	e841 2300 	strex	r3, r2, [r1]
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1e5      	bne.n	8008ea2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d119      	bne.n	8008f12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	330c      	adds	r3, #12
 8008ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	e853 3f00 	ldrex	r3, [r3]
 8008eec:	60bb      	str	r3, [r7, #8]
   return(result);
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	f023 0310 	bic.w	r3, r3, #16
 8008ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	330c      	adds	r3, #12
 8008efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008efe:	61ba      	str	r2, [r7, #24]
 8008f00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f02:	6979      	ldr	r1, [r7, #20]
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e5      	bne.n	8008ede <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2220      	movs	r2, #32
 8008f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f20:	bf00      	nop
 8008f22:	3754      	adds	r7, #84	; 0x54
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f7ff feaa 	bl	8008ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f4c:	bf00      	nop
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b21      	cmp	r3, #33	; 0x21
 8008f66:	d13e      	bne.n	8008fe6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f70:	d114      	bne.n	8008f9c <UART_Transmit_IT+0x48>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d110      	bne.n	8008f9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	461a      	mov	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	1c9a      	adds	r2, r3, #2
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	621a      	str	r2, [r3, #32]
 8008f9a:	e008      	b.n	8008fae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	1c59      	adds	r1, r3, #1
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	6211      	str	r1, [r2, #32]
 8008fa6:	781a      	ldrb	r2, [r3, #0]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fb2:	b29b      	uxth	r3, r3
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10f      	bne.n	8008fe2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68da      	ldr	r2, [r3, #12]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fe0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	e000      	b.n	8008fe8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008fe6:	2302      	movs	r3, #2
  }
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68da      	ldr	r2, [r3, #12]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800900a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2220      	movs	r2, #32
 8009010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7f8 f9bd 	bl	8001394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b08c      	sub	sp, #48	; 0x30
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b22      	cmp	r3, #34	; 0x22
 8009036:	f040 80ab 	bne.w	8009190 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009042:	d117      	bne.n	8009074 <UART_Receive_IT+0x50>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d113      	bne.n	8009074 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800904c:	2300      	movs	r3, #0
 800904e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009054:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	b29b      	uxth	r3, r3
 800905e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009062:	b29a      	uxth	r2, r3
 8009064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009066:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800906c:	1c9a      	adds	r2, r3, #2
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	629a      	str	r2, [r3, #40]	; 0x28
 8009072:	e026      	b.n	80090c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009078:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800907a:	2300      	movs	r3, #0
 800907c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009086:	d007      	beq.n	8009098 <UART_Receive_IT+0x74>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <UART_Receive_IT+0x82>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d106      	bne.n	80090a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	b2da      	uxtb	r2, r3
 80090a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a2:	701a      	strb	r2, [r3, #0]
 80090a4:	e008      	b.n	80090b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090bc:	1c5a      	adds	r2, r3, #1
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	3b01      	subs	r3, #1
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	4619      	mov	r1, r3
 80090d0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d15a      	bne.n	800918c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68da      	ldr	r2, [r3, #12]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f022 0220 	bic.w	r2, r2, #32
 80090e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	695a      	ldr	r2, [r3, #20]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f022 0201 	bic.w	r2, r2, #1
 8009104:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2220      	movs	r2, #32
 800910a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009112:	2b01      	cmp	r3, #1
 8009114:	d135      	bne.n	8009182 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	330c      	adds	r3, #12
 8009122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	e853 3f00 	ldrex	r3, [r3]
 800912a:	613b      	str	r3, [r7, #16]
   return(result);
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f023 0310 	bic.w	r3, r3, #16
 8009132:	627b      	str	r3, [r7, #36]	; 0x24
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	330c      	adds	r3, #12
 800913a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800913c:	623a      	str	r2, [r7, #32]
 800913e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009140:	69f9      	ldr	r1, [r7, #28]
 8009142:	6a3a      	ldr	r2, [r7, #32]
 8009144:	e841 2300 	strex	r3, r2, [r1]
 8009148:	61bb      	str	r3, [r7, #24]
   return(result);
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1e5      	bne.n	800911c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 0310 	and.w	r3, r3, #16
 800915a:	2b10      	cmp	r3, #16
 800915c:	d10a      	bne.n	8009174 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	60fb      	str	r3, [r7, #12]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	60fb      	str	r3, [r7, #12]
 8009172:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f7ff fd9a 	bl	8008cb4 <HAL_UARTEx_RxEventCallback>
 8009180:	e002      	b.n	8009188 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff fd82 	bl	8008c8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009188:	2300      	movs	r3, #0
 800918a:	e002      	b.n	8009192 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	e000      	b.n	8009192 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009190:	2302      	movs	r3, #2
  }
}
 8009192:	4618      	mov	r0, r3
 8009194:	3730      	adds	r7, #48	; 0x30
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
	...

0800919c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800919c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091a0:	b0c0      	sub	sp, #256	; 0x100
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80091b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b8:	68d9      	ldr	r1, [r3, #12]
 80091ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	ea40 0301 	orr.w	r3, r0, r1
 80091c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ca:	689a      	ldr	r2, [r3, #8]
 80091cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	431a      	orrs	r2, r3
 80091d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	431a      	orrs	r2, r3
 80091dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80091e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091f4:	f021 010c 	bic.w	r1, r1, #12
 80091f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009202:	430b      	orrs	r3, r1
 8009204:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009216:	6999      	ldr	r1, [r3, #24]
 8009218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	ea40 0301 	orr.w	r3, r0, r1
 8009222:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	4b8f      	ldr	r3, [pc, #572]	; (8009468 <UART_SetConfig+0x2cc>)
 800922c:	429a      	cmp	r2, r3
 800922e:	d005      	beq.n	800923c <UART_SetConfig+0xa0>
 8009230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	4b8d      	ldr	r3, [pc, #564]	; (800946c <UART_SetConfig+0x2d0>)
 8009238:	429a      	cmp	r2, r3
 800923a:	d104      	bne.n	8009246 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800923c:	f7fe fccc 	bl	8007bd8 <HAL_RCC_GetPCLK2Freq>
 8009240:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009244:	e003      	b.n	800924e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009246:	f7fe fcb3 	bl	8007bb0 <HAL_RCC_GetPCLK1Freq>
 800924a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800924e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009252:	69db      	ldr	r3, [r3, #28]
 8009254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009258:	f040 810c 	bne.w	8009474 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800925c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009260:	2200      	movs	r2, #0
 8009262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009266:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800926a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800926e:	4622      	mov	r2, r4
 8009270:	462b      	mov	r3, r5
 8009272:	1891      	adds	r1, r2, r2
 8009274:	65b9      	str	r1, [r7, #88]	; 0x58
 8009276:	415b      	adcs	r3, r3
 8009278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800927a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800927e:	4621      	mov	r1, r4
 8009280:	eb12 0801 	adds.w	r8, r2, r1
 8009284:	4629      	mov	r1, r5
 8009286:	eb43 0901 	adc.w	r9, r3, r1
 800928a:	f04f 0200 	mov.w	r2, #0
 800928e:	f04f 0300 	mov.w	r3, #0
 8009292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800929a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800929e:	4690      	mov	r8, r2
 80092a0:	4699      	mov	r9, r3
 80092a2:	4623      	mov	r3, r4
 80092a4:	eb18 0303 	adds.w	r3, r8, r3
 80092a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092ac:	462b      	mov	r3, r5
 80092ae:	eb49 0303 	adc.w	r3, r9, r3
 80092b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80092c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80092c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80092ca:	460b      	mov	r3, r1
 80092cc:	18db      	adds	r3, r3, r3
 80092ce:	653b      	str	r3, [r7, #80]	; 0x50
 80092d0:	4613      	mov	r3, r2
 80092d2:	eb42 0303 	adc.w	r3, r2, r3
 80092d6:	657b      	str	r3, [r7, #84]	; 0x54
 80092d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80092dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80092e0:	f7f7 fc62 	bl	8000ba8 <__aeabi_uldivmod>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4b61      	ldr	r3, [pc, #388]	; (8009470 <UART_SetConfig+0x2d4>)
 80092ea:	fba3 2302 	umull	r2, r3, r3, r2
 80092ee:	095b      	lsrs	r3, r3, #5
 80092f0:	011c      	lsls	r4, r3, #4
 80092f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092f6:	2200      	movs	r2, #0
 80092f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009300:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009304:	4642      	mov	r2, r8
 8009306:	464b      	mov	r3, r9
 8009308:	1891      	adds	r1, r2, r2
 800930a:	64b9      	str	r1, [r7, #72]	; 0x48
 800930c:	415b      	adcs	r3, r3
 800930e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009310:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009314:	4641      	mov	r1, r8
 8009316:	eb12 0a01 	adds.w	sl, r2, r1
 800931a:	4649      	mov	r1, r9
 800931c:	eb43 0b01 	adc.w	fp, r3, r1
 8009320:	f04f 0200 	mov.w	r2, #0
 8009324:	f04f 0300 	mov.w	r3, #0
 8009328:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800932c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009334:	4692      	mov	sl, r2
 8009336:	469b      	mov	fp, r3
 8009338:	4643      	mov	r3, r8
 800933a:	eb1a 0303 	adds.w	r3, sl, r3
 800933e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009342:	464b      	mov	r3, r9
 8009344:	eb4b 0303 	adc.w	r3, fp, r3
 8009348:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800934c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009358:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800935c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009360:	460b      	mov	r3, r1
 8009362:	18db      	adds	r3, r3, r3
 8009364:	643b      	str	r3, [r7, #64]	; 0x40
 8009366:	4613      	mov	r3, r2
 8009368:	eb42 0303 	adc.w	r3, r2, r3
 800936c:	647b      	str	r3, [r7, #68]	; 0x44
 800936e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009372:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009376:	f7f7 fc17 	bl	8000ba8 <__aeabi_uldivmod>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4611      	mov	r1, r2
 8009380:	4b3b      	ldr	r3, [pc, #236]	; (8009470 <UART_SetConfig+0x2d4>)
 8009382:	fba3 2301 	umull	r2, r3, r3, r1
 8009386:	095b      	lsrs	r3, r3, #5
 8009388:	2264      	movs	r2, #100	; 0x64
 800938a:	fb02 f303 	mul.w	r3, r2, r3
 800938e:	1acb      	subs	r3, r1, r3
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009396:	4b36      	ldr	r3, [pc, #216]	; (8009470 <UART_SetConfig+0x2d4>)
 8009398:	fba3 2302 	umull	r2, r3, r3, r2
 800939c:	095b      	lsrs	r3, r3, #5
 800939e:	005b      	lsls	r3, r3, #1
 80093a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80093a4:	441c      	add	r4, r3
 80093a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093aa:	2200      	movs	r2, #0
 80093ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80093b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80093b8:	4642      	mov	r2, r8
 80093ba:	464b      	mov	r3, r9
 80093bc:	1891      	adds	r1, r2, r2
 80093be:	63b9      	str	r1, [r7, #56]	; 0x38
 80093c0:	415b      	adcs	r3, r3
 80093c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093c8:	4641      	mov	r1, r8
 80093ca:	1851      	adds	r1, r2, r1
 80093cc:	6339      	str	r1, [r7, #48]	; 0x30
 80093ce:	4649      	mov	r1, r9
 80093d0:	414b      	adcs	r3, r1
 80093d2:	637b      	str	r3, [r7, #52]	; 0x34
 80093d4:	f04f 0200 	mov.w	r2, #0
 80093d8:	f04f 0300 	mov.w	r3, #0
 80093dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80093e0:	4659      	mov	r1, fp
 80093e2:	00cb      	lsls	r3, r1, #3
 80093e4:	4651      	mov	r1, sl
 80093e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093ea:	4651      	mov	r1, sl
 80093ec:	00ca      	lsls	r2, r1, #3
 80093ee:	4610      	mov	r0, r2
 80093f0:	4619      	mov	r1, r3
 80093f2:	4603      	mov	r3, r0
 80093f4:	4642      	mov	r2, r8
 80093f6:	189b      	adds	r3, r3, r2
 80093f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093fc:	464b      	mov	r3, r9
 80093fe:	460a      	mov	r2, r1
 8009400:	eb42 0303 	adc.w	r3, r2, r3
 8009404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009414:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009418:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800941c:	460b      	mov	r3, r1
 800941e:	18db      	adds	r3, r3, r3
 8009420:	62bb      	str	r3, [r7, #40]	; 0x28
 8009422:	4613      	mov	r3, r2
 8009424:	eb42 0303 	adc.w	r3, r2, r3
 8009428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800942a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800942e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009432:	f7f7 fbb9 	bl	8000ba8 <__aeabi_uldivmod>
 8009436:	4602      	mov	r2, r0
 8009438:	460b      	mov	r3, r1
 800943a:	4b0d      	ldr	r3, [pc, #52]	; (8009470 <UART_SetConfig+0x2d4>)
 800943c:	fba3 1302 	umull	r1, r3, r3, r2
 8009440:	095b      	lsrs	r3, r3, #5
 8009442:	2164      	movs	r1, #100	; 0x64
 8009444:	fb01 f303 	mul.w	r3, r1, r3
 8009448:	1ad3      	subs	r3, r2, r3
 800944a:	00db      	lsls	r3, r3, #3
 800944c:	3332      	adds	r3, #50	; 0x32
 800944e:	4a08      	ldr	r2, [pc, #32]	; (8009470 <UART_SetConfig+0x2d4>)
 8009450:	fba2 2303 	umull	r2, r3, r2, r3
 8009454:	095b      	lsrs	r3, r3, #5
 8009456:	f003 0207 	and.w	r2, r3, #7
 800945a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4422      	add	r2, r4
 8009462:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009464:	e105      	b.n	8009672 <UART_SetConfig+0x4d6>
 8009466:	bf00      	nop
 8009468:	40011000 	.word	0x40011000
 800946c:	40011400 	.word	0x40011400
 8009470:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009478:	2200      	movs	r2, #0
 800947a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800947e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009482:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009486:	4642      	mov	r2, r8
 8009488:	464b      	mov	r3, r9
 800948a:	1891      	adds	r1, r2, r2
 800948c:	6239      	str	r1, [r7, #32]
 800948e:	415b      	adcs	r3, r3
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
 8009492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009496:	4641      	mov	r1, r8
 8009498:	1854      	adds	r4, r2, r1
 800949a:	4649      	mov	r1, r9
 800949c:	eb43 0501 	adc.w	r5, r3, r1
 80094a0:	f04f 0200 	mov.w	r2, #0
 80094a4:	f04f 0300 	mov.w	r3, #0
 80094a8:	00eb      	lsls	r3, r5, #3
 80094aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80094ae:	00e2      	lsls	r2, r4, #3
 80094b0:	4614      	mov	r4, r2
 80094b2:	461d      	mov	r5, r3
 80094b4:	4643      	mov	r3, r8
 80094b6:	18e3      	adds	r3, r4, r3
 80094b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80094bc:	464b      	mov	r3, r9
 80094be:	eb45 0303 	adc.w	r3, r5, r3
 80094c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80094c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80094d6:	f04f 0200 	mov.w	r2, #0
 80094da:	f04f 0300 	mov.w	r3, #0
 80094de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80094e2:	4629      	mov	r1, r5
 80094e4:	008b      	lsls	r3, r1, #2
 80094e6:	4621      	mov	r1, r4
 80094e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094ec:	4621      	mov	r1, r4
 80094ee:	008a      	lsls	r2, r1, #2
 80094f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094f4:	f7f7 fb58 	bl	8000ba8 <__aeabi_uldivmod>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4b60      	ldr	r3, [pc, #384]	; (8009680 <UART_SetConfig+0x4e4>)
 80094fe:	fba3 2302 	umull	r2, r3, r3, r2
 8009502:	095b      	lsrs	r3, r3, #5
 8009504:	011c      	lsls	r4, r3, #4
 8009506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800950a:	2200      	movs	r2, #0
 800950c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009510:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009514:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009518:	4642      	mov	r2, r8
 800951a:	464b      	mov	r3, r9
 800951c:	1891      	adds	r1, r2, r2
 800951e:	61b9      	str	r1, [r7, #24]
 8009520:	415b      	adcs	r3, r3
 8009522:	61fb      	str	r3, [r7, #28]
 8009524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009528:	4641      	mov	r1, r8
 800952a:	1851      	adds	r1, r2, r1
 800952c:	6139      	str	r1, [r7, #16]
 800952e:	4649      	mov	r1, r9
 8009530:	414b      	adcs	r3, r1
 8009532:	617b      	str	r3, [r7, #20]
 8009534:	f04f 0200 	mov.w	r2, #0
 8009538:	f04f 0300 	mov.w	r3, #0
 800953c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009540:	4659      	mov	r1, fp
 8009542:	00cb      	lsls	r3, r1, #3
 8009544:	4651      	mov	r1, sl
 8009546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800954a:	4651      	mov	r1, sl
 800954c:	00ca      	lsls	r2, r1, #3
 800954e:	4610      	mov	r0, r2
 8009550:	4619      	mov	r1, r3
 8009552:	4603      	mov	r3, r0
 8009554:	4642      	mov	r2, r8
 8009556:	189b      	adds	r3, r3, r2
 8009558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800955c:	464b      	mov	r3, r9
 800955e:	460a      	mov	r2, r1
 8009560:	eb42 0303 	adc.w	r3, r2, r3
 8009564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	67bb      	str	r3, [r7, #120]	; 0x78
 8009572:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009574:	f04f 0200 	mov.w	r2, #0
 8009578:	f04f 0300 	mov.w	r3, #0
 800957c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009580:	4649      	mov	r1, r9
 8009582:	008b      	lsls	r3, r1, #2
 8009584:	4641      	mov	r1, r8
 8009586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800958a:	4641      	mov	r1, r8
 800958c:	008a      	lsls	r2, r1, #2
 800958e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009592:	f7f7 fb09 	bl	8000ba8 <__aeabi_uldivmod>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4b39      	ldr	r3, [pc, #228]	; (8009680 <UART_SetConfig+0x4e4>)
 800959c:	fba3 1302 	umull	r1, r3, r3, r2
 80095a0:	095b      	lsrs	r3, r3, #5
 80095a2:	2164      	movs	r1, #100	; 0x64
 80095a4:	fb01 f303 	mul.w	r3, r1, r3
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	011b      	lsls	r3, r3, #4
 80095ac:	3332      	adds	r3, #50	; 0x32
 80095ae:	4a34      	ldr	r2, [pc, #208]	; (8009680 <UART_SetConfig+0x4e4>)
 80095b0:	fba2 2303 	umull	r2, r3, r2, r3
 80095b4:	095b      	lsrs	r3, r3, #5
 80095b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095ba:	441c      	add	r4, r3
 80095bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095c0:	2200      	movs	r2, #0
 80095c2:	673b      	str	r3, [r7, #112]	; 0x70
 80095c4:	677a      	str	r2, [r7, #116]	; 0x74
 80095c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80095ca:	4642      	mov	r2, r8
 80095cc:	464b      	mov	r3, r9
 80095ce:	1891      	adds	r1, r2, r2
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	415b      	adcs	r3, r3
 80095d4:	60fb      	str	r3, [r7, #12]
 80095d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095da:	4641      	mov	r1, r8
 80095dc:	1851      	adds	r1, r2, r1
 80095de:	6039      	str	r1, [r7, #0]
 80095e0:	4649      	mov	r1, r9
 80095e2:	414b      	adcs	r3, r1
 80095e4:	607b      	str	r3, [r7, #4]
 80095e6:	f04f 0200 	mov.w	r2, #0
 80095ea:	f04f 0300 	mov.w	r3, #0
 80095ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095f2:	4659      	mov	r1, fp
 80095f4:	00cb      	lsls	r3, r1, #3
 80095f6:	4651      	mov	r1, sl
 80095f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095fc:	4651      	mov	r1, sl
 80095fe:	00ca      	lsls	r2, r1, #3
 8009600:	4610      	mov	r0, r2
 8009602:	4619      	mov	r1, r3
 8009604:	4603      	mov	r3, r0
 8009606:	4642      	mov	r2, r8
 8009608:	189b      	adds	r3, r3, r2
 800960a:	66bb      	str	r3, [r7, #104]	; 0x68
 800960c:	464b      	mov	r3, r9
 800960e:	460a      	mov	r2, r1
 8009610:	eb42 0303 	adc.w	r3, r2, r3
 8009614:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	663b      	str	r3, [r7, #96]	; 0x60
 8009620:	667a      	str	r2, [r7, #100]	; 0x64
 8009622:	f04f 0200 	mov.w	r2, #0
 8009626:	f04f 0300 	mov.w	r3, #0
 800962a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800962e:	4649      	mov	r1, r9
 8009630:	008b      	lsls	r3, r1, #2
 8009632:	4641      	mov	r1, r8
 8009634:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009638:	4641      	mov	r1, r8
 800963a:	008a      	lsls	r2, r1, #2
 800963c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009640:	f7f7 fab2 	bl	8000ba8 <__aeabi_uldivmod>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4b0d      	ldr	r3, [pc, #52]	; (8009680 <UART_SetConfig+0x4e4>)
 800964a:	fba3 1302 	umull	r1, r3, r3, r2
 800964e:	095b      	lsrs	r3, r3, #5
 8009650:	2164      	movs	r1, #100	; 0x64
 8009652:	fb01 f303 	mul.w	r3, r1, r3
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	011b      	lsls	r3, r3, #4
 800965a:	3332      	adds	r3, #50	; 0x32
 800965c:	4a08      	ldr	r2, [pc, #32]	; (8009680 <UART_SetConfig+0x4e4>)
 800965e:	fba2 2303 	umull	r2, r3, r2, r3
 8009662:	095b      	lsrs	r3, r3, #5
 8009664:	f003 020f 	and.w	r2, r3, #15
 8009668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4422      	add	r2, r4
 8009670:	609a      	str	r2, [r3, #8]
}
 8009672:	bf00      	nop
 8009674:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009678:	46bd      	mov	sp, r7
 800967a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800967e:	bf00      	nop
 8009680:	51eb851f 	.word	0x51eb851f

08009684 <__errno>:
 8009684:	4b01      	ldr	r3, [pc, #4]	; (800968c <__errno+0x8>)
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	2000000c 	.word	0x2000000c

08009690 <__libc_init_array>:
 8009690:	b570      	push	{r4, r5, r6, lr}
 8009692:	4d0d      	ldr	r5, [pc, #52]	; (80096c8 <__libc_init_array+0x38>)
 8009694:	4c0d      	ldr	r4, [pc, #52]	; (80096cc <__libc_init_array+0x3c>)
 8009696:	1b64      	subs	r4, r4, r5
 8009698:	10a4      	asrs	r4, r4, #2
 800969a:	2600      	movs	r6, #0
 800969c:	42a6      	cmp	r6, r4
 800969e:	d109      	bne.n	80096b4 <__libc_init_array+0x24>
 80096a0:	4d0b      	ldr	r5, [pc, #44]	; (80096d0 <__libc_init_array+0x40>)
 80096a2:	4c0c      	ldr	r4, [pc, #48]	; (80096d4 <__libc_init_array+0x44>)
 80096a4:	f002 ff04 	bl	800c4b0 <_init>
 80096a8:	1b64      	subs	r4, r4, r5
 80096aa:	10a4      	asrs	r4, r4, #2
 80096ac:	2600      	movs	r6, #0
 80096ae:	42a6      	cmp	r6, r4
 80096b0:	d105      	bne.n	80096be <__libc_init_array+0x2e>
 80096b2:	bd70      	pop	{r4, r5, r6, pc}
 80096b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096b8:	4798      	blx	r3
 80096ba:	3601      	adds	r6, #1
 80096bc:	e7ee      	b.n	800969c <__libc_init_array+0xc>
 80096be:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c2:	4798      	blx	r3
 80096c4:	3601      	adds	r6, #1
 80096c6:	e7f2      	b.n	80096ae <__libc_init_array+0x1e>
 80096c8:	0800c8ec 	.word	0x0800c8ec
 80096cc:	0800c8ec 	.word	0x0800c8ec
 80096d0:	0800c8ec 	.word	0x0800c8ec
 80096d4:	0800c8f0 	.word	0x0800c8f0

080096d8 <memset>:
 80096d8:	4402      	add	r2, r0
 80096da:	4603      	mov	r3, r0
 80096dc:	4293      	cmp	r3, r2
 80096de:	d100      	bne.n	80096e2 <memset+0xa>
 80096e0:	4770      	bx	lr
 80096e2:	f803 1b01 	strb.w	r1, [r3], #1
 80096e6:	e7f9      	b.n	80096dc <memset+0x4>

080096e8 <__cvt>:
 80096e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096ec:	ec55 4b10 	vmov	r4, r5, d0
 80096f0:	2d00      	cmp	r5, #0
 80096f2:	460e      	mov	r6, r1
 80096f4:	4619      	mov	r1, r3
 80096f6:	462b      	mov	r3, r5
 80096f8:	bfbb      	ittet	lt
 80096fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80096fe:	461d      	movlt	r5, r3
 8009700:	2300      	movge	r3, #0
 8009702:	232d      	movlt	r3, #45	; 0x2d
 8009704:	700b      	strb	r3, [r1, #0]
 8009706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009708:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800970c:	4691      	mov	r9, r2
 800970e:	f023 0820 	bic.w	r8, r3, #32
 8009712:	bfbc      	itt	lt
 8009714:	4622      	movlt	r2, r4
 8009716:	4614      	movlt	r4, r2
 8009718:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800971c:	d005      	beq.n	800972a <__cvt+0x42>
 800971e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009722:	d100      	bne.n	8009726 <__cvt+0x3e>
 8009724:	3601      	adds	r6, #1
 8009726:	2102      	movs	r1, #2
 8009728:	e000      	b.n	800972c <__cvt+0x44>
 800972a:	2103      	movs	r1, #3
 800972c:	ab03      	add	r3, sp, #12
 800972e:	9301      	str	r3, [sp, #4]
 8009730:	ab02      	add	r3, sp, #8
 8009732:	9300      	str	r3, [sp, #0]
 8009734:	ec45 4b10 	vmov	d0, r4, r5
 8009738:	4653      	mov	r3, sl
 800973a:	4632      	mov	r2, r6
 800973c:	f000 fcec 	bl	800a118 <_dtoa_r>
 8009740:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009744:	4607      	mov	r7, r0
 8009746:	d102      	bne.n	800974e <__cvt+0x66>
 8009748:	f019 0f01 	tst.w	r9, #1
 800974c:	d022      	beq.n	8009794 <__cvt+0xac>
 800974e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009752:	eb07 0906 	add.w	r9, r7, r6
 8009756:	d110      	bne.n	800977a <__cvt+0x92>
 8009758:	783b      	ldrb	r3, [r7, #0]
 800975a:	2b30      	cmp	r3, #48	; 0x30
 800975c:	d10a      	bne.n	8009774 <__cvt+0x8c>
 800975e:	2200      	movs	r2, #0
 8009760:	2300      	movs	r3, #0
 8009762:	4620      	mov	r0, r4
 8009764:	4629      	mov	r1, r5
 8009766:	f7f7 f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 800976a:	b918      	cbnz	r0, 8009774 <__cvt+0x8c>
 800976c:	f1c6 0601 	rsb	r6, r6, #1
 8009770:	f8ca 6000 	str.w	r6, [sl]
 8009774:	f8da 3000 	ldr.w	r3, [sl]
 8009778:	4499      	add	r9, r3
 800977a:	2200      	movs	r2, #0
 800977c:	2300      	movs	r3, #0
 800977e:	4620      	mov	r0, r4
 8009780:	4629      	mov	r1, r5
 8009782:	f7f7 f9a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009786:	b108      	cbz	r0, 800978c <__cvt+0xa4>
 8009788:	f8cd 900c 	str.w	r9, [sp, #12]
 800978c:	2230      	movs	r2, #48	; 0x30
 800978e:	9b03      	ldr	r3, [sp, #12]
 8009790:	454b      	cmp	r3, r9
 8009792:	d307      	bcc.n	80097a4 <__cvt+0xbc>
 8009794:	9b03      	ldr	r3, [sp, #12]
 8009796:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009798:	1bdb      	subs	r3, r3, r7
 800979a:	4638      	mov	r0, r7
 800979c:	6013      	str	r3, [r2, #0]
 800979e:	b004      	add	sp, #16
 80097a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097a4:	1c59      	adds	r1, r3, #1
 80097a6:	9103      	str	r1, [sp, #12]
 80097a8:	701a      	strb	r2, [r3, #0]
 80097aa:	e7f0      	b.n	800978e <__cvt+0xa6>

080097ac <__exponent>:
 80097ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097ae:	4603      	mov	r3, r0
 80097b0:	2900      	cmp	r1, #0
 80097b2:	bfb8      	it	lt
 80097b4:	4249      	neglt	r1, r1
 80097b6:	f803 2b02 	strb.w	r2, [r3], #2
 80097ba:	bfb4      	ite	lt
 80097bc:	222d      	movlt	r2, #45	; 0x2d
 80097be:	222b      	movge	r2, #43	; 0x2b
 80097c0:	2909      	cmp	r1, #9
 80097c2:	7042      	strb	r2, [r0, #1]
 80097c4:	dd2a      	ble.n	800981c <__exponent+0x70>
 80097c6:	f10d 0407 	add.w	r4, sp, #7
 80097ca:	46a4      	mov	ip, r4
 80097cc:	270a      	movs	r7, #10
 80097ce:	46a6      	mov	lr, r4
 80097d0:	460a      	mov	r2, r1
 80097d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80097d6:	fb07 1516 	mls	r5, r7, r6, r1
 80097da:	3530      	adds	r5, #48	; 0x30
 80097dc:	2a63      	cmp	r2, #99	; 0x63
 80097de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80097e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80097e6:	4631      	mov	r1, r6
 80097e8:	dcf1      	bgt.n	80097ce <__exponent+0x22>
 80097ea:	3130      	adds	r1, #48	; 0x30
 80097ec:	f1ae 0502 	sub.w	r5, lr, #2
 80097f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80097f4:	1c44      	adds	r4, r0, #1
 80097f6:	4629      	mov	r1, r5
 80097f8:	4561      	cmp	r1, ip
 80097fa:	d30a      	bcc.n	8009812 <__exponent+0x66>
 80097fc:	f10d 0209 	add.w	r2, sp, #9
 8009800:	eba2 020e 	sub.w	r2, r2, lr
 8009804:	4565      	cmp	r5, ip
 8009806:	bf88      	it	hi
 8009808:	2200      	movhi	r2, #0
 800980a:	4413      	add	r3, r2
 800980c:	1a18      	subs	r0, r3, r0
 800980e:	b003      	add	sp, #12
 8009810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009816:	f804 2f01 	strb.w	r2, [r4, #1]!
 800981a:	e7ed      	b.n	80097f8 <__exponent+0x4c>
 800981c:	2330      	movs	r3, #48	; 0x30
 800981e:	3130      	adds	r1, #48	; 0x30
 8009820:	7083      	strb	r3, [r0, #2]
 8009822:	70c1      	strb	r1, [r0, #3]
 8009824:	1d03      	adds	r3, r0, #4
 8009826:	e7f1      	b.n	800980c <__exponent+0x60>

08009828 <_printf_float>:
 8009828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	ed2d 8b02 	vpush	{d8}
 8009830:	b08d      	sub	sp, #52	; 0x34
 8009832:	460c      	mov	r4, r1
 8009834:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009838:	4616      	mov	r6, r2
 800983a:	461f      	mov	r7, r3
 800983c:	4605      	mov	r5, r0
 800983e:	f001 fa59 	bl	800acf4 <_localeconv_r>
 8009842:	f8d0 a000 	ldr.w	sl, [r0]
 8009846:	4650      	mov	r0, sl
 8009848:	f7f6 fcc2 	bl	80001d0 <strlen>
 800984c:	2300      	movs	r3, #0
 800984e:	930a      	str	r3, [sp, #40]	; 0x28
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	9305      	str	r3, [sp, #20]
 8009854:	f8d8 3000 	ldr.w	r3, [r8]
 8009858:	f894 b018 	ldrb.w	fp, [r4, #24]
 800985c:	3307      	adds	r3, #7
 800985e:	f023 0307 	bic.w	r3, r3, #7
 8009862:	f103 0208 	add.w	r2, r3, #8
 8009866:	f8c8 2000 	str.w	r2, [r8]
 800986a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009872:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009876:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800987a:	9307      	str	r3, [sp, #28]
 800987c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009880:	ee08 0a10 	vmov	s16, r0
 8009884:	4b9f      	ldr	r3, [pc, #636]	; (8009b04 <_printf_float+0x2dc>)
 8009886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800988a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800988e:	f7f7 f94d 	bl	8000b2c <__aeabi_dcmpun>
 8009892:	bb88      	cbnz	r0, 80098f8 <_printf_float+0xd0>
 8009894:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009898:	4b9a      	ldr	r3, [pc, #616]	; (8009b04 <_printf_float+0x2dc>)
 800989a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800989e:	f7f7 f927 	bl	8000af0 <__aeabi_dcmple>
 80098a2:	bb48      	cbnz	r0, 80098f8 <_printf_float+0xd0>
 80098a4:	2200      	movs	r2, #0
 80098a6:	2300      	movs	r3, #0
 80098a8:	4640      	mov	r0, r8
 80098aa:	4649      	mov	r1, r9
 80098ac:	f7f7 f916 	bl	8000adc <__aeabi_dcmplt>
 80098b0:	b110      	cbz	r0, 80098b8 <_printf_float+0x90>
 80098b2:	232d      	movs	r3, #45	; 0x2d
 80098b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098b8:	4b93      	ldr	r3, [pc, #588]	; (8009b08 <_printf_float+0x2e0>)
 80098ba:	4894      	ldr	r0, [pc, #592]	; (8009b0c <_printf_float+0x2e4>)
 80098bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80098c0:	bf94      	ite	ls
 80098c2:	4698      	movls	r8, r3
 80098c4:	4680      	movhi	r8, r0
 80098c6:	2303      	movs	r3, #3
 80098c8:	6123      	str	r3, [r4, #16]
 80098ca:	9b05      	ldr	r3, [sp, #20]
 80098cc:	f023 0204 	bic.w	r2, r3, #4
 80098d0:	6022      	str	r2, [r4, #0]
 80098d2:	f04f 0900 	mov.w	r9, #0
 80098d6:	9700      	str	r7, [sp, #0]
 80098d8:	4633      	mov	r3, r6
 80098da:	aa0b      	add	r2, sp, #44	; 0x2c
 80098dc:	4621      	mov	r1, r4
 80098de:	4628      	mov	r0, r5
 80098e0:	f000 f9d8 	bl	8009c94 <_printf_common>
 80098e4:	3001      	adds	r0, #1
 80098e6:	f040 8090 	bne.w	8009a0a <_printf_float+0x1e2>
 80098ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098ee:	b00d      	add	sp, #52	; 0x34
 80098f0:	ecbd 8b02 	vpop	{d8}
 80098f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f8:	4642      	mov	r2, r8
 80098fa:	464b      	mov	r3, r9
 80098fc:	4640      	mov	r0, r8
 80098fe:	4649      	mov	r1, r9
 8009900:	f7f7 f914 	bl	8000b2c <__aeabi_dcmpun>
 8009904:	b140      	cbz	r0, 8009918 <_printf_float+0xf0>
 8009906:	464b      	mov	r3, r9
 8009908:	2b00      	cmp	r3, #0
 800990a:	bfbc      	itt	lt
 800990c:	232d      	movlt	r3, #45	; 0x2d
 800990e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009912:	487f      	ldr	r0, [pc, #508]	; (8009b10 <_printf_float+0x2e8>)
 8009914:	4b7f      	ldr	r3, [pc, #508]	; (8009b14 <_printf_float+0x2ec>)
 8009916:	e7d1      	b.n	80098bc <_printf_float+0x94>
 8009918:	6863      	ldr	r3, [r4, #4]
 800991a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800991e:	9206      	str	r2, [sp, #24]
 8009920:	1c5a      	adds	r2, r3, #1
 8009922:	d13f      	bne.n	80099a4 <_printf_float+0x17c>
 8009924:	2306      	movs	r3, #6
 8009926:	6063      	str	r3, [r4, #4]
 8009928:	9b05      	ldr	r3, [sp, #20]
 800992a:	6861      	ldr	r1, [r4, #4]
 800992c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009930:	2300      	movs	r3, #0
 8009932:	9303      	str	r3, [sp, #12]
 8009934:	ab0a      	add	r3, sp, #40	; 0x28
 8009936:	e9cd b301 	strd	fp, r3, [sp, #4]
 800993a:	ab09      	add	r3, sp, #36	; 0x24
 800993c:	ec49 8b10 	vmov	d0, r8, r9
 8009940:	9300      	str	r3, [sp, #0]
 8009942:	6022      	str	r2, [r4, #0]
 8009944:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009948:	4628      	mov	r0, r5
 800994a:	f7ff fecd 	bl	80096e8 <__cvt>
 800994e:	9b06      	ldr	r3, [sp, #24]
 8009950:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009952:	2b47      	cmp	r3, #71	; 0x47
 8009954:	4680      	mov	r8, r0
 8009956:	d108      	bne.n	800996a <_printf_float+0x142>
 8009958:	1cc8      	adds	r0, r1, #3
 800995a:	db02      	blt.n	8009962 <_printf_float+0x13a>
 800995c:	6863      	ldr	r3, [r4, #4]
 800995e:	4299      	cmp	r1, r3
 8009960:	dd41      	ble.n	80099e6 <_printf_float+0x1be>
 8009962:	f1ab 0b02 	sub.w	fp, fp, #2
 8009966:	fa5f fb8b 	uxtb.w	fp, fp
 800996a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800996e:	d820      	bhi.n	80099b2 <_printf_float+0x18a>
 8009970:	3901      	subs	r1, #1
 8009972:	465a      	mov	r2, fp
 8009974:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009978:	9109      	str	r1, [sp, #36]	; 0x24
 800997a:	f7ff ff17 	bl	80097ac <__exponent>
 800997e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009980:	1813      	adds	r3, r2, r0
 8009982:	2a01      	cmp	r2, #1
 8009984:	4681      	mov	r9, r0
 8009986:	6123      	str	r3, [r4, #16]
 8009988:	dc02      	bgt.n	8009990 <_printf_float+0x168>
 800998a:	6822      	ldr	r2, [r4, #0]
 800998c:	07d2      	lsls	r2, r2, #31
 800998e:	d501      	bpl.n	8009994 <_printf_float+0x16c>
 8009990:	3301      	adds	r3, #1
 8009992:	6123      	str	r3, [r4, #16]
 8009994:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009998:	2b00      	cmp	r3, #0
 800999a:	d09c      	beq.n	80098d6 <_printf_float+0xae>
 800999c:	232d      	movs	r3, #45	; 0x2d
 800999e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099a2:	e798      	b.n	80098d6 <_printf_float+0xae>
 80099a4:	9a06      	ldr	r2, [sp, #24]
 80099a6:	2a47      	cmp	r2, #71	; 0x47
 80099a8:	d1be      	bne.n	8009928 <_printf_float+0x100>
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1bc      	bne.n	8009928 <_printf_float+0x100>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e7b9      	b.n	8009926 <_printf_float+0xfe>
 80099b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80099b6:	d118      	bne.n	80099ea <_printf_float+0x1c2>
 80099b8:	2900      	cmp	r1, #0
 80099ba:	6863      	ldr	r3, [r4, #4]
 80099bc:	dd0b      	ble.n	80099d6 <_printf_float+0x1ae>
 80099be:	6121      	str	r1, [r4, #16]
 80099c0:	b913      	cbnz	r3, 80099c8 <_printf_float+0x1a0>
 80099c2:	6822      	ldr	r2, [r4, #0]
 80099c4:	07d0      	lsls	r0, r2, #31
 80099c6:	d502      	bpl.n	80099ce <_printf_float+0x1a6>
 80099c8:	3301      	adds	r3, #1
 80099ca:	440b      	add	r3, r1
 80099cc:	6123      	str	r3, [r4, #16]
 80099ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80099d0:	f04f 0900 	mov.w	r9, #0
 80099d4:	e7de      	b.n	8009994 <_printf_float+0x16c>
 80099d6:	b913      	cbnz	r3, 80099de <_printf_float+0x1b6>
 80099d8:	6822      	ldr	r2, [r4, #0]
 80099da:	07d2      	lsls	r2, r2, #31
 80099dc:	d501      	bpl.n	80099e2 <_printf_float+0x1ba>
 80099de:	3302      	adds	r3, #2
 80099e0:	e7f4      	b.n	80099cc <_printf_float+0x1a4>
 80099e2:	2301      	movs	r3, #1
 80099e4:	e7f2      	b.n	80099cc <_printf_float+0x1a4>
 80099e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80099ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ec:	4299      	cmp	r1, r3
 80099ee:	db05      	blt.n	80099fc <_printf_float+0x1d4>
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	6121      	str	r1, [r4, #16]
 80099f4:	07d8      	lsls	r0, r3, #31
 80099f6:	d5ea      	bpl.n	80099ce <_printf_float+0x1a6>
 80099f8:	1c4b      	adds	r3, r1, #1
 80099fa:	e7e7      	b.n	80099cc <_printf_float+0x1a4>
 80099fc:	2900      	cmp	r1, #0
 80099fe:	bfd4      	ite	le
 8009a00:	f1c1 0202 	rsble	r2, r1, #2
 8009a04:	2201      	movgt	r2, #1
 8009a06:	4413      	add	r3, r2
 8009a08:	e7e0      	b.n	80099cc <_printf_float+0x1a4>
 8009a0a:	6823      	ldr	r3, [r4, #0]
 8009a0c:	055a      	lsls	r2, r3, #21
 8009a0e:	d407      	bmi.n	8009a20 <_printf_float+0x1f8>
 8009a10:	6923      	ldr	r3, [r4, #16]
 8009a12:	4642      	mov	r2, r8
 8009a14:	4631      	mov	r1, r6
 8009a16:	4628      	mov	r0, r5
 8009a18:	47b8      	blx	r7
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	d12c      	bne.n	8009a78 <_printf_float+0x250>
 8009a1e:	e764      	b.n	80098ea <_printf_float+0xc2>
 8009a20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a24:	f240 80e0 	bls.w	8009be8 <_printf_float+0x3c0>
 8009a28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	2300      	movs	r3, #0
 8009a30:	f7f7 f84a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	d034      	beq.n	8009aa2 <_printf_float+0x27a>
 8009a38:	4a37      	ldr	r2, [pc, #220]	; (8009b18 <_printf_float+0x2f0>)
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	4631      	mov	r1, r6
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47b8      	blx	r7
 8009a42:	3001      	adds	r0, #1
 8009a44:	f43f af51 	beq.w	80098ea <_printf_float+0xc2>
 8009a48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	db02      	blt.n	8009a56 <_printf_float+0x22e>
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	07d8      	lsls	r0, r3, #31
 8009a54:	d510      	bpl.n	8009a78 <_printf_float+0x250>
 8009a56:	ee18 3a10 	vmov	r3, s16
 8009a5a:	4652      	mov	r2, sl
 8009a5c:	4631      	mov	r1, r6
 8009a5e:	4628      	mov	r0, r5
 8009a60:	47b8      	blx	r7
 8009a62:	3001      	adds	r0, #1
 8009a64:	f43f af41 	beq.w	80098ea <_printf_float+0xc2>
 8009a68:	f04f 0800 	mov.w	r8, #0
 8009a6c:	f104 091a 	add.w	r9, r4, #26
 8009a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a72:	3b01      	subs	r3, #1
 8009a74:	4543      	cmp	r3, r8
 8009a76:	dc09      	bgt.n	8009a8c <_printf_float+0x264>
 8009a78:	6823      	ldr	r3, [r4, #0]
 8009a7a:	079b      	lsls	r3, r3, #30
 8009a7c:	f100 8105 	bmi.w	8009c8a <_printf_float+0x462>
 8009a80:	68e0      	ldr	r0, [r4, #12]
 8009a82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a84:	4298      	cmp	r0, r3
 8009a86:	bfb8      	it	lt
 8009a88:	4618      	movlt	r0, r3
 8009a8a:	e730      	b.n	80098ee <_printf_float+0xc6>
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	464a      	mov	r2, r9
 8009a90:	4631      	mov	r1, r6
 8009a92:	4628      	mov	r0, r5
 8009a94:	47b8      	blx	r7
 8009a96:	3001      	adds	r0, #1
 8009a98:	f43f af27 	beq.w	80098ea <_printf_float+0xc2>
 8009a9c:	f108 0801 	add.w	r8, r8, #1
 8009aa0:	e7e6      	b.n	8009a70 <_printf_float+0x248>
 8009aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	dc39      	bgt.n	8009b1c <_printf_float+0x2f4>
 8009aa8:	4a1b      	ldr	r2, [pc, #108]	; (8009b18 <_printf_float+0x2f0>)
 8009aaa:	2301      	movs	r3, #1
 8009aac:	4631      	mov	r1, r6
 8009aae:	4628      	mov	r0, r5
 8009ab0:	47b8      	blx	r7
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	f43f af19 	beq.w	80098ea <_printf_float+0xc2>
 8009ab8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009abc:	4313      	orrs	r3, r2
 8009abe:	d102      	bne.n	8009ac6 <_printf_float+0x29e>
 8009ac0:	6823      	ldr	r3, [r4, #0]
 8009ac2:	07d9      	lsls	r1, r3, #31
 8009ac4:	d5d8      	bpl.n	8009a78 <_printf_float+0x250>
 8009ac6:	ee18 3a10 	vmov	r3, s16
 8009aca:	4652      	mov	r2, sl
 8009acc:	4631      	mov	r1, r6
 8009ace:	4628      	mov	r0, r5
 8009ad0:	47b8      	blx	r7
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	f43f af09 	beq.w	80098ea <_printf_float+0xc2>
 8009ad8:	f04f 0900 	mov.w	r9, #0
 8009adc:	f104 0a1a 	add.w	sl, r4, #26
 8009ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ae2:	425b      	negs	r3, r3
 8009ae4:	454b      	cmp	r3, r9
 8009ae6:	dc01      	bgt.n	8009aec <_printf_float+0x2c4>
 8009ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aea:	e792      	b.n	8009a12 <_printf_float+0x1ea>
 8009aec:	2301      	movs	r3, #1
 8009aee:	4652      	mov	r2, sl
 8009af0:	4631      	mov	r1, r6
 8009af2:	4628      	mov	r0, r5
 8009af4:	47b8      	blx	r7
 8009af6:	3001      	adds	r0, #1
 8009af8:	f43f aef7 	beq.w	80098ea <_printf_float+0xc2>
 8009afc:	f109 0901 	add.w	r9, r9, #1
 8009b00:	e7ee      	b.n	8009ae0 <_printf_float+0x2b8>
 8009b02:	bf00      	nop
 8009b04:	7fefffff 	.word	0x7fefffff
 8009b08:	0800c50c 	.word	0x0800c50c
 8009b0c:	0800c510 	.word	0x0800c510
 8009b10:	0800c518 	.word	0x0800c518
 8009b14:	0800c514 	.word	0x0800c514
 8009b18:	0800c51c 	.word	0x0800c51c
 8009b1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b20:	429a      	cmp	r2, r3
 8009b22:	bfa8      	it	ge
 8009b24:	461a      	movge	r2, r3
 8009b26:	2a00      	cmp	r2, #0
 8009b28:	4691      	mov	r9, r2
 8009b2a:	dc37      	bgt.n	8009b9c <_printf_float+0x374>
 8009b2c:	f04f 0b00 	mov.w	fp, #0
 8009b30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b34:	f104 021a 	add.w	r2, r4, #26
 8009b38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b3a:	9305      	str	r3, [sp, #20]
 8009b3c:	eba3 0309 	sub.w	r3, r3, r9
 8009b40:	455b      	cmp	r3, fp
 8009b42:	dc33      	bgt.n	8009bac <_printf_float+0x384>
 8009b44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	db3b      	blt.n	8009bc4 <_printf_float+0x39c>
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	07da      	lsls	r2, r3, #31
 8009b50:	d438      	bmi.n	8009bc4 <_printf_float+0x39c>
 8009b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b54:	9a05      	ldr	r2, [sp, #20]
 8009b56:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b58:	1a9a      	subs	r2, r3, r2
 8009b5a:	eba3 0901 	sub.w	r9, r3, r1
 8009b5e:	4591      	cmp	r9, r2
 8009b60:	bfa8      	it	ge
 8009b62:	4691      	movge	r9, r2
 8009b64:	f1b9 0f00 	cmp.w	r9, #0
 8009b68:	dc35      	bgt.n	8009bd6 <_printf_float+0x3ae>
 8009b6a:	f04f 0800 	mov.w	r8, #0
 8009b6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b72:	f104 0a1a 	add.w	sl, r4, #26
 8009b76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b7a:	1a9b      	subs	r3, r3, r2
 8009b7c:	eba3 0309 	sub.w	r3, r3, r9
 8009b80:	4543      	cmp	r3, r8
 8009b82:	f77f af79 	ble.w	8009a78 <_printf_float+0x250>
 8009b86:	2301      	movs	r3, #1
 8009b88:	4652      	mov	r2, sl
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	47b8      	blx	r7
 8009b90:	3001      	adds	r0, #1
 8009b92:	f43f aeaa 	beq.w	80098ea <_printf_float+0xc2>
 8009b96:	f108 0801 	add.w	r8, r8, #1
 8009b9a:	e7ec      	b.n	8009b76 <_printf_float+0x34e>
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	4642      	mov	r2, r8
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b8      	blx	r7
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	d1c0      	bne.n	8009b2c <_printf_float+0x304>
 8009baa:	e69e      	b.n	80098ea <_printf_float+0xc2>
 8009bac:	2301      	movs	r3, #1
 8009bae:	4631      	mov	r1, r6
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	9205      	str	r2, [sp, #20]
 8009bb4:	47b8      	blx	r7
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	f43f ae97 	beq.w	80098ea <_printf_float+0xc2>
 8009bbc:	9a05      	ldr	r2, [sp, #20]
 8009bbe:	f10b 0b01 	add.w	fp, fp, #1
 8009bc2:	e7b9      	b.n	8009b38 <_printf_float+0x310>
 8009bc4:	ee18 3a10 	vmov	r3, s16
 8009bc8:	4652      	mov	r2, sl
 8009bca:	4631      	mov	r1, r6
 8009bcc:	4628      	mov	r0, r5
 8009bce:	47b8      	blx	r7
 8009bd0:	3001      	adds	r0, #1
 8009bd2:	d1be      	bne.n	8009b52 <_printf_float+0x32a>
 8009bd4:	e689      	b.n	80098ea <_printf_float+0xc2>
 8009bd6:	9a05      	ldr	r2, [sp, #20]
 8009bd8:	464b      	mov	r3, r9
 8009bda:	4442      	add	r2, r8
 8009bdc:	4631      	mov	r1, r6
 8009bde:	4628      	mov	r0, r5
 8009be0:	47b8      	blx	r7
 8009be2:	3001      	adds	r0, #1
 8009be4:	d1c1      	bne.n	8009b6a <_printf_float+0x342>
 8009be6:	e680      	b.n	80098ea <_printf_float+0xc2>
 8009be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bea:	2a01      	cmp	r2, #1
 8009bec:	dc01      	bgt.n	8009bf2 <_printf_float+0x3ca>
 8009bee:	07db      	lsls	r3, r3, #31
 8009bf0:	d538      	bpl.n	8009c64 <_printf_float+0x43c>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	4642      	mov	r2, r8
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47b8      	blx	r7
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	f43f ae74 	beq.w	80098ea <_printf_float+0xc2>
 8009c02:	ee18 3a10 	vmov	r3, s16
 8009c06:	4652      	mov	r2, sl
 8009c08:	4631      	mov	r1, r6
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	47b8      	blx	r7
 8009c0e:	3001      	adds	r0, #1
 8009c10:	f43f ae6b 	beq.w	80098ea <_printf_float+0xc2>
 8009c14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c18:	2200      	movs	r2, #0
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	f7f6 ff54 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c20:	b9d8      	cbnz	r0, 8009c5a <_printf_float+0x432>
 8009c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c24:	f108 0201 	add.w	r2, r8, #1
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b8      	blx	r7
 8009c30:	3001      	adds	r0, #1
 8009c32:	d10e      	bne.n	8009c52 <_printf_float+0x42a>
 8009c34:	e659      	b.n	80098ea <_printf_float+0xc2>
 8009c36:	2301      	movs	r3, #1
 8009c38:	4652      	mov	r2, sl
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	47b8      	blx	r7
 8009c40:	3001      	adds	r0, #1
 8009c42:	f43f ae52 	beq.w	80098ea <_printf_float+0xc2>
 8009c46:	f108 0801 	add.w	r8, r8, #1
 8009c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	4543      	cmp	r3, r8
 8009c50:	dcf1      	bgt.n	8009c36 <_printf_float+0x40e>
 8009c52:	464b      	mov	r3, r9
 8009c54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c58:	e6dc      	b.n	8009a14 <_printf_float+0x1ec>
 8009c5a:	f04f 0800 	mov.w	r8, #0
 8009c5e:	f104 0a1a 	add.w	sl, r4, #26
 8009c62:	e7f2      	b.n	8009c4a <_printf_float+0x422>
 8009c64:	2301      	movs	r3, #1
 8009c66:	4642      	mov	r2, r8
 8009c68:	e7df      	b.n	8009c2a <_printf_float+0x402>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	464a      	mov	r2, r9
 8009c6e:	4631      	mov	r1, r6
 8009c70:	4628      	mov	r0, r5
 8009c72:	47b8      	blx	r7
 8009c74:	3001      	adds	r0, #1
 8009c76:	f43f ae38 	beq.w	80098ea <_printf_float+0xc2>
 8009c7a:	f108 0801 	add.w	r8, r8, #1
 8009c7e:	68e3      	ldr	r3, [r4, #12]
 8009c80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c82:	1a5b      	subs	r3, r3, r1
 8009c84:	4543      	cmp	r3, r8
 8009c86:	dcf0      	bgt.n	8009c6a <_printf_float+0x442>
 8009c88:	e6fa      	b.n	8009a80 <_printf_float+0x258>
 8009c8a:	f04f 0800 	mov.w	r8, #0
 8009c8e:	f104 0919 	add.w	r9, r4, #25
 8009c92:	e7f4      	b.n	8009c7e <_printf_float+0x456>

08009c94 <_printf_common>:
 8009c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c98:	4616      	mov	r6, r2
 8009c9a:	4699      	mov	r9, r3
 8009c9c:	688a      	ldr	r2, [r1, #8]
 8009c9e:	690b      	ldr	r3, [r1, #16]
 8009ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	bfb8      	it	lt
 8009ca8:	4613      	movlt	r3, r2
 8009caa:	6033      	str	r3, [r6, #0]
 8009cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cb0:	4607      	mov	r7, r0
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	b10a      	cbz	r2, 8009cba <_printf_common+0x26>
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	6033      	str	r3, [r6, #0]
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	0699      	lsls	r1, r3, #26
 8009cbe:	bf42      	ittt	mi
 8009cc0:	6833      	ldrmi	r3, [r6, #0]
 8009cc2:	3302      	addmi	r3, #2
 8009cc4:	6033      	strmi	r3, [r6, #0]
 8009cc6:	6825      	ldr	r5, [r4, #0]
 8009cc8:	f015 0506 	ands.w	r5, r5, #6
 8009ccc:	d106      	bne.n	8009cdc <_printf_common+0x48>
 8009cce:	f104 0a19 	add.w	sl, r4, #25
 8009cd2:	68e3      	ldr	r3, [r4, #12]
 8009cd4:	6832      	ldr	r2, [r6, #0]
 8009cd6:	1a9b      	subs	r3, r3, r2
 8009cd8:	42ab      	cmp	r3, r5
 8009cda:	dc26      	bgt.n	8009d2a <_printf_common+0x96>
 8009cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ce0:	1e13      	subs	r3, r2, #0
 8009ce2:	6822      	ldr	r2, [r4, #0]
 8009ce4:	bf18      	it	ne
 8009ce6:	2301      	movne	r3, #1
 8009ce8:	0692      	lsls	r2, r2, #26
 8009cea:	d42b      	bmi.n	8009d44 <_printf_common+0xb0>
 8009cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	47c0      	blx	r8
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	d01e      	beq.n	8009d38 <_printf_common+0xa4>
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	68e5      	ldr	r5, [r4, #12]
 8009cfe:	6832      	ldr	r2, [r6, #0]
 8009d00:	f003 0306 	and.w	r3, r3, #6
 8009d04:	2b04      	cmp	r3, #4
 8009d06:	bf08      	it	eq
 8009d08:	1aad      	subeq	r5, r5, r2
 8009d0a:	68a3      	ldr	r3, [r4, #8]
 8009d0c:	6922      	ldr	r2, [r4, #16]
 8009d0e:	bf0c      	ite	eq
 8009d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d14:	2500      	movne	r5, #0
 8009d16:	4293      	cmp	r3, r2
 8009d18:	bfc4      	itt	gt
 8009d1a:	1a9b      	subgt	r3, r3, r2
 8009d1c:	18ed      	addgt	r5, r5, r3
 8009d1e:	2600      	movs	r6, #0
 8009d20:	341a      	adds	r4, #26
 8009d22:	42b5      	cmp	r5, r6
 8009d24:	d11a      	bne.n	8009d5c <_printf_common+0xc8>
 8009d26:	2000      	movs	r0, #0
 8009d28:	e008      	b.n	8009d3c <_printf_common+0xa8>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4652      	mov	r2, sl
 8009d2e:	4649      	mov	r1, r9
 8009d30:	4638      	mov	r0, r7
 8009d32:	47c0      	blx	r8
 8009d34:	3001      	adds	r0, #1
 8009d36:	d103      	bne.n	8009d40 <_printf_common+0xac>
 8009d38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d40:	3501      	adds	r5, #1
 8009d42:	e7c6      	b.n	8009cd2 <_printf_common+0x3e>
 8009d44:	18e1      	adds	r1, r4, r3
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	2030      	movs	r0, #48	; 0x30
 8009d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d4e:	4422      	add	r2, r4
 8009d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d58:	3302      	adds	r3, #2
 8009d5a:	e7c7      	b.n	8009cec <_printf_common+0x58>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	4622      	mov	r2, r4
 8009d60:	4649      	mov	r1, r9
 8009d62:	4638      	mov	r0, r7
 8009d64:	47c0      	blx	r8
 8009d66:	3001      	adds	r0, #1
 8009d68:	d0e6      	beq.n	8009d38 <_printf_common+0xa4>
 8009d6a:	3601      	adds	r6, #1
 8009d6c:	e7d9      	b.n	8009d22 <_printf_common+0x8e>
	...

08009d70 <_printf_i>:
 8009d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d74:	7e0f      	ldrb	r7, [r1, #24]
 8009d76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d78:	2f78      	cmp	r7, #120	; 0x78
 8009d7a:	4691      	mov	r9, r2
 8009d7c:	4680      	mov	r8, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	469a      	mov	sl, r3
 8009d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d86:	d807      	bhi.n	8009d98 <_printf_i+0x28>
 8009d88:	2f62      	cmp	r7, #98	; 0x62
 8009d8a:	d80a      	bhi.n	8009da2 <_printf_i+0x32>
 8009d8c:	2f00      	cmp	r7, #0
 8009d8e:	f000 80d8 	beq.w	8009f42 <_printf_i+0x1d2>
 8009d92:	2f58      	cmp	r7, #88	; 0x58
 8009d94:	f000 80a3 	beq.w	8009ede <_printf_i+0x16e>
 8009d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009da0:	e03a      	b.n	8009e18 <_printf_i+0xa8>
 8009da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009da6:	2b15      	cmp	r3, #21
 8009da8:	d8f6      	bhi.n	8009d98 <_printf_i+0x28>
 8009daa:	a101      	add	r1, pc, #4	; (adr r1, 8009db0 <_printf_i+0x40>)
 8009dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009db0:	08009e09 	.word	0x08009e09
 8009db4:	08009e1d 	.word	0x08009e1d
 8009db8:	08009d99 	.word	0x08009d99
 8009dbc:	08009d99 	.word	0x08009d99
 8009dc0:	08009d99 	.word	0x08009d99
 8009dc4:	08009d99 	.word	0x08009d99
 8009dc8:	08009e1d 	.word	0x08009e1d
 8009dcc:	08009d99 	.word	0x08009d99
 8009dd0:	08009d99 	.word	0x08009d99
 8009dd4:	08009d99 	.word	0x08009d99
 8009dd8:	08009d99 	.word	0x08009d99
 8009ddc:	08009f29 	.word	0x08009f29
 8009de0:	08009e4d 	.word	0x08009e4d
 8009de4:	08009f0b 	.word	0x08009f0b
 8009de8:	08009d99 	.word	0x08009d99
 8009dec:	08009d99 	.word	0x08009d99
 8009df0:	08009f4b 	.word	0x08009f4b
 8009df4:	08009d99 	.word	0x08009d99
 8009df8:	08009e4d 	.word	0x08009e4d
 8009dfc:	08009d99 	.word	0x08009d99
 8009e00:	08009d99 	.word	0x08009d99
 8009e04:	08009f13 	.word	0x08009f13
 8009e08:	682b      	ldr	r3, [r5, #0]
 8009e0a:	1d1a      	adds	r2, r3, #4
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	602a      	str	r2, [r5, #0]
 8009e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e0a3      	b.n	8009f64 <_printf_i+0x1f4>
 8009e1c:	6820      	ldr	r0, [r4, #0]
 8009e1e:	6829      	ldr	r1, [r5, #0]
 8009e20:	0606      	lsls	r6, r0, #24
 8009e22:	f101 0304 	add.w	r3, r1, #4
 8009e26:	d50a      	bpl.n	8009e3e <_printf_i+0xce>
 8009e28:	680e      	ldr	r6, [r1, #0]
 8009e2a:	602b      	str	r3, [r5, #0]
 8009e2c:	2e00      	cmp	r6, #0
 8009e2e:	da03      	bge.n	8009e38 <_printf_i+0xc8>
 8009e30:	232d      	movs	r3, #45	; 0x2d
 8009e32:	4276      	negs	r6, r6
 8009e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e38:	485e      	ldr	r0, [pc, #376]	; (8009fb4 <_printf_i+0x244>)
 8009e3a:	230a      	movs	r3, #10
 8009e3c:	e019      	b.n	8009e72 <_printf_i+0x102>
 8009e3e:	680e      	ldr	r6, [r1, #0]
 8009e40:	602b      	str	r3, [r5, #0]
 8009e42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e46:	bf18      	it	ne
 8009e48:	b236      	sxthne	r6, r6
 8009e4a:	e7ef      	b.n	8009e2c <_printf_i+0xbc>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	6820      	ldr	r0, [r4, #0]
 8009e50:	1d19      	adds	r1, r3, #4
 8009e52:	6029      	str	r1, [r5, #0]
 8009e54:	0601      	lsls	r1, r0, #24
 8009e56:	d501      	bpl.n	8009e5c <_printf_i+0xec>
 8009e58:	681e      	ldr	r6, [r3, #0]
 8009e5a:	e002      	b.n	8009e62 <_printf_i+0xf2>
 8009e5c:	0646      	lsls	r6, r0, #25
 8009e5e:	d5fb      	bpl.n	8009e58 <_printf_i+0xe8>
 8009e60:	881e      	ldrh	r6, [r3, #0]
 8009e62:	4854      	ldr	r0, [pc, #336]	; (8009fb4 <_printf_i+0x244>)
 8009e64:	2f6f      	cmp	r7, #111	; 0x6f
 8009e66:	bf0c      	ite	eq
 8009e68:	2308      	moveq	r3, #8
 8009e6a:	230a      	movne	r3, #10
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e72:	6865      	ldr	r5, [r4, #4]
 8009e74:	60a5      	str	r5, [r4, #8]
 8009e76:	2d00      	cmp	r5, #0
 8009e78:	bfa2      	ittt	ge
 8009e7a:	6821      	ldrge	r1, [r4, #0]
 8009e7c:	f021 0104 	bicge.w	r1, r1, #4
 8009e80:	6021      	strge	r1, [r4, #0]
 8009e82:	b90e      	cbnz	r6, 8009e88 <_printf_i+0x118>
 8009e84:	2d00      	cmp	r5, #0
 8009e86:	d04d      	beq.n	8009f24 <_printf_i+0x1b4>
 8009e88:	4615      	mov	r5, r2
 8009e8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e8e:	fb03 6711 	mls	r7, r3, r1, r6
 8009e92:	5dc7      	ldrb	r7, [r0, r7]
 8009e94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e98:	4637      	mov	r7, r6
 8009e9a:	42bb      	cmp	r3, r7
 8009e9c:	460e      	mov	r6, r1
 8009e9e:	d9f4      	bls.n	8009e8a <_printf_i+0x11a>
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	d10b      	bne.n	8009ebc <_printf_i+0x14c>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	07de      	lsls	r6, r3, #31
 8009ea8:	d508      	bpl.n	8009ebc <_printf_i+0x14c>
 8009eaa:	6923      	ldr	r3, [r4, #16]
 8009eac:	6861      	ldr	r1, [r4, #4]
 8009eae:	4299      	cmp	r1, r3
 8009eb0:	bfde      	ittt	le
 8009eb2:	2330      	movle	r3, #48	; 0x30
 8009eb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009eb8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009ebc:	1b52      	subs	r2, r2, r5
 8009ebe:	6122      	str	r2, [r4, #16]
 8009ec0:	f8cd a000 	str.w	sl, [sp]
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	aa03      	add	r2, sp, #12
 8009ec8:	4621      	mov	r1, r4
 8009eca:	4640      	mov	r0, r8
 8009ecc:	f7ff fee2 	bl	8009c94 <_printf_common>
 8009ed0:	3001      	adds	r0, #1
 8009ed2:	d14c      	bne.n	8009f6e <_printf_i+0x1fe>
 8009ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ed8:	b004      	add	sp, #16
 8009eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ede:	4835      	ldr	r0, [pc, #212]	; (8009fb4 <_printf_i+0x244>)
 8009ee0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ee4:	6829      	ldr	r1, [r5, #0]
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009eec:	6029      	str	r1, [r5, #0]
 8009eee:	061d      	lsls	r5, r3, #24
 8009ef0:	d514      	bpl.n	8009f1c <_printf_i+0x1ac>
 8009ef2:	07df      	lsls	r7, r3, #31
 8009ef4:	bf44      	itt	mi
 8009ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8009efa:	6023      	strmi	r3, [r4, #0]
 8009efc:	b91e      	cbnz	r6, 8009f06 <_printf_i+0x196>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	f023 0320 	bic.w	r3, r3, #32
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	2310      	movs	r3, #16
 8009f08:	e7b0      	b.n	8009e6c <_printf_i+0xfc>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	f043 0320 	orr.w	r3, r3, #32
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	2378      	movs	r3, #120	; 0x78
 8009f14:	4828      	ldr	r0, [pc, #160]	; (8009fb8 <_printf_i+0x248>)
 8009f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f1a:	e7e3      	b.n	8009ee4 <_printf_i+0x174>
 8009f1c:	0659      	lsls	r1, r3, #25
 8009f1e:	bf48      	it	mi
 8009f20:	b2b6      	uxthmi	r6, r6
 8009f22:	e7e6      	b.n	8009ef2 <_printf_i+0x182>
 8009f24:	4615      	mov	r5, r2
 8009f26:	e7bb      	b.n	8009ea0 <_printf_i+0x130>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	6826      	ldr	r6, [r4, #0]
 8009f2c:	6961      	ldr	r1, [r4, #20]
 8009f2e:	1d18      	adds	r0, r3, #4
 8009f30:	6028      	str	r0, [r5, #0]
 8009f32:	0635      	lsls	r5, r6, #24
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	d501      	bpl.n	8009f3c <_printf_i+0x1cc>
 8009f38:	6019      	str	r1, [r3, #0]
 8009f3a:	e002      	b.n	8009f42 <_printf_i+0x1d2>
 8009f3c:	0670      	lsls	r0, r6, #25
 8009f3e:	d5fb      	bpl.n	8009f38 <_printf_i+0x1c8>
 8009f40:	8019      	strh	r1, [r3, #0]
 8009f42:	2300      	movs	r3, #0
 8009f44:	6123      	str	r3, [r4, #16]
 8009f46:	4615      	mov	r5, r2
 8009f48:	e7ba      	b.n	8009ec0 <_printf_i+0x150>
 8009f4a:	682b      	ldr	r3, [r5, #0]
 8009f4c:	1d1a      	adds	r2, r3, #4
 8009f4e:	602a      	str	r2, [r5, #0]
 8009f50:	681d      	ldr	r5, [r3, #0]
 8009f52:	6862      	ldr	r2, [r4, #4]
 8009f54:	2100      	movs	r1, #0
 8009f56:	4628      	mov	r0, r5
 8009f58:	f7f6 f942 	bl	80001e0 <memchr>
 8009f5c:	b108      	cbz	r0, 8009f62 <_printf_i+0x1f2>
 8009f5e:	1b40      	subs	r0, r0, r5
 8009f60:	6060      	str	r0, [r4, #4]
 8009f62:	6863      	ldr	r3, [r4, #4]
 8009f64:	6123      	str	r3, [r4, #16]
 8009f66:	2300      	movs	r3, #0
 8009f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f6c:	e7a8      	b.n	8009ec0 <_printf_i+0x150>
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	462a      	mov	r2, r5
 8009f72:	4649      	mov	r1, r9
 8009f74:	4640      	mov	r0, r8
 8009f76:	47d0      	blx	sl
 8009f78:	3001      	adds	r0, #1
 8009f7a:	d0ab      	beq.n	8009ed4 <_printf_i+0x164>
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	079b      	lsls	r3, r3, #30
 8009f80:	d413      	bmi.n	8009faa <_printf_i+0x23a>
 8009f82:	68e0      	ldr	r0, [r4, #12]
 8009f84:	9b03      	ldr	r3, [sp, #12]
 8009f86:	4298      	cmp	r0, r3
 8009f88:	bfb8      	it	lt
 8009f8a:	4618      	movlt	r0, r3
 8009f8c:	e7a4      	b.n	8009ed8 <_printf_i+0x168>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	4632      	mov	r2, r6
 8009f92:	4649      	mov	r1, r9
 8009f94:	4640      	mov	r0, r8
 8009f96:	47d0      	blx	sl
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d09b      	beq.n	8009ed4 <_printf_i+0x164>
 8009f9c:	3501      	adds	r5, #1
 8009f9e:	68e3      	ldr	r3, [r4, #12]
 8009fa0:	9903      	ldr	r1, [sp, #12]
 8009fa2:	1a5b      	subs	r3, r3, r1
 8009fa4:	42ab      	cmp	r3, r5
 8009fa6:	dcf2      	bgt.n	8009f8e <_printf_i+0x21e>
 8009fa8:	e7eb      	b.n	8009f82 <_printf_i+0x212>
 8009faa:	2500      	movs	r5, #0
 8009fac:	f104 0619 	add.w	r6, r4, #25
 8009fb0:	e7f5      	b.n	8009f9e <_printf_i+0x22e>
 8009fb2:	bf00      	nop
 8009fb4:	0800c51e 	.word	0x0800c51e
 8009fb8:	0800c52f 	.word	0x0800c52f

08009fbc <siprintf>:
 8009fbc:	b40e      	push	{r1, r2, r3}
 8009fbe:	b500      	push	{lr}
 8009fc0:	b09c      	sub	sp, #112	; 0x70
 8009fc2:	ab1d      	add	r3, sp, #116	; 0x74
 8009fc4:	9002      	str	r0, [sp, #8]
 8009fc6:	9006      	str	r0, [sp, #24]
 8009fc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009fcc:	4809      	ldr	r0, [pc, #36]	; (8009ff4 <siprintf+0x38>)
 8009fce:	9107      	str	r1, [sp, #28]
 8009fd0:	9104      	str	r1, [sp, #16]
 8009fd2:	4909      	ldr	r1, [pc, #36]	; (8009ff8 <siprintf+0x3c>)
 8009fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd8:	9105      	str	r1, [sp, #20]
 8009fda:	6800      	ldr	r0, [r0, #0]
 8009fdc:	9301      	str	r3, [sp, #4]
 8009fde:	a902      	add	r1, sp, #8
 8009fe0:	f001 fb78 	bl	800b6d4 <_svfiprintf_r>
 8009fe4:	9b02      	ldr	r3, [sp, #8]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	701a      	strb	r2, [r3, #0]
 8009fea:	b01c      	add	sp, #112	; 0x70
 8009fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ff0:	b003      	add	sp, #12
 8009ff2:	4770      	bx	lr
 8009ff4:	2000000c 	.word	0x2000000c
 8009ff8:	ffff0208 	.word	0xffff0208

08009ffc <quorem>:
 8009ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a000:	6903      	ldr	r3, [r0, #16]
 800a002:	690c      	ldr	r4, [r1, #16]
 800a004:	42a3      	cmp	r3, r4
 800a006:	4607      	mov	r7, r0
 800a008:	f2c0 8081 	blt.w	800a10e <quorem+0x112>
 800a00c:	3c01      	subs	r4, #1
 800a00e:	f101 0814 	add.w	r8, r1, #20
 800a012:	f100 0514 	add.w	r5, r0, #20
 800a016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a01a:	9301      	str	r3, [sp, #4]
 800a01c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a024:	3301      	adds	r3, #1
 800a026:	429a      	cmp	r2, r3
 800a028:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a02c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a030:	fbb2 f6f3 	udiv	r6, r2, r3
 800a034:	d331      	bcc.n	800a09a <quorem+0x9e>
 800a036:	f04f 0e00 	mov.w	lr, #0
 800a03a:	4640      	mov	r0, r8
 800a03c:	46ac      	mov	ip, r5
 800a03e:	46f2      	mov	sl, lr
 800a040:	f850 2b04 	ldr.w	r2, [r0], #4
 800a044:	b293      	uxth	r3, r2
 800a046:	fb06 e303 	mla	r3, r6, r3, lr
 800a04a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a04e:	b29b      	uxth	r3, r3
 800a050:	ebaa 0303 	sub.w	r3, sl, r3
 800a054:	f8dc a000 	ldr.w	sl, [ip]
 800a058:	0c12      	lsrs	r2, r2, #16
 800a05a:	fa13 f38a 	uxtah	r3, r3, sl
 800a05e:	fb06 e202 	mla	r2, r6, r2, lr
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	9b00      	ldr	r3, [sp, #0]
 800a066:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a06a:	b292      	uxth	r2, r2
 800a06c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a074:	f8bd 3000 	ldrh.w	r3, [sp]
 800a078:	4581      	cmp	r9, r0
 800a07a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a07e:	f84c 3b04 	str.w	r3, [ip], #4
 800a082:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a086:	d2db      	bcs.n	800a040 <quorem+0x44>
 800a088:	f855 300b 	ldr.w	r3, [r5, fp]
 800a08c:	b92b      	cbnz	r3, 800a09a <quorem+0x9e>
 800a08e:	9b01      	ldr	r3, [sp, #4]
 800a090:	3b04      	subs	r3, #4
 800a092:	429d      	cmp	r5, r3
 800a094:	461a      	mov	r2, r3
 800a096:	d32e      	bcc.n	800a0f6 <quorem+0xfa>
 800a098:	613c      	str	r4, [r7, #16]
 800a09a:	4638      	mov	r0, r7
 800a09c:	f001 f8c6 	bl	800b22c <__mcmp>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	db24      	blt.n	800a0ee <quorem+0xf2>
 800a0a4:	3601      	adds	r6, #1
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f04f 0c00 	mov.w	ip, #0
 800a0ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0b0:	f8d0 e000 	ldr.w	lr, [r0]
 800a0b4:	b293      	uxth	r3, r2
 800a0b6:	ebac 0303 	sub.w	r3, ip, r3
 800a0ba:	0c12      	lsrs	r2, r2, #16
 800a0bc:	fa13 f38e 	uxtah	r3, r3, lr
 800a0c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0ce:	45c1      	cmp	r9, r8
 800a0d0:	f840 3b04 	str.w	r3, [r0], #4
 800a0d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0d8:	d2e8      	bcs.n	800a0ac <quorem+0xb0>
 800a0da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0e2:	b922      	cbnz	r2, 800a0ee <quorem+0xf2>
 800a0e4:	3b04      	subs	r3, #4
 800a0e6:	429d      	cmp	r5, r3
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	d30a      	bcc.n	800a102 <quorem+0x106>
 800a0ec:	613c      	str	r4, [r7, #16]
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	b003      	add	sp, #12
 800a0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f6:	6812      	ldr	r2, [r2, #0]
 800a0f8:	3b04      	subs	r3, #4
 800a0fa:	2a00      	cmp	r2, #0
 800a0fc:	d1cc      	bne.n	800a098 <quorem+0x9c>
 800a0fe:	3c01      	subs	r4, #1
 800a100:	e7c7      	b.n	800a092 <quorem+0x96>
 800a102:	6812      	ldr	r2, [r2, #0]
 800a104:	3b04      	subs	r3, #4
 800a106:	2a00      	cmp	r2, #0
 800a108:	d1f0      	bne.n	800a0ec <quorem+0xf0>
 800a10a:	3c01      	subs	r4, #1
 800a10c:	e7eb      	b.n	800a0e6 <quorem+0xea>
 800a10e:	2000      	movs	r0, #0
 800a110:	e7ee      	b.n	800a0f0 <quorem+0xf4>
 800a112:	0000      	movs	r0, r0
 800a114:	0000      	movs	r0, r0
	...

0800a118 <_dtoa_r>:
 800a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	ed2d 8b04 	vpush	{d8-d9}
 800a120:	ec57 6b10 	vmov	r6, r7, d0
 800a124:	b093      	sub	sp, #76	; 0x4c
 800a126:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a128:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a12c:	9106      	str	r1, [sp, #24]
 800a12e:	ee10 aa10 	vmov	sl, s0
 800a132:	4604      	mov	r4, r0
 800a134:	9209      	str	r2, [sp, #36]	; 0x24
 800a136:	930c      	str	r3, [sp, #48]	; 0x30
 800a138:	46bb      	mov	fp, r7
 800a13a:	b975      	cbnz	r5, 800a15a <_dtoa_r+0x42>
 800a13c:	2010      	movs	r0, #16
 800a13e:	f000 fddd 	bl	800acfc <malloc>
 800a142:	4602      	mov	r2, r0
 800a144:	6260      	str	r0, [r4, #36]	; 0x24
 800a146:	b920      	cbnz	r0, 800a152 <_dtoa_r+0x3a>
 800a148:	4ba7      	ldr	r3, [pc, #668]	; (800a3e8 <_dtoa_r+0x2d0>)
 800a14a:	21ea      	movs	r1, #234	; 0xea
 800a14c:	48a7      	ldr	r0, [pc, #668]	; (800a3ec <_dtoa_r+0x2d4>)
 800a14e:	f001 fbd1 	bl	800b8f4 <__assert_func>
 800a152:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a156:	6005      	str	r5, [r0, #0]
 800a158:	60c5      	str	r5, [r0, #12]
 800a15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a15c:	6819      	ldr	r1, [r3, #0]
 800a15e:	b151      	cbz	r1, 800a176 <_dtoa_r+0x5e>
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	604a      	str	r2, [r1, #4]
 800a164:	2301      	movs	r3, #1
 800a166:	4093      	lsls	r3, r2
 800a168:	608b      	str	r3, [r1, #8]
 800a16a:	4620      	mov	r0, r4
 800a16c:	f000 fe1c 	bl	800ada8 <_Bfree>
 800a170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a172:	2200      	movs	r2, #0
 800a174:	601a      	str	r2, [r3, #0]
 800a176:	1e3b      	subs	r3, r7, #0
 800a178:	bfaa      	itet	ge
 800a17a:	2300      	movge	r3, #0
 800a17c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a180:	f8c8 3000 	strge.w	r3, [r8]
 800a184:	4b9a      	ldr	r3, [pc, #616]	; (800a3f0 <_dtoa_r+0x2d8>)
 800a186:	bfbc      	itt	lt
 800a188:	2201      	movlt	r2, #1
 800a18a:	f8c8 2000 	strlt.w	r2, [r8]
 800a18e:	ea33 030b 	bics.w	r3, r3, fp
 800a192:	d11b      	bne.n	800a1cc <_dtoa_r+0xb4>
 800a194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a196:	f242 730f 	movw	r3, #9999	; 0x270f
 800a19a:	6013      	str	r3, [r2, #0]
 800a19c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1a0:	4333      	orrs	r3, r6
 800a1a2:	f000 8592 	beq.w	800acca <_dtoa_r+0xbb2>
 800a1a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1a8:	b963      	cbnz	r3, 800a1c4 <_dtoa_r+0xac>
 800a1aa:	4b92      	ldr	r3, [pc, #584]	; (800a3f4 <_dtoa_r+0x2dc>)
 800a1ac:	e022      	b.n	800a1f4 <_dtoa_r+0xdc>
 800a1ae:	4b92      	ldr	r3, [pc, #584]	; (800a3f8 <_dtoa_r+0x2e0>)
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	3308      	adds	r3, #8
 800a1b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1b6:	6013      	str	r3, [r2, #0]
 800a1b8:	9801      	ldr	r0, [sp, #4]
 800a1ba:	b013      	add	sp, #76	; 0x4c
 800a1bc:	ecbd 8b04 	vpop	{d8-d9}
 800a1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c4:	4b8b      	ldr	r3, [pc, #556]	; (800a3f4 <_dtoa_r+0x2dc>)
 800a1c6:	9301      	str	r3, [sp, #4]
 800a1c8:	3303      	adds	r3, #3
 800a1ca:	e7f3      	b.n	800a1b4 <_dtoa_r+0x9c>
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	4650      	mov	r0, sl
 800a1d2:	4659      	mov	r1, fp
 800a1d4:	f7f6 fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1d8:	ec4b ab19 	vmov	d9, sl, fp
 800a1dc:	4680      	mov	r8, r0
 800a1de:	b158      	cbz	r0, 800a1f8 <_dtoa_r+0xe0>
 800a1e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	6013      	str	r3, [r2, #0]
 800a1e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 856b 	beq.w	800acc4 <_dtoa_r+0xbac>
 800a1ee:	4883      	ldr	r0, [pc, #524]	; (800a3fc <_dtoa_r+0x2e4>)
 800a1f0:	6018      	str	r0, [r3, #0]
 800a1f2:	1e43      	subs	r3, r0, #1
 800a1f4:	9301      	str	r3, [sp, #4]
 800a1f6:	e7df      	b.n	800a1b8 <_dtoa_r+0xa0>
 800a1f8:	ec4b ab10 	vmov	d0, sl, fp
 800a1fc:	aa10      	add	r2, sp, #64	; 0x40
 800a1fe:	a911      	add	r1, sp, #68	; 0x44
 800a200:	4620      	mov	r0, r4
 800a202:	f001 f8b9 	bl	800b378 <__d2b>
 800a206:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a20a:	ee08 0a10 	vmov	s16, r0
 800a20e:	2d00      	cmp	r5, #0
 800a210:	f000 8084 	beq.w	800a31c <_dtoa_r+0x204>
 800a214:	ee19 3a90 	vmov	r3, s19
 800a218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a21c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a220:	4656      	mov	r6, sl
 800a222:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a22a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a22e:	4b74      	ldr	r3, [pc, #464]	; (800a400 <_dtoa_r+0x2e8>)
 800a230:	2200      	movs	r2, #0
 800a232:	4630      	mov	r0, r6
 800a234:	4639      	mov	r1, r7
 800a236:	f7f6 f827 	bl	8000288 <__aeabi_dsub>
 800a23a:	a365      	add	r3, pc, #404	; (adr r3, 800a3d0 <_dtoa_r+0x2b8>)
 800a23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a240:	f7f6 f9da 	bl	80005f8 <__aeabi_dmul>
 800a244:	a364      	add	r3, pc, #400	; (adr r3, 800a3d8 <_dtoa_r+0x2c0>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	f7f6 f81f 	bl	800028c <__adddf3>
 800a24e:	4606      	mov	r6, r0
 800a250:	4628      	mov	r0, r5
 800a252:	460f      	mov	r7, r1
 800a254:	f7f6 f966 	bl	8000524 <__aeabi_i2d>
 800a258:	a361      	add	r3, pc, #388	; (adr r3, 800a3e0 <_dtoa_r+0x2c8>)
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	f7f6 f9cb 	bl	80005f8 <__aeabi_dmul>
 800a262:	4602      	mov	r2, r0
 800a264:	460b      	mov	r3, r1
 800a266:	4630      	mov	r0, r6
 800a268:	4639      	mov	r1, r7
 800a26a:	f7f6 f80f 	bl	800028c <__adddf3>
 800a26e:	4606      	mov	r6, r0
 800a270:	460f      	mov	r7, r1
 800a272:	f7f6 fc71 	bl	8000b58 <__aeabi_d2iz>
 800a276:	2200      	movs	r2, #0
 800a278:	9000      	str	r0, [sp, #0]
 800a27a:	2300      	movs	r3, #0
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	f7f6 fc2c 	bl	8000adc <__aeabi_dcmplt>
 800a284:	b150      	cbz	r0, 800a29c <_dtoa_r+0x184>
 800a286:	9800      	ldr	r0, [sp, #0]
 800a288:	f7f6 f94c 	bl	8000524 <__aeabi_i2d>
 800a28c:	4632      	mov	r2, r6
 800a28e:	463b      	mov	r3, r7
 800a290:	f7f6 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a294:	b910      	cbnz	r0, 800a29c <_dtoa_r+0x184>
 800a296:	9b00      	ldr	r3, [sp, #0]
 800a298:	3b01      	subs	r3, #1
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	9b00      	ldr	r3, [sp, #0]
 800a29e:	2b16      	cmp	r3, #22
 800a2a0:	d85a      	bhi.n	800a358 <_dtoa_r+0x240>
 800a2a2:	9a00      	ldr	r2, [sp, #0]
 800a2a4:	4b57      	ldr	r3, [pc, #348]	; (800a404 <_dtoa_r+0x2ec>)
 800a2a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	ec51 0b19 	vmov	r0, r1, d9
 800a2b2:	f7f6 fc13 	bl	8000adc <__aeabi_dcmplt>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d050      	beq.n	800a35c <_dtoa_r+0x244>
 800a2ba:	9b00      	ldr	r3, [sp, #0]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2c6:	1b5d      	subs	r5, r3, r5
 800a2c8:	1e6b      	subs	r3, r5, #1
 800a2ca:	9305      	str	r3, [sp, #20]
 800a2cc:	bf45      	ittet	mi
 800a2ce:	f1c5 0301 	rsbmi	r3, r5, #1
 800a2d2:	9304      	strmi	r3, [sp, #16]
 800a2d4:	2300      	movpl	r3, #0
 800a2d6:	2300      	movmi	r3, #0
 800a2d8:	bf4c      	ite	mi
 800a2da:	9305      	strmi	r3, [sp, #20]
 800a2dc:	9304      	strpl	r3, [sp, #16]
 800a2de:	9b00      	ldr	r3, [sp, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	db3d      	blt.n	800a360 <_dtoa_r+0x248>
 800a2e4:	9b05      	ldr	r3, [sp, #20]
 800a2e6:	9a00      	ldr	r2, [sp, #0]
 800a2e8:	920a      	str	r2, [sp, #40]	; 0x28
 800a2ea:	4413      	add	r3, r2
 800a2ec:	9305      	str	r3, [sp, #20]
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	9307      	str	r3, [sp, #28]
 800a2f2:	9b06      	ldr	r3, [sp, #24]
 800a2f4:	2b09      	cmp	r3, #9
 800a2f6:	f200 8089 	bhi.w	800a40c <_dtoa_r+0x2f4>
 800a2fa:	2b05      	cmp	r3, #5
 800a2fc:	bfc4      	itt	gt
 800a2fe:	3b04      	subgt	r3, #4
 800a300:	9306      	strgt	r3, [sp, #24]
 800a302:	9b06      	ldr	r3, [sp, #24]
 800a304:	f1a3 0302 	sub.w	r3, r3, #2
 800a308:	bfcc      	ite	gt
 800a30a:	2500      	movgt	r5, #0
 800a30c:	2501      	movle	r5, #1
 800a30e:	2b03      	cmp	r3, #3
 800a310:	f200 8087 	bhi.w	800a422 <_dtoa_r+0x30a>
 800a314:	e8df f003 	tbb	[pc, r3]
 800a318:	59383a2d 	.word	0x59383a2d
 800a31c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a320:	441d      	add	r5, r3
 800a322:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a326:	2b20      	cmp	r3, #32
 800a328:	bfc1      	itttt	gt
 800a32a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a32e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a332:	fa0b f303 	lslgt.w	r3, fp, r3
 800a336:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a33a:	bfda      	itte	le
 800a33c:	f1c3 0320 	rsble	r3, r3, #32
 800a340:	fa06 f003 	lslle.w	r0, r6, r3
 800a344:	4318      	orrgt	r0, r3
 800a346:	f7f6 f8dd 	bl	8000504 <__aeabi_ui2d>
 800a34a:	2301      	movs	r3, #1
 800a34c:	4606      	mov	r6, r0
 800a34e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a352:	3d01      	subs	r5, #1
 800a354:	930e      	str	r3, [sp, #56]	; 0x38
 800a356:	e76a      	b.n	800a22e <_dtoa_r+0x116>
 800a358:	2301      	movs	r3, #1
 800a35a:	e7b2      	b.n	800a2c2 <_dtoa_r+0x1aa>
 800a35c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a35e:	e7b1      	b.n	800a2c4 <_dtoa_r+0x1ac>
 800a360:	9b04      	ldr	r3, [sp, #16]
 800a362:	9a00      	ldr	r2, [sp, #0]
 800a364:	1a9b      	subs	r3, r3, r2
 800a366:	9304      	str	r3, [sp, #16]
 800a368:	4253      	negs	r3, r2
 800a36a:	9307      	str	r3, [sp, #28]
 800a36c:	2300      	movs	r3, #0
 800a36e:	930a      	str	r3, [sp, #40]	; 0x28
 800a370:	e7bf      	b.n	800a2f2 <_dtoa_r+0x1da>
 800a372:	2300      	movs	r3, #0
 800a374:	9308      	str	r3, [sp, #32]
 800a376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a378:	2b00      	cmp	r3, #0
 800a37a:	dc55      	bgt.n	800a428 <_dtoa_r+0x310>
 800a37c:	2301      	movs	r3, #1
 800a37e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a382:	461a      	mov	r2, r3
 800a384:	9209      	str	r2, [sp, #36]	; 0x24
 800a386:	e00c      	b.n	800a3a2 <_dtoa_r+0x28a>
 800a388:	2301      	movs	r3, #1
 800a38a:	e7f3      	b.n	800a374 <_dtoa_r+0x25c>
 800a38c:	2300      	movs	r3, #0
 800a38e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a390:	9308      	str	r3, [sp, #32]
 800a392:	9b00      	ldr	r3, [sp, #0]
 800a394:	4413      	add	r3, r2
 800a396:	9302      	str	r3, [sp, #8]
 800a398:	3301      	adds	r3, #1
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	9303      	str	r3, [sp, #12]
 800a39e:	bfb8      	it	lt
 800a3a0:	2301      	movlt	r3, #1
 800a3a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	6042      	str	r2, [r0, #4]
 800a3a8:	2204      	movs	r2, #4
 800a3aa:	f102 0614 	add.w	r6, r2, #20
 800a3ae:	429e      	cmp	r6, r3
 800a3b0:	6841      	ldr	r1, [r0, #4]
 800a3b2:	d93d      	bls.n	800a430 <_dtoa_r+0x318>
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f000 fcb7 	bl	800ad28 <_Balloc>
 800a3ba:	9001      	str	r0, [sp, #4]
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d13b      	bne.n	800a438 <_dtoa_r+0x320>
 800a3c0:	4b11      	ldr	r3, [pc, #68]	; (800a408 <_dtoa_r+0x2f0>)
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a3c8:	e6c0      	b.n	800a14c <_dtoa_r+0x34>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e7df      	b.n	800a38e <_dtoa_r+0x276>
 800a3ce:	bf00      	nop
 800a3d0:	636f4361 	.word	0x636f4361
 800a3d4:	3fd287a7 	.word	0x3fd287a7
 800a3d8:	8b60c8b3 	.word	0x8b60c8b3
 800a3dc:	3fc68a28 	.word	0x3fc68a28
 800a3e0:	509f79fb 	.word	0x509f79fb
 800a3e4:	3fd34413 	.word	0x3fd34413
 800a3e8:	0800c54d 	.word	0x0800c54d
 800a3ec:	0800c564 	.word	0x0800c564
 800a3f0:	7ff00000 	.word	0x7ff00000
 800a3f4:	0800c549 	.word	0x0800c549
 800a3f8:	0800c540 	.word	0x0800c540
 800a3fc:	0800c51d 	.word	0x0800c51d
 800a400:	3ff80000 	.word	0x3ff80000
 800a404:	0800c658 	.word	0x0800c658
 800a408:	0800c5bf 	.word	0x0800c5bf
 800a40c:	2501      	movs	r5, #1
 800a40e:	2300      	movs	r3, #0
 800a410:	9306      	str	r3, [sp, #24]
 800a412:	9508      	str	r5, [sp, #32]
 800a414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a418:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a41c:	2200      	movs	r2, #0
 800a41e:	2312      	movs	r3, #18
 800a420:	e7b0      	b.n	800a384 <_dtoa_r+0x26c>
 800a422:	2301      	movs	r3, #1
 800a424:	9308      	str	r3, [sp, #32]
 800a426:	e7f5      	b.n	800a414 <_dtoa_r+0x2fc>
 800a428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a42a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a42e:	e7b8      	b.n	800a3a2 <_dtoa_r+0x28a>
 800a430:	3101      	adds	r1, #1
 800a432:	6041      	str	r1, [r0, #4]
 800a434:	0052      	lsls	r2, r2, #1
 800a436:	e7b8      	b.n	800a3aa <_dtoa_r+0x292>
 800a438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a43a:	9a01      	ldr	r2, [sp, #4]
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	9b03      	ldr	r3, [sp, #12]
 800a440:	2b0e      	cmp	r3, #14
 800a442:	f200 809d 	bhi.w	800a580 <_dtoa_r+0x468>
 800a446:	2d00      	cmp	r5, #0
 800a448:	f000 809a 	beq.w	800a580 <_dtoa_r+0x468>
 800a44c:	9b00      	ldr	r3, [sp, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	dd32      	ble.n	800a4b8 <_dtoa_r+0x3a0>
 800a452:	4ab7      	ldr	r2, [pc, #732]	; (800a730 <_dtoa_r+0x618>)
 800a454:	f003 030f 	and.w	r3, r3, #15
 800a458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a45c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a460:	9b00      	ldr	r3, [sp, #0]
 800a462:	05d8      	lsls	r0, r3, #23
 800a464:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a468:	d516      	bpl.n	800a498 <_dtoa_r+0x380>
 800a46a:	4bb2      	ldr	r3, [pc, #712]	; (800a734 <_dtoa_r+0x61c>)
 800a46c:	ec51 0b19 	vmov	r0, r1, d9
 800a470:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a474:	f7f6 f9ea 	bl	800084c <__aeabi_ddiv>
 800a478:	f007 070f 	and.w	r7, r7, #15
 800a47c:	4682      	mov	sl, r0
 800a47e:	468b      	mov	fp, r1
 800a480:	2503      	movs	r5, #3
 800a482:	4eac      	ldr	r6, [pc, #688]	; (800a734 <_dtoa_r+0x61c>)
 800a484:	b957      	cbnz	r7, 800a49c <_dtoa_r+0x384>
 800a486:	4642      	mov	r2, r8
 800a488:	464b      	mov	r3, r9
 800a48a:	4650      	mov	r0, sl
 800a48c:	4659      	mov	r1, fp
 800a48e:	f7f6 f9dd 	bl	800084c <__aeabi_ddiv>
 800a492:	4682      	mov	sl, r0
 800a494:	468b      	mov	fp, r1
 800a496:	e028      	b.n	800a4ea <_dtoa_r+0x3d2>
 800a498:	2502      	movs	r5, #2
 800a49a:	e7f2      	b.n	800a482 <_dtoa_r+0x36a>
 800a49c:	07f9      	lsls	r1, r7, #31
 800a49e:	d508      	bpl.n	800a4b2 <_dtoa_r+0x39a>
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4a8:	f7f6 f8a6 	bl	80005f8 <__aeabi_dmul>
 800a4ac:	3501      	adds	r5, #1
 800a4ae:	4680      	mov	r8, r0
 800a4b0:	4689      	mov	r9, r1
 800a4b2:	107f      	asrs	r7, r7, #1
 800a4b4:	3608      	adds	r6, #8
 800a4b6:	e7e5      	b.n	800a484 <_dtoa_r+0x36c>
 800a4b8:	f000 809b 	beq.w	800a5f2 <_dtoa_r+0x4da>
 800a4bc:	9b00      	ldr	r3, [sp, #0]
 800a4be:	4f9d      	ldr	r7, [pc, #628]	; (800a734 <_dtoa_r+0x61c>)
 800a4c0:	425e      	negs	r6, r3
 800a4c2:	4b9b      	ldr	r3, [pc, #620]	; (800a730 <_dtoa_r+0x618>)
 800a4c4:	f006 020f 	and.w	r2, r6, #15
 800a4c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	ec51 0b19 	vmov	r0, r1, d9
 800a4d4:	f7f6 f890 	bl	80005f8 <__aeabi_dmul>
 800a4d8:	1136      	asrs	r6, r6, #4
 800a4da:	4682      	mov	sl, r0
 800a4dc:	468b      	mov	fp, r1
 800a4de:	2300      	movs	r3, #0
 800a4e0:	2502      	movs	r5, #2
 800a4e2:	2e00      	cmp	r6, #0
 800a4e4:	d17a      	bne.n	800a5dc <_dtoa_r+0x4c4>
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1d3      	bne.n	800a492 <_dtoa_r+0x37a>
 800a4ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 8082 	beq.w	800a5f6 <_dtoa_r+0x4de>
 800a4f2:	4b91      	ldr	r3, [pc, #580]	; (800a738 <_dtoa_r+0x620>)
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	4650      	mov	r0, sl
 800a4f8:	4659      	mov	r1, fp
 800a4fa:	f7f6 faef 	bl	8000adc <__aeabi_dcmplt>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d079      	beq.n	800a5f6 <_dtoa_r+0x4de>
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d076      	beq.n	800a5f6 <_dtoa_r+0x4de>
 800a508:	9b02      	ldr	r3, [sp, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	dd36      	ble.n	800a57c <_dtoa_r+0x464>
 800a50e:	9b00      	ldr	r3, [sp, #0]
 800a510:	4650      	mov	r0, sl
 800a512:	4659      	mov	r1, fp
 800a514:	1e5f      	subs	r7, r3, #1
 800a516:	2200      	movs	r2, #0
 800a518:	4b88      	ldr	r3, [pc, #544]	; (800a73c <_dtoa_r+0x624>)
 800a51a:	f7f6 f86d 	bl	80005f8 <__aeabi_dmul>
 800a51e:	9e02      	ldr	r6, [sp, #8]
 800a520:	4682      	mov	sl, r0
 800a522:	468b      	mov	fp, r1
 800a524:	3501      	adds	r5, #1
 800a526:	4628      	mov	r0, r5
 800a528:	f7f5 fffc 	bl	8000524 <__aeabi_i2d>
 800a52c:	4652      	mov	r2, sl
 800a52e:	465b      	mov	r3, fp
 800a530:	f7f6 f862 	bl	80005f8 <__aeabi_dmul>
 800a534:	4b82      	ldr	r3, [pc, #520]	; (800a740 <_dtoa_r+0x628>)
 800a536:	2200      	movs	r2, #0
 800a538:	f7f5 fea8 	bl	800028c <__adddf3>
 800a53c:	46d0      	mov	r8, sl
 800a53e:	46d9      	mov	r9, fp
 800a540:	4682      	mov	sl, r0
 800a542:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a546:	2e00      	cmp	r6, #0
 800a548:	d158      	bne.n	800a5fc <_dtoa_r+0x4e4>
 800a54a:	4b7e      	ldr	r3, [pc, #504]	; (800a744 <_dtoa_r+0x62c>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	4640      	mov	r0, r8
 800a550:	4649      	mov	r1, r9
 800a552:	f7f5 fe99 	bl	8000288 <__aeabi_dsub>
 800a556:	4652      	mov	r2, sl
 800a558:	465b      	mov	r3, fp
 800a55a:	4680      	mov	r8, r0
 800a55c:	4689      	mov	r9, r1
 800a55e:	f7f6 fadb 	bl	8000b18 <__aeabi_dcmpgt>
 800a562:	2800      	cmp	r0, #0
 800a564:	f040 8295 	bne.w	800aa92 <_dtoa_r+0x97a>
 800a568:	4652      	mov	r2, sl
 800a56a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a56e:	4640      	mov	r0, r8
 800a570:	4649      	mov	r1, r9
 800a572:	f7f6 fab3 	bl	8000adc <__aeabi_dcmplt>
 800a576:	2800      	cmp	r0, #0
 800a578:	f040 8289 	bne.w	800aa8e <_dtoa_r+0x976>
 800a57c:	ec5b ab19 	vmov	sl, fp, d9
 800a580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a582:	2b00      	cmp	r3, #0
 800a584:	f2c0 8148 	blt.w	800a818 <_dtoa_r+0x700>
 800a588:	9a00      	ldr	r2, [sp, #0]
 800a58a:	2a0e      	cmp	r2, #14
 800a58c:	f300 8144 	bgt.w	800a818 <_dtoa_r+0x700>
 800a590:	4b67      	ldr	r3, [pc, #412]	; (800a730 <_dtoa_r+0x618>)
 800a592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a596:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f280 80d5 	bge.w	800a74c <_dtoa_r+0x634>
 800a5a2:	9b03      	ldr	r3, [sp, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f300 80d1 	bgt.w	800a74c <_dtoa_r+0x634>
 800a5aa:	f040 826f 	bne.w	800aa8c <_dtoa_r+0x974>
 800a5ae:	4b65      	ldr	r3, [pc, #404]	; (800a744 <_dtoa_r+0x62c>)
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	4649      	mov	r1, r9
 800a5b6:	f7f6 f81f 	bl	80005f8 <__aeabi_dmul>
 800a5ba:	4652      	mov	r2, sl
 800a5bc:	465b      	mov	r3, fp
 800a5be:	f7f6 faa1 	bl	8000b04 <__aeabi_dcmpge>
 800a5c2:	9e03      	ldr	r6, [sp, #12]
 800a5c4:	4637      	mov	r7, r6
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	f040 8245 	bne.w	800aa56 <_dtoa_r+0x93e>
 800a5cc:	9d01      	ldr	r5, [sp, #4]
 800a5ce:	2331      	movs	r3, #49	; 0x31
 800a5d0:	f805 3b01 	strb.w	r3, [r5], #1
 800a5d4:	9b00      	ldr	r3, [sp, #0]
 800a5d6:	3301      	adds	r3, #1
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	e240      	b.n	800aa5e <_dtoa_r+0x946>
 800a5dc:	07f2      	lsls	r2, r6, #31
 800a5de:	d505      	bpl.n	800a5ec <_dtoa_r+0x4d4>
 800a5e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5e4:	f7f6 f808 	bl	80005f8 <__aeabi_dmul>
 800a5e8:	3501      	adds	r5, #1
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	1076      	asrs	r6, r6, #1
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	e777      	b.n	800a4e2 <_dtoa_r+0x3ca>
 800a5f2:	2502      	movs	r5, #2
 800a5f4:	e779      	b.n	800a4ea <_dtoa_r+0x3d2>
 800a5f6:	9f00      	ldr	r7, [sp, #0]
 800a5f8:	9e03      	ldr	r6, [sp, #12]
 800a5fa:	e794      	b.n	800a526 <_dtoa_r+0x40e>
 800a5fc:	9901      	ldr	r1, [sp, #4]
 800a5fe:	4b4c      	ldr	r3, [pc, #304]	; (800a730 <_dtoa_r+0x618>)
 800a600:	4431      	add	r1, r6
 800a602:	910d      	str	r1, [sp, #52]	; 0x34
 800a604:	9908      	ldr	r1, [sp, #32]
 800a606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a60a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a60e:	2900      	cmp	r1, #0
 800a610:	d043      	beq.n	800a69a <_dtoa_r+0x582>
 800a612:	494d      	ldr	r1, [pc, #308]	; (800a748 <_dtoa_r+0x630>)
 800a614:	2000      	movs	r0, #0
 800a616:	f7f6 f919 	bl	800084c <__aeabi_ddiv>
 800a61a:	4652      	mov	r2, sl
 800a61c:	465b      	mov	r3, fp
 800a61e:	f7f5 fe33 	bl	8000288 <__aeabi_dsub>
 800a622:	9d01      	ldr	r5, [sp, #4]
 800a624:	4682      	mov	sl, r0
 800a626:	468b      	mov	fp, r1
 800a628:	4649      	mov	r1, r9
 800a62a:	4640      	mov	r0, r8
 800a62c:	f7f6 fa94 	bl	8000b58 <__aeabi_d2iz>
 800a630:	4606      	mov	r6, r0
 800a632:	f7f5 ff77 	bl	8000524 <__aeabi_i2d>
 800a636:	4602      	mov	r2, r0
 800a638:	460b      	mov	r3, r1
 800a63a:	4640      	mov	r0, r8
 800a63c:	4649      	mov	r1, r9
 800a63e:	f7f5 fe23 	bl	8000288 <__aeabi_dsub>
 800a642:	3630      	adds	r6, #48	; 0x30
 800a644:	f805 6b01 	strb.w	r6, [r5], #1
 800a648:	4652      	mov	r2, sl
 800a64a:	465b      	mov	r3, fp
 800a64c:	4680      	mov	r8, r0
 800a64e:	4689      	mov	r9, r1
 800a650:	f7f6 fa44 	bl	8000adc <__aeabi_dcmplt>
 800a654:	2800      	cmp	r0, #0
 800a656:	d163      	bne.n	800a720 <_dtoa_r+0x608>
 800a658:	4642      	mov	r2, r8
 800a65a:	464b      	mov	r3, r9
 800a65c:	4936      	ldr	r1, [pc, #216]	; (800a738 <_dtoa_r+0x620>)
 800a65e:	2000      	movs	r0, #0
 800a660:	f7f5 fe12 	bl	8000288 <__aeabi_dsub>
 800a664:	4652      	mov	r2, sl
 800a666:	465b      	mov	r3, fp
 800a668:	f7f6 fa38 	bl	8000adc <__aeabi_dcmplt>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	f040 80b5 	bne.w	800a7dc <_dtoa_r+0x6c4>
 800a672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a674:	429d      	cmp	r5, r3
 800a676:	d081      	beq.n	800a57c <_dtoa_r+0x464>
 800a678:	4b30      	ldr	r3, [pc, #192]	; (800a73c <_dtoa_r+0x624>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	4650      	mov	r0, sl
 800a67e:	4659      	mov	r1, fp
 800a680:	f7f5 ffba 	bl	80005f8 <__aeabi_dmul>
 800a684:	4b2d      	ldr	r3, [pc, #180]	; (800a73c <_dtoa_r+0x624>)
 800a686:	4682      	mov	sl, r0
 800a688:	468b      	mov	fp, r1
 800a68a:	4640      	mov	r0, r8
 800a68c:	4649      	mov	r1, r9
 800a68e:	2200      	movs	r2, #0
 800a690:	f7f5 ffb2 	bl	80005f8 <__aeabi_dmul>
 800a694:	4680      	mov	r8, r0
 800a696:	4689      	mov	r9, r1
 800a698:	e7c6      	b.n	800a628 <_dtoa_r+0x510>
 800a69a:	4650      	mov	r0, sl
 800a69c:	4659      	mov	r1, fp
 800a69e:	f7f5 ffab 	bl	80005f8 <__aeabi_dmul>
 800a6a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6a4:	9d01      	ldr	r5, [sp, #4]
 800a6a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6a8:	4682      	mov	sl, r0
 800a6aa:	468b      	mov	fp, r1
 800a6ac:	4649      	mov	r1, r9
 800a6ae:	4640      	mov	r0, r8
 800a6b0:	f7f6 fa52 	bl	8000b58 <__aeabi_d2iz>
 800a6b4:	4606      	mov	r6, r0
 800a6b6:	f7f5 ff35 	bl	8000524 <__aeabi_i2d>
 800a6ba:	3630      	adds	r6, #48	; 0x30
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	f7f5 fde0 	bl	8000288 <__aeabi_dsub>
 800a6c8:	f805 6b01 	strb.w	r6, [r5], #1
 800a6cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6ce:	429d      	cmp	r5, r3
 800a6d0:	4680      	mov	r8, r0
 800a6d2:	4689      	mov	r9, r1
 800a6d4:	f04f 0200 	mov.w	r2, #0
 800a6d8:	d124      	bne.n	800a724 <_dtoa_r+0x60c>
 800a6da:	4b1b      	ldr	r3, [pc, #108]	; (800a748 <_dtoa_r+0x630>)
 800a6dc:	4650      	mov	r0, sl
 800a6de:	4659      	mov	r1, fp
 800a6e0:	f7f5 fdd4 	bl	800028c <__adddf3>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	4640      	mov	r0, r8
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	f7f6 fa14 	bl	8000b18 <__aeabi_dcmpgt>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d173      	bne.n	800a7dc <_dtoa_r+0x6c4>
 800a6f4:	4652      	mov	r2, sl
 800a6f6:	465b      	mov	r3, fp
 800a6f8:	4913      	ldr	r1, [pc, #76]	; (800a748 <_dtoa_r+0x630>)
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	f7f5 fdc4 	bl	8000288 <__aeabi_dsub>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	4640      	mov	r0, r8
 800a706:	4649      	mov	r1, r9
 800a708:	f7f6 f9e8 	bl	8000adc <__aeabi_dcmplt>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	f43f af35 	beq.w	800a57c <_dtoa_r+0x464>
 800a712:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a714:	1e6b      	subs	r3, r5, #1
 800a716:	930f      	str	r3, [sp, #60]	; 0x3c
 800a718:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a71c:	2b30      	cmp	r3, #48	; 0x30
 800a71e:	d0f8      	beq.n	800a712 <_dtoa_r+0x5fa>
 800a720:	9700      	str	r7, [sp, #0]
 800a722:	e049      	b.n	800a7b8 <_dtoa_r+0x6a0>
 800a724:	4b05      	ldr	r3, [pc, #20]	; (800a73c <_dtoa_r+0x624>)
 800a726:	f7f5 ff67 	bl	80005f8 <__aeabi_dmul>
 800a72a:	4680      	mov	r8, r0
 800a72c:	4689      	mov	r9, r1
 800a72e:	e7bd      	b.n	800a6ac <_dtoa_r+0x594>
 800a730:	0800c658 	.word	0x0800c658
 800a734:	0800c630 	.word	0x0800c630
 800a738:	3ff00000 	.word	0x3ff00000
 800a73c:	40240000 	.word	0x40240000
 800a740:	401c0000 	.word	0x401c0000
 800a744:	40140000 	.word	0x40140000
 800a748:	3fe00000 	.word	0x3fe00000
 800a74c:	9d01      	ldr	r5, [sp, #4]
 800a74e:	4656      	mov	r6, sl
 800a750:	465f      	mov	r7, fp
 800a752:	4642      	mov	r2, r8
 800a754:	464b      	mov	r3, r9
 800a756:	4630      	mov	r0, r6
 800a758:	4639      	mov	r1, r7
 800a75a:	f7f6 f877 	bl	800084c <__aeabi_ddiv>
 800a75e:	f7f6 f9fb 	bl	8000b58 <__aeabi_d2iz>
 800a762:	4682      	mov	sl, r0
 800a764:	f7f5 fede 	bl	8000524 <__aeabi_i2d>
 800a768:	4642      	mov	r2, r8
 800a76a:	464b      	mov	r3, r9
 800a76c:	f7f5 ff44 	bl	80005f8 <__aeabi_dmul>
 800a770:	4602      	mov	r2, r0
 800a772:	460b      	mov	r3, r1
 800a774:	4630      	mov	r0, r6
 800a776:	4639      	mov	r1, r7
 800a778:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a77c:	f7f5 fd84 	bl	8000288 <__aeabi_dsub>
 800a780:	f805 6b01 	strb.w	r6, [r5], #1
 800a784:	9e01      	ldr	r6, [sp, #4]
 800a786:	9f03      	ldr	r7, [sp, #12]
 800a788:	1bae      	subs	r6, r5, r6
 800a78a:	42b7      	cmp	r7, r6
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	d135      	bne.n	800a7fe <_dtoa_r+0x6e6>
 800a792:	f7f5 fd7b 	bl	800028c <__adddf3>
 800a796:	4642      	mov	r2, r8
 800a798:	464b      	mov	r3, r9
 800a79a:	4606      	mov	r6, r0
 800a79c:	460f      	mov	r7, r1
 800a79e:	f7f6 f9bb 	bl	8000b18 <__aeabi_dcmpgt>
 800a7a2:	b9d0      	cbnz	r0, 800a7da <_dtoa_r+0x6c2>
 800a7a4:	4642      	mov	r2, r8
 800a7a6:	464b      	mov	r3, r9
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	4639      	mov	r1, r7
 800a7ac:	f7f6 f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7b0:	b110      	cbz	r0, 800a7b8 <_dtoa_r+0x6a0>
 800a7b2:	f01a 0f01 	tst.w	sl, #1
 800a7b6:	d110      	bne.n	800a7da <_dtoa_r+0x6c2>
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	ee18 1a10 	vmov	r1, s16
 800a7be:	f000 faf3 	bl	800ada8 <_Bfree>
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	9800      	ldr	r0, [sp, #0]
 800a7c6:	702b      	strb	r3, [r5, #0]
 800a7c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7ca:	3001      	adds	r0, #1
 800a7cc:	6018      	str	r0, [r3, #0]
 800a7ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f43f acf1 	beq.w	800a1b8 <_dtoa_r+0xa0>
 800a7d6:	601d      	str	r5, [r3, #0]
 800a7d8:	e4ee      	b.n	800a1b8 <_dtoa_r+0xa0>
 800a7da:	9f00      	ldr	r7, [sp, #0]
 800a7dc:	462b      	mov	r3, r5
 800a7de:	461d      	mov	r5, r3
 800a7e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7e4:	2a39      	cmp	r2, #57	; 0x39
 800a7e6:	d106      	bne.n	800a7f6 <_dtoa_r+0x6de>
 800a7e8:	9a01      	ldr	r2, [sp, #4]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d1f7      	bne.n	800a7de <_dtoa_r+0x6c6>
 800a7ee:	9901      	ldr	r1, [sp, #4]
 800a7f0:	2230      	movs	r2, #48	; 0x30
 800a7f2:	3701      	adds	r7, #1
 800a7f4:	700a      	strb	r2, [r1, #0]
 800a7f6:	781a      	ldrb	r2, [r3, #0]
 800a7f8:	3201      	adds	r2, #1
 800a7fa:	701a      	strb	r2, [r3, #0]
 800a7fc:	e790      	b.n	800a720 <_dtoa_r+0x608>
 800a7fe:	4ba6      	ldr	r3, [pc, #664]	; (800aa98 <_dtoa_r+0x980>)
 800a800:	2200      	movs	r2, #0
 800a802:	f7f5 fef9 	bl	80005f8 <__aeabi_dmul>
 800a806:	2200      	movs	r2, #0
 800a808:	2300      	movs	r3, #0
 800a80a:	4606      	mov	r6, r0
 800a80c:	460f      	mov	r7, r1
 800a80e:	f7f6 f95b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a812:	2800      	cmp	r0, #0
 800a814:	d09d      	beq.n	800a752 <_dtoa_r+0x63a>
 800a816:	e7cf      	b.n	800a7b8 <_dtoa_r+0x6a0>
 800a818:	9a08      	ldr	r2, [sp, #32]
 800a81a:	2a00      	cmp	r2, #0
 800a81c:	f000 80d7 	beq.w	800a9ce <_dtoa_r+0x8b6>
 800a820:	9a06      	ldr	r2, [sp, #24]
 800a822:	2a01      	cmp	r2, #1
 800a824:	f300 80ba 	bgt.w	800a99c <_dtoa_r+0x884>
 800a828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a82a:	2a00      	cmp	r2, #0
 800a82c:	f000 80b2 	beq.w	800a994 <_dtoa_r+0x87c>
 800a830:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a834:	9e07      	ldr	r6, [sp, #28]
 800a836:	9d04      	ldr	r5, [sp, #16]
 800a838:	9a04      	ldr	r2, [sp, #16]
 800a83a:	441a      	add	r2, r3
 800a83c:	9204      	str	r2, [sp, #16]
 800a83e:	9a05      	ldr	r2, [sp, #20]
 800a840:	2101      	movs	r1, #1
 800a842:	441a      	add	r2, r3
 800a844:	4620      	mov	r0, r4
 800a846:	9205      	str	r2, [sp, #20]
 800a848:	f000 fb66 	bl	800af18 <__i2b>
 800a84c:	4607      	mov	r7, r0
 800a84e:	2d00      	cmp	r5, #0
 800a850:	dd0c      	ble.n	800a86c <_dtoa_r+0x754>
 800a852:	9b05      	ldr	r3, [sp, #20]
 800a854:	2b00      	cmp	r3, #0
 800a856:	dd09      	ble.n	800a86c <_dtoa_r+0x754>
 800a858:	42ab      	cmp	r3, r5
 800a85a:	9a04      	ldr	r2, [sp, #16]
 800a85c:	bfa8      	it	ge
 800a85e:	462b      	movge	r3, r5
 800a860:	1ad2      	subs	r2, r2, r3
 800a862:	9204      	str	r2, [sp, #16]
 800a864:	9a05      	ldr	r2, [sp, #20]
 800a866:	1aed      	subs	r5, r5, r3
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	9305      	str	r3, [sp, #20]
 800a86c:	9b07      	ldr	r3, [sp, #28]
 800a86e:	b31b      	cbz	r3, 800a8b8 <_dtoa_r+0x7a0>
 800a870:	9b08      	ldr	r3, [sp, #32]
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 80af 	beq.w	800a9d6 <_dtoa_r+0x8be>
 800a878:	2e00      	cmp	r6, #0
 800a87a:	dd13      	ble.n	800a8a4 <_dtoa_r+0x78c>
 800a87c:	4639      	mov	r1, r7
 800a87e:	4632      	mov	r2, r6
 800a880:	4620      	mov	r0, r4
 800a882:	f000 fc09 	bl	800b098 <__pow5mult>
 800a886:	ee18 2a10 	vmov	r2, s16
 800a88a:	4601      	mov	r1, r0
 800a88c:	4607      	mov	r7, r0
 800a88e:	4620      	mov	r0, r4
 800a890:	f000 fb58 	bl	800af44 <__multiply>
 800a894:	ee18 1a10 	vmov	r1, s16
 800a898:	4680      	mov	r8, r0
 800a89a:	4620      	mov	r0, r4
 800a89c:	f000 fa84 	bl	800ada8 <_Bfree>
 800a8a0:	ee08 8a10 	vmov	s16, r8
 800a8a4:	9b07      	ldr	r3, [sp, #28]
 800a8a6:	1b9a      	subs	r2, r3, r6
 800a8a8:	d006      	beq.n	800a8b8 <_dtoa_r+0x7a0>
 800a8aa:	ee18 1a10 	vmov	r1, s16
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f000 fbf2 	bl	800b098 <__pow5mult>
 800a8b4:	ee08 0a10 	vmov	s16, r0
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 fb2c 	bl	800af18 <__i2b>
 800a8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	4606      	mov	r6, r0
 800a8c6:	f340 8088 	ble.w	800a9da <_dtoa_r+0x8c2>
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	4601      	mov	r1, r0
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f000 fbe2 	bl	800b098 <__pow5mult>
 800a8d4:	9b06      	ldr	r3, [sp, #24]
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	4606      	mov	r6, r0
 800a8da:	f340 8081 	ble.w	800a9e0 <_dtoa_r+0x8c8>
 800a8de:	f04f 0800 	mov.w	r8, #0
 800a8e2:	6933      	ldr	r3, [r6, #16]
 800a8e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a8e8:	6918      	ldr	r0, [r3, #16]
 800a8ea:	f000 fac5 	bl	800ae78 <__hi0bits>
 800a8ee:	f1c0 0020 	rsb	r0, r0, #32
 800a8f2:	9b05      	ldr	r3, [sp, #20]
 800a8f4:	4418      	add	r0, r3
 800a8f6:	f010 001f 	ands.w	r0, r0, #31
 800a8fa:	f000 8092 	beq.w	800aa22 <_dtoa_r+0x90a>
 800a8fe:	f1c0 0320 	rsb	r3, r0, #32
 800a902:	2b04      	cmp	r3, #4
 800a904:	f340 808a 	ble.w	800aa1c <_dtoa_r+0x904>
 800a908:	f1c0 001c 	rsb	r0, r0, #28
 800a90c:	9b04      	ldr	r3, [sp, #16]
 800a90e:	4403      	add	r3, r0
 800a910:	9304      	str	r3, [sp, #16]
 800a912:	9b05      	ldr	r3, [sp, #20]
 800a914:	4403      	add	r3, r0
 800a916:	4405      	add	r5, r0
 800a918:	9305      	str	r3, [sp, #20]
 800a91a:	9b04      	ldr	r3, [sp, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	dd07      	ble.n	800a930 <_dtoa_r+0x818>
 800a920:	ee18 1a10 	vmov	r1, s16
 800a924:	461a      	mov	r2, r3
 800a926:	4620      	mov	r0, r4
 800a928:	f000 fc10 	bl	800b14c <__lshift>
 800a92c:	ee08 0a10 	vmov	s16, r0
 800a930:	9b05      	ldr	r3, [sp, #20]
 800a932:	2b00      	cmp	r3, #0
 800a934:	dd05      	ble.n	800a942 <_dtoa_r+0x82a>
 800a936:	4631      	mov	r1, r6
 800a938:	461a      	mov	r2, r3
 800a93a:	4620      	mov	r0, r4
 800a93c:	f000 fc06 	bl	800b14c <__lshift>
 800a940:	4606      	mov	r6, r0
 800a942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a944:	2b00      	cmp	r3, #0
 800a946:	d06e      	beq.n	800aa26 <_dtoa_r+0x90e>
 800a948:	ee18 0a10 	vmov	r0, s16
 800a94c:	4631      	mov	r1, r6
 800a94e:	f000 fc6d 	bl	800b22c <__mcmp>
 800a952:	2800      	cmp	r0, #0
 800a954:	da67      	bge.n	800aa26 <_dtoa_r+0x90e>
 800a956:	9b00      	ldr	r3, [sp, #0]
 800a958:	3b01      	subs	r3, #1
 800a95a:	ee18 1a10 	vmov	r1, s16
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	220a      	movs	r2, #10
 800a962:	2300      	movs	r3, #0
 800a964:	4620      	mov	r0, r4
 800a966:	f000 fa41 	bl	800adec <__multadd>
 800a96a:	9b08      	ldr	r3, [sp, #32]
 800a96c:	ee08 0a10 	vmov	s16, r0
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 81b1 	beq.w	800acd8 <_dtoa_r+0xbc0>
 800a976:	2300      	movs	r3, #0
 800a978:	4639      	mov	r1, r7
 800a97a:	220a      	movs	r2, #10
 800a97c:	4620      	mov	r0, r4
 800a97e:	f000 fa35 	bl	800adec <__multadd>
 800a982:	9b02      	ldr	r3, [sp, #8]
 800a984:	2b00      	cmp	r3, #0
 800a986:	4607      	mov	r7, r0
 800a988:	f300 808e 	bgt.w	800aaa8 <_dtoa_r+0x990>
 800a98c:	9b06      	ldr	r3, [sp, #24]
 800a98e:	2b02      	cmp	r3, #2
 800a990:	dc51      	bgt.n	800aa36 <_dtoa_r+0x91e>
 800a992:	e089      	b.n	800aaa8 <_dtoa_r+0x990>
 800a994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a996:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a99a:	e74b      	b.n	800a834 <_dtoa_r+0x71c>
 800a99c:	9b03      	ldr	r3, [sp, #12]
 800a99e:	1e5e      	subs	r6, r3, #1
 800a9a0:	9b07      	ldr	r3, [sp, #28]
 800a9a2:	42b3      	cmp	r3, r6
 800a9a4:	bfbf      	itttt	lt
 800a9a6:	9b07      	ldrlt	r3, [sp, #28]
 800a9a8:	9607      	strlt	r6, [sp, #28]
 800a9aa:	1af2      	sublt	r2, r6, r3
 800a9ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a9ae:	bfb6      	itet	lt
 800a9b0:	189b      	addlt	r3, r3, r2
 800a9b2:	1b9e      	subge	r6, r3, r6
 800a9b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a9b6:	9b03      	ldr	r3, [sp, #12]
 800a9b8:	bfb8      	it	lt
 800a9ba:	2600      	movlt	r6, #0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	bfb7      	itett	lt
 800a9c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a9c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a9c8:	1a9d      	sublt	r5, r3, r2
 800a9ca:	2300      	movlt	r3, #0
 800a9cc:	e734      	b.n	800a838 <_dtoa_r+0x720>
 800a9ce:	9e07      	ldr	r6, [sp, #28]
 800a9d0:	9d04      	ldr	r5, [sp, #16]
 800a9d2:	9f08      	ldr	r7, [sp, #32]
 800a9d4:	e73b      	b.n	800a84e <_dtoa_r+0x736>
 800a9d6:	9a07      	ldr	r2, [sp, #28]
 800a9d8:	e767      	b.n	800a8aa <_dtoa_r+0x792>
 800a9da:	9b06      	ldr	r3, [sp, #24]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	dc18      	bgt.n	800aa12 <_dtoa_r+0x8fa>
 800a9e0:	f1ba 0f00 	cmp.w	sl, #0
 800a9e4:	d115      	bne.n	800aa12 <_dtoa_r+0x8fa>
 800a9e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9ea:	b993      	cbnz	r3, 800aa12 <_dtoa_r+0x8fa>
 800a9ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a9f0:	0d1b      	lsrs	r3, r3, #20
 800a9f2:	051b      	lsls	r3, r3, #20
 800a9f4:	b183      	cbz	r3, 800aa18 <_dtoa_r+0x900>
 800a9f6:	9b04      	ldr	r3, [sp, #16]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	9304      	str	r3, [sp, #16]
 800a9fc:	9b05      	ldr	r3, [sp, #20]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	9305      	str	r3, [sp, #20]
 800aa02:	f04f 0801 	mov.w	r8, #1
 800aa06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f47f af6a 	bne.w	800a8e2 <_dtoa_r+0x7ca>
 800aa0e:	2001      	movs	r0, #1
 800aa10:	e76f      	b.n	800a8f2 <_dtoa_r+0x7da>
 800aa12:	f04f 0800 	mov.w	r8, #0
 800aa16:	e7f6      	b.n	800aa06 <_dtoa_r+0x8ee>
 800aa18:	4698      	mov	r8, r3
 800aa1a:	e7f4      	b.n	800aa06 <_dtoa_r+0x8ee>
 800aa1c:	f43f af7d 	beq.w	800a91a <_dtoa_r+0x802>
 800aa20:	4618      	mov	r0, r3
 800aa22:	301c      	adds	r0, #28
 800aa24:	e772      	b.n	800a90c <_dtoa_r+0x7f4>
 800aa26:	9b03      	ldr	r3, [sp, #12]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	dc37      	bgt.n	800aa9c <_dtoa_r+0x984>
 800aa2c:	9b06      	ldr	r3, [sp, #24]
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	dd34      	ble.n	800aa9c <_dtoa_r+0x984>
 800aa32:	9b03      	ldr	r3, [sp, #12]
 800aa34:	9302      	str	r3, [sp, #8]
 800aa36:	9b02      	ldr	r3, [sp, #8]
 800aa38:	b96b      	cbnz	r3, 800aa56 <_dtoa_r+0x93e>
 800aa3a:	4631      	mov	r1, r6
 800aa3c:	2205      	movs	r2, #5
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f000 f9d4 	bl	800adec <__multadd>
 800aa44:	4601      	mov	r1, r0
 800aa46:	4606      	mov	r6, r0
 800aa48:	ee18 0a10 	vmov	r0, s16
 800aa4c:	f000 fbee 	bl	800b22c <__mcmp>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f73f adbb 	bgt.w	800a5cc <_dtoa_r+0x4b4>
 800aa56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa58:	9d01      	ldr	r5, [sp, #4]
 800aa5a:	43db      	mvns	r3, r3
 800aa5c:	9300      	str	r3, [sp, #0]
 800aa5e:	f04f 0800 	mov.w	r8, #0
 800aa62:	4631      	mov	r1, r6
 800aa64:	4620      	mov	r0, r4
 800aa66:	f000 f99f 	bl	800ada8 <_Bfree>
 800aa6a:	2f00      	cmp	r7, #0
 800aa6c:	f43f aea4 	beq.w	800a7b8 <_dtoa_r+0x6a0>
 800aa70:	f1b8 0f00 	cmp.w	r8, #0
 800aa74:	d005      	beq.n	800aa82 <_dtoa_r+0x96a>
 800aa76:	45b8      	cmp	r8, r7
 800aa78:	d003      	beq.n	800aa82 <_dtoa_r+0x96a>
 800aa7a:	4641      	mov	r1, r8
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f000 f993 	bl	800ada8 <_Bfree>
 800aa82:	4639      	mov	r1, r7
 800aa84:	4620      	mov	r0, r4
 800aa86:	f000 f98f 	bl	800ada8 <_Bfree>
 800aa8a:	e695      	b.n	800a7b8 <_dtoa_r+0x6a0>
 800aa8c:	2600      	movs	r6, #0
 800aa8e:	4637      	mov	r7, r6
 800aa90:	e7e1      	b.n	800aa56 <_dtoa_r+0x93e>
 800aa92:	9700      	str	r7, [sp, #0]
 800aa94:	4637      	mov	r7, r6
 800aa96:	e599      	b.n	800a5cc <_dtoa_r+0x4b4>
 800aa98:	40240000 	.word	0x40240000
 800aa9c:	9b08      	ldr	r3, [sp, #32]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f000 80ca 	beq.w	800ac38 <_dtoa_r+0xb20>
 800aaa4:	9b03      	ldr	r3, [sp, #12]
 800aaa6:	9302      	str	r3, [sp, #8]
 800aaa8:	2d00      	cmp	r5, #0
 800aaaa:	dd05      	ble.n	800aab8 <_dtoa_r+0x9a0>
 800aaac:	4639      	mov	r1, r7
 800aaae:	462a      	mov	r2, r5
 800aab0:	4620      	mov	r0, r4
 800aab2:	f000 fb4b 	bl	800b14c <__lshift>
 800aab6:	4607      	mov	r7, r0
 800aab8:	f1b8 0f00 	cmp.w	r8, #0
 800aabc:	d05b      	beq.n	800ab76 <_dtoa_r+0xa5e>
 800aabe:	6879      	ldr	r1, [r7, #4]
 800aac0:	4620      	mov	r0, r4
 800aac2:	f000 f931 	bl	800ad28 <_Balloc>
 800aac6:	4605      	mov	r5, r0
 800aac8:	b928      	cbnz	r0, 800aad6 <_dtoa_r+0x9be>
 800aaca:	4b87      	ldr	r3, [pc, #540]	; (800ace8 <_dtoa_r+0xbd0>)
 800aacc:	4602      	mov	r2, r0
 800aace:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aad2:	f7ff bb3b 	b.w	800a14c <_dtoa_r+0x34>
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	3202      	adds	r2, #2
 800aada:	0092      	lsls	r2, r2, #2
 800aadc:	f107 010c 	add.w	r1, r7, #12
 800aae0:	300c      	adds	r0, #12
 800aae2:	f000 f913 	bl	800ad0c <memcpy>
 800aae6:	2201      	movs	r2, #1
 800aae8:	4629      	mov	r1, r5
 800aaea:	4620      	mov	r0, r4
 800aaec:	f000 fb2e 	bl	800b14c <__lshift>
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	f103 0901 	add.w	r9, r3, #1
 800aaf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800aafa:	4413      	add	r3, r2
 800aafc:	9305      	str	r3, [sp, #20]
 800aafe:	f00a 0301 	and.w	r3, sl, #1
 800ab02:	46b8      	mov	r8, r7
 800ab04:	9304      	str	r3, [sp, #16]
 800ab06:	4607      	mov	r7, r0
 800ab08:	4631      	mov	r1, r6
 800ab0a:	ee18 0a10 	vmov	r0, s16
 800ab0e:	f7ff fa75 	bl	8009ffc <quorem>
 800ab12:	4641      	mov	r1, r8
 800ab14:	9002      	str	r0, [sp, #8]
 800ab16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ab1a:	ee18 0a10 	vmov	r0, s16
 800ab1e:	f000 fb85 	bl	800b22c <__mcmp>
 800ab22:	463a      	mov	r2, r7
 800ab24:	9003      	str	r0, [sp, #12]
 800ab26:	4631      	mov	r1, r6
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f000 fb9b 	bl	800b264 <__mdiff>
 800ab2e:	68c2      	ldr	r2, [r0, #12]
 800ab30:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800ab34:	4605      	mov	r5, r0
 800ab36:	bb02      	cbnz	r2, 800ab7a <_dtoa_r+0xa62>
 800ab38:	4601      	mov	r1, r0
 800ab3a:	ee18 0a10 	vmov	r0, s16
 800ab3e:	f000 fb75 	bl	800b22c <__mcmp>
 800ab42:	4602      	mov	r2, r0
 800ab44:	4629      	mov	r1, r5
 800ab46:	4620      	mov	r0, r4
 800ab48:	9207      	str	r2, [sp, #28]
 800ab4a:	f000 f92d 	bl	800ada8 <_Bfree>
 800ab4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ab52:	ea43 0102 	orr.w	r1, r3, r2
 800ab56:	9b04      	ldr	r3, [sp, #16]
 800ab58:	430b      	orrs	r3, r1
 800ab5a:	464d      	mov	r5, r9
 800ab5c:	d10f      	bne.n	800ab7e <_dtoa_r+0xa66>
 800ab5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ab62:	d02a      	beq.n	800abba <_dtoa_r+0xaa2>
 800ab64:	9b03      	ldr	r3, [sp, #12]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	dd02      	ble.n	800ab70 <_dtoa_r+0xa58>
 800ab6a:	9b02      	ldr	r3, [sp, #8]
 800ab6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ab70:	f88b a000 	strb.w	sl, [fp]
 800ab74:	e775      	b.n	800aa62 <_dtoa_r+0x94a>
 800ab76:	4638      	mov	r0, r7
 800ab78:	e7ba      	b.n	800aaf0 <_dtoa_r+0x9d8>
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	e7e2      	b.n	800ab44 <_dtoa_r+0xa2c>
 800ab7e:	9b03      	ldr	r3, [sp, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	db04      	blt.n	800ab8e <_dtoa_r+0xa76>
 800ab84:	9906      	ldr	r1, [sp, #24]
 800ab86:	430b      	orrs	r3, r1
 800ab88:	9904      	ldr	r1, [sp, #16]
 800ab8a:	430b      	orrs	r3, r1
 800ab8c:	d122      	bne.n	800abd4 <_dtoa_r+0xabc>
 800ab8e:	2a00      	cmp	r2, #0
 800ab90:	ddee      	ble.n	800ab70 <_dtoa_r+0xa58>
 800ab92:	ee18 1a10 	vmov	r1, s16
 800ab96:	2201      	movs	r2, #1
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f000 fad7 	bl	800b14c <__lshift>
 800ab9e:	4631      	mov	r1, r6
 800aba0:	ee08 0a10 	vmov	s16, r0
 800aba4:	f000 fb42 	bl	800b22c <__mcmp>
 800aba8:	2800      	cmp	r0, #0
 800abaa:	dc03      	bgt.n	800abb4 <_dtoa_r+0xa9c>
 800abac:	d1e0      	bne.n	800ab70 <_dtoa_r+0xa58>
 800abae:	f01a 0f01 	tst.w	sl, #1
 800abb2:	d0dd      	beq.n	800ab70 <_dtoa_r+0xa58>
 800abb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abb8:	d1d7      	bne.n	800ab6a <_dtoa_r+0xa52>
 800abba:	2339      	movs	r3, #57	; 0x39
 800abbc:	f88b 3000 	strb.w	r3, [fp]
 800abc0:	462b      	mov	r3, r5
 800abc2:	461d      	mov	r5, r3
 800abc4:	3b01      	subs	r3, #1
 800abc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800abca:	2a39      	cmp	r2, #57	; 0x39
 800abcc:	d071      	beq.n	800acb2 <_dtoa_r+0xb9a>
 800abce:	3201      	adds	r2, #1
 800abd0:	701a      	strb	r2, [r3, #0]
 800abd2:	e746      	b.n	800aa62 <_dtoa_r+0x94a>
 800abd4:	2a00      	cmp	r2, #0
 800abd6:	dd07      	ble.n	800abe8 <_dtoa_r+0xad0>
 800abd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800abdc:	d0ed      	beq.n	800abba <_dtoa_r+0xaa2>
 800abde:	f10a 0301 	add.w	r3, sl, #1
 800abe2:	f88b 3000 	strb.w	r3, [fp]
 800abe6:	e73c      	b.n	800aa62 <_dtoa_r+0x94a>
 800abe8:	9b05      	ldr	r3, [sp, #20]
 800abea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800abee:	4599      	cmp	r9, r3
 800abf0:	d047      	beq.n	800ac82 <_dtoa_r+0xb6a>
 800abf2:	ee18 1a10 	vmov	r1, s16
 800abf6:	2300      	movs	r3, #0
 800abf8:	220a      	movs	r2, #10
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 f8f6 	bl	800adec <__multadd>
 800ac00:	45b8      	cmp	r8, r7
 800ac02:	ee08 0a10 	vmov	s16, r0
 800ac06:	f04f 0300 	mov.w	r3, #0
 800ac0a:	f04f 020a 	mov.w	r2, #10
 800ac0e:	4641      	mov	r1, r8
 800ac10:	4620      	mov	r0, r4
 800ac12:	d106      	bne.n	800ac22 <_dtoa_r+0xb0a>
 800ac14:	f000 f8ea 	bl	800adec <__multadd>
 800ac18:	4680      	mov	r8, r0
 800ac1a:	4607      	mov	r7, r0
 800ac1c:	f109 0901 	add.w	r9, r9, #1
 800ac20:	e772      	b.n	800ab08 <_dtoa_r+0x9f0>
 800ac22:	f000 f8e3 	bl	800adec <__multadd>
 800ac26:	4639      	mov	r1, r7
 800ac28:	4680      	mov	r8, r0
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	220a      	movs	r2, #10
 800ac2e:	4620      	mov	r0, r4
 800ac30:	f000 f8dc 	bl	800adec <__multadd>
 800ac34:	4607      	mov	r7, r0
 800ac36:	e7f1      	b.n	800ac1c <_dtoa_r+0xb04>
 800ac38:	9b03      	ldr	r3, [sp, #12]
 800ac3a:	9302      	str	r3, [sp, #8]
 800ac3c:	9d01      	ldr	r5, [sp, #4]
 800ac3e:	ee18 0a10 	vmov	r0, s16
 800ac42:	4631      	mov	r1, r6
 800ac44:	f7ff f9da 	bl	8009ffc <quorem>
 800ac48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac4c:	9b01      	ldr	r3, [sp, #4]
 800ac4e:	f805 ab01 	strb.w	sl, [r5], #1
 800ac52:	1aea      	subs	r2, r5, r3
 800ac54:	9b02      	ldr	r3, [sp, #8]
 800ac56:	4293      	cmp	r3, r2
 800ac58:	dd09      	ble.n	800ac6e <_dtoa_r+0xb56>
 800ac5a:	ee18 1a10 	vmov	r1, s16
 800ac5e:	2300      	movs	r3, #0
 800ac60:	220a      	movs	r2, #10
 800ac62:	4620      	mov	r0, r4
 800ac64:	f000 f8c2 	bl	800adec <__multadd>
 800ac68:	ee08 0a10 	vmov	s16, r0
 800ac6c:	e7e7      	b.n	800ac3e <_dtoa_r+0xb26>
 800ac6e:	9b02      	ldr	r3, [sp, #8]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	bfc8      	it	gt
 800ac74:	461d      	movgt	r5, r3
 800ac76:	9b01      	ldr	r3, [sp, #4]
 800ac78:	bfd8      	it	le
 800ac7a:	2501      	movle	r5, #1
 800ac7c:	441d      	add	r5, r3
 800ac7e:	f04f 0800 	mov.w	r8, #0
 800ac82:	ee18 1a10 	vmov	r1, s16
 800ac86:	2201      	movs	r2, #1
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 fa5f 	bl	800b14c <__lshift>
 800ac8e:	4631      	mov	r1, r6
 800ac90:	ee08 0a10 	vmov	s16, r0
 800ac94:	f000 faca 	bl	800b22c <__mcmp>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	dc91      	bgt.n	800abc0 <_dtoa_r+0xaa8>
 800ac9c:	d102      	bne.n	800aca4 <_dtoa_r+0xb8c>
 800ac9e:	f01a 0f01 	tst.w	sl, #1
 800aca2:	d18d      	bne.n	800abc0 <_dtoa_r+0xaa8>
 800aca4:	462b      	mov	r3, r5
 800aca6:	461d      	mov	r5, r3
 800aca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acac:	2a30      	cmp	r2, #48	; 0x30
 800acae:	d0fa      	beq.n	800aca6 <_dtoa_r+0xb8e>
 800acb0:	e6d7      	b.n	800aa62 <_dtoa_r+0x94a>
 800acb2:	9a01      	ldr	r2, [sp, #4]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d184      	bne.n	800abc2 <_dtoa_r+0xaaa>
 800acb8:	9b00      	ldr	r3, [sp, #0]
 800acba:	3301      	adds	r3, #1
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	2331      	movs	r3, #49	; 0x31
 800acc0:	7013      	strb	r3, [r2, #0]
 800acc2:	e6ce      	b.n	800aa62 <_dtoa_r+0x94a>
 800acc4:	4b09      	ldr	r3, [pc, #36]	; (800acec <_dtoa_r+0xbd4>)
 800acc6:	f7ff ba95 	b.w	800a1f4 <_dtoa_r+0xdc>
 800acca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800accc:	2b00      	cmp	r3, #0
 800acce:	f47f aa6e 	bne.w	800a1ae <_dtoa_r+0x96>
 800acd2:	4b07      	ldr	r3, [pc, #28]	; (800acf0 <_dtoa_r+0xbd8>)
 800acd4:	f7ff ba8e 	b.w	800a1f4 <_dtoa_r+0xdc>
 800acd8:	9b02      	ldr	r3, [sp, #8]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	dcae      	bgt.n	800ac3c <_dtoa_r+0xb24>
 800acde:	9b06      	ldr	r3, [sp, #24]
 800ace0:	2b02      	cmp	r3, #2
 800ace2:	f73f aea8 	bgt.w	800aa36 <_dtoa_r+0x91e>
 800ace6:	e7a9      	b.n	800ac3c <_dtoa_r+0xb24>
 800ace8:	0800c5bf 	.word	0x0800c5bf
 800acec:	0800c51c 	.word	0x0800c51c
 800acf0:	0800c540 	.word	0x0800c540

0800acf4 <_localeconv_r>:
 800acf4:	4800      	ldr	r0, [pc, #0]	; (800acf8 <_localeconv_r+0x4>)
 800acf6:	4770      	bx	lr
 800acf8:	20000160 	.word	0x20000160

0800acfc <malloc>:
 800acfc:	4b02      	ldr	r3, [pc, #8]	; (800ad08 <malloc+0xc>)
 800acfe:	4601      	mov	r1, r0
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	f000 bc17 	b.w	800b534 <_malloc_r>
 800ad06:	bf00      	nop
 800ad08:	2000000c 	.word	0x2000000c

0800ad0c <memcpy>:
 800ad0c:	440a      	add	r2, r1
 800ad0e:	4291      	cmp	r1, r2
 800ad10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ad14:	d100      	bne.n	800ad18 <memcpy+0xc>
 800ad16:	4770      	bx	lr
 800ad18:	b510      	push	{r4, lr}
 800ad1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad22:	4291      	cmp	r1, r2
 800ad24:	d1f9      	bne.n	800ad1a <memcpy+0xe>
 800ad26:	bd10      	pop	{r4, pc}

0800ad28 <_Balloc>:
 800ad28:	b570      	push	{r4, r5, r6, lr}
 800ad2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	460d      	mov	r5, r1
 800ad30:	b976      	cbnz	r6, 800ad50 <_Balloc+0x28>
 800ad32:	2010      	movs	r0, #16
 800ad34:	f7ff ffe2 	bl	800acfc <malloc>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	6260      	str	r0, [r4, #36]	; 0x24
 800ad3c:	b920      	cbnz	r0, 800ad48 <_Balloc+0x20>
 800ad3e:	4b18      	ldr	r3, [pc, #96]	; (800ada0 <_Balloc+0x78>)
 800ad40:	4818      	ldr	r0, [pc, #96]	; (800ada4 <_Balloc+0x7c>)
 800ad42:	2166      	movs	r1, #102	; 0x66
 800ad44:	f000 fdd6 	bl	800b8f4 <__assert_func>
 800ad48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad4c:	6006      	str	r6, [r0, #0]
 800ad4e:	60c6      	str	r6, [r0, #12]
 800ad50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ad52:	68f3      	ldr	r3, [r6, #12]
 800ad54:	b183      	cbz	r3, 800ad78 <_Balloc+0x50>
 800ad56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad5e:	b9b8      	cbnz	r0, 800ad90 <_Balloc+0x68>
 800ad60:	2101      	movs	r1, #1
 800ad62:	fa01 f605 	lsl.w	r6, r1, r5
 800ad66:	1d72      	adds	r2, r6, #5
 800ad68:	0092      	lsls	r2, r2, #2
 800ad6a:	4620      	mov	r0, r4
 800ad6c:	f000 fb60 	bl	800b430 <_calloc_r>
 800ad70:	b160      	cbz	r0, 800ad8c <_Balloc+0x64>
 800ad72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad76:	e00e      	b.n	800ad96 <_Balloc+0x6e>
 800ad78:	2221      	movs	r2, #33	; 0x21
 800ad7a:	2104      	movs	r1, #4
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 fb57 	bl	800b430 <_calloc_r>
 800ad82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad84:	60f0      	str	r0, [r6, #12]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1e4      	bne.n	800ad56 <_Balloc+0x2e>
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}
 800ad90:	6802      	ldr	r2, [r0, #0]
 800ad92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad96:	2300      	movs	r3, #0
 800ad98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad9c:	e7f7      	b.n	800ad8e <_Balloc+0x66>
 800ad9e:	bf00      	nop
 800ada0:	0800c54d 	.word	0x0800c54d
 800ada4:	0800c5d0 	.word	0x0800c5d0

0800ada8 <_Bfree>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800adac:	4605      	mov	r5, r0
 800adae:	460c      	mov	r4, r1
 800adb0:	b976      	cbnz	r6, 800add0 <_Bfree+0x28>
 800adb2:	2010      	movs	r0, #16
 800adb4:	f7ff ffa2 	bl	800acfc <malloc>
 800adb8:	4602      	mov	r2, r0
 800adba:	6268      	str	r0, [r5, #36]	; 0x24
 800adbc:	b920      	cbnz	r0, 800adc8 <_Bfree+0x20>
 800adbe:	4b09      	ldr	r3, [pc, #36]	; (800ade4 <_Bfree+0x3c>)
 800adc0:	4809      	ldr	r0, [pc, #36]	; (800ade8 <_Bfree+0x40>)
 800adc2:	218a      	movs	r1, #138	; 0x8a
 800adc4:	f000 fd96 	bl	800b8f4 <__assert_func>
 800adc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adcc:	6006      	str	r6, [r0, #0]
 800adce:	60c6      	str	r6, [r0, #12]
 800add0:	b13c      	cbz	r4, 800ade2 <_Bfree+0x3a>
 800add2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800add4:	6862      	ldr	r2, [r4, #4]
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800addc:	6021      	str	r1, [r4, #0]
 800adde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ade2:	bd70      	pop	{r4, r5, r6, pc}
 800ade4:	0800c54d 	.word	0x0800c54d
 800ade8:	0800c5d0 	.word	0x0800c5d0

0800adec <__multadd>:
 800adec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf0:	690d      	ldr	r5, [r1, #16]
 800adf2:	4607      	mov	r7, r0
 800adf4:	460c      	mov	r4, r1
 800adf6:	461e      	mov	r6, r3
 800adf8:	f101 0c14 	add.w	ip, r1, #20
 800adfc:	2000      	movs	r0, #0
 800adfe:	f8dc 3000 	ldr.w	r3, [ip]
 800ae02:	b299      	uxth	r1, r3
 800ae04:	fb02 6101 	mla	r1, r2, r1, r6
 800ae08:	0c1e      	lsrs	r6, r3, #16
 800ae0a:	0c0b      	lsrs	r3, r1, #16
 800ae0c:	fb02 3306 	mla	r3, r2, r6, r3
 800ae10:	b289      	uxth	r1, r1
 800ae12:	3001      	adds	r0, #1
 800ae14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae18:	4285      	cmp	r5, r0
 800ae1a:	f84c 1b04 	str.w	r1, [ip], #4
 800ae1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae22:	dcec      	bgt.n	800adfe <__multadd+0x12>
 800ae24:	b30e      	cbz	r6, 800ae6a <__multadd+0x7e>
 800ae26:	68a3      	ldr	r3, [r4, #8]
 800ae28:	42ab      	cmp	r3, r5
 800ae2a:	dc19      	bgt.n	800ae60 <__multadd+0x74>
 800ae2c:	6861      	ldr	r1, [r4, #4]
 800ae2e:	4638      	mov	r0, r7
 800ae30:	3101      	adds	r1, #1
 800ae32:	f7ff ff79 	bl	800ad28 <_Balloc>
 800ae36:	4680      	mov	r8, r0
 800ae38:	b928      	cbnz	r0, 800ae46 <__multadd+0x5a>
 800ae3a:	4602      	mov	r2, r0
 800ae3c:	4b0c      	ldr	r3, [pc, #48]	; (800ae70 <__multadd+0x84>)
 800ae3e:	480d      	ldr	r0, [pc, #52]	; (800ae74 <__multadd+0x88>)
 800ae40:	21b5      	movs	r1, #181	; 0xb5
 800ae42:	f000 fd57 	bl	800b8f4 <__assert_func>
 800ae46:	6922      	ldr	r2, [r4, #16]
 800ae48:	3202      	adds	r2, #2
 800ae4a:	f104 010c 	add.w	r1, r4, #12
 800ae4e:	0092      	lsls	r2, r2, #2
 800ae50:	300c      	adds	r0, #12
 800ae52:	f7ff ff5b 	bl	800ad0c <memcpy>
 800ae56:	4621      	mov	r1, r4
 800ae58:	4638      	mov	r0, r7
 800ae5a:	f7ff ffa5 	bl	800ada8 <_Bfree>
 800ae5e:	4644      	mov	r4, r8
 800ae60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae64:	3501      	adds	r5, #1
 800ae66:	615e      	str	r6, [r3, #20]
 800ae68:	6125      	str	r5, [r4, #16]
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae70:	0800c5bf 	.word	0x0800c5bf
 800ae74:	0800c5d0 	.word	0x0800c5d0

0800ae78 <__hi0bits>:
 800ae78:	0c03      	lsrs	r3, r0, #16
 800ae7a:	041b      	lsls	r3, r3, #16
 800ae7c:	b9d3      	cbnz	r3, 800aeb4 <__hi0bits+0x3c>
 800ae7e:	0400      	lsls	r0, r0, #16
 800ae80:	2310      	movs	r3, #16
 800ae82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ae86:	bf04      	itt	eq
 800ae88:	0200      	lsleq	r0, r0, #8
 800ae8a:	3308      	addeq	r3, #8
 800ae8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ae90:	bf04      	itt	eq
 800ae92:	0100      	lsleq	r0, r0, #4
 800ae94:	3304      	addeq	r3, #4
 800ae96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ae9a:	bf04      	itt	eq
 800ae9c:	0080      	lsleq	r0, r0, #2
 800ae9e:	3302      	addeq	r3, #2
 800aea0:	2800      	cmp	r0, #0
 800aea2:	db05      	blt.n	800aeb0 <__hi0bits+0x38>
 800aea4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aea8:	f103 0301 	add.w	r3, r3, #1
 800aeac:	bf08      	it	eq
 800aeae:	2320      	moveq	r3, #32
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	4770      	bx	lr
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	e7e4      	b.n	800ae82 <__hi0bits+0xa>

0800aeb8 <__lo0bits>:
 800aeb8:	6803      	ldr	r3, [r0, #0]
 800aeba:	f013 0207 	ands.w	r2, r3, #7
 800aebe:	4601      	mov	r1, r0
 800aec0:	d00b      	beq.n	800aeda <__lo0bits+0x22>
 800aec2:	07da      	lsls	r2, r3, #31
 800aec4:	d423      	bmi.n	800af0e <__lo0bits+0x56>
 800aec6:	0798      	lsls	r0, r3, #30
 800aec8:	bf49      	itett	mi
 800aeca:	085b      	lsrmi	r3, r3, #1
 800aecc:	089b      	lsrpl	r3, r3, #2
 800aece:	2001      	movmi	r0, #1
 800aed0:	600b      	strmi	r3, [r1, #0]
 800aed2:	bf5c      	itt	pl
 800aed4:	600b      	strpl	r3, [r1, #0]
 800aed6:	2002      	movpl	r0, #2
 800aed8:	4770      	bx	lr
 800aeda:	b298      	uxth	r0, r3
 800aedc:	b9a8      	cbnz	r0, 800af0a <__lo0bits+0x52>
 800aede:	0c1b      	lsrs	r3, r3, #16
 800aee0:	2010      	movs	r0, #16
 800aee2:	b2da      	uxtb	r2, r3
 800aee4:	b90a      	cbnz	r2, 800aeea <__lo0bits+0x32>
 800aee6:	3008      	adds	r0, #8
 800aee8:	0a1b      	lsrs	r3, r3, #8
 800aeea:	071a      	lsls	r2, r3, #28
 800aeec:	bf04      	itt	eq
 800aeee:	091b      	lsreq	r3, r3, #4
 800aef0:	3004      	addeq	r0, #4
 800aef2:	079a      	lsls	r2, r3, #30
 800aef4:	bf04      	itt	eq
 800aef6:	089b      	lsreq	r3, r3, #2
 800aef8:	3002      	addeq	r0, #2
 800aefa:	07da      	lsls	r2, r3, #31
 800aefc:	d403      	bmi.n	800af06 <__lo0bits+0x4e>
 800aefe:	085b      	lsrs	r3, r3, #1
 800af00:	f100 0001 	add.w	r0, r0, #1
 800af04:	d005      	beq.n	800af12 <__lo0bits+0x5a>
 800af06:	600b      	str	r3, [r1, #0]
 800af08:	4770      	bx	lr
 800af0a:	4610      	mov	r0, r2
 800af0c:	e7e9      	b.n	800aee2 <__lo0bits+0x2a>
 800af0e:	2000      	movs	r0, #0
 800af10:	4770      	bx	lr
 800af12:	2020      	movs	r0, #32
 800af14:	4770      	bx	lr
	...

0800af18 <__i2b>:
 800af18:	b510      	push	{r4, lr}
 800af1a:	460c      	mov	r4, r1
 800af1c:	2101      	movs	r1, #1
 800af1e:	f7ff ff03 	bl	800ad28 <_Balloc>
 800af22:	4602      	mov	r2, r0
 800af24:	b928      	cbnz	r0, 800af32 <__i2b+0x1a>
 800af26:	4b05      	ldr	r3, [pc, #20]	; (800af3c <__i2b+0x24>)
 800af28:	4805      	ldr	r0, [pc, #20]	; (800af40 <__i2b+0x28>)
 800af2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800af2e:	f000 fce1 	bl	800b8f4 <__assert_func>
 800af32:	2301      	movs	r3, #1
 800af34:	6144      	str	r4, [r0, #20]
 800af36:	6103      	str	r3, [r0, #16]
 800af38:	bd10      	pop	{r4, pc}
 800af3a:	bf00      	nop
 800af3c:	0800c5bf 	.word	0x0800c5bf
 800af40:	0800c5d0 	.word	0x0800c5d0

0800af44 <__multiply>:
 800af44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af48:	4691      	mov	r9, r2
 800af4a:	690a      	ldr	r2, [r1, #16]
 800af4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af50:	429a      	cmp	r2, r3
 800af52:	bfb8      	it	lt
 800af54:	460b      	movlt	r3, r1
 800af56:	460c      	mov	r4, r1
 800af58:	bfbc      	itt	lt
 800af5a:	464c      	movlt	r4, r9
 800af5c:	4699      	movlt	r9, r3
 800af5e:	6927      	ldr	r7, [r4, #16]
 800af60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af64:	68a3      	ldr	r3, [r4, #8]
 800af66:	6861      	ldr	r1, [r4, #4]
 800af68:	eb07 060a 	add.w	r6, r7, sl
 800af6c:	42b3      	cmp	r3, r6
 800af6e:	b085      	sub	sp, #20
 800af70:	bfb8      	it	lt
 800af72:	3101      	addlt	r1, #1
 800af74:	f7ff fed8 	bl	800ad28 <_Balloc>
 800af78:	b930      	cbnz	r0, 800af88 <__multiply+0x44>
 800af7a:	4602      	mov	r2, r0
 800af7c:	4b44      	ldr	r3, [pc, #272]	; (800b090 <__multiply+0x14c>)
 800af7e:	4845      	ldr	r0, [pc, #276]	; (800b094 <__multiply+0x150>)
 800af80:	f240 115d 	movw	r1, #349	; 0x15d
 800af84:	f000 fcb6 	bl	800b8f4 <__assert_func>
 800af88:	f100 0514 	add.w	r5, r0, #20
 800af8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af90:	462b      	mov	r3, r5
 800af92:	2200      	movs	r2, #0
 800af94:	4543      	cmp	r3, r8
 800af96:	d321      	bcc.n	800afdc <__multiply+0x98>
 800af98:	f104 0314 	add.w	r3, r4, #20
 800af9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800afa0:	f109 0314 	add.w	r3, r9, #20
 800afa4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800afa8:	9202      	str	r2, [sp, #8]
 800afaa:	1b3a      	subs	r2, r7, r4
 800afac:	3a15      	subs	r2, #21
 800afae:	f022 0203 	bic.w	r2, r2, #3
 800afb2:	3204      	adds	r2, #4
 800afb4:	f104 0115 	add.w	r1, r4, #21
 800afb8:	428f      	cmp	r7, r1
 800afba:	bf38      	it	cc
 800afbc:	2204      	movcc	r2, #4
 800afbe:	9201      	str	r2, [sp, #4]
 800afc0:	9a02      	ldr	r2, [sp, #8]
 800afc2:	9303      	str	r3, [sp, #12]
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d80c      	bhi.n	800afe2 <__multiply+0x9e>
 800afc8:	2e00      	cmp	r6, #0
 800afca:	dd03      	ble.n	800afd4 <__multiply+0x90>
 800afcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d05a      	beq.n	800b08a <__multiply+0x146>
 800afd4:	6106      	str	r6, [r0, #16]
 800afd6:	b005      	add	sp, #20
 800afd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afdc:	f843 2b04 	str.w	r2, [r3], #4
 800afe0:	e7d8      	b.n	800af94 <__multiply+0x50>
 800afe2:	f8b3 a000 	ldrh.w	sl, [r3]
 800afe6:	f1ba 0f00 	cmp.w	sl, #0
 800afea:	d024      	beq.n	800b036 <__multiply+0xf2>
 800afec:	f104 0e14 	add.w	lr, r4, #20
 800aff0:	46a9      	mov	r9, r5
 800aff2:	f04f 0c00 	mov.w	ip, #0
 800aff6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800affa:	f8d9 1000 	ldr.w	r1, [r9]
 800affe:	fa1f fb82 	uxth.w	fp, r2
 800b002:	b289      	uxth	r1, r1
 800b004:	fb0a 110b 	mla	r1, sl, fp, r1
 800b008:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b00c:	f8d9 2000 	ldr.w	r2, [r9]
 800b010:	4461      	add	r1, ip
 800b012:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b016:	fb0a c20b 	mla	r2, sl, fp, ip
 800b01a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b01e:	b289      	uxth	r1, r1
 800b020:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b024:	4577      	cmp	r7, lr
 800b026:	f849 1b04 	str.w	r1, [r9], #4
 800b02a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b02e:	d8e2      	bhi.n	800aff6 <__multiply+0xb2>
 800b030:	9a01      	ldr	r2, [sp, #4]
 800b032:	f845 c002 	str.w	ip, [r5, r2]
 800b036:	9a03      	ldr	r2, [sp, #12]
 800b038:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b03c:	3304      	adds	r3, #4
 800b03e:	f1b9 0f00 	cmp.w	r9, #0
 800b042:	d020      	beq.n	800b086 <__multiply+0x142>
 800b044:	6829      	ldr	r1, [r5, #0]
 800b046:	f104 0c14 	add.w	ip, r4, #20
 800b04a:	46ae      	mov	lr, r5
 800b04c:	f04f 0a00 	mov.w	sl, #0
 800b050:	f8bc b000 	ldrh.w	fp, [ip]
 800b054:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b058:	fb09 220b 	mla	r2, r9, fp, r2
 800b05c:	4492      	add	sl, r2
 800b05e:	b289      	uxth	r1, r1
 800b060:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b064:	f84e 1b04 	str.w	r1, [lr], #4
 800b068:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b06c:	f8be 1000 	ldrh.w	r1, [lr]
 800b070:	0c12      	lsrs	r2, r2, #16
 800b072:	fb09 1102 	mla	r1, r9, r2, r1
 800b076:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b07a:	4567      	cmp	r7, ip
 800b07c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b080:	d8e6      	bhi.n	800b050 <__multiply+0x10c>
 800b082:	9a01      	ldr	r2, [sp, #4]
 800b084:	50a9      	str	r1, [r5, r2]
 800b086:	3504      	adds	r5, #4
 800b088:	e79a      	b.n	800afc0 <__multiply+0x7c>
 800b08a:	3e01      	subs	r6, #1
 800b08c:	e79c      	b.n	800afc8 <__multiply+0x84>
 800b08e:	bf00      	nop
 800b090:	0800c5bf 	.word	0x0800c5bf
 800b094:	0800c5d0 	.word	0x0800c5d0

0800b098 <__pow5mult>:
 800b098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b09c:	4615      	mov	r5, r2
 800b09e:	f012 0203 	ands.w	r2, r2, #3
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	460f      	mov	r7, r1
 800b0a6:	d007      	beq.n	800b0b8 <__pow5mult+0x20>
 800b0a8:	4c25      	ldr	r4, [pc, #148]	; (800b140 <__pow5mult+0xa8>)
 800b0aa:	3a01      	subs	r2, #1
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0b2:	f7ff fe9b 	bl	800adec <__multadd>
 800b0b6:	4607      	mov	r7, r0
 800b0b8:	10ad      	asrs	r5, r5, #2
 800b0ba:	d03d      	beq.n	800b138 <__pow5mult+0xa0>
 800b0bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b0be:	b97c      	cbnz	r4, 800b0e0 <__pow5mult+0x48>
 800b0c0:	2010      	movs	r0, #16
 800b0c2:	f7ff fe1b 	bl	800acfc <malloc>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	6270      	str	r0, [r6, #36]	; 0x24
 800b0ca:	b928      	cbnz	r0, 800b0d8 <__pow5mult+0x40>
 800b0cc:	4b1d      	ldr	r3, [pc, #116]	; (800b144 <__pow5mult+0xac>)
 800b0ce:	481e      	ldr	r0, [pc, #120]	; (800b148 <__pow5mult+0xb0>)
 800b0d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b0d4:	f000 fc0e 	bl	800b8f4 <__assert_func>
 800b0d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0dc:	6004      	str	r4, [r0, #0]
 800b0de:	60c4      	str	r4, [r0, #12]
 800b0e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0e8:	b94c      	cbnz	r4, 800b0fe <__pow5mult+0x66>
 800b0ea:	f240 2171 	movw	r1, #625	; 0x271
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f7ff ff12 	bl	800af18 <__i2b>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	6003      	str	r3, [r0, #0]
 800b0fe:	f04f 0900 	mov.w	r9, #0
 800b102:	07eb      	lsls	r3, r5, #31
 800b104:	d50a      	bpl.n	800b11c <__pow5mult+0x84>
 800b106:	4639      	mov	r1, r7
 800b108:	4622      	mov	r2, r4
 800b10a:	4630      	mov	r0, r6
 800b10c:	f7ff ff1a 	bl	800af44 <__multiply>
 800b110:	4639      	mov	r1, r7
 800b112:	4680      	mov	r8, r0
 800b114:	4630      	mov	r0, r6
 800b116:	f7ff fe47 	bl	800ada8 <_Bfree>
 800b11a:	4647      	mov	r7, r8
 800b11c:	106d      	asrs	r5, r5, #1
 800b11e:	d00b      	beq.n	800b138 <__pow5mult+0xa0>
 800b120:	6820      	ldr	r0, [r4, #0]
 800b122:	b938      	cbnz	r0, 800b134 <__pow5mult+0x9c>
 800b124:	4622      	mov	r2, r4
 800b126:	4621      	mov	r1, r4
 800b128:	4630      	mov	r0, r6
 800b12a:	f7ff ff0b 	bl	800af44 <__multiply>
 800b12e:	6020      	str	r0, [r4, #0]
 800b130:	f8c0 9000 	str.w	r9, [r0]
 800b134:	4604      	mov	r4, r0
 800b136:	e7e4      	b.n	800b102 <__pow5mult+0x6a>
 800b138:	4638      	mov	r0, r7
 800b13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b13e:	bf00      	nop
 800b140:	0800c720 	.word	0x0800c720
 800b144:	0800c54d 	.word	0x0800c54d
 800b148:	0800c5d0 	.word	0x0800c5d0

0800b14c <__lshift>:
 800b14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b150:	460c      	mov	r4, r1
 800b152:	6849      	ldr	r1, [r1, #4]
 800b154:	6923      	ldr	r3, [r4, #16]
 800b156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	4607      	mov	r7, r0
 800b15e:	4691      	mov	r9, r2
 800b160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b164:	f108 0601 	add.w	r6, r8, #1
 800b168:	42b3      	cmp	r3, r6
 800b16a:	db0b      	blt.n	800b184 <__lshift+0x38>
 800b16c:	4638      	mov	r0, r7
 800b16e:	f7ff fddb 	bl	800ad28 <_Balloc>
 800b172:	4605      	mov	r5, r0
 800b174:	b948      	cbnz	r0, 800b18a <__lshift+0x3e>
 800b176:	4602      	mov	r2, r0
 800b178:	4b2a      	ldr	r3, [pc, #168]	; (800b224 <__lshift+0xd8>)
 800b17a:	482b      	ldr	r0, [pc, #172]	; (800b228 <__lshift+0xdc>)
 800b17c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b180:	f000 fbb8 	bl	800b8f4 <__assert_func>
 800b184:	3101      	adds	r1, #1
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	e7ee      	b.n	800b168 <__lshift+0x1c>
 800b18a:	2300      	movs	r3, #0
 800b18c:	f100 0114 	add.w	r1, r0, #20
 800b190:	f100 0210 	add.w	r2, r0, #16
 800b194:	4618      	mov	r0, r3
 800b196:	4553      	cmp	r3, sl
 800b198:	db37      	blt.n	800b20a <__lshift+0xbe>
 800b19a:	6920      	ldr	r0, [r4, #16]
 800b19c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b1a0:	f104 0314 	add.w	r3, r4, #20
 800b1a4:	f019 091f 	ands.w	r9, r9, #31
 800b1a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b1b0:	d02f      	beq.n	800b212 <__lshift+0xc6>
 800b1b2:	f1c9 0e20 	rsb	lr, r9, #32
 800b1b6:	468a      	mov	sl, r1
 800b1b8:	f04f 0c00 	mov.w	ip, #0
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	fa02 f209 	lsl.w	r2, r2, r9
 800b1c2:	ea42 020c 	orr.w	r2, r2, ip
 800b1c6:	f84a 2b04 	str.w	r2, [sl], #4
 800b1ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ce:	4298      	cmp	r0, r3
 800b1d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b1d4:	d8f2      	bhi.n	800b1bc <__lshift+0x70>
 800b1d6:	1b03      	subs	r3, r0, r4
 800b1d8:	3b15      	subs	r3, #21
 800b1da:	f023 0303 	bic.w	r3, r3, #3
 800b1de:	3304      	adds	r3, #4
 800b1e0:	f104 0215 	add.w	r2, r4, #21
 800b1e4:	4290      	cmp	r0, r2
 800b1e6:	bf38      	it	cc
 800b1e8:	2304      	movcc	r3, #4
 800b1ea:	f841 c003 	str.w	ip, [r1, r3]
 800b1ee:	f1bc 0f00 	cmp.w	ip, #0
 800b1f2:	d001      	beq.n	800b1f8 <__lshift+0xac>
 800b1f4:	f108 0602 	add.w	r6, r8, #2
 800b1f8:	3e01      	subs	r6, #1
 800b1fa:	4638      	mov	r0, r7
 800b1fc:	612e      	str	r6, [r5, #16]
 800b1fe:	4621      	mov	r1, r4
 800b200:	f7ff fdd2 	bl	800ada8 <_Bfree>
 800b204:	4628      	mov	r0, r5
 800b206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b20a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b20e:	3301      	adds	r3, #1
 800b210:	e7c1      	b.n	800b196 <__lshift+0x4a>
 800b212:	3904      	subs	r1, #4
 800b214:	f853 2b04 	ldr.w	r2, [r3], #4
 800b218:	f841 2f04 	str.w	r2, [r1, #4]!
 800b21c:	4298      	cmp	r0, r3
 800b21e:	d8f9      	bhi.n	800b214 <__lshift+0xc8>
 800b220:	e7ea      	b.n	800b1f8 <__lshift+0xac>
 800b222:	bf00      	nop
 800b224:	0800c5bf 	.word	0x0800c5bf
 800b228:	0800c5d0 	.word	0x0800c5d0

0800b22c <__mcmp>:
 800b22c:	b530      	push	{r4, r5, lr}
 800b22e:	6902      	ldr	r2, [r0, #16]
 800b230:	690c      	ldr	r4, [r1, #16]
 800b232:	1b12      	subs	r2, r2, r4
 800b234:	d10e      	bne.n	800b254 <__mcmp+0x28>
 800b236:	f100 0314 	add.w	r3, r0, #20
 800b23a:	3114      	adds	r1, #20
 800b23c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b240:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b244:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b248:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b24c:	42a5      	cmp	r5, r4
 800b24e:	d003      	beq.n	800b258 <__mcmp+0x2c>
 800b250:	d305      	bcc.n	800b25e <__mcmp+0x32>
 800b252:	2201      	movs	r2, #1
 800b254:	4610      	mov	r0, r2
 800b256:	bd30      	pop	{r4, r5, pc}
 800b258:	4283      	cmp	r3, r0
 800b25a:	d3f3      	bcc.n	800b244 <__mcmp+0x18>
 800b25c:	e7fa      	b.n	800b254 <__mcmp+0x28>
 800b25e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b262:	e7f7      	b.n	800b254 <__mcmp+0x28>

0800b264 <__mdiff>:
 800b264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b268:	460c      	mov	r4, r1
 800b26a:	4606      	mov	r6, r0
 800b26c:	4611      	mov	r1, r2
 800b26e:	4620      	mov	r0, r4
 800b270:	4690      	mov	r8, r2
 800b272:	f7ff ffdb 	bl	800b22c <__mcmp>
 800b276:	1e05      	subs	r5, r0, #0
 800b278:	d110      	bne.n	800b29c <__mdiff+0x38>
 800b27a:	4629      	mov	r1, r5
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7ff fd53 	bl	800ad28 <_Balloc>
 800b282:	b930      	cbnz	r0, 800b292 <__mdiff+0x2e>
 800b284:	4b3a      	ldr	r3, [pc, #232]	; (800b370 <__mdiff+0x10c>)
 800b286:	4602      	mov	r2, r0
 800b288:	f240 2132 	movw	r1, #562	; 0x232
 800b28c:	4839      	ldr	r0, [pc, #228]	; (800b374 <__mdiff+0x110>)
 800b28e:	f000 fb31 	bl	800b8f4 <__assert_func>
 800b292:	2301      	movs	r3, #1
 800b294:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b29c:	bfa4      	itt	ge
 800b29e:	4643      	movge	r3, r8
 800b2a0:	46a0      	movge	r8, r4
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b2a8:	bfa6      	itte	ge
 800b2aa:	461c      	movge	r4, r3
 800b2ac:	2500      	movge	r5, #0
 800b2ae:	2501      	movlt	r5, #1
 800b2b0:	f7ff fd3a 	bl	800ad28 <_Balloc>
 800b2b4:	b920      	cbnz	r0, 800b2c0 <__mdiff+0x5c>
 800b2b6:	4b2e      	ldr	r3, [pc, #184]	; (800b370 <__mdiff+0x10c>)
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b2be:	e7e5      	b.n	800b28c <__mdiff+0x28>
 800b2c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b2c4:	6926      	ldr	r6, [r4, #16]
 800b2c6:	60c5      	str	r5, [r0, #12]
 800b2c8:	f104 0914 	add.w	r9, r4, #20
 800b2cc:	f108 0514 	add.w	r5, r8, #20
 800b2d0:	f100 0e14 	add.w	lr, r0, #20
 800b2d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b2d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b2dc:	f108 0210 	add.w	r2, r8, #16
 800b2e0:	46f2      	mov	sl, lr
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b2ec:	fa1f f883 	uxth.w	r8, r3
 800b2f0:	fa11 f18b 	uxtah	r1, r1, fp
 800b2f4:	0c1b      	lsrs	r3, r3, #16
 800b2f6:	eba1 0808 	sub.w	r8, r1, r8
 800b2fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b2fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b302:	fa1f f888 	uxth.w	r8, r8
 800b306:	1419      	asrs	r1, r3, #16
 800b308:	454e      	cmp	r6, r9
 800b30a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b30e:	f84a 3b04 	str.w	r3, [sl], #4
 800b312:	d8e7      	bhi.n	800b2e4 <__mdiff+0x80>
 800b314:	1b33      	subs	r3, r6, r4
 800b316:	3b15      	subs	r3, #21
 800b318:	f023 0303 	bic.w	r3, r3, #3
 800b31c:	3304      	adds	r3, #4
 800b31e:	3415      	adds	r4, #21
 800b320:	42a6      	cmp	r6, r4
 800b322:	bf38      	it	cc
 800b324:	2304      	movcc	r3, #4
 800b326:	441d      	add	r5, r3
 800b328:	4473      	add	r3, lr
 800b32a:	469e      	mov	lr, r3
 800b32c:	462e      	mov	r6, r5
 800b32e:	4566      	cmp	r6, ip
 800b330:	d30e      	bcc.n	800b350 <__mdiff+0xec>
 800b332:	f10c 0203 	add.w	r2, ip, #3
 800b336:	1b52      	subs	r2, r2, r5
 800b338:	f022 0203 	bic.w	r2, r2, #3
 800b33c:	3d03      	subs	r5, #3
 800b33e:	45ac      	cmp	ip, r5
 800b340:	bf38      	it	cc
 800b342:	2200      	movcc	r2, #0
 800b344:	441a      	add	r2, r3
 800b346:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b34a:	b17b      	cbz	r3, 800b36c <__mdiff+0x108>
 800b34c:	6107      	str	r7, [r0, #16]
 800b34e:	e7a3      	b.n	800b298 <__mdiff+0x34>
 800b350:	f856 8b04 	ldr.w	r8, [r6], #4
 800b354:	fa11 f288 	uxtah	r2, r1, r8
 800b358:	1414      	asrs	r4, r2, #16
 800b35a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b35e:	b292      	uxth	r2, r2
 800b360:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b364:	f84e 2b04 	str.w	r2, [lr], #4
 800b368:	1421      	asrs	r1, r4, #16
 800b36a:	e7e0      	b.n	800b32e <__mdiff+0xca>
 800b36c:	3f01      	subs	r7, #1
 800b36e:	e7ea      	b.n	800b346 <__mdiff+0xe2>
 800b370:	0800c5bf 	.word	0x0800c5bf
 800b374:	0800c5d0 	.word	0x0800c5d0

0800b378 <__d2b>:
 800b378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b37c:	4689      	mov	r9, r1
 800b37e:	2101      	movs	r1, #1
 800b380:	ec57 6b10 	vmov	r6, r7, d0
 800b384:	4690      	mov	r8, r2
 800b386:	f7ff fccf 	bl	800ad28 <_Balloc>
 800b38a:	4604      	mov	r4, r0
 800b38c:	b930      	cbnz	r0, 800b39c <__d2b+0x24>
 800b38e:	4602      	mov	r2, r0
 800b390:	4b25      	ldr	r3, [pc, #148]	; (800b428 <__d2b+0xb0>)
 800b392:	4826      	ldr	r0, [pc, #152]	; (800b42c <__d2b+0xb4>)
 800b394:	f240 310a 	movw	r1, #778	; 0x30a
 800b398:	f000 faac 	bl	800b8f4 <__assert_func>
 800b39c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b3a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b3a4:	bb35      	cbnz	r5, 800b3f4 <__d2b+0x7c>
 800b3a6:	2e00      	cmp	r6, #0
 800b3a8:	9301      	str	r3, [sp, #4]
 800b3aa:	d028      	beq.n	800b3fe <__d2b+0x86>
 800b3ac:	4668      	mov	r0, sp
 800b3ae:	9600      	str	r6, [sp, #0]
 800b3b0:	f7ff fd82 	bl	800aeb8 <__lo0bits>
 800b3b4:	9900      	ldr	r1, [sp, #0]
 800b3b6:	b300      	cbz	r0, 800b3fa <__d2b+0x82>
 800b3b8:	9a01      	ldr	r2, [sp, #4]
 800b3ba:	f1c0 0320 	rsb	r3, r0, #32
 800b3be:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c2:	430b      	orrs	r3, r1
 800b3c4:	40c2      	lsrs	r2, r0
 800b3c6:	6163      	str	r3, [r4, #20]
 800b3c8:	9201      	str	r2, [sp, #4]
 800b3ca:	9b01      	ldr	r3, [sp, #4]
 800b3cc:	61a3      	str	r3, [r4, #24]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	bf14      	ite	ne
 800b3d2:	2202      	movne	r2, #2
 800b3d4:	2201      	moveq	r2, #1
 800b3d6:	6122      	str	r2, [r4, #16]
 800b3d8:	b1d5      	cbz	r5, 800b410 <__d2b+0x98>
 800b3da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b3de:	4405      	add	r5, r0
 800b3e0:	f8c9 5000 	str.w	r5, [r9]
 800b3e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b3e8:	f8c8 0000 	str.w	r0, [r8]
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	b003      	add	sp, #12
 800b3f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3f8:	e7d5      	b.n	800b3a6 <__d2b+0x2e>
 800b3fa:	6161      	str	r1, [r4, #20]
 800b3fc:	e7e5      	b.n	800b3ca <__d2b+0x52>
 800b3fe:	a801      	add	r0, sp, #4
 800b400:	f7ff fd5a 	bl	800aeb8 <__lo0bits>
 800b404:	9b01      	ldr	r3, [sp, #4]
 800b406:	6163      	str	r3, [r4, #20]
 800b408:	2201      	movs	r2, #1
 800b40a:	6122      	str	r2, [r4, #16]
 800b40c:	3020      	adds	r0, #32
 800b40e:	e7e3      	b.n	800b3d8 <__d2b+0x60>
 800b410:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b414:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b418:	f8c9 0000 	str.w	r0, [r9]
 800b41c:	6918      	ldr	r0, [r3, #16]
 800b41e:	f7ff fd2b 	bl	800ae78 <__hi0bits>
 800b422:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b426:	e7df      	b.n	800b3e8 <__d2b+0x70>
 800b428:	0800c5bf 	.word	0x0800c5bf
 800b42c:	0800c5d0 	.word	0x0800c5d0

0800b430 <_calloc_r>:
 800b430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b432:	fba1 2402 	umull	r2, r4, r1, r2
 800b436:	b94c      	cbnz	r4, 800b44c <_calloc_r+0x1c>
 800b438:	4611      	mov	r1, r2
 800b43a:	9201      	str	r2, [sp, #4]
 800b43c:	f000 f87a 	bl	800b534 <_malloc_r>
 800b440:	9a01      	ldr	r2, [sp, #4]
 800b442:	4605      	mov	r5, r0
 800b444:	b930      	cbnz	r0, 800b454 <_calloc_r+0x24>
 800b446:	4628      	mov	r0, r5
 800b448:	b003      	add	sp, #12
 800b44a:	bd30      	pop	{r4, r5, pc}
 800b44c:	220c      	movs	r2, #12
 800b44e:	6002      	str	r2, [r0, #0]
 800b450:	2500      	movs	r5, #0
 800b452:	e7f8      	b.n	800b446 <_calloc_r+0x16>
 800b454:	4621      	mov	r1, r4
 800b456:	f7fe f93f 	bl	80096d8 <memset>
 800b45a:	e7f4      	b.n	800b446 <_calloc_r+0x16>

0800b45c <_free_r>:
 800b45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b45e:	2900      	cmp	r1, #0
 800b460:	d044      	beq.n	800b4ec <_free_r+0x90>
 800b462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b466:	9001      	str	r0, [sp, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f1a1 0404 	sub.w	r4, r1, #4
 800b46e:	bfb8      	it	lt
 800b470:	18e4      	addlt	r4, r4, r3
 800b472:	f000 fa9b 	bl	800b9ac <__malloc_lock>
 800b476:	4a1e      	ldr	r2, [pc, #120]	; (800b4f0 <_free_r+0x94>)
 800b478:	9801      	ldr	r0, [sp, #4]
 800b47a:	6813      	ldr	r3, [r2, #0]
 800b47c:	b933      	cbnz	r3, 800b48c <_free_r+0x30>
 800b47e:	6063      	str	r3, [r4, #4]
 800b480:	6014      	str	r4, [r2, #0]
 800b482:	b003      	add	sp, #12
 800b484:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b488:	f000 ba96 	b.w	800b9b8 <__malloc_unlock>
 800b48c:	42a3      	cmp	r3, r4
 800b48e:	d908      	bls.n	800b4a2 <_free_r+0x46>
 800b490:	6825      	ldr	r5, [r4, #0]
 800b492:	1961      	adds	r1, r4, r5
 800b494:	428b      	cmp	r3, r1
 800b496:	bf01      	itttt	eq
 800b498:	6819      	ldreq	r1, [r3, #0]
 800b49a:	685b      	ldreq	r3, [r3, #4]
 800b49c:	1949      	addeq	r1, r1, r5
 800b49e:	6021      	streq	r1, [r4, #0]
 800b4a0:	e7ed      	b.n	800b47e <_free_r+0x22>
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	b10b      	cbz	r3, 800b4ac <_free_r+0x50>
 800b4a8:	42a3      	cmp	r3, r4
 800b4aa:	d9fa      	bls.n	800b4a2 <_free_r+0x46>
 800b4ac:	6811      	ldr	r1, [r2, #0]
 800b4ae:	1855      	adds	r5, r2, r1
 800b4b0:	42a5      	cmp	r5, r4
 800b4b2:	d10b      	bne.n	800b4cc <_free_r+0x70>
 800b4b4:	6824      	ldr	r4, [r4, #0]
 800b4b6:	4421      	add	r1, r4
 800b4b8:	1854      	adds	r4, r2, r1
 800b4ba:	42a3      	cmp	r3, r4
 800b4bc:	6011      	str	r1, [r2, #0]
 800b4be:	d1e0      	bne.n	800b482 <_free_r+0x26>
 800b4c0:	681c      	ldr	r4, [r3, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	6053      	str	r3, [r2, #4]
 800b4c6:	4421      	add	r1, r4
 800b4c8:	6011      	str	r1, [r2, #0]
 800b4ca:	e7da      	b.n	800b482 <_free_r+0x26>
 800b4cc:	d902      	bls.n	800b4d4 <_free_r+0x78>
 800b4ce:	230c      	movs	r3, #12
 800b4d0:	6003      	str	r3, [r0, #0]
 800b4d2:	e7d6      	b.n	800b482 <_free_r+0x26>
 800b4d4:	6825      	ldr	r5, [r4, #0]
 800b4d6:	1961      	adds	r1, r4, r5
 800b4d8:	428b      	cmp	r3, r1
 800b4da:	bf04      	itt	eq
 800b4dc:	6819      	ldreq	r1, [r3, #0]
 800b4de:	685b      	ldreq	r3, [r3, #4]
 800b4e0:	6063      	str	r3, [r4, #4]
 800b4e2:	bf04      	itt	eq
 800b4e4:	1949      	addeq	r1, r1, r5
 800b4e6:	6021      	streq	r1, [r4, #0]
 800b4e8:	6054      	str	r4, [r2, #4]
 800b4ea:	e7ca      	b.n	800b482 <_free_r+0x26>
 800b4ec:	b003      	add	sp, #12
 800b4ee:	bd30      	pop	{r4, r5, pc}
 800b4f0:	20001900 	.word	0x20001900

0800b4f4 <sbrk_aligned>:
 800b4f4:	b570      	push	{r4, r5, r6, lr}
 800b4f6:	4e0e      	ldr	r6, [pc, #56]	; (800b530 <sbrk_aligned+0x3c>)
 800b4f8:	460c      	mov	r4, r1
 800b4fa:	6831      	ldr	r1, [r6, #0]
 800b4fc:	4605      	mov	r5, r0
 800b4fe:	b911      	cbnz	r1, 800b506 <sbrk_aligned+0x12>
 800b500:	f000 f9e8 	bl	800b8d4 <_sbrk_r>
 800b504:	6030      	str	r0, [r6, #0]
 800b506:	4621      	mov	r1, r4
 800b508:	4628      	mov	r0, r5
 800b50a:	f000 f9e3 	bl	800b8d4 <_sbrk_r>
 800b50e:	1c43      	adds	r3, r0, #1
 800b510:	d00a      	beq.n	800b528 <sbrk_aligned+0x34>
 800b512:	1cc4      	adds	r4, r0, #3
 800b514:	f024 0403 	bic.w	r4, r4, #3
 800b518:	42a0      	cmp	r0, r4
 800b51a:	d007      	beq.n	800b52c <sbrk_aligned+0x38>
 800b51c:	1a21      	subs	r1, r4, r0
 800b51e:	4628      	mov	r0, r5
 800b520:	f000 f9d8 	bl	800b8d4 <_sbrk_r>
 800b524:	3001      	adds	r0, #1
 800b526:	d101      	bne.n	800b52c <sbrk_aligned+0x38>
 800b528:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b52c:	4620      	mov	r0, r4
 800b52e:	bd70      	pop	{r4, r5, r6, pc}
 800b530:	20001904 	.word	0x20001904

0800b534 <_malloc_r>:
 800b534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b538:	1ccd      	adds	r5, r1, #3
 800b53a:	f025 0503 	bic.w	r5, r5, #3
 800b53e:	3508      	adds	r5, #8
 800b540:	2d0c      	cmp	r5, #12
 800b542:	bf38      	it	cc
 800b544:	250c      	movcc	r5, #12
 800b546:	2d00      	cmp	r5, #0
 800b548:	4607      	mov	r7, r0
 800b54a:	db01      	blt.n	800b550 <_malloc_r+0x1c>
 800b54c:	42a9      	cmp	r1, r5
 800b54e:	d905      	bls.n	800b55c <_malloc_r+0x28>
 800b550:	230c      	movs	r3, #12
 800b552:	603b      	str	r3, [r7, #0]
 800b554:	2600      	movs	r6, #0
 800b556:	4630      	mov	r0, r6
 800b558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b55c:	4e2e      	ldr	r6, [pc, #184]	; (800b618 <_malloc_r+0xe4>)
 800b55e:	f000 fa25 	bl	800b9ac <__malloc_lock>
 800b562:	6833      	ldr	r3, [r6, #0]
 800b564:	461c      	mov	r4, r3
 800b566:	bb34      	cbnz	r4, 800b5b6 <_malloc_r+0x82>
 800b568:	4629      	mov	r1, r5
 800b56a:	4638      	mov	r0, r7
 800b56c:	f7ff ffc2 	bl	800b4f4 <sbrk_aligned>
 800b570:	1c43      	adds	r3, r0, #1
 800b572:	4604      	mov	r4, r0
 800b574:	d14d      	bne.n	800b612 <_malloc_r+0xde>
 800b576:	6834      	ldr	r4, [r6, #0]
 800b578:	4626      	mov	r6, r4
 800b57a:	2e00      	cmp	r6, #0
 800b57c:	d140      	bne.n	800b600 <_malloc_r+0xcc>
 800b57e:	6823      	ldr	r3, [r4, #0]
 800b580:	4631      	mov	r1, r6
 800b582:	4638      	mov	r0, r7
 800b584:	eb04 0803 	add.w	r8, r4, r3
 800b588:	f000 f9a4 	bl	800b8d4 <_sbrk_r>
 800b58c:	4580      	cmp	r8, r0
 800b58e:	d13a      	bne.n	800b606 <_malloc_r+0xd2>
 800b590:	6821      	ldr	r1, [r4, #0]
 800b592:	3503      	adds	r5, #3
 800b594:	1a6d      	subs	r5, r5, r1
 800b596:	f025 0503 	bic.w	r5, r5, #3
 800b59a:	3508      	adds	r5, #8
 800b59c:	2d0c      	cmp	r5, #12
 800b59e:	bf38      	it	cc
 800b5a0:	250c      	movcc	r5, #12
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	f7ff ffa5 	bl	800b4f4 <sbrk_aligned>
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	d02b      	beq.n	800b606 <_malloc_r+0xd2>
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	442b      	add	r3, r5
 800b5b2:	6023      	str	r3, [r4, #0]
 800b5b4:	e00e      	b.n	800b5d4 <_malloc_r+0xa0>
 800b5b6:	6822      	ldr	r2, [r4, #0]
 800b5b8:	1b52      	subs	r2, r2, r5
 800b5ba:	d41e      	bmi.n	800b5fa <_malloc_r+0xc6>
 800b5bc:	2a0b      	cmp	r2, #11
 800b5be:	d916      	bls.n	800b5ee <_malloc_r+0xba>
 800b5c0:	1961      	adds	r1, r4, r5
 800b5c2:	42a3      	cmp	r3, r4
 800b5c4:	6025      	str	r5, [r4, #0]
 800b5c6:	bf18      	it	ne
 800b5c8:	6059      	strne	r1, [r3, #4]
 800b5ca:	6863      	ldr	r3, [r4, #4]
 800b5cc:	bf08      	it	eq
 800b5ce:	6031      	streq	r1, [r6, #0]
 800b5d0:	5162      	str	r2, [r4, r5]
 800b5d2:	604b      	str	r3, [r1, #4]
 800b5d4:	4638      	mov	r0, r7
 800b5d6:	f104 060b 	add.w	r6, r4, #11
 800b5da:	f000 f9ed 	bl	800b9b8 <__malloc_unlock>
 800b5de:	f026 0607 	bic.w	r6, r6, #7
 800b5e2:	1d23      	adds	r3, r4, #4
 800b5e4:	1af2      	subs	r2, r6, r3
 800b5e6:	d0b6      	beq.n	800b556 <_malloc_r+0x22>
 800b5e8:	1b9b      	subs	r3, r3, r6
 800b5ea:	50a3      	str	r3, [r4, r2]
 800b5ec:	e7b3      	b.n	800b556 <_malloc_r+0x22>
 800b5ee:	6862      	ldr	r2, [r4, #4]
 800b5f0:	42a3      	cmp	r3, r4
 800b5f2:	bf0c      	ite	eq
 800b5f4:	6032      	streq	r2, [r6, #0]
 800b5f6:	605a      	strne	r2, [r3, #4]
 800b5f8:	e7ec      	b.n	800b5d4 <_malloc_r+0xa0>
 800b5fa:	4623      	mov	r3, r4
 800b5fc:	6864      	ldr	r4, [r4, #4]
 800b5fe:	e7b2      	b.n	800b566 <_malloc_r+0x32>
 800b600:	4634      	mov	r4, r6
 800b602:	6876      	ldr	r6, [r6, #4]
 800b604:	e7b9      	b.n	800b57a <_malloc_r+0x46>
 800b606:	230c      	movs	r3, #12
 800b608:	603b      	str	r3, [r7, #0]
 800b60a:	4638      	mov	r0, r7
 800b60c:	f000 f9d4 	bl	800b9b8 <__malloc_unlock>
 800b610:	e7a1      	b.n	800b556 <_malloc_r+0x22>
 800b612:	6025      	str	r5, [r4, #0]
 800b614:	e7de      	b.n	800b5d4 <_malloc_r+0xa0>
 800b616:	bf00      	nop
 800b618:	20001900 	.word	0x20001900

0800b61c <__ssputs_r>:
 800b61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b620:	688e      	ldr	r6, [r1, #8]
 800b622:	429e      	cmp	r6, r3
 800b624:	4682      	mov	sl, r0
 800b626:	460c      	mov	r4, r1
 800b628:	4690      	mov	r8, r2
 800b62a:	461f      	mov	r7, r3
 800b62c:	d838      	bhi.n	800b6a0 <__ssputs_r+0x84>
 800b62e:	898a      	ldrh	r2, [r1, #12]
 800b630:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b634:	d032      	beq.n	800b69c <__ssputs_r+0x80>
 800b636:	6825      	ldr	r5, [r4, #0]
 800b638:	6909      	ldr	r1, [r1, #16]
 800b63a:	eba5 0901 	sub.w	r9, r5, r1
 800b63e:	6965      	ldr	r5, [r4, #20]
 800b640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b644:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b648:	3301      	adds	r3, #1
 800b64a:	444b      	add	r3, r9
 800b64c:	106d      	asrs	r5, r5, #1
 800b64e:	429d      	cmp	r5, r3
 800b650:	bf38      	it	cc
 800b652:	461d      	movcc	r5, r3
 800b654:	0553      	lsls	r3, r2, #21
 800b656:	d531      	bpl.n	800b6bc <__ssputs_r+0xa0>
 800b658:	4629      	mov	r1, r5
 800b65a:	f7ff ff6b 	bl	800b534 <_malloc_r>
 800b65e:	4606      	mov	r6, r0
 800b660:	b950      	cbnz	r0, 800b678 <__ssputs_r+0x5c>
 800b662:	230c      	movs	r3, #12
 800b664:	f8ca 3000 	str.w	r3, [sl]
 800b668:	89a3      	ldrh	r3, [r4, #12]
 800b66a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b66e:	81a3      	strh	r3, [r4, #12]
 800b670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b678:	6921      	ldr	r1, [r4, #16]
 800b67a:	464a      	mov	r2, r9
 800b67c:	f7ff fb46 	bl	800ad0c <memcpy>
 800b680:	89a3      	ldrh	r3, [r4, #12]
 800b682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b68a:	81a3      	strh	r3, [r4, #12]
 800b68c:	6126      	str	r6, [r4, #16]
 800b68e:	6165      	str	r5, [r4, #20]
 800b690:	444e      	add	r6, r9
 800b692:	eba5 0509 	sub.w	r5, r5, r9
 800b696:	6026      	str	r6, [r4, #0]
 800b698:	60a5      	str	r5, [r4, #8]
 800b69a:	463e      	mov	r6, r7
 800b69c:	42be      	cmp	r6, r7
 800b69e:	d900      	bls.n	800b6a2 <__ssputs_r+0x86>
 800b6a0:	463e      	mov	r6, r7
 800b6a2:	6820      	ldr	r0, [r4, #0]
 800b6a4:	4632      	mov	r2, r6
 800b6a6:	4641      	mov	r1, r8
 800b6a8:	f000 f966 	bl	800b978 <memmove>
 800b6ac:	68a3      	ldr	r3, [r4, #8]
 800b6ae:	1b9b      	subs	r3, r3, r6
 800b6b0:	60a3      	str	r3, [r4, #8]
 800b6b2:	6823      	ldr	r3, [r4, #0]
 800b6b4:	4433      	add	r3, r6
 800b6b6:	6023      	str	r3, [r4, #0]
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	e7db      	b.n	800b674 <__ssputs_r+0x58>
 800b6bc:	462a      	mov	r2, r5
 800b6be:	f000 f981 	bl	800b9c4 <_realloc_r>
 800b6c2:	4606      	mov	r6, r0
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d1e1      	bne.n	800b68c <__ssputs_r+0x70>
 800b6c8:	6921      	ldr	r1, [r4, #16]
 800b6ca:	4650      	mov	r0, sl
 800b6cc:	f7ff fec6 	bl	800b45c <_free_r>
 800b6d0:	e7c7      	b.n	800b662 <__ssputs_r+0x46>
	...

0800b6d4 <_svfiprintf_r>:
 800b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d8:	4698      	mov	r8, r3
 800b6da:	898b      	ldrh	r3, [r1, #12]
 800b6dc:	061b      	lsls	r3, r3, #24
 800b6de:	b09d      	sub	sp, #116	; 0x74
 800b6e0:	4607      	mov	r7, r0
 800b6e2:	460d      	mov	r5, r1
 800b6e4:	4614      	mov	r4, r2
 800b6e6:	d50e      	bpl.n	800b706 <_svfiprintf_r+0x32>
 800b6e8:	690b      	ldr	r3, [r1, #16]
 800b6ea:	b963      	cbnz	r3, 800b706 <_svfiprintf_r+0x32>
 800b6ec:	2140      	movs	r1, #64	; 0x40
 800b6ee:	f7ff ff21 	bl	800b534 <_malloc_r>
 800b6f2:	6028      	str	r0, [r5, #0]
 800b6f4:	6128      	str	r0, [r5, #16]
 800b6f6:	b920      	cbnz	r0, 800b702 <_svfiprintf_r+0x2e>
 800b6f8:	230c      	movs	r3, #12
 800b6fa:	603b      	str	r3, [r7, #0]
 800b6fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b700:	e0d1      	b.n	800b8a6 <_svfiprintf_r+0x1d2>
 800b702:	2340      	movs	r3, #64	; 0x40
 800b704:	616b      	str	r3, [r5, #20]
 800b706:	2300      	movs	r3, #0
 800b708:	9309      	str	r3, [sp, #36]	; 0x24
 800b70a:	2320      	movs	r3, #32
 800b70c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b710:	f8cd 800c 	str.w	r8, [sp, #12]
 800b714:	2330      	movs	r3, #48	; 0x30
 800b716:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b8c0 <_svfiprintf_r+0x1ec>
 800b71a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b71e:	f04f 0901 	mov.w	r9, #1
 800b722:	4623      	mov	r3, r4
 800b724:	469a      	mov	sl, r3
 800b726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b72a:	b10a      	cbz	r2, 800b730 <_svfiprintf_r+0x5c>
 800b72c:	2a25      	cmp	r2, #37	; 0x25
 800b72e:	d1f9      	bne.n	800b724 <_svfiprintf_r+0x50>
 800b730:	ebba 0b04 	subs.w	fp, sl, r4
 800b734:	d00b      	beq.n	800b74e <_svfiprintf_r+0x7a>
 800b736:	465b      	mov	r3, fp
 800b738:	4622      	mov	r2, r4
 800b73a:	4629      	mov	r1, r5
 800b73c:	4638      	mov	r0, r7
 800b73e:	f7ff ff6d 	bl	800b61c <__ssputs_r>
 800b742:	3001      	adds	r0, #1
 800b744:	f000 80aa 	beq.w	800b89c <_svfiprintf_r+0x1c8>
 800b748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b74a:	445a      	add	r2, fp
 800b74c:	9209      	str	r2, [sp, #36]	; 0x24
 800b74e:	f89a 3000 	ldrb.w	r3, [sl]
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 80a2 	beq.w	800b89c <_svfiprintf_r+0x1c8>
 800b758:	2300      	movs	r3, #0
 800b75a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b75e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b762:	f10a 0a01 	add.w	sl, sl, #1
 800b766:	9304      	str	r3, [sp, #16]
 800b768:	9307      	str	r3, [sp, #28]
 800b76a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b76e:	931a      	str	r3, [sp, #104]	; 0x68
 800b770:	4654      	mov	r4, sl
 800b772:	2205      	movs	r2, #5
 800b774:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b778:	4851      	ldr	r0, [pc, #324]	; (800b8c0 <_svfiprintf_r+0x1ec>)
 800b77a:	f7f4 fd31 	bl	80001e0 <memchr>
 800b77e:	9a04      	ldr	r2, [sp, #16]
 800b780:	b9d8      	cbnz	r0, 800b7ba <_svfiprintf_r+0xe6>
 800b782:	06d0      	lsls	r0, r2, #27
 800b784:	bf44      	itt	mi
 800b786:	2320      	movmi	r3, #32
 800b788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b78c:	0711      	lsls	r1, r2, #28
 800b78e:	bf44      	itt	mi
 800b790:	232b      	movmi	r3, #43	; 0x2b
 800b792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b796:	f89a 3000 	ldrb.w	r3, [sl]
 800b79a:	2b2a      	cmp	r3, #42	; 0x2a
 800b79c:	d015      	beq.n	800b7ca <_svfiprintf_r+0xf6>
 800b79e:	9a07      	ldr	r2, [sp, #28]
 800b7a0:	4654      	mov	r4, sl
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	f04f 0c0a 	mov.w	ip, #10
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7ae:	3b30      	subs	r3, #48	; 0x30
 800b7b0:	2b09      	cmp	r3, #9
 800b7b2:	d94e      	bls.n	800b852 <_svfiprintf_r+0x17e>
 800b7b4:	b1b0      	cbz	r0, 800b7e4 <_svfiprintf_r+0x110>
 800b7b6:	9207      	str	r2, [sp, #28]
 800b7b8:	e014      	b.n	800b7e4 <_svfiprintf_r+0x110>
 800b7ba:	eba0 0308 	sub.w	r3, r0, r8
 800b7be:	fa09 f303 	lsl.w	r3, r9, r3
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	9304      	str	r3, [sp, #16]
 800b7c6:	46a2      	mov	sl, r4
 800b7c8:	e7d2      	b.n	800b770 <_svfiprintf_r+0x9c>
 800b7ca:	9b03      	ldr	r3, [sp, #12]
 800b7cc:	1d19      	adds	r1, r3, #4
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	9103      	str	r1, [sp, #12]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	bfbb      	ittet	lt
 800b7d6:	425b      	neglt	r3, r3
 800b7d8:	f042 0202 	orrlt.w	r2, r2, #2
 800b7dc:	9307      	strge	r3, [sp, #28]
 800b7de:	9307      	strlt	r3, [sp, #28]
 800b7e0:	bfb8      	it	lt
 800b7e2:	9204      	strlt	r2, [sp, #16]
 800b7e4:	7823      	ldrb	r3, [r4, #0]
 800b7e6:	2b2e      	cmp	r3, #46	; 0x2e
 800b7e8:	d10c      	bne.n	800b804 <_svfiprintf_r+0x130>
 800b7ea:	7863      	ldrb	r3, [r4, #1]
 800b7ec:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ee:	d135      	bne.n	800b85c <_svfiprintf_r+0x188>
 800b7f0:	9b03      	ldr	r3, [sp, #12]
 800b7f2:	1d1a      	adds	r2, r3, #4
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	9203      	str	r2, [sp, #12]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	bfb8      	it	lt
 800b7fc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b800:	3402      	adds	r4, #2
 800b802:	9305      	str	r3, [sp, #20]
 800b804:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b8d0 <_svfiprintf_r+0x1fc>
 800b808:	7821      	ldrb	r1, [r4, #0]
 800b80a:	2203      	movs	r2, #3
 800b80c:	4650      	mov	r0, sl
 800b80e:	f7f4 fce7 	bl	80001e0 <memchr>
 800b812:	b140      	cbz	r0, 800b826 <_svfiprintf_r+0x152>
 800b814:	2340      	movs	r3, #64	; 0x40
 800b816:	eba0 000a 	sub.w	r0, r0, sl
 800b81a:	fa03 f000 	lsl.w	r0, r3, r0
 800b81e:	9b04      	ldr	r3, [sp, #16]
 800b820:	4303      	orrs	r3, r0
 800b822:	3401      	adds	r4, #1
 800b824:	9304      	str	r3, [sp, #16]
 800b826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b82a:	4826      	ldr	r0, [pc, #152]	; (800b8c4 <_svfiprintf_r+0x1f0>)
 800b82c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b830:	2206      	movs	r2, #6
 800b832:	f7f4 fcd5 	bl	80001e0 <memchr>
 800b836:	2800      	cmp	r0, #0
 800b838:	d038      	beq.n	800b8ac <_svfiprintf_r+0x1d8>
 800b83a:	4b23      	ldr	r3, [pc, #140]	; (800b8c8 <_svfiprintf_r+0x1f4>)
 800b83c:	bb1b      	cbnz	r3, 800b886 <_svfiprintf_r+0x1b2>
 800b83e:	9b03      	ldr	r3, [sp, #12]
 800b840:	3307      	adds	r3, #7
 800b842:	f023 0307 	bic.w	r3, r3, #7
 800b846:	3308      	adds	r3, #8
 800b848:	9303      	str	r3, [sp, #12]
 800b84a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b84c:	4433      	add	r3, r6
 800b84e:	9309      	str	r3, [sp, #36]	; 0x24
 800b850:	e767      	b.n	800b722 <_svfiprintf_r+0x4e>
 800b852:	fb0c 3202 	mla	r2, ip, r2, r3
 800b856:	460c      	mov	r4, r1
 800b858:	2001      	movs	r0, #1
 800b85a:	e7a5      	b.n	800b7a8 <_svfiprintf_r+0xd4>
 800b85c:	2300      	movs	r3, #0
 800b85e:	3401      	adds	r4, #1
 800b860:	9305      	str	r3, [sp, #20]
 800b862:	4619      	mov	r1, r3
 800b864:	f04f 0c0a 	mov.w	ip, #10
 800b868:	4620      	mov	r0, r4
 800b86a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b86e:	3a30      	subs	r2, #48	; 0x30
 800b870:	2a09      	cmp	r2, #9
 800b872:	d903      	bls.n	800b87c <_svfiprintf_r+0x1a8>
 800b874:	2b00      	cmp	r3, #0
 800b876:	d0c5      	beq.n	800b804 <_svfiprintf_r+0x130>
 800b878:	9105      	str	r1, [sp, #20]
 800b87a:	e7c3      	b.n	800b804 <_svfiprintf_r+0x130>
 800b87c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b880:	4604      	mov	r4, r0
 800b882:	2301      	movs	r3, #1
 800b884:	e7f0      	b.n	800b868 <_svfiprintf_r+0x194>
 800b886:	ab03      	add	r3, sp, #12
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	462a      	mov	r2, r5
 800b88c:	4b0f      	ldr	r3, [pc, #60]	; (800b8cc <_svfiprintf_r+0x1f8>)
 800b88e:	a904      	add	r1, sp, #16
 800b890:	4638      	mov	r0, r7
 800b892:	f7fd ffc9 	bl	8009828 <_printf_float>
 800b896:	1c42      	adds	r2, r0, #1
 800b898:	4606      	mov	r6, r0
 800b89a:	d1d6      	bne.n	800b84a <_svfiprintf_r+0x176>
 800b89c:	89ab      	ldrh	r3, [r5, #12]
 800b89e:	065b      	lsls	r3, r3, #25
 800b8a0:	f53f af2c 	bmi.w	800b6fc <_svfiprintf_r+0x28>
 800b8a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8a6:	b01d      	add	sp, #116	; 0x74
 800b8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ac:	ab03      	add	r3, sp, #12
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	462a      	mov	r2, r5
 800b8b2:	4b06      	ldr	r3, [pc, #24]	; (800b8cc <_svfiprintf_r+0x1f8>)
 800b8b4:	a904      	add	r1, sp, #16
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	f7fe fa5a 	bl	8009d70 <_printf_i>
 800b8bc:	e7eb      	b.n	800b896 <_svfiprintf_r+0x1c2>
 800b8be:	bf00      	nop
 800b8c0:	0800c72c 	.word	0x0800c72c
 800b8c4:	0800c736 	.word	0x0800c736
 800b8c8:	08009829 	.word	0x08009829
 800b8cc:	0800b61d 	.word	0x0800b61d
 800b8d0:	0800c732 	.word	0x0800c732

0800b8d4 <_sbrk_r>:
 800b8d4:	b538      	push	{r3, r4, r5, lr}
 800b8d6:	4d06      	ldr	r5, [pc, #24]	; (800b8f0 <_sbrk_r+0x1c>)
 800b8d8:	2300      	movs	r3, #0
 800b8da:	4604      	mov	r4, r0
 800b8dc:	4608      	mov	r0, r1
 800b8de:	602b      	str	r3, [r5, #0]
 800b8e0:	f7f7 fa76 	bl	8002dd0 <_sbrk>
 800b8e4:	1c43      	adds	r3, r0, #1
 800b8e6:	d102      	bne.n	800b8ee <_sbrk_r+0x1a>
 800b8e8:	682b      	ldr	r3, [r5, #0]
 800b8ea:	b103      	cbz	r3, 800b8ee <_sbrk_r+0x1a>
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	bd38      	pop	{r3, r4, r5, pc}
 800b8f0:	20001908 	.word	0x20001908

0800b8f4 <__assert_func>:
 800b8f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8f6:	4614      	mov	r4, r2
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	4b09      	ldr	r3, [pc, #36]	; (800b920 <__assert_func+0x2c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4605      	mov	r5, r0
 800b900:	68d8      	ldr	r0, [r3, #12]
 800b902:	b14c      	cbz	r4, 800b918 <__assert_func+0x24>
 800b904:	4b07      	ldr	r3, [pc, #28]	; (800b924 <__assert_func+0x30>)
 800b906:	9100      	str	r1, [sp, #0]
 800b908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b90c:	4906      	ldr	r1, [pc, #24]	; (800b928 <__assert_func+0x34>)
 800b90e:	462b      	mov	r3, r5
 800b910:	f000 f80e 	bl	800b930 <fiprintf>
 800b914:	f000 faac 	bl	800be70 <abort>
 800b918:	4b04      	ldr	r3, [pc, #16]	; (800b92c <__assert_func+0x38>)
 800b91a:	461c      	mov	r4, r3
 800b91c:	e7f3      	b.n	800b906 <__assert_func+0x12>
 800b91e:	bf00      	nop
 800b920:	2000000c 	.word	0x2000000c
 800b924:	0800c73d 	.word	0x0800c73d
 800b928:	0800c74a 	.word	0x0800c74a
 800b92c:	0800c778 	.word	0x0800c778

0800b930 <fiprintf>:
 800b930:	b40e      	push	{r1, r2, r3}
 800b932:	b503      	push	{r0, r1, lr}
 800b934:	4601      	mov	r1, r0
 800b936:	ab03      	add	r3, sp, #12
 800b938:	4805      	ldr	r0, [pc, #20]	; (800b950 <fiprintf+0x20>)
 800b93a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b93e:	6800      	ldr	r0, [r0, #0]
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	f000 f897 	bl	800ba74 <_vfiprintf_r>
 800b946:	b002      	add	sp, #8
 800b948:	f85d eb04 	ldr.w	lr, [sp], #4
 800b94c:	b003      	add	sp, #12
 800b94e:	4770      	bx	lr
 800b950:	2000000c 	.word	0x2000000c

0800b954 <__ascii_mbtowc>:
 800b954:	b082      	sub	sp, #8
 800b956:	b901      	cbnz	r1, 800b95a <__ascii_mbtowc+0x6>
 800b958:	a901      	add	r1, sp, #4
 800b95a:	b142      	cbz	r2, 800b96e <__ascii_mbtowc+0x1a>
 800b95c:	b14b      	cbz	r3, 800b972 <__ascii_mbtowc+0x1e>
 800b95e:	7813      	ldrb	r3, [r2, #0]
 800b960:	600b      	str	r3, [r1, #0]
 800b962:	7812      	ldrb	r2, [r2, #0]
 800b964:	1e10      	subs	r0, r2, #0
 800b966:	bf18      	it	ne
 800b968:	2001      	movne	r0, #1
 800b96a:	b002      	add	sp, #8
 800b96c:	4770      	bx	lr
 800b96e:	4610      	mov	r0, r2
 800b970:	e7fb      	b.n	800b96a <__ascii_mbtowc+0x16>
 800b972:	f06f 0001 	mvn.w	r0, #1
 800b976:	e7f8      	b.n	800b96a <__ascii_mbtowc+0x16>

0800b978 <memmove>:
 800b978:	4288      	cmp	r0, r1
 800b97a:	b510      	push	{r4, lr}
 800b97c:	eb01 0402 	add.w	r4, r1, r2
 800b980:	d902      	bls.n	800b988 <memmove+0x10>
 800b982:	4284      	cmp	r4, r0
 800b984:	4623      	mov	r3, r4
 800b986:	d807      	bhi.n	800b998 <memmove+0x20>
 800b988:	1e43      	subs	r3, r0, #1
 800b98a:	42a1      	cmp	r1, r4
 800b98c:	d008      	beq.n	800b9a0 <memmove+0x28>
 800b98e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b992:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b996:	e7f8      	b.n	800b98a <memmove+0x12>
 800b998:	4402      	add	r2, r0
 800b99a:	4601      	mov	r1, r0
 800b99c:	428a      	cmp	r2, r1
 800b99e:	d100      	bne.n	800b9a2 <memmove+0x2a>
 800b9a0:	bd10      	pop	{r4, pc}
 800b9a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b9a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b9aa:	e7f7      	b.n	800b99c <memmove+0x24>

0800b9ac <__malloc_lock>:
 800b9ac:	4801      	ldr	r0, [pc, #4]	; (800b9b4 <__malloc_lock+0x8>)
 800b9ae:	f000 bc1f 	b.w	800c1f0 <__retarget_lock_acquire_recursive>
 800b9b2:	bf00      	nop
 800b9b4:	2000190c 	.word	0x2000190c

0800b9b8 <__malloc_unlock>:
 800b9b8:	4801      	ldr	r0, [pc, #4]	; (800b9c0 <__malloc_unlock+0x8>)
 800b9ba:	f000 bc1a 	b.w	800c1f2 <__retarget_lock_release_recursive>
 800b9be:	bf00      	nop
 800b9c0:	2000190c 	.word	0x2000190c

0800b9c4 <_realloc_r>:
 800b9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c8:	4680      	mov	r8, r0
 800b9ca:	4614      	mov	r4, r2
 800b9cc:	460e      	mov	r6, r1
 800b9ce:	b921      	cbnz	r1, 800b9da <_realloc_r+0x16>
 800b9d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d4:	4611      	mov	r1, r2
 800b9d6:	f7ff bdad 	b.w	800b534 <_malloc_r>
 800b9da:	b92a      	cbnz	r2, 800b9e8 <_realloc_r+0x24>
 800b9dc:	f7ff fd3e 	bl	800b45c <_free_r>
 800b9e0:	4625      	mov	r5, r4
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9e8:	f000 fc6a 	bl	800c2c0 <_malloc_usable_size_r>
 800b9ec:	4284      	cmp	r4, r0
 800b9ee:	4607      	mov	r7, r0
 800b9f0:	d802      	bhi.n	800b9f8 <_realloc_r+0x34>
 800b9f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9f6:	d812      	bhi.n	800ba1e <_realloc_r+0x5a>
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	f7ff fd9a 	bl	800b534 <_malloc_r>
 800ba00:	4605      	mov	r5, r0
 800ba02:	2800      	cmp	r0, #0
 800ba04:	d0ed      	beq.n	800b9e2 <_realloc_r+0x1e>
 800ba06:	42bc      	cmp	r4, r7
 800ba08:	4622      	mov	r2, r4
 800ba0a:	4631      	mov	r1, r6
 800ba0c:	bf28      	it	cs
 800ba0e:	463a      	movcs	r2, r7
 800ba10:	f7ff f97c 	bl	800ad0c <memcpy>
 800ba14:	4631      	mov	r1, r6
 800ba16:	4640      	mov	r0, r8
 800ba18:	f7ff fd20 	bl	800b45c <_free_r>
 800ba1c:	e7e1      	b.n	800b9e2 <_realloc_r+0x1e>
 800ba1e:	4635      	mov	r5, r6
 800ba20:	e7df      	b.n	800b9e2 <_realloc_r+0x1e>

0800ba22 <__sfputc_r>:
 800ba22:	6893      	ldr	r3, [r2, #8]
 800ba24:	3b01      	subs	r3, #1
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	b410      	push	{r4}
 800ba2a:	6093      	str	r3, [r2, #8]
 800ba2c:	da08      	bge.n	800ba40 <__sfputc_r+0x1e>
 800ba2e:	6994      	ldr	r4, [r2, #24]
 800ba30:	42a3      	cmp	r3, r4
 800ba32:	db01      	blt.n	800ba38 <__sfputc_r+0x16>
 800ba34:	290a      	cmp	r1, #10
 800ba36:	d103      	bne.n	800ba40 <__sfputc_r+0x1e>
 800ba38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba3c:	f000 b94a 	b.w	800bcd4 <__swbuf_r>
 800ba40:	6813      	ldr	r3, [r2, #0]
 800ba42:	1c58      	adds	r0, r3, #1
 800ba44:	6010      	str	r0, [r2, #0]
 800ba46:	7019      	strb	r1, [r3, #0]
 800ba48:	4608      	mov	r0, r1
 800ba4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <__sfputs_r>:
 800ba50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba52:	4606      	mov	r6, r0
 800ba54:	460f      	mov	r7, r1
 800ba56:	4614      	mov	r4, r2
 800ba58:	18d5      	adds	r5, r2, r3
 800ba5a:	42ac      	cmp	r4, r5
 800ba5c:	d101      	bne.n	800ba62 <__sfputs_r+0x12>
 800ba5e:	2000      	movs	r0, #0
 800ba60:	e007      	b.n	800ba72 <__sfputs_r+0x22>
 800ba62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba66:	463a      	mov	r2, r7
 800ba68:	4630      	mov	r0, r6
 800ba6a:	f7ff ffda 	bl	800ba22 <__sfputc_r>
 800ba6e:	1c43      	adds	r3, r0, #1
 800ba70:	d1f3      	bne.n	800ba5a <__sfputs_r+0xa>
 800ba72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba74 <_vfiprintf_r>:
 800ba74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba78:	460d      	mov	r5, r1
 800ba7a:	b09d      	sub	sp, #116	; 0x74
 800ba7c:	4614      	mov	r4, r2
 800ba7e:	4698      	mov	r8, r3
 800ba80:	4606      	mov	r6, r0
 800ba82:	b118      	cbz	r0, 800ba8c <_vfiprintf_r+0x18>
 800ba84:	6983      	ldr	r3, [r0, #24]
 800ba86:	b90b      	cbnz	r3, 800ba8c <_vfiprintf_r+0x18>
 800ba88:	f000 fb14 	bl	800c0b4 <__sinit>
 800ba8c:	4b89      	ldr	r3, [pc, #548]	; (800bcb4 <_vfiprintf_r+0x240>)
 800ba8e:	429d      	cmp	r5, r3
 800ba90:	d11b      	bne.n	800baca <_vfiprintf_r+0x56>
 800ba92:	6875      	ldr	r5, [r6, #4]
 800ba94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba96:	07d9      	lsls	r1, r3, #31
 800ba98:	d405      	bmi.n	800baa6 <_vfiprintf_r+0x32>
 800ba9a:	89ab      	ldrh	r3, [r5, #12]
 800ba9c:	059a      	lsls	r2, r3, #22
 800ba9e:	d402      	bmi.n	800baa6 <_vfiprintf_r+0x32>
 800baa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baa2:	f000 fba5 	bl	800c1f0 <__retarget_lock_acquire_recursive>
 800baa6:	89ab      	ldrh	r3, [r5, #12]
 800baa8:	071b      	lsls	r3, r3, #28
 800baaa:	d501      	bpl.n	800bab0 <_vfiprintf_r+0x3c>
 800baac:	692b      	ldr	r3, [r5, #16]
 800baae:	b9eb      	cbnz	r3, 800baec <_vfiprintf_r+0x78>
 800bab0:	4629      	mov	r1, r5
 800bab2:	4630      	mov	r0, r6
 800bab4:	f000 f96e 	bl	800bd94 <__swsetup_r>
 800bab8:	b1c0      	cbz	r0, 800baec <_vfiprintf_r+0x78>
 800baba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800babc:	07dc      	lsls	r4, r3, #31
 800babe:	d50e      	bpl.n	800bade <_vfiprintf_r+0x6a>
 800bac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bac4:	b01d      	add	sp, #116	; 0x74
 800bac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baca:	4b7b      	ldr	r3, [pc, #492]	; (800bcb8 <_vfiprintf_r+0x244>)
 800bacc:	429d      	cmp	r5, r3
 800bace:	d101      	bne.n	800bad4 <_vfiprintf_r+0x60>
 800bad0:	68b5      	ldr	r5, [r6, #8]
 800bad2:	e7df      	b.n	800ba94 <_vfiprintf_r+0x20>
 800bad4:	4b79      	ldr	r3, [pc, #484]	; (800bcbc <_vfiprintf_r+0x248>)
 800bad6:	429d      	cmp	r5, r3
 800bad8:	bf08      	it	eq
 800bada:	68f5      	ldreq	r5, [r6, #12]
 800badc:	e7da      	b.n	800ba94 <_vfiprintf_r+0x20>
 800bade:	89ab      	ldrh	r3, [r5, #12]
 800bae0:	0598      	lsls	r0, r3, #22
 800bae2:	d4ed      	bmi.n	800bac0 <_vfiprintf_r+0x4c>
 800bae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bae6:	f000 fb84 	bl	800c1f2 <__retarget_lock_release_recursive>
 800baea:	e7e9      	b.n	800bac0 <_vfiprintf_r+0x4c>
 800baec:	2300      	movs	r3, #0
 800baee:	9309      	str	r3, [sp, #36]	; 0x24
 800baf0:	2320      	movs	r3, #32
 800baf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baf6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bafa:	2330      	movs	r3, #48	; 0x30
 800bafc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bcc0 <_vfiprintf_r+0x24c>
 800bb00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb04:	f04f 0901 	mov.w	r9, #1
 800bb08:	4623      	mov	r3, r4
 800bb0a:	469a      	mov	sl, r3
 800bb0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb10:	b10a      	cbz	r2, 800bb16 <_vfiprintf_r+0xa2>
 800bb12:	2a25      	cmp	r2, #37	; 0x25
 800bb14:	d1f9      	bne.n	800bb0a <_vfiprintf_r+0x96>
 800bb16:	ebba 0b04 	subs.w	fp, sl, r4
 800bb1a:	d00b      	beq.n	800bb34 <_vfiprintf_r+0xc0>
 800bb1c:	465b      	mov	r3, fp
 800bb1e:	4622      	mov	r2, r4
 800bb20:	4629      	mov	r1, r5
 800bb22:	4630      	mov	r0, r6
 800bb24:	f7ff ff94 	bl	800ba50 <__sfputs_r>
 800bb28:	3001      	adds	r0, #1
 800bb2a:	f000 80aa 	beq.w	800bc82 <_vfiprintf_r+0x20e>
 800bb2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb30:	445a      	add	r2, fp
 800bb32:	9209      	str	r2, [sp, #36]	; 0x24
 800bb34:	f89a 3000 	ldrb.w	r3, [sl]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f000 80a2 	beq.w	800bc82 <_vfiprintf_r+0x20e>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb48:	f10a 0a01 	add.w	sl, sl, #1
 800bb4c:	9304      	str	r3, [sp, #16]
 800bb4e:	9307      	str	r3, [sp, #28]
 800bb50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb54:	931a      	str	r3, [sp, #104]	; 0x68
 800bb56:	4654      	mov	r4, sl
 800bb58:	2205      	movs	r2, #5
 800bb5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb5e:	4858      	ldr	r0, [pc, #352]	; (800bcc0 <_vfiprintf_r+0x24c>)
 800bb60:	f7f4 fb3e 	bl	80001e0 <memchr>
 800bb64:	9a04      	ldr	r2, [sp, #16]
 800bb66:	b9d8      	cbnz	r0, 800bba0 <_vfiprintf_r+0x12c>
 800bb68:	06d1      	lsls	r1, r2, #27
 800bb6a:	bf44      	itt	mi
 800bb6c:	2320      	movmi	r3, #32
 800bb6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb72:	0713      	lsls	r3, r2, #28
 800bb74:	bf44      	itt	mi
 800bb76:	232b      	movmi	r3, #43	; 0x2b
 800bb78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb7c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb80:	2b2a      	cmp	r3, #42	; 0x2a
 800bb82:	d015      	beq.n	800bbb0 <_vfiprintf_r+0x13c>
 800bb84:	9a07      	ldr	r2, [sp, #28]
 800bb86:	4654      	mov	r4, sl
 800bb88:	2000      	movs	r0, #0
 800bb8a:	f04f 0c0a 	mov.w	ip, #10
 800bb8e:	4621      	mov	r1, r4
 800bb90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb94:	3b30      	subs	r3, #48	; 0x30
 800bb96:	2b09      	cmp	r3, #9
 800bb98:	d94e      	bls.n	800bc38 <_vfiprintf_r+0x1c4>
 800bb9a:	b1b0      	cbz	r0, 800bbca <_vfiprintf_r+0x156>
 800bb9c:	9207      	str	r2, [sp, #28]
 800bb9e:	e014      	b.n	800bbca <_vfiprintf_r+0x156>
 800bba0:	eba0 0308 	sub.w	r3, r0, r8
 800bba4:	fa09 f303 	lsl.w	r3, r9, r3
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	9304      	str	r3, [sp, #16]
 800bbac:	46a2      	mov	sl, r4
 800bbae:	e7d2      	b.n	800bb56 <_vfiprintf_r+0xe2>
 800bbb0:	9b03      	ldr	r3, [sp, #12]
 800bbb2:	1d19      	adds	r1, r3, #4
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	9103      	str	r1, [sp, #12]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	bfbb      	ittet	lt
 800bbbc:	425b      	neglt	r3, r3
 800bbbe:	f042 0202 	orrlt.w	r2, r2, #2
 800bbc2:	9307      	strge	r3, [sp, #28]
 800bbc4:	9307      	strlt	r3, [sp, #28]
 800bbc6:	bfb8      	it	lt
 800bbc8:	9204      	strlt	r2, [sp, #16]
 800bbca:	7823      	ldrb	r3, [r4, #0]
 800bbcc:	2b2e      	cmp	r3, #46	; 0x2e
 800bbce:	d10c      	bne.n	800bbea <_vfiprintf_r+0x176>
 800bbd0:	7863      	ldrb	r3, [r4, #1]
 800bbd2:	2b2a      	cmp	r3, #42	; 0x2a
 800bbd4:	d135      	bne.n	800bc42 <_vfiprintf_r+0x1ce>
 800bbd6:	9b03      	ldr	r3, [sp, #12]
 800bbd8:	1d1a      	adds	r2, r3, #4
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	9203      	str	r2, [sp, #12]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	bfb8      	it	lt
 800bbe2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bbe6:	3402      	adds	r4, #2
 800bbe8:	9305      	str	r3, [sp, #20]
 800bbea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bcd0 <_vfiprintf_r+0x25c>
 800bbee:	7821      	ldrb	r1, [r4, #0]
 800bbf0:	2203      	movs	r2, #3
 800bbf2:	4650      	mov	r0, sl
 800bbf4:	f7f4 faf4 	bl	80001e0 <memchr>
 800bbf8:	b140      	cbz	r0, 800bc0c <_vfiprintf_r+0x198>
 800bbfa:	2340      	movs	r3, #64	; 0x40
 800bbfc:	eba0 000a 	sub.w	r0, r0, sl
 800bc00:	fa03 f000 	lsl.w	r0, r3, r0
 800bc04:	9b04      	ldr	r3, [sp, #16]
 800bc06:	4303      	orrs	r3, r0
 800bc08:	3401      	adds	r4, #1
 800bc0a:	9304      	str	r3, [sp, #16]
 800bc0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc10:	482c      	ldr	r0, [pc, #176]	; (800bcc4 <_vfiprintf_r+0x250>)
 800bc12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc16:	2206      	movs	r2, #6
 800bc18:	f7f4 fae2 	bl	80001e0 <memchr>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d03f      	beq.n	800bca0 <_vfiprintf_r+0x22c>
 800bc20:	4b29      	ldr	r3, [pc, #164]	; (800bcc8 <_vfiprintf_r+0x254>)
 800bc22:	bb1b      	cbnz	r3, 800bc6c <_vfiprintf_r+0x1f8>
 800bc24:	9b03      	ldr	r3, [sp, #12]
 800bc26:	3307      	adds	r3, #7
 800bc28:	f023 0307 	bic.w	r3, r3, #7
 800bc2c:	3308      	adds	r3, #8
 800bc2e:	9303      	str	r3, [sp, #12]
 800bc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc32:	443b      	add	r3, r7
 800bc34:	9309      	str	r3, [sp, #36]	; 0x24
 800bc36:	e767      	b.n	800bb08 <_vfiprintf_r+0x94>
 800bc38:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc3c:	460c      	mov	r4, r1
 800bc3e:	2001      	movs	r0, #1
 800bc40:	e7a5      	b.n	800bb8e <_vfiprintf_r+0x11a>
 800bc42:	2300      	movs	r3, #0
 800bc44:	3401      	adds	r4, #1
 800bc46:	9305      	str	r3, [sp, #20]
 800bc48:	4619      	mov	r1, r3
 800bc4a:	f04f 0c0a 	mov.w	ip, #10
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc54:	3a30      	subs	r2, #48	; 0x30
 800bc56:	2a09      	cmp	r2, #9
 800bc58:	d903      	bls.n	800bc62 <_vfiprintf_r+0x1ee>
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d0c5      	beq.n	800bbea <_vfiprintf_r+0x176>
 800bc5e:	9105      	str	r1, [sp, #20]
 800bc60:	e7c3      	b.n	800bbea <_vfiprintf_r+0x176>
 800bc62:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc66:	4604      	mov	r4, r0
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e7f0      	b.n	800bc4e <_vfiprintf_r+0x1da>
 800bc6c:	ab03      	add	r3, sp, #12
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	462a      	mov	r2, r5
 800bc72:	4b16      	ldr	r3, [pc, #88]	; (800bccc <_vfiprintf_r+0x258>)
 800bc74:	a904      	add	r1, sp, #16
 800bc76:	4630      	mov	r0, r6
 800bc78:	f7fd fdd6 	bl	8009828 <_printf_float>
 800bc7c:	4607      	mov	r7, r0
 800bc7e:	1c78      	adds	r0, r7, #1
 800bc80:	d1d6      	bne.n	800bc30 <_vfiprintf_r+0x1bc>
 800bc82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc84:	07d9      	lsls	r1, r3, #31
 800bc86:	d405      	bmi.n	800bc94 <_vfiprintf_r+0x220>
 800bc88:	89ab      	ldrh	r3, [r5, #12]
 800bc8a:	059a      	lsls	r2, r3, #22
 800bc8c:	d402      	bmi.n	800bc94 <_vfiprintf_r+0x220>
 800bc8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc90:	f000 faaf 	bl	800c1f2 <__retarget_lock_release_recursive>
 800bc94:	89ab      	ldrh	r3, [r5, #12]
 800bc96:	065b      	lsls	r3, r3, #25
 800bc98:	f53f af12 	bmi.w	800bac0 <_vfiprintf_r+0x4c>
 800bc9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc9e:	e711      	b.n	800bac4 <_vfiprintf_r+0x50>
 800bca0:	ab03      	add	r3, sp, #12
 800bca2:	9300      	str	r3, [sp, #0]
 800bca4:	462a      	mov	r2, r5
 800bca6:	4b09      	ldr	r3, [pc, #36]	; (800bccc <_vfiprintf_r+0x258>)
 800bca8:	a904      	add	r1, sp, #16
 800bcaa:	4630      	mov	r0, r6
 800bcac:	f7fe f860 	bl	8009d70 <_printf_i>
 800bcb0:	e7e4      	b.n	800bc7c <_vfiprintf_r+0x208>
 800bcb2:	bf00      	nop
 800bcb4:	0800c8a4 	.word	0x0800c8a4
 800bcb8:	0800c8c4 	.word	0x0800c8c4
 800bcbc:	0800c884 	.word	0x0800c884
 800bcc0:	0800c72c 	.word	0x0800c72c
 800bcc4:	0800c736 	.word	0x0800c736
 800bcc8:	08009829 	.word	0x08009829
 800bccc:	0800ba51 	.word	0x0800ba51
 800bcd0:	0800c732 	.word	0x0800c732

0800bcd4 <__swbuf_r>:
 800bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd6:	460e      	mov	r6, r1
 800bcd8:	4614      	mov	r4, r2
 800bcda:	4605      	mov	r5, r0
 800bcdc:	b118      	cbz	r0, 800bce6 <__swbuf_r+0x12>
 800bcde:	6983      	ldr	r3, [r0, #24]
 800bce0:	b90b      	cbnz	r3, 800bce6 <__swbuf_r+0x12>
 800bce2:	f000 f9e7 	bl	800c0b4 <__sinit>
 800bce6:	4b21      	ldr	r3, [pc, #132]	; (800bd6c <__swbuf_r+0x98>)
 800bce8:	429c      	cmp	r4, r3
 800bcea:	d12b      	bne.n	800bd44 <__swbuf_r+0x70>
 800bcec:	686c      	ldr	r4, [r5, #4]
 800bcee:	69a3      	ldr	r3, [r4, #24]
 800bcf0:	60a3      	str	r3, [r4, #8]
 800bcf2:	89a3      	ldrh	r3, [r4, #12]
 800bcf4:	071a      	lsls	r2, r3, #28
 800bcf6:	d52f      	bpl.n	800bd58 <__swbuf_r+0x84>
 800bcf8:	6923      	ldr	r3, [r4, #16]
 800bcfa:	b36b      	cbz	r3, 800bd58 <__swbuf_r+0x84>
 800bcfc:	6923      	ldr	r3, [r4, #16]
 800bcfe:	6820      	ldr	r0, [r4, #0]
 800bd00:	1ac0      	subs	r0, r0, r3
 800bd02:	6963      	ldr	r3, [r4, #20]
 800bd04:	b2f6      	uxtb	r6, r6
 800bd06:	4283      	cmp	r3, r0
 800bd08:	4637      	mov	r7, r6
 800bd0a:	dc04      	bgt.n	800bd16 <__swbuf_r+0x42>
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f000 f93c 	bl	800bf8c <_fflush_r>
 800bd14:	bb30      	cbnz	r0, 800bd64 <__swbuf_r+0x90>
 800bd16:	68a3      	ldr	r3, [r4, #8]
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	60a3      	str	r3, [r4, #8]
 800bd1c:	6823      	ldr	r3, [r4, #0]
 800bd1e:	1c5a      	adds	r2, r3, #1
 800bd20:	6022      	str	r2, [r4, #0]
 800bd22:	701e      	strb	r6, [r3, #0]
 800bd24:	6963      	ldr	r3, [r4, #20]
 800bd26:	3001      	adds	r0, #1
 800bd28:	4283      	cmp	r3, r0
 800bd2a:	d004      	beq.n	800bd36 <__swbuf_r+0x62>
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	07db      	lsls	r3, r3, #31
 800bd30:	d506      	bpl.n	800bd40 <__swbuf_r+0x6c>
 800bd32:	2e0a      	cmp	r6, #10
 800bd34:	d104      	bne.n	800bd40 <__swbuf_r+0x6c>
 800bd36:	4621      	mov	r1, r4
 800bd38:	4628      	mov	r0, r5
 800bd3a:	f000 f927 	bl	800bf8c <_fflush_r>
 800bd3e:	b988      	cbnz	r0, 800bd64 <__swbuf_r+0x90>
 800bd40:	4638      	mov	r0, r7
 800bd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd44:	4b0a      	ldr	r3, [pc, #40]	; (800bd70 <__swbuf_r+0x9c>)
 800bd46:	429c      	cmp	r4, r3
 800bd48:	d101      	bne.n	800bd4e <__swbuf_r+0x7a>
 800bd4a:	68ac      	ldr	r4, [r5, #8]
 800bd4c:	e7cf      	b.n	800bcee <__swbuf_r+0x1a>
 800bd4e:	4b09      	ldr	r3, [pc, #36]	; (800bd74 <__swbuf_r+0xa0>)
 800bd50:	429c      	cmp	r4, r3
 800bd52:	bf08      	it	eq
 800bd54:	68ec      	ldreq	r4, [r5, #12]
 800bd56:	e7ca      	b.n	800bcee <__swbuf_r+0x1a>
 800bd58:	4621      	mov	r1, r4
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	f000 f81a 	bl	800bd94 <__swsetup_r>
 800bd60:	2800      	cmp	r0, #0
 800bd62:	d0cb      	beq.n	800bcfc <__swbuf_r+0x28>
 800bd64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bd68:	e7ea      	b.n	800bd40 <__swbuf_r+0x6c>
 800bd6a:	bf00      	nop
 800bd6c:	0800c8a4 	.word	0x0800c8a4
 800bd70:	0800c8c4 	.word	0x0800c8c4
 800bd74:	0800c884 	.word	0x0800c884

0800bd78 <__ascii_wctomb>:
 800bd78:	b149      	cbz	r1, 800bd8e <__ascii_wctomb+0x16>
 800bd7a:	2aff      	cmp	r2, #255	; 0xff
 800bd7c:	bf85      	ittet	hi
 800bd7e:	238a      	movhi	r3, #138	; 0x8a
 800bd80:	6003      	strhi	r3, [r0, #0]
 800bd82:	700a      	strbls	r2, [r1, #0]
 800bd84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bd88:	bf98      	it	ls
 800bd8a:	2001      	movls	r0, #1
 800bd8c:	4770      	bx	lr
 800bd8e:	4608      	mov	r0, r1
 800bd90:	4770      	bx	lr
	...

0800bd94 <__swsetup_r>:
 800bd94:	4b32      	ldr	r3, [pc, #200]	; (800be60 <__swsetup_r+0xcc>)
 800bd96:	b570      	push	{r4, r5, r6, lr}
 800bd98:	681d      	ldr	r5, [r3, #0]
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	b125      	cbz	r5, 800bdaa <__swsetup_r+0x16>
 800bda0:	69ab      	ldr	r3, [r5, #24]
 800bda2:	b913      	cbnz	r3, 800bdaa <__swsetup_r+0x16>
 800bda4:	4628      	mov	r0, r5
 800bda6:	f000 f985 	bl	800c0b4 <__sinit>
 800bdaa:	4b2e      	ldr	r3, [pc, #184]	; (800be64 <__swsetup_r+0xd0>)
 800bdac:	429c      	cmp	r4, r3
 800bdae:	d10f      	bne.n	800bdd0 <__swsetup_r+0x3c>
 800bdb0:	686c      	ldr	r4, [r5, #4]
 800bdb2:	89a3      	ldrh	r3, [r4, #12]
 800bdb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bdb8:	0719      	lsls	r1, r3, #28
 800bdba:	d42c      	bmi.n	800be16 <__swsetup_r+0x82>
 800bdbc:	06dd      	lsls	r5, r3, #27
 800bdbe:	d411      	bmi.n	800bde4 <__swsetup_r+0x50>
 800bdc0:	2309      	movs	r3, #9
 800bdc2:	6033      	str	r3, [r6, #0]
 800bdc4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bdc8:	81a3      	strh	r3, [r4, #12]
 800bdca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdce:	e03e      	b.n	800be4e <__swsetup_r+0xba>
 800bdd0:	4b25      	ldr	r3, [pc, #148]	; (800be68 <__swsetup_r+0xd4>)
 800bdd2:	429c      	cmp	r4, r3
 800bdd4:	d101      	bne.n	800bdda <__swsetup_r+0x46>
 800bdd6:	68ac      	ldr	r4, [r5, #8]
 800bdd8:	e7eb      	b.n	800bdb2 <__swsetup_r+0x1e>
 800bdda:	4b24      	ldr	r3, [pc, #144]	; (800be6c <__swsetup_r+0xd8>)
 800bddc:	429c      	cmp	r4, r3
 800bdde:	bf08      	it	eq
 800bde0:	68ec      	ldreq	r4, [r5, #12]
 800bde2:	e7e6      	b.n	800bdb2 <__swsetup_r+0x1e>
 800bde4:	0758      	lsls	r0, r3, #29
 800bde6:	d512      	bpl.n	800be0e <__swsetup_r+0x7a>
 800bde8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdea:	b141      	cbz	r1, 800bdfe <__swsetup_r+0x6a>
 800bdec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdf0:	4299      	cmp	r1, r3
 800bdf2:	d002      	beq.n	800bdfa <__swsetup_r+0x66>
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	f7ff fb31 	bl	800b45c <_free_r>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	6363      	str	r3, [r4, #52]	; 0x34
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	2300      	movs	r3, #0
 800be08:	6063      	str	r3, [r4, #4]
 800be0a:	6923      	ldr	r3, [r4, #16]
 800be0c:	6023      	str	r3, [r4, #0]
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	f043 0308 	orr.w	r3, r3, #8
 800be14:	81a3      	strh	r3, [r4, #12]
 800be16:	6923      	ldr	r3, [r4, #16]
 800be18:	b94b      	cbnz	r3, 800be2e <__swsetup_r+0x9a>
 800be1a:	89a3      	ldrh	r3, [r4, #12]
 800be1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be24:	d003      	beq.n	800be2e <__swsetup_r+0x9a>
 800be26:	4621      	mov	r1, r4
 800be28:	4630      	mov	r0, r6
 800be2a:	f000 fa09 	bl	800c240 <__smakebuf_r>
 800be2e:	89a0      	ldrh	r0, [r4, #12]
 800be30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be34:	f010 0301 	ands.w	r3, r0, #1
 800be38:	d00a      	beq.n	800be50 <__swsetup_r+0xbc>
 800be3a:	2300      	movs	r3, #0
 800be3c:	60a3      	str	r3, [r4, #8]
 800be3e:	6963      	ldr	r3, [r4, #20]
 800be40:	425b      	negs	r3, r3
 800be42:	61a3      	str	r3, [r4, #24]
 800be44:	6923      	ldr	r3, [r4, #16]
 800be46:	b943      	cbnz	r3, 800be5a <__swsetup_r+0xc6>
 800be48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be4c:	d1ba      	bne.n	800bdc4 <__swsetup_r+0x30>
 800be4e:	bd70      	pop	{r4, r5, r6, pc}
 800be50:	0781      	lsls	r1, r0, #30
 800be52:	bf58      	it	pl
 800be54:	6963      	ldrpl	r3, [r4, #20]
 800be56:	60a3      	str	r3, [r4, #8]
 800be58:	e7f4      	b.n	800be44 <__swsetup_r+0xb0>
 800be5a:	2000      	movs	r0, #0
 800be5c:	e7f7      	b.n	800be4e <__swsetup_r+0xba>
 800be5e:	bf00      	nop
 800be60:	2000000c 	.word	0x2000000c
 800be64:	0800c8a4 	.word	0x0800c8a4
 800be68:	0800c8c4 	.word	0x0800c8c4
 800be6c:	0800c884 	.word	0x0800c884

0800be70 <abort>:
 800be70:	b508      	push	{r3, lr}
 800be72:	2006      	movs	r0, #6
 800be74:	f000 fa54 	bl	800c320 <raise>
 800be78:	2001      	movs	r0, #1
 800be7a:	f7f6 ff31 	bl	8002ce0 <_exit>
	...

0800be80 <__sflush_r>:
 800be80:	898a      	ldrh	r2, [r1, #12]
 800be82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be86:	4605      	mov	r5, r0
 800be88:	0710      	lsls	r0, r2, #28
 800be8a:	460c      	mov	r4, r1
 800be8c:	d458      	bmi.n	800bf40 <__sflush_r+0xc0>
 800be8e:	684b      	ldr	r3, [r1, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	dc05      	bgt.n	800bea0 <__sflush_r+0x20>
 800be94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be96:	2b00      	cmp	r3, #0
 800be98:	dc02      	bgt.n	800bea0 <__sflush_r+0x20>
 800be9a:	2000      	movs	r0, #0
 800be9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bea0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bea2:	2e00      	cmp	r6, #0
 800bea4:	d0f9      	beq.n	800be9a <__sflush_r+0x1a>
 800bea6:	2300      	movs	r3, #0
 800bea8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800beac:	682f      	ldr	r7, [r5, #0]
 800beae:	602b      	str	r3, [r5, #0]
 800beb0:	d032      	beq.n	800bf18 <__sflush_r+0x98>
 800beb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800beb4:	89a3      	ldrh	r3, [r4, #12]
 800beb6:	075a      	lsls	r2, r3, #29
 800beb8:	d505      	bpl.n	800bec6 <__sflush_r+0x46>
 800beba:	6863      	ldr	r3, [r4, #4]
 800bebc:	1ac0      	subs	r0, r0, r3
 800bebe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bec0:	b10b      	cbz	r3, 800bec6 <__sflush_r+0x46>
 800bec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bec4:	1ac0      	subs	r0, r0, r3
 800bec6:	2300      	movs	r3, #0
 800bec8:	4602      	mov	r2, r0
 800beca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800becc:	6a21      	ldr	r1, [r4, #32]
 800bece:	4628      	mov	r0, r5
 800bed0:	47b0      	blx	r6
 800bed2:	1c43      	adds	r3, r0, #1
 800bed4:	89a3      	ldrh	r3, [r4, #12]
 800bed6:	d106      	bne.n	800bee6 <__sflush_r+0x66>
 800bed8:	6829      	ldr	r1, [r5, #0]
 800beda:	291d      	cmp	r1, #29
 800bedc:	d82c      	bhi.n	800bf38 <__sflush_r+0xb8>
 800bede:	4a2a      	ldr	r2, [pc, #168]	; (800bf88 <__sflush_r+0x108>)
 800bee0:	40ca      	lsrs	r2, r1
 800bee2:	07d6      	lsls	r6, r2, #31
 800bee4:	d528      	bpl.n	800bf38 <__sflush_r+0xb8>
 800bee6:	2200      	movs	r2, #0
 800bee8:	6062      	str	r2, [r4, #4]
 800beea:	04d9      	lsls	r1, r3, #19
 800beec:	6922      	ldr	r2, [r4, #16]
 800beee:	6022      	str	r2, [r4, #0]
 800bef0:	d504      	bpl.n	800befc <__sflush_r+0x7c>
 800bef2:	1c42      	adds	r2, r0, #1
 800bef4:	d101      	bne.n	800befa <__sflush_r+0x7a>
 800bef6:	682b      	ldr	r3, [r5, #0]
 800bef8:	b903      	cbnz	r3, 800befc <__sflush_r+0x7c>
 800befa:	6560      	str	r0, [r4, #84]	; 0x54
 800befc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800befe:	602f      	str	r7, [r5, #0]
 800bf00:	2900      	cmp	r1, #0
 800bf02:	d0ca      	beq.n	800be9a <__sflush_r+0x1a>
 800bf04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf08:	4299      	cmp	r1, r3
 800bf0a:	d002      	beq.n	800bf12 <__sflush_r+0x92>
 800bf0c:	4628      	mov	r0, r5
 800bf0e:	f7ff faa5 	bl	800b45c <_free_r>
 800bf12:	2000      	movs	r0, #0
 800bf14:	6360      	str	r0, [r4, #52]	; 0x34
 800bf16:	e7c1      	b.n	800be9c <__sflush_r+0x1c>
 800bf18:	6a21      	ldr	r1, [r4, #32]
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	47b0      	blx	r6
 800bf20:	1c41      	adds	r1, r0, #1
 800bf22:	d1c7      	bne.n	800beb4 <__sflush_r+0x34>
 800bf24:	682b      	ldr	r3, [r5, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d0c4      	beq.n	800beb4 <__sflush_r+0x34>
 800bf2a:	2b1d      	cmp	r3, #29
 800bf2c:	d001      	beq.n	800bf32 <__sflush_r+0xb2>
 800bf2e:	2b16      	cmp	r3, #22
 800bf30:	d101      	bne.n	800bf36 <__sflush_r+0xb6>
 800bf32:	602f      	str	r7, [r5, #0]
 800bf34:	e7b1      	b.n	800be9a <__sflush_r+0x1a>
 800bf36:	89a3      	ldrh	r3, [r4, #12]
 800bf38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf3c:	81a3      	strh	r3, [r4, #12]
 800bf3e:	e7ad      	b.n	800be9c <__sflush_r+0x1c>
 800bf40:	690f      	ldr	r7, [r1, #16]
 800bf42:	2f00      	cmp	r7, #0
 800bf44:	d0a9      	beq.n	800be9a <__sflush_r+0x1a>
 800bf46:	0793      	lsls	r3, r2, #30
 800bf48:	680e      	ldr	r6, [r1, #0]
 800bf4a:	bf08      	it	eq
 800bf4c:	694b      	ldreq	r3, [r1, #20]
 800bf4e:	600f      	str	r7, [r1, #0]
 800bf50:	bf18      	it	ne
 800bf52:	2300      	movne	r3, #0
 800bf54:	eba6 0807 	sub.w	r8, r6, r7
 800bf58:	608b      	str	r3, [r1, #8]
 800bf5a:	f1b8 0f00 	cmp.w	r8, #0
 800bf5e:	dd9c      	ble.n	800be9a <__sflush_r+0x1a>
 800bf60:	6a21      	ldr	r1, [r4, #32]
 800bf62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf64:	4643      	mov	r3, r8
 800bf66:	463a      	mov	r2, r7
 800bf68:	4628      	mov	r0, r5
 800bf6a:	47b0      	blx	r6
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	dc06      	bgt.n	800bf7e <__sflush_r+0xfe>
 800bf70:	89a3      	ldrh	r3, [r4, #12]
 800bf72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf76:	81a3      	strh	r3, [r4, #12]
 800bf78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf7c:	e78e      	b.n	800be9c <__sflush_r+0x1c>
 800bf7e:	4407      	add	r7, r0
 800bf80:	eba8 0800 	sub.w	r8, r8, r0
 800bf84:	e7e9      	b.n	800bf5a <__sflush_r+0xda>
 800bf86:	bf00      	nop
 800bf88:	20400001 	.word	0x20400001

0800bf8c <_fflush_r>:
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	690b      	ldr	r3, [r1, #16]
 800bf90:	4605      	mov	r5, r0
 800bf92:	460c      	mov	r4, r1
 800bf94:	b913      	cbnz	r3, 800bf9c <_fflush_r+0x10>
 800bf96:	2500      	movs	r5, #0
 800bf98:	4628      	mov	r0, r5
 800bf9a:	bd38      	pop	{r3, r4, r5, pc}
 800bf9c:	b118      	cbz	r0, 800bfa6 <_fflush_r+0x1a>
 800bf9e:	6983      	ldr	r3, [r0, #24]
 800bfa0:	b90b      	cbnz	r3, 800bfa6 <_fflush_r+0x1a>
 800bfa2:	f000 f887 	bl	800c0b4 <__sinit>
 800bfa6:	4b14      	ldr	r3, [pc, #80]	; (800bff8 <_fflush_r+0x6c>)
 800bfa8:	429c      	cmp	r4, r3
 800bfaa:	d11b      	bne.n	800bfe4 <_fflush_r+0x58>
 800bfac:	686c      	ldr	r4, [r5, #4]
 800bfae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d0ef      	beq.n	800bf96 <_fflush_r+0xa>
 800bfb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfb8:	07d0      	lsls	r0, r2, #31
 800bfba:	d404      	bmi.n	800bfc6 <_fflush_r+0x3a>
 800bfbc:	0599      	lsls	r1, r3, #22
 800bfbe:	d402      	bmi.n	800bfc6 <_fflush_r+0x3a>
 800bfc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfc2:	f000 f915 	bl	800c1f0 <__retarget_lock_acquire_recursive>
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	4621      	mov	r1, r4
 800bfca:	f7ff ff59 	bl	800be80 <__sflush_r>
 800bfce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfd0:	07da      	lsls	r2, r3, #31
 800bfd2:	4605      	mov	r5, r0
 800bfd4:	d4e0      	bmi.n	800bf98 <_fflush_r+0xc>
 800bfd6:	89a3      	ldrh	r3, [r4, #12]
 800bfd8:	059b      	lsls	r3, r3, #22
 800bfda:	d4dd      	bmi.n	800bf98 <_fflush_r+0xc>
 800bfdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfde:	f000 f908 	bl	800c1f2 <__retarget_lock_release_recursive>
 800bfe2:	e7d9      	b.n	800bf98 <_fflush_r+0xc>
 800bfe4:	4b05      	ldr	r3, [pc, #20]	; (800bffc <_fflush_r+0x70>)
 800bfe6:	429c      	cmp	r4, r3
 800bfe8:	d101      	bne.n	800bfee <_fflush_r+0x62>
 800bfea:	68ac      	ldr	r4, [r5, #8]
 800bfec:	e7df      	b.n	800bfae <_fflush_r+0x22>
 800bfee:	4b04      	ldr	r3, [pc, #16]	; (800c000 <_fflush_r+0x74>)
 800bff0:	429c      	cmp	r4, r3
 800bff2:	bf08      	it	eq
 800bff4:	68ec      	ldreq	r4, [r5, #12]
 800bff6:	e7da      	b.n	800bfae <_fflush_r+0x22>
 800bff8:	0800c8a4 	.word	0x0800c8a4
 800bffc:	0800c8c4 	.word	0x0800c8c4
 800c000:	0800c884 	.word	0x0800c884

0800c004 <std>:
 800c004:	2300      	movs	r3, #0
 800c006:	b510      	push	{r4, lr}
 800c008:	4604      	mov	r4, r0
 800c00a:	e9c0 3300 	strd	r3, r3, [r0]
 800c00e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c012:	6083      	str	r3, [r0, #8]
 800c014:	8181      	strh	r1, [r0, #12]
 800c016:	6643      	str	r3, [r0, #100]	; 0x64
 800c018:	81c2      	strh	r2, [r0, #14]
 800c01a:	6183      	str	r3, [r0, #24]
 800c01c:	4619      	mov	r1, r3
 800c01e:	2208      	movs	r2, #8
 800c020:	305c      	adds	r0, #92	; 0x5c
 800c022:	f7fd fb59 	bl	80096d8 <memset>
 800c026:	4b05      	ldr	r3, [pc, #20]	; (800c03c <std+0x38>)
 800c028:	6263      	str	r3, [r4, #36]	; 0x24
 800c02a:	4b05      	ldr	r3, [pc, #20]	; (800c040 <std+0x3c>)
 800c02c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c02e:	4b05      	ldr	r3, [pc, #20]	; (800c044 <std+0x40>)
 800c030:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c032:	4b05      	ldr	r3, [pc, #20]	; (800c048 <std+0x44>)
 800c034:	6224      	str	r4, [r4, #32]
 800c036:	6323      	str	r3, [r4, #48]	; 0x30
 800c038:	bd10      	pop	{r4, pc}
 800c03a:	bf00      	nop
 800c03c:	0800c359 	.word	0x0800c359
 800c040:	0800c37b 	.word	0x0800c37b
 800c044:	0800c3b3 	.word	0x0800c3b3
 800c048:	0800c3d7 	.word	0x0800c3d7

0800c04c <_cleanup_r>:
 800c04c:	4901      	ldr	r1, [pc, #4]	; (800c054 <_cleanup_r+0x8>)
 800c04e:	f000 b8af 	b.w	800c1b0 <_fwalk_reent>
 800c052:	bf00      	nop
 800c054:	0800bf8d 	.word	0x0800bf8d

0800c058 <__sfmoreglue>:
 800c058:	b570      	push	{r4, r5, r6, lr}
 800c05a:	2268      	movs	r2, #104	; 0x68
 800c05c:	1e4d      	subs	r5, r1, #1
 800c05e:	4355      	muls	r5, r2
 800c060:	460e      	mov	r6, r1
 800c062:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c066:	f7ff fa65 	bl	800b534 <_malloc_r>
 800c06a:	4604      	mov	r4, r0
 800c06c:	b140      	cbz	r0, 800c080 <__sfmoreglue+0x28>
 800c06e:	2100      	movs	r1, #0
 800c070:	e9c0 1600 	strd	r1, r6, [r0]
 800c074:	300c      	adds	r0, #12
 800c076:	60a0      	str	r0, [r4, #8]
 800c078:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c07c:	f7fd fb2c 	bl	80096d8 <memset>
 800c080:	4620      	mov	r0, r4
 800c082:	bd70      	pop	{r4, r5, r6, pc}

0800c084 <__sfp_lock_acquire>:
 800c084:	4801      	ldr	r0, [pc, #4]	; (800c08c <__sfp_lock_acquire+0x8>)
 800c086:	f000 b8b3 	b.w	800c1f0 <__retarget_lock_acquire_recursive>
 800c08a:	bf00      	nop
 800c08c:	2000190d 	.word	0x2000190d

0800c090 <__sfp_lock_release>:
 800c090:	4801      	ldr	r0, [pc, #4]	; (800c098 <__sfp_lock_release+0x8>)
 800c092:	f000 b8ae 	b.w	800c1f2 <__retarget_lock_release_recursive>
 800c096:	bf00      	nop
 800c098:	2000190d 	.word	0x2000190d

0800c09c <__sinit_lock_acquire>:
 800c09c:	4801      	ldr	r0, [pc, #4]	; (800c0a4 <__sinit_lock_acquire+0x8>)
 800c09e:	f000 b8a7 	b.w	800c1f0 <__retarget_lock_acquire_recursive>
 800c0a2:	bf00      	nop
 800c0a4:	2000190e 	.word	0x2000190e

0800c0a8 <__sinit_lock_release>:
 800c0a8:	4801      	ldr	r0, [pc, #4]	; (800c0b0 <__sinit_lock_release+0x8>)
 800c0aa:	f000 b8a2 	b.w	800c1f2 <__retarget_lock_release_recursive>
 800c0ae:	bf00      	nop
 800c0b0:	2000190e 	.word	0x2000190e

0800c0b4 <__sinit>:
 800c0b4:	b510      	push	{r4, lr}
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	f7ff fff0 	bl	800c09c <__sinit_lock_acquire>
 800c0bc:	69a3      	ldr	r3, [r4, #24]
 800c0be:	b11b      	cbz	r3, 800c0c8 <__sinit+0x14>
 800c0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0c4:	f7ff bff0 	b.w	800c0a8 <__sinit_lock_release>
 800c0c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c0cc:	6523      	str	r3, [r4, #80]	; 0x50
 800c0ce:	4b13      	ldr	r3, [pc, #76]	; (800c11c <__sinit+0x68>)
 800c0d0:	4a13      	ldr	r2, [pc, #76]	; (800c120 <__sinit+0x6c>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c0d6:	42a3      	cmp	r3, r4
 800c0d8:	bf04      	itt	eq
 800c0da:	2301      	moveq	r3, #1
 800c0dc:	61a3      	streq	r3, [r4, #24]
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f000 f820 	bl	800c124 <__sfp>
 800c0e4:	6060      	str	r0, [r4, #4]
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f000 f81c 	bl	800c124 <__sfp>
 800c0ec:	60a0      	str	r0, [r4, #8]
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f000 f818 	bl	800c124 <__sfp>
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	60e0      	str	r0, [r4, #12]
 800c0f8:	2104      	movs	r1, #4
 800c0fa:	6860      	ldr	r0, [r4, #4]
 800c0fc:	f7ff ff82 	bl	800c004 <std>
 800c100:	68a0      	ldr	r0, [r4, #8]
 800c102:	2201      	movs	r2, #1
 800c104:	2109      	movs	r1, #9
 800c106:	f7ff ff7d 	bl	800c004 <std>
 800c10a:	68e0      	ldr	r0, [r4, #12]
 800c10c:	2202      	movs	r2, #2
 800c10e:	2112      	movs	r1, #18
 800c110:	f7ff ff78 	bl	800c004 <std>
 800c114:	2301      	movs	r3, #1
 800c116:	61a3      	str	r3, [r4, #24]
 800c118:	e7d2      	b.n	800c0c0 <__sinit+0xc>
 800c11a:	bf00      	nop
 800c11c:	0800c508 	.word	0x0800c508
 800c120:	0800c04d 	.word	0x0800c04d

0800c124 <__sfp>:
 800c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c126:	4607      	mov	r7, r0
 800c128:	f7ff ffac 	bl	800c084 <__sfp_lock_acquire>
 800c12c:	4b1e      	ldr	r3, [pc, #120]	; (800c1a8 <__sfp+0x84>)
 800c12e:	681e      	ldr	r6, [r3, #0]
 800c130:	69b3      	ldr	r3, [r6, #24]
 800c132:	b913      	cbnz	r3, 800c13a <__sfp+0x16>
 800c134:	4630      	mov	r0, r6
 800c136:	f7ff ffbd 	bl	800c0b4 <__sinit>
 800c13a:	3648      	adds	r6, #72	; 0x48
 800c13c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c140:	3b01      	subs	r3, #1
 800c142:	d503      	bpl.n	800c14c <__sfp+0x28>
 800c144:	6833      	ldr	r3, [r6, #0]
 800c146:	b30b      	cbz	r3, 800c18c <__sfp+0x68>
 800c148:	6836      	ldr	r6, [r6, #0]
 800c14a:	e7f7      	b.n	800c13c <__sfp+0x18>
 800c14c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c150:	b9d5      	cbnz	r5, 800c188 <__sfp+0x64>
 800c152:	4b16      	ldr	r3, [pc, #88]	; (800c1ac <__sfp+0x88>)
 800c154:	60e3      	str	r3, [r4, #12]
 800c156:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c15a:	6665      	str	r5, [r4, #100]	; 0x64
 800c15c:	f000 f847 	bl	800c1ee <__retarget_lock_init_recursive>
 800c160:	f7ff ff96 	bl	800c090 <__sfp_lock_release>
 800c164:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c168:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c16c:	6025      	str	r5, [r4, #0]
 800c16e:	61a5      	str	r5, [r4, #24]
 800c170:	2208      	movs	r2, #8
 800c172:	4629      	mov	r1, r5
 800c174:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c178:	f7fd faae 	bl	80096d8 <memset>
 800c17c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c180:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c184:	4620      	mov	r0, r4
 800c186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c188:	3468      	adds	r4, #104	; 0x68
 800c18a:	e7d9      	b.n	800c140 <__sfp+0x1c>
 800c18c:	2104      	movs	r1, #4
 800c18e:	4638      	mov	r0, r7
 800c190:	f7ff ff62 	bl	800c058 <__sfmoreglue>
 800c194:	4604      	mov	r4, r0
 800c196:	6030      	str	r0, [r6, #0]
 800c198:	2800      	cmp	r0, #0
 800c19a:	d1d5      	bne.n	800c148 <__sfp+0x24>
 800c19c:	f7ff ff78 	bl	800c090 <__sfp_lock_release>
 800c1a0:	230c      	movs	r3, #12
 800c1a2:	603b      	str	r3, [r7, #0]
 800c1a4:	e7ee      	b.n	800c184 <__sfp+0x60>
 800c1a6:	bf00      	nop
 800c1a8:	0800c508 	.word	0x0800c508
 800c1ac:	ffff0001 	.word	0xffff0001

0800c1b0 <_fwalk_reent>:
 800c1b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1b4:	4606      	mov	r6, r0
 800c1b6:	4688      	mov	r8, r1
 800c1b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c1bc:	2700      	movs	r7, #0
 800c1be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1c2:	f1b9 0901 	subs.w	r9, r9, #1
 800c1c6:	d505      	bpl.n	800c1d4 <_fwalk_reent+0x24>
 800c1c8:	6824      	ldr	r4, [r4, #0]
 800c1ca:	2c00      	cmp	r4, #0
 800c1cc:	d1f7      	bne.n	800c1be <_fwalk_reent+0xe>
 800c1ce:	4638      	mov	r0, r7
 800c1d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1d4:	89ab      	ldrh	r3, [r5, #12]
 800c1d6:	2b01      	cmp	r3, #1
 800c1d8:	d907      	bls.n	800c1ea <_fwalk_reent+0x3a>
 800c1da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	d003      	beq.n	800c1ea <_fwalk_reent+0x3a>
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	47c0      	blx	r8
 800c1e8:	4307      	orrs	r7, r0
 800c1ea:	3568      	adds	r5, #104	; 0x68
 800c1ec:	e7e9      	b.n	800c1c2 <_fwalk_reent+0x12>

0800c1ee <__retarget_lock_init_recursive>:
 800c1ee:	4770      	bx	lr

0800c1f0 <__retarget_lock_acquire_recursive>:
 800c1f0:	4770      	bx	lr

0800c1f2 <__retarget_lock_release_recursive>:
 800c1f2:	4770      	bx	lr

0800c1f4 <__swhatbuf_r>:
 800c1f4:	b570      	push	{r4, r5, r6, lr}
 800c1f6:	460e      	mov	r6, r1
 800c1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1fc:	2900      	cmp	r1, #0
 800c1fe:	b096      	sub	sp, #88	; 0x58
 800c200:	4614      	mov	r4, r2
 800c202:	461d      	mov	r5, r3
 800c204:	da08      	bge.n	800c218 <__swhatbuf_r+0x24>
 800c206:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c20a:	2200      	movs	r2, #0
 800c20c:	602a      	str	r2, [r5, #0]
 800c20e:	061a      	lsls	r2, r3, #24
 800c210:	d410      	bmi.n	800c234 <__swhatbuf_r+0x40>
 800c212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c216:	e00e      	b.n	800c236 <__swhatbuf_r+0x42>
 800c218:	466a      	mov	r2, sp
 800c21a:	f000 f903 	bl	800c424 <_fstat_r>
 800c21e:	2800      	cmp	r0, #0
 800c220:	dbf1      	blt.n	800c206 <__swhatbuf_r+0x12>
 800c222:	9a01      	ldr	r2, [sp, #4]
 800c224:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c228:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c22c:	425a      	negs	r2, r3
 800c22e:	415a      	adcs	r2, r3
 800c230:	602a      	str	r2, [r5, #0]
 800c232:	e7ee      	b.n	800c212 <__swhatbuf_r+0x1e>
 800c234:	2340      	movs	r3, #64	; 0x40
 800c236:	2000      	movs	r0, #0
 800c238:	6023      	str	r3, [r4, #0]
 800c23a:	b016      	add	sp, #88	; 0x58
 800c23c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c240 <__smakebuf_r>:
 800c240:	898b      	ldrh	r3, [r1, #12]
 800c242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c244:	079d      	lsls	r5, r3, #30
 800c246:	4606      	mov	r6, r0
 800c248:	460c      	mov	r4, r1
 800c24a:	d507      	bpl.n	800c25c <__smakebuf_r+0x1c>
 800c24c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c250:	6023      	str	r3, [r4, #0]
 800c252:	6123      	str	r3, [r4, #16]
 800c254:	2301      	movs	r3, #1
 800c256:	6163      	str	r3, [r4, #20]
 800c258:	b002      	add	sp, #8
 800c25a:	bd70      	pop	{r4, r5, r6, pc}
 800c25c:	ab01      	add	r3, sp, #4
 800c25e:	466a      	mov	r2, sp
 800c260:	f7ff ffc8 	bl	800c1f4 <__swhatbuf_r>
 800c264:	9900      	ldr	r1, [sp, #0]
 800c266:	4605      	mov	r5, r0
 800c268:	4630      	mov	r0, r6
 800c26a:	f7ff f963 	bl	800b534 <_malloc_r>
 800c26e:	b948      	cbnz	r0, 800c284 <__smakebuf_r+0x44>
 800c270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c274:	059a      	lsls	r2, r3, #22
 800c276:	d4ef      	bmi.n	800c258 <__smakebuf_r+0x18>
 800c278:	f023 0303 	bic.w	r3, r3, #3
 800c27c:	f043 0302 	orr.w	r3, r3, #2
 800c280:	81a3      	strh	r3, [r4, #12]
 800c282:	e7e3      	b.n	800c24c <__smakebuf_r+0xc>
 800c284:	4b0d      	ldr	r3, [pc, #52]	; (800c2bc <__smakebuf_r+0x7c>)
 800c286:	62b3      	str	r3, [r6, #40]	; 0x28
 800c288:	89a3      	ldrh	r3, [r4, #12]
 800c28a:	6020      	str	r0, [r4, #0]
 800c28c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c290:	81a3      	strh	r3, [r4, #12]
 800c292:	9b00      	ldr	r3, [sp, #0]
 800c294:	6163      	str	r3, [r4, #20]
 800c296:	9b01      	ldr	r3, [sp, #4]
 800c298:	6120      	str	r0, [r4, #16]
 800c29a:	b15b      	cbz	r3, 800c2b4 <__smakebuf_r+0x74>
 800c29c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	f000 f8d1 	bl	800c448 <_isatty_r>
 800c2a6:	b128      	cbz	r0, 800c2b4 <__smakebuf_r+0x74>
 800c2a8:	89a3      	ldrh	r3, [r4, #12]
 800c2aa:	f023 0303 	bic.w	r3, r3, #3
 800c2ae:	f043 0301 	orr.w	r3, r3, #1
 800c2b2:	81a3      	strh	r3, [r4, #12]
 800c2b4:	89a0      	ldrh	r0, [r4, #12]
 800c2b6:	4305      	orrs	r5, r0
 800c2b8:	81a5      	strh	r5, [r4, #12]
 800c2ba:	e7cd      	b.n	800c258 <__smakebuf_r+0x18>
 800c2bc:	0800c04d 	.word	0x0800c04d

0800c2c0 <_malloc_usable_size_r>:
 800c2c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2c4:	1f18      	subs	r0, r3, #4
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	bfbc      	itt	lt
 800c2ca:	580b      	ldrlt	r3, [r1, r0]
 800c2cc:	18c0      	addlt	r0, r0, r3
 800c2ce:	4770      	bx	lr

0800c2d0 <_raise_r>:
 800c2d0:	291f      	cmp	r1, #31
 800c2d2:	b538      	push	{r3, r4, r5, lr}
 800c2d4:	4604      	mov	r4, r0
 800c2d6:	460d      	mov	r5, r1
 800c2d8:	d904      	bls.n	800c2e4 <_raise_r+0x14>
 800c2da:	2316      	movs	r3, #22
 800c2dc:	6003      	str	r3, [r0, #0]
 800c2de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2e2:	bd38      	pop	{r3, r4, r5, pc}
 800c2e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c2e6:	b112      	cbz	r2, 800c2ee <_raise_r+0x1e>
 800c2e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2ec:	b94b      	cbnz	r3, 800c302 <_raise_r+0x32>
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f000 f830 	bl	800c354 <_getpid_r>
 800c2f4:	462a      	mov	r2, r5
 800c2f6:	4601      	mov	r1, r0
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2fe:	f000 b817 	b.w	800c330 <_kill_r>
 800c302:	2b01      	cmp	r3, #1
 800c304:	d00a      	beq.n	800c31c <_raise_r+0x4c>
 800c306:	1c59      	adds	r1, r3, #1
 800c308:	d103      	bne.n	800c312 <_raise_r+0x42>
 800c30a:	2316      	movs	r3, #22
 800c30c:	6003      	str	r3, [r0, #0]
 800c30e:	2001      	movs	r0, #1
 800c310:	e7e7      	b.n	800c2e2 <_raise_r+0x12>
 800c312:	2400      	movs	r4, #0
 800c314:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c318:	4628      	mov	r0, r5
 800c31a:	4798      	blx	r3
 800c31c:	2000      	movs	r0, #0
 800c31e:	e7e0      	b.n	800c2e2 <_raise_r+0x12>

0800c320 <raise>:
 800c320:	4b02      	ldr	r3, [pc, #8]	; (800c32c <raise+0xc>)
 800c322:	4601      	mov	r1, r0
 800c324:	6818      	ldr	r0, [r3, #0]
 800c326:	f7ff bfd3 	b.w	800c2d0 <_raise_r>
 800c32a:	bf00      	nop
 800c32c:	2000000c 	.word	0x2000000c

0800c330 <_kill_r>:
 800c330:	b538      	push	{r3, r4, r5, lr}
 800c332:	4d07      	ldr	r5, [pc, #28]	; (800c350 <_kill_r+0x20>)
 800c334:	2300      	movs	r3, #0
 800c336:	4604      	mov	r4, r0
 800c338:	4608      	mov	r0, r1
 800c33a:	4611      	mov	r1, r2
 800c33c:	602b      	str	r3, [r5, #0]
 800c33e:	f7f6 fcbf 	bl	8002cc0 <_kill>
 800c342:	1c43      	adds	r3, r0, #1
 800c344:	d102      	bne.n	800c34c <_kill_r+0x1c>
 800c346:	682b      	ldr	r3, [r5, #0]
 800c348:	b103      	cbz	r3, 800c34c <_kill_r+0x1c>
 800c34a:	6023      	str	r3, [r4, #0]
 800c34c:	bd38      	pop	{r3, r4, r5, pc}
 800c34e:	bf00      	nop
 800c350:	20001908 	.word	0x20001908

0800c354 <_getpid_r>:
 800c354:	f7f6 bcac 	b.w	8002cb0 <_getpid>

0800c358 <__sread>:
 800c358:	b510      	push	{r4, lr}
 800c35a:	460c      	mov	r4, r1
 800c35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c360:	f000 f894 	bl	800c48c <_read_r>
 800c364:	2800      	cmp	r0, #0
 800c366:	bfab      	itete	ge
 800c368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c36a:	89a3      	ldrhlt	r3, [r4, #12]
 800c36c:	181b      	addge	r3, r3, r0
 800c36e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c372:	bfac      	ite	ge
 800c374:	6563      	strge	r3, [r4, #84]	; 0x54
 800c376:	81a3      	strhlt	r3, [r4, #12]
 800c378:	bd10      	pop	{r4, pc}

0800c37a <__swrite>:
 800c37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c37e:	461f      	mov	r7, r3
 800c380:	898b      	ldrh	r3, [r1, #12]
 800c382:	05db      	lsls	r3, r3, #23
 800c384:	4605      	mov	r5, r0
 800c386:	460c      	mov	r4, r1
 800c388:	4616      	mov	r6, r2
 800c38a:	d505      	bpl.n	800c398 <__swrite+0x1e>
 800c38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c390:	2302      	movs	r3, #2
 800c392:	2200      	movs	r2, #0
 800c394:	f000 f868 	bl	800c468 <_lseek_r>
 800c398:	89a3      	ldrh	r3, [r4, #12]
 800c39a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c39e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3a2:	81a3      	strh	r3, [r4, #12]
 800c3a4:	4632      	mov	r2, r6
 800c3a6:	463b      	mov	r3, r7
 800c3a8:	4628      	mov	r0, r5
 800c3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ae:	f000 b817 	b.w	800c3e0 <_write_r>

0800c3b2 <__sseek>:
 800c3b2:	b510      	push	{r4, lr}
 800c3b4:	460c      	mov	r4, r1
 800c3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ba:	f000 f855 	bl	800c468 <_lseek_r>
 800c3be:	1c43      	adds	r3, r0, #1
 800c3c0:	89a3      	ldrh	r3, [r4, #12]
 800c3c2:	bf15      	itete	ne
 800c3c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3ce:	81a3      	strheq	r3, [r4, #12]
 800c3d0:	bf18      	it	ne
 800c3d2:	81a3      	strhne	r3, [r4, #12]
 800c3d4:	bd10      	pop	{r4, pc}

0800c3d6 <__sclose>:
 800c3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3da:	f000 b813 	b.w	800c404 <_close_r>
	...

0800c3e0 <_write_r>:
 800c3e0:	b538      	push	{r3, r4, r5, lr}
 800c3e2:	4d07      	ldr	r5, [pc, #28]	; (800c400 <_write_r+0x20>)
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	4608      	mov	r0, r1
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	602a      	str	r2, [r5, #0]
 800c3ee:	461a      	mov	r2, r3
 800c3f0:	f7f6 fc9d 	bl	8002d2e <_write>
 800c3f4:	1c43      	adds	r3, r0, #1
 800c3f6:	d102      	bne.n	800c3fe <_write_r+0x1e>
 800c3f8:	682b      	ldr	r3, [r5, #0]
 800c3fa:	b103      	cbz	r3, 800c3fe <_write_r+0x1e>
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	bd38      	pop	{r3, r4, r5, pc}
 800c400:	20001908 	.word	0x20001908

0800c404 <_close_r>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	4d06      	ldr	r5, [pc, #24]	; (800c420 <_close_r+0x1c>)
 800c408:	2300      	movs	r3, #0
 800c40a:	4604      	mov	r4, r0
 800c40c:	4608      	mov	r0, r1
 800c40e:	602b      	str	r3, [r5, #0]
 800c410:	f7f6 fca9 	bl	8002d66 <_close>
 800c414:	1c43      	adds	r3, r0, #1
 800c416:	d102      	bne.n	800c41e <_close_r+0x1a>
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	b103      	cbz	r3, 800c41e <_close_r+0x1a>
 800c41c:	6023      	str	r3, [r4, #0]
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
 800c420:	20001908 	.word	0x20001908

0800c424 <_fstat_r>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	4d07      	ldr	r5, [pc, #28]	; (800c444 <_fstat_r+0x20>)
 800c428:	2300      	movs	r3, #0
 800c42a:	4604      	mov	r4, r0
 800c42c:	4608      	mov	r0, r1
 800c42e:	4611      	mov	r1, r2
 800c430:	602b      	str	r3, [r5, #0]
 800c432:	f7f6 fca4 	bl	8002d7e <_fstat>
 800c436:	1c43      	adds	r3, r0, #1
 800c438:	d102      	bne.n	800c440 <_fstat_r+0x1c>
 800c43a:	682b      	ldr	r3, [r5, #0]
 800c43c:	b103      	cbz	r3, 800c440 <_fstat_r+0x1c>
 800c43e:	6023      	str	r3, [r4, #0]
 800c440:	bd38      	pop	{r3, r4, r5, pc}
 800c442:	bf00      	nop
 800c444:	20001908 	.word	0x20001908

0800c448 <_isatty_r>:
 800c448:	b538      	push	{r3, r4, r5, lr}
 800c44a:	4d06      	ldr	r5, [pc, #24]	; (800c464 <_isatty_r+0x1c>)
 800c44c:	2300      	movs	r3, #0
 800c44e:	4604      	mov	r4, r0
 800c450:	4608      	mov	r0, r1
 800c452:	602b      	str	r3, [r5, #0]
 800c454:	f7f6 fca3 	bl	8002d9e <_isatty>
 800c458:	1c43      	adds	r3, r0, #1
 800c45a:	d102      	bne.n	800c462 <_isatty_r+0x1a>
 800c45c:	682b      	ldr	r3, [r5, #0]
 800c45e:	b103      	cbz	r3, 800c462 <_isatty_r+0x1a>
 800c460:	6023      	str	r3, [r4, #0]
 800c462:	bd38      	pop	{r3, r4, r5, pc}
 800c464:	20001908 	.word	0x20001908

0800c468 <_lseek_r>:
 800c468:	b538      	push	{r3, r4, r5, lr}
 800c46a:	4d07      	ldr	r5, [pc, #28]	; (800c488 <_lseek_r+0x20>)
 800c46c:	4604      	mov	r4, r0
 800c46e:	4608      	mov	r0, r1
 800c470:	4611      	mov	r1, r2
 800c472:	2200      	movs	r2, #0
 800c474:	602a      	str	r2, [r5, #0]
 800c476:	461a      	mov	r2, r3
 800c478:	f7f6 fc9c 	bl	8002db4 <_lseek>
 800c47c:	1c43      	adds	r3, r0, #1
 800c47e:	d102      	bne.n	800c486 <_lseek_r+0x1e>
 800c480:	682b      	ldr	r3, [r5, #0]
 800c482:	b103      	cbz	r3, 800c486 <_lseek_r+0x1e>
 800c484:	6023      	str	r3, [r4, #0]
 800c486:	bd38      	pop	{r3, r4, r5, pc}
 800c488:	20001908 	.word	0x20001908

0800c48c <_read_r>:
 800c48c:	b538      	push	{r3, r4, r5, lr}
 800c48e:	4d07      	ldr	r5, [pc, #28]	; (800c4ac <_read_r+0x20>)
 800c490:	4604      	mov	r4, r0
 800c492:	4608      	mov	r0, r1
 800c494:	4611      	mov	r1, r2
 800c496:	2200      	movs	r2, #0
 800c498:	602a      	str	r2, [r5, #0]
 800c49a:	461a      	mov	r2, r3
 800c49c:	f7f6 fc2a 	bl	8002cf4 <_read>
 800c4a0:	1c43      	adds	r3, r0, #1
 800c4a2:	d102      	bne.n	800c4aa <_read_r+0x1e>
 800c4a4:	682b      	ldr	r3, [r5, #0]
 800c4a6:	b103      	cbz	r3, 800c4aa <_read_r+0x1e>
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	bd38      	pop	{r3, r4, r5, pc}
 800c4ac:	20001908 	.word	0x20001908

0800c4b0 <_init>:
 800c4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b2:	bf00      	nop
 800c4b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4b6:	bc08      	pop	{r3}
 800c4b8:	469e      	mov	lr, r3
 800c4ba:	4770      	bx	lr

0800c4bc <_fini>:
 800c4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4be:	bf00      	nop
 800c4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4c2:	bc08      	pop	{r3}
 800c4c4:	469e      	mov	lr, r3
 800c4c6:	4770      	bx	lr
